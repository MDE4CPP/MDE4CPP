//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef TYPESPLUGINIMPL_HPP
#define TYPESPLUGINIMPL_HPP

// namespace macro header include
#include "types/types.hpp"

#include "types/typesPlugin.hpp"

namespace types 
{
	class TYPES_API typesPluginImpl : virtual public typesPlugin 
	{
		public:	
			virtual ~typesPluginImpl();
			virtual std::string eclipseURI();
			virtual std::string eNAME();
			virtual std::string eNS_URI();
			virtual std::string eNS_PREFIX();
		
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name) const;
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EFactory> getEFactory();
			virtual std::shared_ptr<ecore::EPackage> getEPackage();

			virtual std::shared_ptr<typesPackage> gettypesPackage();
			virtual std::shared_ptr<typesFactory> gettypesFactory();
		protected:
			typesPluginImpl();
			friend std::shared_ptr<typesPlugin> typesPlugin::eInstance();
			std::shared_ptr<typesPackage> m_typesPackage = nullptr;
			std::shared_ptr<typesFactory> m_typesFactory = nullptr;

	};
}
#endif /* end of include guard: TYPESPLUGINIMPL_HPP */
