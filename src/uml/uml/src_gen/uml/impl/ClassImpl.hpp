//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CLASSCLASSIMPL_HPP
#define UML_CLASSCLASSIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Class.hpp"

#include "uml/impl/BehavioredClassifierImpl.hpp"
#include "uml/impl/EncapsulatedClassifierImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ClassImpl : virtual public BehavioredClassifierImpl, virtual public EncapsulatedClassifierImpl, virtual public Class 
	{
		public: 
			ClassImpl(const ClassImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ClassImpl& operator=(ClassImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ClassImpl();
			virtual std::shared_ptr<uml::Class> getThisClassPtr() const;
			virtual void setThisClassPtr(std::weak_ptr<uml::Class> thisClassPtr);

			//Additional constructors for the containments back reference
			ClassImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ClassImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			ClassImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id);
			//Additional constructors for the containments back reference
			ClassImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);
			//Additional constructors for the containments back reference

		public:
			//destructor
			virtual ~ClassImpl();
			
			//*********************************
			// Operations
			//*********************************
			virtual std::shared_ptr<Bag<uml::Operation>> getAllOperations() ;
			/*!
			Derivation for Class::/extension : Extension
			result = (Extension.allInstances()->select(ext | 
			  let endTypes : Sequence(Classifier) = ext.memberEnd->collect(type.oclAsType(Classifier)) in
			  endTypes->includes(self) or endTypes.allParents()->includes(self) ))
			<p>From package UML::StructuredClassifiers.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::Extension>> getExtensions() ;
			/*!
			Derivation for Class::/superClass : Class
			result = (self.general()->select(oclIsKindOf(Class))->collect(oclAsType(Class))->asSet())
			<p>From package UML::StructuredClassifiers.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::Class>> getSuperClasses() ;
			/*!
			Determines whether this class is a metaclass.
			*/
			 
			virtual bool isMetaclass() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			 
			virtual bool getIsActive() const ;
			/*!
			Determines whether an object specified by this Class is active or not. If true, then the owning Class is referred to as an active Class. If false, then such a Class is referred to as a passive Class.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			 
			virtual void setIsActive (bool _isActive);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			This property is used when the Class is acting as a metaclass. It references the Extensions that specify additional properties of the metaclass. The property is derived from the Extensions whose memberEnds are typed by the Class.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::Extension>>& getExtension() const ;
			/*!
			The Classifiers owned by the Class that are not ownedBehaviors.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Classifier, uml::NamedElement>>& getNestedClassifier() const ;
			virtual std::shared_ptr<Subset<uml::Property, uml::ConnectableElement, uml::NamedElement, uml::Property>> getClass_OwnedAttribute() const ;
			/*!
			The Operations owned by the Class.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Operation, uml::Feature, uml::NamedElement>>& getOwnedOperation() const ;
			/*!
			The Receptions owned by the Class.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Reception, uml::Feature, uml::NamedElement>>& getOwnedReception() const ;
			/*!
			The superclasses of a Class, derived from its Generalizations.
			<p>From package UML::StructuredClassifiers.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Class>> getSuperClass() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::Class> m_thisClassPtr;
	};
}
#endif /* end of include guard: UML_CLASSCLASSIMPL_HPP */
