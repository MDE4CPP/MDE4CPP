[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateDataTypeInterfaceHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::components::generateDataType /]

[query private includes(aDataType : DataType) : Set(Type) = Set(Type)
{
	aDataType.ownedAttribute.type,
	aDataType.ownedOperation.ownedParameter.type
}->flatten() /]


[template public generateDataTypeInterfaceHeader(aDataType : DataType) {containingPackage : Package = aDataType.ancestors()->filter(Package)->first();}]
[file (containingPackage.generateNamespacePath(false) + '/' + aDataType.name.toUpperFirst() + '.hpp', false, 'UTF-8')]
[startGuard(aDataType)/]

[generateAbstractDataTypesForwardDeclaration()/]

[if (not aDataType.getRootPackage().allOwnedElements()->filter(Usage)->isEmpty())]
//********************
// usage
[for (usages : Usage| aDataType.getRootPackage().allOwnedElements()->filter(Usage)->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (not (usages.supplier.name->asOrderedSet()->first() = aDataType.name))]
#include "[usages.getNearestPackage().generateNamespacePath(false)/]/[usages.supplier.name/].hpp"
[/if][/for][/if]

[let classifiersForForwardDeclaration : Set(Classifier) = Set
{
	aDataType.includes()->filter(Class),
	aDataType.includes()->filter(Interface),
	aDataType.includes()->selectByType(DataType)
}->flatten()]
	[if (classifiersForForwardDeclaration->size() > 0)]
//Forward declarations for used types
		[for (aPackage : Package | classifiersForForwardDeclaration.getNearestPackage()->sortedBy(name))]
			[if (not aPackage.isIgnoreNamespace())]
namespace [aPackage.generateNamespace(true)/] 
{
			[/if]
			[for (aClassifier : Classifier | classifiersForForwardDeclaration->select(c : Classifier | getNearestPackage() = aPackage))]
class [aClassifier.name.toUpperFirst()/];
			[/for]
			[if (not aPackage.isIgnoreNamespace())]
}
			[/if]
		[/for]
	[/if]
[/let]

// base class includes
[if (aDataType.general->isEmpty())]
#include "uml/[aDataType.getGeneralSuperClassName()/].hpp"
[else]
[for (general : Classifier| aDataType.general->asOrderedSet()->sortedBy(myQualifiedName()))]
#include "[general.getNearestPackage().generateNamespacePath(false)/]/[general.name.toUpperFirst().concat('.hpp')/]"
[/for]
[/if]

[if (not aDataType.directlyRealizedInterfaces()->isEmpty())]
// Interface realization
[for (aNamedElement : NamedElement | aDataType.directlyRealizedInterfaces()->select(not oclIsUndefined() and not name.oclIsUndefined()))]
#include "[aNamedElement.getNearestPackage().generateNamespacePath(false)/]/[aNamedElement.name.toUpperFirst()/].hpp"
[/for]
[/if]

[if (aDataType.includes()->selectByKind(Enumeration)->size() > 0)]
// enum includes
[for (elements : Enumeration | aDataType.includes()->selectByKind(Enumeration)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.toUpperFirst().concat('.hpp')/]"[/for]
[/if]

[if (not aDataType.getNearestPackage().isIgnoreNamespace())]
namespace [containingPackage.generateNamespace(false)/]
{
[/if]
	struct [aDataType.name.toUpperFirst()/] [if (aDataType.general->isEmpty())] : virtual public uml::[aDataType.getGeneralSuperClassName()/] [aDataType.generateInterfaceExtensions()/]
[else][for (general : Classifier | aDataType.general->reject(oclIsUndefined() and name.oclIsUndefined())->asOrderedSet()->sortedBy(myQualifiedName())) before (':') separator (',')]
virtual public [general.getClassifierName(aDataType, false, general.getNearestPackage().isIgnoreNamespace())/][/for]
[/if]
	{
		protected:
			[aDataType.name.toUpperFirst()/](){}

		public:
			//destructor
			virtual ~[aDataType.name.toUpperFirst()/]() {}

			//*********************************
			// Getter Setter
			//*********************************
			[aDataType.ownedAttribute->sortedBy(name).generateAttributeAccessorsDeclaration(false)/]
			
			//*********************************
			// Operations
			//*********************************
			[for (anOperation : Operation | aDataType.ownedOperation->sortedBy(name)) before('\t\t\t//Methods defined by Operations\n') after('\n')]
			[anOperation.generateOperationDecl(false)/]
			[/for]
		protected:
			//*********************************
			// Members
			//*********************************
			[aDataType.ownedAttribute->sortedBy(name).generateAttributeProtectedMember()/]

		public:
			//*********************************
			// Union Getter
			//*********************************
			[aDataType.generateUnionGetterDeclaretaion(false)/]	
	};
[if (not aDataType.getNearestPackage().isIgnoreNamespace())]}[/if]
[endGuard(aDataType)/]
[/file]
[/template]
