<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xmi:id="_PmmP8LAqEeert7O7oCVCsA" name="DelegationPort_P">
  <eAnnotations xmi:id="_otFUEFgQEeqZPe2oHCHy2Q" source="prepareApplication">
    <details xmi:id="_qWW_AFgQEeqZPe2oHCHy2Q" key="sourceCodeMain" value="std::cout&lt;&lt;&quot;-- Test model : Delegation between a port and a part&quot;&lt;&lt;std::endl;&#xA;&#xA;std::shared_ptr&lt;DelegationPort_P::Tester> tester = factory->createTester();&#xA;&#xA;std::cout&lt;&lt;&quot;-- Running test case: Delegation connector between a port and a part --&quot;&lt;&lt;std::endl;&#xA;std::cout&lt;&lt;std::endl;&#xA;&#xA;tester->runTestCase();&#xA;&#xA;std::cout&lt;&lt;std::endl;&#xA;std::cout&lt;&lt;&quot;-- End of test case --&quot;&lt;&lt;std::endl;"/>
  </eAnnotations>
  <ownedComment xmi:id="_zmp2IKGEEeq_jPVfGA6A8w">
    <body>This test case addresses instantiation semantics in the case of a delegation connector between a port and a part.</body>
  </ownedComment>
  <packageImport xmi:id="_rgWIkLArEeert7O7oCVCsA">
    <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
  </packageImport>
  <packagedElement xmi:type="uml:Class" xmi:id="_z6HwQO9BEemWP7t7cfH8xA" name="A_Empty_Pattern">
    <ownedComment xmi:id="_6GtOUO9BEemWP7t7cfH8xA">
      <body>Empty pattern:
lower bound of port p and part b is 0</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_eFiekFl5EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gHxcEFl5EeqCEpOYlPRuRQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gSEAgFl5EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_u8DPkO9IEemWP7t7cfH8xA" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yr6zkO9IEemWP7t7cfH8xA"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0CIYkO9IEemWP7t7cfH8xA" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="_5Dm2APEXEem6OrjQXRieKQ" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="_ASU0kPEaEem6OrjQXRieKQ" role="_eFiekFl5EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_HAZPEPEaEem6OrjQXRieKQ" name="connectorEnd_1_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_H5WQUPEaEem6OrjQXRieKQ" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="_AzlHgPEaEem6OrjQXRieKQ" role="_u8DPkO9IEemWP7t7cfH8xA">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_I81GkPEaEem6OrjQXRieKQ" name="connectorEnd_2_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_KKi24PEaEem6OrjQXRieKQ" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_bfcP8FIvEeq4WpdDJnu9kg" name="A_Unconnected_Pattern">
    <ownedComment xmi:id="_bfcP8VIvEeq4WpdDJnu9kg">
      <body>Unconnected pattern:
lower bound on ends of connector r is 0</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_7smDAFl5EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_BxMpwFl6EeqCEpOYlPRuRQ" value="3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_B6cFUFl6EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_bfcP8lIvEeq4WpdDJnu9kg" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bfcP81IvEeq4WpdDJnu9kg" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bfcP9FIvEeq4WpdDJnu9kg" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="_bfcP-FIvEeq4WpdDJnu9kg" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="_bfcP-VIvEeq4WpdDJnu9kg" role="_7smDAFl5EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bfcP-lIvEeq4WpdDJnu9kg" name="connectorEnd_1_Lower"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bfcP-1IvEeq4WpdDJnu9kg" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="_bfcP_FIvEeq4WpdDJnu9kg" role="_bfcP8lIvEeq4WpdDJnu9kg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bfcP_VIvEeq4WpdDJnu9kg" name="connectorEnd_2_Lower"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bfcP_lIvEeq4WpdDJnu9kg" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_rZJ6oFIvEeq4WpdDJnu9kg" name="A_Array_Pattern">
    <ownedComment xmi:id="_rZJ6oVIvEeq4WpdDJnu9kg">
      <body>Array pattern:
lower bound of p and b are equals
lower bound on ends of connector r is 1</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_PPNHAFl6EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Q8E4gFl6EeqCEpOYlPRuRQ" value="4"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RJfCYFl6EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_rZJ6olIvEeq4WpdDJnu9kg" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rZJ6o1IvEeq4WpdDJnu9kg" value="4"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rZJ6pFIvEeq4WpdDJnu9kg" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="_rZJ6qFIvEeq4WpdDJnu9kg" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="_rZJ6qVIvEeq4WpdDJnu9kg" role="_PPNHAFl6EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rZJ6qlIvEeq4WpdDJnu9kg" name="connectorEnd_1_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rZJ6q1IvEeq4WpdDJnu9kg" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="_rZJ6rFIvEeq4WpdDJnu9kg" role="_rZJ6olIvEeq4WpdDJnu9kg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rZJ6rVIvEeq4WpdDJnu9kg" name="connectorEnd_2_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rZJ6rlIvEeq4WpdDJnu9kg" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="__fogsFIvEeq4WpdDJnu9kg" name="A_Star_Pattern">
    <ownedComment xmi:id="__fogsVIvEeq4WpdDJnu9kg">
      <body>Star pattern:
lower bound on ends of connector r equal lower
bound of connected elements</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_ZvnKsFl6EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c6t0wFl6EeqCEpOYlPRuRQ" value="3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dEsQIFl6EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="__fogslIvEeq4WpdDJnu9kg" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__fogs1IvEeq4WpdDJnu9kg" value="4"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__fogtFIvEeq4WpdDJnu9kg" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="__foguFIvEeq4WpdDJnu9kg" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="__foguVIvEeq4WpdDJnu9kg" role="_ZvnKsFl6EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__fogulIvEeq4WpdDJnu9kg" name="connectorEnd_1_Lower" value="3"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__fogu1IvEeq4WpdDJnu9kg" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="__fogvFIvEeq4WpdDJnu9kg" role="__fogslIvEeq4WpdDJnu9kg">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__fogvVIvEeq4WpdDJnu9kg" name="connectorEnd_2_Lower" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__fogvlIvEeq4WpdDJnu9kg" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_Mk9kQO9AEemWP7t7cfH8xA" name="B">
    <ownedAttribute xmi:id="_0bnz8FlyEeqCEpOYlPRuRQ" name="iImplementation" type="_ioHWEFlyEeqCEpOYlPRuRQ" association="_kQiBsO9AEemWP7t7cfH8xA">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_9LB0EFlyEeqCEpOYlPRuRQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_9jKnQFlyEeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <interfaceRealization xmi:id="_l0Gw8FlyEeqCEpOYlPRuRQ" name="interfaceRealizationI" client="_Mk9kQO9AEemWP7t7cfH8xA" supplier="_fUYUcFlyEeqCEpOYlPRuRQ" contract="_fUYUcFlyEeqCEpOYlPRuRQ"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_ioHWEFlyEeqCEpOYlPRuRQ" name="IImplementation">
    <ownedAttribute xmi:id="_CZ2pYFlzEeqCEpOYlPRuRQ" name="b" type="_Mk9kQO9AEemWP7t7cfH8xA" association="_kQiBsO9AEemWP7t7cfH8xA">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_EmguMFlzEeqCEpOYlPRuRQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_ExsDcFlzEeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <interfaceRealization xmi:id="_t3tbAFlyEeqCEpOYlPRuRQ" name="interfaceRealizationI" client="_ioHWEFlyEeqCEpOYlPRuRQ" supplier="_fUYUcFlyEeqCEpOYlPRuRQ" contract="_fUYUcFlyEeqCEpOYlPRuRQ"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Interface" xmi:id="_fUYUcFlyEeqCEpOYlPRuRQ" name="I"/>
  <packagedElement xmi:type="uml:Association" xmi:id="_kQiBsO9AEemWP7t7cfH8xA" name="R" memberEnd="_0bnz8FlyEeqCEpOYlPRuRQ _CZ2pYFlzEeqCEpOYlPRuRQ"/>
  <packagedElement xmi:type="uml:Class" xmi:id="_AX6AEFgQEeqZPe2oHCHy2Q" name="Tester">
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_6vTt8FgREeqZPe2oHCHy2Q" name="fbTestAEmptyPattern" specification="_N16ycFgSEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <language>INCLUDE</language>
      <body>std::cout&lt;&lt;&quot;-- Instantiation of A_Empty_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftFeatCardinality=0, rightFeatCardinality=0, rightEndCardinality=1, leftEndCardinality=1;&#xD;
&#xD;
bool successful = ((aEmptyPattern->getP()->size()) == leftFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aEmptyPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aEmptyPattern->getP()->at(i)->getB()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->b->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aEmptyPattern->getPartB()->size()) == rightFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aEmptyPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = ((aEmptyPattern->getPartB()->at(i)->getIImplementation()->size()) == leftEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->p->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Empty_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();</body>
      <body>#include &quot;DelegationPort_P/B.hpp&quot;&#xD;
#include &quot;DelegationPort_P/IImplementation.hpp&quot;</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_-aF9oFgREeqZPe2oHCHy2Q" name="fbTestAUnconnectedPattern" specification="_1_Kt0FgTEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <body>std::string compareString = &quot;\tp[0]     partB[0]\n\tp[0]     partB[1]\n\n\tp[1]     partB[0]\n\tp[1]     partB[1]\n\n\tp[2]     partB[0]\n\tp[2]     partB[1]\n\n&quot;;&#xD;
&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Unconnected_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftFeatCardinality=3, rightFeatCardinality=2, rightEndCardinality=0, leftEndCardinality=0;&#xD;
&#xD;
bool successful = ((aUnconnectedPattern->getP()->size()) == leftFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aUnconnectedPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aUnconnectedPattern->getP()->at(i)->getB()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->b->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aUnconnectedPattern->getPartB()->size()) == rightFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aUnconnectedPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = ((aUnconnectedPattern->getPartB()->at(i)->getIImplementation()->size()) == leftEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->p->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
std::string connectionsString = &quot;&quot;;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aUnconnectedPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPOfPattern = aUnconnectedPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aUnconnectedPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentBOfPattern = aUnconnectedPattern->getPartB()->at(j);&#xD;
		bool connected = false;&#xD;
&#xD;
		for(unsigned int k = 0; k &lt; currentPOfPattern->getB()->size() &amp;&amp; !connected; k++){&#xD;
			&#xD;
			std::shared_ptr&lt;B> currentBOfP = currentPOfPattern->getB()->at(k);&#xD;
			if(currentBOfPattern  == currentBOfP)&#xD;
			{	&#xD;
				for(unsigned int h=0; h &lt; currentBOfPattern->getIImplementation()->size() &amp;&amp; !connected; h++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentPOfB = currentBOfPattern->getIImplementation()->at(h);&#xD;
					if(!connected &amp;&amp; (currentPOfB == currentPOfPattern)) connected = true;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
		connectionsString += &quot;\tp[&quot;+std::to_string(i)+&quot;] &quot;+connectedString+&quot; partB[&quot;+std::to_string(j)+&quot;]\n&quot;;&#xD;
	}&#xD;
	connectionsString+=&quot;\n&quot;;&#xD;
}&#xD;
&#xD;
if(successful){&#xD;
	std::cout&lt;&lt;&quot;Links creation successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	std::cout&lt;&lt;connectionsString&lt;&lt;std::endl;&#xD;
}&#xD;
else{&#xD;
	std::cout&lt;&lt;&quot;Links creation successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;&quot;Created links are:&quot;&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;connectionsString&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;&quot;Created links should be:&quot;&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;compareString&lt;&lt;std::endl;&#xD;
}&#xD;
&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Unconnected_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();&#xD;
</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_CeMFMFgSEeqZPe2oHCHy2Q" name="fbTestAArrayPattern" specification="_-PQ7wFgTEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <body>std::string compareString = &quot;\tp[0] &lt;-> partB[0]\n\tp[0]     partB[1]\n\tp[0]     partB[2]\n\tp[0]     partB[3]\n\n\tp[1]     partB[0]\n\tp[1] &lt;-> partB[1]\n\tp[1]     partB[2]\n\tp[1]     partB[3]\n\n\tp[2]     partB[0]\n\tp[2]     partB[1]\n\tp[2] &lt;-> partB[2]\n\tp[2]     partB[3]\n\n\tp[3]     partB[0]\n\tp[3]     partB[1]\n\tp[3]     partB[2]\n\tp[3] &lt;-> partB[3]\n\n&quot;;&#xD;
&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Array_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftFeatCardinality=4, rightFeatCardinality=4, rightEndCardinality=1, leftEndCardinality=1;&#xD;
&#xD;
bool successful = ((aArrayPattern->getP()->size()) == leftFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aArrayPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aArrayPattern->getP()->at(i)->getB()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->b->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aArrayPattern->getPartB()->size()) == rightFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aArrayPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = ((aArrayPattern->getPartB()->at(i)->getIImplementation()->size()) == leftEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->p->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
std::string connectionsString = &quot;&quot;;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aArrayPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPOfPattern = aArrayPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aArrayPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentBOfPattern = aArrayPattern->getPartB()->at(j);&#xD;
		bool connected = false;&#xD;
&#xD;
		for(unsigned int k = 0; k &lt; currentPOfPattern->getB()->size() &amp;&amp; !connected; k++){&#xD;
			&#xD;
			std::shared_ptr&lt;B> currentBOfP = currentPOfPattern->getB()->at(k);&#xD;
			if(currentBOfPattern  == currentBOfP)&#xD;
			{	&#xD;
				for(unsigned int h=0; h &lt; currentBOfPattern->getIImplementation()->size() &amp;&amp; !connected; h++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentPOfB = currentBOfPattern->getIImplementation()->at(h);&#xD;
					if(!connected &amp;&amp; (currentPOfB == currentPOfPattern)) connected = true;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
		connectionsString += &quot;\tp[&quot;+std::to_string(i)+&quot;] &quot;+connectedString+&quot; partB[&quot;+std::to_string(j)+&quot;]\n&quot;;&#xD;
	}&#xD;
	connectionsString+=&quot;\n&quot;;&#xD;
}&#xD;
&#xD;
if(successful){&#xD;
	std::cout&lt;&lt;&quot;Links creation successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	std::cout&lt;&lt;connectionsString&lt;&lt;std::endl;&#xD;
}&#xD;
else{&#xD;
	std::cout&lt;&lt;&quot;Links creation successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;&quot;Created links are:&quot;&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;connectionsString&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;&quot;Created links should be:&quot;&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;compareString&lt;&lt;std::endl;&#xD;
}&#xD;
&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Array_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_EXuZsFgSEeqZPe2oHCHy2Q" name="fbTestAStarPattern" specification="_HVXkoFgUEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <body>std::string compareString = &quot;\tp[0] &lt;-> partB[0]\n\tp[0] &lt;-> partB[1]\n\tp[0] &lt;-> partB[2]\n\tp[0] &lt;-> partB[3]\n\n\tp[1] &lt;-> partB[0]\n\tp[1] &lt;-> partB[1]\n\tp[1] &lt;-> partB[2]\n\tp[1] &lt;-> partB[3]\n\n\tp[2] &lt;-> partB[0]\n\tp[2] &lt;-> partB[1]\n\tp[2] &lt;-> partB[2]\n\tp[2] &lt;-> partB[3]\n\n&quot;;&#xD;
&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Star_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftFeatCardinality=3, rightFeatCardinality=4, rightEndCardinality=4, leftEndCardinality=3;&#xD;
&#xD;
bool successful = ((aStarPattern->getP()->size()) == leftFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aStarPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aStarPattern->getP()->at(i)->getB()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->b->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aStarPattern->getPartB()->size()) == rightFeatCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightFeatCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aStarPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = ((aStarPattern->getPartB()->at(i)->getIImplementation()->size()) == leftEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->p->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
std::string connectionsString = &quot;&quot;;&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aStarPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPOfPattern = aStarPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aStarPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentBOfPattern = aStarPattern->getPartB()->at(j);&#xD;
		bool connected = false;&#xD;
&#xD;
		for(unsigned int k = 0; k &lt; currentPOfPattern->getB()->size() &amp;&amp; !connected; k++){&#xD;
			&#xD;
			std::shared_ptr&lt;B> currentBOfP = currentPOfPattern->getB()->at(k);&#xD;
			if(currentBOfPattern  == currentBOfP)&#xD;
			{	&#xD;
				for(unsigned int h=0; h &lt; currentBOfPattern->getIImplementation()->size() &amp;&amp; !connected; h++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentPOfB = currentBOfPattern->getIImplementation()->at(h);&#xD;
					if(!connected &amp;&amp; (currentPOfB == currentPOfPattern)) connected = true;&#xD;
				}&#xD;
			}&#xD;
		}&#xD;
		std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
		connectionsString += &quot;\tp[&quot;+std::to_string(i)+&quot;] &quot;+connectedString+&quot; partB[&quot;+std::to_string(j)+&quot;]\n&quot;;&#xD;
	}&#xD;
	connectionsString+=&quot;\n&quot;;&#xD;
}&#xD;
&#xD;
if(successful){&#xD;
	std::cout&lt;&lt;&quot;Links creation successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	std::cout&lt;&lt;connectionsString&lt;&lt;std::endl;&#xD;
}&#xD;
else{&#xD;
	std::cout&lt;&lt;&quot;Links creation successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;&quot;Created links are:&quot;&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;connectionsString&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;&quot;Created links should be:&quot;&lt;&lt;std::endl;&#xD;
	std::cout&lt;&lt;compareString&lt;&lt;std::endl;&#xD;
}&#xD;
&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Star_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();&#xD;
</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:Activity" xmi:id="_GTs4YI4vEeqm_eVeNYUZww" name="actRunTestCase" specification="_EpNFcI4vEeqm_eVeNYUZww" node="_Qn2owI4vEeqm_eVeNYUZww _SH1NwI4vEeqm_eVeNYUZww _Wi5D0I4vEeqm_eVeNYUZww _b4B8gI4vEeqm_eVeNYUZww _hjcnMI4vEeqm_eVeNYUZww _lj9PQI4vEeqm_eVeNYUZww _piBnUI4vEeqm_eVeNYUZww _xPgQYI4vEeqm_eVeNYUZww _3nlz0I4vEeqm_eVeNYUZww _9jntYI4vEeqm_eVeNYUZww">
      <edge xmi:type="uml:ControlFlow" xmi:id="_VUU-8I4vEeqm_eVeNYUZww" target="_SH1NwI4vEeqm_eVeNYUZww" source="_Qn2owI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_VUU-8Y4vEeqm_eVeNYUZww" name="Initial1_To_Fork1_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_VUVmAI4vEeqm_eVeNYUZww" name="Initial1_To_Fork1_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_DizBkI4wEeqm_eVeNYUZww" target="_xPgQYI4vEeqm_eVeNYUZww" source="_piBnUI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_DizBkY4wEeqm_eVeNYUZww" name="callTestAEmptyPattern_To_callTestAUnconnectedPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_DizBko4wEeqm_eVeNYUZww" name="callTestAEmptyPattern_To_callTestAUnconnectedPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_EKprwI4wEeqm_eVeNYUZww" target="_3nlz0I4vEeqm_eVeNYUZww" source="_xPgQYI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_EKprwY4wEeqm_eVeNYUZww" name="callTestAUnconnectedPattern_To_callTestAArrayPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_EKprwo4wEeqm_eVeNYUZww" name="callTestAUnconnectedPattern_To_callTestAArrayPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_EtfTEI4wEeqm_eVeNYUZww" target="_9jntYI4vEeqm_eVeNYUZww" source="_3nlz0I4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_EtfTEY4wEeqm_eVeNYUZww" name="callTestAArrayPattern_To_callTestAStarPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_Etf6II4wEeqm_eVeNYUZww" name="callTestAArrayPattern_To_callTestAStarPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_GdkwoI4wEeqm_eVeNYUZww" target="_Wi5D0I4vEeqm_eVeNYUZww" source="_SH1NwI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_GdkwoY4wEeqm_eVeNYUZww" name="Fork1_To_CreateAEmptyPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_Gdkwoo4wEeqm_eVeNYUZww" name="Fork1_To_CreateAEmptyPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_HIv0kI4wEeqm_eVeNYUZww" target="_b4B8gI4vEeqm_eVeNYUZww" source="_SH1NwI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_HIv0kY4wEeqm_eVeNYUZww" name="Fork1_To_CreateAUnconnectedPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_HIv0ko4wEeqm_eVeNYUZww" name="Fork1_To_CreateAUnconnectedPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_JE9poI4wEeqm_eVeNYUZww" target="_hjcnMI4vEeqm_eVeNYUZww" source="_SH1NwI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_JE9poY4wEeqm_eVeNYUZww" name="Fork1_To_CreateAArrayPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_JE9poo4wEeqm_eVeNYUZww" name="Fork1_To_CreateAArrayPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_Jo0koI4wEeqm_eVeNYUZww" target="_lj9PQI4vEeqm_eVeNYUZww" source="_SH1NwI4vEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_Jo0koY4wEeqm_eVeNYUZww" name="Fork1_To_CreateAStarPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_Jo0koo4wEeqm_eVeNYUZww" name="Fork1_To_CreateAStarPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_LOErMI4wEeqm_eVeNYUZww" target="_r-BIoI4vEeqm_eVeNYUZww" source="_Wi5D0Y4vEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_L145II4wEeqm_eVeNYUZww" target="_zuZ7wI4vEeqm_eVeNYUZww" source="_b4B8gY4vEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_MRgeII4wEeqm_eVeNYUZww" target="_5zlxUI4vEeqm_eVeNYUZww" source="_hjcnMY4vEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_M2-isI4wEeqm_eVeNYUZww" target="__qqSYI4vEeqm_eVeNYUZww" source="_lj9PQY4vEeqm_eVeNYUZww"/>
      <node xmi:type="uml:InitialNode" xmi:id="_Qn2owI4vEeqm_eVeNYUZww" name="Initial1" outgoing="_VUU-8I4vEeqm_eVeNYUZww"/>
      <node xmi:type="uml:ForkNode" xmi:id="_SH1NwI4vEeqm_eVeNYUZww" name="Fork1" incoming="_VUU-8I4vEeqm_eVeNYUZww" outgoing="_GdkwoI4wEeqm_eVeNYUZww _HIv0kI4wEeqm_eVeNYUZww _JE9poI4wEeqm_eVeNYUZww _Jo0koI4wEeqm_eVeNYUZww"/>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_Wi5D0I4vEeqm_eVeNYUZww" name="CreateAEmptyPattern" incoming="_GdkwoI4wEeqm_eVeNYUZww" classifier="_z6HwQO9BEemWP7t7cfH8xA">
        <result xmi:id="_Wi5D0Y4vEeqm_eVeNYUZww" name="aEmptyPattern" outgoing="_LOErMI4wEeqm_eVeNYUZww" type="_z6HwQO9BEemWP7t7cfH8xA"/>
      </node>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_b4B8gI4vEeqm_eVeNYUZww" name="CreateAUnconnectedPattern" incoming="_HIv0kI4wEeqm_eVeNYUZww" classifier="_bfcP8FIvEeq4WpdDJnu9kg">
        <result xmi:id="_b4B8gY4vEeqm_eVeNYUZww" name="aUnconnectedPattern" outgoing="_L145II4wEeqm_eVeNYUZww" type="_bfcP8FIvEeq4WpdDJnu9kg"/>
      </node>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_hjcnMI4vEeqm_eVeNYUZww" name="CreateAArrayPattern" incoming="_JE9poI4wEeqm_eVeNYUZww" classifier="_rZJ6oFIvEeq4WpdDJnu9kg">
        <result xmi:id="_hjcnMY4vEeqm_eVeNYUZww" name="aArrayPattern" outgoing="_MRgeII4wEeqm_eVeNYUZww" type="_rZJ6oFIvEeq4WpdDJnu9kg"/>
      </node>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_lj9PQI4vEeqm_eVeNYUZww" name="CreateAStarPattern" incoming="_Jo0koI4wEeqm_eVeNYUZww" classifier="__fogsFIvEeq4WpdDJnu9kg">
        <result xmi:id="_lj9PQY4vEeqm_eVeNYUZww" name="aStarPattern" outgoing="_M2-isI4wEeqm_eVeNYUZww" type="__fogsFIvEeq4WpdDJnu9kg"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_piBnUI4vEeqm_eVeNYUZww" name="callTestAEmptyPattern" outgoing="_DizBkI4wEeqm_eVeNYUZww" operation="_N16ycFgSEeqZPe2oHCHy2Q">
        <argument xmi:id="_r-BIoI4vEeqm_eVeNYUZww" name="aEmptyPattern" incoming="_LOErMI4wEeqm_eVeNYUZww" type="_z6HwQO9BEemWP7t7cfH8xA"/>
        <target xmi:id="_piBnUY4vEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_xPgQYI4vEeqm_eVeNYUZww" name="callTestAUnconnectedPattern" incoming="_DizBkI4wEeqm_eVeNYUZww" outgoing="_EKprwI4wEeqm_eVeNYUZww" operation="_1_Kt0FgTEeqZPe2oHCHy2Q">
        <argument xmi:id="_zuZ7wI4vEeqm_eVeNYUZww" name="aUnconnectedPattern" incoming="_L145II4wEeqm_eVeNYUZww" type="_bfcP8FIvEeq4WpdDJnu9kg"/>
        <target xmi:id="_xPgQYY4vEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_3nlz0I4vEeqm_eVeNYUZww" name="callTestAArrayPattern" incoming="_EKprwI4wEeqm_eVeNYUZww" outgoing="_EtfTEI4wEeqm_eVeNYUZww" operation="_-PQ7wFgTEeqZPe2oHCHy2Q">
        <argument xmi:id="_5zlxUI4vEeqm_eVeNYUZww" name="aArrayPattern" incoming="_MRgeII4wEeqm_eVeNYUZww" type="_rZJ6oFIvEeq4WpdDJnu9kg"/>
        <target xmi:id="_3nma4I4vEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_9jntYI4vEeqm_eVeNYUZww" name="callTestAStarPattern" incoming="_EtfTEI4wEeqm_eVeNYUZww" operation="_HVXkoFgUEeqZPe2oHCHy2Q">
        <argument xmi:id="__qqSYI4vEeqm_eVeNYUZww" name="aStarPattern" incoming="_M2-isI4wEeqm_eVeNYUZww" type="__fogsFIvEeq4WpdDJnu9kg"/>
        <target xmi:id="_9jntYY4vEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
    </ownedBehavior>
    <ownedOperation xmi:id="_N16ycFgSEeqZPe2oHCHy2Q" name="testAEmptyPattern" method="_6vTt8FgREeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_TUYmQFgSEeqZPe2oHCHy2Q" name="aEmptyPattern" type="_z6HwQO9BEemWP7t7cfH8xA"/>
    </ownedOperation>
    <ownedOperation xmi:id="_1_Kt0FgTEeqZPe2oHCHy2Q" name="testAUnconnectedPattern" method="_-aF9oFgREeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_7GFkUFgTEeqZPe2oHCHy2Q" name="aUnconnectedPattern" type="_bfcP8FIvEeq4WpdDJnu9kg"/>
    </ownedOperation>
    <ownedOperation xmi:id="_-PQ7wFgTEeqZPe2oHCHy2Q" name="testAArrayPattern" method="_CeMFMFgSEeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_-PQ7wVgTEeqZPe2oHCHy2Q" name="aArrayPattern" type="_rZJ6oFIvEeq4WpdDJnu9kg"/>
    </ownedOperation>
    <ownedOperation xmi:id="_HVXkoFgUEeqZPe2oHCHy2Q" name="testAStarPattern" method="_EXuZsFgSEeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_HVXkoVgUEeqZPe2oHCHy2Q" name="aStarPattern" type="__fogsFIvEeq4WpdDJnu9kg"/>
    </ownedOperation>
    <ownedOperation xmi:id="_EpNFcI4vEeqm_eVeNYUZww" name="runTestCase" method="_GTs4YI4vEeqm_eVeNYUZww"/>
  </packagedElement>
</uml:Model>
