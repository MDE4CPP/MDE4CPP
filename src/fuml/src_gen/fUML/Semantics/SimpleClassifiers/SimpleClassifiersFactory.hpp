//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_SIMPLECLASSIFIERSFACTORY_HPP
#define FUML_SEMANTICS_SIMPLECLASSIFIERSFACTORY_HPP

#include <map>
#include <memory>

// namespace macro header include
#include "fUML/fUML.hpp"

#include "ecore/EFactory.hpp"
#include "fUML/Semantics/SimpleClassifiers/SimpleClassifiersPackage.hpp"




namespace fUML::Semantics::SimpleClassifiers 
{
	class FUML_API SimpleClassifiersFactory : virtual public ecore::EFactory 
	{
		private:    
			SimpleClassifiersFactory(SimpleClassifiersFactory const&) = delete;
			SimpleClassifiersFactory& operator=(SimpleClassifiersFactory const&) = delete;
		protected:
			SimpleClassifiersFactory(){}
		
			//Singleton Instance and Getter
			private:
				static std::shared_ptr<SimpleClassifiersFactory> instance;
			public:
				static std::shared_ptr<SimpleClassifiersFactory> eInstance();
		
			//Creator functions
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const = 0;

			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::BooleanValue> createBooleanValue(const int metaElementID = SimpleClassifiersPackage::BOOLEANVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::DataValue> createDataValue(const int metaElementID = SimpleClassifiersPackage::DATAVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::EnumerationValue> createEnumerationValue(const int metaElementID = SimpleClassifiersPackage::ENUMERATIONVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::FeatureValue> createFeatureValue(const int metaElementID = SimpleClassifiersPackage::FEATUREVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::IntegerValue> createIntegerValue(const int metaElementID = SimpleClassifiersPackage::INTEGERVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::RealValue> createRealValue(const int metaElementID = SimpleClassifiersPackage::REALVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::SignalInstance> createSignalInstance(const int metaElementID = SimpleClassifiersPackage::SIGNALINSTANCE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::StringValue> createStringValue(const int metaElementID = SimpleClassifiersPackage::STRINGVALUE_CLASS) const = 0;
			
			virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::UnlimitedNaturalValue> createUnlimitedNaturalValue(const int metaElementID = SimpleClassifiersPackage::UNLIMITEDNATURALVALUE_CLASS) const = 0;
			
			
	};
}
#endif /* end of include guard: FUML_SEMANTICS_SIMPLECLASSIFIERSFACTORY_HPP */
