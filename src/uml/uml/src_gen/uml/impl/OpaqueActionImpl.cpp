
#include "uml/impl/OpaqueActionImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "uml/Action.hpp"
#include "uml/Activity.hpp"
#include "uml/ActivityEdge.hpp"
#include "uml/ActivityGroup.hpp"
#include "uml/ActivityNode.hpp"
#include "uml/ActivityPartition.hpp"
#include "uml/Classifier.hpp"
#include "uml/Comment.hpp"
#include "uml/Constraint.hpp"
#include "uml/Dependency.hpp"
#include "uml/Element.hpp"
#include "uml/ExceptionHandler.hpp"
#include "uml/InputPin.hpp"
#include "uml/InterruptibleActivityRegion.hpp"
#include "uml/Namespace.hpp"
#include "uml/OutputPin.hpp"
#include "uml/RedefinableElement.hpp"
#include "uml/StringExpression.hpp"
#include "uml/StructuredActivityNode.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
OpaqueActionImpl::OpaqueActionImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

OpaqueActionImpl::~OpaqueActionImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete OpaqueAction "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
OpaqueActionImpl::OpaqueActionImpl(std::weak_ptr<uml::Activity> par_activity)
:OpaqueActionImpl()
{
	m_activity = par_activity;
	m_owner = par_activity;
}

//Additional constructor for the containments back reference
OpaqueActionImpl::OpaqueActionImpl(std::weak_ptr<uml::StructuredActivityNode> par_inStructuredNode)
:OpaqueActionImpl()
{
	m_inStructuredNode = par_inStructuredNode;
	m_owner = par_inStructuredNode;
}

//Additional constructor for the containments back reference
OpaqueActionImpl::OpaqueActionImpl(std::weak_ptr<uml::Namespace> par_namespace)
:OpaqueActionImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
OpaqueActionImpl::OpaqueActionImpl(std::weak_ptr<uml::Element> par_owner)
:OpaqueActionImpl()
{
	m_owner = par_owner;
}

OpaqueActionImpl::OpaqueActionImpl(const OpaqueActionImpl & obj): OpaqueActionImpl()
{
	*this = obj;
}

OpaqueActionImpl& OpaqueActionImpl::operator=(const OpaqueActionImpl & obj)
{
	//call overloaded =Operator for each base class
	ActionImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of OpaqueAction 
	 * which is generated by the compiler (as OpaqueAction is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//OpaqueAction::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy OpaqueAction "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	std::shared_ptr<Bag<std::string>> bodyList = obj.getBody();
	if(bodyList)
	{	
		m_body.reset(new Bag<std::string>());
		for(const std::shared_ptr<std::string> it: *bodyList) 
		{
			m_body->push_back(it);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for body.")
	}
	std::shared_ptr<Bag<std::string>> languageList = obj.getLanguage();
	if(languageList)
	{	
		m_language.reset(new Bag<std::string>());
		for(const std::shared_ptr<std::string> it: *languageList) 
		{
			m_language->push_back(it);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for language.")
	}

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	//clone reference 'inputValue'
	std::shared_ptr<Subset<uml::InputPin, uml::InputPin>> inputValueList = obj.getInputValue();
	if(inputValueList)
	{
		/*Subset*/
		m_inputValue.reset(new Subset<uml::InputPin, uml::InputPin >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_inputValue - Subset<uml::InputPin, uml::InputPin >()" << std::endl;
		#endif
		
		/*Subset*/
		getInputValue()->initSubset(getInput());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_inputValue - Subset<uml::InputPin, uml::InputPin >(getInput())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::InputPin> inputValueindexElem: *inputValueList) 
		{
			std::shared_ptr<uml::InputPin> temp = std::dynamic_pointer_cast<uml::InputPin>((inputValueindexElem)->copy());
			m_inputValue->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for inputValue.")
	}

	//clone reference 'outputValue'
	std::shared_ptr<Subset<uml::OutputPin, uml::OutputPin>> outputValueList = obj.getOutputValue();
	if(outputValueList)
	{
		/*Subset*/
		m_outputValue.reset(new Subset<uml::OutputPin, uml::OutputPin >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_outputValue - Subset<uml::OutputPin, uml::OutputPin >()" << std::endl;
		#endif
		
		/*Subset*/
		getOutputValue()->initSubset(getOutput());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_outputValue - Subset<uml::OutputPin, uml::OutputPin >(getOutput())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::OutputPin> outputValueindexElem: *outputValueList) 
		{
			std::shared_ptr<uml::OutputPin> temp = std::dynamic_pointer_cast<uml::OutputPin>((outputValueindexElem)->copy());
			m_outputValue->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for outputValue.")
	}
	/*Subset*/
	getInputValue()->initSubset(getInput());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_inputValue - Subset<uml::InputPin, uml::InputPin >(getInput())" << std::endl;
	#endif
	
	/*Subset*/
	getOutputValue()->initSubset(getOutput());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_outputValue - Subset<uml::OutputPin, uml::OutputPin >(getOutput())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> OpaqueActionImpl::copy() const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl());
	*element =(*this);
	element->setThisOpaqueActionPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute body */
std::shared_ptr<Bag<std::string>> OpaqueActionImpl::getBody() const 
{
	if(m_body == nullptr)
	{
		m_body.reset(new Bag<std::string>());
	}
	return m_body;
}

/* Getter & Setter for attribute language */
std::shared_ptr<Bag<std::string>> OpaqueActionImpl::getLanguage() const 
{
	if(m_language == nullptr)
	{
		m_language.reset(new Bag<std::string>());
	}
	return m_language;
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference inputValue */
std::shared_ptr<Subset<uml::InputPin, uml::InputPin>> OpaqueActionImpl::getInputValue() const
{
	if(m_inputValue == nullptr)
	{
		/*Subset*/
		m_inputValue.reset(new Subset<uml::InputPin, uml::InputPin >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_inputValue - Subset<uml::InputPin, uml::InputPin >()" << std::endl;
		#endif
		
		/*Subset*/
		getInputValue()->initSubset(getInput());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_inputValue - Subset<uml::InputPin, uml::InputPin >(getInput())" << std::endl;
		#endif
		
	}
    return m_inputValue;
}

/* Getter & Setter for reference outputValue */
std::shared_ptr<Subset<uml::OutputPin, uml::OutputPin>> OpaqueActionImpl::getOutputValue() const
{
	if(m_outputValue == nullptr)
	{
		/*Subset*/
		m_outputValue.reset(new Subset<uml::OutputPin, uml::OutputPin >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_outputValue - Subset<uml::OutputPin, uml::OutputPin >()" << std::endl;
		#endif
		
		/*Subset*/
		getOutputValue()->initSubset(getOutput());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_outputValue - Subset<uml::OutputPin, uml::OutputPin >(getOutput())" << std::endl;
		#endif
		
	}
    return m_outputValue;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> OpaqueActionImpl::eContainer() const
{
	if(auto wp = m_activity.lock())
	{
		return wp;
	}

	if(auto wp = m_inStructuredNode.lock())
	{
		return wp;
	}

	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}
	return nullptr;
}

std::shared_ptr<ecore::EClass> OpaqueActionImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getOpaqueAction_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> OpaqueActionImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_BODY:
			return eAny(getBody(),ecore::ecorePackage::ESTRING_CLASS,true); //16427
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_INPUTVALUE:
			return eEcoreContainerAny(getInputValue(),uml::umlPackage::INPUTPIN_CLASS); //16428
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_LANGUAGE:
			return eAny(getLanguage(),ecore::ecorePackage::ESTRING_CLASS,true); //16429
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_OUTPUTVALUE:
			return eEcoreContainerAny(getOutputValue(),uml::umlPackage::OUTPUTPIN_CLASS); //16430
	}
	return ActionImpl::eGet(featureID, resolve, coreType);
}

bool OpaqueActionImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_BODY:
			return !getBody()->empty(); //16427
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_INPUTVALUE:
			return getInputValue() != nullptr; //16428
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_LANGUAGE:
			return !getLanguage()->empty(); //16429
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_OUTPUTVALUE:
			return getOutputValue() != nullptr; //16430
	}
	return ActionImpl::internalEIsSet(featureID);
}

bool OpaqueActionImpl::eSet(int featureID, std::shared_ptr<Any> newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_BODY:
		{
			try
			{
				std::shared_ptr<Bag<std::string>> _bodyList = newValue->get<std::shared_ptr<Bag<std::string>>>();
				std::shared_ptr<Bag<std::string>> _body = getBody();
				
				for(const std::shared_ptr<std::string> valueToAdd: *_bodyList)
				{
					if (valueToAdd)
					{
						if(_body->find(valueToAdd) == -1)
						{
							_body->add(valueToAdd);
						}
						//else, valueToAdd is already present so it won't be added again
					}
					else
					{
						throw "Invalid argument";
					}
				}
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'body'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_INPUTVALUE:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<uml::InputPin>> _inputValue = getInputValue();
	
						for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
						{
							std::shared_ptr<uml::InputPin> valueToAdd = std::dynamic_pointer_cast<uml::InputPin>(anEObject);
	
							if (valueToAdd)
							{
								if(_inputValue->find(valueToAdd) == -1)
								{
									_inputValue->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'inputValue'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'inputValue'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_LANGUAGE:
		{
			try
			{
				std::shared_ptr<Bag<std::string>> _languageList = newValue->get<std::shared_ptr<Bag<std::string>>>();
				std::shared_ptr<Bag<std::string>> _language = getLanguage();
				
				for(const std::shared_ptr<std::string> valueToAdd: *_languageList)
				{
					if (valueToAdd)
					{
						if(_language->find(valueToAdd) == -1)
						{
							_language->add(valueToAdd);
						}
						//else, valueToAdd is already present so it won't be added again
					}
					else
					{
						throw "Invalid argument";
					}
				}
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'language'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::OPAQUEACTION_ATTRIBUTE_OUTPUTVALUE:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<uml::OutputPin>> _outputValue = getOutputValue();
	
						for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
						{
							std::shared_ptr<uml::OutputPin> valueToAdd = std::dynamic_pointer_cast<uml::OutputPin>(anEObject);
	
							if (valueToAdd)
							{
								if(_outputValue->find(valueToAdd) == -1)
								{
									_outputValue->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'outputValue'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'outputValue'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ActionImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> OpaqueActionImpl::eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = ActionImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::OpaqueAction> OpaqueActionImpl::getThisOpaqueActionPtr() const
{
	return m_thisOpaqueActionPtr.lock();
}
void OpaqueActionImpl::setThisOpaqueActionPtr(std::weak_ptr<uml::OpaqueAction> thisOpaqueActionPtr)
{
	m_thisOpaqueActionPtr = thisOpaqueActionPtr;
	setThisActionPtr(thisOpaqueActionPtr);
}


