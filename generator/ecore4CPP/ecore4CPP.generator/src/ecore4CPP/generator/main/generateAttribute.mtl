[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateAttribute('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::helpers::keywords /]

[query public hasSetter(anEAttribute : EAttribute) : Boolean = anEAttribute.changeable and (anEAttribute.upperBound = 1)/]
[query public hasGetter(anEAttribute : EAttribute) : EBoolean = not hasKey('getterbody') /]

[***###########################################################################################
 * Section for model and class implementation of an Attribute
 */]

[query public getDefaultValue(anEAttribute : EAttribute) : String = if (defaultValueLiteral->notEmpty()) then defaultValueLiteral else eType.getDefaultValue() endif/]

[template public generateDefaultValue(anEAttribute : EAttribute) post (trim())]
[if (anEAttribute.eType.oclIsTypeOf(EEnum))]
	[if (anEAttribute.defaultValueLiteral->notEmpty())]
		= [anEAttribute.eType.name/]::[anEAttribute.defaultValueLiteral.toUpperCase()/]
	[else]
		= [anEAttribute.eType.name/]::[anEAttribute.eType.oclAsType(EEnum).eLiterals->first().name.toUpperCase()/] 
	[/if]
[else]
	= [anEAttribute.getDefaultValue()/]
[/if]
[/template]

[template public generateAttributeAccessorsDecl(anEAttribute : EAttribute, impl : Boolean)]
[anEAttribute.generateAttributeGetterDecleration(impl)/]
[anEAttribute.generateAttributeSetterDecleration(impl)/]
[for (redefinedElement : EObject | anEAttribute.getAllRedefinedElements())]
[if (redefinedElement.oclIsKindOf(EAttribute))]
[let redefinedEAttribute : EAttribute = redefinedElement.oclAsType(EAttribute)]
/*Additional Setter for '[redefinedEAttribute.eContainingClass.name/]::[redefinedEAttribute.name/]' redefined by attribute '[anEAttribute.name/]'*/
[redefinedEAttribute.generateAttributeSetterDecleration(impl)/]
[/let]
[/if]
[/for]
[/template]

[template public generateAttributeProtectedMember(anEAttribute : EAttribute)]
[anEAttribute.generateDocumentation()/] 
[if (not(anEAttribute.upperBound = 1))]
[if(hasKey(keyQualify()))][valueKey(keyQualify())/] [/if]mutable [anEAttribute.generateAttributeType()/] m_[anEAttribute.name/]; 
[else]
[if(hasKey(keyQualify()))][valueKey(keyQualify())/] [/if][anEAttribute.generateAttributeType()/] m_[anEAttribute.name/] [generateDefaultValue()/];
[/if]
[/template]

[template public generateAttributeInit(anEAttribute : EAttribute) ? (not(anEAttribute.upperBound = 1))]
m_[anEAttribute.name/].reset(new Bag<[anEAttribute.eGenericType.generateCppType()/]>());
[/template]

[template public generateAttributeGetterDecleration(anEAttribute : EAttribute, impl : Boolean) ? (hasGetter())]
[anEAttribute.generateDocumentation()/] 
virtual [if (anEAttribute.eType.oclIsKindOf(EDataType))]
[anEAttribute.generateAttributeType()/] [else]
std::shared_ptr<[anEAttribute.generateAttributeType()/]> [/if]
 [anEAttribute.GetterName()/]() const [abstractSufix(impl)/];

[/template]

[template public generateAttributeSetterDecleration(anEAttribute : EAttribute, impl : Boolean) ? ((hasSetter() or(impl and hasImplSetterOnly())) )]
[anEAttribute.generateDocumentation()/] 
virtual void [anEAttribute.SetterName()/] ([anEAttribute.generateAttributeType()/] _[anEAttribute.name/])[abstractSufix(impl)/]; 
[/template]

[***
 * Section for the Attribute cpp implementation
*/]

[template public generateAttributeCpp(anEAttribute : EAttribute)]
/*
Getter & Setter for attribute [anEAttribute.name/]
*/
[anEAttribute.generateAttributeGetterImplementationCpp()/]

[anEAttribute.generateAttributeSetterImplementationCpp()/]

[for (redefinedElement : EObject | anEAttribute.getAllRedefinedElements())]
[if (redefinedElement.oclIsKindOf(EAttribute))]
[let redefinedEAttribute : EAttribute = redefinedElement.oclAsType(EAttribute)]
/*Additional Setter for redefined attribute '[redefinedEAttribute.eContainingClass.name/]::[redefinedEAttribute.name/]'*/
[redefinedEAttribute.generateRedefinedAttributeSetterImplementationCpp(anEAttribute)/]
[/let]
[/if]
[/for]
[/template]

[template private generateAttributeGetterImplementationCpp(anEAttribute : EAttribute)? (hasGetter())]
[anEAttribute.generateAttributeType()/] [anEAttribute.eContainingClass.name.toUpperFirst()/]Impl::[anEAttribute.GetterName()/]() const 
{
	[if (not (anEAttribute.upperBound = 1))]
	if(m_[anEAttribute.name/] == nullptr)
	{
		[anEAttribute.generateAttributeInit()/]
	}
	[/if]
	return m_[anEAttribute.name/];
}
[/template]

[template private generateAttributeSetterImplementationCpp(anEAttribute : EAttribute) ? (( hasSetter() or(hasImplSetterOnly())) )]
void [anEAttribute.eContainingClass.name.toUpperFirst()/]Impl::[anEAttribute.SetterName()/]([anEAttribute.generateAttributeType()/] _[anEAttribute.name/])
{
	m_[anEAttribute.name/] = _[anEAttribute.name/];
	[for (redefinedElement : EObject | anEAttribute.getDirectlyRedefinedElements())]
	[if (redefinedElement.oclIsKindOf(EAttribute))]
	[let redefinedEAttribute : EAttribute = redefinedElement.oclAsType(EAttribute)]
	//additional setter call for redefined attribute [redefinedEAttribute.eContainingClass.name/]::[redefinedEAttribute.name/]
	[redefinedEAttribute.eContainingClass.transformType()/]Impl::set[redefinedEAttribute.name.toUpperFirst()/](_[anEAttribute.name/]);
	[/let]
	[/if]
	[/for]
} 
[/template]

[template private generateRedefinedAttributeSetterImplementationCpp(redefinedEAttribute : EAttribute, anEAttribute : EAttribute) ? (( hasSetter() or(hasImplSetterOnly())) )]
void [anEAttribute.eContainingClass.name.toUpperFirst()/]Impl::[redefinedEAttribute.SetterName()/]([anEAttribute.generateAttributeType()/] _[anEAttribute.name/])
{
	std::shared_ptr<[anEAttribute.eGenericType.generateCppType()/]> _[anEAttribute.name/] = std::dynamic_pointer_cast<[anEAttribute.eGenericType.generateCppType()/]>(_[redefinedEAttribute.name/]);
	if(_[anEAttribute.name/])
	{
		m_[anEAttribute.name/] = _[anEAttribute.name/];

		[if (not anEAttribute.getDirectlyRedefinedElements()->select(redefines(redefinedEAttribute.oclAsType(EObject)))->isEmpty())]
			[for (directlyRedefinedElement : EObject | anEAttribute.getDirectlyRedefinedElements())]
				[if (directlyRedefinedElement.oclIsKindOf(EReference) and directlyRedefinedElement.redefines(redefinedEAttribute.oclAsType(EObject)))]
				[let directlyRedefinedEAttribute : EReference = directlyRedefinedElement.oclAsType(EReference)]
		//additional setter call for redefined reference [directlyRedefinedEAttribute.eContainingClass.name/]::[directlyRedefinedEAttribute.name/]
		[directlyRedefinedEAttribute.eContainingClass.transformType()/]Impl::set[redefinedEAttribute.name.toUpperFirst()/](_[redefinedEAttribute.name/]);
				[/let]
				[/if]
			[/for]
		[else]
		//additional setter call for redefined reference [redefinedEAttribute.eContainingClass.name/]::[redefinedEAttribute.name/]
		[redefinedEAttribute.eContainingClass.transformType()/]Impl::set[redefinedEAttribute.name.toUpperFirst()/](_[redefinedEAttribute.name/]);
		[/if]
	}
	else
	{
		std::cerr<<"['['/][anEAttribute.eContainingClass.name.toUpperFirst()/]::[redefinedEAttribute.SetterName()/][']'/] : Could not set node because provided node was not of type '[anEAttribute.eGenericType.generateCppType()/]'"<<std::endl;
	}
}
[/template]


[***###########################################################################################
 * Section for creating the Attribute elements in the metamodel package
*/]

[template public generateAttributeCreation(anEAttribute : EAttribute)]
[anEAttribute.getClassMemberName()/] = factory->createEAttribute_in_EContainingClass([anEAttribute.eContainingClass.getClassMemberName()/], [anEAttribute.getStaticAttributeIDName()/]);

[/template]

[template public generateAttributeInitialization(anEAttribute : EAttribute)]
[anEAttribute.getClassMemberName()/] = [anEAttribute.packageGetter()/];
[anEAttribute.getClassMemberName()/]->setName("[anEAttribute.name/]");
[anEAttribute.getClassMemberName()/]->setEType([anEAttribute.eType.oclAsType(EDataType).packageGetter(anEAttribute)/]);
[anEAttribute.getClassMemberName()/]->setLowerBound([anEAttribute.lowerBound/]);
[anEAttribute.getClassMemberName()/]->setUpperBound([anEAttribute.upperBound/]);
[anEAttribute.getClassMemberName()/]->setTransient([anEAttribute.transient.toString()/]);
[anEAttribute.getClassMemberName()/]->setVolatile([anEAttribute.volatile.toString()/]);
[anEAttribute.getClassMemberName()/]->setChangeable([anEAttribute.changeable.toString()/]);
[anEAttribute.getClassMemberName()/]->setUnsettable([anEAttribute.unsettable.toString()/]);
[anEAttribute.getClassMemberName()/]->setUnique([anEAttribute.unique.toString()/]);
[anEAttribute.getClassMemberName()/]->setDerived([anEAttribute.derived.toString()/]);
[anEAttribute.getClassMemberName()/]->setOrdered([anEAttribute.ordered.toString()/]);
[anEAttribute.getClassMemberName()/]->setID([anEAttribute.iD.toString()/]);
{
	std::string defaultValue = "[anEAttribute.defaultValueLiteral/]";
	if (!defaultValue.empty())
	{
	   [anEAttribute.getClassMemberName()/]->setDefaultValueLiteral(defaultValue);
	}
}

[/template]

[template public generateStaticAttributeID(anEAttribute : EAttribute)]
static const int [anEAttribute.getStaticAttributeIDName()/] = [anEAttribute.eContainingClass.getMyClassifierID() * 100 + anEAttribute.getFeatureID()/];

[/template]