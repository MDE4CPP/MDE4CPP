/*
 * MDE4CPP - Model Driven Engineering for C++
 *
 * Copyright (c) TU Ilmenau, Systems and Software Engineering Group
 * All rights reserved.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
  	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "$gradle_mde4cpp_compile_plugin_version"
}

import org.gradle.internal.os.OperatingSystem;

task compileUMLExample(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'Examples'
	description 'compile Ecore example'
	
	projectFolder = file('.' + File.separator + 'src' + File.separator + 'UMLExample')
	
	inputs.files(fileTree('.') {
        exclude 'src/UMLExample/.cmake/**'
    })
	if(!file('.' + File.separator + 'src' + File.separator + 'UMLExample' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}
	if(OperatingSystem.current().isWindows()){
		outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'UMLExample.exe')
		if (project.DEBUG){
			outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'UMLExampled.exe')
		}
	} else {
		outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'UMLExample')
		if (project.DEBUG){
			outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'UMLExampled')
		}
    }

	
	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName('compileEcore', true)
	dependsOn ecore
	inputs.files(ecore.outputs)
	
	// dependency to model 'uml'
	def uml = getRootProject().getTasksByName('compileUml', true)
	dependsOn uml
	inputs.files(uml.outputs)

	// dependency to model 'types'
	def types = getRootProject().getTasksByName('compileTypes', true)
	dependsOn types
	inputs.files(types.outputs)
}

task clean {
	doLast {
		def cmakeFolder = file('.' + File.separator + 'src' + File.separator + 'UMLExample' + File.separator + '.cmake')
		if(cmakeFolder.exists()) {
			delete cmakeFolder.absolutePath
			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
