
#include "PSCS/Semantics/Actions/impl/CS_DefaultConstructStrategyImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Includes from codegen annotation
/*
#include "fUML/fUMLFactory.hpp"
#include <stdexcept>

#include "uml/Port.hpp"
#include "uml/TypedElement.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/InterfaceRealization.hpp"
#include "uml/umlFactory.hpp"
#include "uml/umlPackage.hpp"
#include "fUML/Semantics/SimpleClassifiers/FeatureValue.hpp"
#include "fUML/Semantics/Values/Evaluation.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_InteractionPoint.hpp"
#include "PSCS/Semantics/Values/CS_OpaqueExpressionEvaluation.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_Link.hpp"
#include "PSCS/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp"
*/
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "fUML/Semantics/Loci/LociFactory.hpp"
#include "uml/Association.hpp"
#include "PSCS/Semantics/Actions/CS_ConstructStrategy.hpp"
#include "uml/Class.hpp"
#include "uml/Connector.hpp"
#include "uml/ConnectorEnd.hpp"
#include "uml/Interface.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "uml/Operation.hpp"
#include "uml/Property.hpp"
//Factories and Package includes
#include "PSCS/PSCSPackage.hpp"
#include "PSCS/Semantics/SemanticsPackage.hpp"
#include "PSCS/Semantics/Actions/ActionsPackage.hpp"
#include "fUML/Semantics/Loci/LociPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace PSCS::Semantics::Actions;

//*********************************
// Constructor / Destructor
//*********************************
CS_DefaultConstructStrategyImpl::CS_DefaultConstructStrategyImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

CS_DefaultConstructStrategyImpl::~CS_DefaultConstructStrategyImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete CS_DefaultConstructStrategy "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


CS_DefaultConstructStrategyImpl::CS_DefaultConstructStrategyImpl(const CS_DefaultConstructStrategyImpl & obj): CS_DefaultConstructStrategyImpl()
{
	*this = obj;
}

CS_DefaultConstructStrategyImpl& CS_DefaultConstructStrategyImpl::operator=(const CS_DefaultConstructStrategyImpl & obj)
{
	//call overloaded =Operator for each base class
	CS_ConstructStrategyImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of CS_DefaultConstructStrategy 
	 * which is generated by the compiler (as CS_DefaultConstructStrategy is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//CS_DefaultConstructStrategy::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy CS_DefaultConstructStrategy "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_locus  = obj.getLocus();
	//Clone references with containment (deep copy)
	//clone reference 'defaultAssociation'
	if(obj.getDefaultAssociation()!=nullptr)
	{
		m_defaultAssociation = std::dynamic_pointer_cast<uml::Association>(obj.getDefaultAssociation()->copy());
	}

	//clone reference 'generatedRealizingClasses'
	const std::shared_ptr<Bag<uml::Class>>& generatedRealizingClassesList = obj.getGeneratedRealizingClasses();
	if(generatedRealizingClassesList)
	{
		m_generatedRealizingClasses.reset(new Bag<uml::Class>());
		
		
		for(const std::shared_ptr<uml::Class>& generatedRealizingClassesindexElem: *generatedRealizingClassesList) 
		{
			const std::shared_ptr<uml::Class>& temp = std::dynamic_pointer_cast<uml::Class>((generatedRealizingClassesindexElem)->copy());
			m_generatedRealizingClasses->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for generatedRealizingClasses.")
	}
	
	
	return *this;
}

std::shared_ptr<ecore::EObject> CS_DefaultConstructStrategyImpl::copy() const
{
	std::shared_ptr<CS_DefaultConstructStrategyImpl> element(new CS_DefaultConstructStrategyImpl());
	*element =(*this);
	element->setThisCS_DefaultConstructStrategyPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************




























//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference defaultAssociation */
const std::shared_ptr<uml::Association>& CS_DefaultConstructStrategyImpl::getDefaultAssociation() const
{
    return m_defaultAssociation;
}
void CS_DefaultConstructStrategyImpl::setDefaultAssociation(const std::shared_ptr<uml::Association>& _defaultAssociation)
{
    m_defaultAssociation = _defaultAssociation;
	
}

/* Getter & Setter for reference generatedRealizingClasses */
const std::shared_ptr<Bag<uml::Class>>& CS_DefaultConstructStrategyImpl::getGeneratedRealizingClasses() const
{
	if(m_generatedRealizingClasses == nullptr)
	{
		m_generatedRealizingClasses.reset(new Bag<uml::Class>());
		
		
	}
    return m_generatedRealizingClasses;
}

/* Getter & Setter for reference locus */
const std::shared_ptr<fUML::Semantics::Loci::Locus>& CS_DefaultConstructStrategyImpl::getLocus() const
{
    return m_locus;
}
void CS_DefaultConstructStrategyImpl::setLocus(const std::shared_ptr<fUML::Semantics::Loci::Locus>& _locus)
{
    m_locus = _locus;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> CS_DefaultConstructStrategyImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void CS_DefaultConstructStrategyImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSCSFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void CS_DefaultConstructStrategyImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("locus");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("locus")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	CS_ConstructStrategyImpl::loadAttributes(loadHandler, attr_list);
}

void CS_DefaultConstructStrategyImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("defaultAssociation") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "uml::Association";
			}
			else
			{
				if (std::string::npos == typeName.find("uml/]"))
				{
					typeName = "uml::"+typeName;
				}
			}
			loadHandler->handleChild(this->getDefaultAssociation()); 

			return; 
		}

		if ( nodeName.compare("generatedRealizingClasses") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "uml::Class";
			}
			else
			{
				if (std::string::npos == typeName.find("uml/]"))
				{
					typeName = "uml::"+typeName;
				}
			}
			std::shared_ptr<ecore::ecoreFactory> modelFactory = ecore::ecoreFactory::eInstance();		
			std::shared_ptr<uml::Class> new_generatedRealizingClasses = std::dynamic_pointer_cast<uml::Class>(uml::umlFactory::eInstance()->create(typeName, loadHandler->getCurrentObject(), PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_GENERATEDREALIZINGCLASSES));
			if(new_generatedRealizingClasses)
			{
				loadHandler->handleChild(new_generatedRealizingClasses);
				getGeneratedRealizingClasses()->push_back(new_generatedRealizingClasses);
			} 

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	CS_ConstructStrategyImpl::loadNode(nodeName, loadHandler);
}

void CS_DefaultConstructStrategyImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_LOCUS:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<fUML::Semantics::Loci::Locus> _locus = std::dynamic_pointer_cast<fUML::Semantics::Loci::Locus>( references.front() );
				setLocus(_locus);
			}
			
			return;
		}
	}
	CS_ConstructStrategyImpl::resolveReferences(featureID, references);
}

void CS_DefaultConstructStrategyImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	CS_ConstructStrategyImpl::saveContent(saveHandler);
	
	fUML::Semantics::Loci::SemanticStrategyImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void CS_DefaultConstructStrategyImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSCS::Semantics::Actions::ActionsPackage> package = PSCS::Semantics::Actions::ActionsPackage::eInstance();
	// Add references
	if ( this->eIsSet(package->getCS_DefaultConstructStrategy_Attribute_locus()) )
	{
		saveHandler->addReference(this->getLocus(), "locus", getLocus()->eClass() != fUML::Semantics::Loci::LociPackage::eInstance()->getLocus_Class()); 
	}
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'defaultAssociation'
	    if ( this->eIsSet(package->getCS_DefaultConstructStrategy_Attribute_defaultAssociation()) )
	    {
		saveHandler->addReference(this->getDefaultAssociation(), "defaultAssociation", getDefaultAssociation()->eClass() != uml::umlPackage::eInstance()->getAssociation_Class());
	    }

		// Save 'generatedRealizingClasses'
	    if ( this->eIsSet(package->getCS_DefaultConstructStrategy_Attribute_generatedRealizingClasses()) )
	    {
		saveHandler->addReferences<uml::Class>("generatedRealizingClasses", this->getGeneratedRealizingClasses());
	    }
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& CS_DefaultConstructStrategyImpl::eStaticClass() const
{
	return PSCS::Semantics::Actions::ActionsPackage::eInstance()->getCS_DefaultConstructStrategy_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> CS_DefaultConstructStrategyImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_DEFAULTASSOCIATION:
			return eAny(getDefaultAssociation(),uml::umlPackage::ASSOCIATION_CLASS,false); //101
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_GENERATEDREALIZINGCLASSES:
			return eEcoreContainerAny(getGeneratedRealizingClasses(),uml::umlPackage::CLASS_CLASS); //102
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_LOCUS:
			return eAny(getLocus(),fUML::Semantics::Loci::LociPackage::LOCUS_CLASS,false); //100
	}
	return CS_ConstructStrategyImpl::eGet(featureID, resolve, coreType);
}

bool CS_DefaultConstructStrategyImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_DEFAULTASSOCIATION:
			return getDefaultAssociation() != nullptr; //101
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_GENERATEDREALIZINGCLASSES:
			return getGeneratedRealizingClasses() != nullptr; //102
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_LOCUS:
			return getLocus() != nullptr; //100
	}
	return CS_ConstructStrategyImpl::internalEIsSet(featureID);
}

bool CS_DefaultConstructStrategyImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_DEFAULTASSOCIATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Association> _defaultAssociation = std::dynamic_pointer_cast<uml::Association>(eObject);
					if(_defaultAssociation)
					{
						setDefaultAssociation(_defaultAssociation); //101
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'defaultAssociation'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'defaultAssociation'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_GENERATEDREALIZINGCLASSES:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<uml::Class>>& _generatedRealizingClasses = getGeneratedRealizingClasses();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<uml::Class> valueToAdd = std::dynamic_pointer_cast<uml::Class>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_generatedRealizingClasses->includes(valueToAdd)))
								{
									_generatedRealizingClasses->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'generatedRealizingClasses'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'generatedRealizingClasses'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSCS::Semantics::Actions::ActionsPackage::CS_DEFAULTCONSTRUCTSTRATEGY_ATTRIBUTE_LOCUS:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<fUML::Semantics::Loci::Locus> _locus = std::dynamic_pointer_cast<fUML::Semantics::Loci::Locus>(eObject);
					if(_locus)
					{
						setLocus(_locus); //100
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'locus'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'locus'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return CS_ConstructStrategyImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> CS_DefaultConstructStrategyImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = CS_ConstructStrategyImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSCS::Semantics::Actions::CS_DefaultConstructStrategy> CS_DefaultConstructStrategyImpl::getThisCS_DefaultConstructStrategyPtr() const
{
	return m_thisCS_DefaultConstructStrategyPtr.lock();
}
void CS_DefaultConstructStrategyImpl::setThisCS_DefaultConstructStrategyPtr(std::weak_ptr<PSCS::Semantics::Actions::CS_DefaultConstructStrategy> thisCS_DefaultConstructStrategyPtr)
{
	m_thisCS_DefaultConstructStrategyPtr = thisCS_DefaultConstructStrategyPtr;
	setThisCS_ConstructStrategyPtr(thisCS_DefaultConstructStrategyPtr);
}


