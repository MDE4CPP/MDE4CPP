[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate class implementation source file
 * 
 */]
[module generateImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::components::generateInterface /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::setGetHelper /]
[import UML4CPP::generator::main::validation::validateModel /]
[import UML4CPP::generator::main::pscs::generatePropertyInstantiation/]
[import UML4CPP::generator::main::pscs::generateConnectorPatternsInstantiation/]
[import UML4CPP::generator::main::pscs::generateDestruction/]

[query private includes(aClass : Class)  : Set(Type) = OrderedSet{aClass.member->selectByKind(TypedElement)->select(not type.oclIsUndefined()).type, aClass.ownedOperation.ownedParameter.type, aClass.getAllAttributes().type, aClass.importedMember, aClass.getCompositeOwners()}->flatten() /]
[query private includes(aInterface : Interface)  : Set(Type) = OrderedSet{aInterface.member->selectByKind(TypedElement)->select(not type.oclIsUndefined()).type, aInterface.ownedOperation.ownedParameter.type}->flatten() /]

[query private getAllAttributes(anInterface : Interface) : Set(Property) = OrderedSet{anInterface.ownedAttribute, anInterface.generalization.general->selectByType(Interface).getAllAttributes()} /]
[query private getAllAttributes(aClass : Class) : Set(Property) = OrderedSet{aClass.ownedAttribute, aClass.generalization.general->selectByType(Class).getAllAttributes(), aClass.interfaceRealization.contract.getAllAttributes()}->flatten() /]

[template public generateImplementationSource(aClass : Class) { className : String = aClass.name.toUpperFirst().concat('Impl'); aPackage : Package = aClass.ancestors()->filter(Package)->first(); }]
[file (aPackage.generateNamespacePath(false).concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.generateNamespacePath(false)/]/impl/[className.concat('.hpp')/]"

[defineDebugMacro()/]

#include <iostream>

[generateAbstractDataTypesIncludes()/]
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.name.concat('Factory')/].hpp"
#include "[aPackage.generateNamespacePath(false)/]/impl/[aPackage.name.concat('PackageImpl')/].hpp"
#include "[aClass.eClass().ePackage.name/]/[aClass.eClass().name/].hpp"
[if (aClass.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration))->size() > 0)]
#include "uml/EnumerationLiteral.hpp"
[/if]

//Types included from attributes, operation parameters, imports and composite owner classes
[for (cl : Type | aClass.includes()->sortedBy(myQualifiedName())) ? ( oclIsKindOf(Class) or oclIsKindOf(Interface) or oclIsKindOf(Enumeration))]
[if (cl.oclIsUndefined() or cl.name.oclIsUndefined())]
// undefined  [cl.eClass().name/] ([cl.toString()/]) ['class '.concat(aClass.name).concat(': header include failed for undefined ').concat(cl.eClass().name).concat(' ').concat(cl.toString()).registerError()/]
[elseif (cl.getNearestPackage().hasIncludePath())]
#include "[cl.getNearestPackage().getIncludePath()/]"
[else]
#include "[cl.getNearestPackage().generateNamespacePath(true)/]/[cl.name.toUpperFirst()/].hpp"
[/if]
[/for]

//Packges and Factories included from types of attributes, operation parameters, imports and composite owner classes
[for (typePackage : Package | aClass.includes()->filter(Class).getNearestPackage()->reject(pack : Package | pack = aPackage)->asSet()->sortedBy(myQualifiedName()))]
#include "[typePackage.generateNamespacePath(true)/]/[typePackage.myNamespaceName().concat('Factory')/].hpp"
#include "[typePackage.generateNamespacePath(true)/]/impl/[typePackage.myNamespaceName().concat('PackageImpl')/].hpp"
[/for]

//Packages of included Enumerations
[for (aPackage : Package | aClass.ownedAttribute->select(type.oclIsKindOf(Enumeration)).type._package->flatten()->reject(pack : Package | pack = aPackage)->sortedBy(name))]
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.getPackageName()/]Package.hpp"
[/for]

//Includes of PluginFramework (if required)
[if (aClass.ownedOperation.method->notEmpty())][if(ownedOperation.method->filter(Activity)->notEmpty())]
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"
[/if][/if]

//Includes of OpaqueBevaiors (if required)
[for (aOperation : Operation | aClass.ownedOperation->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (aOperation.method->notEmpty())]
[if (aOperation.method->asOrderedSet()->first().oclIsKindOf(OpaqueBehavior))]
[if (aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->includes(keyInclude()))]
[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->asOrderedSet()->indexOf(keyInclude())]
[if (0 < index and index <= aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->size())]
//Included from operation "[aOperation.name/]"
[aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->asOrderedSet()->at(index)/]
[/if][/let][/if][/if][/if][/for]

//Includes from InstanceValues (if required)
[for (instVal : InstanceValue | aClass.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aClass.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
[else]
#include "[instVal.type._package.generateNamespacePath(false)/]/[instVal.type._package.getPackageName()/]Factory.hpp"
#include "[instVal.type._package.generateNamespacePath(true)/]/[instVal.type.name/].hpp"
[/if]
[/for]

//Includes from Ports typed by interfaces (if required)
[for (aPort : Port | aClass.ownedAttribute->filter(Port))]
[if (aPort.type.oclIsTypeOf(Interface))]
[for (anInterfaceRealization : InterfaceRealization | aPackage.getInterfaceRealizations(aPort.type.oclAsType(Interface)))]
[let realizingClass : Class = anInterfaceRealization.owner.oclAsType(Class)]
#include "[realizingClass._package.generateNamespacePath(true)/]/[realizingClass.name/].hpp"
[/let]
[/for]
[/if]
[/for]

//Includes from roles of ConnectorEnds (if required)
[for (aConnector : Connector | aClass.ownedConnector)][for (anEnd : ConnectorEnd | aConnector.end)]
#include "[anEnd.role.type._package.generateNamespacePath(true)/]/[anEnd.role.type.name.toUpperFirst()/].hpp"
[/for][/for]

[if (not aPackage.ignoreNamespace())]using namespace [aPackage.generateNamespace(false)/];[/if]

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
	#ifdef ADD_COUNT
		ADD_COUNT("[className/]()");
	#endif

	DEBUG_MESSAGE(std::cout<<"[aClass.name.toUpperFirst()/] is created..."<<std::endl;)

	//***********************************
	// init Get Set
	[aClass.generateGetSetInit()/] 
}

[for (anAssociation : Association | aClass.getCompositionsToClass())]
[let containerProperty : Property = anAssociation.memberEnd->select(type = aClass)->asOrderedSet()->first()]
[let containmentProperty : Property = anAssociation.memberEnd->select(not (type = aClass))->asOrderedSet()->first()]
[if (containmentProperty.isBackReference())]
[className/]::[className/]([containmentProperty.generateCppType()/] [containmentProperty.name.toLowerFirst()/])
:[className/]()
{
    m_[containmentProperty.name/] = [containmentProperty.name.toLowerFirst()/];
}
[/if] [/let] [/let] [/for]
[for (compositeOwnerClass : Class | aClass.getCompositeOwners())]
[className/]::[className/](std::weak_ptr<[compositeOwnerClass.generateCppType(true)/]> [compositeOwnerClass.name.toLowerFirst()/])
:[className/]()
{
    m_[compositeOwnerClass.name/] = [compositeOwnerClass.name.toLowerFirst()/];
}
[/for]

[className/]::~[className/]()
{
	#ifdef SUB_COUNT
		SUB_COUNT("[className/]()");
	#endif

	DEBUG_MESSAGE(std::cout<<"[aClass.name.toUpperFirst()/] is destroyed..."<<std::endl;)
}

[className/]::[className/](const [className/] & obj):[className/]()
{
	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy [aClass.name.toUpperFirst()/] "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	instantiate();
[for (att : Property | aClass.getAllAttributes()->reject(isBackReference())->sortedBy(name))]
[if (att.upper = 1)]
[if (not (att.type.isPrimitive() or att.type.oclIsKindOf(Enumeration)))]
	if (obj.[att.getterName()/]() != nullptr)
	{
	[/if]	m_[att.name/] = [if (not (att.type.isPrimitive() or att.type.oclIsKindOf(Enumeration)))]std::dynamic_pointer_cast<[att.type.generateCppType(true)/]>([/if]obj.[att.getterName()/]()[if (not (att.type.isPrimitive() or att.type.oclIsKindOf(Enumeration)))]->copy())[/if];
[if (not (att.type.isPrimitive() or att.type.oclIsKindOf(Enumeration)))]
	}
[/if]
[else]
	[att.generateCppType()/] [att.name/]List = obj.[att.getterName()/]();
	Bag<[att.type.generateCppType(true)/]>::iterator [att.name/]Iter = [att.name/]List->begin();
	Bag<[att.type.generateCppType(true)/]>::iterator [att.name/]End = [att.name/]List->end();
	while ([att.name/]Iter != [att.name/]End) 
	{
[if (att.type.isPrimitive())]
		std::shared_ptr<[att.type.generateCppType(true)/]> temp(new [att.type.generateCppType(true)/](*(*[att.name/]Iter)));
[else]
		std::shared_ptr<[att.type.generateCppType(true)/]> temp = std::dynamic_pointer_cast<[att.type.generateCppType(true)/]>((*[att.name/]Iter)->copy());
[/if]
		m_[att.name/]->push_back(temp);
		[att.name/]Iter++;
	}
[/if]
[/for]
}

std::shared_ptr<ecore::EObject>  [className/]::copy() const
{
	std::shared_ptr<[className/]> element(new [className/](*this));
	element->[generateGetThisPtrPropertySetterName()/](element);
	return element;
}

[if (isSingleton())]
[aClass.name.toUpperFirst()/]* [className/]::create()
{
	return new [className/]();
}
[/if]

std::shared_ptr<uml::Class> [className/]::getMetaClass()
{
	return [aPackage.name.concat('PackageImpl')/]::eInstance()->[aClass.generatePackageGetterCall(aClass)/];
}

void [className/]::instantiate()
{   [comment call instantiate of superclasses/]
	[for (aSuperClass : Class | aClass.superClass)]
	[aSuperClass.name.toUpperFirst()/]Impl::instantiate();
	[/for]
	[comment Init properties without default value/]
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())->select(p : Property | p.default->isEmpty()))]
	[aProperty.generateAttributeInstantiation()/]
	[/for]
	[comment Init properties with default value/]
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())->select(p : Property | (not p.defaultValue.oclIsUndefined())))]
	[if ((aProperty.defaultValue.oclIsTypeOf(InstanceValue)))]
	[if (aProperty.defaultValue.type.oclIsUndefined())]
    ['class '.concat(aClass.name).concat(': undefined type of InstanceValue for ').concat(aProperty.qualifiedName).registerError()/]
	[else][if (not aProperty.defaultValue.type.oclIsTypeOf(Enumeration))]
	[aProperty.generateAttributeDefaultInstantiation()/]
	[/if][/if][/if]
	[/for]
	[comment Init connector patterns/]
	[for (aConnector : Connector | aClass.ownedConnector->sortedBy(myQualifiedName()))]
	[if ((not(aConnector.type.oclIsUndefined())) and (not(aConnector.type.name.oclIsUndefined())))]
	[aConnector.generateConnectorInstantiation()/]
	[/if]
	[/for]
}

void [className/]::destroy()
{	[comment Destroy corresponding links if existing/]
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName()))]
	[comment  property must belong to an association AND this association must be binary AND property must be owned by a class (i.e. not owned by an association) AND be typed AND neither be of primitive nor enumeration type AND not be a back reference/]
	[if (not aProperty.association.oclIsUndefined() and aProperty.association.memberEnd->size() = 2 and aProperty.owner.oclIsTypeOf(Class) and (not aProperty.type.oclIsUndefined()) and (not (aProperty.type.isPrimitive() or aProperty.type.oclIsKindOf(Enumeration))) and (not aProperty.isBackReference()))]
	[for (anotherProperty : Property | aProperty.association.memberEnd->reject(p : Property | p = aProperty))]
	[comment anotherProperty must be owned by a class (i.e. not by its association) /]
	[if(anotherProperty.owner.oclIsTypeOf(Class))]
	//Destroying links for opposite property [aProperty.name/]
	[if (aProperty.upper <> 1)]
	for(unsigned int i = 0; i < m_[aProperty.name/]->size(); i++)
	{	
		m_[aProperty.name/]->at(i)->[anotherProperty.getterName()/]()[if (anotherProperty.upper <> 1)]->erase([aClass.generateGetThisPtrPropertyGetterName()/]())[else].reset()[/if];
	}
	[else]
	[if (anotherProperty.upper <> 1)]
	m_[aProperty.name/]->[anotherProperty.getterName()/]()->erase([aClass.generateGetThisPtrPropertyGetterName()/]());
	[else]
	if(m_[aProperty.name/]->[anotherProperty.getterName()/]()[if (anotherProperty.isBackReference())].lock()[/if] == [aClass.generateGetThisPtrPropertyGetterName()/]()) { m_[aProperty.name/]->[anotherProperty.getterName()/]().reset(); }
	[/if]
	[/if]
	[/if]
	[/for]
	[/if]
	[/for]

	[comment Recursively destroy properties/]
	//Erase properties
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName()))]
	[aProperty.generatePropertyDestruction()/]
	[/for]
	//Erase back reference to owner
	[for (compositeOwnerClass : Class | aClass.getCompositeOwners())]
	m_[compositeOwnerClass.name/].reset();
	[/for]
}

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp()/]
[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]
[for (interfaceR : InterfaceRealization | aClass.ownedElement->filter(InterfaceRealization)->sortedBy(myQualifiedName()))] [for (aAttribute : Property | interfaceR.supplier.oclAsType(Interface).ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')] [if (aClass.ownedAttribute->select(name=aAttribute.name)->size() = 0)]
[aAttribute.generateAttributeSetterImplementationCpp(aClass)/]
[aAttribute.generateAttributeGetterImplementationCpp(aClass)/]
[/if][/for][/for]
[for (compositeOwnerClass : Class | aClass.getCompositeOwners())]
[aClass.generateCompositeOwnerAttributeGetterImplementationCpp(compositeOwnerClass)/]
[aClass.generateCompositeOwnerAttributeSetterImplementationCpp(compositeOwnerClass)/]
[/for]

//*********************************
// Operations
//*********************************
[for (aOperation : Operation | aClass.ownedOperation->sortedBy(myQualifiedName())) separator('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateeGetSetImpl()/]
[aClass.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration)).generateESetFunctionForEnumerationImpl(aClass)/]

[aClass.generateGetThisPtrCPP()/]
[/file]
[/template]

[template public generateImplementationSource(aInterface : Interface) { interfaceName : String = aInterface.name.toUpperFirst().concat('Impl'); aPackage : Package = aInterface.ancestors()->filter(Package)->first(); }]
[file (aPackage.getPackageName().concat('/impl/').concat(interfaceName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.generateNamespacePath(false)/]/impl/[interfaceName.concat('.hpp')/]"

[defineDebugMacro()/]

#include <iostream>

[generateAbstractDataTypesIncludes()/]
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aPackage.generateNamespacePath(false)/]/impl/[aPackage.name.concat('PackageImpl')/].hpp"
#include "[aInterface.eClass().ePackage.name/]/[aInterface.eClass().name/].hpp"
[for (cl : Type | aInterface.includes()->sortedBy(myQualifiedName())) ? ( oclIsKindOf(Class) or oclIsKindOf(Interface))]
[if (cl.oclIsUndefined() or cl.name.oclIsUndefined())]
// undefined  [cl.eClass().name/] ([cl.toString()/]) ['class '.concat(aInterface.name).concat(': header include failed for undefined ').concat(cl.eClass().name).concat(' ').concat(cl.toString()).registerError()/]
[else]
#include "[cl.getNearestPackage().generateNamespacePath(false)/]/[cl.name.toUpperFirst()/].hpp"
[/if]
[/for]

[if (aInterface.ownedOperation.method->notEmpty())][if(ownedOperation.method->filter(Activity)->notEmpty())]
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"
[/if][/if]

[for (aOperation : Operation | aInterface.ownedOperation->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (aOperation.method->notEmpty())]
[if (aOperation.method->asOrderedSet()->first().oclIsKindOf(OpaqueBehavior))]
[if (aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->includes(keyInclude()))]
[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->asOrderedSet()->indexOf(keyInclude())]
[if (0 < index and index <= aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->size())]
//Included from operation "[aOperation.name/]"
[aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->asOrderedSet()->at(index)/]
[/if][/let][/if][/if][/if][/for]

[if (aInterface.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration))->size() > 0)]
#include "uml/EnumerationLiteral.hpp"
[/if]
[for (instVal : InstanceValue | aInterface.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aInterface.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
[else]
#include "[instVal.type._package.generateNamespacePath(false)/]/[instVal.type._package.getPackageName()/]Factory.hpp"
#include "[instVal.type._package.generateNamespacePath(false)/]/[instVal.type.name.toUpperFirst()/].hpp"
[/if]
[/for]

[if (not aPackage.ignoreNamespace())]using namespace [aPackage.generateNamespace(false)/];[/if]

//*********************************
// Constructor / Destructor
//*********************************
[interfaceName/]::[interfaceName/]()
{
	//***********************************
	// init Get Set
	[aInterface.generateGetSetInit()/] 

	// init properties without default
	[for (aProperty : Property | aInterface.ownedAttribute->sortedBy(myQualifiedName()))]
	[if (aProperty.default->isEmpty() and aProperty.upper <> 1)][aProperty.initAttributeProtectedMember()/][/if]
	[/for]

	[for (instVal : InstanceValue | aInterface.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
	[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
	// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aInterface.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
	[else]
	[/if]
	[/for]
	
}

[for (anAssociation : Association | aInterface.getCompositionsToInterface())]
[let containerProperty : Property = anAssociation.memberEnd->select(type = aInterface)->asOrderedSet()->first()]
[let containmentProperty : Property = anAssociation.memberEnd->select(not (type = aInterface))->asOrderedSet()->first()]
[if (containmentProperty.isBackReference())]
[interfaceName/]::[interfaceName/]([containmentProperty.generateCppType()/] [containmentProperty.name.toLowerFirst()/])
:[interfaceName/]()
{
    m_[containmentProperty.name/] = [containmentProperty.name.toLowerFirst()/];
}
[/if] [/let] [/let] [/for]

[interfaceName/]::~[interfaceName/]()
{
}

[if (isSingleton())]
[aInterface.name.toUpperFirst()/]* [interfaceName/]::create()
{
	return new [interfaceName/]();
}
[/if]

/*std::shared_ptr<uml::Class> [interfaceName/]::getMetaClass()
{
	return [aPackage.name.concat('PackageImpl')/]::eInstance()->[aInterface.generatePackageGetterCall(aInterface)/];
}*/

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : Property | aInterface.ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp()/]
[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]
[for (interfaceR : InterfaceRealization | aInterface.ownedElement->filter(InterfaceRealization)->sortedBy(myQualifiedName()))] [for (aAttribute : Property | interfaceR.supplier.oclAsType(Interface).ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')] [if (aInterface.ownedAttribute->select(name=aAttribute.name)->size() = 0)]
[aAttribute.generateAttributeSetterImplementationCpp(aInterface)/]
[aAttribute.generateAttributeGetterImplementationCpp(aInterface)/]
[/if][/for][/for]

//*********************************
// Operations
//*********************************
[for (aOperation : Operation | aInterface.ownedOperation->sortedBy(myQualifiedName())) separator('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aInterface.generateeGetSetImpl()/]
[aInterface.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration)).generateESetFunctionForEnumerationImpl(aInterface)/]

[aInterface.generateGetThisPtrCPP()/]
[/file]
[/template]
