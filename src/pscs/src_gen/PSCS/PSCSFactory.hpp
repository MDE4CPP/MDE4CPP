//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSCSFACTORY_HPP
#define PSCSFACTORY_HPP
// namespace macro header include
#include "PSCS/PSCS.hpp"

#include <map>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EFactory.hpp"
#include "PSCS/PSCSPackage.hpp"

namespace PSCS 
{
	class PSCSPackage;
}


namespace fUML::Semantics::Loci
{
	class Locus;
}









namespace PSCS 
{
	class PSCS_API PSCSFactory : virtual public ecore::EFactory 
	{
		private:    
			PSCSFactory(PSCSFactory const&) = delete;
			PSCSFactory& operator=(PSCSFactory const&) = delete;
		protected:
			PSCSFactory(){}
		
			//Singleton Getter
			public:
				static std::shared_ptr<PSCSFactory> eInstance();
		
			//Creator functions
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const = 0;

			
	};
}
#endif /* end of include guard: PSCSFACTORY_HPP */
