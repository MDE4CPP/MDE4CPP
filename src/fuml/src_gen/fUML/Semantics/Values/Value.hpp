//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_VALUES_VALUE_HPP
#define FUML_SEMANTICS_VALUES_VALUE_HPP


#include <memory>
#include <string>
// forward declarations


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace fUML
{
	class fUMLFactory;
}

//Forward Declaration for used types 
namespace uml 
{
	class Classifier;
	class ValueSpecification;
}

// namespace macro header include
#include "fUML/fUML.hpp"

// base class includes
#include "fUML/Semantics/Loci/SemanticVisitor.hpp"




//*********************************
namespace fUML::Semantics::Values 
{
	
	class FUML_API Value: virtual public fUML::Semantics::Loci::SemanticVisitor
	{
		public:
 			Value(const Value &) {}

		protected:
			Value(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Value() {}

			//*********************************
			// Operations
			//*********************************
			virtual bool IsInstanceOf(const std::shared_ptr<uml::Classifier>& classifier) = 0;
			virtual std::shared_ptr<fUML::Semantics::Values::Value> _copy() = 0;
			virtual bool checkAllParents(const std::shared_ptr<uml::Classifier>& type, const std::shared_ptr<uml::Classifier>& classifier) = 0;
			virtual bool equals(const std::shared_ptr<fUML::Semantics::Values::Value>& otherValue) = 0;
			virtual std::shared_ptr<Bag<uml::Classifier> > getTypes() const = 0;
			virtual bool hasTypes(const std::shared_ptr<uml::Classifier>& type) = 0;
			virtual std::shared_ptr<fUML::Semantics::Values::Value> new_() = 0;
			virtual std::string objectId() = 0;
			virtual std::shared_ptr<uml::ValueSpecification> specify() = 0;
			virtual std::string toString() = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
	};
}
#endif /* end of include guard: FUML_SEMANTICS_VALUES_VALUE_HPP */
