[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Interface artefacts
 * 
 */]
[module generateInterfaceHeader('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]

[**
 * generate interface model file
*/]
[template public generateInterfaceHeader(anInterface : Interface) {aPackage:Package = anInterface.ancestors()->filter(Package)->first();}]
[file (aPackage.generateNamespacePath(false).concat('/').concat(anInterface.name).concat('.hpp'), false, 'UTF-8')]
[startGuard(anInterface)/]

#include <memory>
#include <string> 

//*********************************
// generated Includes

[generateAbstractDataTypesForwardDeclaration()/]

//Forward Declaration for used types
[for (element : Interface| anInterface.ownedAttribute.type->flatten()->filter(Interface)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
[if (not element.getNearestPackage().isIgnoreNamespace())]namespace [element._package.generateNamespace(true)/] 
{
[/if]
	class [element.name/];
[if (not element.getNearestPackage().isIgnoreNamespace())]}[/if]
[/for]

[for (element : Class| anInterface.ownedAttribute.type->flatten()->filter(Class)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
[if (not element.getNearestPackage().isIgnoreNamespace())]namespace [element._package.generateNamespace(true)/] 
{
[/if]
	class [element.name/];
[if (not element.getNearestPackage().isIgnoreNamespace())]}[/if]
[/for]

[for (element : Type | anInterface.allOwnedElements()->filter(Operation).ownedParameter.type->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
[if (not element.getNearestPackage().isIgnoreNamespace())]namespace [element._package.generateNamespace(true)/]
{
[/if]
	class [element.name/];
[if (not element.getNearestPackage().isIgnoreNamespace())]}[/if]
[/for]

// base class includes
[if (anInterface.generalization->isEmpty())]
#include "uml/Element.hpp"
[else]
[for (elements : Classifier| anInterface.generalization.general->asOrderedSet()->sortedBy(myQualifiedName()))]
#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.toUpperFirst().concat('.hpp')/]"
[/for]
[/if]

[if (anInterface.oclIsKindOf(Stereotype))]
#include "uml/Stereotype.hpp"
[/if]
// enum includes
[for (elements : Enumeration| anInterface.allOwnedElements()->selectByKind(Enumeration)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.concat('.hpp')/]"[/for]

//*********************************

[if (not anInterface.getNearestPackage().isIgnoreNamespace())]namespace [aPackage.generateNamespace(false)/] 
{
[/if]
	class [anInterface.name/] [if (anInterface.generalization->isEmpty())] : virtual public uml::Element[else][for (aClassifier : Classifier | anInterface.generalization.general->asOrderedSet()->sortedBy(myQualifiedName())) before (':') separator (',') after ('\n')]
virtual public [aClassifier.getClassifierName(anInterface, false, aClassifier.getNearestPackage().isIgnoreNamespace())/][/for][/if]

	{
		protected:
			[anInterface.name/](){}

		public:
			//destructor
			virtual ~[anInterface.name/]() {}
			
			//*********************************
			// Getter Setter
			//*********************************
			[anInterface.ownedAttribute.generateAttributeAccessorsDeclaration(false)/]
			
			//*********************************
			// Operations
			//*********************************
			[for (anOperation : Operation | anInterface.ownedOperation->sortedBy(name)) before('\t\t\t//Methods defined by Operations\n') after('\n')]
			[anOperation.generateOperationDecl(false)/]
			[/for]

		protected:
			//*********************************
			// Members
			//*********************************
			[anInterface.ownedAttribute.generateAttributeProtectedMember()/]
	};
[if (not anInterface.getNearestPackage().isIgnoreNamespace())]}[/if]
[endGuard(anInterface)/]
[/file]
[/template]

