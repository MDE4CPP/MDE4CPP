//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_TYPESPACKAGEIMPL_HPP
#define OCL_TYPESPACKAGEIMPL_HPP

#include "ecore/ecorePackage.hpp"
#include "ecore/impl/EPackageImpl.hpp"

#include "ocl/Types/TypesPackage.hpp" 


namespace ocl::Types 
{
	class AnyType;
	class BagType;
	class CollectionType;
	class InvalidType;
	class MessageType;
	class NameTypeBinding;
	class OrderedSetType;
	class SequenceType;
	class SetType;
	class TemplateParameterType;
	class TupleType;
	class VoidType;}

namespace ecore
{
	class ecoreFactory;
}

namespace ocl::Types
{
	class TypesPackageImpl : public ecore::EPackageImpl ,virtual public TypesPackage
	{
		private:    
			TypesPackageImpl(TypesPackageImpl const&) = delete;
			TypesPackageImpl& operator=(TypesPackageImpl const&) = delete;

		protected:
			TypesPackageImpl();

		public:
			virtual ~TypesPackageImpl();

			// Begin Class AnyType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getAnyType_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getAnyType_Attribute_object() const ;
			
			
			// End Class AnyType

			// Begin Class BagType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getBagType_Class() const ;
			
			
			
			
			// End Class BagType

			// Begin Class CollectionType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCollectionType_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getCollectionType_Attribute_elementType() const ;
			virtual std::shared_ptr<ecore::EReference> getCollectionType_Attribute_instance() const ;
			
			virtual std::shared_ptr<ecore::EOperation> getCollectionType_Operation_kindOf_CollectionType() const ;
			
			// End Class CollectionType

			// Begin Class InvalidType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getInvalidType_Class() const ;
			
			
			
			
			// End Class InvalidType

			// Begin Class MessageType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getMessageType_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getMessageType_Attribute_referredOperation() const ;
			virtual std::shared_ptr<ecore::EReference> getMessageType_Attribute_referredSignal() const ;
			
			
			// End Class MessageType

			// Begin Class NameTypeBinding
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getNameTypeBinding_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getNameTypeBinding_Attribute_name() const ;
			
			virtual std::shared_ptr<ecore::EReference> getNameTypeBinding_Attribute_type() const ;
			
			
			// End Class NameTypeBinding

			// Begin Class OrderedSetType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getOrderedSetType_Class() const ;
			
			
			
			
			// End Class OrderedSetType

			// Begin Class SequenceType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSequenceType_Class() const ;
			
			
			
			
			// End Class SequenceType

			// Begin Class SetType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSetType_Class() const ;
			
			
			
			
			// End Class SetType

			// Begin Class TemplateParameterType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getTemplateParameterType_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getTemplateParameterType_Attribute_specification() const ;
			
			
			
			// End Class TemplateParameterType

			// Begin Class TupleType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getTupleType_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getTupleType_Attribute_instance() const ;
			virtual std::shared_ptr<ecore::EReference> getTupleType_Attribute_parts() const ;
			
			
			// End Class TupleType

			// Begin Class VoidType
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getVoidType_Class() const ;
			
			
			
			
			// End Class VoidType

			
			// SubPackages Getters
			

		private:
			std::shared_ptr<ecore::EClass> m_anyType_Class = nullptr;std::shared_ptr<ecore::EClass> m_bagType_Class = nullptr;std::shared_ptr<ecore::EClass> m_collectionType_Class = nullptr;std::shared_ptr<ecore::EClass> m_invalidType_Class = nullptr;std::shared_ptr<ecore::EClass> m_messageType_Class = nullptr;std::shared_ptr<ecore::EClass> m_nameTypeBinding_Class = nullptr;std::shared_ptr<ecore::EClass> m_orderedSetType_Class = nullptr;std::shared_ptr<ecore::EClass> m_sequenceType_Class = nullptr;std::shared_ptr<ecore::EClass> m_setType_Class = nullptr;std::shared_ptr<ecore::EClass> m_templateParameterType_Class = nullptr;std::shared_ptr<ecore::EClass> m_tupleType_Class = nullptr;std::shared_ptr<ecore::EClass> m_voidType_Class = nullptr;
			
			std::shared_ptr<ecore::EAttribute> m_nameTypeBinding_Attribute_name = nullptr;std::shared_ptr<ecore::EAttribute> m_templateParameterType_Attribute_specification = nullptr;
			std::shared_ptr<ecore::EReference> m_collectionType_Attribute_elementType = nullptr;std::shared_ptr<ecore::EReference> m_collectionType_Attribute_instance = nullptr;std::shared_ptr<ecore::EReference> m_tupleType_Attribute_instance = nullptr;std::shared_ptr<ecore::EReference> m_anyType_Attribute_object = nullptr;std::shared_ptr<ecore::EReference> m_tupleType_Attribute_parts = nullptr;std::shared_ptr<ecore::EReference> m_messageType_Attribute_referredOperation = nullptr;std::shared_ptr<ecore::EReference> m_messageType_Attribute_referredSignal = nullptr;std::shared_ptr<ecore::EReference> m_nameTypeBinding_Attribute_type = nullptr;
			std::shared_ptr<ecore::EOperation> m_collectionType_Operation_kindOf_CollectionType = nullptr;

			friend class TypesPackage;

			static bool isInited;
			static TypesPackage* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init(std::shared_ptr<ecore::EPackage> package);

		public:
			void createPackageContents(std::shared_ptr<ecore::EPackage> package);
			void initializePackageContents();

		private:
			void createAnyTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createBagTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createCollectionTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createInvalidTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createMessageTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createNameTypeBindingContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createOrderedSetTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createSequenceTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createSetTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createTemplateParameterTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createTupleTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createVoidTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);

			void initializeAnyTypeContent();
			void initializeBagTypeContent();
			void initializeCollectionTypeContent();
			void initializeInvalidTypeContent();
			void initializeMessageTypeContent();
			void initializeNameTypeBindingContent();
			void initializeOrderedSetTypeContent();
			void initializeSequenceTypeContent();
			void initializeSetTypeContent();
			void initializeTemplateParameterTypeContent();
			void initializeTupleTypeContent();
			void initializeVoidTypeContent();
			void initializePackageEDataTypes();



	};
}
#endif /* end of include guard: OCL_TYPESPACKAGEIMPL_HPP */
