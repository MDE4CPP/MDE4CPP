//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PROTOCOLTRANSITIONPROTOCOLTRANSITIONIMPL_HPP
#define UML_PROTOCOLTRANSITIONPROTOCOLTRANSITIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../ProtocolTransition.hpp"

#include "uml/impl/TransitionImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ProtocolTransitionImpl : virtual public TransitionImpl, virtual public ProtocolTransition 
	{
		public: 
			ProtocolTransitionImpl(const ProtocolTransitionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ProtocolTransitionImpl& operator=(ProtocolTransitionImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ProtocolTransitionImpl();
			virtual std::shared_ptr<uml::ProtocolTransition> getThisProtocolTransitionPtr() const;
			virtual void setThisProtocolTransitionPtr(std::weak_ptr<uml::ProtocolTransition> thisProtocolTransitionPtr);

			//Additional constructors for the containments back reference
			ProtocolTransitionImpl(std::weak_ptr<uml::Region> par_container);
			//Additional constructors for the containments back reference
			ProtocolTransitionImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ProtocolTransitionImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~ProtocolTransitionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			Derivation for ProtocolTransition::/referred
			result = (trigger->collect(event)->select(oclIsKindOf(CallEvent))->collect(oclAsType(CallEvent).operation)->asSet())
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::Operation>> getReferreds() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Specifies the post condition of the Transition which is the Condition that should be obtained once the Transition is triggered. This post condition is part of the post condition of the Operation connected to the Transition.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual const std::shared_ptr<uml::Constraint>& getPostCondition() const ;
			/*!
			Specifies the post condition of the Transition which is the Condition that should be obtained once the Transition is triggered. This post condition is part of the post condition of the Operation connected to the Transition.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setPostCondition(const std::shared_ptr<uml::Constraint>&) ;
			/*!
			Specifies the precondition of the Transition. It specifies the Condition that should be verified before triggering the Transition. This guard condition added to the source State will be evaluated as part of the precondition of the Operation referred by the Transition if any.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual const std::shared_ptr<uml::Constraint>& getPreCondition() const ;
			/*!
			Specifies the precondition of the Transition. It specifies the Condition that should be verified before triggering the Transition. This guard condition added to the source State will be evaluated as part of the precondition of the Operation referred by the Transition if any.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setPreCondition(const std::shared_ptr<uml::Constraint>&) ;
			/*!
			This association refers to the associated Operation. It is derived from the Operation of the CallEvent Trigger when applicable.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::Operation>>& getReferred() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::ProtocolTransition> m_thisProtocolTransitionPtr;
	};
}
#endif /* end of include guard: UML_PROTOCOLTRANSITIONPROTOCOLTRANSITIONIMPL_HPP */
