
#include "fUML/Semantics/Actions/impl/ClauseActivationImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>




#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"


//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "fUML/Semantics/Actions/ActionsFactory.hpp"
#include "fUML/Semantics/SimpleClassifiers/BooleanValue.hpp"
#include "uml/Clause.hpp"
#include "fUML/Semantics/Actions/ClauseActivation.hpp"
#include "fUML/Semantics/Actions/ConditionalNodeActivation.hpp"
//Factories and Package includes
#include "fUML/Semantics/SemanticsPackage.hpp"
#include "fUML/fUMLPackage.hpp"
#include "fUML/Semantics/Actions/ActionsPackage.hpp"
#include "fUML/Semantics/SimpleClassifiers/SimpleClassifiersPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace fUML::Semantics::Actions;

//*********************************
// Constructor / Destructor
//*********************************
ClauseActivationImpl::ClauseActivationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

ClauseActivationImpl::~ClauseActivationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete ClauseActivation "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


ClauseActivationImpl::ClauseActivationImpl(const ClauseActivationImpl & obj): ClauseActivationImpl()
{
	*this = obj;
}

ClauseActivationImpl& ClauseActivationImpl::operator=(const ClauseActivationImpl & obj)
{
	//call overloaded =Operator for each base class
	ecore::EModelElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of ClauseActivation 
	 * which is generated by the compiler (as ClauseActivation is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//ClauseActivation::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy ClauseActivation "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_clause  = obj.getClause();
	m_conditionalNodeActivation  = obj.getConditionalNodeActivation();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> ClauseActivationImpl::copy() const
{
	std::shared_ptr<ClauseActivationImpl> element(new ClauseActivationImpl());
	*element =(*this);
	element->setThisClauseActivationPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
std::shared_ptr<fUML::Semantics::SimpleClassifiers::BooleanValue> ClauseActivationImpl::getDecision()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<fUML::Semantics::Actions::ClauseActivation> > ClauseActivationImpl::getPredecessors()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<fUML::Semantics::Actions::ClauseActivation> > ClauseActivationImpl::getSuccessors()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClauseActivationImpl::isReady()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void ClauseActivationImpl::recieveControl()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void ClauseActivationImpl::runTest()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void ClauseActivationImpl::selectBody()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference clause */
std::shared_ptr<uml::Clause> ClauseActivationImpl::getClause() const
{
    return m_clause;
}
void ClauseActivationImpl::setClause(std::shared_ptr<uml::Clause> _clause)
{
    m_clause = _clause;
	
}

/* Getter & Setter for reference conditionalNodeActivation */
std::shared_ptr<fUML::Semantics::Actions::ConditionalNodeActivation> ClauseActivationImpl::getConditionalNodeActivation() const
{
    return m_conditionalNodeActivation;
}
void ClauseActivationImpl::setConditionalNodeActivation(std::shared_ptr<fUML::Semantics::Actions::ConditionalNodeActivation> _conditionalNodeActivation)
{
    m_conditionalNodeActivation = _conditionalNodeActivation;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> ClauseActivationImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void ClauseActivationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get fUMLFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void ClauseActivationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("clause");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("clause")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("conditionalNodeActivation");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("conditionalNodeActivation")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void ClauseActivationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
}

void ClauseActivationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CLAUSE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::Clause> _clause = std::dynamic_pointer_cast<uml::Clause>( references.front() );
				setClause(_clause);
			}
			
			return;
		}

		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CONDITIONALNODEACTIVATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<fUML::Semantics::Actions::ConditionalNodeActivation> _conditionalNodeActivation = std::dynamic_pointer_cast<fUML::Semantics::Actions::ConditionalNodeActivation>( references.front() );
				setConditionalNodeActivation(_conditionalNodeActivation);
			}
			
			return;
		}
	}
	ecore::EObjectImpl::resolveReferences(featureID, references);
}

void ClauseActivationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void ClauseActivationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<fUML::Semantics::Actions::ActionsPackage> package = fUML::Semantics::Actions::ActionsPackage::eInstance();
	// Add references
		saveHandler->addReference(this->getClause(), "clause", getClause()->eClass() != uml::umlPackage::eInstance()->getClause_Class()); 
		saveHandler->addReference(this->getConditionalNodeActivation(), "conditionalNodeActivation", getConditionalNodeActivation()->eClass() != fUML::Semantics::Actions::ActionsPackage::eInstance()->getConditionalNodeActivation_Class()); 
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

std::shared_ptr<ecore::EClass> ClauseActivationImpl::eStaticClass() const
{
	return fUML::Semantics::Actions::ActionsPackage::eInstance()->getClauseActivation_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any ClauseActivationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CLAUSE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getClause();
			return eAny(returnValue,uml::umlPackage::CLAUSE_CLASS,false); //260
		}
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CONDITIONALNODEACTIVATION:
		{
			std::shared_ptr<ecore::EObject> returnValue=getConditionalNodeActivation();
			return eAny(returnValue,fUML::Semantics::Actions::ActionsPackage::CONDITIONALNODEACTIVATION_CLASS,false); //261
		}
	}
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
}

bool ClauseActivationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CLAUSE:
			return getClause() != nullptr; //260
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CONDITIONALNODEACTIVATION:
			return getConditionalNodeActivation() != nullptr; //261
	}
	return ecore::EObjectImpl::internalEIsSet(featureID);
}

bool ClauseActivationImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CLAUSE:
		{
			// CAST Any to uml::Clause
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<uml::Clause> _clause = std::dynamic_pointer_cast<uml::Clause>(_temp);
			setClause(_clause); //260
			return true;
		}
		case fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_ATTRIBUTE_CONDITIONALNODEACTIVATION:
		{
			// CAST Any to fUML::Semantics::Actions::ConditionalNodeActivation
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<fUML::Semantics::Actions::ConditionalNodeActivation> _conditionalNodeActivation = std::dynamic_pointer_cast<fUML::Semantics::Actions::ConditionalNodeActivation>(_temp);
			setConditionalNodeActivation(_conditionalNodeActivation); //261
			return true;
		}
	}

	return ecore::EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
Any ClauseActivationImpl::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;

  	switch(operationID)
	{
		// fUML::Semantics::Actions::ClauseActivation::getDecision() : fUML::Semantics::SimpleClassifiers::BooleanValue: 1084984079
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_GETDECISION:
		{
			result = eAny(this->getDecision(), fUML::Semantics::SimpleClassifiers::SimpleClassifiersPackage::BOOLEANVALUE_CLASS,false);
			break;
		}
		// fUML::Semantics::Actions::ClauseActivation::getPredecessors() : fUML::Semantics::Actions::ClauseActivation[*]: 712913762
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_GETPREDECESSORS:
		{
			std::shared_ptr<Bag<fUML::Semantics::Actions::ClauseActivation> > resultList = this->getPredecessors();
			return eAny(resultList,fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_CLASS,true);
			break;
		}
		// fUML::Semantics::Actions::ClauseActivation::getSuccessors() : fUML::Semantics::Actions::ClauseActivation[*]: 970094705
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_GETSUCCESSORS:
		{
			std::shared_ptr<Bag<fUML::Semantics::Actions::ClauseActivation> > resultList = this->getSuccessors();
			return eAny(resultList,fUML::Semantics::Actions::ActionsPackage::CLAUSEACTIVATION_CLASS,true);
			break;
		}
		// fUML::Semantics::Actions::ClauseActivation::isReady() : bool: 1218269216
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_ISREADY:
		{
			result = eAny(this->isReady(),0,false);
			break;
		}
		// fUML::Semantics::Actions::ClauseActivation::recieveControl(): 1814524618
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_RECIEVECONTROL:
		{
			this->recieveControl();
		}
		// fUML::Semantics::Actions::ClauseActivation::runTest(): 507684446
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_RUNTEST:
		{
			this->runTest();
		}
		// fUML::Semantics::Actions::ClauseActivation::selectBody(): 693250888
		case ActionsPackage::CLAUSEACTIVATION_OPERATION_SELECTBODY:
		{
			this->selectBody();
		}

		default:
		{
			// call superTypes
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (!result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<fUML::Semantics::Actions::ClauseActivation> ClauseActivationImpl::getThisClauseActivationPtr() const
{
	return m_thisClauseActivationPtr.lock();
}
void ClauseActivationImpl::setThisClauseActivationPtr(std::weak_ptr<fUML::Semantics::Actions::ClauseActivation> thisClauseActivationPtr)
{
	m_thisClauseActivationPtr = thisClauseActivationPtr;
}


