//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_ACTIVITIES_FORKEDTOKEN_HPP
#define FUML_SEMANTICS_ACTIVITIES_FORKEDTOKEN_HPP


#include <memory>
#include <string>
// forward declarations


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace fUML
{
	class fUMLFactory;
}

//Forward Declaration for used types 
namespace fUML::Semantics::Activities 
{
	class ActivityNodeActivation;
}

// namespace macro header include
#include "fUML/fUML.hpp"

// base class includes
#include "fUML/Semantics/Activities/Token.hpp"




//*********************************
namespace fUML::Semantics::Activities 
{
	
	class FUML_API ForkedToken: virtual public Token
	{
		public:
 			ForkedToken(const ForkedToken &) {}

		protected:
			ForkedToken(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~ForkedToken() {}

			//*********************************
			// Operations
			//*********************************
			virtual std::shared_ptr<fUML::Semantics::Activities::Token> _copy() = 0;
			virtual bool equals(std::shared_ptr<fUML::Semantics::Activities::Token> otherToken) = 0;
			virtual std::shared_ptr<Any> getValue() const = 0;
			virtual bool isControl() = 0;
			virtual void withdraw() = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual bool isBaseTokenIsWithdrawn() const = 0;
			virtual void setBaseTokenIsWithdrawn (bool _baseTokenIsWithdrawn)= 0;
			virtual int getRemainingOffersCount() const = 0;
			virtual void setRemainingOffersCount (int _remainingOffersCount)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<fUML::Semantics::Activities::Token> getBaseToken() const = 0;
			virtual void setBaseToken(std::shared_ptr<fUML::Semantics::Activities::Token>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			bool m_baseTokenIsWithdrawn= false;
			int m_remainingOffersCount= 0;
			
			//*********************************
			// Reference Members
			//*********************************
			std::shared_ptr<fUML::Semantics::Activities::Token> m_baseToken;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_ACTIVITIES_FORKEDTOKEN_HPP */
