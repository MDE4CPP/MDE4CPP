
#include "uml/impl/ImageImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Subset.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Comment.hpp"
#include "uml/Element.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
ImageImpl::ImageImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

ImageImpl::~ImageImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Image "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
ImageImpl::ImageImpl(std::weak_ptr<uml::Element> par_owner)
:ImageImpl()
{
	m_owner = par_owner;
}

ImageImpl::ImageImpl(const ImageImpl & obj): ImageImpl()
{
	*this = obj;
}

ImageImpl& ImageImpl::operator=(const ImageImpl & obj)
{
	//call overloaded =Operator for each base class
	ElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Image 
	 * which is generated by the compiler (as Image is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Image::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Image "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_content = obj.getContent();
	m_format = obj.getFormat();
	m_location = obj.getLocation();

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> ImageImpl::copy() const
{
	std::shared_ptr<ImageImpl> element(new ImageImpl());
	*element =(*this);
	element->setThisImagePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute content */
std::string ImageImpl::getContent() const 
{
	return m_content;
}
void ImageImpl::setContent(std::string _content)
{
	m_content = _content;
	
}

/* Getter & Setter for attribute format */
std::string ImageImpl::getFormat() const 
{
	return m_format;
}
void ImageImpl::setFormat(std::string _format)
{
	m_format = _format;
	
}

/* Getter & Setter for attribute location */
std::string ImageImpl::getLocation() const 
{
	return m_location;
}
void ImageImpl::setLocation(std::string _location)
{
	m_location = _location;
	
}

//*********************************
// Reference Getters & Setters
//*********************************

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> ImageImpl::eContainer() const
{
	if(auto wp = m_owner.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void ImageImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void ImageImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("content");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'std::string'
			std::string value;
			value = iter->second;
			this->setContent(value);
		}

		iter = attr_list.find("format");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'std::string'
			std::string value;
			value = iter->second;
			this->setFormat(value);
		}

		iter = attr_list.find("location");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'std::string'
			std::string value;
			value = iter->second;
			this->setLocation(value);
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ElementImpl::loadAttributes(loadHandler, attr_list);
}

void ImageImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	ElementImpl::loadNode(nodeName, loadHandler);
}

void ImageImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	ElementImpl::resolveReferences(featureID, references);
}

void ImageImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void ImageImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Add attributes
          if ( this->eIsSet(package->getImage_Attribute_content()) )
          {
			saveHandler->addAttribute("content", this->getContent());
          }

          if ( this->eIsSet(package->getImage_Attribute_format()) )
          {
			saveHandler->addAttribute("format", this->getFormat());
          }

          if ( this->eIsSet(package->getImage_Attribute_location()) )
          {
			saveHandler->addAttribute("location", this->getLocation());
          }
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& ImageImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getImage_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> ImageImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::IMAGE_ATTRIBUTE_CONTENT:
			return eAny(getContent(),ecore::ecorePackage::ESTRING_CLASS,false); //1113
		case uml::umlPackage::IMAGE_ATTRIBUTE_FORMAT:
			return eAny(getFormat(),ecore::ecorePackage::ESTRING_CLASS,false); //1114
		case uml::umlPackage::IMAGE_ATTRIBUTE_LOCATION:
			return eAny(getLocation(),ecore::ecorePackage::ESTRING_CLASS,false); //1115
	}
	return ElementImpl::eGet(featureID, resolve, coreType);
}

bool ImageImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::IMAGE_ATTRIBUTE_CONTENT:
			return getContent() != ""; //1113
		case uml::umlPackage::IMAGE_ATTRIBUTE_FORMAT:
			return getFormat() != ""; //1114
		case uml::umlPackage::IMAGE_ATTRIBUTE_LOCATION:
			return getLocation() != ""; //1115
	}
	return ElementImpl::internalEIsSet(featureID);
}

bool ImageImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::IMAGE_ATTRIBUTE_CONTENT:
		{
			try
			{
				std::string _content = newValue->get<std::string>();
				setContent(_content); //1113
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'content'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::IMAGE_ATTRIBUTE_FORMAT:
		{
			try
			{
				std::string _format = newValue->get<std::string>();
				setFormat(_format); //1114
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'format'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::IMAGE_ATTRIBUTE_LOCATION:
		{
			try
			{
				std::string _location = newValue->get<std::string>();
				setLocation(_location); //1115
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'location'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ElementImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> ImageImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = ElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Image> ImageImpl::getThisImagePtr() const
{
	return m_thisImagePtr.lock();
}
void ImageImpl::setThisImagePtr(std::weak_ptr<uml::Image> thisImagePtr)
{
	m_thisImagePtr = thisImagePtr;
	setThisElementPtr(thisImagePtr);
}


