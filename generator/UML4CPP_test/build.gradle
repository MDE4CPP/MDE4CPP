description 'UML4CPP_test collection'

task createUML4CPP_test(dependsOn: ['checkDependencies', 'UML4CPP_test.generator:compileJava', 'executeCompiler', 'UML4CPP_test.generator:deliverUML4CPP_test']) {
	group 'Generators'
	description 'create executable jar UML4CPP_test generator'

	inputs.files file("UML4CPP_test.generator/build/classes/java/main"), file("UML4CPP_test.generator/src"), file("../UML4CPP/UML4CPP.generator/src")
	outputs.dir file("UML4CPP_test.generator/build")
}

task executeCompiler(type: JavaExec, dependsOn: ['checkDependencies','UML4CPP_test.generator.compiler:jar']) {
	description 'generate emtl files for UML4CPP_test generator'
	main = "-jar"
	args "UML4CPP_test.generator.compiler/build/libs/UML4CPP_test.generator.compiler.jar", "UML4CPP_test.generator/src", "UML4CPP_test.generator/build/classes/java/main", file("../UML4CPP")

	inputs.files file("UML4CPP_test.generator.compiler/build/libs/UML4CPP_test.generator.compiler.jar"), file("UML4CPP_test.generator/src"), file("UML4CPP_test.generator/src"), file("../UML4CPP/UML4CPP.generator/src")
	outputs.dir file("UML4CPP_test.generator/build/classes/java/main")
}
tasks.getByPath('UML4CPP_test.generator:jar').mustRunAfter(executeCompiler)
executeCompiler.mustRunAfter tasks.getByPath('UML4CPP_test.generator:compileJava')

task checkDependencies {
	if (System.getenv('MDE4CPP_HOME') == null) {
		throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
	}
	if (System.getenv('MDE4CPP_ECLIPSE_HOME') == null) {
		throw new GradleException('System environment variable "MDE4CPP_ECLIPSE_HOME" is not defined')
	}
	
	[	'com.google.guava_*.jar',
		'javax.inject_*.jar',
		'lpg.runtime.java_*.jar',
		'org.eclipse.acceleo.common_*.jar',
		'org.eclipse.acceleo.engine_*.jar',
		'org.eclipse.acceleo.model_*.jar',
		'org.eclipse.acceleo.parser_*.jar',
		'org.eclipse.core.contenttype_*.jar',
		'org.eclipse.core.runtime_*.jar',
		'org.eclipse.emf.common_*.jar',
		'org.eclipse.emf.ecore.xmi_*.jar',
		'org.eclipse.emf.ecore_*.jar',
		'org.eclipse.equinox.app_*.jar',
		'org.eclipse.equinox.common_*.jar',
		'org.eclipse.equinox.preferences_*.jar',
		'org.eclipse.equinox.registry_*.jar',
		'org.eclipse.ocl.common_*.jar',
		'org.eclipse.ocl.ecore_*.jar',
		'org.eclipse.ocl_*.jar',
		'org.eclipse.osgi_*.jar',
		'org.eclipse.uml2.common_*.jar',
		'org.eclipse.uml2.uml_*.jar',
		'org.eclipse.uml2.uml.resources_*.jar',
		'org.eclipse.uml2.types_*.jar'
	].each { jarName ->
		FileTree tree = fileTree(dir: System.getenv('MDE4CPP_ECLIPSE_HOME') + '/plugins', include: "${jarName}")
		if(tree.isEmpty()) {
			throw new GradleException(System.getenv('MDE4CPP_ECLIPSE_HOME') + "/plugins/${jarName} is not found")
		}
	}
	
}
executeCompiler.mustRunAfter(checkDependencies)