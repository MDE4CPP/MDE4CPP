[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2021 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to 
 * deal in the Software without restriction, including without limitation the 
 * rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOF
 * TWARE.
 */]

[module generateBehavioralFeatureInvoke('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateOperation /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::helpers::IDHelper /]
[import ecore4CPP::generator::main::helpers::keywords /]

[comment]
[template public generateInputParameter(par:EParameter, index:Integer)]
[par.name.generateInputParameter(par.eType, index)/]
[/template]


[template private generateInputParameter(name : String, type : EClassifier, index:Integer)]
std::shared_ptr<Bag<fUML::Semantics::Values::Value>> [name/]ValueList = inputParameters->at([index/])->getValues();
[/template]
[/comment]

[comment] Helper [/comment]
[template private _generateIncomingParameter(anEParameter : EParameter, index : Integer)]
	//parameter [index/]
	[anEParameter.generateParameterType()/] incoming_param_[anEParameter.name/];
	Bag<Any>::const_iterator incoming_param_[anEParameter.name/]_arguments_citer = std::next(arguments->begin(), [index/]);
	[comment anEParameter is typed by an EDataType /]
	[if (anEParameter.eType.oclIsKindOf(EDataType))]
	try
	{
		incoming_param_[anEParameter.name/] = (*incoming_param_[anEParameter.name/]_arguments_citer)->get<[anEParameter.generateParameterType()/]>();
	}
	catch(...)
	{
		DEBUG_ERROR("Invalid type stored in 'Any' for parameter '[anEParameter.name/]'. Failed to invoke operation '[anEParameter.eOperation.name/]'!")
		return nullptr;
	}
	[comment anEParameter is typed by an EClass /]
	[else]
		[comment anEParameter is a single-instanced value /]
		[if (anEParameter.upperBound = 1)]
	{
		std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_[anEParameter.name/]_arguments_citer));
		if(ecoreAny)
		{
			try
			{
				std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
				incoming_param_[anEParameter.name/] = std::dynamic_pointer_cast<[anEParameter.eType.generateType(false)/]>(_temp);
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter '[anEParameter.name/]'. Failed to invoke operation '[anEParameter.eOperation.name/]'!")
				return nullptr;
			}
		}
		else
		{
			DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter '[anEParameter.name/]'. Failed to invoke operation '[anEParameter.eOperation.name/]'!")
			return nullptr;
		}
	}
		[comment anEParameter is a bag value /]
		[else]
	{
		std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>((*incoming_param_[anEParameter.name/]_arguments_citer));
		if(ecoreContainerAny)
		{
			try
			{
				std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
		
				if(eObjectList)
				{
					incoming_param_[anEParameter.name/].reset();
					for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
					{
						std::shared_ptr<[anEParameter.eType.generateType(false)/]> _temp = std::dynamic_pointer_cast<[anEParameter.eType.generateType(false)/]>(anEObject);
						incoming_param_[anEParameter.name/]->add(_temp);
					}
				}
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'ecore::EcoreContainerAny' for parameter '[anEParameter.name/]'. Failed to invoke operation '[anEParameter.eOperation.name/]'!")
				return nullptr;
			}
		}
		else
		{
			DEBUG_ERROR("Invalid instance of 'ecore::EcoreContainerAny' for parameter '[anEParameter.name/]'. Failed to invoke operation '[anEParameter.eOperation.name/]'!")
			return nullptr;
		}
	}
		[/if]
	[/if]
[/template]


[**/
 *  Declaration of internal eInvoke helper method
 */]
[template public generateeInvokeByIDDeclaration(aClass : EClass, impl : Boolean)]
virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) [abstractSufix(impl)/];
[/template]

[**/
 *  Implementation of internal eInvoke helper method
 */]
[template public generateeInvokeByIDImplementation(aClass : EClass) post(trim())]
std::shared_ptr<Any> [aClass.name.toUpperFirst().concat('Impl')/]::eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
	[for (aOperation : EOperation | aClass.eOperations->reject((doNotGenerateEOperation() or ignore()))->asOrderedSet()->sortedBy(name))]
		[comment @see ecore4CPP::generator::main::generateOperation for ID calculation /]
		// [aOperation.generateQualifiedNameWithSignature()/]: [aOperation.generateQualifiedNameWithSignature().generatePolynomialRollingHash(true)/]
		case [aClass.ePackage.name/]Package::[aOperation.getStaticAttributeIDName()/]:
		{
		[let parameterList : OrderedSet(EParameter) = aOperation.eParameters->reject(doNotGenerateEParameter())]
			[for (inPar : EParameter | parameterList)]
			//Retrieve input parameter '[inPar.name/]'
		[inPar._generateIncomingParameter(parameterList->indexOf(inPar)-1)/]
			[/for]
		[/let]
		[comment anEOperation has no return parameter /]
		[if (aOperation.eType.oclIsUndefined())]
			this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
			break;
		[comment anEOperation has a return parameter /]
 		[else]
			[comment anEOperation is typed by an EDataType /]
			[if (aOperation.eType.oclIsKindOf(EDataType))]
			result = eAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]), 0, [if (aOperation.upperBound = 1)]false[else]true[/if]);
			[comment anEOperation is typed by an EClass /]
			[elseif (aOperation.eType.oclIsKindOf(EClass))]
				[comment anEOperation returns a single-instance value /]
				[if ((aOperation.upperBound = 1))]
					[if (aOperation.hasKey(aOperation.keyWeakptr()))]
			result = eEcoreAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]).lock(), [aOperation.eType.ePackage.generateNamespaceDefinition()/]::[aOperation.eType.ePackage.name/]Package::[aOperation.eType.oclAsType(EClass).getStaticAttributeIDName()/]);
					[else]
			result = eEcoreAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]), [aOperation.eType.ePackage.generateNamespaceDefinition()/]::[aOperation.eType.ePackage.name/]Package::[aOperation.eType.oclAsType(EClass).getStaticAttributeIDName()/]);
					[/if]
				[comment anEOperation returns a a bag /]
				[else]
			[aOperation.generateOperationType()/] resultList = this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
			return eEcoreContainerAny(resultList,[aOperation.eType.ePackage.generateNamespaceDefinition()/]::[aOperation.eType.ePackage.name/]Package::[aOperation.eType.oclAsType(EClass).getStaticAttributeIDName()/]);
				[/if]
			[comment anEOperation is typed by Any /]
			[elseif (aOperation.isOfAnyType())]
			result = this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
			[comment anEOperation is typed by an unknown type /]
			[else]
			result = eAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]), 0,false);
			[/if]
			break;
	[/if]
		}
	[/for]

		default:
		{
			// call superTypes
	[if (aClass.eSuperTypes->reject(doNotGenerateEClassifier())->isEmpty() and not (aClass.name ='EObject'))]
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
	[else]
	[let superTypeList : OrderedSet(EClass) = aClass.eSuperTypes->reject(doNotGenerateEClassifier())]
		[for (i : EClass | superTypeList->reverse())]
			result = [ClassWithNamespace(aClass, i)/]Impl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
		[/for]
	[/let]
	[/if]
			break;
		}
  	}

	return result;
}
[/template]