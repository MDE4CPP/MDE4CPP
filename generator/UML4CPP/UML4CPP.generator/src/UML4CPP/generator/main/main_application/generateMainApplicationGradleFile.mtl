[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of build.gradle file for main application
 * 
 */]
[module generateMainApplicationGradleFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::nameHelper /]


[template public generateMainApplicationGradleFile(aPackage : Package) { packageName : String = getPackageName(); }]

[comment ------------------------------------------------------------------- /]
[comment gradle file for compile command                                     /]
[comment ------------------------------------------------------------------- /]
[file ('../application/build.gradle', false, 'UTF-8')]
// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::generateApplicationFiles
import tui.sse.mde4cpp.MDE4CPPCompile;
import org.gradle.internal.os.OperatingSystem;

description 'Compile task for project: App_[packageName/]'

task compileApplicationFor[packageName.toUpperFirst()/](type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group '[packageName/]'
	description 'compile ['ApplicationFor'.concat(packageName)/]'

	projectFolder = file('.' + File.separator + 'src')

	inputs.files(fileTree('.') {
        exclude 'src/.cmake/**'
    })

	if(!file('.' + File.separator + 'src' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}

	if(OperatingSystem.current().isWindows()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]' +       '.exe'[']'/].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))    {outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]' + 'd' + '.exe'[']'/].join(File.separator))}
	}
	else if(OperatingSystem.current().isLinux() || OperatingSystem.current().isMacOsX()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]'      [']'/].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))    {outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]' + 'd'[']'/].join(File.separator))}
	}

	// dependency to model '[packageName/]'
	def [packageName/] = getRootProject().getTasksByName('compile[packageName.toUpperFirst()/]', true)
	if (![packageName/].isEmpty()){
		dependsOn [packageName/]
		inputs.files([packageName/].outputs)
	}
}

task clean {
	doFirst {
		def cmakeFolder = file('.' + File.separator + 'src' + File.separator + '.cmake/')
		if(cmakeFolder.exists()) {
    		delete cmakeFolder.absolutePath
   			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
[/file]
[/template]