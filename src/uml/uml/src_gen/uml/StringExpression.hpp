//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_STRINGEXPRESSION_HPP
#define UML_STRINGEXPRESSION_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class Namespace;
	class Package;
	class Slot;
	class TemplateBinding;
	class TemplateParameter;
	class TemplateSignature;
	class Type;
	class ValueSpecificationAction;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Expression.hpp"
#include "uml/TemplateableElement.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters.
	<p>From package UML::Values.</p>
	*/
	
	class UML_API StringExpression : virtual public Expression, virtual public TemplateableElement
	{
		public:
 			StringExpression(const StringExpression &) {}

		protected:
			StringExpression(){}
			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::Namespace> par_namespace);

			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::Element> par_owner);

			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::StringExpression> par_owningExpression);

			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::Package> par_owningPackage);

			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::Slot> par_owningSlot);

			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);

			//Additional constructors for the containments back reference
			StringExpression(std::weak_ptr<uml::ValueSpecificationAction> par_valueSpecificationAction);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~StringExpression() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p>
			*/
			
			virtual std::weak_ptr<uml::StringExpression> getOwningExpression() const = 0;
			/*!
			The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p>
			*/
			
			virtual void setOwningExpression(std::weak_ptr<uml::StringExpression>) = 0;
			/*!
			The StringExpressions that constitute this StringExpression.
			<p>From package UML::Values.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::StringExpression, uml::Element>> getSubExpression() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p>
			*/
			
			std::weak_ptr<uml::StringExpression> m_owningExpression;
			/*!
			The StringExpressions that constitute this StringExpression.
			<p>From package UML::Values.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::StringExpression, uml::Element>> m_subExpression;
	};
}
#endif /* end of include guard: UML_STRINGEXPRESSION_HPP */
