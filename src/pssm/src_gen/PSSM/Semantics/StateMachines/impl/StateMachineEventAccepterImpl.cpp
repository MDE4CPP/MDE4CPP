
#include "PSSM/Semantics/StateMachines/impl/StateMachineEventAccepterImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>



#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Includes from codegen annotation
#include "PSSM/Semantics/StateMachines/StateActivation.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/Loci/ChoiceStrategy.hpp"
#include "fUML/Semantics/CommonBehavior/ObjectActivation.hpp"
#include "fUML/Semantics/CommonBehavior/EventAccepter.hpp"
#include "PSSM/Semantics/StateMachines/DoActivityExecutionEventAccepter.hpp"
#include "PSSM/Semantics/CommonBehavior/CallEventOccurrence.hpp"
#include "PSSM/Semantics/CommonBehavior/CallEventExecution.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineConfiguration.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "PSSM/Semantics/StateMachines/StateMachinesFactory.hpp"
#include "fUML/Semantics/CommonBehavior/EventAccepter.hpp"
#include "fUML/Semantics/CommonBehavior/EventOccurrence.hpp"
#include "PSSM/Semantics/StateMachines/StateConfiguration.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineExecution.hpp"
#include "PSSM/Semantics/StateMachines/TransitionActivation.hpp"
//Factories and Package includes
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "PSSM/PSSMPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
StateMachineEventAccepterImpl::StateMachineEventAccepterImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

StateMachineEventAccepterImpl::~StateMachineEventAccepterImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete StateMachineEventAccepter "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


StateMachineEventAccepterImpl::StateMachineEventAccepterImpl(const StateMachineEventAccepterImpl & obj): StateMachineEventAccepterImpl()
{
	*this = obj;
}

StateMachineEventAccepterImpl& StateMachineEventAccepterImpl::operator=(const StateMachineEventAccepterImpl & obj)
{
	//call overloaded =Operator for each base class
	fUML::Semantics::CommonBehavior::EventAccepterImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of StateMachineEventAccepter 
	 * which is generated by the compiler (as StateMachineEventAccepter is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//StateMachineEventAccepter::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy StateMachineEventAccepter "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_registrationContext  = obj.getRegistrationContext();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> StateMachineEventAccepterImpl::copy() const
{
	std::shared_ptr<StateMachineEventAccepterImpl> element(new StateMachineEventAccepterImpl());
	*element =(*this);
	element->setThisStateMachineEventAccepterPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
bool StateMachineEventAccepterImpl::_defer(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& stateConfiguration)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Defers the given EventOccurrence in the context of the given StateConfiguration.
	bool deferred = false;
	for (const auto& child : *(stateConfiguration->getChildren()))
	{
		deferred = this->_defer(eventOccurrence, child);
		if (deferred) break;
	}

	if (!deferred)
	{
		if (const auto& stateActivation = std::dynamic_pointer_cast<StateActivation>(stateConfiguration->getVertexActivation()))
		{
			if (stateActivation->canDefer(eventOccurrence))
			{
				stateActivation->defer(eventOccurrence);
				deferred = true;
			}
		}
	}
	return deferred;
	//end of body
}

bool StateMachineEventAccepterImpl::_isDeferred(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& stateConfiguration)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Determine if the given StateConfiguration is capable of deferring the given EvenOccurrence.
	bool deferred = false;
	for (const auto& child : *stateConfiguration->getChildren())
	{
		deferred = this->_isDeferred(eventOccurrence, child);
		if (deferred) break;
	}

	if (!deferred)
	{
		if (auto stateActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateActivation>(stateConfiguration->getVertexActivation()))
		{
			if (stateActivation->canDefer(eventOccurrence) && this->_select(eventOccurrence, stateConfiguration)->empty())
			{
				deferred = true;
			}
		}
	}
	return deferred;
	//end of body
}

std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> StateMachineEventAccepterImpl::_select(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& stateConfiguration)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Find all TransitionActivations that can fire on the given EventOccurrence.
	// The set of TransitionActivations only contains those with the highest priority. 
	// In addition, no conflicting TransitionActivations are added to the set.
	
	std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> selectedTransitionActivations(new Bag<PSSM::Semantics::StateMachines::TransitionActivation>());
	for (const auto& child : *(stateConfiguration->getChildren()))
	{
		selectedTransitionActivations->insert(*(this->_select(eventOccurrence, child)));
	}

	if (selectedTransitionActivations->empty() && stateConfiguration->getVertexActivation() != nullptr)
	{
		for (const auto& outgoingTransitionActivation : *(stateConfiguration->getVertexActivation()->getOutgoingTransitions()))
		{
			if (outgoingTransitionActivation->canFireOn(eventOccurrence))
			{
				selectedTransitionActivations->add(outgoingTransitionActivation);
			}
		}

		if (selectedTransitionActivations->size() > 1)
		{
			const auto& choiceStrategy = std::dynamic_pointer_cast<fUML::Semantics::Loci::ChoiceStrategy>(this->m_registrationContext->getLocus()->getFactory()->getStrategy("choice"));
			const auto& chosenTransitionActivation = selectedTransitionActivations->at(choiceStrategy->choose(selectedTransitionActivations->size()-1));
			selectedTransitionActivations->clear();
			selectedTransitionActivations->add(chosenTransitionActivation);
		}
	}

	return selectedTransitionActivations;
	//end of body
}

void StateMachineEventAccepterImpl::accept(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// When an event occurrence is accepted this marks the beginning of a new RTC step for
	// the executed state-machine. The following set of actions takes place:
	// 1 - The event can be deferred if required
	// 2 - The event can trigger one or more transitions if it is not deferred
	//  2.1 - The list of transitions that can be fired using the given event
	//        occurrence is computed.
	//  2.2 - Transitions in the set of fireable transitions are fired **concurrently**
	//  2.3 - If the accepted event occurrence is a call event occurrence then there is an explicit
	//	  "return from call" which enables the caller to continue its execution. 
	// 3 - When the RTC step is about to complete, a new event accepter for the state-machine
	//     is registered in the waiting event accepter list handled by the object activation
	// Note that there is always just a single event accepter for a state-machine. This accepter
	// analyzes the overall state machine configuration each time an event occurrence is accepted.
	if (this->isDeferred(eventOccurrence))
	{
		this->defer(eventOccurrence);
	}
	else
	{
		auto fireableTransitionActivations = this->select(eventOccurrence);
		if (!fireableTransitionActivations->empty())
		{
			for (const auto& fireableTransitionActivation : *fireableTransitionActivations) {
				fireableTransitionActivation->fire(eventOccurrence);
			}
		}
	}
	
	// If dispatched Event was a CallEventOccurrence or a CS_EventOccurrence which wraps a CallEventOccurrence,
	// then check if caller needs to be released.
	/*
	// CS_EventOccurrence has not yet been implemented
	if (auto csEventOccurrence = std::dynamic_pointer_cast<PSCS::Semantics::CommonBehavior::CS_EventOccurrence>(eventOccurrence))
	{
		if (auto callEventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::CallEventOccurrence>(eventOccurrence)->getWrappedEventOccurrence())
		{
			callEventOccurrence->releaseCaller();
		}
	}
	// CallEventOccurrence has not yet been implemented
	else if (auto callEventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::CallEventOccurrence>(eventOccurrence))
	{
		callEventOccurrence->releaseCaller();
	}
	*/

	const auto& context = this->getRegistrationContext()->getContext();
	if (context != nullptr && context->getObjectActivation() != nullptr)
	{
		const auto& smEventAccepter = PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createStateMachineEventAccepter();
		smEventAccepter->setRegistrationContext(this->getRegistrationContext());
		context->_register(smEventAccepter);
	}
	//end of body
}

bool StateMachineEventAccepterImpl::defer(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Defers the given event occurrence. A deferred event occurrence is registered in
	// the deferred event pool. This latter refers to the deferred event as well as to the
	// the deferring state.
	return this->_defer(eventOccurrence, this->m_registrationContext->getConfiguration()->getRootConfiguration());
	//end of body
}

bool StateMachineEventAccepterImpl::isDeferred(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Determine if the dispatched event occurrence is deferred in the
	// current state machine configuration. An event occurrence can only be deferred
	// if the following conditions are fulfilled:
	// 1 - One active state in the hierarchy declares the event types as being deferred.
	// 2 - No transitions (ready to fire) with a higher priority than the deferring state
	//     could be found.
	// 3 - It does not exist any running doActivity having already registered an accepter
	//     for the given event occurrence
	/*boolean deferred = this._isDeferred(eventOccurrence, this.registrationContext.getConfiguration().rootConfiguration);
	if(deferred){
		Object_ context = this.registrationContext.context;
		if(context != null && context.objectActivation != null){
			int  i = 1;
			while(deferred && i <= context.objectActivation.waitingEventAccepters.size()){
				EventAccepter currentEventAccepter = context.objectActivation.waitingEventAccepters.get(i - 1);
				if(currentEventAccepter != this 
						&& currentEventAccepter instanceof DoActivityExecutionEventAccepter
						&& currentEventAccepter.match(eventOccurrence)){
					deferred = false;;
				}
				i++;
			}
		}
	}
	return deferred;*/

	bool deferred = this->_isDeferred(eventOccurrence, this->m_registrationContext->getConfiguration()->getRootConfiguration());
	if (deferred) 
	{
		const auto& context = this->m_registrationContext;
		if (context != nullptr && context->getObjectActivation() != nullptr)
		{
			for (const auto& waitingEventAccepter : *(context->getObjectActivation()->getWaitingEventAccepters()))
			{
				if (waitingEventAccepter != std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventAccepter>(this->getThisStateMachineEventAccepterPtr()) && waitingEventAccepter->match(eventOccurrence)) 
				{
					if (auto doActivityExecutionEventAccepter = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::DoActivityExecutionEventAccepter>(waitingEventAccepter))
					{
						deferred = false;
					}
				}
			}
		}
	}
	return deferred;
	//end of body
}

bool StateMachineEventAccepterImpl::isTriggering(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Returns true when one or more transition are ready to be fired using this event
	// occurrence; false otherwise.
	return !this->select(eventOccurrence)->empty();
	//end of body
}

bool StateMachineEventAccepterImpl::match(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// There are two cases in which the state machine event accepter can match
	// 1 - In the current state machine configuration the event can be deferred
	// 2 - In the current state machine configuration the current event can trigger one or more transitions
	return this->isDeferred(eventOccurrence) | this->isTriggering(eventOccurrence);
	//end of body
}

std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> StateMachineEventAccepterImpl::select(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Find for the given configuration the set of transition that can fire.
	return this->_select(eventOccurrence, this->m_registrationContext->getConfiguration()->getRootConfiguration());
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference registrationContext */
const std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineExecution>& StateMachineEventAccepterImpl::getRegistrationContext() const
{
    return m_registrationContext;
}
void StateMachineEventAccepterImpl::setRegistrationContext(const std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineExecution>& _registrationContext)
{
    m_registrationContext = _registrationContext;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> StateMachineEventAccepterImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void StateMachineEventAccepterImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void StateMachineEventAccepterImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("registrationContext");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("registrationContext")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	fUML::Semantics::CommonBehavior::EventAccepterImpl::loadAttributes(loadHandler, attr_list);
}

void StateMachineEventAccepterImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	fUML::Semantics::CommonBehavior::EventAccepterImpl::loadNode(nodeName, loadHandler);
}

void StateMachineEventAccepterImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINEEVENTACCEPTER_ATTRIBUTE_REGISTRATIONCONTEXT:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> _registrationContext = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineExecution>( references.front() );
				setRegistrationContext(_registrationContext);
			}
			
			return;
		}
	}
	fUML::Semantics::CommonBehavior::EventAccepterImpl::resolveReferences(featureID, references);
}

void StateMachineEventAccepterImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	fUML::Semantics::CommonBehavior::EventAccepterImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void StateMachineEventAccepterImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
	// Add references
	if ( this->eIsSet(package->getStateMachineEventAccepter_Attribute_registrationContext()) )
	{
		saveHandler->addReference(this->getRegistrationContext(), "registrationContext", getRegistrationContext()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateMachineExecution_Class()); 
	}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& StateMachineEventAccepterImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateMachineEventAccepter_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> StateMachineEventAccepterImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINEEVENTACCEPTER_ATTRIBUTE_REGISTRATIONCONTEXT:
			return eAny(getRegistrationContext(),PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINEEXECUTION_CLASS,false); //380
	}
	return fUML::Semantics::CommonBehavior::EventAccepterImpl::eGet(featureID, resolve, coreType);
}

bool StateMachineEventAccepterImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINEEVENTACCEPTER_ATTRIBUTE_REGISTRATIONCONTEXT:
			return getRegistrationContext() != nullptr; //380
	}
	return fUML::Semantics::CommonBehavior::EventAccepterImpl::internalEIsSet(featureID);
}

bool StateMachineEventAccepterImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINEEVENTACCEPTER_ATTRIBUTE_REGISTRATIONCONTEXT:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> _registrationContext = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineExecution>(eObject);
					if(_registrationContext)
					{
						setRegistrationContext(_registrationContext); //380
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'registrationContext'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'registrationContext'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return fUML::Semantics::CommonBehavior::EventAccepterImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> StateMachineEventAccepterImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::_defer(fUML::Semantics::CommonBehavior::EventOccurrence, PSSM::Semantics::StateMachines::StateConfiguration) : bool: 2044091569
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION__DEFER_EVENTOCCURRENCE_STATECONFIGURATION:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation '_defer'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation '_defer'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'stateConfiguration'
			//parameter 1
			std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> incoming_param_stateConfiguration;
			Bag<Any>::const_iterator incoming_param_stateConfiguration_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_stateConfiguration_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_stateConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'stateConfiguration'. Failed to invoke operation '_defer'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'stateConfiguration'. Failed to invoke operation '_defer'!")
					return nullptr;
				}
			}
		
			result = eAny(this->_defer(incoming_param_eventOccurrence,incoming_param_stateConfiguration), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::_isDeferred(fUML::Semantics::CommonBehavior::EventOccurrence, PSSM::Semantics::StateMachines::StateConfiguration) : bool: 222342836
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION__ISDEFERRED_EVENTOCCURRENCE_STATECONFIGURATION:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation '_isDeferred'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation '_isDeferred'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'stateConfiguration'
			//parameter 1
			std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> incoming_param_stateConfiguration;
			Bag<Any>::const_iterator incoming_param_stateConfiguration_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_stateConfiguration_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_stateConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'stateConfiguration'. Failed to invoke operation '_isDeferred'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'stateConfiguration'. Failed to invoke operation '_isDeferred'!")
					return nullptr;
				}
			}
		
			result = eAny(this->_isDeferred(incoming_param_eventOccurrence,incoming_param_stateConfiguration), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::_select(fUML::Semantics::CommonBehavior::EventOccurrence, PSSM::Semantics::StateMachines::StateConfiguration) : PSSM::Semantics::StateMachines::TransitionActivation[*]: 208694361
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION__SELECT_EVENTOCCURRENCE_STATECONFIGURATION:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation '_select'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation '_select'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'stateConfiguration'
			//parameter 1
			std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> incoming_param_stateConfiguration;
			Bag<Any>::const_iterator incoming_param_stateConfiguration_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_stateConfiguration_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_stateConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'stateConfiguration'. Failed to invoke operation '_select'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'stateConfiguration'. Failed to invoke operation '_select'!")
					return nullptr;
				}
			}
		
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> resultList = this->_select(incoming_param_eventOccurrence,incoming_param_stateConfiguration);
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::accept(fUML::Semantics::CommonBehavior::EventOccurrence): 4279480934
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION_ACCEPT_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'accept'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'accept'!")
					return nullptr;
				}
			}
		
			this->accept(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::defer(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 2300058918
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION_DEFER_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'defer'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'defer'!")
					return nullptr;
				}
			}
		
			result = eAny(this->defer(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::isDeferred(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 361395101
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION_ISDEFERRED_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'isDeferred'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'isDeferred'!")
					return nullptr;
				}
			}
		
			result = eAny(this->isDeferred(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::isTriggering(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 275886658
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION_ISTRIGGERING_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'isTriggering'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'isTriggering'!")
					return nullptr;
				}
			}
		
			result = eAny(this->isTriggering(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::match(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 2300049929
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION_MATCH_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'match'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'match'!")
					return nullptr;
				}
			}
		
			result = eAny(this->match(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineEventAccepter::select(fUML::Semantics::CommonBehavior::EventOccurrence) : PSSM::Semantics::StateMachines::TransitionActivation[*]: 2852069550
		case StateMachinesPackage::STATEMACHINEEVENTACCEPTER_OPERATION_SELECT_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'select'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'select'!")
					return nullptr;
				}
			}
		
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> resultList = this->select(incoming_param_eventOccurrence);
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_CLASS);
			break;
		}

		default:
		{
			// call superTypes
			result = fUML::Semantics::CommonBehavior::EventAccepterImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineEventAccepter> StateMachineEventAccepterImpl::getThisStateMachineEventAccepterPtr() const
{
	return m_thisStateMachineEventAccepterPtr.lock();
}
void StateMachineEventAccepterImpl::setThisStateMachineEventAccepterPtr(std::weak_ptr<PSSM::Semantics::StateMachines::StateMachineEventAccepter> thisStateMachineEventAccepterPtr)
{
	m_thisStateMachineEventAccepterPtr = thisStateMachineEventAccepterPtr;
	setThisEventAccepterPtr(thisStateMachineEventAccepterPtr);
}


