//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_RECLASSIFYOBJECTACTIONRECLASSIFYOBJECTACTIONIMPL_HPP
#define UML_RECLASSIFYOBJECTACTIONRECLASSIFYOBJECTACTIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../ReclassifyObjectAction.hpp"

#include "uml/impl/ActionImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ReclassifyObjectActionImpl : virtual public ActionImpl, virtual public ReclassifyObjectAction 
	{
		public: 
			ReclassifyObjectActionImpl(const ReclassifyObjectActionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ReclassifyObjectActionImpl& operator=(ReclassifyObjectActionImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ReclassifyObjectActionImpl();
			virtual std::shared_ptr<uml::ReclassifyObjectAction> getThisReclassifyObjectActionPtr() const;
			virtual void setThisReclassifyObjectActionPtr(std::weak_ptr<uml::ReclassifyObjectAction> thisReclassifyObjectActionPtr);

			//Additional constructors for the containments back reference
			ReclassifyObjectActionImpl(std::weak_ptr<uml::Activity> par_activity);
			//Additional constructors for the containments back reference
			ReclassifyObjectActionImpl(std::weak_ptr<uml::StructuredActivityNode> par_inStructuredNode);
			//Additional constructors for the containments back reference
			ReclassifyObjectActionImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ReclassifyObjectActionImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~ReclassifyObjectActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Specifies whether existing Classifiers should be removed before adding the new Classifiers.
			<p>From package UML::Actions.</p>
			*/
			 
			virtual bool getIsReplaceAll() const ;
			/*!
			Specifies whether existing Classifiers should be removed before adding the new Classifiers.
			<p>From package UML::Actions.</p>
			*/
			 
			virtual void setIsReplaceAll (bool _isReplaceAll);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			A set of Classifiers to be added to the Classifiers of the given object.
			<p>From package UML::Actions.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::Classifier>>& getNewClassifier() const ;
			/*!
			The InputPin that holds the object to be reclassified.
			<p>From package UML::Actions.</p>
			*/
			
			virtual const std::shared_ptr<uml::InputPin>& getObject() const ;
			/*!
			The InputPin that holds the object to be reclassified.
			<p>From package UML::Actions.</p>
			*/
			
			virtual void setObject(const std::shared_ptr<uml::InputPin>&) ;
			/*!
			A set of Classifiers to be removed from the Classifiers of the given object.
			<p>From package UML::Actions.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::Classifier>>& getOldClassifier() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::ReclassifyObjectAction> m_thisReclassifyObjectActionPtr;
	};
}
#endif /* end of include guard: UML_RECLASSIFYOBJECTACTIONRECLASSIFYOBJECTACTIONIMPL_HPP */
