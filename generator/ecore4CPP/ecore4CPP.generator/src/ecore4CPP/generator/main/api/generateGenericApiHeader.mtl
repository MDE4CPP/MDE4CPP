[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateGenericApiHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::validation::validation /]

[template public generateGenericApiHeader(anEPackage : EPackage){
    fileName : String = anEPackage.generateNamespacePath().concat('/genericApi.hpp');
}]
[printInfo(fileGenerationMessage(fileName, 'generic api header file'), 2)/]
[file (fileName, false, 'UTF-8')]
#include "crow/crow_all.h"
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/Bag.hpp"
#include "ecore/EObject.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "pluginFramework/MDE4CPPPlugin.hpp"
#include "ecore/ecorePackage.hpp"

using namespace ecore;

class GenericApi{
public:
    static std::shared_ptr<GenericApi> eInstance(std::shared_ptr<MDE4CPPPlugin >& plugin);
    crow::json::wvalue writeValue(const std::shared_ptr<ecore::EObject>& object);
    std::shared_ptr<ecore::EObject> readValue(const crow::json::rvalue& content, const std::string& eClass);

private:
    explicit GenericApi(std::shared_ptr<MDE4CPPPlugin>& plugin);
    template<typename T> crow::json::wvalue writeFeature(const std::shared_ptr<EObject>& object, const std::shared_ptr<EStructuralFeature>& feature);
    template <typename T> T convert_to(const crow::json::rvalue& value);
    template<typename T> std::shared_ptr<Any> readFeature(const std::shared_ptr<EObject>& object, const std::shared_ptr<EStructuralFeature>& feature, const crow::json::rvalue& content);
    std::shared_ptr<MDE4CPPPlugin> m_plugin;
    std::map<std::string,std::shared_ptr<ecore::EObject>> m_objects{};
};
[/file]
[/template]