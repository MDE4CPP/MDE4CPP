
#include "PSSM/Semantics/StateMachines/impl/TransitionActivationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Includes from codegen annotation
#include "uml/Transition.hpp"
#include "PSSM/Semantics/StateMachines/CompletionEventOccurrence.hpp"
#include "PSSM/Semantics/CommonBehavior/CallEventOccurrence.hpp"
#include "PSSM/Semantics/StateMachines/VertexActivation.hpp"
#include "PSSM/Semantics/StateMachines/StateActivation.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Constraint.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/Loci/Executor.hpp"
#include "uml/OpaqueExpression.hpp"
#include "PSSM/Semantics/Values/SM_OpaqueExpressionEvaluation.hpp"
#include "fUML/FUMLFactory.hpp"
#include "PSSM/Semantics/StateMachines/TransitionMetadata.hpp"
#include "uml/OpaqueBehavior.hpp"
#include "fUML/Semantics/CommonBehavior/Execution.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "PSSM/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "PSSM/Semantics/CommonBehavior/EventTriggeredExecution.hpp"
#include "PSSM/Semantics/CommonBehavior/CallEventExecution.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesFactory.hpp"
#include "fUML/Semantics/Loci/LociFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/Semantics/CommonBehavior/EventOccurrence.hpp"
#include "uml/NamedElement.hpp"
#include "PSSM/Semantics/StateMachines/RegionActivation.hpp"
#include "fUML/Semantics/Loci/SemanticVisitor.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineSemanticVisitor.hpp"
#include "PSSM/Semantics/StateMachines/VertexActivation.hpp"
//Factories and Package includes
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "PSSM/PSSMPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "fUML/Semantics/Loci/LociPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
TransitionActivationImpl::TransitionActivationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

TransitionActivationImpl::~TransitionActivationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete TransitionActivation "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


TransitionActivationImpl::TransitionActivationImpl(const TransitionActivationImpl & obj): TransitionActivationImpl()
{
	*this = obj;
}

TransitionActivationImpl& TransitionActivationImpl::operator=(const TransitionActivationImpl & obj)
{
	//call overloaded =Operator for each base class
	StateMachineSemanticVisitorImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of TransitionActivation 
	 * which is generated by the compiler (as TransitionActivation is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//TransitionActivation::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy TransitionActivation "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_analyticalStatus = obj.getAnalyticalStatus();
	m_lastPropagation = obj.getLastPropagation();
	m_status = obj.getStatus();

	//copy references with no containment (soft copy)
	m_lastTriggeringEventOccurrence  = obj.getLastTriggeringEventOccurrence();
	m_leastCommonAncestor  = obj.getLeastCommonAncestor();
	m_sourceVertexActivation  = obj.getSourceVertexActivation();
	m_targetVertexActivation  = obj.getTargetVertexActivation();
	//Clone references with containment (deep copy)
	return *this;
}

//*********************************
// Operations
//*********************************
bool TransitionActivationImpl::canFireOn(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		// A transition is can fire when:
//
// A completion event is being dispatched and this transition has no trigger
// but its eventual guard evaluates to true. Note: the scope of a completion
// event is the state from which it was generated
//
// A signal event is being dispatched and this transition has a trigger
// that matches the signal and its eventual guard evaluates to true
//boolean reactive = true;
//if(eventOccurrence instanceof CompletionEventOccurrence){
//	reactive = !this.isTriggered() &&
//				this.getSourceActivation()==((CompletionEventOccurrence)eventOccurrence).stateActivation &&
//				this.evaluateGuard(eventOccurrence) &&
//				this.canPropagateExecution(eventOccurrence);
//}else if(eventOccurrence instanceof SignalEventOccurrence | eventOccurrence instanceof CallEventOccurrence){
//	reactive = this.hasTrigger(eventOccurrence) &&
//			   this.evaluateGuard(eventOccurrence) &&
//			   this.canPropagateExecution(eventOccurrence);
//}else{
//	reactive = false;
//}
//return reactive;
	bool reactive = true;
	std::shared_ptr<PSSM::Semantics::CommonBehavior::CallEventOccurrence> callEventOccurrence = std::dynamic_pointer_cast<PSSM::Semantics::CommonBehavior::CallEventOccurrence>(eventOccurrence);
	std::shared_ptr<PSSM::Semantics::StateMachines::CompletionEventOccurrence> completionEventOccurrence = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::CompletionEventOccurrence>(eventOccurrence);
	if(completionEventOccurrence != nullptr) {

		reactive = !this->isTriggered(false) &&
				this->getSourceActivation() == std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(completionEventOccurrence->getStateActivation()) &&
				this->evaluateGuard(eventOccurrence) &&
				this->canPropagateExecution(eventOccurrence);
	} else if(callEventOccurrence != nullptr) {
		reactive = this->hasTrigger(eventOccurrence) &&
				this->evaluateGuard(eventOccurrence) &&
				this->canPropagateExecution(eventOccurrence);
	}

	return reactive;
	//end of body
}

bool TransitionActivationImpl::canPropagateExecution(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		// Evaluate the possibility to propagate the static analysis through this transition activation.
// Two situations can occur:
// 1. The transition has already been "traversed" with using the same event occurrence. This means
//    we already know the execution can be propagated through the transiton activation. Hence true
//    is returned and the propagation stops.
// 2. The transition has not already been "traversed" using this event occurrence. The consequence
//    is that the analysis is propagated through the target vertex activation. 
//boolean propagate = true;
//if(this.lastTriggeringEventOccurrence != eventOccurrence){
//	propagate = this.vertexTargetActivation.canPropagateExecution(this, eventOccurrence, this.getLeastCommonAncestor());
//	this.lastTriggeringEventOccurrence = eventOccurrence;
//	this.lastPropagation = propagate;
//}else{
//	propagate = this.lastPropagation;
//}
//return propagate;
	bool propagate = true;
	if(this->getLastTriggeringEventOccurrence() != eventOccurrence) {
		propagate = this->getTargetVertexActivation()->canPropagateExecution(this->getThisTransitionActivationPtr(), eventOccurrence, this->getLeastCommonAncestor());
		this->setLastTriggeringEventOccurrence(eventOccurrence);
		this->setLastPropagation(propagate);
	} else {
		propagate = this->getLastPropagation();
	}

	return propagate;
	//end of body
}

void TransitionActivationImpl::enterTarget(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Enter the targetVertexActivation of this TransitionActivation after executing the transition's Effect Behavior.
	// The target must have already been checked for enterability.
	auto leastCommonAncestor = this->m_sourceVertexActivation->getLeastCommonAncestor(this->m_targetVertexActivation);
	this->m_targetVertexActivation->enter(this->getThisTransitionActivationPtr(), eventOccurrence, leastCommonAncestor);
	//end of body
}

bool TransitionActivationImpl::evaluateGuard(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Evaluate the guard specification thanks to an evaluation.
// The evaluation does not presume of the type of the guard specification.
//boolean result = true;
//Transition transition = (Transition) this.node;
//Constraint guard = transition.getGuard();
//while(guard == null && transition.getRedefinedTransition() != null){
//	transition = transition.getRedefinedTransition();
//	guard = transition.getGuard();
//}
//if (guard != null) {
//	ValueSpecification specification = guard.getSpecification() ;
//	if(specification!=null){
//		Evaluation evaluation = this.getExecutionLocus().factory.createEvaluation(specification);
//		if (specification instanceof OpaqueExpression) {
//			((SM_OpaqueExpressionEvaluation)evaluation).context = this.getExecutionContext() ;
//			((SM_OpaqueExpressionEvaluation)evaluation).initialize(eventOccurrence);
//		}
//		if(evaluation!=null){
//			BooleanValue evaluationResult = (BooleanValue)evaluation.evaluate() ;
//			result = evaluationResult.value ;
//		}
//	}
//
//}
//return result;

	bool result = true;
	std::shared_ptr<uml::Transition> transition = std::dynamic_pointer_cast<uml::Transition>(this->getNode());
	std::shared_ptr<uml::Constraint> guard = transition->getGuard();
	while(guard == nullptr && transition->getRedefinedTransition() != nullptr) {
		transition = transition->getRedefinedTransition();
		guard = transition->getGuard();
	}

	if(guard != nullptr) {
		std::shared_ptr<uml::ValueSpecification> specification =  guard->getSpecification();
		if(specification != nullptr) {
			auto evaluation = this->getExecutionLocus()->getExecutor()->evaluate(specification);
			//std::shared_ptr<fUML::Evaluation> evaluation = this->getExecutionLocus()->getFactory()->createEvaluation(specification); - IN MDE4CPP ABER SCHON FERTIGER WERT STATT EINE EVALUATION!
			auto opaqueExpression = std::dynamic_pointer_cast<uml::OpaqueExpression>(specification);
			if(opaqueExpression != nullptr) {
				auto opaqueExpressionEvaluation = std::dynamic_pointer_cast<PSSM::Semantics::Values::SM_OpaqueExpressionEvaluation>(evaluation);
				//opaqueExpressionEvaluation->setContext(this->getExecutionContext());
				opaqueExpressionEvaluation->initialize(eventOccurrence);
			}
			if(evaluation != nullptr) {
				//std::shared_ptr<fUML::BooleanValue> evaluationResult = std::dynamic_pointer_cast<fUML::BooleanValue>(evaluation->evaluate());
				//result = evaluationResult->isValue();
			}
		}

	}
	return result;
	//end of body
}

void TransitionActivationImpl::exitSource(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Exit the sourceVertexActivation of this TransitionActivation as the prior sequence of entering its targetVertexActivation.
	// The source must have already been checked for exitability.
	auto leastCommonAncestor = this->m_sourceVertexActivation->getLeastCommonAncestor(this->m_targetVertexActivation);
	this->m_sourceVertexActivation->exit(this->getThisTransitionActivationPtr(), eventOccurrence, leastCommonAncestor);
	//end of body
}

void TransitionActivationImpl::fire(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// The fire sequence is broken into the following set of actions
	// 1 - Exit the source (depends on the kind of transition that is currently used)
	// 2 - Execute the effect (if one exists for that transition)
	// 3 - Enter the target (depends on the kind of transition that is currently used)
	this->exitSource(eventOccurrence);
	//FUMLExecutionEngine.eInstance.getControlDelegate().control(this);
	this->tryExecuteEffect(eventOccurrence);
	this->setStatus(PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED);
	DEBUG_INFO("Transition " << this->getNode()->getName() << " has fired.");
	this->enterTarget(eventOccurrence);
	//end of body
}



std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> TransitionActivationImpl::getSourceActivation()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	//	return vertexSourceActivation;
	return this->m_sourceVertexActivation;
	//end of body
}



std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> TransitionActivationImpl::getTargetActivation()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	//	return vertexTargetActivation;
	return this->m_targetVertexActivation;
	//end of body
}

bool TransitionActivationImpl::hasTrigger(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		// Return true if the event occurrence matches a trigger of this transition.
// false otherwise. If the transition declares no trigger but redefines another
// transition then if that transition has a trigger that matches the event occurrence
// the redefining transition is considered has being able to react to the event occurrence.
// The rule applies recursively.
//Transition transition = (Transition) this.node;
//boolean match = this.match(eventOccurrence, transition.getTriggers());
//while(!match && transition.getRedefinedTransition() != null){
//	transition = transition.getRedefinedTransition();
//	match = this.match(eventOccurrence, transition.getTriggers());
//}
//return match;
	std::shared_ptr<uml::Transition> transition = std::dynamic_pointer_cast<uml::Transition>(this->getNode());
	bool match = this->match(eventOccurrence, std::dynamic_pointer_cast<Bag<uml::Trigger>>(transition->getTrigger()));
	while(!match && transition->getRedefinedTransition() != nullptr) {
		transition = transition->getRedefinedTransition();
		match = this->match(eventOccurrence, std::dynamic_pointer_cast<Bag<uml::Trigger>>(transition->getTrigger()));
	}
	return match;
	//end of body
}

bool TransitionActivationImpl::isGuarded()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		// Check if the transition is guarded. A transition is guarded if it declares
// a guard or if a redefine transition that itself declares a guar. This check
// applies recursively on the redefinition hierarchy
//Transition transition = (Transition) this.node;
//boolean isGuarded = false;
//if(transition.getGuard() != null){
//	isGuarded = true;
//}
//while(!isGuarded && transition.getRedefinedTransition() != null){
//	transition = transition.getRedefinedTransition();
//	if(transition.getGuard() != null){
//		isGuarded = true;
//	}
//}
//return isGuarded;
	std::shared_ptr<uml::Transition> transition = std::dynamic_pointer_cast<uml::Transition>(this->getNode());
	bool isGuarded = false;
	if(transition->getGuard() != nullptr) {
		isGuarded = true;
	}
	while(!isGuarded && transition->getRedefinedTransition() != nullptr) {
		transition = transition->getRedefinedTransition();
		if(transition->getGuard() != nullptr) {
			isGuarded = true;
		}
	}
	return isGuarded;
	//end of body
}

bool TransitionActivationImpl::isReached()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Convenience operation which returns true if the status of this transition is REACHED; false otherwise.
	//boolean reached = true;
	//if(staticCheck){
	//	reached = this.analyticalStatus.equals(TransitionMetadata.REACHED);
	//}else{
	//	reached = this.status.equals(TransitionMetadata.REACHED);
	//}
	//return reached;
	return this->getStatus() == PSSM::Semantics::StateMachines::TransitionMetadata::REACHED;
	//end of body
}

bool TransitionActivationImpl::isTraversed(bool staticCheck)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Convenience operation which returns true if the status of this transition is TRAVERSED; false otherwise.
	if(staticCheck) 
	{
		return this->getAnalyticalStatus() == PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED;
	} 
	else 
	{
		return this->getStatus() == PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED;
	}
	//end of body
}

bool TransitionActivationImpl::isTriggered(bool staticCheck)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		// Check if the transition is triggered. A transition is triggered
// if it declares triggers or if it redefines a transition that itself
// declares triggers. This check applies recursively on the redefinition
// hierarchy.
//Transition transition = (Transition) this.node;
//boolean isTriggered = false;
//if(!transition.getTriggers().isEmpty()){
//	isTriggered = true;
//}
//while(!isTriggered && transition.getRedefinedTransition() != null){
//	transition = transition.getRedefinedTransition();
//	if(!transition.getTriggers().isEmpty()){
//		isTriggered = true;
//	}
//}
//return isTriggered;
	std::shared_ptr<uml::Transition> transition = std::dynamic_pointer_cast<uml::Transition>(this->m_node);
	bool isTriggered = false;

	if(transition->getTrigger()->size() != 0) {
		isTriggered = true;
	}
	while(!isTriggered && transition->getRedefinedTransition() != nullptr) {
		transition = transition->getRedefinedTransition();
		if(transition->getTrigger()->size() != 0) {
			isTriggered = true;
		}
	}
	return isTriggered;
	//end of body
}

void TransitionActivationImpl::setSourceActivation(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& sourceActivation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	this->m_sourceVertexActivation = sourceActivation;
	//end of body
}



void TransitionActivationImpl::setTargetActivation(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& targetActivation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	this->m_targetVertexActivation = targetActivation;
	//end of body
}

void TransitionActivationImpl::tryExecuteEffect(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Execute the effect owned by the Transition (if any). 
	// If there is no effect but the transition redefines another transition, then
	// the effect of this transition is executed instead. This rule applies recursively.
	auto transition = std::dynamic_pointer_cast<uml::Transition>(this->getNode());
	auto effectBehavior = transition->getEffect();

	while (effectBehavior == nullptr && transition->getRedefinedTransition() != nullptr) 
	{
		transition = transition->getRedefinedTransition();
		effectBehavior = transition->getEffect();
	}

	if (effectBehavior != nullptr) 
	{
		if (std::dynamic_pointer_cast<uml::OpaqueBehavior>(effectBehavior))
		{
			// Extract any Parameters from the given EventOccurrence (replaces EventTriggeredExecution::initialize()),
			// invoke the OpaqueBehavior directly via ModelExecutor::execute()
			// and pass any output ParameterValues to the eventOccurrence in case it's a CallEventOccurrence.
			auto eventTriggeredExecution = PSSM::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createEventTriggeredExecution();
			eventTriggeredExecution->setTriggeringEventOccurrence(eventOccurrence);
			eventTriggeredExecution->setContext(this->getExecutionContext());
			auto inputParameterValues = eventTriggeredExecution->initialize(effectBehavior);
			
			auto outputParameterValues = this->getExecutionLocus()->getExecutor()->execute(effectBehavior, this->getExecutionContext(), inputParameterValues);
			
			if (const auto& callEventOccurrence = std::dynamic_pointer_cast<PSSM::Semantics::CommonBehavior::CallEventOccurrence>(eventOccurrence))
			{
				for (const auto& outputParameterValue : *outputParameterValues)
				{
					callEventOccurrence->getExecution()->setParameterValue(outputParameterValue);
				}
			}
		}
		else
		{
			// create an Execution for the Behavior and wrap it in an EventTriggeredExecution which, when executed, 
			// extracts any parameters from the given EventOccurrence, executes its wrapped Behavior Execution
			// and passes any output ParameterValues to its triggering EventOccurrence in case its a CallEventOccurrence.
			if (const auto& effectBehaviorExecution = this->getExecutionFor(effectBehavior, eventOccurrence, nullptr)) // != nullptr
			{
				effectBehaviorExecution->execute();
			}
		}
	}
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute analyticalStatus */
PSSM::Semantics::StateMachines::TransitionMetadata TransitionActivationImpl::getAnalyticalStatus() const 
{
	return m_analyticalStatus;
}
void TransitionActivationImpl::setAnalyticalStatus(PSSM::Semantics::StateMachines::TransitionMetadata _analyticalStatus)
{
	m_analyticalStatus = _analyticalStatus;
	
}

/* Getter & Setter for attribute lastPropagation */
bool TransitionActivationImpl::getLastPropagation() const 
{
	return m_lastPropagation;
}
void TransitionActivationImpl::setLastPropagation(bool _lastPropagation)
{
	m_lastPropagation = _lastPropagation;
	
}

/* Getter & Setter for attribute status */
PSSM::Semantics::StateMachines::TransitionMetadata TransitionActivationImpl::getStatus() const 
{
	return m_status;
}
void TransitionActivationImpl::setStatus(PSSM::Semantics::StateMachines::TransitionMetadata _status)
{
	m_status = _status;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference lastTriggeringEventOccurrence */
const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& TransitionActivationImpl::getLastTriggeringEventOccurrence() const
{
    return m_lastTriggeringEventOccurrence;
}
void TransitionActivationImpl::setLastTriggeringEventOccurrence(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& _lastTriggeringEventOccurrence)
{
    m_lastTriggeringEventOccurrence = _lastTriggeringEventOccurrence;
	
}

/* Getter & Setter for reference leastCommonAncestor */
const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& TransitionActivationImpl::getLeastCommonAncestor() const
{
    return m_leastCommonAncestor;
}
void TransitionActivationImpl::setLeastCommonAncestor(const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& _leastCommonAncestor)
{
    m_leastCommonAncestor = _leastCommonAncestor;
	
}

/* Getter & Setter for reference sourceVertexActivation */
const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& TransitionActivationImpl::getSourceVertexActivation() const
{
    return m_sourceVertexActivation;
}
void TransitionActivationImpl::setSourceVertexActivation(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& _sourceVertexActivation)
{
    m_sourceVertexActivation = _sourceVertexActivation;
	
}

/* Getter & Setter for reference targetVertexActivation */
const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& TransitionActivationImpl::getTargetVertexActivation() const
{
    return m_targetVertexActivation;
}
void TransitionActivationImpl::setTargetVertexActivation(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& _targetVertexActivation)
{
    m_targetVertexActivation = _targetVertexActivation;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> TransitionActivationImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void TransitionActivationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void TransitionActivationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("analyticalStatus");
		if ( iter != attr_list.end() )
		{
			PSSM::Semantics::StateMachines::TransitionMetadata value = PSSM::Semantics::StateMachines::TransitionMetadata::NONE;
			std::string literal = iter->second;
						if (literal == "none")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::NONE;
			}
			else 			if (literal == "reached")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::REACHED;
			}
			else 			if (literal == "traversed")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED;
			}
			else 			if (literal == "completed")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::COMPLETED;
			}
			this->setAnalyticalStatus(value);
		}

		iter = attr_list.find("lastPropagation");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setLastPropagation(value);
		}

		iter = attr_list.find("status");
		if ( iter != attr_list.end() )
		{
			PSSM::Semantics::StateMachines::TransitionMetadata value = PSSM::Semantics::StateMachines::TransitionMetadata::NONE;
			std::string literal = iter->second;
						if (literal == "none")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::NONE;
			}
			else 			if (literal == "reached")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::REACHED;
			}
			else 			if (literal == "traversed")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED;
			}
			else 			if (literal == "completed")
			{
				value = PSSM::Semantics::StateMachines::TransitionMetadata::COMPLETED;
			}
			this->setStatus(value);
		}
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("lastTriggeringEventOccurrence");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("lastTriggeringEventOccurrence")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("leastCommonAncestor");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("leastCommonAncestor")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("sourceVertexActivation");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("sourceVertexActivation")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("targetVertexActivation");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("targetVertexActivation")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	StateMachineSemanticVisitorImpl::loadAttributes(loadHandler, attr_list);
}

void TransitionActivationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	StateMachineSemanticVisitorImpl::loadNode(nodeName, loadHandler);
}

void TransitionActivationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTTRIGGERINGEVENTOCCURRENCE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> _lastTriggeringEventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>( references.front() );
				setLastTriggeringEventOccurrence(_lastTriggeringEventOccurrence);
			}
			
			return;
		}

		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LEASTCOMMONANCESTOR:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> _leastCommonAncestor = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>( references.front() );
				setLeastCommonAncestor(_leastCommonAncestor);
			}
			
			return;
		}

		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_SOURCEVERTEXACTIVATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _sourceVertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>( references.front() );
				setSourceVertexActivation(_sourceVertexActivation);
			}
			
			return;
		}

		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_TARGETVERTEXACTIVATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _targetVertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>( references.front() );
				setTargetVertexActivation(_targetVertexActivation);
			}
			
			return;
		}
	}
	StateMachineSemanticVisitorImpl::resolveReferences(featureID, references);
}

void TransitionActivationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	StateMachineSemanticVisitorImpl::saveContent(saveHandler);
	
	fUML::Semantics::Loci::SemanticVisitorImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void TransitionActivationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
		// Add attributes
          if ( this->eIsSet(package->getTransitionActivation_Attribute_analyticalStatus()) )
          {
			PSSM::Semantics::StateMachines::TransitionMetadata value = this->getAnalyticalStatus();
			std::string literal = "";
			if (value == PSSM::Semantics::StateMachines::TransitionMetadata::NONE)
			{
				literal = "none";
			}
			else if (value == PSSM::Semantics::StateMachines::TransitionMetadata::REACHED)
			{
				literal = "reached";
			}
			else if (value == PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED)
			{
				literal = "traversed";
			}
			else if (value == PSSM::Semantics::StateMachines::TransitionMetadata::COMPLETED)
			{
				literal = "completed";
			}
			saveHandler->addAttribute("analyticalStatus", literal);
          }

          if ( this->eIsSet(package->getTransitionActivation_Attribute_lastPropagation()) )
          {
			saveHandler->addAttribute("lastPropagation", this->getLastPropagation());
          }

          if ( this->eIsSet(package->getTransitionActivation_Attribute_status()) )
          {
			PSSM::Semantics::StateMachines::TransitionMetadata value = this->getStatus();
			std::string literal = "";
			if (value == PSSM::Semantics::StateMachines::TransitionMetadata::NONE)
			{
				literal = "none";
			}
			else if (value == PSSM::Semantics::StateMachines::TransitionMetadata::REACHED)
			{
				literal = "reached";
			}
			else if (value == PSSM::Semantics::StateMachines::TransitionMetadata::TRAVERSED)
			{
				literal = "traversed";
			}
			else if (value == PSSM::Semantics::StateMachines::TransitionMetadata::COMPLETED)
			{
				literal = "completed";
			}
			saveHandler->addAttribute("status", literal);
          }
	// Add references
	if ( this->eIsSet(package->getTransitionActivation_Attribute_lastTriggeringEventOccurrence()) )
	{
		saveHandler->addReference(this->getLastTriggeringEventOccurrence(), "lastTriggeringEventOccurrence", getLastTriggeringEventOccurrence()->eClass() != fUML::Semantics::CommonBehavior::CommonBehaviorPackage::eInstance()->getEventOccurrence_Class()); 
	}
	if ( this->eIsSet(package->getTransitionActivation_Attribute_leastCommonAncestor()) )
	{
		saveHandler->addReference(this->getLeastCommonAncestor(), "leastCommonAncestor", getLeastCommonAncestor()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getRegionActivation_Class()); 
	}
	if ( this->eIsSet(package->getTransitionActivation_Attribute_sourceVertexActivation()) )
	{
		saveHandler->addReference(this->getSourceVertexActivation(), "sourceVertexActivation", getSourceVertexActivation()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getVertexActivation_Class()); 
	}
	if ( this->eIsSet(package->getTransitionActivation_Attribute_targetVertexActivation()) )
	{
		saveHandler->addReference(this->getTargetVertexActivation(), "targetVertexActivation", getTargetVertexActivation()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getVertexActivation_Class()); 
	}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& TransitionActivationImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getTransitionActivation_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> TransitionActivationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_ANALYTICALSTATUS:
			return eAny(getAnalyticalStatus(),PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONMETADATA_CLASS,false); //435
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTPROPAGATION:
			return eAny(getLastPropagation(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //436
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTTRIGGERINGEVENTOCCURRENCE:
			return eAny(getLastTriggeringEventOccurrence(),fUML::Semantics::CommonBehavior::CommonBehaviorPackage::EVENTOCCURRENCE_CLASS,false); //438
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LEASTCOMMONANCESTOR:
			return eAny(getLeastCommonAncestor(),PSSM::Semantics::StateMachines::StateMachinesPackage::REGIONACTIVATION_CLASS,false); //437
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_SOURCEVERTEXACTIVATION:
			return eAny(getSourceVertexActivation(),PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS,false); //433
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_STATUS:
			return eAny(getStatus(),PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONMETADATA_CLASS,false); //432
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_TARGETVERTEXACTIVATION:
			return eAny(getTargetVertexActivation(),PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS,false); //434
	}
	return StateMachineSemanticVisitorImpl::eGet(featureID, resolve, coreType);
}

bool TransitionActivationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_ANALYTICALSTATUS:
			return m_analyticalStatus != PSSM::Semantics::StateMachines::TransitionMetadata::NONE;; //435
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTPROPAGATION:
			return getLastPropagation() != false; //436
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTTRIGGERINGEVENTOCCURRENCE:
			return getLastTriggeringEventOccurrence() != nullptr; //438
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LEASTCOMMONANCESTOR:
			return getLeastCommonAncestor() != nullptr; //437
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_SOURCEVERTEXACTIVATION:
			return getSourceVertexActivation() != nullptr; //433
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_STATUS:
			return m_status != PSSM::Semantics::StateMachines::TransitionMetadata::NONE;; //432
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_TARGETVERTEXACTIVATION:
			return getTargetVertexActivation() != nullptr; //434
	}
	return StateMachineSemanticVisitorImpl::internalEIsSet(featureID);
}

bool TransitionActivationImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_ANALYTICALSTATUS:
		{
			try
			{
				PSSM::Semantics::StateMachines::TransitionMetadata _analyticalStatus = newValue->get<PSSM::Semantics::StateMachines::TransitionMetadata>();
				setAnalyticalStatus(_analyticalStatus); //435
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'analyticalStatus'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTPROPAGATION:
		{
			try
			{
				bool _lastPropagation = newValue->get<bool>();
				setLastPropagation(_lastPropagation); //436
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'lastPropagation'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LASTTRIGGERINGEVENTOCCURRENCE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> _lastTriggeringEventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(eObject);
					if(_lastTriggeringEventOccurrence)
					{
						setLastTriggeringEventOccurrence(_lastTriggeringEventOccurrence); //438
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'lastTriggeringEventOccurrence'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'lastTriggeringEventOccurrence'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_LEASTCOMMONANCESTOR:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> _leastCommonAncestor = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>(eObject);
					if(_leastCommonAncestor)
					{
						setLeastCommonAncestor(_leastCommonAncestor); //437
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'leastCommonAncestor'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'leastCommonAncestor'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_SOURCEVERTEXACTIVATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _sourceVertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(eObject);
					if(_sourceVertexActivation)
					{
						setSourceVertexActivation(_sourceVertexActivation); //433
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'sourceVertexActivation'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'sourceVertexActivation'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_STATUS:
		{
			try
			{
				PSSM::Semantics::StateMachines::TransitionMetadata _status = newValue->get<PSSM::Semantics::StateMachines::TransitionMetadata>();
				setStatus(_status); //432
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'status'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_ATTRIBUTE_TARGETVERTEXACTIVATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _targetVertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(eObject);
					if(_targetVertexActivation)
					{
						setTargetVertexActivation(_targetVertexActivation); //434
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'targetVertexActivation'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'targetVertexActivation'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return StateMachineSemanticVisitorImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> TransitionActivationImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::TransitionActivation::canFireOn(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 1082744047
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_CANFIREON_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'canFireOn'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'canFireOn'!")
					return nullptr;
				}
			}
		
			result = eAny(this->canFireOn(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::canPropagateExecution(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 1603231815
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_CANPROPAGATEEXECUTION_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'canPropagateExecution'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'canPropagateExecution'!")
					return nullptr;
				}
			}
		
			result = eAny(this->canPropagateExecution(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::enterTarget(fUML::Semantics::CommonBehavior::EventOccurrence): 4014845597
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_ENTERTARGET_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'enterTarget'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'enterTarget'!")
					return nullptr;
				}
			}
		
			this->enterTarget(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::evaluateGuard(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 2568397392
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_EVALUATEGUARD_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'evaluateGuard'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'evaluateGuard'!")
					return nullptr;
				}
			}
		
			result = eAny(this->evaluateGuard(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::exitSource(fUML::Semantics::CommonBehavior::EventOccurrence): 1439857731
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_EXITSOURCE_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'exitSource'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'exitSource'!")
					return nullptr;
				}
			}
		
			this->exitSource(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::fire(fUML::Semantics::CommonBehavior::EventOccurrence): 2581227326
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_FIRE_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'fire'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'fire'!")
					return nullptr;
				}
			}
		
			this->fire(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::getSourceActivation() : PSSM::Semantics::StateMachines::VertexActivation: 540086137
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_GETSOURCEACTIVATION:
		{
			result = eEcoreAny(this->getSourceActivation(), PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::getTargetActivation() : PSSM::Semantics::StateMachines::VertexActivation: 3993048639
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_GETTARGETACTIVATION:
		{
			result = eEcoreAny(this->getTargetActivation(), PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::hasTrigger(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 2023860494
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_HASTRIGGER_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'hasTrigger'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'hasTrigger'!")
					return nullptr;
				}
			}
		
			result = eAny(this->hasTrigger(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::isGuarded() : bool: 2275595167
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_ISGUARDED:
		{
			result = eAny(this->isGuarded(), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::isReached() : bool: 3389314907
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_ISREACHED:
		{
			result = eAny(this->isReached(), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::isTraversed(bool) : bool: 1661711095
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_ISTRAVERSED_BOOLEAN:
		{
			//Retrieve input parameter 'staticCheck'
			//parameter 0
			bool incoming_param_staticCheck;
			Bag<Any>::const_iterator incoming_param_staticCheck_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_staticCheck = (*incoming_param_staticCheck_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'staticCheck'. Failed to invoke operation 'isTraversed'!")
				return nullptr;
			}
		
			result = eAny(this->isTraversed(incoming_param_staticCheck), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::isTriggered(bool) : bool: 3253012852
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_ISTRIGGERED_BOOLEAN:
		{
			//Retrieve input parameter 'staticCheck'
			//parameter 0
			bool incoming_param_staticCheck;
			Bag<Any>::const_iterator incoming_param_staticCheck_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_staticCheck = (*incoming_param_staticCheck_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'staticCheck'. Failed to invoke operation 'isTriggered'!")
				return nullptr;
			}
		
			result = eAny(this->isTriggered(incoming_param_staticCheck), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::setSourceActivation(PSSM::Semantics::StateMachines::VertexActivation): 2747339387
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_SETSOURCEACTIVATION_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'sourceActivation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_sourceActivation;
			Bag<Any>::const_iterator incoming_param_sourceActivation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_sourceActivation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_sourceActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'sourceActivation'. Failed to invoke operation 'setSourceActivation'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'sourceActivation'. Failed to invoke operation 'setSourceActivation'!")
					return nullptr;
				}
			}
		
			this->setSourceActivation(incoming_param_sourceActivation);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::setTargetActivation(PSSM::Semantics::StateMachines::VertexActivation): 1905334593
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_SETTARGETACTIVATION_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'targetActivation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_targetActivation;
			Bag<Any>::const_iterator incoming_param_targetActivation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_targetActivation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_targetActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'targetActivation'. Failed to invoke operation 'setTargetActivation'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'targetActivation'. Failed to invoke operation 'setTargetActivation'!")
					return nullptr;
				}
			}
		
			this->setTargetActivation(incoming_param_targetActivation);
			break;
		}
		// PSSM::Semantics::StateMachines::TransitionActivation::tryExecuteEffect(fUML::Semantics::CommonBehavior::EventOccurrence): 3598997427
		case StateMachinesPackage::TRANSITIONACTIVATION_OPERATION_TRYEXECUTEEFFECT_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryExecuteEffect'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryExecuteEffect'!")
					return nullptr;
				}
			}
		
			this->tryExecuteEffect(incoming_param_eventOccurrence);
			break;
		}

		default:
		{
			// call superTypes
			result = StateMachineSemanticVisitorImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation> TransitionActivationImpl::getThisTransitionActivationPtr() const
{
	return m_thisTransitionActivationPtr.lock();
}
void TransitionActivationImpl::setThisTransitionActivationPtr(std::weak_ptr<PSSM::Semantics::StateMachines::TransitionActivation> thisTransitionActivationPtr)
{
	m_thisTransitionActivationPtr = thisTransitionActivationPtr;
	setThisStateMachineSemanticVisitorPtr(thisTransitionActivationPtr);
}


