//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_COMMENT_HPP
#define UML_COMMENT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Element.hpp"




//*********************************
namespace uml 
{
	/*!
	A Comment is a textual annotation that can be attached to a set of Elements.
	<p>From package UML::CommonStructure.</p>
	*/
	
	class UML_API Comment : virtual public Element
	{
		public:
 			Comment(const Comment &) {}

		protected:
			Comment(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Comment() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Specifies a string that is the comment.
			<p>From package UML::CommonStructure.</p>
			*/
			 
			virtual std::string getBody() const = 0;
			/*!
			Specifies a string that is the comment.
			<p>From package UML::CommonStructure.</p>
			*/
			 
			virtual void setBody (std::string _body)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References the Element(s) being commented.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::Element>>& getAnnotatedElement() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			Specifies a string that is the comment.
			<p>From package UML::CommonStructure.</p>
			*/
			
			std::string m_body= "";
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			References the Element(s) being commented.
			<p>From package UML::CommonStructure.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::Element>> m_annotatedElement;
	};
}
#endif /* end of include guard: UML_COMMENT_HPP */
