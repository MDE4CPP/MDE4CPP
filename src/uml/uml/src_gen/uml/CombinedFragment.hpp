//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_COMBINEDFRAGMENT_HPP
#define UML_COMBINEDFRAGMENT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class Gate;
	class GeneralOrdering;
	class Interaction;
	class InteractionOperand;
	class Lifeline;
	class Namespace;
	class StringExpression;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/InteractionFragment.hpp"

// enum includes
#include "uml/InteractionOperatorKind.hpp"
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A CombinedFragment defines an expression of InteractionFragments. A CombinedFragment is defined by an interaction operator and corresponding InteractionOperands. Through the use of CombinedFragments the user will be able to describe a number of traces in a compact and concise manner.
	<p>From package UML::Interactions.</p>
	*/
	
	class UML_API CombinedFragment : virtual public InteractionFragment
	{
		public:
 			CombinedFragment(const CombinedFragment &) {}

		protected:
			CombinedFragment(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~CombinedFragment() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Specifies the operation which defines the semantics of this combination of InteractionFragments.
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual uml::InteractionOperatorKind getInteractionOperator() const = 0;
			/*!
			Specifies the operation which defines the semantics of this combination of InteractionFragments.
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual void setInteractionOperator (uml::InteractionOperatorKind _interactionOperator)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Specifies the gates that form the interface between this CombinedFragment and its surroundings
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Gate, uml::Element>> getCfragmentGate() const = 0;
			/*!
			The set of operands of the combined fragment.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::InteractionOperand, uml::Element>> getOperand() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			Specifies the operation which defines the semantics of this combination of InteractionFragments.
			<p>From package UML::Interactions.</p>
			*/
			
			uml::InteractionOperatorKind m_interactionOperator= uml::InteractionOperatorKind::SEQ;
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			Specifies the gates that form the interface between this CombinedFragment and its surroundings
			<p>From package UML::Interactions.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Gate, uml::Element>> m_cfragmentGate;
			/*!
			The set of operands of the combined fragment.
			<p>From package UML::Interactions.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::InteractionOperand, uml::Element>> m_operand;
	};
}
#endif /* end of include guard: UML_COMBINEDFRAGMENT_HPP */
