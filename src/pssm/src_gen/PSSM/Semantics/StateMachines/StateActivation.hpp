//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_STATEACTIVATION_HPP
#define PSSM_SEMANTICS_STATEMACHINES_STATEACTIVATION_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSSM
{
	class PSSMFactory;
}

//Forward Declaration for used types 
namespace fUML::Semantics::CommonBehavior 
{
	class EventOccurrence;
}
namespace PSSM::Semantics::StateMachines 
{
	class ConnectionPointActivation;
	class DoActivityContextObject;
	class RegionActivation;
	class TransitionActivation;
}
namespace uml 
{
	class Behavior;
	class NamedElement;
	class Vertex;
}

// namespace macro header include
#include "PSSM/PSSM.hpp"

// base class includes
#include "PSSM/Semantics/StateMachines/VertexActivation.hpp"

// enum includes
#include "PSSM/Semantics/StateMachines/StateMetadata.hpp"



//*********************************
namespace PSSM::Semantics::StateMachines 
{
	
	class PSSM_API StateActivation : virtual public VertexActivation
	{
		public:
 			StateActivation(const StateActivation &) {}

		protected:
			StateActivation(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~StateActivation() {}

			//*********************************
			// Operations
			//*********************************
			
			
			virtual bool canDefer(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;
			virtual void defer(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;
			virtual void enter(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor) = 0;
			virtual void enterRegions(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;
			virtual void exit(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& exitingTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor) = 0;
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>> getConnectionPointActivation() = 0;
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::ConnectionPointActivation> getConnectionPointActivation(const std::shared_ptr<uml::Vertex>& vertex) = 0;
			virtual std::shared_ptr<uml::Behavior> getDoActivity() = 0;
			virtual std::shared_ptr<uml::Behavior> getEntry() = 0;
			virtual std::shared_ptr<uml::Behavior> getExit() = 0;
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> getFireableTransitions(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>> getRegionActivation() = 0;
			virtual bool hasCompleted() = 0;
			virtual void notifyCompletion() = 0;
			virtual void releaseDeferredEvents() = 0;
			virtual void tryExecuteEntry(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;
			virtual void tryExecuteExit(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;
			virtual void tryInvokeDoActivity(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual bool getIsDoActivityCompleted() const = 0;
			virtual void setIsDoActivityCompleted (bool _isDoActivityCompleted)= 0;
			virtual bool getIsEntryCompleted() const = 0;
			virtual void setIsEntryCompleted (bool _isEntryCompleted)= 0;
			virtual bool getIsExitCompleted() const = 0;
			virtual void setIsExitCompleted (bool _isExitCompleted)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>>& getConnectionPointActivations() const = 0;
			virtual const std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject>& getDoActivityContextObject() const = 0;
			virtual void setDoActivityContextObject(const std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject>&) = 0;
			virtual const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>>& getRegionActivations() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			bool m_isDoActivityCompleted= false;
			bool m_isEntryCompleted= false;
			bool m_isExitCompleted= false;
			
			//*********************************
			// Reference Members
			//*********************************
			mutable std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>> m_connectionPointActivations;
			std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject> m_doActivityContextObject;
			mutable std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>> m_regionActivations;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_STATEACTIVATION_HPP */
