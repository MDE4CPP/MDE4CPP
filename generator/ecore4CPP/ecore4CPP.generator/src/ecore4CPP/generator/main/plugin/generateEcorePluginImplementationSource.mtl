[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateEcorePluginImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::validation::validation /]

[template public generateEcorePluginImplSource(aPackage : EPackage) { 
	pluginImplName : String = aPackage.name.concat('PluginImpl');
	fileName : String = aPackage.generateNamespacePath().concat('/impl/').concat(pluginImplName).concat('.cpp');
}]
[printInfo(fileGenerationMessage(fileName, 'plugin implementation source file'), 2)/]
[file (fileName, false, 'UTF-8')]
#include "[aPackage.name/]/impl/[pluginImplName/].hpp"

#include "[aPackage.name/]/[aPackage.name/]Factory.hpp"
#include "[aPackage.name/]/[aPackage.name/]Package.hpp"
#include "[aPackage.name/]/impl/[aPackage.name/]FactoryImpl.hpp"
#include "[aPackage.name/]/impl/[aPackage.name/]PackageImpl.hpp"

[let subPackages : OrderedSet(EPackage) =  aPackage->closure(p|p.eSubpackages)->including(aPackage)->reject(doNotGenerateEPackage())->asOrderedSet()->sortedBy(name)]
	[if (subPackages->size()>0)]
		[for (aSubPackage : EPackage| subPackages)]
#include "[aSubPackage.getNamespace('/', false)/]/impl/[aSubPackage.name/]FactoryImpl.hpp"
#include "[aSubPackage.getNamespace('/', false)/]/impl/[aSubPackage.name/]PackageImpl.hpp"
		[/for] 
	[/if]
[/let]	


using namespace [aPackage.name/];

//static initialisation
[comment] 
std::shared_ptr<[aPackage.name/]Plugin> [aPackage.name/]Plugin::eInstance()
{
	static std::shared_ptr<[aPackage.name/]Plugin> instance;

	if(instance==nullptr)
	{
		//create a new Singelton Instance
		instance.reset(new [pluginImplName/]());
	}
	return instance;
}
[/comment]
std::shared_ptr<[aPackage.name/]Plugin> [aPackage.name/]Plugin::init()
{
	std::shared_ptr<[aPackage.name/]Plugin>* staticPtr= get[aPackage.name/]PluginStaticPtr();
	if(staticPtr==nullptr)
	{
		//create a new Singelton Instance
		seteInstance(new [pluginImplName/]());
	}      
	return *get[aPackage.name/]PluginStaticPtr();
}

[aPackage.getRootPackage().name.toUpper()/]_API std::shared_ptr<MDE4CPPPlugin> start()
{
	return [pluginImplName/]::eInstance();
}

[let subPackages : OrderedSet(EPackage) =  aPackage->closure(p|p.eSubpackages)->including(aPackage)->reject(doNotGenerateEPackage())->asOrderedSet()->sortedBy(name)]
	[if (subPackages->size()>0)]
		[for (aSubPackage : EPackage| subPackages)]
std::shared_ptr<[aSubPackage.getNamespace('::', false)/]::[aSubPackage.name/]Package> [pluginImplName/]::get[aSubPackage.getNamespace('_', false)/]Package()
{
	if(nullptr==m_[aSubPackage.getNamespace('_', false)/]Package) // create package only ones
	{
		m_[aSubPackage.getNamespace('_', false)/]Package.reset([aSubPackage.getNamespace('::', false)/]::[aSubPackage.name/]PackageImpl::create());//plugin is fried of package
	}
	return m_[aSubPackage.getNamespace('_', false)/]Package;
}

std::shared_ptr<[aSubPackage.getNamespace('::', false)/]::[aSubPackage.name/]Factory> [pluginImplName/]::get[aSubPackage.getNamespace('_', false)/]Factory()
{
	if(nullptr==m_[aSubPackage.getNamespace('_', false)/]Factory) // create package only ones
	{
		m_[aSubPackage.getNamespace('_', false)/]Factory.reset([aSubPackage.getNamespace('::', false)/]::[aSubPackage.name/]FactoryImpl::create());//plugin is fried of Factory
	}
	return m_[aSubPackage.getNamespace('_', false)/]Factory;
}
		[/for] 
	[/if]
[/let]	


//*********************************
// Constructor / Destructor
//*********************************
[pluginImplName/]::[pluginImplName/]()
{
// plugin create factory and package during start()
[comment]
	std::shared_ptr<[aPackage.name.concat('Package')/]> eInstancePackagePtr=[aPackage.name.concat('Package')/]::eInstance();
	if(nullptr==eInstancePackagePtr) // create package only ones
	{ 
		std::shared_ptr<[aPackage.name.concat('Package')/]> uniquePackagePtr;
		uniquePackagePtr.reset([aPackage.name.concat('Package')/]Impl::create());//plugin is fried of package
		[aPackage.name.concat('Package')/]::seteInstance(uniquePackagePtr);
	}
	std::shared_ptr<[aPackage.name.concat('Package')/]> eInstanceFactoryPtr=[aPackage.name.concat('Package')/]::eInstance();
	if(nullptr==eInstanceFactoryPtr) // create factory only ones
	{ 
		std::shared_ptr<[aPackage.name.concat('Factory')/]> uniqueFactroyPtr;
		uniqueFactroyPtr.reset([aPackage.name.concat('Factory')/]Impl::create());//plugin is fried of package
		[aPackage.name.concat('Factory')/]::seteInstance(uniqueFactroyPtr);
	} 
[/comment] 
}

[pluginImplName/]::~[pluginImplName/]()
{
}


std::shared_ptr<ecore::EObject> [pluginImplName/]::create(const std::string& name) const
{
	return [aPackage.name/]Factory::eInstance()->create(name);
}

std::shared_ptr<ecore::EObject> [pluginImplName/]::create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID) const
{
	return [aPackage.name/]Factory::eInstance()->create(name, container, referenceID);
}

std::shared_ptr<ecore::EFactory> [pluginImplName/]::getEFactory()
{
	return [aPackage.name/]Factory::eInstance();
}

std::shared_ptr<ecore::EPackage> [pluginImplName/]::getEPackage()
{
	return [aPackage.name/]Package::eInstance();
}

std::string [pluginImplName/]::eclipseURI()
{
	return "[getEclipseURI()/]";
}

std::string [pluginImplName/]::eNAME()
{
	return "[aPackage.name/]";
}

std::string [pluginImplName/]::eNS_URI()
{
	return "[aPackage.nsURI/]";
}

std::string [pluginImplName/]::eNS_PREFIX()
{
	return "[aPackage.nsPrefix/]";
}
[/file]
[/template]

[query private hasEclipseURI(aPackage : EPackage) : Boolean = if (hasSourceGen()) then SourceGen().details->select(key = 'eclipseURI')->notEmpty() else false endif/]
[query private getEclipseURI(aPackage : EPackage) : String = if (hasEclipseURI()) then SourceGen().details->select(key = 'eclipseURI')->first().value else '' endif/]