[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module parameterHelper('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::collectionHelper /]

[query public getFUMLCommonBehaviorFactory(any : OclAny) : String = 'fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()' /]
[query public getPSCSCommonBehaviorFactory(any : OclAny) : String = 'PSCS::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()' /]
[query public getFUMLLociFactory(any : OclAny) : String = 'fUML::Semantics::Loci::LociFactory::eInstance()' /]
[query public getPSCSLociFactory(any : OclAny) : String = 'PSCS::Semantics::Loci::LociFactory::eInstance()' /]
[query public getFUMLSimpleClassifierFactory(any : OclAny) : String = 'fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()' /]
[query public getPSCSSimpleClassifierFactory(any : OclAny) : String = 'PSCS::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()' /]
[query public getFUMLStructuredClassifierFactory(any : OclAny) : String = 'fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()' /]
[query public getPSCSStructuredClassifierFactory(any : OclAny) : String = 'PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()' /]
[query public getPSCSActionsFactory(any : OclAny) : String = 'PSCS::Semantics::Actions::ActionsFactory::eInstance()' /]

[query public getValueClass(aType : Type) : String = if (aType.oclIsKindOf(PrimitiveType)) then 'fUML::Semantics::SimpleClassifiers::'.concat(aType.name.toUpperFirst()).concat('Value') else aType.oclAsType(Classifier).objectClassName() endif /]

[query public pointerName(aClassifier : Classifier, aPackage : Package) : String = if (aPackage.name = aClassifier.namespace.myNamespaceName()) then aClassifier.name.toUpperFirst() else aClassifier.namespace.myNamespaceName().concat('::').concat(aClassifier.name.toUpperFirst()) endif /]
[query public executionClassName(aClassifier : Classifier) : String = aClassifier.name.toUpperFirst().concat('Execution') /]
[query public objectClassName(aClassifier : Classifier) : String = aClassifier.name.toUpperFirst().concat('Object') /]

[query public supportedTypes(type : Type) : Boolean = (name = 'Integer') or (name = 'Boolean') or (name = 'String') or (name = 'Real') or (name = 'UnlimitedNatural') /]

[query public getClassiferExecutions(aPackage : Package) : Set(Classifier) = OrderedSet{
				aPackage.allOwnedElements()->filter(Activity)._context->reject(oclIsUndefined()),
				aPackage.allOwnedElements()->filter(CallOperationAction).target.type,
				aPackage.allOwnedElements()->filter(CallOperationAction).operation.ownedParameter->select(type.oclIsKindOf(Interface)).type,
				aPackage.allOwnedElements()->filter(CallOperationAction).operation.ownedParameter->select(type.oclIsKindOf(Class)).type,
				aPackage.allOwnedElements()->filter(CallBehaviorAction).behavior->filter(OpaqueBehavior).ownedParameter->select(type.oclIsKindOf(Interface)).type,
				aPackage.allOwnedElements()->filter(CallBehaviorAction).behavior->filter(OpaqueBehavior).ownedParameter->select(type.oclIsKindOf(Class)).type,
				aPackage.allOwnedElements()->filter(ReadStructuralFeatureAction).structuralFeature.type,
				aPackage.allOwnedElements()->filter(AddStructuralFeatureValueAction).structuralFeature.type,
				aPackage.allOwnedElements()->filter(RemoveStructuralFeatureValueAction).structuralFeature.type,
				aPackage.allOwnedElements()->filter(Action).input.type,
				aPackage.allOwnedElements()->filter(Action).output.type,
				aPackage.getPackageClasses().attribute.type,
				aPackage.getPackageClasses().getAllOperations().ownedParameter.type,
				aPackage.getPackageInterfaces().getAllOperations().ownedParameter.type,
				aPackage.getPackageClasses().attribute.getAppliedStereotypes(),
				aPackage.getPackageClasses().interfaceRealization.supplier.oclAsType(Classifier),
				aPackage.getPackageClasses().generalization.general 
			}->flatten()->reject(oclIsUndefined())->reject(oclIsKindOf(Activity))->reject(supportedTypes())->reject(oclIsKindOf(PrimitiveType))->reject(oclIsKindOf(Enumeration))->sortedBy(name)/]

[query private getReflectionClassesForObjectClasses(aPackage : Package) : Set(Classifier) = 
	getDirectlyUsedReflectionPackageClasses()
	->addAll(getDirectlyUsedReflectionPackageClasses().getNearestPackage()->reject(p : Package | p = aPackage).getReflectionClassesForObjectClasses())
	->flatten()->asOrderedSet()->sortedBy(name)/]

[query private getDirectlyUsedReflectionPackageClasses(aPackage : Package) : Set(Classifier) = getClassiferExecutions()->select(c : Classifier | c.getNearestPackage().isReflectionModel()) /]

[query public getPackageClasses(aPackage : Package) : Set(Class) = 
	aPackage.allOwnedElements()->filter(Class)->flatten()->reject(oclIsKindOf(AssociationClass))->reject(oclIsKindOf(Component))->reject(oclIsKindOf(Behavior))->reject(oclIsKindOf(Stereotype))->reject(oclIsKindOf(Node))->sortedBy(name)/]

[query public getPackageInterfaces(aPackage : Package) : Set(Classifier) = aPackage.allOwnedElements()->filter(Interface)->sortedBy(name) /]

[query public getPackageStereotypes(aPackage : Package) : Set(Class) = 
	aPackage.allOwnedElements()->filter(Stereotype)->flatten()->sortedBy(name)/]

[query public getPackageClassifiers(aPackage : Package) : Set(Classifier) = OrderedSet{getPackageClasses(), getPackageInterfaces(), getPackageStereotypes()}->flatten()->sortedBy(name) /]

[query public getClassifiersForObjectClasses(aPackage : Package) : Set(Classifier) =
				getPackageClassifiers()->flatten()->sortedBy(name)/]

[query public getMetamodelClassifiersForObjectClasses(aPackage: Package) : Set(Classifier) = aPackage.getReflectionClassesForObjectClasses()->addAll(aPackage.getClassiferExecutions().getNearestPackage()->select(isReflectionModel()).getPackageClassifiers())->flatten()->asOrderedSet()->sortedBy(name)/]

[comment]Get all Operations in Package[/comment]
[query public getPackageOperations(aPackage : Package) : Set(Operation) = OrderedSet{
				aPackage.allOwnedElements()->filter(Classifier).getAllOperations()
				}->flatten()->sortedBy(name)
/]



[comment]INPUT SWITCH ----------------------------------------------------------[/comment]
[template public generateInputParameter(par : Parameter, index:Integer)]
[par.name.generateInputParameter(par.type, index)/]
[/template]

[template public generateInputParameter(pin : Pin, index:Integer)]
[pin.name.generateInputParameter(pin.type, index)/]
[/template]

[template private generateInputParameter(name : String, type : Type, index:Integer) ? (name.oclIsUndefined())]
#error There is an input parameter/pin that doesn't have a name set. Fix the model and generate the code again.
//Here some info that might help you to find it: name: [name/] - type: [type/]
[/template]

[template private generateInputParameter(name : String, type : Type, index:Integer) ? (type.name.oclIsUndefined())]
#error Input parameter/pin [name/] does not have a type set. Fix the model and generate the code again.
//Here some additional info that might help you to find it: [name/] - type: [type/]
[/template]

[template private generateInputParameter(name : String, type : Type, index:Integer) ? (not (name.oclIsUndefined() or type.name.oclIsUndefined()))]
std::shared_ptr<Bag<fUML::Semantics::Values::Value>> [name/]ValueList = inputParameters->at([index/])->getValues();
[/template]


[comment]OUTPUT SWITCH ----------------------------------------------------------[/comment]
[template public generateOutputParameter(par : Parameter) ? (par.name.oclIsUndefined())]
#error There is an output parameter that doesn't have a name set. Fix the model and generate the code again.
[/template]

[template public generateOutputParameter(par : Parameter) ? (par.type.name.oclIsUndefined())]
#error Output parameter [par.name/] doesn't have a type set. Fix the model and generate the code again.
[/template]

[template public generateOutputParameter(par : Parameter) ? (par.type.supportedTypes())]
std::shared_ptr<fUML::Semantics::SimpleClassifiers::[par.type.name/]Value> [par.name/]OutValue([getFUMLSimpleClassifierFactory()/]->create[par.type.name/]Value());
[/template]

[template public generateOutputParameter(par : Parameter) ? (not type.supportedTypes() and type.oclIsKindOf(Enumeration))]
std::shared_ptr<fUML::Semantics::SimpleClassifiers::EnumerationValue> [par.name/]OutValue([getFUMLSimpleClassifierFactory()/]->createEnumerationValue());
[/template]

[template public generateOutputParameter(par : Parameter) ? ((not type.supportedTypes()) and (not type.oclIsKindOf(Enumeration)))]
std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> [par.name/]OutValue([getPSCSStructuredClassifierFactory()/]->createCS_Reference());
std::shared_ptr<[par.type.getNearestPackage().name/]::[par.type.name.toUpperFirst()/]Object> [par.name/]OutUmlLinker(new [par.type.getNearestPackage().name/]::[par.type.name.toUpperFirst()/]Object([par.name.toLowerFirst()/][if (par.upper <> 1)]Temp[/if]));
[par.name/]OutUmlLinker->setThis[par.type.name.toUpperFirst()/]ObjectPtr([par.name/]OutUmlLinker);
[/template]


[comment]INCLUDE SWITCH----------------------------------------------------------[/comment]
[template public generateTypeInclude(type : Type, aPackage : Package, thisPackage : Package) ? ((not type.supportedTypes()) and (not type.oclIsKindOf(Enumeration)))]
#include "[aPackage.myNamespaceName()/]/[type.name/].hpp"
[if (aPackage.isReflectionModel())]
#include "[thisPackage.getPackageName()/]Exec/[type.name.toUpperFirst()/]Object.hpp"
[else]
#include "[aPackage.getPackageName()/]Exec/[type.name.toUpperFirst()/]Object.hpp"
[/if]
[/template]

[template public generateTypeInclude(type : Type, aPackage : Package, thisPackage : Package) ? (not type.supportedTypes() and type.oclIsKindOf(Enumeration))]
#include "fUML/Semantics/SimpleClassifiers/EnumerationValue.hpp"
#include "[aPackage.myNamespaceName()/]/[type.name/].hpp"
#include "[aPackage.myNamespaceName()/]/[aPackage.myNamespaceName()/]Package.hpp"
[/template]

[template public generateTypeInclude(type : Type, aPackage : Package, thisPackage : Package) ? (supportedTypes())]
#include "fUML/Semantics/SimpleClassifiers/[type.name/]Value.hpp"
[/template]

[comment]UMLValue Getter---------------------------------------------------------[/comment]
[query public UMLValueName(aClassifier : Classifier) : String = 'm_'.concat(aClassifier.name.toUpperFirst()).concat('Value')/]
[query public UMLValueGetterName(aClassifier : Classifier) : String = 'get'.concat(aClassifier.name.toUpperFirst()).concat('Value')/]
[query public UMLValueSetterName(aClassifier : Classifier) : String = 'set'.concat(aClassifier.name.toUpperFirst()).concat('Value')/]