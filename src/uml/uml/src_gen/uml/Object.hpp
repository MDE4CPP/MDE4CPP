//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_OBJECT_HPP
#define UML_OBJECT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 

class Any;

//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 
namespace uml 
{
	class Operation;
	class Property;
}

// namespace macro header include
#include "uml/uml.hpp"



#include "ecore/EModelElement.hpp"


//*********************************
namespace uml 
{
	/*!
	Reflection introduces Object as a supertype of Element in order to be able to have a Type that represents both elements
	and data values. Object represents ‘any’ value and is the equivalent of java.lang.Object in Java.
	
	<span style="background-color:#FF8000">This Element was merged from mof::Reflection package.</span>
	*/
	
	class UML_API Object : virtual public ecore::EModelElement
	{
		public:
 			Object(const Object &) {}

		protected:
			Object(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Object() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			If Property has multiplicity upper bound >1, add() will automatically add the value to the collection.
			*/
			 
			virtual void add(std::shared_ptr<uml::Property> _property, std::shared_ptr<Any> value) = 0;
			/*!
			If Property has multiplicity upper bound >1, add() will automatically add the value to the collection.
			Value will be added at the position given by insertAt.
			*/
			 
			virtual void add(std::shared_ptr<uml::Property> _property, std::shared_ptr<Any> value, int insertAt) = 0;
			/*!
			Abstract operation to destroy an instance.
			*/
			 
			virtual void destroy() = 0;
			/*!
			Gets the value of the given property. If the Property has multiplicity upper bound of 1, get() returns the value of the
			Property. If Property has multiplicity upper bound >1, get() returns a ReflectiveCollection containing the values of the
			Property. If there are no values, the ReflectiveCollection returned is empty. 
			*/
			 
			virtual std::shared_ptr<Any> get(std::shared_ptr<uml::Property> _property) const = 0;
			/*!
			Calls the supplied Operation on the object, passing the supplied Arguments and returning the result.
			The Operation must be defined on the Class of the Object, and the arguments must refer to Parameters of the Operation.
			If an Argument is not supplied for a Parameter, its default value, if any, will be used.
			*/
			 
			virtual std::shared_ptr<Any> invoke(std::shared_ptr<uml::Operation> _operation, std::shared_ptr<Bag<Any>> arguments) = 0;
			/*!
			If the Property has multiplicity upper bound = 1, set() atomically updates the value of the Property to the object
			parameter.
			*/
			 
			virtual void set(std::shared_ptr<uml::Property> _property, std::shared_ptr<Any> value) = 0;
			virtual void unset(std::shared_ptr<uml::Property> _property) = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
	};
}
#endif /* end of include guard: UML_OBJECT_HPP */
