[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate class implementation source file
 * 
 */]
[module generateImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::components::generateInterface /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateOpaqueBehavior /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::setGetHelper /]
[import UML4CPP::generator::main::validation::validateModel /]
[import UML4CPP::generator::main::pscs::generatePropertyInstantiation/]
[import UML4CPP::generator::main::pscs::generateConnectorPatternsInstantiation/]
[import UML4CPP::generator::main::pscs::generateDestruction/]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]

[query private includes(aClass : Class)  : Set(Type) = OrderedSet
{
	aClass.member->selectByKind(TypedElement)->select(not type.oclIsUndefined()).type, 
	aClass.ownedOperation.ownedParameter.type,
	aClass.collectOpaqueBehaviorsContexedByClass().ownedParameter.type,
	aClass.getAllAttributes().type, 
	aClass.importedMember, 
	aClass.getImplicitCompositeOwners()
}->flatten() /]

[query private includes(aInterface : Interface)  : Set(Type) = OrderedSet{aInterface.member->selectByKind(TypedElement)->select(not type.oclIsUndefined()).type, aInterface.ownedOperation.ownedParameter.type}->flatten() /]

[query private getAllAttributes(anInterface : Interface) : Set(Property) = OrderedSet{anInterface.ownedAttribute, anInterface.generalization.general->selectByType(Interface).getAllAttributes()} /]
[query private getAllAttributes(aClass : Class) : Set(Property) = OrderedSet{aClass.ownedAttribute, aClass.generalization.general->selectByType(Class).getAllAttributes(), aClass.interfaceRealization.contract.getAllAttributes()}->flatten() /]

[template public generateImplementationSource(aClass : Class) { className : String = aClass.name.toUpperFirst().concat('Impl'); aPackage : Package = aClass.ancestors()->filter(Package)->first(); }]
[file (aPackage.generateNamespacePath(false).concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.generateNamespacePath(false)/]/impl/[className.concat('.hpp')/]"

[defineDebugMacro()/]

//General includes
#include <iostream>
[if (aClass.ownedOperation->select(method->isEmpty())->notEmpty())]
#include <stdexcept>[/if]
[generateAbstractDataTypesIncludes()/]
#include "abstractDataTypes/SubsetUnion.hpp"
#include "util/util.hpp"
#include "uml/UMLAny.hpp"
#include "uml/UMLContainerAny.hpp"
#include "uml/Property.hpp"
#include "uml/Operation.hpp"
#include "uml/Parameter.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.name.concat('Factory')/].hpp"
#include "[aPackage.generateNamespacePath(false)/]/impl/[aPackage.name.concat('PackageImpl')/].hpp"
#include "[aClass.eClass().ePackage.name/]/[aClass.eClass().name/].hpp"
[if (aClass.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration))->size() > 0)]
#include "uml/EnumerationLiteral.hpp"
[/if]
[comment Package for used PrimitiveTypes /]
[if (aClass.includes()->filter(PrimitiveType)->size() > 0)]

//Package for used PrimitiveTypes
#include "types/typesPackage.hpp"
[/if]
[comment Packages for used (non-primitive) Types /]
[for (aPackage : Package | aClass.includes()->select(t : Type | t.oclIsKindOf(Class) or t.oclIsKindOf(Interface) or t.oclIsKindOf(Enumeration))._package->sortedBy(myQualifiedName()))before('\n//Packages for used (non-primitive) Types\n') after('\n')]
#include "[aPackage.generateNamespacePath(true)/]/[aPackage.myNamespaceName()/]Package.hpp"
[/for]
[comment Used Types /]
[for (cl : Type | aClass.includes()->select(t : Type | t.oclIsKindOf(Class) or t.oclIsKindOf(Interface) or t.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName())) before('\n//Used Types\n') after('\n')]
[if (cl.oclIsUndefined() or cl.name.oclIsUndefined())]
// undefined  [cl.eClass().name/] ([cl.toString()/]) ['class '.concat(aClass.name).concat(': header include failed for undefined ').concat(cl.eClass().name).concat(' ').concat(cl.toString()).registerError()/]
[elseif (cl.getNearestPackage().hasIncludePath())]
#include "[cl.getNearestPackage().getIncludePath()/]"
[else]
#include "[cl.getNearestPackage().generateNamespacePath(true)/]/[cl.name.toUpperFirst()/].hpp"
[/if]
[/for]
[comment PackgeImpl and Factories included from types of attributes, operation parameters, imports and composite owner classes /]
[for (typePackage : Package | aClass.includes()->filter(Class).getNearestPackage()->reject(pack : Package | pack = aPackage)->asSet()->sortedBy(myQualifiedName())) before('\n//Packges and Factories included from types of attributes, operation parameters, imports and composite owner classes\n') after('\n')]
#include "[typePackage.generateNamespacePath(true)/]/[typePackage.myNamespaceName().concat('Factory')/].hpp"
#include "[typePackage.generateNamespacePath(true)/]/impl/[typePackage.myNamespaceName().concat('PackageImpl')/].hpp"
[/for]
[comment Packages of included Enumerations /]
[for (aPackage : Package | aClass.ownedAttribute->select(type.oclIsKindOf(Enumeration)).type._package->flatten()->reject(pack : Package | pack = aPackage)->sortedBy(name)) before('\n//Packages of included Enumerations\n') after('\n')]
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.getPackageName()/]Package.hpp"
[/for]
[comment Plugin Framework /]
[if (aClass.ownedOperation.method->notEmpty())][if(ownedOperation.method->filter(Activity)->notEmpty())]

//Includes for PluginFramework
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"
[/if][/if]
[comment Includes of OpaqueBehavior methods of Operations/]
[for (aOperation : Operation | aClass.ownedOperation->select(method->filter(OpaqueBehavior)->notEmpty())->asOrderedSet()->sortedBy(myQualifiedName())) before('\n//Includes of Operations') after('\n')]
[let anOpaqueBehavior : OpaqueBehavior = aOperation.method->filter(OpaqueBehavior)->asOrderedSet()->first()]
	[if (anOpaqueBehavior.hasLanguage(keyInclude()))]
//Included from operation "[aOperation.name/]"
[anOpaqueBehavior.getEntryForLanguage(keyInclude())/]
	[/if]
[/let]
[/for]
[comment Included from OpaqueBehaviors without an Operation/]
[for (includeStatement : String | aClass.collectOpaqueBehaviorsContexedByClass().collectOpaqueBehaviorIncludeStrings()->asOrderedSet()) before('\n//Includes from OpaqueBehaviors\n') after('\n')]
[includeStatement/]
[/for]
[comment Includes from InstanceValues /]
[for (instVal : InstanceValue | aClass.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName())) before('\n//Includes from InstanceValues\n') after('\n')]
[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aClass.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
[else]
#include "[instVal.type._package.generateNamespacePath(false)/]/[instVal.type._package.getPackageName()/]Factory.hpp"
#include "[instVal.type._package.generateNamespacePath(true)/]/[instVal.type.name/].hpp"
[/if]
[/for]
[comment Includes from Ports typed by Interfaces /]
[for (aPort : Port | aClass.ownedAttribute->filter(Port)->select(p : Port | p.type.oclIsTypeOf(Interface))) before('\n//Includes from Ports typed by Interfaces\n') after('\n')]
	[for (anInterfaceRealization : InterfaceRealization | aPackage.getInterfaceRealizations(aPort.type.oclAsType(Interface)))]
	[let realizingClass : Class = anInterfaceRealization.owner.oclAsType(Class)]
#include "[realizingClass._package.generateNamespacePath(true)/]/[realizingClass.name/].hpp"
	[/let]
	[/for]
[/for]
[comment Includes from roles of ConnectorEnds /]
[for (aConnector : Connector | aClass.ownedConnector->select(c : Connector | c.end->size() > 0)) before('\nIncludes from roles of ConnectorEnds\n') after('\n')][for (anEnd : ConnectorEnd | aConnector.end)]
#include "[anEnd.role.type._package.generateNamespacePath(true)/]/[anEnd.role.type.name.toUpperFirst()/].hpp"
[/for][/for]

[if (not aPackage.isIgnoreNamespace())]using namespace [aPackage.generateNamespace(false)/];[/if]

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
	DEBUG_INFO("Instance of '[aClass.name.toUpperFirst()/]' is created.")
	//***********************************
}

[for (anAssociation : Association | aClass.getCompositionsToClass())]
	[let containerProperty : Property = anAssociation.getCompositeProperty(aClass)]
		[if (not containerProperty.opposite.oclIsUndefined())]
			[let containmentProperty : Property = containerProperty.opposite]
				[if (containmentProperty.isBackReference())]
[className/]::[className/]([containmentProperty.generateCppType()/] [containmentProperty.name.toLowerFirst()/])
:[className/]()
{
[comment]
	/*
	NOTE: Due to virtual inheritance, base class copy constrcutors may not be called correctly
	*/
[/comment]
    m_[containmentProperty.name/] = [containmentProperty.name.toLowerFirst()/];
}
[/if] [/let] [/if] [/let] [/for]
[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())]
[className/]::[className/](std::weak_ptr<[compositeOwnerClass.generateCppType(true)/]> [compositeOwnerClass.name.toLowerFirst()/])
:[className/]()
{
    m_[compositeOwnerClass.name/] = [compositeOwnerClass.name.toLowerFirst()/];
}
[/for]

[className/]::~[className/]()
{
	DEBUG_INFO("Instance of '[aClass.name.toUpperFirst()/]' is destroyed.")
}

[className/]::[className/](const [className/] & obj):[className/]()
{
	*this = obj;
}

std::shared_ptr<ecore::EObject>  [className/]::copy() const
{
	std::shared_ptr<[className/]> element(new [className/]());
	*element=(*this);
	element->[generateGetThisPtrPropertySetterName()/](element);
	return element;
}

[className/]& [className/]::operator=(const [className/] & obj)
{
[if (aClass.superClass->isEmpty())]
	//call overloaded =Operator for each base class
	uml::[aClass.getGeneralSuperClassName()/]Impl::operator=(obj);
[else]
	//call overloaded =Operator for each base class
	[for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined()))]
	[sClass.getClassifierName(aClass, false, sClass.getNearestPackage().isIgnoreNamespace())/]Impl::operator=(obj);
	[/for]
[/if]
	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy [aClass.name.toUpperFirst()/] "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	instantiate();

	//copy attributes with no containment (soft copy)
[for (aProperty : Property | aClass.ownedAttribute->select(isBackReference() or not (isComposite() or isSubset()))->asOrderedSet()->sortedBy(name))]
	m_[aProperty.name/] = obj.[aProperty.getterName()/]();
[/for]

	//clone attributes with containment (deep copy)
[for (aProperty : Property | aClass.ownedAttribute->select((isComposite() or isSubset()) and not (isUnion() or isBackReference()))->asOrderedSet()->sortedBy(name))]
[if (aProperty.upper = 1)]
[if (not (aProperty.type.isPrimitive() or aProperty.type.oclIsKindOf(Enumeration)))]
	if (obj.[aProperty.getterName()/]() != nullptr)
	{
	[/if]	m_[aProperty.name/] = [if (not (aProperty.type.isPrimitive() or aProperty.type.oclIsKindOf(Enumeration)))]std::dynamic_pointer_cast<[aProperty.type.generateCppType(true)/]>([/if]obj.[aProperty.getterName()/]()[if (not (aProperty.type.isPrimitive() or aProperty.type.oclIsKindOf(Enumeration)))]->copy())[/if];
[if (not (aProperty.type.isPrimitive() or aProperty.type.oclIsKindOf(Enumeration)))]
	}
[/if]
[else]
	[aProperty.generateCppType()/] [aProperty.name/]List = obj.[aProperty.getterName()/]();
	Bag<[aProperty.type.generateCppType(true)/]>::iterator [aProperty.name/]Iter = [aProperty.name/]List->begin();
	Bag<[aProperty.type.generateCppType(true)/]>::iterator [aProperty.name/]End = [aProperty.name/]List->end();
	while ([aProperty.name/]Iter != [aProperty.name/]End) 
	{
[if (aProperty.type.isPrimitive())]
		std::shared_ptr<[aProperty.type.generateCppType(true)/]> temp(new [aProperty.type.generateCppType(true)/](*(*[aProperty.name/]Iter)));
[else]
		std::shared_ptr<[aProperty.type.generateCppType(true)/]> temp = std::dynamic_pointer_cast<[aProperty.type.generateCppType(true)/]>((*[aProperty.name/]Iter)->copy());
[/if]
		[aProperty.getterName()/]()->push_back(temp);
		[aProperty.name/]Iter++;
	}
[/if]
[/for]
[for (anAttribute : Property | aClass.ownedAttribute->select(isSubset()))]
	[anAttribute.generateSubsetUnionInit()/]
[/for]

	return *this;
}

[if (isSingleton())]
[aClass.name.toUpperFirst()/]* [className/]::create()
{
	return new [className/]();
}
[/if]

std::shared_ptr<uml::Class> [className/]::getMetaClass() const
{
	return [aPackage.name.concat('PackageImpl')/]::eInstance()->[aClass.generatePackageGetterCall(aClass)/];
}

void [className/]::instantiate()
{   [comment call instantiate of superclasses/]
	[for (aSuperClass : Class | aClass.superClass)]
	[aSuperClass.name.toUpperFirst()/]Impl::instantiate();
	[/for]
	[comment Init properties without default value/]
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())->select(p : Property | p.default->isEmpty()))]
	[aProperty.generateAttributeInstantiation()/]
	[/for]
	[comment Init properties with default value/]
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())->select(p : Property | (not p.defaultValue.oclIsUndefined())))]
	[if ((aProperty.defaultValue.oclIsTypeOf(InstanceValue)))]
	[if (aProperty.defaultValue.type.oclIsUndefined())]
    ['class '.concat(aClass.name).concat(': undefined type of InstanceValue for ').concat(aProperty.qualifiedName).registerError()/]
	[else][if (not aProperty.defaultValue.type.oclIsTypeOf(Enumeration))]
	[aProperty.generateAttributeDefaultInstantiation()/]
	[/if][/if][/if]
	[/for]
	[comment Init connector patterns/]
	[for (aConnector : Connector | aClass.ownedConnector->sortedBy(myQualifiedName()))]
	[if ((not(aConnector.type.oclIsUndefined())) and (not(aConnector.type.name.oclIsUndefined())))]
	[aConnector.generateConnectorInstantiation()/]
	[/if]
	[/for]
}

void [className/]::destroy()
{	[comment Destroy corresponding links if existing/]
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName()))]
	[comment  property must belong to an association AND this association must be binary AND property must be owned by a class (i.e. not owned by an association) AND be typed AND neither be of primitive nor enumeration type AND not be a back reference/]
	[if (not aProperty.association.oclIsUndefined() and aProperty.association.memberEnd->size() = 2 and aProperty.owner.oclIsTypeOf(Class) and (not aProperty.type.oclIsUndefined()) and (not (aProperty.type.isPrimitive() or aProperty.type.oclIsKindOf(Enumeration))) and (not aProperty.isBackReference()))]
	[for (anotherProperty : Property | aProperty.association.memberEnd->reject(p : Property | p = aProperty))]
	[comment anotherProperty must be owned by a class (i.e. not by its association) /]
	[if(anotherProperty.owner.oclIsTypeOf(Class))]
	//Destroying links for opposite property [aProperty.name/]
	[if (aProperty.upper <> 1)]
	for(unsigned int i = 0; i < this->[aProperty.getterName()/]()->size(); i++)
	{	
		this->[aProperty.getterName()/]()->at(i)->[anotherProperty.getterName()/]()[if (anotherProperty.upper <> 1)]->erase([aClass.generateGetThisPtrPropertyGetterName()/]())[else].reset()[/if];
	}
	[else]
	[if (anotherProperty.upper <> 1)]
	this->[aProperty.getterName()/]()->[anotherProperty.getterName()/]()->erase([aClass.generateGetThisPtrPropertyGetterName()/]());
	[else]
	if(this->[aProperty.getterName()/]()->[anotherProperty.getterName()/]()[if (anotherProperty.isBackReference())].lock()[/if] == [aClass.generateGetThisPtrPropertyGetterName()/]()) { this->[aProperty.getterName()/]()->[anotherProperty.getterName()/]().reset(); }
	[/if]
	[/if]
	[/if]
	[/for]
	[/if]
	[/for]

	[comment Recursively destroy properties/]
	//Erase properties
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName()))]
	[aProperty.generatePropertyDestruction()/]
	[/for]
	//Erase back reference to owner
	[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())]
	m_[compositeOwnerClass.name/].reset();
	[/for]
}

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp()/]
[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]
[for (interfaceR : InterfaceRealization | aClass.ownedElement->filter(InterfaceRealization)->sortedBy(myQualifiedName()))] [for (aAttribute : Property | interfaceR.supplier.oclAsType(Interface).ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')] [if (aClass.ownedAttribute->select(name=aAttribute.name)->size() = 0)]
[aAttribute.generateAttributeSetterImplementationCpp(aClass)/]
[aAttribute.generateAttributeGetterImplementationCpp(aClass)/]
[/if][/for][/for]
[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())]
[aClass.generateCompositeOwnerAttributeGetterImplementationCpp(compositeOwnerClass)/]
[aClass.generateCompositeOwnerAttributeSetterImplementationCpp(compositeOwnerClass)/]
[/for]

//*********************************
// Union Getter
//*********************************
[aClass.generateUnionGetterCpp()/]

//*********************************
// Operations
//*********************************
[for (aOperation : Operation | aClass.ownedOperation->sortedBy(myQualifiedName())) separator('\n') after('\n')]
[aOperation.generateOperationImplementation()/]
[/for]
[comment OpaqueBehaviors directly or indirectly owned by aClass that have no defined specification
(i.e. they do not define the method for any Operation) are treated as normal C++ methods/]
[for (anOpaqueBehavior : OpaqueBehavior | aClass.collectOpaqueBehaviorsContexedByClass()->sortedBy(name)) separator('\n') after('\n')]
[anOpaqueBehavior.generateOpaqueBehaviorImplementation()/]
[/for]
//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateeGetSetImpl()/]

//*********************************
// Operation Invoction
//*********************************
[aClass.generateInvokeImpl()/]

[aClass.generateGetThisPtrCPP()/]
[/file]
[/template]
