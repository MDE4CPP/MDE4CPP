[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of eSet/ eGet artefacts
 * 
 */]
[module setGetHelper('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::IDHelper /]

[**
 * checks if setter for a StructuralFeature should be generated
 * 
 * setter should not exist for:
 * - feature with upper bound > 1 (realized by list and getter)
 * - feature is read only
*/]
[query public hasSetter(aFeature : StructuralFeature) : Boolean = not (( not (aFeature.upper = 1) ) and (not aFeature.oclAsType(Property).isReadOnly)) /]

[**
 * generate get, set and unset function declaration
*/]
[template public generateeGetSetDel(aClass : Class,impl : Boolean)]
//Get
virtual Any get(const std::shared_ptr<uml::Property>& _property) const [abstractSuffix(impl)/];
virtual Any get(std::string _qualifiedName) const [abstractSuffix(impl)/];
virtual Any get(unsigned long _uID) const [abstractSuffix(impl)/];
//Set
virtual void set(const std::shared_ptr<uml::Property>& _property, const Any& value) [abstractSuffix(impl)/];
virtual void set(std::string _qualifiedName, const Any& value) [abstractSuffix(impl)/];
virtual void set(unsigned long _uID, const Any& value) [abstractSuffix(impl)/];
//Unset
virtual void unset(const std::shared_ptr<uml::Property>& _property) [abstractSuffix(impl)/];
virtual void unset(std::string _qualifiedName) [abstractSuffix(impl)/];
virtual void unset(unsigned long _uID) [abstractSuffix(impl)/];
[/template]

[**
 * generate get, set and unset function declaration
*/]
[template public generateInvoke(aClass : Class,impl : Boolean)]
//Invoke
virtual Any invoke(const std::shared_ptr<uml::Operation>& _operation, const std::shared_ptr<Bag<Any>>& _arguments) [abstractSuffix(impl)/];
virtual Any invoke(std::string _qualifiedName, const std::shared_ptr<Bag<Any>>& _arguments) [abstractSuffix(impl)/];
virtual Any invoke(unsigned long _uID, const std::shared_ptr<Bag<Any>>& _arguments) [abstractSuffix(impl)/];
[/template]

[**
 * generate maps for storing pairs of property IDs and function (get, set and unset)
 * as well as operation id and function to invoke the operation
*/]
[template public generateGetSetMemeberInit(aClass : Class)]
std::map<unsigned long,std::function<Any()>> m_getterMap;
std::map<unsigned long,std::function<void(Any)>> m_setterMap;
std::map<unsigned long,std::function<void()>> m_unsetterMap;
std::map<unsigned long,std::function<Any(std::shared_ptr<Bag<Any>>)>> m_invocationMap;
[/template]

[query private getSetGetProperties(aClass : Class) : OrderedSet(Property) = aClass.attribute->addAll(aClass.interfaceRealization.contract.attribute)->sortedBy(myQualifiedName())/]

[**
 * generate the creation of {property name, function} pairs and their insertion into the corresponding map
*/]
[template public generateGetSetInvokeInit(aClass : Class)]
[let propList : OrderedSet(Property) = aClass.getSetGetProperties()]
[for (prop : Property | propList) before('//getter init\n') after('\n')]
[let anyBagRequired : Boolean = ((prop.upper <> 1) and not(prop.type.oclIsKindOf(PrimitiveType) or prop.type.oclIsKindOf(Enumeration)))]
	//Property [prop.name/]
	m_getterMap.insert(std::pair<unsigned long,std::function<Any()>>([prop.generateNamespaceName(true).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](){ return [if(anyBagRequired)]eAnyBag[else]eAny[/if](this->[prop.getterName()/](), [prop.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/][if(not anyBagRequired)], [if(prop.upper = 1)]false[else]true[/if][/if]);}));
[/let]
[/for]
[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())]
	//Property [compositeOwnerClass.name.toLowerFirst()/]
	m_getterMap.insert(std::pair<unsigned long,std::function<Any()>>([aClass.generateNamespaceName(true).concat('::').concat(compositeOwnerClass.name.toLowerFirst()).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](){ return eAny(this->get[compositeOwnerClass.name.toUpperFirst()/](), [compositeOwnerClass.generateStaticClassifierIDAccess()/], false);}));
[/for]

[for (prop : Property | propList->select(hasSetter())) before('//setter init\n') after('\n')]
//Property [prop.name/]
[if (prop.type.oclIsKindOf(Enumeration))]
	m_setterMap.insert(std::pair<unsigned long,std::function<void(Any)>>([prop.generateNamespaceName(true).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](Any object){this->[prop.setterName()/](object->get<std::shared_ptr<uml::EnumerationLiteral>>());}));
[else]
	m_setterMap.insert(std::pair<unsigned long,std::function<void(Any)>>([prop.generateNamespaceName(true).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](Any object){this->[prop.setterName()/](object->get<[if (prop.upper<>1)]std::shared_ptr<Bag[/if][prop.type.generateCppType(false)/][if (prop.upper<>1)]>[/if]>());}));
[/if]
[/for]
[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())]
	//Property [compositeOwnerClass.name.toLowerFirst()/]
	m_setterMap.insert(std::pair<unsigned long,std::function<void(Any)>>([aClass.generateNamespaceName(true).concat('::').concat(compositeOwnerClass.name.toLowerFirst()).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](Any object){this->set[compositeOwnerClass.name.toUpperFirst()/](object->get<std::shared_ptr<[compositeOwnerClass.generateCppType(true)/]>>());}));
[/for]

[for (prop : Property | propList->select(not(type.oclIsKindOf(PrimitiveType) or type.oclIsKindOf(Enumeration)))) before('//unsetter init\n') after('\n')]
	//Property [prop.name/]
[if (prop.upper=1)]
	m_unsetterMap.insert(std::pair<unsigned long,std::function<void()>>([prop.generateNamespaceName(true).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](){m_[prop.name/] = std::shared_ptr<[prop.type.transformType()/]>(nullptr);}));
[else]
	m_unsetterMap.insert(std::pair<unsigned long,std::function<void()>>([prop.generateNamespaceName(true).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](){m_[prop.name/]->clear();}));
[/if]
[/for]
[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())]
	//Property [compositeOwnerClass.name.toLowerFirst()/]
	m_unsetterMap.insert(std::pair<unsigned long,std::function<void()>>([aClass.generateNamespaceName(true).concat('::').concat(compositeOwnerClass.name.toLowerFirst()).generatePolynomialRollingHash()/],[ '[' /]this[ ']' /](){m_[compositeOwnerClass.name/] = std::shared_ptr<[compositeOwnerClass.generateCppType(true)/]>(nullptr);}));
[/for]
[/let]

[for (anOperation : Operation | aClass.ownedOperation) before('//invocation init\n')]
	//Operation [anOperation.name/]
	m_invocationMap.insert(std::pair<unsigned long, std::function<Any(std::shared_ptr<Bag<Any>>)>>([anOperation.generateQualifiedNameWithSignature().generatePolynomialRollingHash()/], [ '[' /]this[ ']' /](std::shared_ptr<Bag<Any>> arguments) {
	[let inputParameterList : OrderedSet(Parameter) = anOperation.ownedParameter->select(not (direction = ParameterDirectionKind::return))]
	[for (anInputParameter : Parameter | inputParameterList) after('\n')]
		//Retrieve input parameter '[anInputParameter.name/]'
		Any any[anInputParameter.name.toUpperFirst()/] = *(arguments->at([inputParameterList->indexOf(anInputParameter)-1/]).get());
		[anInputParameter.generateCppType(false)/] [anInputParameter.name/] = any[anInputParameter.name.toUpperFirst()/]->get<[anInputParameter.generateCppType(false)/]>();
	[/for]
	[/let]
	[let returnParameterList : OrderedSet(Parameter) = anOperation.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::return))]
	[if(not returnParameterList->isEmpty() and not returnParameterList->first().oclIsInvalid())]
	[let returnParameter : Parameter = returnParameterList->first()]
	[let anyBagRequired : Boolean = ((returnParameter.upper <> 1) and not(returnParameter.type.oclIsKindOf(PrimitiveType) or returnParameter.type.oclIsKindOf(Enumeration)))]
		[returnParameter.generateCppType(false)/] [returnParameter.name/] = this->[anOperation.name/]([for (inputParameter : Parameter | anOperation.ownedParameter->select(direction = ParameterDirectionKind::_in or direction = ParameterDirectionKind::inout)) separator (', ')][inputParameter.name/][/for]);
		return [if(anyBagRequired)]eAnyBag[else]eAny[/if]([returnParameter.name/], [returnParameter.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/][if(not anyBagRequired)], [if(returnParameter.upper = 1)]false[else]true[/if][/if]);
	[/let]
	[/let]
	[else]
		this->[anOperation.name/]([for (inputParameter : Parameter | anOperation.ownedParameter->select(not (direction = ParameterDirectionKind::return))) separator (', ')][inputParameter.name/][/for]);
		return eAny(nullptr, -1, false);
	[/if]
	[/let]
	}));
[/for]
[/template]

[**
 * generate special set function declaration for properties with enumeration type
*/]
[template public generateESetFunctionForEnumerationDecl(aProperty : Property)]
virtual void [aProperty.setterName()/](const std::shared_ptr<uml::EnumerationLiteral>& literal); 
[/template]

[**
 * generate special set function implementation for properties with enumeration type
*/]
[template public generateESetFunctionForEnumerationImpl(aProperty : Property, aClass : Class)]
void [aClass.name.toUpperFirst()/]Impl::[aProperty.setterName()/](const std::shared_ptr<uml::EnumerationLiteral>& literal)
{
[for (literal : EnumerationLiteral | aProperty.type.oclAsType(Enumeration).ownedLiteral)]		
	if (literal == [literal.generatePackageGetterCall()/])
	{	
		[aProperty.setterName()/]([if (not (literal.getNearestPackage() = aClass.getNearestPackage()))][literal.getNearestPackage().name/]::[/if][literal.enumeration.name/]::[literal.name.toUpper()/]);
		return;
	}
[/for]
}
[/template]

[**
 * generate get, set and unset function implementation
*/]
[template public generateeGetSetImpl(aClass : Class)]
//Get
[aClass.generateGetImplementation()/]

//Set
[aClass.generateSetImplementation()/]

//Unset
[aClass.generateUnSetImplementation()/]
[/template]

[template private generateGetImplementation(aClass : Class)]
Any [aClass.name.toUpperFirst().concat('Impl')/]::get(const std::shared_ptr<uml::Property>& _property) const
{
	std::string qualifiedName = _property->getQualifiedName();
    return this->get(qualifiedName);
}

Any [aClass.name.toUpperFirst().concat('Impl')/]::get(std::string _qualifiedName) const
{
	unsigned long uID = util::Util::polynomialRollingHash(_qualifiedName);
    return this->get(uID);
}

Any [aClass.name.toUpperFirst().concat('Impl')/]::get(unsigned long _uID) const
{
	std::map<unsigned long, std::function<Any()>>::const_iterator iter = m_getterMap.find(_uID);
    if(iter != m_getterMap.cend())
    {
        //invoke the getter function
        return iter->second();
    }

	[let classList : OrderedSet(Class) = aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined())->sortedBy(name)]
	[if (classList->size() > 0)]
	Any result;
	[for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined()))]
	result = [sClass.generateNamespaceName(true)/]Impl::get(_uID);
	if (result != nullptr)
	{
		return result;
	}
	[/for]
	return result;
	[else]
	return eAny(nullptr, -1, false);
	[/if]
	[/let]
}
[/template]

[template private generateSetImplementation(aClass : Class)]
void [aClass.name.toUpperFirst().concat('Impl')/]::set(const std::shared_ptr<uml::Property>& _property, const Any& value)
{
	std::string qualifiedName = _property->getQualifiedName();
    this->set(qualifiedName, value);
}

void [aClass.name.toUpperFirst().concat('Impl')/]::set(std::string _qualifiedName, const Any& value)
{
	unsigned long uID = util::Util::polynomialRollingHash(_qualifiedName);
    this->set(uID, value);
}

void [aClass.name.toUpperFirst().concat('Impl')/]::set(unsigned long _uID, const Any& value)
{
	std::map<unsigned long, std::function<void(Any)>>::const_iterator iter = m_setterMap.find(_uID);
    if(iter != m_setterMap.cend())
    {
        //invoke the setter function
        iter->second(value);
    }
	[for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined()))]
	[sClass.generateNamespaceName(true)/]Impl::set(_uID, value);
	[/for]
}
[/template]

[template private generateUnSetImplementation(aClass : Class)]
void [aClass.name.toUpperFirst().concat('Impl')/]::unset(const std::shared_ptr<uml::Property>& _property)
{
	std::string qualifiedName = _property->getQualifiedName();
    this->unset(qualifiedName);
}

void [aClass.name.toUpperFirst().concat('Impl')/]::unset(std::string _qualifiedName)
{
	unsigned long uID = util::Util::polynomialRollingHash(_qualifiedName);
    this->unset(uID);
}

void [aClass.name.toUpperFirst().concat('Impl')/]::unset(unsigned long _uID)
{
	std::map<unsigned long, std::function<void()>>::const_iterator iter = m_unsetterMap.find(_uID);
    if(iter != m_unsetterMap.cend()) //TODO optimize loop
    {
        //invoke the unsetter function
        iter->second();
    }
	[for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined()))]
	[sClass.generateNamespaceName(true)/]Impl::unset(_uID);
	[/for]
}
[/template]

[**
 * generate invoke function implementation
*/]
[template public generateInvokeImpl(aClass : Class)]
//Invoke
[aClass.generateInvokeImplementation()/]
[/template]

[template private generateInvokeImplementation(aClass : Class)]
Any [aClass.name.toUpperFirst().concat('Impl')/]::invoke(const std::shared_ptr<uml::Operation>& _operation, const std::shared_ptr<Bag<Any>>& _arguments)
{
	std::string qualifiedName = _operation->getQualifiedName();

	int ownedParameterSize = _operation->getOwnedParameter()->size();
	for(int i = 0; i < ownedParameterSize; i++)
	{
		qualifiedName += "_" + _operation->getOwnedParameter()->at(i)->getType()->getName();
	}

    return this->invoke(qualifiedName, _arguments);
}

Any [aClass.name.toUpperFirst().concat('Impl')/]::invoke(std::string _qualifiedName, const std::shared_ptr<Bag<Any>>& _arguments)
{
	unsigned long uID = util::Util::polynomialRollingHash(_qualifiedName);
    return this->invoke(uID, _arguments);
}

Any [aClass.name.toUpperFirst().concat('Impl')/]::invoke(unsigned long _uID, const std::shared_ptr<Bag<Any>>& _arguments)
{
	std::map<unsigned long, std::function<Any(std::shared_ptr<Bag<Any>>)>>::const_iterator iter = m_invocationMap.find(_uID);
    if(iter != m_invocationMap.cend()) //TODO optimize loop
    {
        //invoke the operation
        return iter->second(_arguments);
    }
	
	[let classList : OrderedSet(Class) = aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined())->sortedBy(name)]
	[if (classList->size() > 0)]
	Any result;
	[for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined()))]
	result = [sClass.generateNamespaceName(true)/]Impl::invoke(_uID, _arguments);
	if (result != nullptr)
	{
		return result;
	}
	[/for]
	return result;
	[else]
	return eAny(nullptr, -1, false);
	[/if]
	[/let]
}
[/template]