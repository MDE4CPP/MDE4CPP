//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INTERACTIONUSE_HPP
#define UML_INTERACTIONUSE_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class Gate;
	class GeneralOrdering;
	class Interaction;
	class InteractionOperand;
	class Lifeline;
	class Namespace;
	class Property;
	class StringExpression;
	class ValueSpecification;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/InteractionFragment.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	An InteractionUse refers to an Interaction. The InteractionUse is a shorthand for copying the contents of the referenced Interaction where the InteractionUse is. To be accurate the copying must take into account substituting parameters with arguments and connect the formal Gates with the actual ones.
	<p>From package UML::Interactions.</p>
	*/
	
	class UML_API InteractionUse : virtual public InteractionFragment
	{
		public:
 			InteractionUse(const InteractionUse &) {}

		protected:
			InteractionUse(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~InteractionUse() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The actual gates of the InteractionUse.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Gate, uml::Element>> getActualGate() const = 0;
			/*!
			The actual arguments of the Interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::ValueSpecification, uml::Element>> getArgument() const = 0;
			/*!
			Refers to the Interaction that defines its meaning.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<uml::Interaction> getRefersTo() const = 0;
			/*!
			Refers to the Interaction that defines its meaning.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setRefersTo(std::shared_ptr<uml::Interaction>) = 0;
			/*!
			The value of the executed Interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<uml::ValueSpecification> getReturnValue() const = 0;
			/*!
			The value of the executed Interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setReturnValue(std::shared_ptr<uml::ValueSpecification>) = 0;
			/*!
			The recipient of the return value.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<uml::Property> getReturnValueRecipient() const = 0;
			/*!
			The recipient of the return value.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setReturnValueRecipient(std::shared_ptr<uml::Property>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The actual gates of the InteractionUse.
			<p>From package UML::Interactions.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Gate, uml::Element>> m_actualGate;
			/*!
			The actual arguments of the Interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::ValueSpecification, uml::Element>> m_argument;
			/*!
			Refers to the Interaction that defines its meaning.
			<p>From package UML::Interactions.</p>
			*/
			
			std::shared_ptr<uml::Interaction> m_refersTo;
			/*!
			The value of the executed Interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			std::shared_ptr<uml::ValueSpecification> m_returnValue;
			/*!
			The recipient of the return value.
			<p>From package UML::Interactions.</p>
			*/
			
			std::shared_ptr<uml::Property> m_returnValueRecipient;
	};
}
#endif /* end of include guard: UML_INTERACTIONUSE_HPP */
