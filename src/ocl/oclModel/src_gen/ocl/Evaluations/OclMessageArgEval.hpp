//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EVALUATIONS_OCLMESSAGEARGEVAL_HPP
#define OCL_EVALUATIONS_OCLMESSAGEARGEVAL_HPP


#include <memory>
#include <string>
// forward declarations


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ocl
{
	class oclFactory;
}

//Forward Declaration for used types 
namespace ocl::Evaluations 
{
	class OclExpEval;
	class UnspecifiedValueExpEval;
}
namespace fUML::Semantics::Loci 
{
	class Locus;
}
namespace uml 
{
	class ValueSpecification;
}

// namespace macro header include
#include "ocl/ocl.hpp"

// base class includes
#include "fUML/Semantics/Values/Evaluation.hpp"

// enum includes



//*********************************
namespace ocl::Evaluations 
{
	
	class OCL_API OclMessageArgEval: virtual public fUML::Semantics::Values::Evaluation
	{
		public:
 			OclMessageArgEval(const OclMessageArgEval &) {}

		protected:
			OclMessageArgEval(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~OclMessageArgEval() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter & Setter
			//*********************************
			
			//*********************************
			// References Getter & Setter
			//*********************************
			
			virtual std::shared_ptr<ocl::Evaluations::OclExpEval> getExpression() const = 0;
			
			virtual void setExpression(std::shared_ptr<ocl::Evaluations::OclExpEval>) = 0;
			
			virtual std::shared_ptr<ocl::Evaluations::UnspecifiedValueExpEval> getUnspecified() const = 0;
			
			virtual void setUnspecified(std::shared_ptr<ocl::Evaluations::UnspecifiedValueExpEval>) = 0;
			
			virtual std::shared_ptr<ocl::Evaluations::OclExpEval> getVariable() const = 0;
			
			virtual void setVariable(std::shared_ptr<ocl::Evaluations::OclExpEval>) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			
			std::shared_ptr<ocl::Evaluations::OclExpEval> m_expression;
			std::shared_ptr<ocl::Evaluations::UnspecifiedValueExpEval> m_unspecified;
			std::shared_ptr<ocl::Evaluations::OclExpEval> m_variable;

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: OCL_EVALUATIONS_OCLMESSAGEARGEVAL_HPP */
