//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_ACTIVITIES_DECISIONNODEACTIVATION_HPP
#define FUML_SEMANTICS_ACTIVITIES_DECISIONNODEACTIVATION_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 

class Any;

//*********************************
// generated Includes

//Forward Declaration for used types 
namespace fUML::Semantics::Activities 
{
	class ActivityEdgeInstance;
	class ActivityNodeActivationGroup;
	class Token;
}
namespace fUML::Semantics::CommonBehavior 
{
	class Execution;
}
namespace uml 
{
	class ActivityNode;
	class DecisionNode;
	class ValueSpecification;
}

// namespace macro header include
#include "fUML/fUML.hpp"

// base class includes
#include "fUML/Semantics/Activities/ControlNodeActivation.hpp"




//*********************************
namespace fUML::Semantics::Activities 
{
	
	class FUML_API DecisionNodeActivation : virtual public ControlNodeActivation
	{
		public:
 			DecisionNodeActivation(const DecisionNodeActivation &) {}

		protected:
			DecisionNodeActivation(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~DecisionNodeActivation() {}

			//*********************************
			// Operations
			//*********************************
			virtual std::shared_ptr<Any> executeDecisionInputBehavior(std::shared_ptr<Any> inputValue, std::shared_ptr<Any> decisionInputValue) = 0;
			virtual void fire(std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> incomingTokens) = 0;
			virtual std::shared_ptr<fUML::Semantics::Activities::ActivityEdgeInstance> getDecisionInputFlowInstance() = 0;
			virtual std::shared_ptr<Any> getDecisionInputFlowValue() = 0;
			virtual std::shared_ptr<Bag<Any>> getDecisionValues(std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> incomingTokens) = 0;
			virtual bool hasObjectFlowInput() = 0;
			virtual bool isReady() = 0;
			virtual std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> removeJoinedControlTokens(std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> incomingTokens) = 0;
			virtual std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> takeOfferedTokens() = 0;
			
			virtual bool test(std::shared_ptr<uml::ValueSpecification> guard, std::shared_ptr<Any> value) = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			
			virtual std::shared_ptr<uml::DecisionNode> getDecisionNode() const = 0;
			virtual void setDecisionNode(std::shared_ptr<uml::DecisionNode>) = 0;
			/*Additional Setter for 'ActivityNodeActivation::node' redefined by reference 'decisionNode'*/
			virtual void setNode(std::shared_ptr<uml::ActivityNode>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			
			std::shared_ptr<uml::DecisionNode> m_decisionNode;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_ACTIVITIES_DECISIONNODEACTIVATION_HPP */
