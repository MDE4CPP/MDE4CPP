//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PROFILEPROFILEIMPL_HPP
#define UML_PROFILEPROFILEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Profile.hpp"

#include "uml/impl/PackageImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ProfileImpl : virtual public PackageImpl, virtual public Profile 
	{
		public: 
			ProfileImpl(const ProfileImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ProfileImpl& operator=(ProfileImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ProfileImpl();
			virtual std::shared_ptr<uml::Profile> getThisProfilePtr() const;
			virtual void setThisProfilePtr(std::weak_ptr<uml::Profile> thisProfilePtr);

			//Additional constructors for the containments back reference
			ProfileImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ProfileImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id);
			//Additional constructors for the containments back reference
			ProfileImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			//Additional constructors for the containments back reference
			ProfileImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);

		public:
			//destructor
			virtual ~ProfileImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			Creates and returns an instance of (the Ecore representation of) the specified classifier defined in this profile.
			*/
			 
			virtual std::shared_ptr<ecore::EObject> create(const std::shared_ptr<uml::Classifier>& classifier) ;
			/*!
			Defines this profile by (re)creating Ecore representations of its current contents.
			*/
			 
			virtual std::shared_ptr<ecore::EPackage> define() ;
			/*!
			Defines this profile by (re)creating Ecore representations of its current contents, using the specified options, diagnostics, and context.
			*/
			 
			virtual std::shared_ptr<ecore::EPackage> define(std::shared_ptr<std::unordered_map < std::string, std::string>> options, const std::shared_ptr<Any>& diagnostics, std::shared_ptr<std::unordered_map < Any, Any>> context) ;
			/*!
			Retrieves the current definition (Ecore representation) of this profile.
			*/
			 
			virtual std::shared_ptr<ecore::EPackage> getDefinition() ;
			/*!
			Retrieves the current definition (Ecore representation) of the specified named element in this profile.
			*/
			 
			virtual std::shared_ptr<ecore::ENamedElement> getDefinition(const std::shared_ptr<uml::NamedElement>& namedElement) ;
			/*!
			Retrieves the extensions owned by this profile, excluding non-required extensions if indicated.
			*/
			 
			virtual std::shared_ptr<Bag<uml::Extension>> getOwnedExtensions(bool requiredOnly) ;
			/*!
			Retrieves the metaclasses referenced by this profile.
			*/
			 
			virtual std::shared_ptr<Bag<uml::Class>> getReferencedMetaclasses() ;
			/*!
			Retrieves the metamodels referenced by this profile.
			*/
			 
			virtual std::shared_ptr<Bag<uml::Model>> getReferencedMetamodels() ;
			/*!
			Determines whether this profile is defined.
			*/
			 
			virtual bool isDefined() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References a metaclass that may be extended.
			<p>From package UML::Packages.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::ElementImport, uml::ElementImport /*Subset does not reference a union*/>>& getMetaclassReference() const ;
			/*!
			References a package containing (directly or indirectly) metaclasses that may be extended.
			<p>From package UML::Packages.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::PackageImport, uml::PackageImport /*Subset does not reference a union*/>>& getMetamodelReference() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::Profile> m_thisProfilePtr;
	};
}
#endif /* end of include guard: UML_PROFILEPROFILEIMPL_HPP */
