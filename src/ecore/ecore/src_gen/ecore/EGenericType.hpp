//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EGENERICTYPE_HPP
#define ECORE_EGENERICTYPE_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T> class Bag;


class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ecore
{
	class EcoreFactory;
}

//Forward Declaration for used types
namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class ETypeParameter;
}

// base class includes

// enum includes

#include "ecore/EObject.hpp"

//*********************************
namespace ecore 
{
	/*!
	 */
	class EGenericType : virtual public ecore::EObject 

	{
		public:
 			EGenericType(const EGenericType &) {}
			EGenericType& operator=(EGenericType const&) = delete;

		protected:
			EGenericType(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~EGenericType() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool isInstance(Any object) const = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<ecore::EClassifier > getEClassifier() const = 0;
			
			/*!
			 */
			virtual void setEClassifier(std::shared_ptr<ecore::EClassifier> _eClassifier_eClassifier) = 0;
			/*!
			 */
			virtual std::shared_ptr<ecore::EGenericType > getELowerBound() const = 0;
			
			/*!
			 */
			virtual void setELowerBound(std::shared_ptr<ecore::EGenericType> _eLowerBound_eLowerBound) = 0;
			/*!
			 */
			virtual std::shared_ptr<ecore::EClassifier > getERawType() const = 0;
			
			/*!
			 */
			virtual void setERawType(std::shared_ptr<ecore::EClassifier> _eRawType_eRawType) = 0;
			/*!
			 */
			virtual std::shared_ptr<Bag<ecore::EGenericType>> getETypeArguments() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr<ecore::ETypeParameter > getETypeParameter() const = 0;
			
			/*!
			 */
			virtual void setETypeParameter(std::shared_ptr<ecore::ETypeParameter> _eTypeParameter_eTypeParameter) = 0;
			/*!
			 */
			virtual std::shared_ptr<ecore::EGenericType > getEUpperBound() const = 0;
			
			/*!
			 */
			virtual void setEUpperBound(std::shared_ptr<ecore::EGenericType> _eUpperBound_eUpperBound) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr<ecore::EClassifier > m_eClassifier;
			/*!
			 */
			std::shared_ptr<ecore::EGenericType > m_eLowerBound;
			/*!
			 */
			std::shared_ptr<ecore::EClassifier > m_eRawType;
			/*!
			 */
			std::shared_ptr<Bag<ecore::EGenericType>> m_eTypeArguments;
			/*!
			 */
			std::shared_ptr<ecore::ETypeParameter > m_eTypeParameter;
			/*!
			 */
			std::shared_ptr<ecore::EGenericType > m_eUpperBound;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: ECORE_EGENERICTYPE_HPP */
