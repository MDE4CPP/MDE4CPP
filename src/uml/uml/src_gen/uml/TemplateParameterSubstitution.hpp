//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TEMPLATEPARAMETERSUBSTITUTION_HPP
#define UML_TEMPLATEPARAMETERSUBSTITUTION_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class ParameterableElement;
	class TemplateBinding;
	class TemplateParameter;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Element.hpp"




//*********************************
namespace uml 
{
	/*!
	A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding.
	<p>From package UML::CommonStructure.</p>
	*/
	
	class UML_API TemplateParameterSubstitution : virtual public Element
	{
		public:
 			TemplateParameterSubstitution(const TemplateParameterSubstitution &) {}

		protected:
			TemplateParameterSubstitution(){}
			//Additional constructors for the containments back reference
			TemplateParameterSubstitution(std::weak_ptr<uml::Element> par_owner);

			//Additional constructors for the containments back reference
			TemplateParameterSubstitution(std::weak_ptr<uml::TemplateBinding> par_templateBinding);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~TemplateParameterSubstitution() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<uml::ParameterableElement> getActual() const = 0;
			/*!
			The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual void setActual(std::shared_ptr<uml::ParameterableElement>) = 0;
			/*!
			The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<uml::TemplateParameter> getFormal() const = 0;
			/*!
			The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual void setFormal(std::shared_ptr<uml::TemplateParameter>) = 0;
			/*!
			The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<uml::ParameterableElement> getOwnedActual() const = 0;
			/*!
			The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual void setOwnedActual(std::shared_ptr<uml::ParameterableElement>) = 0;
			/*!
			The TemplateBinding that owns this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::weak_ptr<uml::TemplateBinding> getTemplateBinding() const = 0;
			/*!
			The TemplateBinding that owns this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual void setTemplateBinding(std::weak_ptr<uml::TemplateBinding>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			std::shared_ptr<uml::ParameterableElement> m_actual;
			/*!
			The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			std::shared_ptr<uml::TemplateParameter> m_formal;
			/*!
			The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
			<p>From package UML::CommonStructure.</p>
			*/
			
			std::shared_ptr<uml::ParameterableElement> m_ownedActual;
			/*!
			The TemplateBinding that owns this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p>
			*/
			
			std::weak_ptr<uml::TemplateBinding> m_templateBinding;
	};
}
#endif /* end of include guard: UML_TEMPLATEPARAMETERSUBSTITUTION_HPP */
