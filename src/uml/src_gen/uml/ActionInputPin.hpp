//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ACTIONINPUTPIN_HPP
#define UML_ACTIONINPUTPIN_HPP

#include <map>
#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T, class ... U> class Subset;


class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types
namespace uml 
{
	class Action;
}

namespace uml 
{
	class Activity;
}

namespace uml 
{
	class ActivityEdge;
}

namespace uml 
{
	class ActivityGroup;
}

namespace uml 
{
	class ActivityNode;
}

namespace uml 
{
	class ActivityPartition;
}

namespace uml 
{
	class AddStructuralFeatureValueAction;
}

namespace uml 
{
	class Behavior;
}

namespace uml 
{
	class CallOperationAction;
}

namespace uml 
{
	class Classifier;
}

namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace uml 
{
	class DestroyObjectAction;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class InputPin;
}

namespace uml 
{
	class InterruptibleActivityRegion;
}

namespace uml 
{
	class InvocationAction;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class RedefinableElement;
}

namespace uml 
{
	class RemoveStructuralFeatureValueAction;
}

namespace uml 
{
	class State;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class StructuralFeatureAction;
}

namespace uml 
{
	class StructuredActivityNode;
}

namespace uml 
{
	class Type;
}

namespace uml 
{
	class ValueSpecification;
}

namespace uml 
{
	class WriteStructuralFeatureAction;
}

// base class includes
#include "uml/InputPin.hpp"

// enum includes
#include "uml/ObjectNodeOrderingKind.hpp"

#include "uml/VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	An ActionInputPin is a kind of InputPin that executes an Action to determine the values to input to another Action.
	<p>From package UML::Actions.</p>
	*/
	
	class ActionInputPin:virtual public InputPin
	{
		public:
 			ActionInputPin(const ActionInputPin &) {}
			ActionInputPin& operator=(ActionInputPin const&) = delete;

		protected:
			ActionInputPin(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~ActionInputPin() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			The fromAction of an ActionInputPin must only have ActionInputPins as InputPins.
			fromAction.input->forAll(oclIsKindOf(ActionInputPin))
			*/
			 
			virtual bool input_pin(Any diagnostics,std::map <   Any, Any >  context) = 0;
			
			/*!
			The fromAction of an ActionInputPin cannot have ActivityEdges coming into or out of it or its Pins.
			fromAction.incoming->union(outgoing)->isEmpty() and
			fromAction.input.incoming->isEmpty() and
			fromAction.output.outgoing->isEmpty()
			*/
			 
			virtual bool no_control_or_object_flow(Any diagnostics,std::map <   Any, Any >  context) = 0;
			
			/*!
			The fromAction of an ActionInputPin must have exactly one OutputPin.
			fromAction.output->size() = 1
			*/
			 
			virtual bool one_output_pin(Any diagnostics,std::map <   Any, Any >  context) = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			The Action used to provide the values of the ActionInputPin.
			<p>From package UML::Actions.</p>
			*/
			
			virtual std::shared_ptr<uml::Action > getFromAction() const = 0;
			
			/*!
			The Action used to provide the values of the ActionInputPin.
			<p>From package UML::Actions.</p>
			*/
			
			virtual void setFromAction(std::shared_ptr<uml::Action> _fromAction) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The Action used to provide the values of the ActionInputPin.
			<p>From package UML::Actions.</p>
			*/
			
			std::shared_ptr<uml::Action > m_fromAction;

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::ActivityGroup>> getInGroup() const = 0;/*!
			The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::Element>> getOwnedElement() const = 0;/*!
			The Element that owns this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::weak_ptr<uml::Element > getOwner() const = 0;/*!
			The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::RedefinableElement>> getRedefinedElement() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: UML_ACTIONINPUTPIN_HPP */
