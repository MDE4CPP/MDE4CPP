<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="BookStore_ecore" nsURI="http://www.example.org/BookStore_ecore"
    nsPrefix="BookStore_ecore">
  <eAnnotations source="http://tu-ilmenau.de/see/prepareApplication">
    <details key="includes" value="#include &lt;string>&#xA;#include &lt;oclParser/Utilities/Ocl.h>&#xA;&#xA;#include &lt;ecore/EFactory.hpp>&#xA;#include &lt;ecore/EPackage.hpp>&#xA;#include &lt;ecore/EClassifier.hpp>&#xA;#include &lt;ecore/EEnum.hpp>&#xA;#include &lt;ecore/EClass.hpp>&#xA;#include &lt;ecore/EReference.hpp>&#xA;#include &lt;ecore/EOperation.hpp>&#xA;#include &lt;ecore/EAttribute.hpp>&#xA;#include &lt;ecore/EParameter.hpp>&#xA;#include &lt;ecore/EEnumLiteral.hpp>&#xA;#include &lt;ecore/ETypeParameter.hpp>"/>
    <details key="body" value="query1();&#xA;query2();&#xA;query3();&#xA;query4();&#xA;query5();&#xA;&#xA;ecore_any_query1();&#xA;ecore_any_query2();&#xA;ecore_any_query3();&#xA;ecore_any_query4();&#xA;ecore_any_query5();&#xA;ecore_any_query6();&#xA;ecore_any_query7();&#xA;ecore_any_query8();&#xA;&#xA;validate1();&#xA;validate2();&#xA;validate3();&#xA;validate4();&#xA;validate5();&#xA;validate6();&#xA;validate7();&#xA;validate8();&#xA;validate9();&#xA;validate10();&#xA;validate11();&#xA;&#xA;pause();"/>
    <details key="library" value="OclParser"/>
    <details key="additionalFunctions" value="/*&#xA;These functions are currently stored in the &quot;protected&quot; section of the generated main. &#xA;This is a backup in case the original main.cpp should be deleted.&#xA;*/&#xA;&#xA;/*&#xA;Helper functions&#xA;*/&#xA;void validate(std::shared_ptr&lt;ecore::EObject> context,const std::string&amp; query) {&#xA;    try {&#xA;        Utilities::Ocl ocl;&#xA;        ocl.validate(query, context);&#xA;        if(ocl.getErrors().size() > 0) {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        } else {&#xA;            std::cout &lt;&lt; ocl.getResult() &lt;&lt; std::endl;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;void query( std::shared_ptr&lt;ecore::EObject> context, const std::string&amp; query) {&#xA;    try {&#xA;        Utilities::Ocl ocl;&#xA;        if(ocl.query(query, context)) {&#xA;            std::cout &lt;&lt; ocl.getResult() &lt;&lt; std::endl;&#xA;        } else {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;Any queryValue(std::shared_ptr&lt;ecore::EObject> context, const std::string&amp; query) {&#xA;    try {&#xA;        Utilities::Ocl ocl;&#xA;        if(ocl.query(query, context)) {&#xA;            return ocl.getResultValue();&#xA;        } else {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;    return nullptr;&#xA;}&#xA;&#xA;void printEAttribute(std::shared_ptr&lt;ecore::EAttribute> eattr) {&#xA;    if(eattr != nullptr) {&#xA;        if(eattr->getUpperBound() > 1 || eattr->getUpperBound() &lt; 0)&#xA;            std::cout &lt;&lt; &quot;&lt;EAttribute> &quot; + eattr->getName() + &quot; : &quot; + eattr->getEType()->getName()+ &quot; [&quot; +  std::to_string(eattr->getLowerBound()) + &quot;..*]&quot; &lt;&lt; std::endl;&#xA;        else&#xA;            std::cout &lt;&lt; &quot;&lt;EAttribute> &quot; + eattr->getName() + &quot; : &quot; + eattr->getEType()->getName()+ &quot; [&quot; +  std::to_string(eattr->getLowerBound()) + &quot;..&quot; + std::to_string(eattr->getUpperBound()) + &quot;]&quot; &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;void printEReference(std::shared_ptr&lt;ecore::EReference> eref) {&#xA;    if(eref != nullptr) {&#xA;        if(eref->getUpperBound() > 1 || eref->getUpperBound() &lt; 0)&#xA;            std::cout &lt;&lt; &quot;&lt;EReference> &quot; + eref->getName() + &quot; : &quot; + eref->getEType()->getName()+ &quot; [&quot; +  std::to_string(eref->getLowerBound()) + &quot;..*]&quot; &lt;&lt; std::endl;&#xA;        else&#xA;            std::cout &lt;&lt; &quot;&lt;EReference> &quot; + eref->getName() + &quot; : &quot; + eref->getEType()->getName()+ &quot; [&quot; +  std::to_string(eref->getLowerBound()) + &quot;..&quot; + std::to_string(eref->getUpperBound()) + &quot;]&quot; &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;void printETypedElement(std::shared_ptr&lt;ecore::ETypedElement> etyped) {&#xA;    if(etyped != nullptr) {&#xA;        if(etyped->isMany())&#xA;            std::cout &lt;&lt; etyped->getName() + &quot; : &quot; + etyped->getEType()->getName()+ &quot; [0..*]&quot; &lt;&lt; std::endl;&#xA;        else&#xA;            std::cout &lt;&lt; etyped->getName() + &quot; : &quot; + etyped->getEType()->getName()+ &quot; [0..1]&quot; &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;void printENamedElement(std::shared_ptr&lt;ecore::ENamedElement> ename) {&#xA;    if(ename != nullptr) {&#xA;        std::cout &lt;&lt; ename->getName() &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;void printEOperation(std::shared_ptr&lt;ecore::EOperation> eope) {&#xA;    if(eope != nullptr) {&#xA;        std::string result = &quot;&lt;Operation> &quot; + eope->getName() + &quot;(&quot;;&#xA;        std::shared_ptr&lt;Bag&lt;ecore::EParameter>> ebag = std::dynamic_pointer_cast&lt;Bag&lt;ecore::EParameter>>(eope->getEParameters());&#xA;        for(unsigned int i = 0; i &lt; ebag->size(); i++) {&#xA;            if(i > 0) result += &quot;, &quot;;&#xA;            result += ebag->at(i)->getName() + &quot; : &quot;;&#xA;            if(ebag->at(i)->getEType() != nullptr)&#xA;                result += ebag->at(i)->getEType()->getName();&#xA;            else&#xA;                result += &quot;[Not set in Model]&quot;;&#xA;        }&#xA;        result += &quot;)&quot;;&#xA;        if(eope->getEType() != nullptr &amp;&amp; eope->getEType()->getName() != &quot;invalid&quot;)&#xA;            result += &quot; : &quot; + eope->getEType()->getName();&#xA;        std::cout &lt;&lt; result &lt;&lt; std::endl;&#xA;    }&#xA;}&#xA;&#xA;void print(Any value) {&#xA;    try {&#xA;        std::shared_ptr&lt;ecore::EObject> eobj = value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;        std::shared_ptr&lt;ecore::EOperation> eope = std::dynamic_pointer_cast&lt;ecore::EOperation>(eobj);&#xA;        if(eope != nullptr) {&#xA;            return printEOperation(eope);&#xA;        }&#xA;        std::shared_ptr&lt;ecore::EAttribute> eattr = std::dynamic_pointer_cast&lt;ecore::EAttribute>(eobj);&#xA;        if(eattr != nullptr) {&#xA;            return printEAttribute(eattr);&#xA;        }&#xA;        std::shared_ptr&lt;ecore::EReference> eref = std::dynamic_pointer_cast&lt;ecore::EReference>(eobj);&#xA;        if(eref != nullptr) {&#xA;            return printEReference(eref);&#xA;        }&#xA;        std::shared_ptr&lt;ecore::ETypedElement> etyped = std::dynamic_pointer_cast&lt;ecore::ETypedElement>(eobj);&#xA;        if(etyped != nullptr) {&#xA;            return printETypedElement(etyped);&#xA;        }&#xA;        std::shared_ptr&lt;ecore::ENamedElement> ename = std::dynamic_pointer_cast&lt;ecore::ENamedElement>(eobj);&#xA;        if(ename != nullptr) {&#xA;            return printENamedElement(ename);&#xA;        }&#xA;    } catch (...) { }&#xA;    try {&#xA;        std::shared_ptr&lt;ecore::EEnumLiteral> liter = value->get&lt;std::shared_ptr&lt;ecore::EEnumLiteral>>();&#xA;        std::cout &lt;&lt; liter->getName() &lt;&lt; std::endl;&#xA;        return;&#xA;    } catch (...) { }&#xA;&#xA;    try {&#xA;        bool result = value->get&lt;bool>();&#xA;        std::cout &lt;&lt; result &lt;&lt; std::endl;&#xA;        return;&#xA;    } catch (...) { }&#xA;    try {&#xA;        std::string result = value->get&lt;std::string>();&#xA;        std::cout &lt;&lt; result &lt;&lt; std::endl;&#xA;        return;&#xA;    } catch (...) { }&#xA;    try {&#xA;        int result = value->get&lt;int>();&#xA;        std::cout &lt;&lt; result &lt;&lt; std::endl;&#xA;        return;&#xA;    } catch (...) { }&#xA;    try {&#xA;        double result = value->get&lt;double>();&#xA;        std::cout &lt;&lt; result &lt;&lt; std::endl;&#xA;        return;&#xA;    } catch (...) { }&#xA;}&#xA;&#xA;void print(Any value, bool isMany) {&#xA;    if(value != nullptr &amp;&amp; !value->isEmpty()) {&#xA;        if(isMany) {&#xA;            std::shared_ptr&lt;Bag&lt;AnyObject>> valueItems = value->get&lt;std::shared_ptr&lt;Bag&lt;AnyObject>>>();&#xA;            for(size_t i = 0; i &lt; valueItems->size(); i++) {&#xA;                print(valueItems->at(i));&#xA;            }&#xA;        }&#xA;        else {&#xA;            print(value);&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;void pause() {&#xA;&#x9;std::cout &lt;&lt; &quot;Enter to continue...&quot;;&#xA;&#x9;std::cin.get();&#xA;}&#xA;&#xA;/*&#xA;Actual OCL functions&#xA;*/&#xA;void query1() {&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EPackage> context = BookStore_ecore::BookStore_ecorePackage::eInstance();&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_1 (context[EPackage] = LibraryPackage): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    query(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Query_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void query2() {&#xA;    std::string qry = &quot;self.eAttributes&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    std::cout &lt;&lt; &quot;START Query_2 (context[EClass] = Library): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    query(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Query_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void query3() {&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EAttribute> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getBook_Attribute_category();&#xA;    std::cout &lt;&lt; &quot;START Query_3 (context[EAttribute] = Book::category): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    query(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Query_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void query4() {&#xA;    std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EReference> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Attribute_books();&#xA;    std::cout &lt;&lt; &quot;START Query_4 (context[EReference] = Book::books): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    query(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Query_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void query5() {&#xA;    std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EOperation> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Operation_addBook_Book();&#xA;    std::cout &lt;&lt; &quot;START Query_5 (context[EOperation] = Book::addBook): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    query(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Query_5 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void ecore_any_query1() {&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EPackage> context = BookStore_ecore::BookStore_ecorePackage::eInstance();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_1 (context[EPackage] = LibraryPackage): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;        std::cout &lt;&lt; value->get&lt;std::string>() &lt;&lt; std::endl;&#xA;    }&#xA;    std::cout &lt;&lt; &quot;END Query_Any_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void ecore_any_query2() {&#xA;    std::string qry = &quot;self.eAttributes&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_2 (context[EClass] = Library): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;        try {&#xA;            std::shared_ptr&lt;Bag&lt;AnyObject>> valueItems = value->get&lt;std::shared_ptr&lt;Bag&lt;AnyObject>>>();&#xA;            for(size_t i = 0; i &lt; valueItems->size(); i++) {&#xA;                std::shared_ptr&lt;ecore::EObject> eobj = valueItems->at(i)->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;                std::shared_ptr&lt;ecore::EAttribute> eattr = std::dynamic_pointer_cast&lt;ecore::EAttribute>(eobj);&#xA;                printEAttribute(eattr);&#xA;            }&#xA;        } catch(...) {&#xA;            std::cout &lt;&lt; &quot;Error : get failed&quot; &lt;&lt; std::endl;&#xA;        }&#xA;    }&#xA;    std::cout &lt;&lt; &quot;END Query_Any_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void ecore_any_query3() {&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EAttribute> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getBook_Attribute_category();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_3 (context[EAttribute] = Book::category): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;        std::cout &lt;&lt; value->get&lt;std::string>() &lt;&lt; std::endl;&#xA;    }&#xA;    std::cout &lt;&lt; &quot;END Query_Any_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void ecore_any_query4() {&#xA;    std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EReference> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Attribute_books();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_4 (context[EReference] = Book::books): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;        std::shared_ptr&lt;ecore::EReference> eref = std::dynamic_pointer_cast&lt;ecore::EReference>&#xA;                (value->get&lt;std::shared_ptr&lt;ecore::EObject>>());&#xA;        printEReference(eref);&#xA;    }&#xA;    std::cout &lt;&lt; &quot;END Query_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void ecore_any_query5() {&#xA;    std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EOperation> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Operation_addBook_Book();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_5 (context[EOperation] = Book::addBook): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;        std::shared_ptr&lt;ecore::EOperation> eope = std::dynamic_pointer_cast&lt;ecore::EOperation>&#xA;                (value->get&lt;std::shared_ptr&lt;ecore::EObject>>());&#xA;        printEOperation(eope);&#xA;    }&#xA;    std::cout &lt;&lt; &quot;END Query_5 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void ecore_any_query6() {&#xA;    std::string qry = &quot;self.eStructuralFeatures&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_6 (context[EClass] = Library): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    print(value, true);&#xA;    std::cout &lt;&lt; &quot;END Query_Any_6 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void ecore_any_query7() {&#xA;    std::string qry = &quot;Set{20, 1 .. 10}&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_7 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    print(value, true);&#xA;    std::cout &lt;&lt; &quot;END Query_Any_7 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void ecore_any_query8() {&#xA;    std::string qry = &quot;Set{1, 2 .. 10}->iterate(i:Integer;sum:Integer=0 | sum + i)&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(context, qry);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_8 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    print(value);&#xA;    std::cout &lt;&lt; &quot;END Query_Any_8 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void validate1() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Library::books : Integer \n&quot;&#xA;                      &quot;init: nbBooks = 0 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;ecore::EObject> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    std::cout &lt;&lt; &quot;START Validate_1 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void validate2() {&#xA;    std::string qry = &quot;\ncontext Library::opened : Boolean derive: true \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setOpened(true);&#xA;    std::cout &lt;&lt; &quot;START Validate_2 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void validate3() {&#xA;    std::string qry = &quot;\ncontext Library inv: self.nbBooks > 0 \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setNbBooks(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_3(nbBooks = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void validate4() {&#xA;    std::string qry = &quot;\ncontext Library \n&quot;&#xA;                      &quot;def: value: Real = self.nbBooks / self.nbBooks * self.nbBooks \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;inv: 25 = 5 * value \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setNbBooks(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_4(nbBooks = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void validate5() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;def: rest1: Real = nbBooks - 2 * nbBooks \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;def: rest2: Real = rest1 * 2 \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;inv: 15 &lt;> let result : Integer = 0 in nbBooks - rest2 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setNbBooks(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_5(nbBooks = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_5 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;void validate6() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::countCopies() : Integer \n&quot;&#xA;                      &quot;body: self.copies \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    context->setCopies(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_6(copies = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_6 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void validate7() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;pre: nbCopies > 0 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    std::cout &lt;&lt; &quot;START Validate_7(addCopy(2)) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_7 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void validate8() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;post: self.copies = 2 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    std::cout &lt;&lt; &quot;START Validate_8(addCopy(2)) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_8 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void validate9() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Library::open(): \n&quot;&#xA;                      &quot;pre: self.opened = false \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setOpened(false);&#xA;    std::cout &lt;&lt; &quot;START Validate_9(open()) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_9 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void validate10() {&#xA;    std::string qry = &quot;context Library::open(): \n&quot;&#xA;                      &quot;post: self.opened = true&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setOpened(false);&#xA;    std::cout &lt;&lt; &quot;START Validate_10(open()) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_10 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}&#xA;&#xA;void validate11() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;post: copies = copies@pre + nbCopies \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    std::cout &lt;&lt; &quot;START Validate_11(addCopies(2)) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    validate(context, qry);&#xA;    std::cout &lt;&lt; &quot;END Validate_11 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;}"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Library">
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Library inv: self.opened"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Library inv: self.nbBooks > 0"/>
    </eAnnotations>
    <eOperations name="addMember" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eParameters name="m" eType="#//Member"/>
    </eOperations>
    <eOperations name="addLoan" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eParameters name="m" eType="#//Member"/>
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eOperations name="addBook" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eOperations name="open">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->setOpened(true);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="close">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->setOpened(false);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="closed" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return !this->isOpened();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="books" upperBound="-1"
        eType="#//Book" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="members" upperBound="-1"
        eType="#//Member" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="loans" upperBound="-1"
        eType="#//Loan" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="opened" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="nbBooks" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"
        defaultValueLiteral="3"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Member">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Book">
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Book inv: self.copies > 0"/>
    </eAnnotations>
    <eOperations name="addCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    m_copies += nbCopies;&#xA;    return m_copies;"/>
      </eAnnotations>
      <eParameters name="nbCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
    </eOperations>
    <eOperations name="countCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return this->getCopies();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="incrCopies">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="   m_copies++;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="title" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="copies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="category" eType="#//BookCategory"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="available" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Loan">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="date" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="book" eType="#//Book"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" eType="#//Member"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Writer">
    <eOperations name="write">
      <eAnnotations source="http://www.eclipse.org/OCL">
        <details key="OCL" value="context Book inv: self.copies > 0"/>
      </eAnnotations>
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="books" lowerBound="1" upperBound="-1"
        eType="#//Book" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="BookCategory">
    <eLiterals name="MISTERY"/>
    <eLiterals name="BIOGRAPHY" value="1"/>
    <eLiterals name="HISTORY" value="2"/>
  </eClassifiers>
</ecore:EPackage>
