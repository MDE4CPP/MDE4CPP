<?xml version="1.0" encoding="UTF-8"?>
<uml:Model xmi:version="20131001" xmlns:xmi="http://www.omg.org/spec/XMI/20131001" xmlns:uml="http://www.eclipse.org/uml2/5.0.0/UML" xmi:id="_PmmP8LAqEeert7O7oCVCsA" name="DelegationPort_PWP">
  <eAnnotations xmi:id="_otFUEFgQEeqZPe2oHCHy2Q" source="prepareApplication">
    <details xmi:id="_qWW_AFgQEeqZPe2oHCHy2Q" key="sourceCodeMain" value="std::cout&lt;&lt;&quot;-- Test model : Delegation between a port and a part with a port&quot;&lt;&lt;std::endl;&#xA;&#xA;std::shared_ptr&lt;DelegationPort_PWP::Tester> tester = factory->createTester();&#xA;&#xA;std::cout&lt;&lt;&quot;-- Running test case: Delegation connector between a port and a part with a port --&quot;&lt;&lt;std::endl;&#xA;std::cout&lt;&lt;std::endl;&#xA;&#xA;tester->runTestCase();&#xA;&#xA;std::cout&lt;&lt;std::endl;&#xA;std::cout&lt;&lt;&quot;-- End of test case --&quot;&lt;&lt;std::endl;"/>
  </eAnnotations>
  <eAnnotations xmi:id="_OZx8wI4xEeqm_eVeNYUZww" source="BuildMode">
    <details xmi:id="_PXN1YI4xEeqm_eVeNYUZww" key="type" value="library"/>
  </eAnnotations>
  <ownedComment xmi:id="_WQ-gIKGFEeq_jPVfGA6A8w">
    <body>This test case addresses instantiation semantics in the case of a delegation connector between a port and a part with port.</body>
  </ownedComment>
  <packageImport xmi:id="_rgWIkLArEeert7O7oCVCsA">
    <importedPackage xmi:type="uml:Model" href="pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0"/>
  </packageImport>
  <packagedElement xmi:type="uml:Class" xmi:id="_z6HwQO9BEemWP7t7cfH8xA" name="A_Empty_Pattern">
    <ownedComment xmi:id="_6GtOUO9BEemWP7t7cfH8xA">
      <body>Empty pattern:
lower bound of port p and part b is 0</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_eFiekFl5EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_gHxcEFl5EeqCEpOYlPRuRQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_gSEAgFl5EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_u8DPkO9IEemWP7t7cfH8xA" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_yr6zkO9IEemWP7t7cfH8xA"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_0CIYkO9IEemWP7t7cfH8xA" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="_5Dm2APEXEem6OrjQXRieKQ" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="_ASU0kPEaEem6OrjQXRieKQ" role="_eFiekFl5EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_HAZPEPEaEem6OrjQXRieKQ" name="connectorEnd_1_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_H5WQUPEaEem6OrjQXRieKQ" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="_AzlHgPEaEem6OrjQXRieKQ" partWithPort="_u8DPkO9IEemWP7t7cfH8xA" role="_WCgecFmIEeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_I81GkPEaEem6OrjQXRieKQ" name="connectorEnd_2_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_KKi24PEaEem6OrjQXRieKQ" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_bfcP8FIvEeq4WpdDJnu9kg" name="A_Unconnected_Pattern">
    <ownedComment xmi:id="_bfcP8VIvEeq4WpdDJnu9kg">
      <body>Unconnected pattern:
lower bound on ends of connector r is 0</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_7smDAFl5EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_BxMpwFl6EeqCEpOYlPRuRQ" value="3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_B6cFUFl6EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_bfcP8lIvEeq4WpdDJnu9kg" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bfcP81IvEeq4WpdDJnu9kg" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bfcP9FIvEeq4WpdDJnu9kg" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="_bfcP-FIvEeq4WpdDJnu9kg" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="_bfcP-VIvEeq4WpdDJnu9kg" role="_7smDAFl5EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bfcP-lIvEeq4WpdDJnu9kg" name="connectorEnd_1_Lower"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bfcP-1IvEeq4WpdDJnu9kg" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="_bfcP_FIvEeq4WpdDJnu9kg" partWithPort="_bfcP8lIvEeq4WpdDJnu9kg" role="_WCgecFmIEeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bfcP_VIvEeq4WpdDJnu9kg" name="connectorEnd_2_Lower"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bfcP_lIvEeq4WpdDJnu9kg" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_rZJ6oFIvEeq4WpdDJnu9kg" name="A_Array_Pattern">
    <ownedComment xmi:id="_rZJ6oVIvEeq4WpdDJnu9kg">
      <body>Array pattern:
lower bound of p and b are equals
lower bound on ends of connector r is 1</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_PPNHAFl6EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_Q8E4gFl6EeqCEpOYlPRuRQ" value="4"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_RJfCYFl6EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_rZJ6olIvEeq4WpdDJnu9kg" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rZJ6o1IvEeq4WpdDJnu9kg" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rZJ6pFIvEeq4WpdDJnu9kg" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="_rZJ6qFIvEeq4WpdDJnu9kg" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="_rZJ6qVIvEeq4WpdDJnu9kg" role="_PPNHAFl6EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rZJ6qlIvEeq4WpdDJnu9kg" name="connectorEnd_1_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rZJ6q1IvEeq4WpdDJnu9kg" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="_rZJ6rFIvEeq4WpdDJnu9kg" partWithPort="_rZJ6olIvEeq4WpdDJnu9kg" role="_WCgecFmIEeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_rZJ6rVIvEeq4WpdDJnu9kg" name="connectorEnd_2_Lower" value="1"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_rZJ6rlIvEeq4WpdDJnu9kg" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="__fogsFIvEeq4WpdDJnu9kg" name="A_Star_Pattern">
    <ownedComment xmi:id="__fogsVIvEeq4WpdDJnu9kg">
      <body>Star pattern:
lower bound on ends of connector r equal lower
bound of connected elements</body>
    </ownedComment>
    <ownedAttribute xmi:type="uml:Port" xmi:id="_ZvnKsFl6EeqCEpOYlPRuRQ" name="p" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_c6t0wFl6EeqCEpOYlPRuRQ" value="3"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_dEsQIFl6EeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="__fogslIvEeq4WpdDJnu9kg" name="partB" type="_Mk9kQO9AEemWP7t7cfH8xA" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__fogs1IvEeq4WpdDJnu9kg" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__fogtFIvEeq4WpdDJnu9kg" value="*"/>
    </ownedAttribute>
    <ownedConnector xmi:id="__foguFIvEeq4WpdDJnu9kg" name="r" type="_kQiBsO9AEemWP7t7cfH8xA">
      <end xmi:id="__foguVIvEeq4WpdDJnu9kg" role="_ZvnKsFl6EeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__fogulIvEeq4WpdDJnu9kg" name="connectorEnd_1_Lower" value="3"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__fogu1IvEeq4WpdDJnu9kg" name="connectorEnd_1_Upper" value="*"/>
      </end>
      <end xmi:id="__fogvFIvEeq4WpdDJnu9kg" partWithPort="__fogslIvEeq4WpdDJnu9kg" role="_WCgecFmIEeqCEpOYlPRuRQ">
        <lowerValue xmi:type="uml:LiteralInteger" xmi:id="__fogvVIvEeq4WpdDJnu9kg" name="connectorEnd_2_Lower" value="4"/>
        <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="__fogvlIvEeq4WpdDJnu9kg" name="connectorEnd_2_Upper" value="*"/>
      </end>
    </ownedConnector>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_Mk9kQO9AEemWP7t7cfH8xA" name="B">
    <ownedAttribute xmi:type="uml:Port" xmi:id="_WCgecFmIEeqCEpOYlPRuRQ" name="q" type="_ioHWEFlyEeqCEpOYlPRuRQ" aggregation="composite">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_bn-SIFmIEeqCEpOYlPRuRQ" value="2"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_bw9PAFmIEeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
  </packagedElement>
  <packagedElement xmi:type="uml:Class" xmi:id="_ioHWEFlyEeqCEpOYlPRuRQ" name="IImplementation">
    <ownedAttribute xmi:id="_lHA_cFmIEeqCEpOYlPRuRQ" name="x" type="_ioHWEFlyEeqCEpOYlPRuRQ" association="_kQiBsO9AEemWP7t7cfH8xA">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_m9cVkFmIEeqCEpOYlPRuRQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_nXz9YFmIEeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <ownedAttribute xmi:id="_jsuLsFmIEeqCEpOYlPRuRQ" name="y" type="_ioHWEFlyEeqCEpOYlPRuRQ" association="_kQiBsO9AEemWP7t7cfH8xA">
      <lowerValue xmi:type="uml:LiteralInteger" xmi:id="_mQ4KgFmIEeqCEpOYlPRuRQ"/>
      <upperValue xmi:type="uml:LiteralUnlimitedNatural" xmi:id="_mbwk0FmIEeqCEpOYlPRuRQ" value="*"/>
    </ownedAttribute>
    <interfaceRealization xmi:id="_t3tbAFlyEeqCEpOYlPRuRQ" name="interfaceRealizationI" client="_ioHWEFlyEeqCEpOYlPRuRQ" supplier="_fUYUcFlyEeqCEpOYlPRuRQ" contract="_fUYUcFlyEeqCEpOYlPRuRQ"/>
  </packagedElement>
  <packagedElement xmi:type="uml:Interface" xmi:id="_fUYUcFlyEeqCEpOYlPRuRQ" name="I"/>
  <packagedElement xmi:type="uml:Association" xmi:id="_kQiBsO9AEemWP7t7cfH8xA" name="R" memberEnd="_lHA_cFmIEeqCEpOYlPRuRQ _jsuLsFmIEeqCEpOYlPRuRQ"/>
  <packagedElement xmi:type="uml:Class" xmi:id="_AX6AEFgQEeqZPe2oHCHy2Q" name="Tester">
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_6vTt8FgREeqZPe2oHCHy2Q" name="fbTestAEmptyPattern" specification="_N16ycFgSEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <language>INCLUDE</language>
      <body>std::cout&lt;&lt;&quot;-- Instantiation of A_Empty_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftPortCardinality=0, rightPartCardinality=0, rightPortCardinality = 2,rightEndCardinality=1, leftEndCardinality=1;&#xD;
&#xD;
bool successful = ((aEmptyPattern->getP()->size()) == leftPortCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aEmptyPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aEmptyPattern->getP()->at(i)->getY()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->y->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aEmptyPattern->getPartB()->size()) == rightPartCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightPartCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aEmptyPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = (aEmptyPattern->getPartB()->at(i)->getQ()->size() == rightPortCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q->size = &quot;&lt;&lt;rightPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	for(unsigned int j = 0; j &lt; aEmptyPattern->getPartB()->at(i)->getQ()->size(); j++)&#xD;
	{&#xD;
		successful = ((aEmptyPattern->getPartB()->at(i)->getQ()->at(j)->getX()->size()) == leftEndCardinality);&#xD;
		std::cout&lt;&lt;&quot;	b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q[&quot;&lt;&lt;j&lt;&lt;&quot;]->x->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	}&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aEmptyPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPortEnd1 = aEmptyPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aEmptyPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentPartEnd2 = aEmptyPattern->getPartB()->at(j);&#xD;
			&#xD;
			for(unsigned int k = 0; k &lt; currentPartEnd2->getQ()->size(); k++)&#xD;
			{&#xD;
				std::shared_ptr&lt;IImplementation> currentPortOfPartEnd2 = currentPartEnd2->getQ()->at(k);&#xD;
				bool connected = false;&#xD;
				&#xD;
				for(unsigned int l = 0; l &lt; currentPortEnd1->getY()->size(); l++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentYOfPortEnd1 = currentPortEnd1->getY()->at(l);&#xD;
					if(currentPortOfPartEnd2  == currentYOfPortEnd1)&#xD;
					{	&#xD;
						for(unsigned int h=0; h &lt; currentPortOfPartEnd2->getX()->size() &amp;&amp; !connected; h++)&#xD;
						{&#xD;
							std::shared_ptr&lt;IImplementation> currentXOfPortEnd2 = currentPortOfPartEnd2->getX()->at(h);&#xD;
							if(!connected &amp;&amp; (currentXOfPortEnd2 == currentPortEnd1)) connected = true;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
				&#xD;
				std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
				std::cout&lt;&lt;&quot;	p[&quot;&lt;&lt;i&lt;&lt;&quot;] &quot;&lt;&lt;connectedString&lt;&lt;&quot; partB[&quot;&lt;&lt;j&lt;&lt;&quot;]->q[&quot;&lt;&lt;k&lt;&lt;&quot;]&quot;&lt;&lt;std::endl;&#xD;
				&#xD;
			}&#xD;
	}&#xD;
	std::cout&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Empty_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();</body>
      <body>#include &quot;DelegationPort_PWP/B.hpp&quot;&#xD;
#include &quot;DelegationPort_PWP/IImplementation.hpp&quot;</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_-aF9oFgREeqZPe2oHCHy2Q" name="fbTestAUnconnectedPattern" specification="_1_Kt0FgTEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <body>std::cout&lt;&lt;&quot;-- Instantiation of A_Unconnected_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftPortCardinality=3, rightPartCardinality=2, rightPortCardinality = 2,rightEndCardinality=0, leftEndCardinality=0;&#xD;
&#xD;
bool successful = ((aUnconnectedPattern->getP()->size()) == leftPortCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aUnconnectedPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aUnconnectedPattern->getP()->at(i)->getY()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->y->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aUnconnectedPattern->getPartB()->size()) == rightPartCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightPartCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aUnconnectedPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = (aUnconnectedPattern->getPartB()->at(i)->getQ()->size() == rightPortCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q->size = &quot;&lt;&lt;rightPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	for(unsigned int j = 0; j &lt; aUnconnectedPattern->getPartB()->at(i)->getQ()->size(); j++)&#xD;
	{&#xD;
		successful = ((aUnconnectedPattern->getPartB()->at(i)->getQ()->at(j)->getX()->size()) == leftEndCardinality);&#xD;
		std::cout&lt;&lt;&quot;	b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q[&quot;&lt;&lt;j&lt;&lt;&quot;]->x->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	}&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aUnconnectedPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPortEnd1 = aUnconnectedPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aUnconnectedPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentPartEnd2 = aUnconnectedPattern->getPartB()->at(j);&#xD;
			&#xD;
			for(unsigned int k = 0; k &lt; currentPartEnd2->getQ()->size(); k++)&#xD;
			{&#xD;
				std::shared_ptr&lt;IImplementation> currentPortOfPartEnd2 = currentPartEnd2->getQ()->at(k);&#xD;
				bool connected = false;&#xD;
				&#xD;
				for(unsigned int l = 0; l &lt; currentPortEnd1->getY()->size(); l++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentYOfPortEnd1 = currentPortEnd1->getY()->at(l);&#xD;
					if(currentPortOfPartEnd2  == currentYOfPortEnd1)&#xD;
					{	&#xD;
						for(unsigned int h=0; h &lt; currentPortOfPartEnd2->getX()->size() &amp;&amp; !connected; h++)&#xD;
						{&#xD;
							std::shared_ptr&lt;IImplementation> currentXOfPortEnd2 = currentPortOfPartEnd2->getX()->at(h);&#xD;
							if(!connected &amp;&amp; (currentXOfPortEnd2 == currentPortEnd1)) connected = true;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
				&#xD;
				std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
				std::cout&lt;&lt;&quot;	p[&quot;&lt;&lt;i&lt;&lt;&quot;] &quot;&lt;&lt;connectedString&lt;&lt;&quot; partB[&quot;&lt;&lt;j&lt;&lt;&quot;]->q[&quot;&lt;&lt;k&lt;&lt;&quot;]&quot;&lt;&lt;std::endl;&#xD;
				&#xD;
			}&#xD;
	}&#xD;
	std::cout&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Unconnected_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_CeMFMFgSEeqZPe2oHCHy2Q" name="fbTestAArrayPattern" specification="_-PQ7wFgTEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <body>std::cout&lt;&lt;&quot;-- Instantiation of A_Array_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftPortCardinality=4, rightPartCardinality=2, rightPortCardinality = 2,rightEndCardinality=1, leftEndCardinality=1;&#xD;
&#xD;
bool successful = ((aArrayPattern->getP()->size()) == leftPortCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aArrayPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aArrayPattern->getP()->at(i)->getY()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->y->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aArrayPattern->getPartB()->size()) == rightPartCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightPartCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aArrayPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = (aArrayPattern->getPartB()->at(i)->getQ()->size() == rightPortCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q->size = &quot;&lt;&lt;rightPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	for(unsigned int j = 0; j &lt; aArrayPattern->getPartB()->at(i)->getQ()->size(); j++)&#xD;
	{&#xD;
		successful = ((aArrayPattern->getPartB()->at(i)->getQ()->at(j)->getX()->size()) == leftEndCardinality);&#xD;
		std::cout&lt;&lt;&quot;	b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q[&quot;&lt;&lt;j&lt;&lt;&quot;]->x->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	}&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aArrayPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPortEnd1 = aArrayPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aArrayPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentPartEnd2 = aArrayPattern->getPartB()->at(j);&#xD;
			&#xD;
			for(unsigned int k = 0; k &lt; currentPartEnd2->getQ()->size(); k++)&#xD;
			{&#xD;
				std::shared_ptr&lt;IImplementation> currentPortOfPartEnd2 = currentPartEnd2->getQ()->at(k);&#xD;
				bool connected = false;&#xD;
				&#xD;
				for(unsigned int l = 0; l &lt; currentPortEnd1->getY()->size(); l++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentYOfPortEnd1 = currentPortEnd1->getY()->at(l);&#xD;
					if(currentPortOfPartEnd2  == currentYOfPortEnd1)&#xD;
					{	&#xD;
						for(unsigned int h=0; h &lt; currentPortOfPartEnd2->getX()->size() &amp;&amp; !connected; h++)&#xD;
						{&#xD;
							std::shared_ptr&lt;IImplementation> currentXOfPortEnd2 = currentPortOfPartEnd2->getX()->at(h);&#xD;
							if(!connected &amp;&amp; (currentXOfPortEnd2 == currentPortEnd1)) connected = true;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
				&#xD;
				std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
				std::cout&lt;&lt;&quot;	p[&quot;&lt;&lt;i&lt;&lt;&quot;] &quot;&lt;&lt;connectedString&lt;&lt;&quot; partB[&quot;&lt;&lt;j&lt;&lt;&quot;]->q[&quot;&lt;&lt;k&lt;&lt;&quot;]&quot;&lt;&lt;std::endl;&#xD;
				&#xD;
			}&#xD;
	}&#xD;
	std::cout&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Array_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:FunctionBehavior" xmi:id="_EXuZsFgSEeqZPe2oHCHy2Q" name="fbTestAStarPattern" specification="_HVXkoFgUEeqZPe2oHCHy2Q">
      <language>CPP</language>
      <body>std::cout&lt;&lt;&quot;-- Instantiation of A_Star_Pattern --&quot;&lt;&lt;std::endl;&#xD;
&#xD;
unsigned int leftPortCardinality=3, rightPartCardinality=2, rightPortCardinality = 2,rightEndCardinality=4, leftEndCardinality=3;&#xD;
&#xD;
bool successful = ((aStarPattern->getP()->size()) == leftPortCardinality);&#xD;
std::cout&lt;&lt;&quot;p->size = &quot;&lt;&lt;leftPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aStarPattern->getP()->size(); i++)&#xD;
{&#xD;
	successful = ((aStarPattern->getP()->at(i)->getY()->size()) == rightEndCardinality);&#xD;
	std::cout&lt;&lt;&quot;p[&quot;&lt;&lt;i&lt;&lt;&quot;]->y->size = &quot;&lt;&lt;rightEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
successful = ((aStarPattern->getPartB()->size()) == rightPartCardinality);&#xD;
std::cout&lt;&lt;&quot;b->size = &quot;&lt;&lt;rightPartCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
for(unsigned int i = 0; i &lt; aStarPattern->getPartB()->size(); i++)&#xD;
{&#xD;
	successful = (aStarPattern->getPartB()->at(i)->getQ()->size() == rightPortCardinality);&#xD;
	std::cout&lt;&lt;&quot;b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q->size = &quot;&lt;&lt;rightPortCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	&#xD;
	for(unsigned int j = 0; j &lt; aStarPattern->getPartB()->at(i)->getQ()->size(); j++)&#xD;
	{&#xD;
		successful = ((aStarPattern->getPartB()->at(i)->getQ()->at(j)->getX()->size()) == leftEndCardinality);&#xD;
		std::cout&lt;&lt;&quot;	b[&quot;&lt;&lt;i&lt;&lt;&quot;]->q[&quot;&lt;&lt;j&lt;&lt;&quot;]->x->size = &quot;&lt;&lt;leftEndCardinality&lt;&lt;&quot; : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
	}&#xD;
}&#xD;
std::cout&lt;&lt;std::endl;&#xD;
&#xD;
&#xD;
for(unsigned int i = 0; i &lt; aStarPattern->getP()->size(); i++){&#xD;
&#xD;
	std::shared_ptr&lt;IImplementation> currentPortEnd1 = aStarPattern->getP()->at(i);&#xD;
&#xD;
	for(unsigned int j = 0; j &lt; aStarPattern->getPartB()->size(); j++)&#xD;
	{&#xD;
		std::shared_ptr&lt;B> currentPartEnd2 = aStarPattern->getPartB()->at(j);&#xD;
			&#xD;
			for(unsigned int k = 0; k &lt; currentPartEnd2->getQ()->size(); k++)&#xD;
			{&#xD;
				std::shared_ptr&lt;IImplementation> currentPortOfPartEnd2 = currentPartEnd2->getQ()->at(k);&#xD;
				bool connected = false;&#xD;
				&#xD;
				for(unsigned int l = 0; l &lt; currentPortEnd1->getY()->size(); l++)&#xD;
				{&#xD;
					std::shared_ptr&lt;IImplementation> currentYOfPortEnd1 = currentPortEnd1->getY()->at(l);&#xD;
					if(currentPortOfPartEnd2  == currentYOfPortEnd1)&#xD;
					{	&#xD;
						for(unsigned int h=0; h &lt; currentPortOfPartEnd2->getX()->size() &amp;&amp; !connected; h++)&#xD;
						{&#xD;
							std::shared_ptr&lt;IImplementation> currentXOfPortEnd2 = currentPortOfPartEnd2->getX()->at(h);&#xD;
							if(!connected &amp;&amp; (currentXOfPortEnd2 == currentPortEnd1)) connected = true;&#xD;
						}&#xD;
					}&#xD;
				}&#xD;
				&#xD;
				std::string connectedString = connected ? &quot;&lt;->&quot; : &quot;   &quot;;&#xD;
				std::cout&lt;&lt;&quot;	p[&quot;&lt;&lt;i&lt;&lt;&quot;] &quot;&lt;&lt;connectedString&lt;&lt;&quot; partB[&quot;&lt;&lt;j&lt;&lt;&quot;]->q[&quot;&lt;&lt;k&lt;&lt;&quot;]&quot;&lt;&lt;std::endl;&#xD;
				&#xD;
			}&#xD;
	}&#xD;
	std::cout&lt;&lt;std::endl;&#xD;
}&#xD;
std::cout&lt;&lt;&quot;Instantiation was successful : &quot;&lt;&lt;std::boolalpha&lt;&lt;successful&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;-- Instantiation of A_Star_Pattern --&quot;&lt;&lt;std::endl;&#xD;
std::cout&lt;&lt;&quot;Press Enter for next pattern...&quot;;&#xD;
getchar();</body>
    </ownedBehavior>
    <ownedBehavior xmi:type="uml:Activity" xmi:id="_UF1goI4xEeqm_eVeNYUZww" name="actRunTestCase" specification="_RwI0kI4xEeqm_eVeNYUZww" node="_cMPAAI4xEeqm_eVeNYUZww _dwg2MI4xEeqm_eVeNYUZww _hLkn0I4xEeqm_eVeNYUZww _m6kK8I4xEeqm_eVeNYUZww _sAbRgI4xEeqm_eVeNYUZww _wIesAI4xEeqm_eVeNYUZww _0NGYAI4xEeqm_eVeNYUZww _63SYEI4xEeqm_eVeNYUZww _BjxeMI4yEeqm_eVeNYUZww _GdzvQI4yEeqm_eVeNYUZww">
      <edge xmi:type="uml:ControlFlow" xmi:id="_fyYnUI4xEeqm_eVeNYUZww" target="_dwg2MI4xEeqm_eVeNYUZww" source="_cMPAAI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_fyYnUY4xEeqm_eVeNYUZww" name="Initial1_To_Fork1_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_fyYnUo4xEeqm_eVeNYUZww" name="Initial1_To_Fork1_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_PdcjwI4yEeqm_eVeNYUZww" target="_63SYEI4xEeqm_eVeNYUZww" source="_0NGYAI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_PdcjwY4yEeqm_eVeNYUZww" name="callTestAEmptyPattern_To_callTestAUnconnectedPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_Pdcjwo4yEeqm_eVeNYUZww" name="callTestAEmptyPattern_To_callTestAUnconnectedPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_P7rX4I4yEeqm_eVeNYUZww" target="_BjxeMI4yEeqm_eVeNYUZww" source="_63SYEI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_P7rX4Y4yEeqm_eVeNYUZww" name="callTestAUnconnectedPattern_To_callTestAArrayPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_P7rX4o4yEeqm_eVeNYUZww" name="callTestAUnconnectedPattern_To_callTestAArrayPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_Qp2sgI4yEeqm_eVeNYUZww" target="_GdzvQI4yEeqm_eVeNYUZww" source="_BjxeMI4yEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_QqAdgI4yEeqm_eVeNYUZww" name="callTestAArrayPattern_To_callTestAStarPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_QqAdgY4yEeqm_eVeNYUZww" name="callTestAArrayPattern_To_callTestAStarPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_TdM94I4yEeqm_eVeNYUZww" target="_2usyEI4xEeqm_eVeNYUZww" source="_hLkn0Y4xEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_T6mEgI4yEeqm_eVeNYUZww" target="_9XlKkI4xEeqm_eVeNYUZww" source="_m6kK8Y4xEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_UgNTAI4yEeqm_eVeNYUZww" target="_DXvWMI4yEeqm_eVeNYUZww" source="_sAbRgY4xEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ObjectFlow" xmi:id="_U6JdAI4yEeqm_eVeNYUZww" target="_I6-8UI4yEeqm_eVeNYUZww" source="_wIesAY4xEeqm_eVeNYUZww"/>
      <edge xmi:type="uml:ControlFlow" xmi:id="_mJB98KGFEeq_jPVfGA6A8w" target="_hLkn0I4xEeqm_eVeNYUZww" source="_dwg2MI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_mJClAKGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAEmptyPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_mJDMEKGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAEmptyPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_mzSb4KGFEeq_jPVfGA6A8w" target="_m6kK8I4xEeqm_eVeNYUZww" source="_dwg2MI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_mzTC8KGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAUnconnectedPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_mzTC8aGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAUnconnectedPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_n5OJMKGFEeq_jPVfGA6A8w" target="_sAbRgI4xEeqm_eVeNYUZww" source="_dwg2MI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_n5OJMaGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAArrayPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_n5OJMqGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAArrayPattern_weight"/>
      </edge>
      <edge xmi:type="uml:ControlFlow" xmi:id="_pJ3RsKGFEeq_jPVfGA6A8w" target="_wIesAI4xEeqm_eVeNYUZww" source="_dwg2MI4xEeqm_eVeNYUZww">
        <guard xmi:type="uml:LiteralBoolean" xmi:id="_pJ3RsaGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAStarPattern_guard" value="true"/>
        <weight xmi:type="uml:LiteralInteger" xmi:id="_pJ34wKGFEeq_jPVfGA6A8w" name="Fork1_To_CreateAStarPattern_weight"/>
      </edge>
      <node xmi:type="uml:InitialNode" xmi:id="_cMPAAI4xEeqm_eVeNYUZww" name="Initial1" outgoing="_fyYnUI4xEeqm_eVeNYUZww"/>
      <node xmi:type="uml:ForkNode" xmi:id="_dwg2MI4xEeqm_eVeNYUZww" name="Fork1" incoming="_fyYnUI4xEeqm_eVeNYUZww" outgoing="_mJB98KGFEeq_jPVfGA6A8w _mzSb4KGFEeq_jPVfGA6A8w _n5OJMKGFEeq_jPVfGA6A8w _pJ3RsKGFEeq_jPVfGA6A8w"/>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_hLkn0I4xEeqm_eVeNYUZww" name="CreateAEmptyPattern" incoming="_mJB98KGFEeq_jPVfGA6A8w" classifier="_z6HwQO9BEemWP7t7cfH8xA">
        <result xmi:id="_hLkn0Y4xEeqm_eVeNYUZww" name="aEmptyPattern" outgoing="_TdM94I4yEeqm_eVeNYUZww" type="_z6HwQO9BEemWP7t7cfH8xA"/>
      </node>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_m6kK8I4xEeqm_eVeNYUZww" name="CreateAUnconnectedPattern" incoming="_mzSb4KGFEeq_jPVfGA6A8w" classifier="_bfcP8FIvEeq4WpdDJnu9kg">
        <result xmi:id="_m6kK8Y4xEeqm_eVeNYUZww" name="aUnconnectedPattern" outgoing="_T6mEgI4yEeqm_eVeNYUZww" type="_bfcP8FIvEeq4WpdDJnu9kg"/>
      </node>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_sAbRgI4xEeqm_eVeNYUZww" name="CreateAArrayPattern" incoming="_n5OJMKGFEeq_jPVfGA6A8w" classifier="_rZJ6oFIvEeq4WpdDJnu9kg">
        <result xmi:id="_sAbRgY4xEeqm_eVeNYUZww" name="aArrayPattern" outgoing="_UgNTAI4yEeqm_eVeNYUZww" type="_rZJ6oFIvEeq4WpdDJnu9kg"/>
      </node>
      <node xmi:type="uml:CreateObjectAction" xmi:id="_wIesAI4xEeqm_eVeNYUZww" name="CreateAStarPattern" incoming="_pJ3RsKGFEeq_jPVfGA6A8w" classifier="__fogsFIvEeq4WpdDJnu9kg">
        <result xmi:id="_wIesAY4xEeqm_eVeNYUZww" name="aStarPattern" outgoing="_U6JdAI4yEeqm_eVeNYUZww" type="__fogsFIvEeq4WpdDJnu9kg"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_0NGYAI4xEeqm_eVeNYUZww" name="callTestAEmptyPattern" outgoing="_PdcjwI4yEeqm_eVeNYUZww" operation="_N16ycFgSEeqZPe2oHCHy2Q">
        <argument xmi:id="_2usyEI4xEeqm_eVeNYUZww" name="aEmptyPattern" incoming="_TdM94I4yEeqm_eVeNYUZww" type="_z6HwQO9BEemWP7t7cfH8xA"/>
        <target xmi:id="_0NGYAY4xEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_63SYEI4xEeqm_eVeNYUZww" name="callTestAUnconnectedPattern" incoming="_PdcjwI4yEeqm_eVeNYUZww" outgoing="_P7rX4I4yEeqm_eVeNYUZww" operation="_1_Kt0FgTEeqZPe2oHCHy2Q">
        <argument xmi:id="_9XlKkI4xEeqm_eVeNYUZww" name="aUnconnectedPattern" incoming="_T6mEgI4yEeqm_eVeNYUZww" type="_bfcP8FIvEeq4WpdDJnu9kg"/>
        <target xmi:id="_63S_II4xEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_BjxeMI4yEeqm_eVeNYUZww" name="callTestAArrayPattern" incoming="_P7rX4I4yEeqm_eVeNYUZww" outgoing="_Qp2sgI4yEeqm_eVeNYUZww" operation="_-PQ7wFgTEeqZPe2oHCHy2Q">
        <argument xmi:id="_DXvWMI4yEeqm_eVeNYUZww" name="aArrayPattern" incoming="_UgNTAI4yEeqm_eVeNYUZww" type="_rZJ6oFIvEeq4WpdDJnu9kg"/>
        <target xmi:id="_BjxeMY4yEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
      <node xmi:type="uml:CallOperationAction" xmi:id="_GdzvQI4yEeqm_eVeNYUZww" name="callTestAStarPattern" incoming="_Qp2sgI4yEeqm_eVeNYUZww" operation="_HVXkoFgUEeqZPe2oHCHy2Q">
        <argument xmi:id="_I6-8UI4yEeqm_eVeNYUZww" name="aStarPattern" incoming="_U6JdAI4yEeqm_eVeNYUZww" type="__fogsFIvEeq4WpdDJnu9kg"/>
        <target xmi:id="_GdzvQY4yEeqm_eVeNYUZww" name="self" type="_AX6AEFgQEeqZPe2oHCHy2Q"/>
      </node>
    </ownedBehavior>
    <ownedOperation xmi:id="_N16ycFgSEeqZPe2oHCHy2Q" name="testAEmptyPattern" method="_6vTt8FgREeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_TUYmQFgSEeqZPe2oHCHy2Q" name="aEmptyPattern" type="_z6HwQO9BEemWP7t7cfH8xA"/>
    </ownedOperation>
    <ownedOperation xmi:id="_1_Kt0FgTEeqZPe2oHCHy2Q" name="testAUnconnectedPattern" method="_-aF9oFgREeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_7GFkUFgTEeqZPe2oHCHy2Q" name="aUnconnectedPattern" type="_bfcP8FIvEeq4WpdDJnu9kg"/>
    </ownedOperation>
    <ownedOperation xmi:id="_-PQ7wFgTEeqZPe2oHCHy2Q" name="testAArrayPattern" method="_CeMFMFgSEeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_-PQ7wVgTEeqZPe2oHCHy2Q" name="aArrayPattern" type="_rZJ6oFIvEeq4WpdDJnu9kg"/>
    </ownedOperation>
    <ownedOperation xmi:id="_HVXkoFgUEeqZPe2oHCHy2Q" name="testAStarPattern" method="_EXuZsFgSEeqZPe2oHCHy2Q">
      <ownedParameter xmi:id="_HVXkoVgUEeqZPe2oHCHy2Q" name="aStarPattern" type="__fogsFIvEeq4WpdDJnu9kg"/>
    </ownedOperation>
    <ownedOperation xmi:id="_RwI0kI4xEeqm_eVeNYUZww" name="runTestCase" method="_UF1goI4xEeqm_eVeNYUZww"/>
  </packagedElement>
</uml:Model>
