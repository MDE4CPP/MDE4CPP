[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of signal model file
 * 
 */]
[module generateSignalModelFile('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[comment]
	[import UML4CPP::generator::main::components::generateInterfaceRealization /]
	[import UML4CPP::generator::main::components::generateOperation /]
	[import UML4CPP::generator::main::components::generateProperty /]
	[import UML4CPP::generator::main::components::generateType /]
	[import UML4CPP::generator::main::helpers::generalHelper /]
	[import UML4CPP::generator::main::helpers::nameHelper /]
	[import UML4CPP::generator::main::helpers::singletonHelper /]
	[import UML4CPP::generator::main::validation::validateModel /]
	[import UML4CPP::generator::main::components::generateClass /]
	[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
	
	[query private includes(aSignal : Signal) : Set(Type) = Set(Type){aSignal.ownedAttribute.type, aSignal.getImplicitCompositeOwners()}->flatten() /]
	
	[template public generateModel(aSignal : Signal) {aPackage:Package = aSignal.ancestors()->filter(Package)->first();}]
	[file (aPackage.generateNamespacePath(false).concat('/').concat(aSignal.name.toUpperFirst()).concat('.hpp'), false, 'UTF-8')]
	[startGuard(aSignal)/]
	
	
	[generateAbstractDataTypesForwardDeclaration()/]
	
	[if (not aSignal.getRootPackage().allOwnedElements()->filter(Usage)->isEmpty())]
	//********************
	// usage
	[for (usages : Usage| aSignal.getRootPackage().allOwnedElements()->filter(Usage)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
	[if (not (usages.supplier.name->asOrderedSet()->first() = aSignal.name.toString()))]
	   #include "[usages.getNearestPackage().generateNamespacePath(false)/]/[usages.supplier.name/].hpp"
	[/if]
	[/for]
	[/if]
	
	[if (OrderedSet{aSignal.includes()->filter(Interface), aSignal.includes()->filter(Signal)}->flatten()->size() > 0)]
	//Forward Declaration for used types
	[for (element : Classifier | OrderedSet{aSignal.includes()->filter(Interface), aSignal.includes()->filter(Signal)}->flatten()->sortedBy(myQualifiedName())) separator ('\n')]
	[if (element.oclIsUndefined() or element.name.oclIsUndefined())]
	// undefined  [element.eClass().name/] ([element.toString()/]) ['Signal '.concat(aSignal.name).concat(': header include failed for undefined ').concat(element.eClass().name).concat(' ').concat(element.toString()).registerError()/]
	[else]
	[if (not element.getNearestPackage().isIgnoreNamespace())]namespace [element.getPackage().generateNamespace(true)/] 
	{
	[/if]
		Signal [element.name.toUpperFirst()/];
	[if (not element.getNearestPackage().isIgnoreNamespace())]}[/if]
	[/if]
	[/for]
	[/if]
	
	// base Signal includes - my custom comment addition
	[if (aSignal.superSignal->isEmpty())]
	#include "uml/[aSignal.getGeneralSuperSignalName()/].hpp"
	[else]
	[for (elements : Classifier| aSignal.superSignal->asOrderedSet()->sortedBy(myQualifiedName()))]
	[if (elements.oclIsUndefined() or elements.name.oclIsUndefined())]
	// undefined superSignal [elements.toString()/]['Signal: '.concat(aSignal.name).concat(': undefined superSignal: ').concat(elements.toString()).registerError()/]
	[else]
	#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.toUpperFirst().concat('.hpp')/]"
	[/if]
	[/for]
	[/if]
	
	[if (not aSignal.interfaceRealization->isEmpty())]
	// Interface realization
	[for (anInterfaceRealization : InterfaceRealization | aSignal.interfaceRealization->asOrderedSet()->sortedBy(myQualifiedName()))]
	[for (aNamedElement : NamedElement | anInterfaceRealization.supplier->select(oclIsUndefined() or name.oclIsUndefined()))]
	// undefined interface realization supplier [aNamedElement.toString()/]['Signal: '.concat(aSignal.name).concat(': undefined interface realization supplier: ').concat(aNamedElement.toString()).registerError()/]
	[/for]
	[for (aNamedElement : NamedElement | anInterfaceRealization.supplier->select(not oclIsUndefined() and not name.oclIsUndefined()))]
	#include "[aNamedElement.getNearestPackage().generateNamespacePath(false)/]/[aNamedElement.name.toUpperFirst()/].hpp"
	[/for]
	[/for]
	[/if]
	
	[if (aSignal.includes()->selectByKind(Enumeration)->size() > 0)]
	// enum includes
	[for (elements : Enumeration | aSignal.includes()->selectByKind(Enumeration)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
	#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.toUpperFirst().concat('.hpp')/]"[/for]
	[/if]
	
	[if (not aSignal.getNearestPackage().isIgnoreNamespace())]
	namespace [aPackage.generateNamespace(false)/]
	{
	[/if]
		Signal [aSignal.name.toUpperFirst()/] [if (aSignal.superSignal->isEmpty())] : virtual public uml::[aSignal.getGeneralSuperSignalName()/] [aSignal.generateInterfaceExtensions()/]
	[else][for (sSignal : Signal | aSignal.superSignal->reject(oclIsUndefined() and name.oclIsUndefined())->asOrderedSet()->sortedBy(myQualifiedName())) before (':') separator (',')]
	virtual public [sSignal.getClassifierName(aSignal, false, sSignal.getNearestPackage().isIgnoreNamespace())/][/for]
	[/if]
		{
			protected:
				[aSignal.name.toUpperFirst()/](){}
	
			public:
				//destructor
				virtual ~[aSignal.name.toUpperFirst()/]() {}
	
				//*********************************
				// Getter Setter
				//*********************************
				[aSignal.ownedAttribute->sortedBy(name).generateAttributeAccessorsDeclaration(false)/]
				[aSignal.getImplicitCompositeOwners()->sortedBy(name).generateCompositeOwnerAttributeAccessorsDeclaration(false)/]
				
			protected:
				//*********************************
				// Members
				//*********************************
				[aSignal.ownedAttribute->sortedBy(name).generateAttributeProtectedMember()/]
				[aSignal.getImplicitCompositeOwners()->sortedBy(name).generateCompositeOwnerAttributeProtectedMember() /]
	
			public:
				//*********************************
				// Union Getter
				//*********************************
				[aSignal.generateUnionGetterDeclaretaion(false)/]
		};
	[if (not aSignal.getNearestPackage().isIgnoreNamespace())]}[/if]
	[endGuard(aSignal)/]
	[/file]
	[/template]
[/comment]