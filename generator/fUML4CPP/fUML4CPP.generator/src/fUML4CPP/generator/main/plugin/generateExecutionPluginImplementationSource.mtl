[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateExecutionPluginImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import fUML4CPP::generator::main::generateOperationExecution /]
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::fUMLCollectionHelper /]
[import fUML4CPP::generator::main::fUMLKeywords /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::profiles::profileHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::profiles::strategyHelper /]

[template public generateExecutionPluginImplSource(aPackage : Package) { packageName : String = aPackage.name.concat('ExecPluginImpl'); }]
[file (aPackage.generateNamespacePath(false).concat('Exec/impl/').concat(packageName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.generateNamespacePath(false)/]Exec/impl/[packageName/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/Bag.hpp"
#include "uml/Activity.hpp"
#include "uml/Element.hpp"

[if (aPackage.getUsedActivities()->size() > 0)]
[generateMainIncludes()/]
[/if]

using namespace [aPackage.generateNamespace(false)/];

//*********************************
// Constructor / Destructor
//*********************************
[packageName/]::[packageName/]()
{
	initialize();
}

[packageName/]::~[packageName/]()
{
}

std::string [packageName/]::eclipseURI()
{
	return "";
}

std::string [packageName/]::eNAME()
{
	return "[aPackage.name/]Exec";
}

std::string [packageName/]::eNS_URI()
{
	return "[aPackage.URI/]";
}

std::string [packageName/]::eNS_PREFIX()
{
	return "[if(not (aPackage.namespace.oclIsUndefined()))][aPackage.namespace.name/][/if]";
}

std::shared_ptr<ecore::EObject> [packageName/]::create(const std::string& name) const
{		
	return nullptr;
}

std::shared_ptr<ecore::EObject> [packageName/]::create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID) const
{
	return nullptr;
}

void [packageName/]::initialize()
{
	[comment initialization of execution locus, factory, executer/]
	[if (aPackage.allOwnedElements()->filter(Activity)->size() > 0)]
	[generateExecutionPluginInitialization()/]
	[/if]

	m_IsInitialized = true;
}

std::shared_ptr<Any> [packageName/]::executeActivity(std::shared_ptr<uml::Activity> activity, std::shared_ptr<std::vector<Any>> parameterList, std::shared_ptr<uml::Element> element)
{
	if(!m_IsInitialized)
	{
		initialize();
	}
[for (act : Activity | aPackage.getUsedActivities()->sortedBy(myQualifiedName()))]
	if (activity == [act.generatePackageGetterCall()/])
	{
		[act.generateGetInputParameter()/]
		[act.generateActivityExecution()/]   
		[act.generateReturnParameter()/]
	}
[/for]
	return nullptr;
}

[/file]
[/template]

[template public generateMainIncludes(aPackage : Package)]
//Metamodel includes
#include "abstractDataTypes/SubsetUnion.hpp"
#include "fUML/Semantics/Loci/LociFactory.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/Loci/Executor.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"

//Semantic Strategy Includes
[if (aPackage.hasChoiceStrategy())][let choiceStrategy : Class = aPackage.getChoiceStrategy()]
#include "[choiceStrategy.getNearestPackage().generateNamespacePath(true)/]Exec/[choiceStrategy.name.toUpperFirst()/].hpp"
[/let][else]
#include "fUML/Semantics/Loci/FirstChoiceStrategy.hpp"
[/if]
[comment] TODO later
[if (aPackage.hasDispatchStrategy())][let dispatchStrategy : Class = aPackage.getDispatchStrategy()]
#include "[dispatchStrategy.getNearestPackage().generateNamespacePath(true)/]Exec/[dispatchStrategy.name.toUpperFirst()/].hpp"
[/let][else]
#include "PSCS/Semantics/StructuredClassifiers/CS_DispatchOperationOfInterfaceStrategy.hpp"
[/if]
[if (aPackage.hasGetNextEventStrategy())][let getNextEventStrategy : Class = aPackage.getGetNextEventStrategy()]
#include "[getNextEventStrategy.getNearestPackage().generateNamespacePath(true)/]Exec/[getNextEventStrategy.name.toUpperFirst()/].hpp"
[/let][else]
#include "fUML/Semantics/CommonBehavior/FIFOGetNextEventStrategy.hpp"
[/if]
[if (aPackage.hasCS_RequestPropagationStrategy())][let cS_RequestPropagationStrategy : Class = aPackage.getCS_RequestPropagationStrategy()]
#include "[cS_RequestPropagationStrategy.getNearestPackage().generateNamespacePath(true)/]Exec/[cS_RequestPropagationStrategy.name.toUpperFirst()/].hpp"
[/let][else]
#include "PSCS/Semantics/StructuredClassifiers/CS_DefaultRequestPropagationStrategy.hpp"
[/if]
[if (aPackage.hasCS_StructuralFeatureOfInterfaceAccessStrategy())][let cS_StructuralFeatureOfInterfaceAccessStrategy : Class = aPackage.getCS_StructuralFeatureOfInterfaceAccessStrategy()]
#include "[cS_StructuralFeatureOfInterfaceAccessStrategy.getNearestPackage().generateNamespacePath(true)/]Exec/[cS_StructuralFeatureOfInterfaceAccessStrategy.name.toUpperFirst()/].hpp"
[/let][else]
#include "PSCS/Semantics/StructuredClassifiers/CS_NameBased_StructuralFeatureOfInterfaceAccessStrategy.hpp"
[/if]
[if (aPackage.hasCS_ConstructStrategy())][let cS_ConstructStrategy : Class = aPackage.getCS_ConstructStrategy()]
#include "[cS_ConstructStrategy.getNearestPackage().generateNamespacePath(true)/]Exec/[cS_ConstructStrategy.name.toUpperFirst()/].hpp"
[/let][else]
#include "PSCS/Semantics/Actions/CS_DefaultConstructStrategy.hpp"
[/if]
[/comment]
//UML includes
#include "uml/Activity.hpp"
#include "uml/Enumeration.hpp"
#include "uml/OpaqueBehavior.hpp"
#include "uml/FunctionBehavior.hpp"
#include "uml/Interface.hpp"
#include "uml/Operation.hpp"
#include "uml/Parameter.hpp"
#include "uml/PrimitiveType.hpp"
#include "uml/umlFactory.hpp"


//Includes of Model locus, package and factory
#include "[aPackage.generateNamespacePath(false)/]Exec/[aPackage.getPackageName()/]Locus.hpp"
#include "[aPackage.generateNamespacePath(false)/]Exec/impl/[aPackage.getPackageName()/]LocusImpl.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.getPackageName()/]Factory.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.getPackageName()/]Package.hpp"

//Includes from owner Classes of executed Activities
[for (act : Activity | aPackage.getUsedActivities()->select(owner.oclIsKindOf(Class))->reject(isDoNotGenerateElement()))]
//#include "[act.owner.oclAsType(Classifier).getNearestPackage().generateNamespacePath(false)/]Exec/[act.owner.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
#include "[act.owner.oclAsType(Classifier).getNearestPackage().generateNamespacePath(false)/]/[act.owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
[/for]

//Includes for packages of executed OpaqueBehaviors
[for (anotherPackage : Package | aPackage.findPackagesForOpaqueBehaviorExecutions()->reject(isDoNotGenerateElement()))]
#include "[anotherPackage.generateNamespacePath(false)/]/[anotherPackage.getPackageName().concat('Package')/].hpp" 
[/for] 

//Includes for packages of executed Operations
[for (anotherPackage : Package | aPackage.allOwnedElements()->filter(Operation)->addAll(aPackage.getOperationExecutionsCOA())->reject(isDoNotGenerateElement()).getNearestPackage()->asSet())]
#include "[anotherPackage.generateNamespacePath(false)/]/[anotherPackage.getPackageName().concat('Package')/].hpp" 
[/for] 

//Includes of packages from parameter types of executed Operations and Activities
[for (pack : Package | aPackage.allOwnedElements()->filter(Operation)->addAll(aPackage.getOperationExecutionsCOA()).ownedParameter.type->reject(isDoNotGenerateElement()).getNearestPackage()->asSet()->addAll(aPackage.allOwnedElements()->filter(Activity).ownedParameter.type->reject(isDoNotGenerateElement()).getNearestPackage()->asSet())->sortedBy(name))]
[if (not (pack.name='StandardProfile'))]
#include "[pack.generateNamespacePath(false)/]/[pack.name.concat('Package')/].hpp"
[/if]
[/for]
[for (typePackage : Package | aPackage.allOwnedElements()->filter(Operation)->addAll(aPackage.getOperationExecutionsCOA()).ownedParameter.type->asSet()->reject(supportedTypes())._package->asSet()->reject(isReflectionModel())->sortedBy(qualifiedName))]
#include "[typePackage.generateNamespacePath(false)/]/[typePackage.getPackageName()/]Package.hpp"
[/for]

//Includes from parameter types of executed Operations and Activities
[if (aPackage.allOwnedElements()->filter(Operation)->addAll(aPackage.getOperationExecutionsCOA())->reject(isDoNotGenerateElement())->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE())).ownedParameter.type->asSet()
	->addAll(aPackage.allOwnedElements()->filter(Activity).ownedParameter.type->asSet())->reject(isDoNotGenerateElement())->filter(PrimitiveType)->size() > 0)]
#include "types/typesPackage.hpp"
[/if]
[for ( type : Type | aPackage.allOwnedElements()->filter(Operation)->addAll(aPackage.getOperationExecutionsCOA())->reject(isDoNotGenerateElement())->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE())).ownedParameter.type->asSet()
	->addAll(aPackage.allOwnedElements()->filter(Activity).ownedParameter.type->asSet())->reject(isDoNotGenerateElement())->sortedBy(qualifiedName))]
[type.generateTypeInclude(type.getNearestPackage(), aPackage)/]
[/for]

[for ( type : Type | aPackage.getActivitiesOwnedByPackage().ownedParameter.type->asSet()->reject(isDoNotGenerateElement())->sortedBy(qualifiedName))]
[type.generateTypeInclude(type.getNearestPackage(), aPackage)/]
[/for]
[/template]

[template public generateGetInputParameter(anActivity : Activity)]
[for (par : Parameter | anActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
//retrieving value for input parameter [anActivity.name/]::[par.name/]
[par.generateCppType(true)/] [par.name.toLowerFirst()/][if (par.upper <> 1)]List[/if] = parameterList->at([par.listNumber(anActivity)/])->get<[par.generateCppType(true)/]>();
[/for]
[/template]

[template public generateExecutionPluginInitialization(aPackage : Package) {locusName : String = aPackage.generateNamespace(false).sanitize() + 'Locus' ;}]
//initialize execution Locus
std::shared_ptr<[locusName/]Impl> locusImpl(new [locusName/]Impl);
locusImpl->setThisLocusPtr(locusImpl);
m_locus = locusImpl;

//initialize Executor
std::shared_ptr<fUML::Semantics::Loci::Executor> m_executor = fUML::Semantics::Loci::LociFactory::eInstance()->createExecutor_as_executor_in_Locus(m_locus);
//initialize ExecutionFactory
std::shared_ptr<fUML::Semantics::Loci::ExecutionFactory> m_factory = fUML::Semantics::Loci::LociFactory::eInstance()->createExecutionFactory_as_factory_in_Locus(m_locus);

[if (aPackage.hasChoiceStrategy())]
[aPackage.getChoiceStrategy().generateStrategyAssignment()/]
[else]
//assign FirstChoiceStrategy to execution factory
m_factory->assignStrategy(fUML::Semantics::Loci::LociFactory::eInstance()->createFirstChoiceStrategy());
[/if]
[comment] TODO: later
[if (aPackage.hasDispatchStrategy())]
[aPackage.getDispatchStrategy().generateStrategyAssignment()/]
[else]
//assign CS_DispatchOperationOfInterfaceStrategy to execution factory
m_factory->assignStrategy(PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createCS_DispatchOperationOfInterfaceStrategy());
[/if]
[if (aPackage.hasGetNextEventStrategy())]
[aPackage.getGetNextEventStrategy().generateStrategyAssignment()/]
[else]
//assign FIFOGetNextEventStrategy to execution factory
m_factory->assignStrategy(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createFIFOGetNextEventStrategy());
[/if]
[if (aPackage.hasCS_RequestPropagationStrategy())]
[aPackage.getCS_RequestPropagationStrategy().generateStrategyAssignment()/]
[else]
//assign CS_DefaultRequestPropagationStrategy to execution factory
m_factory->assignStrategy(PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createCS_DefaultRequestPropagationStrategy());
[/if]
[if (aPackage.hasCS_StructuralFeatureOfInterfaceAccessStrategy())]
[aPackage.getCS_StructuralFeatureOfInterfaceAccessStrategy().generateStrategyAssignment()/]
[else]
//assign CS_NameBased_StructuralFeatureOfInterfaceAccessStrategy to execution factory
m_factory->assignStrategy(PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createCS_NameBased_StructuralFeatureOfInterfaceAccessStrategy());
[/if]
[if (aPackage.hasCS_ConstructStrategy())]
[aPackage.getCS_ConstructStrategy().generateStrategyAssignment()/]
[else]
//assign CS_DefaultConstructStrategy to execution factory
m_factory->assignStrategy(PSCS::Semantics::Actions::ActionsFactory::eInstance()->createCS_DefaultConstructStrategy());
[/if]
[/comment]
[/template]

[template private generateStrategyAssignment(aStrategyClass : Class)]
//assign [aStrategyClass.name.toUpperFirst()/] to execution factory
std::shared_ptr<[aStrategyClass.generateNamespaceName(true)/]> [aStrategyClass.name.toLowerFirst()/](new [aStrategyClass.generateNamespaceName(true)/]());
[aStrategyClass.name.toLowerFirst()/]->setThis[aStrategyClass.name.toUpperFirst()/]Ptr([aStrategyClass.name.toLowerFirst()/]);
m_factory->assignStrategy([aStrategyClass.name.toLowerFirst()/]);
[/template]

[template public generateActivityExecution(anActivity : Activity)]
std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue> > pList(new Bag<fUML::Semantics::CommonBehavior::ParameterValue>());
[for (par : Parameter | anActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name))]
//creating input parameter [anActivity.name/]::[par.name/] 
std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> [par.name/]P = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue();
[par.name/]P->setParameter([par.generatePackageGetterCall()/]);
[if (par.upper = 1)]
[par.generateValue()/]
[else]
Bag<[par.type.generateCppType(true)/]>::iterator [par.name.toLowerFirst()/]Iter = [par.name.toLowerFirst()/]List->begin();
Bag<[par.type.generateCppType(true)/]>::iterator [par.name.toLowerFirst()/]End = [par.name.toLowerFirst()/]List->end();
while ([par.name.toLowerFirst()/]Iter != [par.name.toLowerFirst()/]End)
{
	[par.type.generateCppType(false)/] [par.name.toLowerFirst()/][if (par.upper <> 1)]Temp[/if] = *[par.name.toLowerFirst()/]Iter;
	[par.generateValue()/]
	[par.name.toLowerFirst()/]Iter++;
}
[/if]
pList->push_back([par.name/]P);

[/for]
//executing activity [anActivity.name/]
std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> resultPList = m_locus->getExecutor()->execute([anActivity.generatePackageGetterCall()/], [if (anActivity.owner.oclIsKindOf(Class))]object[else]nullptr[/if], pList);

[/template]

[template private generateValue(aParameter : Parameter)]
[aParameter.generateOutputParameter()/]
[if(aParameter.type.supportedTypes())]
[aParameter.name/]OutValue->setValue([aParameter.name.toLowerFirst()/]);
[else]
[aParameter.name/]OutUmlLinker->setLocus(m_locus);
[aParameter.name/]OutValue->setReferent([aParameter.name/]OutUmlLinker);
[/if]
[aParameter.name/]P->getValues()->push_back([aParameter.name/]OutValue);
[/template]

[template public generateReturnParameter(anActivity : Activity)]
[if (anActivity.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
//The activity has a return parameter
[let par : Parameter = anActivity.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->sortedBy(name)->first()]
[if(par.type.supportedTypes())] [comment Means: Primitive/]
[if (par.upper = 1)]
assert(resultPList->front());
std::shared_ptr<fUML::Semantics::SimpleClassifiers::[par.type.name/]Value> ret = std::dynamic_pointer_cast<fUML::Semantics::SimpleClassifiers::[par.type.name/]Value>(resultPList->front()->getValues()->front());
assert(ret != nullptr);
return eAny(ret->getValue(), [par.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/], false);
[else]
std::shared_ptr<Bag<[par.type.generateCppType(true)/]>> [par.name/](new Bag<[par.type.generateCppType(true)/]>());
std::shared_ptr<Bag<fUML::Semantics::Values::Value>> returnValues = resultPList->front()->getValues();
Bag<fUML::Semantics::Values::Value>::iterator returnValuesIter = returnValues->begin();
Bag<fUML::Semantics::Values::Value>::iterator returnValuesEnd = returnValues->end();
while (returnValuesIter != returnValuesEnd)
{
	std::shared_ptr<[par.type.getValueClass()/]> valueObject = std::dynamic_pointer_cast<[par.type.getValueClass()/]>(*returnValuesIter);
	std::shared_ptr<[par.type.generateCppType(true)/]> value(new [par.type.generateCppType(true)/](valueObject->getValue()));
	[par.name/]->push_back(value);
	returnValuesIter++;
}
return eAny([par.name/], [par.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/], true);
[/if]
[elseif (par.type.oclIsKindOf(Enumeration))]
assert(resultPList->front());
std::shared_ptr<fUML::Semantics::SimpleClassifiers::EnumerationValue> ret = std::dynamic_pointer_cast<fUML::Semantics::SimpleClassifiers::EnumerationValue>(resultPList->front()->getValues()->front());
assert(ret != nullptr);
std::shared_ptr<uml::EnumerationLiteral> literal[par.name.toUpperFirst()/] = ret->getLiteral();
[for (literal : EnumerationLiteral | par.type.oclAsType(Enumeration).ownedLiteral)]
if (literal[par.name.toUpperFirst()/] == [literal.generatePackageGetterCall()/])
{
	return eAny([literal.enumeration.getNearestPackage().generateNamespace(false)/]::[literal.enumeration.name/]::[literal.name.toUpperCase()/], [par.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/], false);
}
[/for]
std::cerr << "unknown literal of [par.type.name/]" << std::endl;
throw "error";
[else]
[if (par.upper = 1)]
assert(resultPList->front());
std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> [par.name/]Value = std::dynamic_pointer_cast<PSCS::Semantics::StructuredClassifiers::CS_Reference>(resultPList->front()->getValues()->front());
std::shared_ptr<[par.type.getNearestPackage().generateNamespace(false)/]::[par.type.name.toUpperFirst()/]Object> [par.name/]UmlLinker = std::dynamic_pointer_cast<[par.type.getNearestPackage().generateNamespace(false)/]::[par.type.name.toUpperFirst()/]Object>([par.name/]Value->getReferent());
return eAny([par.name/]UmlLinker->[par.type.oclAsType(Classifier).UMLValueGetterName()/][if(not (par.upper = 1))]s[/if](), [par.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/], false);
[else]
std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> returnParameter = resultPList->front();
std::shared_ptr<Bag<fUML::Semantics::Values::Value>> returnValues = returnParameter->getValues();
Bag<fUML::Semantics::Values::Value>::iterator valueIter = returnValues->begin();
Bag<fUML::Semantics::Values::Value>::iterator valueEnd = returnValues->end();
std::shared_ptr<Bag<[par.type.generateCppType(true)/]>> returnList(new Bag<[par.type.generateCppType(true)/]>());
while (valueIter != valueEnd)
{
	std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> returnValue = std::dynamic_pointer_cast<PSCS::Semantics::StructuredClassifiers::CS_Reference>(*valueIter);
	std::shared_ptr<[par.type.getNearestPackage().generateNamespace(false)/]::[par.type.name.toUpperFirst()/]Object> returnObject = std::dynamic_pointer_cast<[par.type.getNearestPackage().generateNamespace(false)/]::[par.type.name.toUpperFirst()/]Object>(returnValue->getReferent());
	returnList->push_back(returnObject->[par.type.oclAsType(Classifier).UMLValueGetterName()/]());
	valueIter++;
}
return eAnyBag(returnList, [par.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/]);
[/if]
[/if]
[/let]
[else]
DEBUG_INFO("Activity [anActivity.myQualifiedName()/] does not have any return parameter.")
return nullptr;
[/if]
[/template]

[template public generateExecutionPluginDeinitialization(aPackage : Package)]
/*clearing opaque behaviors from operations*/
[for (anOperation : Operation | aPackage.getOperationExecutionsPackage())]
[anOperation.generatePackageGetterCall()/]->getMethod()->erase(m_[anOperation.getFBPackageElement()/]);
[/for]

//uninitialize execution factory
m_factory->getPrimitiveBehaviorPrototypes()->clear();
m_factory->setLocus(nullptr);

//uninitialize executor
m_executor->setLocus(nullptr);

//uninitialize execution locus
m_locus->setExecutor(nullptr);
m_locus->setFactory(nullptr);
[/template]

[query private findPackagesForOpaqueBehaviorExecutions(aPackage : Package) : OrderedSet(Package) = 
	OrderedSet(Package){
		aPackage.getCallBehaviorActionsWithOB().behavior->reject(isDoNotGenerateElement())->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE())).getNearestPackage(),
		aPackage.getOperationExecutionsAll().method->reject(isDoNotGenerateElement())->filter(OpaqueBehavior)->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE())).getNearestPackage(),
		aPackage.getDecisionNodesWithOB().decisionInput->reject(isDoNotGenerateElement())->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE())).getNearestPackage()
	}->flatten()->sortedBy(name) /]


[query private getOperationExecutionName(anOperation : Operation) : String = 
	anOperation.owner.oclAsType(NamedElement).name.concat('_').concat(anOperation.name.sanitize()).concat(('Execution')) /]

[query private getActivitiesUsedByCallBehaviorAction(aPackage : Package) : Set(Activity) = 
	aPackage.allOwnedElements()->filter(CallBehaviorAction).behavior->reject(oclIsUndefined())->reject(not oclIsKindOf(Activity))->asSet()/]

[query private getActivitiesUsedByDecisionNode(aPackage : Package) : Set(Activity) = 
	aPackage.allOwnedElements()->filter(DecisionNode).decisionInput->reject(oclIsUndefined())->reject(not oclIsKindOf(Activity))->asSet()/]

[query private getActivitiesUsedByOperation(aPackage : Package) : Set(Activity) = 
	aPackage.allOwnedElements()->filter(Operation).method->reject(oclIsUndefined())->reject(not oclIsKindOf(Activity))->asSet()/]

[query private getActivitiesOwnedByPackage(aPackage : Package) : Set(Activity) = 
	aPackage.allOwnedElements()->filter(Activity)->asSet()/]

[query private getUsedActivities (aPackage : Package) : OrderedSet(Activity) = 
	Set{aPackage.getActivitiesUsedByCallBehaviorAction(), aPackage.getActivitiesUsedByDecisionNode(), aPackage.getActivitiesUsedByOperation(), aPackage.getActivitiesOwnedByPackage(), aPackage.getMainActivityAsSet()}->reject(oclIsUndefined())->flatten()->sortedBy(name)/]

[comment Helper query, returns a Set containing the main activity of the model if there is one, or else an empty Set /]
[query private getMainActivityAsSet(aPackage : Package) : Set(Activity) = if(aPackage.hasMainActivity()) then Set{aPackage.getMainActivity()} else Set{} endif /]

[query public listNumber(aParameter : Parameter, anActivity : Activity) : Integer =  
	anActivity.ownedParameter->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::_in))->indexOf(aParameter)-1 /]
	
[query public getOperationExecutionsAll(aPackage : Package) : OrderedSet(Operation) = 
	getOperationExecutionsPackage()->addAll(getOperationExecutionsCOA())->asSet()->sortedBy(qualifiedName) /]

[query public getOperationExecutionsPackage(aPackage : Package) : OrderedSet(Operation) = 
	getPackageOperations()->sortedBy(qualifiedName) /]

[query public getOperationExecutionsCOA(aPackage : Package) : OrderedSet(Operation) = 
	aPackage.allOwnedElements()->filter(CallOperationAction).operation->asOrderedSet()->sortedBy(qualifiedName) /]

[query private rejectClassOperationWithoutMethod(anOperation : Operation) : Boolean = (not owner.oclIsKindOf(Interface)) and (method->isEmpty()) and (not isAbstract)/]