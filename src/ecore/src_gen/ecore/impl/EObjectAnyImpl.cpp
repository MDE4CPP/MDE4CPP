
#include "ecore/impl/EObjectAnyImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>


#include "abstractDataTypes/Union.hpp"


#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"


//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "ecore/ecoreFactory.hpp"
#include "ecore/EObject.hpp"
//Factories and Package includes
#include "ecore/ecorePackage.hpp"

using namespace ecore;

//*********************************
// Constructor / Destructor
//*********************************
EObjectAnyImpl::EObjectAnyImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

EObjectAnyImpl::~EObjectAnyImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete EObjectAny "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
EObjectAnyImpl::EObjectAnyImpl(std::weak_ptr<ecore::EObject> par_eContainer)
:EObjectAnyImpl()
{
	m_eContainer = par_eContainer;
}

EObjectAnyImpl::EObjectAnyImpl(const EObjectAnyImpl & obj): EObjectAnyImpl()
{
	*this = obj;
}

EObjectAnyImpl& EObjectAnyImpl::operator=(const EObjectAnyImpl & obj)
{
	//call overloaded =Operator for each base class
	EObjectImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of EObjectAny 
	 * which is generated by the compiler (as EObjectAny is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//EObjectAny::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy EObjectAny "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_any  = obj.getAny();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> EObjectAnyImpl::copy() const
{
	std::shared_ptr<EObjectAnyImpl> element(new EObjectAnyImpl());
	*element =(*this);
	element->setThisEObjectAnyPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference any */
Any EObjectAnyImpl::getAny() const
{
    return m_any;
}
void EObjectAnyImpl::setAny(Any _any)
{
    m_any = _any;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> EObjectAnyImpl::eContainer() const
{
	if(auto wp = m_eContainer.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void EObjectAnyImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get ecoreFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void EObjectAnyImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("any");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("any")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void EObjectAnyImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	EObjectImpl::loadNode(nodeName, loadHandler);
}

void EObjectAnyImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECTANY_ATTRIBUTE_ANY:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<EObjectAny> _any = std::dynamic_pointer_cast<EObjectAny>( references.front() );
				setAny(_any->getAny());
			}
			
			return;
		}
	}
	EObjectImpl::resolveReferences(featureID, references);
}

void EObjectAnyImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	EObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void EObjectAnyImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<ecore::ecorePackage> package = ecore::ecorePackage::eInstance();
	// Add references
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

std::shared_ptr<EClass> EObjectAnyImpl::eStaticClass() const
{
	return ecore::ecorePackage::eInstance()->getEObjectAny_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any EObjectAnyImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECTANY_ATTRIBUTE_ANY:
			return eAny(getAny(),ecore::ecorePackage::EJAVAOBJECT_CLASS,false); //413
	}
	return EObjectImpl::eGet(featureID, resolve, coreType);
}

bool EObjectAnyImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECTANY_ATTRIBUTE_ANY:
			return getAny() != nullptr; //413
	}
	return EObjectImpl::internalEIsSet(featureID);
}

bool EObjectAnyImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECTANY_ATTRIBUTE_ANY:
		{
			// CAST Any to Any
			Any _any = newValue->get<Any>();
			setAny(_any); //413
			return true;
		}
	}

	return EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
Any EObjectAnyImpl::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;

  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = EObjectImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<ecore::EObjectAny> EObjectAnyImpl::getThisEObjectAnyPtr() const
{
	return m_thisEObjectAnyPtr.lock();
}
void EObjectAnyImpl::setThisEObjectAnyPtr(std::weak_ptr<ecore::EObjectAny> thisEObjectAnyPtr)
{
	m_thisEObjectAnyPtr = thisEObjectAnyPtr;
	setThisEObjectPtr(thisEObjectAnyPtr);
}


