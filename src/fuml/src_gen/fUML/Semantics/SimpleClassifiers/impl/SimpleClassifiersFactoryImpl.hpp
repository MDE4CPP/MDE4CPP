//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_SIMPLECLASSIFIERSFACTORYIMPL_HPP
#define FUML_SEMANTICS_SIMPLECLASSIFIERSFACTORYIMPL_HPP

#include "ecore/impl/EFactoryImpl.hpp"

#include "fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp"

namespace SimpleClassifiers 
{	class BooleanValue;
	class CompoundValue;
	class DataValue;
	class EnumerationValue;
	class FeatureValue;
	class IntegerValue;
	class PrimitiveValue;
	class RealValue;
	class SignalInstance;
	class StringValue;
	class StructuredValue;
	class UnlimitedNaturalValue;
}

namespace fUML::Semantics::SimpleClassifiers 
{
	class SimpleClassifiersFactoryImpl : virtual public ecore::EFactoryImpl , virtual public SimpleClassifiersFactory 
	{
		private:    
			SimpleClassifiersFactoryImpl(SimpleClassifiersFactoryImpl const&) = delete;
			SimpleClassifiersFactoryImpl& operator=(SimpleClassifiersFactoryImpl const&) = delete;

		protected:
			friend class SimpleClassifiersFactory;
			// Constructor
			SimpleClassifiersFactoryImpl();

		public:
			virtual ~SimpleClassifiersFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::BooleanValue> createBooleanValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::DataValue> createDataValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::EnumerationValue> createEnumerationValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::FeatureValue> createFeatureValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::IntegerValue> createIntegerValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::RealValue> createRealValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::SignalInstance> createSignalInstance(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::StringValue> createStringValue(const int metaElementID=-1) const ;
			 
			 virtual std::shared_ptr<fUML::Semantics::SimpleClassifiers::UnlimitedNaturalValue> createUnlimitedNaturalValue(const int metaElementID=-1) const ;
			 
			 

		private:
			static SimpleClassifiersFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_SIMPLECLASSIFIERSFACTORYIMPL_HPP */
