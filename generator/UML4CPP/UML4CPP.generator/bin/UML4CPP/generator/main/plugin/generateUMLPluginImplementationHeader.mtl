[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate plugin class implementation header file
 * 
 */]
[module generateUMLPluginImplementationHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateUMLPluginImplHeader(aPackage : Package)]
[file (aPackage.getPackageName().concat('/impl/').concat(aPackage.name.toUpperFirst()).concat('PluginImpl.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'PluginImpl')/]

#include "[aPackage.getPackageName()/]/[aPackage.name.toUpperFirst()/]Plugin.hpp"

[if (not aPackage.ignoreNamespace())]namespace [aPackage.name/] 
{
[/if]
	class [aPackage.name.toUpperFirst().concat('PluginImpl')/] : virtual public [aPackage.name.toUpperFirst().concat('Plugin')/] 
	{
		public:
			[aPackage.name.toUpperFirst()/]PluginImpl();
			virtual ~[aPackage.name.toUpperFirst()/]PluginImpl();
		
			virtual std::string eclipseURI();
			virtual std::string eNAME();
			virtual std::string eNS_URI();
			virtual std::string eNS_PREFIX();
	
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name) const;
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID = -1) const;
			virtual std::shared_ptr<uml::Factory> getFactory();
			virtual std::shared_ptr<uml::Package> getPackage();
	};
[if (not aPackage.getNearestPackage().ignoreNamespace())]}[/if]
[endGuard(aPackage,'PluginImpl')/]
[/file]
[/template]
