//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_LOCI_EXECUTIONFACTORY_HPP
#define FUML_SEMANTICS_LOCI_EXECUTIONFACTORY_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace fUML::Semantics::CommonBehavior 
{
	class Execution;
}
namespace fUML::Semantics::Loci 
{
	class Locus;
	class SemanticStrategy;
	class SemanticVisitor;
}
namespace uml 
{
	class Behavior;
	class Element;
	class OpaqueBehavior;
	class PrimitiveType;
	class ValueSpecification;
}

// namespace macro header include
#include "fUML/fUML.hpp"



#include "ecore/EModelElement.hpp"


//*********************************
namespace fUML::Semantics::Loci 
{
	
	class FUML_API ExecutionFactory : virtual public ecore::EModelElement
	{
		public:
 			ExecutionFactory(const ExecutionFactory &) {}

		protected:
			ExecutionFactory(){}
			//Additional constructors for the containments back reference
			ExecutionFactory(std::weak_ptr<fUML::Semantics::Loci::Locus> par_locus);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~ExecutionFactory() {}

			//*********************************
			// Operations
			//*********************************
			virtual void addBuiltInType(std::shared_ptr<uml::PrimitiveType> type) = 0;
			
			virtual void assignStrategy(std::shared_ptr<fUML::Semantics::Loci::SemanticStrategy> strategy) = 0;
			
			virtual std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> createExecution(std::shared_ptr<uml::Behavior> behavior, std::shared_ptr<uml::Element> context) = 0;
			virtual std::shared_ptr<uml::PrimitiveType> getBuiltInType(std::string name) = 0;
			virtual std::shared_ptr<fUML::Semantics::Loci::SemanticStrategy> getStrategy(std::string name) = 0;
			virtual int getStrategyIndex(std::string name) = 0;
			
			
			virtual std::shared_ptr<fUML::Semantics::Loci::SemanticVisitor> instantiateVisitor(std::shared_ptr<uml::Element> element) = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<Bag<uml::PrimitiveType>> getBuiltInTypes() const = 0;
			virtual std::weak_ptr<fUML::Semantics::Loci::Locus> getLocus() const = 0;
			virtual void setLocus(std::weak_ptr<fUML::Semantics::Loci::Locus>) = 0;
			
			virtual std::shared_ptr<Bag<fUML::Semantics::Loci::SemanticStrategy>> getStrategies() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			mutable std::shared_ptr<Bag<uml::PrimitiveType>> m_builtInTypes;
			std::weak_ptr<fUML::Semantics::Loci::Locus> m_locus;
			
			mutable std::shared_ptr<Bag<fUML::Semantics::Loci::SemanticStrategy>> m_strategies;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_LOCI_EXECUTIONFACTORY_HPP */
