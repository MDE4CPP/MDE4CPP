[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for name check and qualified name generation
 * 
 */]
[module nameHelper('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/emf/2002/Ecore')]

[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::validation::validateModel /]

[** 
 *  queries to generate qualified name, required for elements without defined name
*/]
[query public myQualifiedName (anElement : NamedElement) : String = if oclIsUndefined() then anElement.handleUndefinedElement() else myPinName().sanitize() endif /] 
[query private myPinName (anElement : NamedElement) : String = if(oclIsKindOf(Pin)) then eClass().name.concat('_').concat(owner.owner.oclAsType(NamedElement).name).concat('_').concat(owner.oclAsType(NamedElement).name).concat('_').concat(name) else myElementQualifiedName() endif /]
[query private myElementQualifiedName (anElement : NamedElement) : String = if (namespace.oclIsUndefined() or ''=namespace) and (not owner.oclIsUndefined()) and (not owner.oclAsType(NamedElement).qualifiedName.oclIsUndefined()) and (not (qualifiedName.oclIsUndefined())) then (owner.oclAsType(NamedElement).myQualifiedName()).concat('_').concat(eClass().name).concat('_').concat(qualifiedName).substituteAll('.', '_') else myLiteralSpecificationName() endif /]
[query private myLiteralSpecificationName(anElement :NamedElement) : String = if (oclIsKindOf(LiteralSpecification)) then if (owner.oclIsTypeOf(ConnectorEnd)) then myValuSpecName().concat('_').concat(owner.oclAsType(ConnectorEnd).myQualifiedName()) else myValuSpecName().concat('_').concat(owner.mySlotName())endif else myValuSpecName()endif /]
[query private mySlotName(anElement : Element) : String = if (oclIsTypeOf(Slot)) then oclAsType(Slot).definingFeature.name else myOwnerName() endif /]
[query private myValuSpecName (anElement : NamedElement) : String = if(oclIsKindOf(ValueSpecification)) then owner.myOwnerName().concat('_').concat(eContainingFeature().name).concat('_').concat(anElement.eClass().name) else myParameterReturnName() endif /]
[query private myOwnerName (anElement : Element) : String = if(oclIsKindOf(NamedElement)) then oclAsType(NamedElement).myQualifiedName() else owner.myOwnerName() endif /]
[query private myParameterReturnName(anElement : NamedElement) : String = if(oclIsKindOf(Parameter) and (name.oclIsUndefined() or ''=name) and (oclAsType(Parameter).direction = ParameterDirectionKind::return) ) then owner.oclAsType(NamedElement).myQualifiedName().concat('return') else myParameterName() endif /]
[query private myParameterName(anElement : NamedElement) : String = if(oclIsKindOf(Parameter)  and not((oclAsType(Parameter).direction = ParameterDirectionKind::return)) ) then owner.oclAsType(NamedElement).myQualifiedName().concat('_').concat(myName()) else myAssociationName() endif /]
[query private myAssociationName(anElement : NamedElement) : String = if(oclIsKindOf(Association) and (name.oclIsUndefined() or ''=name)) then 'A_'.concat(oclAsType(Association).memberEnd->first().myPropertyName()).concat('_').concat(oclAsType(Association).memberEnd->last().myPropertyName()) else myObjectFlowName() endif/]
[query private myPropertyName(aProperty : Property) : String = if(name.oclIsUndefined() or qualifiedName.oclIsUndefined() or '' = name) then aProperty.type.myQualifiedName().toLowerFirst() else aProperty.type.myQualifiedName().concat('_').concat(aProperty.name) endif /] 
[query private myObjectFlowName(anElement : NamedElement) : String = if(oclIsKindOf(ObjectFlow) and (name.oclIsUndefined() or ''=name)) then 'OF_'.concat(oclAsType(ObjectFlow).source.myQualifiedName()).concat('_').concat(oclAsType(ObjectFlow).target.myQualifiedName()) else myControlFlowName() endif/]
[query private myControlFlowName(anElement : NamedElement) : String = if(oclIsKindOf(ControlFlow) and (name.oclIsUndefined() or ''=name)) then 'CF_'.concat(oclAsType(ControlFlow).source.myQualifiedName()).concat('_').concat(oclAsType(ControlFlow).target.myQualifiedName()) else myExtensionEndName() endif/]
[query private myExtensionEndName(anElement : NamedElement) : String = if (oclIsKindOf(ExtensionEnd)) then 'ExtensionEnd'.concat('_').concat(name).concat('_').concat(oclAsType(ExtensionEnd).type.myQualifiedName()) else myAssOwnedPropName() endif /]
[query private myAssOwnedPropName(anElement : NamedElement) : String = if(oclIsKindOf(Property) and (name.oclIsUndefined() or ''=name) and ( not oclAsType(Property).association.oclIsUndefined()) ) then oclAsType(Property).association.myQualifiedName().concat('_').concat(oclAsType(Property).type.name.toLowerFirst()) else myOperationName() endif /]
[query private myOperationName(anElement : NamedElement) : String = if (oclIsKindOf(Operation)) then anElement.oclAsType(Operation).myNameOperationName2().concat('_').concat(anElement.oclAsType(Operation).generateParameterTypeList()) else myRedefinedTemplateSignature() endif /]
[query private myNameOperationName2(anOperation : Operation) : String = if ((anOperation.oclIsUndefined()) or (''=anOperation.qualifiedName) or (anOperation.name.oclIsUndefined())) then handleUndefinedElement() else anOperation.qualifiedName.concat('_').concat(anOperation.generateParameterTypeList()) endif /] 
[query private myRedefinedTemplateSignature(anElement : NamedElement) : String = if (oclIsKindOf(RedefinableTemplateSignature) and (not owner.oclIsUndefined())) then owner.oclAsType(NamedElement).myQualifiedName().concat('_RedefinableTemplateSignature') else myInterfaceRelationName() endif /]
[query private myInterfaceRelationName(anElement : NamedElement) : String = if (oclIsKindOf(InterfaceRealization) and (name.oclIsUndefined() or '' = name)) then 'IR_'.concat(oclAsType(InterfaceRealization).contract.myQualifiedName()).concat('_').concat(oclAsType(InterfaceRealization).client->asOrderedSet()->first().myQualifiedName()) else myDependencyName() endif /]
[query private myDependencyName(anElement : NamedElement) : String = if (oclIsKindOf(Dependency)) then 'Dependency_'.concat(oclAsType(Dependency).client->asOrderedSet()->first().myQualifiedName()).concat('_').concat(oclAsType(Dependency).supplier->asOrderedSet()->first().myQualifiedName()) else myGeneralName() endif /]
[query private myGeneralName(anElement : NamedElement) : String = if (oclIsUndefined()) then handleUndefinedElement() else if (anElement.qualifiedName.oclIsUndefined() or anElement.qualifiedName='' ) then owner.myOwnerName().concat('_').concat(anElement.eClass().name).concat(anElement.owner.allOwnedElements()->asOrderedSet()->indexOf(anElement).toString()) else anElement.qualifiedName endif endif /]
[query public myQualifiedName (aConnectorEnd : ConnectorEnd) : String = if oclIsUndefined() then handleUndefinedElement() else (aConnectorEnd.owner.oclAsType(NamedElement).qualifiedName.concat('_ConnectorEnd_').concat(aConnectorEnd.definingEnd.memberName())).sanitize() endif /]

[**
 *  queries to determinate name of NamedElement elements
*/]
[query public myName( anElement: NamedElement) : String = if ( (anElement.oclIsUndefined()) or (anElement.name.oclIsUndefined())) then handleUndefinedElement() else name endif /]
[**
 * queries to generate getter and setter names
*/]
[query public setterName(feature : StructuralFeature) : String = 'set'.concat(name.toUpperFirst()) /]
[query public getterName(feature : StructuralFeature) : String = getterPrefix().concat(name.toUpperFirst()) /]
[query public getterPrefix(feature : StructuralFeature) : String = if feature.type.name = 'Boolean' then 'is' else 'get' endif/]

[**
 * query to replace characters, which are not permitted in names of classes, variable, macros, ... in C++
*/]
[query public sanitize(str : String) : String = if ((str.oclIsUndefined()) or (str.size()<=0)) then '' else str.replaceAll(' ', '_').replaceAll('-', '_').replaceAll('::', '_').substituteAll('.', '_') endif/] 

[**
* query to transform namespace characters
* - Namespace of UML and Ecore model elements should be spelled with lower characters, namespaces other models will be not changed
* - This is necessary, because ecore.ecore/ uml.ecore and ecore.uml/uml.uml use different spelling of uml/ecore 
*/]
[query public myNamespaceName(aNamespace : Namespace) : String = if (aNamespace.name = keyUML() or aNamespace.name = keyEcore()) then aNamespace.name.toLowerCase() else aNamespace.name endif /]

[**
 * query generate package name
 * - add suffix 'Reflection' to ecore/ uml/ primitiveTypes model name 
 * - otherwise original package name
*/]
[query public getPackageName(pack : Package) : String = if (pack.name = keyUML()) or (pack.name = keyEcore()) or (pack.name = keyPrimitiveTypes()) then pack.name.toLowerCase().concat('Reflection') else pack.name endif /] 

[**
 * generate name of classifier with namespace, if namespace of 'aClassifier' is different to classifier of 'base'
 * if namespaces are equal, namespace is not necessary and is not generated
 * if flag 'ignoreNamespace' is true, namespace is also not generated 
*/]
[query public getClassifierName(aClassifier : Classifier, base: Classifier, ignoreNamespace : Boolean) : String = if (aClassifier.namespace.myNamespaceName() = base.namespace.myNamespaceName() or ignoreNamespace) then aClassifier.name.toUpperFirst() else aClassifier.namespace.myNamespaceName().concat('::').concat(aClassifier.name.toUpperFirst()) endif/]

[**
 *  generate substring of a qualified name, name is made up of parameter type names
*/]
[template private generateParameterTypeList(anOperation : Operation)]
[for (sParameter : Parameter | anOperation.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator ('_')][sParameter.type.name/][/for]
[/template]

[**
 * generate meta class name
*/]
[query public getMetaClassName(anElement : Element) : String = if anElement.getNearestPackage().name = anElement.eClass().ePackage.name then anElement.eClass().name else anElement.eClass().ePackage.name.concat('::').concat(anElement.eClass().name) endif /]

[query public getStaticClassID_ID(aClass : Class) : String = aClass._package.allOwnedElements()->asOrderedSet()->indexOf(aClass)/]
[query public getStaticInterfaceID_ID(aInterface : Interface) : String = aInterface._package.allOwnedElements()->asOrderedSet()->indexOf(aInterface)/]

[** 
 * generate member names for package generation 
  */]
[query private myQualifiedTypeName(anElement : NamedElement, generated: Boolean) : String = if (anElement.oclIsUndefined()) then
		'' 
	else
 		if (anElement.eContainer().oclIsUndefined()) then
			anElement.getMemberName().toUpperCase()
		else 
			if anElement.eContainer().oclIsKindOf(Package) then
				if(generated) then
					anElement.eContainer().oclAsType(Package).myQualifiedTypeNamePackage().concat(anElement.getMemberName().toUpperCase())
				else
					anElement.eContainer().oclAsType(Package).myQualifiedTypeNamePackage()
				endif
			else
				if anElement.eContainer().oclIsKindOf(Operation) then
					anElement.eContainer().oclAsType(NamedElement).myQualifiedTypeName(false)
				else
					if anElement.eContainer().oclIsKindOf(NamedElement) then
						anElement.eContainer().oclAsType(NamedElement).myQualifiedTypeName(false).concat(anElement.getMemberName().toUpperCase())
					else
						anElement.handleUndefinedElement()
					endif
				endif
			endif  	
		endif
	endif/]

[query public isReflectionModel(aPackage : Package) : Boolean = if ((aPackage.name='UML') or (aPackage.name='Ecore') or (aPackage.name='PrimitiveTypes') or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())) then true else false endif /]

[query public myQualifiedTypeNamePackage(anElement : Package) : String = if (anElement.oclIsUndefined() ) then
		''  
	else
 		if (not (anElement.eContainer().oclIsUndefined())) then
			anElement.eContainer().oclAsType(Package).myQualifiedTypeNamePackage()
		else
			if (not anElement.isReflectionModel()) then
				anElement.name.concat('::').concat(anElement.name.toUpperFirst()).concat('Package::')
			else
				anElement.name.toLower().concat('::').concat(anElement.name.toLower().toUpperFirst()).concat('Package::')
			endif
		endif
	endif/]

[query private getStaticAttributeIDName(anENamedElement : NamedElement) : String = anENamedElement.getMemberName().toUpperCase() /]

[query public getMemberName(anENamedElement : NamedElement) : String = if (anENamedElement.oclIsUndefined()) then '' else if (anENamedElement.oclIsKindOf(Classifier)) then anENamedElement.oclAsType(Classifier).getMemberNameCL() else anENamedElement.getMemberNameStructFeat()endif endif/]

[query private getMemberNameStructFeat(anENamedElement : NamedElement) : String = if (anENamedElement.oclIsUndefined()) then '' else if (anENamedElement.oclIsKindOf(StructuralFeature)) then anENamedElement.oclAsType(StructuralFeature).getMemberNameST() else anENamedElement.getMemberNameOperation() endif endif/]
[query private getMemberNameOperation(anENamedElement : NamedElement) : String = if (anENamedElement.oclIsUndefined()) then ''else if (anENamedElement.oclIsKindOf(BehavioralFeature)) then anENamedElement.oclAsType(BehavioralFeature).getMemberNameOP() else anENamedElement.getMemberNameGeneral() endif endif/]
[query private getMemberNameGeneral(anENamedElement : NamedElement) : String = if (anENamedElement.oclIsUndefined() or anENamedElement.name.oclIsUndefined()) then '' else anENamedElement.name.toLowerFirst().concat('_Element') endif/]

[query private getMemberNameCL(anEClassifier : Classifier) : String = if (anEClassifier.oclIsUndefined()) then '' else anEClassifier.name.toLowerFirst().concat('_Class') endif/]
[query private getMemberNameST(aStructural : StructuralFeature) : String = if (aStructural.oclIsUndefined()) then '' else aStructural.eContainer().oclAsType(NamedElement).myName().toLowerFirst().concat('_Attribute_').concat(aStructural.name.toLowerFirst()) endif/]
[query private getMemberNameOP(aOperation : BehavioralFeature) : String = if (aOperation.oclIsUndefined()) then '' else aOperation.eContainer().oclAsType(NamedElement).myName().toLowerFirst().concat('_Operation_'.concat(aOperation.name.toLowerFirst()).concat(aOperation.parameterListName())) endif/]

[query private parameterListName(aOperation : BehavioralFeature) : String = if (aOperation.oclIsUndefined()) then '' else if aOperation.ownedParameter->notEmpty() then aOperation.singlemultipleParameter() else '' endif endif/]
[** generate ParameterList similar to ecore. 
 * todo: use all parameters --> similar for ecore
*/]
[query private singlemultipleParameter(aOperation : BehavioralFeature) : String = if (( aOperation.oclIsUndefined() ) or (aOperation.ownedParameter->reject(p :Parameter | (p.direction = ParameterDirectionKind::return))->size() = 0  )) then 
		'' 
	else 
		if ( aOperation.ownedParameter->reject(p :Parameter | (p.direction = ParameterDirectionKind::return))->size() > 1 ) then
			'_'.concat(aOperation.ownedParameter->reject(p :Parameter | (p.direction = ParameterDirectionKind::return))->first().parameterType().concat('_').concat(aOperation.ownedParameter->reject(p :Parameter | (p.direction = ParameterDirectionKind::return))->last().parameterType())) 
		else 
			'_'.concat(aOperation.ownedParameter->reject(p :Parameter | (p.direction = ParameterDirectionKind::return))->first().parameterType()) 
		endif 
	endif/]
[query private parameterType(aParameter : Parameter) : String = if ( (aParameter.oclIsUndefined()) or (aParameter.type.oclIsUndefined()) ) then '' else aParameter.type.myName() endif/] 

[query public getStaticClassID_Name(aNamedElement : NamedElement) : String = if ((aNamedElement.oclIsUndefined()) or (aNamedElement.name.oclIsUndefined())) then '' else ', '.concat(aNamedElement.myQualifiedTypeName(true)) endif/]

[query public getGeneralSuperClassName(aClass : Class) : String = if (aClass.oclIsKindOf(Stereotype)) then 'Stereotype' else 'Element' endif /]
[query public getGeneralSuperClassName(aInterface : Interface) : String = 'Element' /]

[**
 * generate member name based on myQualifiedName
*/]
[query public memberName(anElement : NamedElement) : String = anElement.myQualifiedName().sanitize().substituteAll('.', '_').toLowerFirst()/]
[query public memberName(aConnectorEnd : ConnectorEnd) : String = aConnectorEnd.myQualifiedName().sanitize().substituteAll('.', '_').toLowerFirst()/]
[** 
 *  create error for an undefined element (in special for elements, which are valid but have invalid name
*/]
[template public handleUndefinedElement(anElement : Element)]
['UML4CPP_Generation Error: undefined element found '.concat(anElement.toString()).registerError()/]
[/template]
