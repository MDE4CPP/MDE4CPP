plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.5"
}

description 'Compile task for project: TestApp_umlTests'

task compileTestApplicationForUmlTests( type: tui.sse.mde4cpp.MDE4CPPCompile ) {
	group 'umlTests'
	description 'compile TestApplicationForumlTests'

	projectFolder = file( '.' )

	inputs.files( fileTree( '.' ) {
        exclude '.cmake/**'
    } )
	if( !file( '.' + File.separator + '.cmake' + File.separator ).exists() ) {
		outputs.upToDateWhen { false }
	}
	outputs.file file( System.getenv( 'MDE4CPP_HOME' ) + File.separator + 'application' + File.separator + 'bin' + File.separator + 'TestApp_umlTests.exe' )
	outputs.file file( System.getenv( 'MDE4CPP_HOME' ) + File.separator + 'application' + File.separator + 'bin' + File.separator + 'TestApp_umlTestsd.exe' )

	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName( 'compileEcore', true )
	dependsOn ecore
	inputs.files( ecore.outputs )

	// dependency to model 'uml'
	def uml = getRootProject().getTasksByName( 'compileUml', true )
	dependsOn uml
	inputs.files( uml.outputs )

	// dependency to model 'ecoreReflection'
	def ecoreReflection = getRootProject().getTasksByName( 'compileEcoreReflection', true )
	dependsOn ecoreReflection
	inputs.files( ecoreReflection.outputs )

	// dependency to model 'primitivetypesReflection'
	def primitivetypesReflection = getRootProject().getTasksByName( 'compilePrimitivetypesReflection', true )
	dependsOn primitivetypesReflection
	inputs.files( primitivetypesReflection.outputs )

	// dependency to model 'umlReflection'
	def umlReflection = getRootProject().getTasksByName( 'compileUmlReflection', true )
	dependsOn umlReflection
	inputs.files( umlReflection.outputs )
}

task clean {
	doFirst {
		def cmakeFolder = file( '.' + File.separator + '.cmake/' )
		if( cmakeFolder.exists() ) {
    		delete cmakeFolder.absolutePath
   			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
