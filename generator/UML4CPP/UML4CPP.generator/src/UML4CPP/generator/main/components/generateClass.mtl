[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Class artefacts
 * 
 */]
[module generateClass('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateConstraint /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::components::generateInterface /]
[import UML4CPP::generator::main::components::generateStereotype /]
[import UML4CPP::generator::main::components::generateEnumeration /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::IDHelper /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::profiles::strategyHelper /]
[import UML4CPP::generator::main::helpers::isGeneratableHelper /]

[** 
 * get all classes that has parts or ports of type aClass (= composite properties; attributes connected to a composition association are rejected)
*/]
[query public getCompositePropertiesOfType(owningClass : Class, compositeType : Class) : Set(Property) = owningClass.getAllAttributes()->select(type = compositeType and isComposite and association.oclIsUndefined())->asOrderedSet()->sortedBy(myQualifiedName()) /]
[query private hasCompositePropertiesOfType(owningClass : Class, compositeType : Class) : Boolean = getCompositePropertiesOfType(compositeType)->size() > 0 /]
[query public getImplicitCompositeOwners(aClass : Class) : Set(Class) = aClass.getRootPackage().allOwnedElements()->filter(Class)->select(hasCompositePropertiesOfType(aClass))->asOrderedSet()->sortedBy(myQualifiedName())/]
[query public getExplicitCompositeOwners(aClass : Class) : Set(Class) = aClass.getCompositionsToClass().getCompositeProperty(aClass).opposite->reject(oclIsUndefined()).type->filter(Class)->asOrderedSet()->sortedBy(myQualifiedName())/]
[query public hasOwnerProperty(aClass : Classifier, ownerClass : Class) : Boolean = (aClass.attribute->select(type = ownerClass)->size() > 0) /]
[query public getOwnerProperties(aClass : Classifier, ownerClass : Class) : OrderedSet(Property) = aClass.attribute->select(type = ownerClass)->sortedBy(qualifiedName)/]

[** 
 * get all associations where aClass is memberType
*/]
[query private getAssociationsToClass(aClass : Class) : Set(Association) = aClass.getNearestPackage().ownedMember->select(oclIsKindOf(Association))->asOrderedSet() /]
[query private isCompositionForClass(anAssociation : Association, aClass : Class) : Boolean = anAssociation.memberEnd->select(type = aClass and isComposite and (not owner.oclIsKindOf(Association)))->size() > 0/]
[query public getCompositeProperty(anAssociation : Association, aClass : Class) : Property = anAssociation.memberEnd->select(type = aClass and isComposite and (not owner.oclIsKindOf(Association)))->first() /]
[query public getCompositionsToClass(aClass : Class) : Set(Association) = getAssociationsToClass()->select(isCompositionForClass(aClass))->asOrderedSet()->sortedBy(myQualifiedName()) /]

[**
 * template to generate create function declarations
*/]
[template public generateClassCreate(aClass : Class,impl : Boolean)]
//START Create methods for class [aClass.name/]
virtual std::shared_ptr<[aClass.generateCppType(true)/]> create[aClass.name.toUpperFirst()/](const int metaElementID = [aClass.getNearestPackage().name/]Package::[aClass.getMemberName().toUpperCase()/]) const [abstractSuffix(impl)/];
[for (anAssociation : Association | aClass.getCompositionsToClass())] [comment for each association, that is a composition to aClass/]
	[let containerProperty : Property = anAssociation.getCompositeProperty(aClass)]
		[if (not containerProperty.opposite.oclIsUndefined())]
			[let containmentProperty : Property = containerProperty.opposite]
virtual std::shared_ptr<[aClass.generateCppType(true)/]> create[aClass.name.toUpperFirst()/]_as_[containerProperty.name/]_in_[containmentProperty.type.name.toUpperFirst()/]([containmentProperty.generateCppType()/] par_[containmentProperty.name.toLowerFirst()/], const int metaElementID = [aClass.getNearestPackage().name/]Package::[aClass.getMemberName().toUpperCase()/]) const [abstractSuffix(impl)/] ; 
			[/let]
		[/if]
	[/let]
[/for]
[for (compositeOwnerClass : Class | aClass.getImplicitCompositeOwners())] [comment for each class that has composite properties of type aClass/]
[for (compositeProperty : Property | compositeOwnerClass.getCompositePropertiesOfType(aClass))] [comment for each composite property that compositeOwnerClass has/]
virtual std::shared_ptr<[aClass.generateCppType(true)/]> create[aClass.name.toUpperFirst()/]_as_[compositeProperty.name/]_in_[compositeOwnerClass.name.toUpperFirst()/](std::weak_ptr<[compositeOwnerClass.generateCppType(true)/]> par_[compositeOwnerClass.name.toLowerFirst()/], const int metaElementID = [aClass.getNearestPackage().name/]Package::[aClass.getMemberName().toUpperCase()/]) const [abstractSuffix(impl)/] ;
[/for]
[/for]
//END Create methods for class [aClass.name/]

[/template]
[**
 * generate static meta data:
 * - index of class
 * - feature count
 * - operation count
*/]
[template public generateStaticClassID(aClass : Class)]
//Class [aClass.generateNamespaceName(true)/]
static const long long [aClass.getMemberName().toUpperCase()/] = [aClass.transformType().generatePolynomialRollingHash()/];
static const unsigned int [aClass.getMemberName().toUpperCase()/]_FEATURE_COUNT = [aClass.allFeatures()->size()/];
static const unsigned int [aClass.getMemberName().toUpperCase()/]_OPERATION_COUNT = [aClass.ownedOperation->size()/];
[/template]


[**
 * generate static meta data for all classes in a package:
 * - index of class
 * - feature count
 * - operation count
*/]
[template public generateStaticPackageIDs(aPackage : Package)]
[for (c : Class | aPackage.ownedElement->selectByType(Class)->reject(isDoNotGenerateElement())->sortedBy(name))]
	[generateStaticClassID(c)/]
	[comment  Properties of c/]
	[for (aProperty : Property | c.ownedAttribute) before('//Properties\n')]
	static const long long [aProperty.getMemberName().toUpperCase()/] = [aProperty.generateNamespaceName(true).generatePolynomialRollingHash()/];
	[/for]
	[comment TODO Notwendig? Hierfür werden keine Getter generiert/]
	[comment  Properties for compositions of c/]
	[for (anAssociation : Association | c.getCompositionsToClass()) before('//Properties from compositions\n')]
		[let containerProperty : Property = anAssociation.getCompositeProperty(c)]
			[if (not containerProperty.opposite.oclIsUndefined())]
				[let containmentProperty : Property = containerProperty.opposite]
	static const long long [containerProperty.name.toUpperCase()/]_[containmentProperty.name.toUpperCase()/] = [containerProperty.name.toUpperCase().concat('_').concat(containmentProperty.name.toUpperCase()).generatePolynomialRollingHash()/];
				[/let]
			[/if]
		[/let]
	[/for]
	[comment  Properties of composite owners of c (i.e. back references to classes that have parts and/or ports of type c)/]
	[for (compositeOwnerClass : Class | c.getImplicitCompositeOwners()) before('//Properties for composite owners\n')]
	//Property [compositeOwnerClass.name.toLowerFirst()/]
	static const long long [c.name.toUpperCase()/]_ATTRIBUTE_[compositeOwnerClass.name.toUpperCase()/] = [c.generateNamespaceName(true).concat('::').concat(compositeOwnerClass.name.toLowerFirst()).generatePolynomialRollingHash()/];
	[/for]
	[comment  Operations of c/]
	[for (anOperation : Operation | c.ownedOperation) before('//Operations\n')]
	//[anOperation.generateQualifiedNameWithSignature()/]
	static const long long [anOperation.getMemberName().toUpperCase()/] = [anOperation.generateQualifiedNameWithSignature().generatePolynomialRollingHash()/];
	[/for]
[/for]
[for (aClass : Class | aPackage.allOwnedElements()->selectByType(Stereotype)->reject(isDoNotGenerateElement())->sortedBy(name)->reject(name.oclIsInvalid() or name = ''))]
	[generateStaticClassID(aClass)/]
[/for]
[for (anInterface :Interface | aPackage.allOwnedElements()->selectByType(Interface)->reject(isDoNotGenerateElement())->sortedBy(name)->reject(name.oclIsInvalid() or name = ''))]
	[generateStaticInterfaceID(anInterface)/]
[/for]
[for (anEnumeration : Enumeration | aPackage.allOwnedElements()->selectByType(Enumeration)->reject(isDoNotGenerateElement())->sortedBy(name)->reject(name.oclIsInvalid() or name = ''))]
	[generateStaticEnumerationID(anEnumeration)/]
[/for]

[/template]

[**
 * generate creation of meta model instance for an Class element
 * 
 * this includes:
 * - creation of class
 * - creation of class constraints
*/]
[template public generateClassCreation(aClass : Class)]
[aClass.memberName()/] = factory->createClass_as_ownedType_in_Package([aClass.ancestors(Package)->first().memberName()/], [aClass._package.generateNamespace(true)/]::[aClass._package.myNamespaceName()/]Package::[aClass.getMemberName().toUpperCase()/]);
[if (aClass.ownedRule->size() > 0)]
//constraints
[for (aConstraint : Constraint | aClass.ownedRule->sortedBy(name)) separator('\n')]
[aConstraint.generateConstraintCreation()/]
[/for][/if]
[/template]

[**
 * generate initialization of meta model instance for an Class element
 * 
 * this includes:
 * - set class name
 * - set isAbstract flag
 * - create and initialize generalization
*/]
[template public generateClassInitialization(aClass : Class)]
[aClass.memberName()/]->setName("[aClass.name/]");
[aClass.memberName()/]->setIsAbstract([aClass.isAbstract/]);
[for (superClass : Class | aClass.superClass->asOrderedSet()->sortedBy(myQualifiedName())) before ('\n') separator ('\n')]
gen = uml::umlFactory::eInstance()->createGeneralization_as_generalization_in_Classifier([aClass.generatePackageGetterCall(aClass)/]);
gen->setGeneral([superClass.generatePackageGetterCall(aClass)/]);
[/for]
[aClass.generateStereotypeApplication()/]
[/template]

[**
 * generate function declaration for getThisPtr and setThisPtr functions
*/]
[template public generateThisPtrFunctionDeclaration(aClass : Class)]
virtual std::shared_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyGetterName()/]();
virtual void [generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/]);
[/template]

[**
 * generate function implementation for getThisPtr and setThisPtr functions
*/]
[template public generateGetThisPtrCPP(aClass: Class)]
std::shared_ptr<[aClass.name.toUpperFirst()/]> [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertyGetterName()/]()
{
	return m_[generateGetThisPtrPropertyName()/].lock();
}
void [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/])
{
	m_[generateGetThisPtrPropertyName()/] = [generateGetThisPtrPropertyName()/];
[for (superClass : Class | aClass.superClass->asOrderedSet()->sortedBy(name))]
	[superClass.generateGetThisPtrPropertySetterName()/]([aClass.generateGetThisPtrPropertyName()/]);
[/for]
[if (aClass.superClass->isEmpty() and not aClass.oclIsKindOf(Stereotype))]
	setThisElementPtr([aClass.generateGetThisPtrPropertyName()/]);
[elseif (aClass.superClass->isEmpty() and aClass.oclIsKindOf(Stereotype))]
	setThisStereotypePtr([aClass.generateGetThisPtrPropertyName()/]);
[/if]
}
[/template]

[**
 * queries for thisPtrNames
*/]
[query public generateGetThisPtrPropertyName(aClass : Class) : String = 'this'.concat(aClass.name.toUpperFirst()).concat('Ptr')/]
[query public generateGetThisPtrPropertySetterName(aClass : Class) : String = 'set'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]
[query public generateGetThisPtrPropertyGetterName(aClass : Class) : String = 'get'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]

[**
 * queries for retireving the Package of a Class
*/]
[query public getPackage(aPackagedElement : PackageableElement) : Package = aPackagedElement.owner.oclAsType(Package) /]
[query public getRootPackage(aPackagedElement : PackageableElement) : Package = if(aPackagedElement.getPackage().getSuperPackage().oclIsUndefined()) then aPackagedElement.getPackage() else aPackagedElement.getPackage().getRootPackage() endif /]

[**
 * queries if aClass realizes anInterface directly
*/]
[query public realizesInterface(aClass : Class, anInterface : Interface) : Boolean =
	aClass.interfaceRealization.supplier->select(supplier : NamedElement | supplier.oclIsKindOf(Interface) and supplier.oclAsType(Interface)=anInterface)->size() > 0 /]

[**
 * queries a Set containing aClass, if aClass directly realizes anInterface or a Set of all (nearest) base classes of aClass that realize anInterface
*/]
[query public getRealizingBaseClasses(aClass : Class, anInterface : Interface) : Set(Class) = 
	if(aClass.realizesInterface(anInterface)) then Set{aClass} 
	else aClass.general->filter(Class).getRealizingBaseClasses(anInterface)->flatten()->asSet()
	endif /]


[**
 * queries if aClassifier inherits from baseClassifier (directly or indirectly
*/]
[query public inheritsFrom(aClassifier : Classifier, baseClassifier : Classifier) : Boolean = 
	if(aClassifier.general->size() > 0 ) then if(aClassifier.general->includes(baseClassifier)) then true else aClassifier.general.inheritsFrom(baseClassifier) endif else false endif/]



[**
 * Templates and Queries for generating the Subset/Union functionalities of a Class
*/]
[template public generateUnionGetterCpp(aClass : Class)]
[aClass.getUnionProperties()->sortedBy(name).generateUnionGetterCpp(aClass)/]

[/template]

[template public generateUnionGetterCpp(aProperty : Property, aClass: Class) ? (aProperty.isUnion())]
[aProperty.generateCppType()/] [aClass.name.toUpperFirst()/]Impl::[aProperty.getterName()/]() const
{
[if (not (aProperty.upper = 1))]
	if(m_[aProperty.name/] == nullptr)
	{
		[aProperty.generateContainerPropertyInit()/]
		[aProperty.generateSubsetUnionInit()/]
	}
[/if]
	return m_[aProperty.name/];
}


[/template]

[template public generateUnionGetterDeclaretaion(aClass : Class, impl : Boolean)]
[aClass.getUnionProperties()->sortedBy(name).generateUnionGetterDeclaretaionBag(impl)/]
[/template]

[template public generateUnionGetterDeclaretaionBag(aProperty : Property, impl : Boolean) ? (isUnion())]
virtual [aProperty.generateCppType()/] [aProperty.getterName()/]() const [abstractSuffix(impl)/];

[/template]

[query public getUnionProperties(aClass : Class) : Set(Property) = OrderedSet{aClass.getSubsetedUnionProperties(),aClass.attribute->select(isUnion())}->flatten()->sortedBy(name) /]

[query public getSubsetedUnionProperties(aClass : Class): Set(Property) =  aClass.allAttributes()->select(if isSubset() then not subsettedProperty->forAll(p | not p.isUnion()) else false endif ).subsettedProperty->asOrderedSet()->sortedBy(name)/]
[query public getSubsetsForUnion(aClass : Class, union : Property): Set(Property) =  aClass.allAttributes()->select(if isSubset() then not subsettedProperty->forAll(p | not (p = union)) else false endif ).oclAsType(Property)->asOrderedSet()->sortedBy(name)/]

[**
 * generates the lazy creation functionality for Subsets, Unions and SubsetUnions
*/]
[template public generateContainerPropertyInit(aProperty : Property)? (not (aProperty.upper = 1))]
[if(aProperty.isSubsetUnion())]
/*SubsetUnion*/
m_[aProperty.name/].reset(new SubsetUnion<[aProperty.type.generateCppType(true)/], [aProperty.generateSubsetTypes()/] >());
#ifdef SHOW_SUBSET_UNION
	std::cout << "Initialising shared pointer SubsetUnion: " << "m_[aProperty.name/] - SubsetUnion<[aProperty.generateCppType()/], [aProperty.generateSubsetTypes()/] >()" << std::endl;
#endif
[elseif(aProperty.isSubset())]
/*Subset*/
m_[aProperty.name/].reset(new Subset<[aProperty.type.generateCppType(true)/], [aProperty.generateSubsetTypes()/] >());
#ifdef SHOW_SUBSET_UNION
	std::cout << "Initialising shared pointer Subset: " << "m_[aProperty.name/] - Subset<[aProperty.generateCppType()/], [aProperty.generateSubsetTypes()/] >()" << std::endl;
#endif
[elseif(aProperty.isUnion())]
/*Union*/
m_[aProperty.name/].reset(new Union<[aProperty.type.generateCppType(true)/]>());
	#ifdef SHOW_SUBSET_UNION
	std::cout << "Initialising Union: " << "m_[aProperty.name/] - Union<[aProperty.generateCppType()/]>()" << std::endl;
#endif
[else]
m_[aProperty.name/].reset(new Bag<[aProperty.type.generateCppType(true)/]>());
[/if]
[/template]

[template public generateSubsetUnionInit(aProperty : Property)? (not (aProperty.upper = 1))]
[if(aProperty.isSubsetUnion())]
/*SubsetUnion*/
[aProperty.getterName()/]()->initSubsetUnion([aProperty.generateSubsetElements()/]);
#ifdef SHOW_SUBSET_UNION
	std::cout << "Initialising value SubsetUnion: " << "m_[aProperty.name/] - SubsetUnion<[aProperty.generateCppType()/], [aProperty.generateSubsetTypes()/] >([aProperty.generateSubsetElements()/])" << std::endl;
#endif
[elseif(aProperty.isSubset())]
/*Subset*/
[aProperty.getterName()/]()->initSubset([aProperty.generateSubsetElements()/]);
#ifdef SHOW_SUBSET_UNION
	std::cout << "Initialising value Subset: " << "m_[aProperty.name/] - Subset<[aProperty.generateCppType()/], [aProperty.generateSubsetTypes()/] >([aProperty.generateSubsetElements()/])" << std::endl;
#endif
[/if]
[/template]