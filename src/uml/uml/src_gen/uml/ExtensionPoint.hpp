//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_EXTENSIONPOINT_HPP
#define UML_EXTENSIONPOINT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Classifier;
	class Comment;
	class Dependency;
	class Namespace;
	class StringExpression;
	class UseCase;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/RedefinableElement.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	An ExtensionPoint identifies a point in the behavior of a UseCase where that behavior can be extended by the behavior of some other (extending) UseCase, as specified by an Extend relationship.
	<p>From package UML::UseCases.</p>
	*/
	
	class UML_API ExtensionPoint : virtual public RedefinableElement
	{
		public:
 			ExtensionPoint(const ExtensionPoint &) {}

		protected:
			ExtensionPoint(){}
			//Additional constructors for the containments back reference
			ExtensionPoint(std::weak_ptr<uml::Namespace> par_namespace);

			//Additional constructors for the containments back reference
			ExtensionPoint(std::weak_ptr<uml::Element> par_owner);

			//Additional constructors for the containments back reference
			ExtensionPoint(std::weak_ptr<uml::UseCase> par_useCase);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~ExtensionPoint() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The UseCase that owns this ExtensionPoint.
			<p>From package UML::UseCases.</p>
			*/
			
			virtual std::weak_ptr<uml::UseCase> getUseCase() const = 0;
			/*!
			The UseCase that owns this ExtensionPoint.
			<p>From package UML::UseCases.</p>
			*/
			
			virtual void setUseCase(std::weak_ptr<uml::UseCase>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The UseCase that owns this ExtensionPoint.
			<p>From package UML::UseCases.</p>
			*/
			
			std::weak_ptr<uml::UseCase> m_useCase;
	};
}
#endif /* end of include guard: UML_EXTENSIONPOINT_HPP */
