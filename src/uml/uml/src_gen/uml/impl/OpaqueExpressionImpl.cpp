
#include "uml/impl/OpaqueExpressionImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "uml/Behavior.hpp"
#include "uml/Comment.hpp"
#include "uml/Dependency.hpp"
#include "uml/Element.hpp"
#include "uml/Namespace.hpp"
#include "uml/Package.hpp"
#include "uml/Parameter.hpp"
#include "uml/Slot.hpp"
#include "uml/StringExpression.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/Type.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecificationAction.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
OpaqueExpressionImpl::OpaqueExpressionImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

OpaqueExpressionImpl::~OpaqueExpressionImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete OpaqueExpression "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
OpaqueExpressionImpl::OpaqueExpressionImpl(std::weak_ptr<uml::Namespace> par_namespace)
:OpaqueExpressionImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
OpaqueExpressionImpl::OpaqueExpressionImpl(std::weak_ptr<uml::Element> par_owner)
:OpaqueExpressionImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
OpaqueExpressionImpl::OpaqueExpressionImpl(std::weak_ptr<uml::Package> par_owningPackage)
:OpaqueExpressionImpl()
{
	m_owningPackage = par_owningPackage;
	m_namespace = par_owningPackage;
}

//Additional constructor for the containments back reference
OpaqueExpressionImpl::OpaqueExpressionImpl(std::weak_ptr<uml::Slot> par_owningSlot)
:OpaqueExpressionImpl()
{
	m_owningSlot = par_owningSlot;
	m_owner = par_owningSlot;
}

//Additional constructor for the containments back reference
OpaqueExpressionImpl::OpaqueExpressionImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:OpaqueExpressionImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}

//Additional constructor for the containments back reference
OpaqueExpressionImpl::OpaqueExpressionImpl(std::weak_ptr<uml::ValueSpecificationAction> par_valueSpecificationAction)
:OpaqueExpressionImpl()
{
	m_valueSpecificationAction = par_valueSpecificationAction;
	m_owner = par_valueSpecificationAction;
}

OpaqueExpressionImpl::OpaqueExpressionImpl(const OpaqueExpressionImpl & obj): OpaqueExpressionImpl()
{
	*this = obj;
}

OpaqueExpressionImpl& OpaqueExpressionImpl::operator=(const OpaqueExpressionImpl & obj)
{
	//call overloaded =Operator for each base class
	ValueSpecificationImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of OpaqueExpression 
	 * which is generated by the compiler (as OpaqueExpression is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//OpaqueExpression::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy OpaqueExpression "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	std::shared_ptr<Bag<std::string>> bodyList = obj.getBody();
	if(bodyList)
	{	
		m_body.reset(new Bag<std::string>());
		for(const std::shared_ptr<std::string> it: *bodyList) 
		{
			m_body->push_back(it);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for body.")
	}
	std::shared_ptr<Bag<std::string>> languageList = obj.getLanguage();
	if(languageList)
	{	
		m_language.reset(new Bag<std::string>());
		for(const std::shared_ptr<std::string> it: *languageList) 
		{
			m_language->push_back(it);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for language.")
	}

	//copy references with no containment (soft copy)
	m_behavior  = obj.getBehavior();
	m_result  = obj.getResult();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> OpaqueExpressionImpl::copy() const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	*element =(*this);
	element->setThisOpaqueExpressionPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************


bool OpaqueExpressionImpl::isIntegral()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool OpaqueExpressionImpl::isNonNegative()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool OpaqueExpressionImpl::isPositive()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

int OpaqueExpressionImpl::value()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute body */
std::shared_ptr<Bag<std::string>> OpaqueExpressionImpl::getBody() const 
{
	if(m_body == nullptr)
	{
		m_body.reset(new Bag<std::string>());
	}
	return m_body;
}

/* Getter & Setter for attribute language */
std::shared_ptr<Bag<std::string>> OpaqueExpressionImpl::getLanguage() const 
{
	if(m_language == nullptr)
	{
		m_language.reset(new Bag<std::string>());
	}
	return m_language;
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference behavior */
std::shared_ptr<uml::Behavior> OpaqueExpressionImpl::getBehavior() const
{
    return m_behavior;
}
void OpaqueExpressionImpl::setBehavior(std::shared_ptr<uml::Behavior> _behavior)
{
    m_behavior = _behavior;
	
}

/* Getter & Setter for reference result */
std::shared_ptr<uml::Parameter> OpaqueExpressionImpl::getResult() const
{
    return m_result;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> OpaqueExpressionImpl::eContainer() const
{
	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_owningPackage.lock())
	{
		return wp;
	}

	if(auto wp = m_owningSlot.lock())
	{
		return wp;
	}

	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}

	if(auto wp = m_valueSpecificationAction.lock())
	{
		return wp;
	}
	return nullptr;
}

std::shared_ptr<ecore::EClass> OpaqueExpressionImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getOpaqueExpression_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> OpaqueExpressionImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_BEHAVIOR:
			return eAny(getBehavior(),uml::umlPackage::BEHAVIOR_CLASS,false); //16615
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_BODY:
			return eAny(getBody(),ecore::ecorePackage::ESTRING_CLASS,true); //16616
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_LANGUAGE:
			return eAny(getLanguage(),ecore::ecorePackage::ESTRING_CLASS,true); //16617
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_RESULT:
			return eAny(getResult(),uml::umlPackage::PARAMETER_CLASS,false); //16618
	}
	return ValueSpecificationImpl::eGet(featureID, resolve, coreType);
}

bool OpaqueExpressionImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_BEHAVIOR:
			return getBehavior() != nullptr; //16615
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_BODY:
			return !getBody()->empty(); //16616
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_LANGUAGE:
			return !getLanguage()->empty(); //16617
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_RESULT:
			return getResult() != nullptr; //16618
	}
	return ValueSpecificationImpl::internalEIsSet(featureID);
}

bool OpaqueExpressionImpl::eSet(int featureID, std::shared_ptr<Any> newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_BEHAVIOR:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Behavior> _behavior = std::dynamic_pointer_cast<uml::Behavior>(eObject);
					if(_behavior)
					{
						setBehavior(_behavior); //16615
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'behavior'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'behavior'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_BODY:
		{
			try
			{
				std::shared_ptr<Bag<std::string>> _bodyList = newValue->get<std::shared_ptr<Bag<std::string>>>();
				std::shared_ptr<Bag<std::string>> _body = getBody();
				
				for(const std::shared_ptr<std::string> valueToAdd: *_bodyList)
				{
					if (valueToAdd)
					{
						if(_body->find(valueToAdd) == -1)
						{
							_body->add(valueToAdd);
						}
						//else, valueToAdd is already present so it won't be added again
					}
					else
					{
						throw "Invalid argument";
					}
				}
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'body'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::OPAQUEEXPRESSION_ATTRIBUTE_LANGUAGE:
		{
			try
			{
				std::shared_ptr<Bag<std::string>> _languageList = newValue->get<std::shared_ptr<Bag<std::string>>>();
				std::shared_ptr<Bag<std::string>> _language = getLanguage();
				
				for(const std::shared_ptr<std::string> valueToAdd: *_languageList)
				{
					if (valueToAdd)
					{
						if(_language->find(valueToAdd) == -1)
						{
							_language->add(valueToAdd);
						}
						//else, valueToAdd is already present so it won't be added again
					}
					else
					{
						throw "Invalid argument";
					}
				}
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'language'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ValueSpecificationImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> OpaqueExpressionImpl::eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// uml::OpaqueExpression::isIntegral() : bool: 810802950
		case umlPackage::OPAQUEEXPRESSION_OPERATION_ISINTEGRAL:
		{
			result = eAny(this->isIntegral(), 0, false);
			break;
		}
		// uml::OpaqueExpression::isNonNegative() : bool: 2422740566
		case umlPackage::OPAQUEEXPRESSION_OPERATION_ISNONNEGATIVE:
		{
			result = eAny(this->isNonNegative(), 0, false);
			break;
		}
		// uml::OpaqueExpression::isPositive() : bool: 157142355
		case umlPackage::OPAQUEEXPRESSION_OPERATION_ISPOSITIVE:
		{
			result = eAny(this->isPositive(), 0, false);
			break;
		}
		// uml::OpaqueExpression::value() : int: 2181682856
		case umlPackage::OPAQUEEXPRESSION_OPERATION_VALUE:
		{
			result = eAny(this->value(), 0, false);
			break;
		}

		default:
		{
			// call superTypes
			result = ValueSpecificationImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::OpaqueExpression> OpaqueExpressionImpl::getThisOpaqueExpressionPtr() const
{
	return m_thisOpaqueExpressionPtr.lock();
}
void OpaqueExpressionImpl::setThisOpaqueExpressionPtr(std::weak_ptr<uml::OpaqueExpression> thisOpaqueExpressionPtr)
{
	m_thisOpaqueExpressionPtr = thisOpaqueExpressionPtr;
	setThisValueSpecificationPtr(thisOpaqueExpressionPtr);
}


