[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModelExecutionFactoryHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]


[template public generateModelExecutionFactoryHeader(aPackage : Package) {
	className : String = aPackage.getFactoryName(); 
	packageName : String = aPackage.getPackageName();
}]
[file (packageName.concat('Exec/') + className.concat('.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'ExecutionFactory')/]

#include "fUML/Semantics/Loci/ExecutionFactory.hpp"

#include "ecore/impl/EObjectImpl.hpp"

namespace [packageName/] 
{
	class [className/]: virtual public fUML::Semantics::Loci::ExecutionFactory
	{
		public: 
			[className/](){};
		public:
			//destructor
			virtual ~[className/](){};
			
			//*********************************
			// Operations
			//*********************************
			virtual std::shared_ptr<fUML::Semantics::Loci::SemanticVisitor> instantiateVisitor(std::shared_ptr<uml::Element> element) = 0;
	};
}
[endGuard(aPackage,'ExecutionFactory')/]
[/file]

[file (packageName.concat('Exec/impl/') + className.concat('Impl.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'ExecutionFactoryImpl')/]

#include "../[className/].hpp"
#include "fUML/Semantics/Loci/impl/ExecutionFactoryImpl.hpp"

#include "ecore/impl/EObjectImpl.hpp"

namespace [packageName/] 
{
	class [className/]Impl :virtual public fUML::Semantics::Loci::ExecutionFactoryImpl, virtual public [className/]
	{
		private:    
			[className/]Impl& operator=([className/]Impl const&) = delete;

		public:
			[className/]Impl();

		public:
			//destructor
			virtual ~[className/]Impl();
			
			virtual std::shared_ptr<fUML::Semantics::Loci::SemanticVisitor> instantiateVisitor(std::shared_ptr<uml::Element> element);
	};
}
[endGuard(aPackage,'ExecutionFactoryImpl')/]
[/file]
[/template]