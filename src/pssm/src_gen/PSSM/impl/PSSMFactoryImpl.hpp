//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSMFACTORYIMPL_HPP
#define PSSMFACTORYIMPL_HPP

// namespace macro header include
#include "PSSM/PSSM.hpp"

#include "ecore/impl/EFactoryImpl.hpp"

#include "PSSM/PSSMFactory.hpp"

namespace PSSM 
{
}

namespace PSSM 
{
	class PSSM_API PSSMFactoryImpl : virtual public ecore::EFactoryImpl , virtual public PSSMFactory 
	{
		private:    
			PSSMFactoryImpl(PSSMFactoryImpl const&) = delete;
			PSSMFactoryImpl& operator=(PSSMFactoryImpl const&) = delete;

		protected:
			friend class PSSMFactory;
			// Constructor
			PSSMFactoryImpl();

		public:
			virtual ~PSSMFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 

		private:
			static PSSMFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: PSSMFACTORYIMPL_HPP */
