
#include "uml/impl/StereotypeImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Behavior.hpp"
#include "uml/Class.hpp"
#include "uml/Classifier.hpp"
#include "uml/CollaborationUse.hpp"
#include "uml/Comment.hpp"
#include "uml/ConnectableElement.hpp"
#include "uml/Connector.hpp"
#include "uml/Constraint.hpp"
#include "uml/Dependency.hpp"
#include "ecore/EClass.hpp"
#include "uml/Element.hpp"
#include "uml/ElementImport.hpp"
#include "uml/Extension.hpp"
#include "uml/Feature.hpp"
#include "uml/Generalization.hpp"
#include "uml/GeneralizationSet.hpp"
#include "uml/Image.hpp"
#include "uml/InterfaceRealization.hpp"
#include "uml/NamedElement.hpp"
#include "uml/Namespace.hpp"
#include "uml/Operation.hpp"
#include "uml/Package.hpp"
#include "uml/PackageImport.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/Port.hpp"
#include "uml/Profile.hpp"
#include "uml/Property.hpp"
#include "uml/Reception.hpp"
#include "uml/RedefinableElement.hpp"
#include "uml/StringExpression.hpp"
#include "uml/Substitution.hpp"
#include "uml/TemplateBinding.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/TemplateSignature.hpp"
#include "uml/UseCase.hpp"
//Factories and Package includes
#include "ecore/ecorePackage.hpp"
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
StereotypeImpl::StereotypeImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

StereotypeImpl::~StereotypeImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Stereotype "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
StereotypeImpl::StereotypeImpl(std::weak_ptr<uml::Namespace> par_namespace)
:StereotypeImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
StereotypeImpl::StereotypeImpl(std::weak_ptr<uml::Element> par_owner)
:StereotypeImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
StereotypeImpl::StereotypeImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id)
:StereotypeImpl()
{
	switch(reference_id)
	{	
	case uml::umlPackage::PACKAGEABLEELEMENT_ATTRIBUTE_OWNINGPACKAGE:
		m_owningPackage = par_Package;
		m_namespace = par_Package;
		 return;
	case uml::umlPackage::TYPE_ATTRIBUTE_PACKAGE:
		m_package = par_Package;
		m_namespace = par_Package;
		 return;
	default:
	std::cerr << __PRETTY_FUNCTION__ <<" Reference not found in class with the given ID" << std::endl;
	}
   
}

//Additional constructor for the containments back reference
StereotypeImpl::StereotypeImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:StereotypeImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}


StereotypeImpl::StereotypeImpl(const StereotypeImpl & obj): StereotypeImpl()
{
	*this = obj;
}

StereotypeImpl& StereotypeImpl::operator=(const StereotypeImpl & obj)
{
	//call overloaded =Operator for each base class
	ClassImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Stereotype 
	 * which is generated by the compiler (as Stereotype is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Stereotype::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Stereotype "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_profile  = obj.getProfile();
	//Clone references with containment (deep copy)
	//clone reference 'icon'
	std::shared_ptr<Subset<uml::Image, uml::Element>> iconList = obj.getIcon();
	if(iconList)
	{
		/*Subset*/
		m_icon.reset(new Subset<uml::Image, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_icon - Subset<uml::Image, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getIcon()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_icon - Subset<uml::Image, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Image>& iconindexElem: *iconList) 
		{
			std::shared_ptr<uml::Image> temp = std::dynamic_pointer_cast<uml::Image>((iconindexElem)->copy());
			m_icon->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for icon.")
	}
	/*Subset*/
	getIcon()->initSubset(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_icon - Subset<uml::Image, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> StereotypeImpl::copy() const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	*element =(*this);
	element->setThisStereotypePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
std::shared_ptr<uml::Profile> StereotypeImpl::containingProfile()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Extension> StereotypeImpl::createExtension(const std::shared_ptr<uml::Class>& metaclass, bool isRequired)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Image> StereotypeImpl::createIcon(std::string location)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Image> StereotypeImpl::createIcon(std::string format, std::string content)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Class>> StereotypeImpl::getAllExtendedMetaclasses()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<ecore::EClass> StereotypeImpl::getDefinition()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Class>> StereotypeImpl::getExtendedMetaclasses()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::string StereotypeImpl::getKeyword()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::string StereotypeImpl::getKeyword(bool localize)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}



//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference icon */
const std::shared_ptr<Subset<uml::Image, uml::Element>>& StereotypeImpl::getIcon() const
{
	if(m_icon == nullptr)
	{
		/*Subset*/
		m_icon.reset(new Subset<uml::Image, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_icon - Subset<uml::Image, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getIcon()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_icon - Subset<uml::Image, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_icon;
}

/* Getter & Setter for reference profile */
const std::shared_ptr<uml::Profile>& StereotypeImpl::getProfile() const
{
    return m_profile;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> StereotypeImpl::eContainer() const
{
	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_owningPackage.lock())
	{
		return wp;
	}
	if(auto wp = m_package.lock())
	{
		return wp;
	}

	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}

	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void StereotypeImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void StereotypeImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{

	ClassImpl::loadAttributes(loadHandler, attr_list);
}

void StereotypeImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("icon") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "Image";
			}
			loadHandler->handleChildContainer<uml::Image>(this->getIcon());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	ClassImpl::loadNode(nodeName, loadHandler);
}

void StereotypeImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	ClassImpl::resolveReferences(featureID, references);
}

void StereotypeImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ClassImpl::saveContent(saveHandler);
	
	BehavioredClassifierImpl::saveContent(saveHandler);
	EncapsulatedClassifierImpl::saveContent(saveHandler);
	
	StructuredClassifierImpl::saveContent(saveHandler);
	
	ClassifierImpl::saveContent(saveHandler);
	
	NamespaceImpl::saveContent(saveHandler);
	RedefinableElementImpl::saveContent(saveHandler);
	TemplateableElementImpl::saveContent(saveHandler);
	TypeImpl::saveContent(saveHandler);
	
	PackageableElementImpl::saveContent(saveHandler);
	
	NamedElementImpl::saveContent(saveHandler);
	ParameterableElementImpl::saveContent(saveHandler);
	
	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void StereotypeImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Save 'icon'
		for (std::shared_ptr<uml::Image> icon : *this->getIcon()) 
		{
			saveHandler->addReference(icon, "icon", icon->eClass() != package->getImage_Class());
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& StereotypeImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getStereotype_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> StereotypeImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::STEREOTYPE_ATTRIBUTE_ICON:
			return eEcoreContainerAny(getIcon(),uml::umlPackage::IMAGE_CLASS); //22353
		case uml::umlPackage::STEREOTYPE_ATTRIBUTE_PROFILE:
			return eAny(getProfile(),uml::umlPackage::PROFILE_CLASS,false); //22354
	}
	return ClassImpl::eGet(featureID, resolve, coreType);
}

bool StereotypeImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::STEREOTYPE_ATTRIBUTE_ICON:
			return getIcon() != nullptr; //22353
		case uml::umlPackage::STEREOTYPE_ATTRIBUTE_PROFILE:
			return getProfile() != nullptr; //22354
	}
	return ClassImpl::internalEIsSet(featureID);
}

bool StereotypeImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::STEREOTYPE_ATTRIBUTE_ICON:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<uml::Image>>& _icon = getIcon();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<uml::Image> valueToAdd = std::dynamic_pointer_cast<uml::Image>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_icon->includes(valueToAdd)))
								{
									_icon->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'icon'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'icon'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ClassImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> StereotypeImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// uml::Stereotype::containingProfile() : uml::Profile: 3116027671
		case umlPackage::STEREOTYPE_OPERATION_CONTAININGPROFILE:
		{
			result = eEcoreAny(this->containingProfile(), uml::umlPackage::PROFILE_CLASS);
			break;
		}
		// uml::Stereotype::createExtension(uml::Class, bool) : uml::Extension: 2355039413
		case umlPackage::STEREOTYPE_OPERATION_CREATEEXTENSION_CLASS_BOOLEAN:
		{
			//Retrieve input parameter 'metaclass'
			//parameter 0
			std::shared_ptr<uml::Class> incoming_param_metaclass;
			Bag<Any>::const_iterator incoming_param_metaclass_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_metaclass_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_metaclass = std::dynamic_pointer_cast<uml::Class>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'metaclass'. Failed to invoke operation 'createExtension'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'metaclass'. Failed to invoke operation 'createExtension'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'isRequired'
			//parameter 1
			bool incoming_param_isRequired;
			Bag<Any>::const_iterator incoming_param_isRequired_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_isRequired = (*incoming_param_isRequired_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'isRequired'. Failed to invoke operation 'createExtension'!")
				return nullptr;
			}
		
			result = eEcoreAny(this->createExtension(incoming_param_metaclass,incoming_param_isRequired), uml::umlPackage::EXTENSION_CLASS);
			break;
		}
		// uml::Stereotype::createIcon(std::string) : uml::Image: 4268768905
		case umlPackage::STEREOTYPE_OPERATION_CREATEICON_STRING:
		{
			//Retrieve input parameter 'location'
			//parameter 0
			std::string incoming_param_location;
			Bag<Any>::const_iterator incoming_param_location_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_location = (*incoming_param_location_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'location'. Failed to invoke operation 'createIcon'!")
				return nullptr;
			}
		
			result = eEcoreAny(this->createIcon(incoming_param_location), uml::umlPackage::IMAGE_CLASS);
			break;
		}
		// uml::Stereotype::createIcon(std::string, std::string) : uml::Image: 1814185679
		case umlPackage::STEREOTYPE_OPERATION_CREATEICON_STRING_STRING:
		{
			//Retrieve input parameter 'format'
			//parameter 0
			std::string incoming_param_format;
			Bag<Any>::const_iterator incoming_param_format_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_format = (*incoming_param_format_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'format'. Failed to invoke operation 'createIcon'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'content'
			//parameter 1
			std::string incoming_param_content;
			Bag<Any>::const_iterator incoming_param_content_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_content = (*incoming_param_content_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'content'. Failed to invoke operation 'createIcon'!")
				return nullptr;
			}
		
			result = eEcoreAny(this->createIcon(incoming_param_format,incoming_param_content), uml::umlPackage::IMAGE_CLASS);
			break;
		}
		// uml::Stereotype::getAllExtendedMetaclasses() : uml::Class[*]: 912925586
		case umlPackage::STEREOTYPE_OPERATION_GETALLEXTENDEDMETACLASSES:
		{
			std::shared_ptr<Bag<uml::Class>> resultList = this->getAllExtendedMetaclasses();
			return eEcoreContainerAny(resultList,uml::umlPackage::CLASS_CLASS);
			break;
		}
		// uml::Stereotype::getDefinition() : ecore::EClass: 1669546995
		case umlPackage::STEREOTYPE_OPERATION_GETDEFINITION:
		{
			result = eEcoreAny(this->getDefinition(), ecore::ecorePackage::ECLASS_CLASS);
			break;
		}
		// uml::Stereotype::getExtendedMetaclasses() : uml::Class[*]: 1491956517
		case umlPackage::STEREOTYPE_OPERATION_GETEXTENDEDMETACLASSES:
		{
			std::shared_ptr<Bag<uml::Class>> resultList = this->getExtendedMetaclasses();
			return eEcoreContainerAny(resultList,uml::umlPackage::CLASS_CLASS);
			break;
		}
		// uml::Stereotype::getKeyword() : std::string: 263636712
		case umlPackage::STEREOTYPE_OPERATION_GETKEYWORD:
		{
			result = eAny(this->getKeyword(), 0, false);
			break;
		}
		// uml::Stereotype::getKeyword(bool) : std::string: 3455502248
		case umlPackage::STEREOTYPE_OPERATION_GETKEYWORD_BOOLEAN:
		{
			//Retrieve input parameter 'localize'
			//parameter 0
			bool incoming_param_localize;
			Bag<Any>::const_iterator incoming_param_localize_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_localize = (*incoming_param_localize_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'localize'. Failed to invoke operation 'getKeyword'!")
				return nullptr;
			}
		
			result = eAny(this->getKeyword(incoming_param_localize), 0, false);
			break;
		}

		default:
		{
			// call superTypes
			result = ClassImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Stereotype> StereotypeImpl::getThisStereotypePtr() const
{
	return m_thisStereotypePtr.lock();
}
void StereotypeImpl::setThisStereotypePtr(std::weak_ptr<uml::Stereotype> thisStereotypePtr)
{
	m_thisStereotypePtr = thisStereotypePtr;
	setThisClassPtr(thisStereotypePtr);
}


