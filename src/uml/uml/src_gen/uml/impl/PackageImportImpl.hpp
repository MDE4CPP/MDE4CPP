//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PACKAGEIMPORTPACKAGEIMPORTIMPL_HPP
#define UML_PACKAGEIMPORTPACKAGEIMPORTIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../PackageImport.hpp"

#include "uml/impl/DirectedRelationshipImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API PackageImportImpl : virtual public DirectedRelationshipImpl, virtual public PackageImport 
	{
		public: 
			PackageImportImpl(const PackageImportImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			PackageImportImpl& operator=(PackageImportImpl const&); 

		protected:
			friend class umlFactoryImpl;
			PackageImportImpl();
			virtual std::shared_ptr<uml::PackageImport> getThisPackageImportPtr() const;
			virtual void setThisPackageImportPtr(std::weak_ptr<uml::PackageImport> thisPackageImportPtr);

			//Additional constructors for the containments back reference
			PackageImportImpl(std::weak_ptr<uml::Namespace> par_importingNamespace);
			//Additional constructors for the containments back reference
			PackageImportImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~PackageImportImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not.
			<p>From package UML::CommonStructure.</p>
			*/
			 
			virtual uml::VisibilityKind getVisibility() const ;
			/*!
			Specifies the visibility of the imported PackageableElements within the importingNamespace, i.e., whether imported Elements will in turn be visible to other Namespaces. If the PackageImport is public, the imported Elements will be visible outside the importingNamespace, while, if the PackageImport is private, they will not.
			<p>From package UML::CommonStructure.</p>
			*/
			 
			virtual void setVisibility (uml::VisibilityKind _visibility);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Specifies the Package whose members are imported into a Namespace.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<uml::Package> getImportedPackage() const ;
			/*!
			Specifies the Package whose members are imported into a Namespace.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual void setImportedPackage(std::shared_ptr<uml::Package>) ;
			/*!
			Specifies the Namespace that imports the members from a Package.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::weak_ptr<uml::Namespace> getImportingNamespace() const ;
			/*!
			Specifies the Namespace that imports the members from a Package.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual void setImportingNamespace(std::weak_ptr<uml::Namespace>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::PackageImport> m_thisPackageImportPtr;
	};
}
#endif /* end of include guard: UML_PACKAGEIMPORTPACKAGEIMPORTIMPL_HPP */
