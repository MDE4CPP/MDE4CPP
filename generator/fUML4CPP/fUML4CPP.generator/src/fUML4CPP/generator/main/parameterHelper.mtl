[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module parameterHelper('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[query public getFUMLCommonBehaviorFactory(any : OclAny) : String = 'fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()' /]
[query public getPSCSCommonBehaviorFactory(any : OclAny) : String = 'PSCS::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()' /]
[query public getFUMLLociFactory(any : OclAny) : String = 'fUML::Semantics::Loci::LociFactory::eInstance()' /]
[query public getPSCSLociFactory(any : OclAny) : String = 'PSCS::Semantics::Loci::LociFactory::eInstance()' /]
[query public getFUMLSimpleClassifierFactory(any : OclAny) : String = 'fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()' /]
[query public getPSCSSimpleClassifierFactory(any : OclAny) : String = 'PSCS::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()' /]
[query public getFUMLStructuredClassifierFactory(any : OclAny) : String = 'fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()' /]
[query public getPSCSStructuredClassifierFactory(any : OclAny) : String = 'PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()' /]
[query public getPSCSActionsFactory(any : OclAny) : String = 'PSCS::Semantics::Actions::ActionsFactory::eInstance()' /]

[query public getValueClass(aType : Type) : String = if (aType.oclIsKindOf(PrimitiveType)) then 'fUML::Semantics::SimpleClassifiers::'.concat(aType.name.toUpperFirst()).concat('Value') else aType.oclAsType(Classifier).objectClassName() endif /]

[query public pointerName(aClassifier : Classifier, aPackage : Package) : String = if (aPackage.name = aClassifier.namespace.myNamespaceName()) then aClassifier.name.toUpperFirst() else aClassifier.namespace.myNamespaceName().concat('::').concat(aClassifier.name.toUpperFirst()) endif /]
[query public executionClassName(aClassifier : Classifier) : String = aClassifier.name.toUpperFirst().concat('Execution') /]
[query public objectClassName(aClassifier : Classifier) : String = aClassifier.name.toUpperFirst().concat('Object') /]

[query public supportedTypes(type : Type) : Boolean = (name = 'Integer') or (name = 'Boolean') or (name = 'String') or (name = 'Real') or (name = 'UnlimitedNatural') /]

[query public getClassiferExecutions(aPackage : Package) : Set(Classifier) = OrderedSet{
				aPackage.allOwnedElements()->filter(Activity)._context->reject(oclIsUndefined()),
				aPackage.allOwnedElements()->filter(CallOperationAction).target.type,
				aPackage.allOwnedElements()->filter(CallOperationAction).operation.ownedParameter->select(type.oclIsKindOf(Interface)).type,
				aPackage.allOwnedElements()->filter(CallOperationAction).operation.ownedParameter->select(type.oclIsKindOf(Class)).type,
				aPackage.allOwnedElements()->filter(CallBehaviorAction).behavior->filter(OpaqueBehavior).ownedParameter->select(type.oclIsKindOf(Interface)).type,
				aPackage.allOwnedElements()->filter(CallBehaviorAction).behavior->filter(OpaqueBehavior).ownedParameter->select(type.oclIsKindOf(Class)).type,
				aPackage.allOwnedElements()->filter(ReadStructuralFeatureAction).structuralFeature.type,
				aPackage.allOwnedElements()->filter(AddStructuralFeatureValueAction).structuralFeature.type,
				aPackage.allOwnedElements()->filter(RemoveStructuralFeatureValueAction).structuralFeature.type,
				aPackage.allOwnedElements()->filter(Action).input.type,
				aPackage.allOwnedElements()->filter(Action).output.type	
			}->flatten()->reject(oclIsKindOf(Activity))->reject(supportedTypes())->reject(oclIsKindOf(Enumeration))->sortedBy(name)/]

[query public getPackageClasses(aPackage : Package) : Set(Classifier) = OrderedSet{
				aPackage.allOwnedElements()->filter(Class)
				}->flatten()->reject(oclIsKindOf(AssociationClass))->reject(oclIsKindOf(Component))->reject(oclIsKindOf(Behavior))->reject(oclIsKindOf(Stereotype))->reject(oclIsKindOf(Node))->sortedBy(name)
/]

[comment]Get all Operations in Package[/comment]
[query public getClassOperations(aPackage : Package) : Set(Operation) = OrderedSet{
				aPackage.allOwnedElements()->filter(Class).ownedOperation
				}->flatten()->sortedBy(name)
/]

[comment]COLLECT CORRESPONDING CONNECTOR END FOR CERTAIN TYPE --------------- [/comment]
[comment EXTERNAL CONNECTORS /]
[comment checks if 'aConnector' has two valid connector ends -> 2x end AND role is defined for both ends /]
[query private isValidConnector(aConnector : Connector) : Boolean = aConnector.end->size() = 2 and aConnector.end->asSet()->reject(end : ConnectorEnd | end.role.oclIsUndefined())->size() = 2 /]
[comment collects all valid connectors of 'aPackage' /]
[query private getAllValidConnectors(aPackage : Package) : Set(Connector) = aPackage.allOwnedElements()->selectByKind(Connector)->select(isValidConnector()) /] 
[comment checks if 'anEnd' is typed by 'aClass', i.e. if 'partWithPort' is defined, it must be typed by 'aClass' ; if only 'partWithPort' is undefined, 'role' must be typed by 'aClass' /]
[query private isConnectorEndTypeEqualTo(anEnd : ConnectorEnd, aClass : Class) : Boolean = if (anEnd.oclIsUndefined() or anEnd.role.oclIsUndefined()) then false else if (not anEnd.partWithPort.oclIsUndefined()) then anEnd.partWithPort.type = aClass else anEnd.role.type = aClass endif endif /]
[comment checks if connector has at least one end that is typed by 'aClass'/]
[query private containsEndWithSpecificClass(aConnector : Connector, aClass : Class) : Boolean = aConnector.end.isConnectorEndTypeEqualTo(aClass)->reject(value : Boolean | value = false)->size() > 0 /] 
[comment collects all valid connectors that have at least one end typed by 'aClass' /]
[query private getAllConnectorsWithType(aPackage : Package, aClass : Class) : Set(Connector) = aPackage.getAllValidConnectors()->select(containsEndWithSpecificClass(aClass)) /]
[comment collects all external connectors of (i.e. not owned by) 'aClass' /]
[query private collectEndsofExternalConnectors(aPackage : Package, aClass : Class) : OrderedSet(ConnectorEnd) = (aPackage.getAllConnectorsWithType(aClass).end->flatten())->asOrderedSet()->sortedBy(name)/]

[comment INTERNAL CONNECTORS /]
[comment collect ConnectorEnds of internal (=delegation) connectors for 'aClass'/]
[query private getAllConnectorsOfClass(aClass : Class) : Set(Connector) = aClass.ownedConnector->select(isValidConnector())/]
[comment checks if 'role' of 'anEnd' is an owned port of 'aClass' /]
[query private isConnectorEndRoleOwnedPortOfClass(anEnd : ConnectorEnd, aClass : Class) : Boolean = if (anEnd.role.oclIsUndefined()) then false else (anEnd.role.owner = aClass and anEnd.role.oclIsTypeOf(Port)) endif /]
[comment since only delegation connectors of 'aClass' should be obtained, 'role' of one end of aConnector must be a child of 'aClass' and a port (the corresponding delegation port)/]
[query private isDelegationConnectorOfClass(aConnector : Connector, aClass : Class) : Boolean = aConnector.end.isConnectorEndRoleOwnedPortOfClass(aClass)->reject(value : Boolean | value = false)->size() > 0/]
[comment collects ConnectorEnds of delegation (i.e. internal) connectors of 'aClass' ; reject ConnectorEnd if its role is an owned port of 'aClass' /]
[query private collectEndsofInternalConnectors(aClass : Class) : OrderedSet(ConnectorEnd) = (aClass.getAllConnectorsOfClass()->select(isDelegationConnectorOfClass(aClass)).end->reject(isConnectorEndRoleOwnedPortOfClass(aClass)))->select(end : ConnectorEnd | (not end.role.oclIsUndefined()) and (not end.partWithPort.oclIsUndefined()))->asOrderedSet() /]

[comment collects all ConnectorEnds that are typed by a property of type 'aClass' connected by a connector AND all connectorEnds for delegation connectors of 'aClass' /]
[comment external connectors are connectors that are not owned by 'aClass' ; internal connectors are connectors that are owned by 'aClass' (= delegation connectors for 'aClass') /]
[comment both 'role' and 'partWithPort' must be defined for a valid ConnectorEnd/]
[query public collectConnectorEndsConnectedToClass(aPackage : Package, aClass : Class) : OrderedSet(ConnectorEnd) = aPackage.collectEndsofExternalConnectors(aClass)->addAll(aClass.collectEndsofInternalConnectors())->asOrderedSet() /]


[query public test(resultSet : Set(ConnectorEnd)) : OrderedSet(ConnectorEnd) =  /]


[comment]INPUT SWITCH ----------------------------------------------------------[/comment]
[template public generateInputParameter(par : Parameter, index:Integer)]
[par.name.generateInputParameter(par.type, index)/]
[/template]

[template public generateInputParameter(pin : Pin, index:Integer)]
[pin.name.generateInputParameter(pin.type, index)/]
[/template]

[template private generateInputParameter(name : String, type : Type, index:Integer) ? (name.oclIsUndefined())]
#error There is an input parameter/pin that doesn't have a name set. Fix the model and generate the code again.
//Here some info that might help you to find it: name: [name/] - type: [type/]
[/template]

[template private generateInputParameter(name : String, type : Type, index:Integer) ? (type.name.oclIsUndefined())]
#error Input parameter/pin [name/] does not have a type set. Fix the model and generate the code again.
//Here some additional info that might help you to find it: [name/] - type: [type/]
[/template]

[template private generateInputParameter(name : String, type : Type, index:Integer) ? (not (name.oclIsUndefined() or type.name.oclIsUndefined()))]
std::shared_ptr<Bag<fUML::Semantics::Values::Value>> [name/]ValueList = inputParameters->at([index/])->getValues();
[/template]


[comment]OUTPUT SWITCH ----------------------------------------------------------[/comment]
[template public generateOutputParameter(par : Parameter) ? (par.name.oclIsUndefined())]
#error There is an output parameter that doesn't have a name set. Fix the model and generate the code again.
[/template]

[template public generateOutputParameter(par : Parameter) ? (par.type.name.oclIsUndefined())]
#error Output parameter [par.name/] doesn't have a type set. Fix the model and generate the code again.
[/template]

[template public generateOutputParameter(par : Parameter) ? (par.type.supportedTypes())]
std::shared_ptr<fUML::Semantics::SimpleClassifiers::[par.type.name/]Value> [par.name/]OutValue([getFUMLSimpleClassifierFactory()/]->create[par.type.name/]Value());
[/template]

[template public generateOutputParameter(par : Parameter) ? (not type.supportedTypes() and type.oclIsKindOf(Enumeration))]
std::shared_ptr<fUML::Semantics::SimpleClassifiers::EnumerationValue> [par.name/]OutValue([getFUMLSimpleClassifierFactory()/]->createEnumerationValue());
[/template]

[template public generateOutputParameter(par : Parameter) ? ((not type.supportedTypes()) and (not type.oclIsKindOf(Enumeration)))]
std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> [par.name/]OutValue([getFUMLStructuredClassifierFactory()/]->createReference());
std::shared_ptr<[par.type.name.toUpperFirst()/]Object> [par.name/]OutUmlLinker(new [par.type.name.toUpperFirst()/]Object([par.name.toLowerFirst()/][if (par.upper <> 1)]Temp[/if]));
[par.name/]OutUmlLinker->setThis[par.type.name.toUpperFirst()/]ObjectPtr([par.name/]OutUmlLinker);
[/template]


[comment]INCLUDE SWITCH----------------------------------------------------------[/comment]
[template public generateTypeInclude(type : Type, aPackage : Package) ? ((not type.supportedTypes()) and (not type.oclIsKindOf(Enumeration)))]
#include "[type.getNearestPackage().myNamespaceName()/]/[type.name/].hpp"
#include "[aPackage.getPackageName()/]Exec/[type.name/]Object.hpp"
[/template]

[template public generateTypeInclude(type : Type, aPackage : Package) ? (not type.supportedTypes() and type.oclIsKindOf(Enumeration))]
#include "fUML/Semantics/SimpleClassifiers/EnumerationValue.hpp"
#include "[type.getNearestPackage().myNamespaceName()/]/[type.name/].hpp"
#include "[type.getNearestPackage().myNamespaceName()/]/[type.getNearestPackage().myNamespaceName()/]Package.hpp"
[/template]

[template public generateTypeInclude(type : Type, aPackage : Package) ? (supportedTypes())]
#include "fUML/Semantics/SimpleClassifiers/[type.name/]Value.hpp"
[/template]