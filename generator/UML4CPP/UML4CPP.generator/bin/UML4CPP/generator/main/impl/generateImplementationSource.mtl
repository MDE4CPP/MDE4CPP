[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate class implementation source file
 * 
 */]
[module generateImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::components::generateInterface /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::setGetHelper /]
[import UML4CPP::generator::main::validation::validateModel /]

[query private includes(aClass : Class)  : Set(Type) = OrderedSet{aClass.member->selectByKind(TypedElement)->select(not type.oclIsUndefined()).type, aClass.ownedOperation.ownedParameter.type}->flatten() /]
[query private includes(aInterface : Interface)  : Set(Type) = OrderedSet{aInterface.member->selectByKind(TypedElement)->select(not type.oclIsUndefined()).type, aInterface.ownedOperation.ownedParameter.type}->flatten() /]

[template public generateImplementationSource(aClass : Class) { className : String = aClass.name.toUpperFirst().concat('Impl'); aPackage : Package = aClass.ancestors()->filter(Package)->first(); }]
[file (aPackage.getPackageName().concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]/impl/[className.concat('.hpp')/]"

[defineDebugMacro()/]

#include <iostream>

[generateAbstractDataTypesIncludes()/]
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aPackage.getPackageName()/]/impl/[aPackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
#include "[aClass.eClass().ePackage.name/]/[aClass.eClass().name/].hpp"
[for (cl : Type | aClass.includes()->sortedBy(myQualifiedName())) ? ( oclIsKindOf(Class) or oclIsKindOf(Interface))]
[if (cl.oclIsUndefined() or cl.name.oclIsUndefined())]
// undefined  [cl.eClass().name/] ([cl.toString()/]) ['class '.concat(aClass.name).concat(': header include failed for undefined ').concat(cl.eClass().name).concat(' ').concat(cl.toString()).registerError()/]
[else]
#include "[cl.getNearestPackage().myNamespaceName()/]/[cl.name.toUpperFirst()/].hpp"
[/if]
[/for]

[if (aClass.ownedOperation.method->notEmpty())][if(ownedOperation.method->filter(Activity)->notEmpty())]
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"
[/if][/if]

[for (aOperation : Operation | aClass.ownedOperation->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (aOperation.method->notEmpty())]
[if (aOperation.method->asOrderedSet()->first().oclIsKindOf(OpaqueBehavior))]
[if (aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->includes(keyInclude()))]
[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->asOrderedSet()->indexOf(keyInclude())]
[if (0 < index and index <= aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->size())]
//Included from operation "[aOperation.name/]"
[aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->asOrderedSet()->at(index)/]
[/if][/let][/if][/if][/if][/for]

[if (aClass.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration))->size() > 0)]
#include "uml/EnumerationLiteral.hpp"
[/if]
[for (instVal : InstanceValue | aClass.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aClass.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
[else]
#include "[instVal.type._package.getPackageName()/]/[instVal.type._package.getPackageName()/]Factory.hpp"
#include "[instVal.type._package.getPackageName()/]/[instVal.type.name.toUpperFirst()/].hpp"
[/if]
[/for]

[if (not aPackage.ignoreNamespace())]using namespace [aPackage.name/];[/if]

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
	//***********************************
	// init Get Set
	[aClass.generateGetSetInit()/] 

	// init properties without default
	[for (aProperty : Property | aClass.ownedAttribute->sortedBy(myQualifiedName()))]
	[if (aProperty.default->isEmpty() and aProperty.upper <> 1)][aProperty.initAttributeProtectedMember()/][/if]
	[/for]

	[for (instVal : InstanceValue | aClass.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
	[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
	// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aClass.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
	[else]
	[instVal.initPropertyFromInstanceValue()/]
	[/if]
	[/for]
	
}

[for (anAssociation : Association | aClass.getCompositionsToClass())]
[let containerProperty : Property = anAssociation.memberEnd->select(type = aClass)->asOrderedSet()->first()]
[let containmentProperty : Property = anAssociation.memberEnd->select(not (type = aClass))->asOrderedSet()->first()]
[if (containmentProperty.isBackReference())]
[className/]::[className/]([containmentProperty.generateCppType()/] [containmentProperty.name.toLowerFirst()/])
:[className/]()
{
    m_[containmentProperty.name/] = [containmentProperty.name.toLowerFirst()/];
}
[/if] [/let] [/let] [/for]

[className/]::~[className/]()
{
}

[if (isSingleton())]
[aClass.name.toUpperFirst()/]* [className/]::create()
{
	return new [className/]();
}
[/if]

std::shared_ptr<uml::Class> [className/]::getMetaClass()
{
	return [aPackage.name.concat('PackageImpl').toUpperFirst()/]::eInstance()->[aClass.generatePackageGetterCall(aClass)/];
}

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : Property | aClass.ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp()/]
[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]
[for (interfaceR : InterfaceRealization | aClass.ownedElement->filter(InterfaceRealization)->sortedBy(myQualifiedName()))] [for (aAttribute : Property | interfaceR.supplier.oclAsType(Interface).ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')] [if (aClass.ownedAttribute->select(name=aAttribute.name)->size() = 0)]
[aAttribute.generateAttributeSetterImplementationCpp(aClass)/]
[aAttribute.generateAttributeGetterImplementationCpp(aClass)/]
[/if][/for][/for]

//*********************************
// Operations
//*********************************
[for (aOperation : Operation | aClass.ownedOperation->sortedBy(myQualifiedName())) separator('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateeGetSetImpl()/]
[aClass.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration)).generateESetFunctionForEnumerationImpl(aClass)/]

[aClass.generateGetThisPtrCPP()/]
[/file]
[/template]


[template public generateImplementationSource(aInterface : Interface) { interfaceName : String = aInterface.name.toUpperFirst().concat('Impl'); aPackage : Package = aInterface.ancestors()->filter(Package)->first(); }]
[file (aPackage.getPackageName().concat('/impl/').concat(interfaceName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]/impl/[interfaceName.concat('.hpp')/]"

[defineDebugMacro()/]

#include <iostream>

[generateAbstractDataTypesIncludes()/]
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aPackage.getPackageName()/]/impl/[aPackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
#include "[aInterface.eClass().ePackage.name/]/[aInterface.eClass().name/].hpp"
[for (cl : Type | aInterface.includes()->sortedBy(myQualifiedName())) ? ( oclIsKindOf(Class) or oclIsKindOf(Interface))]
[if (cl.oclIsUndefined() or cl.name.oclIsUndefined())]
// undefined  [cl.eClass().name/] ([cl.toString()/]) ['class '.concat(aInterface.name).concat(': header include failed for undefined ').concat(cl.eClass().name).concat(' ').concat(cl.toString()).registerError()/]
[else]
#include "[cl.getNearestPackage().myNamespaceName()/]/[cl.name.toUpperFirst()/].hpp"
[/if]
[/for]

[if (aInterface.ownedOperation.method->notEmpty())][if(ownedOperation.method->filter(Activity)->notEmpty())]
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"
[/if][/if]

[for (aOperation : Operation | aInterface.ownedOperation->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (aOperation.method->notEmpty())]
[if (aOperation.method->asOrderedSet()->first().oclIsKindOf(OpaqueBehavior))]
[if (aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->includes(keyInclude()))]
[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->asOrderedSet()->indexOf(keyInclude())]
[if (0 < index and index <= aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->size())]
//Included from operation "[aOperation.name/]"
[aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->asOrderedSet()->at(index)/]
[/if][/let][/if][/if][/if][/for]

[if (aInterface.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration))->size() > 0)]
#include "uml/EnumerationLiteral.hpp"
[/if]
[for (instVal : InstanceValue | aInterface.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aInterface.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
[else]
#include "[instVal.type._package.getPackageName()/]/[instVal.type._package.getPackageName()/]Factory.hpp"
#include "[instVal.type._package.getPackageName()/]/[instVal.type.name.toUpperFirst()/].hpp"
[/if]
[/for]

[if (not aPackage.ignoreNamespace())]using namespace [aPackage.name/];[/if]

//*********************************
// Constructor / Destructor
//*********************************
[interfaceName/]::[interfaceName/]()
{
	//***********************************
	// init Get Set
	[aInterface.generateGetSetInit()/] 

	// init properties without default
	[for (aProperty : Property | aInterface.ownedAttribute->sortedBy(myQualifiedName()))]
	[if (aProperty.default->isEmpty() and aProperty.upper <> 1)][aProperty.initAttributeProtectedMember()/][/if]
	[/for]

	[for (instVal : InstanceValue | aInterface.ownedAttribute.defaultValue->reject(oclIsUndefined())->selectByType(InstanceValue)->reject(type.oclIsUndefined() or type.oclIsKindOf(Enumeration))->sortedBy(myQualifiedName()))]
	[if (instVal.type.oclIsUndefined() or instVal.type.name.oclIsUndefined())]
	// undefined type of InstanceValue [instVal.qualifiedName/] ([instVal.type.toString()/]) ['class '.concat(aInterface.name).concat(': undefined type of InstanceValue ').concat(instVal.qualifiedName).concat(' (').concat(instVal.type.toString()).registerError()/]
	[else]
	[instVal.initPropertyFromInstanceValue()/]
	[/if]
	[/for]
	
}

[for (anAssociation : Association | aInterface.getCompositionsToInterface())]
[let containerProperty : Property = anAssociation.memberEnd->select(type = aInterface)->asOrderedSet()->first()]
[let containmentProperty : Property = anAssociation.memberEnd->select(not (type = aInterface))->asOrderedSet()->first()]
[if (containmentProperty.isBackReference())]
[interfaceName/]::[interfaceName/]([containmentProperty.generateCppType()/] [containmentProperty.name.toLowerFirst()/])
:[interfaceName/]()
{
    m_[containmentProperty.name/] = [containmentProperty.name.toLowerFirst()/];
}
[/if] [/let] [/let] [/for]

[interfaceName/]::~[interfaceName/]()
{
}

[if (isSingleton())]
[aInterface.name.toUpperFirst()/]* [interfaceName/]::create()
{
	return new [interfaceName/]();
}
[/if]

/*std::shared_ptr<uml::Class> [interfaceName/]::getMetaClass()
{
	return [aPackage.name.concat('PackageImpl').toUpperFirst()/]::eInstance()->[aInterface.generatePackageGetterCall(aInterface)/];
}*/

//*********************************
// Attribute Setter Getter
//*********************************
[for (aAttribute : Property | aInterface.ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp()/]
[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]
[for (interfaceR : InterfaceRealization | aInterface.ownedElement->filter(InterfaceRealization)->sortedBy(myQualifiedName()))] [for (aAttribute : Property | interfaceR.supplier.oclAsType(Interface).ownedAttribute->sortedBy(myQualifiedName())) separator ('\n')] [if (aInterface.ownedAttribute->select(name=aAttribute.name)->size() = 0)]
[aAttribute.generateAttributeSetterImplementationCpp(aInterface)/]
[aAttribute.generateAttributeGetterImplementationCpp(aInterface)/]
[/if][/for][/for]

//*********************************
// Operations
//*********************************
[for (aOperation : Operation | aInterface.ownedOperation->sortedBy(myQualifiedName())) separator('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aInterface.generateeGetSetImpl()/]
[aInterface.ownedAttribute->select(hasSetter())->select(type.oclIsKindOf(Enumeration)).generateESetFunctionForEnumerationImpl(aInterface)/]

[aInterface.generateGetThisPtrCPP()/]
[/file]
[/template]