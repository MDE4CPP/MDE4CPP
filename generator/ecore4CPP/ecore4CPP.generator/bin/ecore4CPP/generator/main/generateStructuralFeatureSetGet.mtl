[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateStructuralFeatureSetGet('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::generateAttribute /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::generateReference /]

[**
 * eGet Function
*/]
[template public generateeGetDel(aClass : EClass,impl : Boolean)]
virtual Any eGet(int featureID, bool resolve, bool coreType) const [abstractSufix(impl)/];
[/template]

[template public generateeIsSetDel(aClass : EClass,impl : Boolean)]
virtual bool internalEIsSet(int featureID) const [abstractSufix(impl)/];
[/template]

[template public generateeSetDel(aClass : EClass,impl : Boolean)]
virtual bool eSet(int featureID, Any newValue) [abstractSufix(impl)/];
[/template]

[template public generateeGetImpl(aClass : EClass)]
Any [aClass.name.toUpperFirst().concat('Impl')/]::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
	[for (struct : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.getStaticAttributeIDName()/]:
[if (struct.eType.oclIsKindOf(EDataType))]
			return eAny([struct.GetterName()/]()); //[aClass.getMyClassifierID()/][struct.getFeatureID()/]
[elseif (struct.upperBound = 1)]
			return eAny(std::dynamic_pointer_cast<ecore::EObject>([struct.GetterName()/]()[if (struct.oclAsType(EReference).isBackReference())].lock()[/if])); //[aClass.getMyClassifierID()/][struct.getFeatureID()/]
[else]
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<[struct.eGenericType.generateCppType()/]>::iterator iter = m_[struct.name/]->begin();
			Bag<[struct.eGenericType.generateCppType()/]>::iterator end = m_[struct.name/]->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //[aClass.getMyClassifierID()/][struct.getFeatureID()/]
		}
[/if]
	[/for]
	}
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
[elseif (aClass.eSuperTypes->size() = 1)]
	return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::eGet(featureID, resolve, coreType);
[else]
	Any result;
	[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
	[for (sClass : EClass | eClasses)]
	result = [ClassWithNamespace(aClass,sClass)/]Impl::eGet(featureID, resolve, coreType);
	[if (sClass <> eClasses->last())]
	if (!result->isEmpty())
	{
		return result;
	}
	[/if]
	[/for]
	return result;
	[/let]
[/if]
}
[/template]

[template public generateeIsSetImpl(aClass : EClass)]
bool [aClass.name.toUpperFirst().concat('Impl')/]::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
	[for (struct : EStructuralFeature | aClass.eStructuralFeatures->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.getStaticAttributeIDName()/]:
			return [struct.generateComparison()/]; //[aClass.getMyClassifierID()/][struct.getFeatureID()/]
	[/for]
	}
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	return ecore::EObjectImpl::internalEIsSet(featureID);
[elseif (aClass.eSuperTypes->size() = 1)]
	return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::internalEIsSet(featureID);
[else]
	bool result = false;
	[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
	[for (sClass : EClass | eClasses)]
	result = [ClassWithNamespace(aClass,sClass)/]Impl::internalEIsSet(featureID);
	[if (sClass <> eClasses->last())]
	if (result)
	{
		return result;
	}
	[/if]
	[/for]
	return result;
	[/let]
[/if]
}
[/template]

[template public generateeSetImpl(aClass : EClass)]
bool [aClass.name.toUpperFirst().concat('Impl')/]::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
[for (struct : EStructuralFeature | aClass.eStructuralFeatures->select(changeable)->asOrderedSet()->sortedBy(name))]
		case [struct.metamodelPackageNameForEstructuralFeture(aClass)/]::[struct.getStaticAttributeIDName()/]:
		{
			// BOOST CAST
[if (struct.eType.oclIsKindOf(EDataType) and struct.upperBound = 1)]
			[struct.eGenericType.generateCppType()/] _[struct.name/] = newValue->get<[struct.eGenericType.generateCppType()/]>();
			[struct.SetterName()/](_[struct.name/]); //[aClass.getMyClassifierID()/][struct.getFeatureID()/]
[elseif (struct.eType.oclIsKindOf(EDataType))]
			// nothing to do
[elseif (struct.upperBound = 1)]
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<[struct.eGenericType.generateCppType()/]> _[struct.name/] = std::dynamic_pointer_cast<[struct.eGenericType.generateCppType()/]>(_temp);
			[struct.SetterName()/](_[struct.name/]); //[aClass.getMyClassifierID()/][struct.getFeatureID()/]
[else]
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<[struct.eGenericType.generateCppType()/]>> [struct.name/]List(new Bag<[struct.eGenericType.generateCppType()/]>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				[struct.name/]List->add(std::dynamic_pointer_cast<[struct.eGenericType.generateCppType()/]>(*iter));
				iter++;
			}
			
			Bag<[struct.eGenericType.generateCppType()/]>::iterator iter[struct.name.toUpperFirst()/] = m_[struct.name/]->begin();
			Bag<[struct.eGenericType.generateCppType()/]>::iterator end[struct.name.toUpperFirst()/] = m_[struct.name/]->end();
			while (iter[struct.name.toUpperFirst()/] != end[struct.name.toUpperFirst()/])
			{
				if ([struct.name/]List->find(*iter[struct.name.toUpperFirst()/]) == -1)
				{
					m_[struct.name/]->erase(*iter[struct.name.toUpperFirst()/]);
				}
				iter[struct.name.toUpperFirst()/]++;
			}

			iter[struct.name.toUpperFirst()/] = [struct.name/]List->begin();
			end[struct.name.toUpperFirst()/] = [struct.name/]List->end();
			while (iter[struct.name.toUpperFirst()/] != end[struct.name.toUpperFirst()/])
			{
				if (m_[struct.name/]->find(*iter[struct.name.toUpperFirst()/]) == -1)
				{
					m_[struct.name/]->add(*iter[struct.name.toUpperFirst()/]);
				}
				iter[struct.name.toUpperFirst()/]++;			
			}
[/if]
			return true;
		}
[/for]
	}

[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	return ecore::EObjectImpl::eSet(featureID, newValue);
[elseif (aClass.eSuperTypes->size() = 1)]
	return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::eSet(featureID, newValue);
[else]
	bool result = false;
	[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
	[for (sClass : EClass | eClasses)]
	result = [ClassWithNamespace(aClass,sClass)/]Impl::eSet(featureID, newValue);
	[if (sClass <> eClasses->last())]
	if (result)
	{
		return result;
	}
	[/if]
	[/for]
	return result;
	[/let]
[/if]
}
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (oclIsKindOf(EAttribute) and not eType.requiresAny()) post (trim())]
[if (anStructFeature.upperBound <> 1)]
![anStructFeature.GetterName()/]()->empty()
[elseif (eType.oclIsKindOf(EEnum))]
m_[anStructFeature.name/] ![anStructFeature.oclAsType(EAttribute).generateDefaultValue()/];
[else]
[anStructFeature.GetterName()/]() != [anStructFeature.oclAsType(EAttribute).getDefaultValue()/]
[/if]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (not oclIsKindOf(EAttribute) and not eType.requiresAny())]
[anStructFeature.GetterName()/]()[if (anStructFeature.oclIsKindOf(EReference))][if(anStructFeature.oclAsType(EReference).isBackReference())].lock()[/if][/if] != [anStructFeature.eType.getDefaultValue()/]
[/template]

[template public generateComparison(anStructFeature : EStructuralFeature) ? (eType.requiresAny())]
[anStructFeature.GetterName()/]() != nullptr[comment TODO what is the default value of Any?/]
[/template]