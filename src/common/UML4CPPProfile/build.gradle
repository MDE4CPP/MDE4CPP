// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::configuration::generateGradleFiles

description 'Build tasks for project: UML4CPPProfile'

task runCommandCompileUML4CPPProfile(type:Exec) {
	commandLine 'cmd', '/c', 'gradlew src_gen:compileUML4CPPProfileSrc'
	mustRunAfter =  [
		"generateUML4CPPProfile" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
		, getRootProject().getTasksByName('compileEcoreReflection', true)
		, getRootProject().getTasksByName('compilePrimitivetypesReflection', true)
		, getRootProject().getTasksByName('compileUmlReflection', true)
	]
}

task runCommandGenerateUML4CPPProfile(type:Exec) {
	def modelPath = file('.' + File.separator + 'model' + File.separator + 'UML4CPPProfile.uml')
	commandLine 'cmd', '/c', 'gradlew :src:common:universalGradleTasks:generateModel -PModel='+modelPath.absolutePath
}

task generateUML4CPPProfile() {
	group 'UML4CPPProfile'	
	description 'generate C++ code of UML4CPPProfile.uml model UML4CPPProfile' 
 
	def buildFile = file('model/build.gradle')
	if(!buildFile.exists())
	{
		dependsOn 'runCommandGenerateUML4CPPProfile'
	}
	else
	{
		dependsOn 'model:generateUML4CPPProfileModel'
	}
}

task compileUML4CPPProfile() {
	group 'UML4CPPProfile'
	description 'compile UML4CPPProfile'

	def buildFile = file('src_gen/build.gradle')
	if(!buildFile.exists()){ 
		mustRunAfter = ["generateUML4CPPProfile"]
		dependsOn 'runCommandCompileUML4CPPProfile'
	}
	else
	{
		mustRunAfter = ["generateUML4CPPProfile"]
		dependsOn 'src_gen:compileUML4CPPProfileSrc'
	}
	mustRunAfter =  [
		"generateUML4CPPProfile" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
		, getRootProject().getTasksByName('compileEcoreReflection', true)
		, getRootProject().getTasksByName('compilePrimitivetypesReflection', true)
		, getRootProject().getTasksByName('compileUmlReflection', true)
	]
}

task buildUML4CPPProfile() {
	group 'UML4CPPProfile'
	description 'build UML4CPPProfile'

	dependsOn 'generateUML4CPPProfile'
	dependsOn 'compileUML4CPPProfile'
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
	dependsOn getRootProject().getTasksByName('buildEcoreReflection', true)
	dependsOn getRootProject().getTasksByName('buildPrimitivetypesReflection', true)
	dependsOn getRootProject().getTasksByName('buildUmlReflection', true)
}
