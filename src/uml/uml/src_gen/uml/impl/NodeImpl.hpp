//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_NODENODEIMPL_HPP
#define UML_NODENODEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Node.hpp"

#include "uml/impl/ClassImpl.hpp"
#include "uml/impl/DeploymentTargetImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API NodeImpl : virtual public ClassImpl, virtual public DeploymentTargetImpl, virtual public Node 
	{
		public: 
			NodeImpl(const NodeImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			NodeImpl& operator=(NodeImpl const&); 

		protected:
			friend class umlFactoryImpl;
			NodeImpl();
			virtual std::shared_ptr<uml::Node> getThisNodePtr() const;
			virtual void setThisNodePtr(std::weak_ptr<uml::Node> thisNodePtr);

			//Additional constructors for the containments back reference
			NodeImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			NodeImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			NodeImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id);
			//Additional constructors for the containments back reference
			NodeImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);
			//Additional constructors for the containments back reference

		public:
			//destructor
			virtual ~NodeImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			Creates a (binary) communication path between this node and the specified other node, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this node's nearest package.
			*/
			 
			virtual std::shared_ptr<uml::CommunicationPath> createCommunicationPath(bool end1IsNavigable, uml::AggregationKind end1Aggregation, std::string end1Name, int end1Lower, int end1Upper, std::shared_ptr<uml::Node> end1Node, bool end2IsNavigable, uml::AggregationKind end2Aggregation, std::string end2Name, int end2Lower, int end2Upper) ;
			/*!
			Retrieves the communication paths in which this node is involved.
			*/
			 
			virtual std::shared_ptr<Bag<uml::CommunicationPath>> getCommunicationPaths() ;
			/*!
			The internal structure of a Node (if defined) consists solely of parts of type Node.
			part->forAll(oclIsKindOf(Node))
			*/
			 
			virtual bool internal_structure(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The Nodes that are defined (nested) within the Node.
			<p>From package UML::Deployments.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Node, uml::NamedElement>> getNestedNode() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::Node> m_thisNodePtr;
	};
}
#endif /* end of include guard: UML_NODENODEIMPL_HPP */
