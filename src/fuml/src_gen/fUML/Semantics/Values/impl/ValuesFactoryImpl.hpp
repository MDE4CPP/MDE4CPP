//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_VALUESFACTORYIMPL_HPP
#define FUML_SEMANTICS_VALUESFACTORYIMPL_HPP

// namespace macro header include
#include "fUML/fUML.hpp"

#include "ecore/impl/EFactoryImpl.hpp"

#include "fUML/Semantics/Values/ValuesFactory.hpp"

namespace Values 
{
}

namespace fUML::Semantics::Values 
{
	class FUML_API ValuesFactoryImpl : virtual public ecore::EFactoryImpl , virtual public ValuesFactory 
	{
		private:    
			ValuesFactoryImpl(ValuesFactoryImpl const&) = delete;
			ValuesFactoryImpl& operator=(ValuesFactoryImpl const&) = delete;

		protected:
			friend class ValuesFactory;
			// Constructor
			ValuesFactoryImpl();

		public:
			virtual ~ValuesFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 

		private:
			static ValuesFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_VALUESFACTORYIMPL_HPP */
