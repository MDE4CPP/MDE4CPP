// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::configuration::generateGradleFiles

description 'Build tasks for project: primitivetypesReflection'

task runCommandCompilePrimitivetypesReflection(type:Exec) {
	commandLine 'cmd', '/c', 'gradlew src_gen:compilePrimitivetypesReflectionSrc'
	mustRunAfter =  [
		"generatePrimitivetypesReflection" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
	]
}

task runCommandGeneratePrimitivetypesReflection(type:Exec) {
	def modelPath = file('.' + File.separator + 'model' + File.separator + 'primitivetypesReflection.uml')
	commandLine 'cmd', '/c', 'gradlew :src:common:universalGradleTasks:generateModel -PModel='+modelPath.absolutePath
}

task generatePrimitivetypesReflection() {
	group 'primitivetypesReflection'	
	description 'generate C++ code of primitivetypesReflection.uml model primitivetypesReflection' 
 
	def buildFile = file('model/build.gradle')
	if(!buildFile.exists())
	{
		dependsOn 'runCommandGeneratePrimitivetypesReflection'
	}
	else
	{
		dependsOn 'model:generatePrimitivetypesReflectionModel'
	}
}

task compilePrimitivetypesReflection() {
	group 'primitivetypesReflection'
	description 'compile primitivetypesReflection'

	def buildFile = file('src_gen/build.gradle')
	if(!buildFile.exists()){ 
		mustRunAfter = ["generatePrimitivetypesReflection"]
		dependsOn 'runCommandCompilePrimitivetypesReflection'
	}
	else
	{
		mustRunAfter = ["generatePrimitivetypesReflection"]
		dependsOn 'src_gen:compilePrimitivetypesReflectionSrc'
	}
	mustRunAfter =  [
		"generatePrimitivetypesReflection" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
	]
}

task buildPrimitivetypesReflection() {
	group 'primitivetypesReflection'
	description 'build primitivetypesReflection'

	dependsOn 'generatePrimitivetypesReflection'
	dependsOn 'compilePrimitivetypesReflection'
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
}
