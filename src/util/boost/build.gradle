/*
 * MDE4CPP - Model Driven Engineering for C++
 *
 * Copyright (c) TU Ilmenau, Systems and Software Engineering Group
 * All rights reserved.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */
import tui.sse.mde4cpp.MDE4CPPCompile
import org.gradle.internal.os.OperatingSystem;

plugins {
	id "de.undercouch.download" version "4.1.2"
}

description '3rdparty: boost'

def boostVersion = "1_83_0"

task downloadFile(type: Download) {
	description 'download boost'
    src "https://boostorg.jfrog.io/artifactory/main/release/1.83.0/source/boost_${boostVersion}.zip"
    dest new File(file("./boost_${boostVersion}.zip").absolutePath)
    onlyIfModified true
    quiet true
}

task downloadAndUnzipFile(dependsOn: downloadFile, type: Copy) {
	description 'download and unzip boost'
	from zipTree("boost_${boostVersion}.zip")
	into '.'
}

task deliverBoostLibray(dependsOn: downloadAndUnzipFile, type: Copy) {
	group 'Boost'
	description 'deliver boost library to %MDE4CPP_HOME%/application/include/boost' 
	from ("./boost_${boostVersion}/boost")	
	into file([rootDir,'application','include','boost'].join(File.separator))
	
}


task clean {
	// Extension of gradle built-in task:clean
	doLast {
		def boost_dir = file('boost_${boostVersion}')
		if(boost_dir.exists()){
			delete boost_dir.absolutePath
			println "deleting: " + boost_dir.absolutePath
		}
		def boostZip_dir = file('boost_${boostVersion}.zip')
		if(boostZip_dir.exists()){
			delete boostZip_dir.absolutePath
			println "deleting: " + boostZip_dir.absolutePath
		}
		deliverBoostLibray.outputs.files.each{
			if(it.exists()){
				delete it.absolutePath
			    println "deleting: " + it
			}
  		}	
	}
}

//EOF
