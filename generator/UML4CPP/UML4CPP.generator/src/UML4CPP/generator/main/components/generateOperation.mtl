[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Operation artefacts
 * 
 */]
[module generateOperation('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateParameter /]
[import UML4CPP::generator::main::components::generateStereotype /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * generate operation declaration
 */]
[template public generateOperationDecl(aOperation : Operation, impl: Boolean)]
virtual [aOperation.generateCppType()/] [aOperation.name/]([for (sParameter : Parameter | aOperation.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (', ')][sParameter.generateCppType(true)/] [sParameter.name/][if (sParameter.default->notEmpty())] = [sParameter.genDefault()/][/if][/for]) [abstractSuffix(impl)/];

[/template]

[**
 * generate operation implementation
 * 
 * body of operation contains one of the following points:
 * - content of FunctionBehavior -> if first method is FunctionBehavior
 * - calling an Activity by fUML execution engine -> if first method is Activity
 * - raise of UnsupportedOperationException -> if no method is defined
*/]
[template public generateOperationImplementation(aOperation : Operation)]
[aOperation.generateCppType()/] [aOperation.class.name.toUpperFirst()/]Impl::[aOperation.name/]([for (sParameter : Parameter | aOperation.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (',')]
[sParameter.generateCppType(true)/] [sParameter.name/][/for])
{
[if (aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
[let parameter : Parameter = aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first()]
	[aOperation.generateCppType()/] [if(parameter.name.oclIsUndefined())][parameter.myQualifiedName()/][else][parameter.name/][/if][if (parameter.upper > 1)](new Bag<[parameter.type.generateCppType(true)/]>())[/if];
[/let]
[/if]

[comment TODO: the following if is somethimes undefined when the method is an activity instead of a function behaviour/] 
[if (aOperation.method->notEmpty())]
[if(aOperation.method->filter(Activity)->notEmpty())]
	std::shared_ptr<PluginFramework> pluginFramework = PluginFramework::eInstance();
	std::string pluginName = "[aOperation.getNearestPackage().getPackageName()/]Exec";
	std::shared_ptr<MDE4CPPPlugin> plugin = pluginFramework->findPluginByName(pluginName);
	if (plugin)
	{
		DEBUG_MESSAGE(std::cout << "plugin" << plugin->eNAME() << " found" << std::endl;)

		std::shared_ptr<UMLExecutionModelPlugin> executionPlugin = std::dynamic_pointer_cast<UMLExecutionModelPlugin>(plugin);
		if (executionPlugin)
		{
			DEBUG_MESSAGE(std::cout << "JIHA fumlplugin " << executionPlugin->eNAME() << " is accessable" << std::endl;)

			std::shared_ptr<std::vector<Any>> parameterList(new std::vector<Any>());
[for (par : Parameter | aOperation.method->filter(Activity)->asOrderedSet()->first().ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name))]
			parameterList->push_back(eAny([par.name/]));
[/for]
[let anActivity : Activity = aOperation.method->filter(Activity)->asOrderedSet()->first()]
			Any result = executionPlugin->executeActivity([anActivity.getNearestPackage().myQualifiedTypeNamePackage()/]eInstance()->[anActivity.generatePackageGetterCall()/], parameterList, getThis[aOperation.class.name.toUpperFirst()/]Ptr());
[/let]

[if (aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
			[aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return).name/] = result->get<[aOperation.generateCppType()/]>();
[/if]
		}
		else
		{
			std::cout << "plugin " << plugin->eNAME() << " is not a fuml based plugin" << std::endl;
		}
	}
	else
	{ 
		std::cout << "plugin" << pluginName << " not found" << std::endl;
	}
[else]
[if(aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->notEmpty())]
	// Implemented as Opaque behaviour [aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).name/]

[if (aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->includes(keyCPP()))]
[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior).language->asOrderedSet()->indexOf(keyCPP()) ]
[if (0 < index and index <= aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->size())]
[aOperation.method->asOrderedSet()->first().oclAsType(OpaqueBehavior)._body->asOrderedSet()->at(index)/]
[/if][/let][/if][/if][/if]
[else]
	std::cout << __PRETTY_FUNCTION__ << std::endl;
	throw "UnsupportedOperationException";
[/if]

[if (aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
	return [if(aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first().name.oclIsUndefined())][aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first().myQualifiedName()/][else][aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return).name/][/if];
[/if]
}
[/template]

[**
 * generate creation of meta model instance for an Operation element
 * 
 * this includes:
 * - creation of operation
 * - creation of operation parameter
*/]
[template public generateOperationCreation(aOperation : Operation) post(trim())]
[if (not aOperation.class.oclIsUndefined())]
[memberName(aOperation)/] = factory->createOperation_in_Class([memberName(aOperation.class)/]);
[elseif (not aOperation.interface.oclIsUndefined())]
[memberName(aOperation)/] = factory->createOperation_in_Interface([memberName(aOperation.interface)/]);
[/if]
[aOperation.ownedParameter.generateParameterCreation()/]
[/template]

[**
 * generate initialization of meta model instance for an aOperation element
 * 
 * this includes:
 * - set operation name
 * - set methods
 * - initialize operation parameter
*/]
[template public initalizeOperation(aOperation : Operation)]
[memberName(aOperation)/]->setName("[aOperation.name/]");
[for (beh : Behavior | aOperation.method) separator ('\n')]
[memberName(aOperation)/]->getMethod()->push_back([memberName(beh)/]);[/for]

[for (anOwnedParameter : Parameter | aOperation.ownedParameter) separator ('\n')]
[anOwnedParameter.generateParameterInitialization()/]
[/for]

[aOperation.generateStereotypeApplication()/]
[/template]
