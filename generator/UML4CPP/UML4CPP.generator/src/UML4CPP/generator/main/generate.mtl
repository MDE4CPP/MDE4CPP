[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]


[import UML4CPP::generator::main::configuration::generateConfigurationFiles /]
[import UML4CPP::generator::main::factory::generateFactory /]
[import UML4CPP::generator::main::generateApplicationFiles /]
[import UML4CPP::generator::main::generateEnumerationFile /]
[import UML4CPP::generator::main::generateInterfaceModelFile /]
[import UML4CPP::generator::main::generateClassModelFile /]
[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::impl::generateImplementation /]
[import UML4CPP::generator::main::package::generatePackage /]
[import UML4CPP::generator::main::plugin::generateUMLPlugin /]
[import UML4CPP::generator::main::validation::validation/]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::profiles::strategyHelper /]
[import UML4CPP::generator::main::helpers::isGeneratableHelper /]
[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::model_package::global_functions::generatePackageGlobalFunctions /]

[template public generateUML(aPackage : Package)]
[comment @main/]

[comment Model validation /]
[if (getValidationStatus() = false)]
[let modelRootPackage : Package = aPackage.getRootPackage()]
	[comment]
	 * If info messages should be disabled during model validation and generation, uncomment the line below.
	[/comment]
	[comment] [disableInfosAll()/] [/comment]
	[comment]
	 * If warning messages should be disabled during model validation and generation, uncomment the line below.
	 * NOTE: If info messages are enabled, the generator will still inform you if warnings occured, but they won't be printed out anymore.
	[/comment]
	[comment] [disableWarningsAll()/] [/comment]
	[printInfo('Validating model...')/]
	[modelRootPackage.validateModel()/]
	[printInfo('Finished model validation')/]
	[printInfo('UML generation started', 'UML4CPP.generator.main.generate:generateUML')/]
[/let]
[/if]


[comment]
 * Info as well as warning messages can also be disabled from a specific level of depth
 * See examples below:
 *	disableInfos(2) - disables all warnings with level >= 2
 * 	disableWarnigs(1) - disables all warnings with level >= 1
 * Providing a level of 0 to these calls is equivalent to a call to disable*All()
[/comment]
[disableInfos(2)/]
[comment][disableWarnings(1)/] It is not recommended to disable warning messages![/comment]

[if (not aPackage.isDoNotGenerate())]
[comment Package generation /]
	[printInfo(aPackage.packageGenerationMessage())/]

	[aPackage.generateModel()/]
[else]
	[printInfo(aPackage.packageNoGenerationMessage())/]
[/if]
[/template]

[template public generateModel(aPackage : Package)]
[if (not aPackage.isPackageOnly())]
		[comment NOTE: strategy classes will be generated by fUML4CPP generator /]
	[comment Generate Classes /]
	[for (aClass : Class | aPackage.packagedElement->selectByType(Class))]
		[if (aClass.isGeneratable())]
			[printInfo(aClass.classifierGenerationMessage(), 1)/]
			[aClass.generateElement()/]
		[else]
			[printInfo(aClass.classifierNoGenerationMessage(), 1)/]
		[/if]
	[/for]
	[comment Generate Interfaces /]
	[for (anInterface : Interface | aPackage.packagedElement->filter(Interface))]
		[if (anInterface.isGeneratable())]
			[printInfo(anInterface.classifierGenerationMessage(), 1)/]
			[anInterface.generateInterfaceHeaderFile()/]
		[else]
			[printInfo(anInterface.classifierNoGenerationMessage(), 1)/]
		[/if]
	[/for]
	[comment Generate Enumerations /]
	[for (anEnumeration : Enumeration | aPackage.packagedElement->filter(Enumeration))]
		[if (anEnumeration.isGeneratable())]
			[printInfo(anEnumeration.classifierGenerationMessage(), 1)/]
			[anEnumeration.generateEnumerationFile()/]
		[else]
			[printInfo(anEnumeration.classifierNoGenerationMessage(), 1)/]
		[/if]
	[/for]	
	[comment Generate global functions /]
	[if (aPackage.collectOpaqueBehaviorsForGlobalFunctionsOfPackage()->size() > 0)]
		[printInfo('Generating global functions library for ' + aPackage.eClass().name + ' ' + aPackage.generateNamespace(false), 1)/]
		[aPackage.generatePackageGlobalFunctions()/]
	[/if]
	[if (aPackage.isRootPackage())]
		[comment Main application should only be generated for the root package/]
		[if (aPackage.hasMainBehavior())]
			[printInfo('Generating main application for ' + aPackage.eClass().name + ' ' + aPackage.generateNamespace(false), 1)/]
			[aPackage.generateApplication()/]
		[/if]
	[/if]

	[printInfo('Generating factory class for ' + aPackage.eClass().name + ' ' + aPackage.generateNamespace(false), 1)/]
	[aPackage.generateFactoryFiles()/]
[/if]

[printInfo('Generating package class for ' + aPackage.eClass().name + ' ' + aPackage.generateNamespace(false), 1)/]
[aPackage.generatePackageFiles()/]

[comment Configuration files and Plugin files should only be generated for the root package/]
[if (aPackage.isRootPackage())]
	[printInfo('Generating plugin class for ' + aPackage.eClass().name + ' ' + aPackage.generateNamespace(false), 1)/]
	[aPackage.generateUMLPluginFiles(aPackage.isPackageOnly())/]
	[aPackage.generateConfigurationFiles(aPackage.isPackageOnly())/]
[/if]
[/template]

[template public generateElement(aClass : Class)]
[aClass.generateModel()/]
[aClass.generateImplementation()/]
[/template]