[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML ActivityEdge artefacts
 * 
 */]
[module generateActivityEdge('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[query private getOwnerPropertyName(anActivityEdge : ActivityEdge) : String = if (anActivityEdge.owner.oclIsKindOf(Activity)) then 'Activity' else 'InStructuredNode' endif /]

[**
 * generate creation of meta model instance for an ActivityEdge element
*/]
[template public generateActivityEdgeCreation(anActivityEdge : ActivityEdge)]
[memberName(anActivityEdge)/] = factory->create[anActivityEdge.eClass().name/]_in_[anActivityEdge.getOwnerPropertyName()/]([anActivityEdge.owner.oclAsType(NamedElement).memberName()/]);

[/template]

[**
 * generate initialization of meta model instance for an Activity element
 * 
 * this includes:
 * - set ActivityEdge name
 * - set source element
 * - add edge to outgoing attribute of source element
 * - set target element
 * - add edge to incoming attribut of target element
 * - set guard specification 
*/]
[template public initializeEdge(anActivityEdge : ActivityEdge)]
[anActivityEdge.memberName()/]->setName("[anActivityEdge.name/]");
[anActivityEdge.memberName()/]->setSource([anActivityEdge.source.memberName()/]);
[anActivityEdge.source.memberName()/]->getOutgoing()->push_back([anActivityEdge.memberName()/]);
[anActivityEdge.memberName()/]->setTarget([anActivityEdge.target.memberName()/]);
[anActivityEdge.target.memberName()/]->getIncoming()->push_back([anActivityEdge.memberName()/]);
[if (not anActivityEdge.guard.oclIsUndefined())]
[anActivityEdge.memberName()/]->setGuard([anActivityEdge.guard.memberName()/]);
[/if]
[/template]