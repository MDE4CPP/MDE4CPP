//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSCS_SEMANTICS_ACTIONS_CS_DEFAULTCONSTRUCTSTRATEGY_HPP
#define PSCS_SEMANTICS_ACTIONS_CS_DEFAULTCONSTRUCTSTRATEGY_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T> class Bag; 



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSCS
{
	class PSCSFactory;
}

//Forward Declaration for used types 
namespace fUML::Semantics::Loci 
{
	class Locus;
}
namespace PSCS::Semantics::StructuredClassifiers 
{
	class CS_Object;
	class CS_Reference;
}
namespace fUML::Semantics::StructuredClassifiers 
{
	class Object;
}
namespace fUML::Semantics::Values 
{
	class Value;
}
namespace uml 
{
	class Association;
	class Class;
	class Connector;
	class ConnectorEnd;
	class Interface;
	class Operation;
	class Property;
}

// base class includes
#include "PSCS/Semantics/Actions/CS_ConstructStrategy.hpp"

// enum includes


//Includes from codegen annotation
#include "fUML/FUMLFactory.hpp"
#include <stdexcept>

#include "uml/Port.hpp"
#include "uml/TypedElement.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/InterfaceRealization.hpp"
#include "uml/umlFactory.hpp"
#include "uml/umlPackage.hpp"
#include "fUML/Semantics/SimpleClassifiers/FeatureValue.hpp"
#include "fUML/Semantics/Values/Evaluation.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_InteractionPoint.hpp"
#include "PSCS/Semantics/Values/CS_OpaqueExpressionEvaluation.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_Link.hpp"
#include "PSCS/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp"

//*********************************
namespace PSCS::Semantics::Actions 
{
	
	class CS_DefaultConstructStrategy:virtual public CS_ConstructStrategy
	{
		public:
 			CS_DefaultConstructStrategy(const CS_DefaultConstructStrategy &) {}
			CS_DefaultConstructStrategy& operator=(CS_DefaultConstructStrategy const&) = delete;

		protected:
			CS_DefaultConstructStrategy(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~CS_DefaultConstructStrategy() {}

			//*********************************
			// Operations
			//*********************************
			 
			virtual void addStructuralFeatureValue(std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> context,std::shared_ptr<org.eclipse.uml2.uml.Property> feature,std::shared_ptr<fUML::Semantics::Values::Value> value) = 0;
			
			 
			virtual bool canInstantiate(std::shared_ptr<org.eclipse.uml2.uml.Property> p) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::StructuredClassifiers::Object> construct(std::shared_ptr<org.eclipse.uml2.uml.Operation> constructor,std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Object> context) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::StructuredClassifiers::Object> constructObject(std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Object> context,std::shared_ptr<org.eclipse.uml2.uml.Class> type) = 0;
			
			 
			virtual void generateArrayPattern(std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> context,std::shared_ptr<org.eclipse.uml2.uml.Connector> connector) = 0;
			
			 
			virtual std::shared_ptr<org.eclipse.uml2.uml.Class> generateRealizingClass(std::shared_ptr<org.eclipse.uml2.uml.Interface> interface_,std::string className) = 0;
			
			 
			virtual void generateStarPattern(std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> context,std::shared_ptr<org.eclipse.uml2.uml.Connector> connector) = 0;
			
			 
			virtual int getCardinality(std::shared_ptr<org.eclipse.uml2.uml.ConnectorEnd> end) = 0;
			
			 
			virtual std::shared_ptr<org.eclipse.uml2.uml.Association> getDefaultAssociation() = 0;
			
			 
			virtual std::shared_ptr<org.eclipse.uml2.uml.Class> getRealizingClass(std::shared_ptr<org.eclipse.uml2.uml.Interface> interface_) = 0;
			
			 
			virtual std::shared_ptr<Bag<fUML::Semantics::Values::Value> > getValuesFromConnectorEnd(std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> context,std::shared_ptr<org.eclipse.uml2.uml.ConnectorEnd> end) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::StructuredClassifiers::Object> instantiateInterface(std::shared_ptr<org.eclipse.uml2.uml.Interface> interface,std::shared_ptr<fUML::Semantics::Loci::Locus> locus) = 0;
			
			 
			virtual bool isArrayPattern(std::shared_ptr<org.eclipse.uml2.uml.Connector> c) = 0;
			
			 
			virtual bool isStarPattern(std::shared_ptr<org.eclipse.uml2.uml.Connector> c) = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			
			virtual std::shared_ptr<org.eclipse.uml2.uml.Association > getDefaultAssociation() const = 0;
			
			
			virtual void setDefaultAssociation(std::shared_ptr<org.eclipse.uml2.uml.Association> _defaultAssociation) = 0;
			
			
			virtual std::shared_ptr<Bag<org.eclipse.uml2.uml.Class>> getGeneratedRealizingClasses() const = 0;
			
			
			
			virtual std::shared_ptr<fUML::Semantics::Loci::Locus > getLocus() const = 0;
			
			
			virtual void setLocus(std::shared_ptr<fUML::Semantics::Loci::Locus> _locus) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			
			std::shared_ptr<org.eclipse.uml2.uml.Association > m_defaultAssociation;
			mutable std::shared_ptr<Bag<org.eclipse.uml2.uml.Class>> m_generatedRealizingClasses;
			std::shared_ptr<fUML::Semantics::Loci::Locus > m_locus;

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: PSCS_SEMANTICS_ACTIONS_CS_DEFAULTCONSTRUCTSTRATEGY_HPP */
