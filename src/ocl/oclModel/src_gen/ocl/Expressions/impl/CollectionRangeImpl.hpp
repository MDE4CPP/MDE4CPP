//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONS_COLLECTIONRANGECOLLECTIONRANGEIMPL_HPP
#define OCL_EXPRESSIONS_COLLECTIONRANGECOLLECTIONRANGEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "ocl/ocl.hpp" 

// model includes
#include "../CollectionRange.hpp"

#include "ocl/Expressions/impl/ExpressionsFactoryImpl.hpp"
#include "ocl/Expressions/impl/CollectionLiteralPartImpl.hpp"

//*********************************
namespace ocl::Expressions 
{
	class OCL_API CollectionRangeImpl : virtual public CollectionLiteralPartImpl, virtual public CollectionRange 
	{
		public: 
			CollectionRangeImpl(const CollectionRangeImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			CollectionRangeImpl& operator=(CollectionRangeImpl const&); 

		protected:
			friend class ocl::Expressions::ExpressionsFactoryImpl;
			CollectionRangeImpl();
			virtual std::shared_ptr<ocl::Expressions::CollectionRange> getThisCollectionRangePtr() const;
			virtual void setThisCollectionRangePtr(std::weak_ptr<ocl::Expressions::CollectionRange> thisCollectionRangePtr);


		public:
			//destructor
			virtual ~CollectionRangeImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<ocl::Expressions::OclExpression>& getFirst() const ;
			virtual void setFirst(const std::shared_ptr<ocl::Expressions::OclExpression>&) ;
			virtual const std::shared_ptr<ocl::Expressions::OclExpression>& getLast() const ;
			virtual void setLast(const std::shared_ptr<ocl::Expressions::OclExpression>&) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual const std::shared_ptr<ecore::EClass>& eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<ocl::Expressions::CollectionRange> m_thisCollectionRangePtr;
	};
}
#endif /* end of include guard: OCL_EXPRESSIONS_COLLECTIONRANGECOLLECTIONRANGEIMPL_HPP */
