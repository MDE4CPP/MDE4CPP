
#include "fUML/Semantics/Actions/impl/ExpansionRegionActivationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Subset.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Includes from codegen annotation
#include "fUML/fUMLFactory.hpp"
#include "fUML/Semantics/Activities/ObjectToken.hpp"
#include "uml/Action.hpp"
#include "uml/ActivityNode.hpp"
#include "uml/ExpansionRegion.hpp"
#include "uml/InputPin.hpp"
#include "uml/OutputPin.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "fUML/Semantics/Activities/ActivitiesFactory.hpp"
#include "fUML/Semantics/Actions/ActionsFactory.hpp"
#include "uml/Action.hpp"
#include "fUML/Semantics/Actions/ActionActivation.hpp"
#include "fUML/Semantics/Activities/ActivityEdgeInstance.hpp"
#include "uml/ActivityNode.hpp"
#include "fUML/Semantics/Activities/ActivityNodeActivationGroup.hpp"
#include "fUML/Semantics/Actions/ExpansionActivationGroup.hpp"
#include "uml/ExpansionNode.hpp"
#include "fUML/Semantics/Actions/ExpansionNodeActivation.hpp"
#include "uml/ExpansionRegion.hpp"
#include "fUML/Semantics/Actions/InputPinActivation.hpp"
#include "fUML/Semantics/Actions/OutputPinActivation.hpp"
#include "fUML/Semantics/Actions/PinActivation.hpp"
#include "fUML/Semantics/Activities/Token.hpp"
#include "fUML/Semantics/Activities/TokenSet.hpp"
//Factories and Package includes
#include "fUML/Semantics/SemanticsPackage.hpp"
#include "fUML/fUMLPackage.hpp"
#include "fUML/Semantics/Actions/ActionsPackage.hpp"
#include "fUML/Semantics/Activities/ActivitiesPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace fUML::Semantics::Actions;

//*********************************
// Constructor / Destructor
//*********************************
ExpansionRegionActivationImpl::ExpansionRegionActivationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

ExpansionRegionActivationImpl::~ExpansionRegionActivationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete ExpansionRegionActivation "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
ExpansionRegionActivationImpl::ExpansionRegionActivationImpl(std::weak_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> par_group)
:ExpansionRegionActivationImpl()
{
	m_group = par_group;
}

ExpansionRegionActivationImpl::ExpansionRegionActivationImpl(const ExpansionRegionActivationImpl & obj): ExpansionRegionActivationImpl()
{
	*this = obj;
}

ExpansionRegionActivationImpl& ExpansionRegionActivationImpl::operator=(const ExpansionRegionActivationImpl & obj)
{
	//call overloaded =Operator for each base class
	ActionActivationImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of ExpansionRegionActivation 
	 * which is generated by the compiler (as ExpansionRegionActivation is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//ExpansionRegionActivation::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy ExpansionRegionActivation "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_next = obj.getNext();

	//copy references with no containment (soft copy)
	m_activationGroups  = obj.getActivationGroups();
	m_expansionRegion  = obj.getExpansionRegion();
	m_inputExpansionTokens  = obj.getInputExpansionTokens();
	m_inputTokens  = obj.getInputTokens();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> ExpansionRegionActivationImpl::copy() const
{
	std::shared_ptr<ExpansionRegionActivationImpl> element(new ExpansionRegionActivationImpl());
	*element =(*this);
	element->setThisExpansionRegionActivationPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
void ExpansionRegionActivationImpl::doAction()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<uml::StructuredActivityNode>& node = this->getExpansionRegion();
	if (node->getMustIsolate())
	{
		_beginIsolation();
		doStructuredActivity();
		_endIsolation();
	}
	else
	{
		doStructuredActivity();
	}
	//end of body
}

void ExpansionRegionActivationImpl::doOutput()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<uml::ExpansionRegion>& region = this->getExpansionRegion();
	const std::shared_ptr<Bag<uml::ExpansionNode>>& outputElements = region->getOutputElement();
	if (!isSuspended())
	{
		const std::shared_ptr<Bag<ExpansionActivationGroup>>& activationGroups = this->getActivationGroups();
		for (const std::shared_ptr<ExpansionActivationGroup>& activationGroup : *activationGroups)
		{
			const std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionNodeActivation>>& groupOutputs = activationGroup->getGroupOutputs();
			unsigned int groupOutputsSize = groupOutputs->size();

			for (unsigned j=0; j<groupOutputsSize; j++)
			{
				const std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation>& groupOutput = groupOutputs->at(j);
				const std::shared_ptr<uml::ExpansionNode>& outputElement = outputElements->at(j);
				std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> activation = getExpansionNodeActivation(outputElement);
				if (activation == nullptr)
				{
			        	DEBUG_ERROR("Expansion node activation is nullptr! Failed to output tokens!")
					throw "unknown activation";
				}
				activation->addTokens(groupOutput->takeTokens());
			}
		}
	}
	//end of body
}

void ExpansionRegionActivationImpl::doStructuredActivity()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<uml::ExpansionRegion>& region = this->getExpansionRegion();
	const std::shared_ptr<Bag<uml::InputPin>>& inputPins = region->getInput();
	const std::shared_ptr<Bag<uml::ExpansionNode>>& inputElements = region->getInputElement();
	const std::shared_ptr<Bag<uml::ExpansionNode>>& outputElements = region->getOutputElement();
	std::shared_ptr<fUML::Semantics::Actions::ActionsFactory> actionsFactory = fUML::Semantics::Actions::ActionsFactory::eInstance();
	
	getActivationGroups()->clear();

	int n = m_inputExpansionTokens->at(0)->getTokens()->size();
	int k = 0;
	while (k < n)
	{
		std::shared_ptr<ExpansionActivationGroup> activationGroup = actionsFactory->createExpansionActivationGroup();
		activationGroup->setRegionActivation(getThisExpansionRegionActivationPtr());
		activationGroup->setIndex(k);

		const std::shared_ptr<Bag<fUML::Semantics::Actions::OutputPinActivation>>& regionInputList = activationGroup->getRegionInputs();
		const std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionNodeActivation>>& groupInputsList = activationGroup->getGroupInputs();
		const std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionNodeActivation>>& groupOutputsList = activationGroup->getGroupOutputs();

		Bag<uml::InputPin>::iterator inputPinsIter = inputPins->begin();
		Bag<uml::InputPin>::iterator inputPinsEnd = inputPins->end();
		while (inputPinsIter != inputPinsEnd)
		{
			std::shared_ptr<fUML::Semantics::Actions::OutputPinActivation> regionInput = actionsFactory->createOutputPinActivation();
			regionInput->setNode(*inputPinsIter);
			regionInput->run();
			regionInputList->push_back(regionInput);
			inputPinsIter++;
		}

		Bag<uml::ExpansionNode>::iterator inputElementsIter = inputElements->begin();
		Bag<uml::ExpansionNode>::iterator intputElementsEnd = inputElements->end();
		while (inputElementsIter != intputElementsEnd)
		{
			std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> groupInput = actionsFactory->createExpansionNodeActivation();
			groupInput->setNode(*inputElementsIter);
			groupInput->setGroup(activationGroup);
			groupInput->run();
			groupInputsList->push_back(groupInput);
			inputElementsIter++;
		}

		Bag<uml::ExpansionNode>::iterator outputElementsIter = outputElements->begin();
		Bag<uml::ExpansionNode>::iterator outputElementsEnd = outputElements->end();
		while (outputElementsIter != outputElementsEnd)
		{
			std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> groupOutput = actionsFactory->createExpansionNodeActivation();
			groupOutput->setNode(*outputElementsIter);
			groupOutput->setGroup(getGroup().lock());
			groupOutput->run();
			groupOutputsList->push_back(groupOutput);
			outputElementsIter++;
		}

		activationGroup->createNodeActivations(region->getNode());
		activationGroup->createEdgeInstance(region->getEdge());
		m_activationGroups->push_back(activationGroup);

		k = k + 1;
	}

	if (region->getMode() == uml::ExpansionKind::ITERATIVE)
	{
		m_next = 0;
		runIterative();
	}
	else if (region->getMode() == uml::ExpansionKind::PARALLEL)
	{
		runParallel();
	}

	doOutput();
	//end of body
}

std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> ExpansionRegionActivationImpl::getExpansionNodeActivation(const std::shared_ptr<uml::ExpansionNode>& node)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	auto group = m_group.lock();
	if (group != nullptr)
	{
		std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation> nodeActivation = group->getNodeActivation(node);
		return std::dynamic_pointer_cast<fUML::Semantics::Actions::ExpansionNodeActivation>(nodeActivation);
	}
	return nullptr;
	//end of body
}

bool ExpansionRegionActivationImpl::isSuspended()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	bool suspended = false;
	Bag<ExpansionActivationGroup>::iterator iter = m_activationGroups->begin();
	Bag<ExpansionActivationGroup>::iterator end = m_activationGroups->end();
	while (!suspended and iter != end)
	{
		suspended = (*iter)->isSuspended();
		iter++;
	}
	return suspended;
	//end of body
}

int ExpansionRegionActivationImpl::numberOfValues()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<uml::ExpansionRegion>& region = this->getExpansionRegion();
	const std::shared_ptr<Bag<uml::ExpansionNode>>& inputElements = region->getInputElement();
	int n = 0;
	Bag<uml::ExpansionNode>::iterator iter = inputElements->begin();
	Bag<uml::ExpansionNode>::iterator end = inputElements->end();
	while (iter != end)
	{
		std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> activation = getExpansionNodeActivation(*iter);
		if (activation == nullptr)
		{
	       		DEBUG_ERROR("Expansion node activation is nullptr! Failed to count number of values!")
			throw "unknown activation";
		}
		int count = activation->countOfferedValues();
		if (count > n)
		{
			n = count;
		}

		iter++;
	}
	return n;
	//end of body
}

void ExpansionRegionActivationImpl::resume(const std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup>& activationGroup)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<uml::ExpansionRegion>& region = this->getExpansionRegion();

	ActivityNodeActivationImpl::resume();
	terminateGroup(activationGroup);
	if (region->getMode() == uml::ExpansionKind::ITERATIVE)
	{
		runIterative();
	}

	doOutput();
	//end of body
}

void ExpansionRegionActivationImpl::runGroup(const std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup>& activationGroup)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	if (isRunning())
	{
		unsigned int size = m_inputTokens->size();
		for (unsigned int i=0; i<size; i++)
		{
			const std::shared_ptr<fUML::Semantics::Activities::TokenSet>& tokenSet = m_inputTokens->at(i);
			const std::shared_ptr<fUML::Semantics::Actions::OutputPinActivation>& regionInput = activationGroup->getRegionInputs()->at(i);
			regionInput->clearTokens();
			regionInput->addTokens(tokenSet->getTokens());
			regionInput->sendUnofferedTokens();
		}

		size = m_inputExpansionTokens->size();
		for (unsigned int i=0; i<size; i++)
		{
			const std::shared_ptr<fUML::Semantics::Activities::TokenSet>& tokenSet = m_inputExpansionTokens->at(i);
			const std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation>& groupInput = activationGroup->getGroupInputs()->at(i);
			groupInput->clearTokens();
			unsigned int index = activationGroup->getIndex();
			if (tokenSet->getTokens()->size() > index)
			{
				groupInput->addToken(tokenSet->getTokens()->at(index));
			}
			groupInput->sendUnofferedTokens();
		}

		activationGroup->run(activationGroup->getNodeActivations());

		terminateGroup(activationGroup);
	}
	//end of body
}

void ExpansionRegionActivationImpl::runIterative()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	int size = m_activationGroups->size();
	while (m_next < size and !isSuspended())
	{
		std::shared_ptr<ExpansionActivationGroup> activationGroup = m_activationGroups->at(m_next);
		runGroup(activationGroup);
		m_next++;
	}
	//end of body
}

void ExpansionRegionActivationImpl::runParallel()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	Bag<ExpansionActivationGroup>::iterator iter = m_activationGroups->begin();
	Bag<ExpansionActivationGroup>::iterator end = m_activationGroups->end();
	while (iter != end)
	{
		runGroup(*iter);
		iter++;
	}
	//end of body
}

void ExpansionRegionActivationImpl::sendOffers()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<uml::ExpansionRegion>& region = this->getExpansionRegion();
	const std::shared_ptr<Bag<uml::ExpansionNode>>& outputElement = region->getOutputElement();

	Bag<uml::ExpansionNode>::iterator iter = outputElement->begin();
	Bag<uml::ExpansionNode>::iterator end = outputElement->end();

	while (iter != end)
	{
		std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> activation = getExpansionNodeActivation(*iter);
		if (activation == nullptr)
		{
			DEBUG_ERROR("Expansion node activation is nullptr! Failed to send offers!")
			throw "unknown activation";
		}
		activation->sendUnofferedTokens();
		iter++;
	}

	ActionActivationImpl::sendOffers();
	//end of body
}

std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> ExpansionRegionActivationImpl::takeOfferedTokens()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	ActionActivationImpl::takeOfferedTokens();

	const std::shared_ptr<uml::ExpansionRegion>& region = this->getExpansionRegion();
	const std::shared_ptr<Bag<uml::InputPin>>& inputPinList = region->getInput();
	const std::shared_ptr<Bag<uml::ExpansionNode>>& inputElementList = region->getInputElement();

	getInputTokens()->clear();
	getInputExpansionTokens()->clear();

	Bag<uml::InputPin>::iterator inputPinIter = inputPinList->begin();
	Bag<uml::InputPin>::iterator inputPinEnd = inputPinList->end();
	while (inputPinIter != inputPinEnd)
	{
		std::shared_ptr<uml::InputPin> inputPin = *inputPinIter;
		std::shared_ptr<fUML::Semantics::Activities::TokenSet> tokenSet = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createTokenSet();
		std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation> activation = getNodeActivation(inputPin);
		if (activation == nullptr)
		{
			DEBUG_ERROR("Expansion node activation is nullptr! Failed to take offered tokens!")
			throw "unknown activation";
		}
		tokenSet->getTokens()->insert(*(activation->takeTokens()));
		m_inputTokens->push_back(tokenSet);

		inputPinIter++;
	}

	int n = numberOfValues();

	Bag<uml::ExpansionNode>::iterator inputElementIter = inputElementList->begin();
	Bag<uml::ExpansionNode>::iterator inputElementEnd = inputElementList->end();
	while (inputElementIter != inputElementEnd)
	{
		std::shared_ptr<uml::ExpansionNode> inputElement = *inputElementIter;

		std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> expansionNodeActivation = getExpansionNodeActivation(inputElement);
		if (expansionNodeActivation == nullptr)
		{
			DEBUG_ERROR("Expansion node activation is nullptr! Failed to take offered tokens!")
			throw "unknown activation";
		}
		expansionNodeActivation->fire(expansionNodeActivation->takeOfferedTokens());
		std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> tokens = expansionNodeActivation->takeTokens();
		std::shared_ptr<fUML::Semantics::Activities::TokenSet> tokenSet = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createTokenSet();
		int j = 0;
		std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> tokenSetTokens = tokenSet->getTokens();
		while (j < n)
		{
			tokenSetTokens->push_back(tokens->at(j));
			j++;
		}
		m_inputExpansionTokens->push_back(tokenSet);

		inputElementIter++;
	}

	std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> offeredTokens(new Bag<fUML::Semantics::Activities::Token>());
	return offeredTokens;
	//end of body
}

void ExpansionRegionActivationImpl::terminate()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	Bag<ExpansionActivationGroup>::iterator iter = getActivationGroups()->begin();
	Bag<ExpansionActivationGroup>::iterator end = getActivationGroups()->end();

	while (iter != end)
	{
		std::shared_ptr<ExpansionActivationGroup> activationGroup = *iter;
		const std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionNodeActivation>>& groupOutputs = activationGroup->getGroupOutputs();
		_beginIsolation();

		Bag<fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputIter = groupOutputs->begin();
		Bag<fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputEnd = groupOutputs->end();
		while(outputIter != outputEnd)
		{
			std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> output = *outputIter;
			output->fire(output->takeOfferedTokens());
			outputIter++;
		}

		activationGroup->terminateAll();
		_endIsolation();
		iter++;
	}

	ActionActivationImpl::terminate();
	//end of body
}

void ExpansionRegionActivationImpl::terminateGroup(const std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup>& activationGroup)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	if (isRunning() and !isSuspended())
	{
		const std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionNodeActivation>>& groupOutputs = activationGroup->getGroupOutputs();
		Bag<fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputIter = groupOutputs->begin();
		Bag<fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputEnd = groupOutputs->end();
		while(outputIter != outputEnd)
		{
			std::shared_ptr<fUML::Semantics::Actions::ExpansionNodeActivation> output = *outputIter;
			output->fire(output->takeOfferedTokens());
			outputIter++;
		}

		activationGroup->terminateAll();
	}
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute next */
int ExpansionRegionActivationImpl::getNext() const 
{
	return m_next;
}
void ExpansionRegionActivationImpl::setNext(int _next)
{
	m_next = _next;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference activationGroups */
const std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionActivationGroup>>& ExpansionRegionActivationImpl::getActivationGroups() const
{
	if(m_activationGroups == nullptr)
	{
		m_activationGroups.reset(new Bag<fUML::Semantics::Actions::ExpansionActivationGroup>());
		
		
	}
    return m_activationGroups;
}

/* Getter & Setter for reference expansionRegion */
const std::shared_ptr<uml::ExpansionRegion>& ExpansionRegionActivationImpl::getExpansionRegion() const
{
    return m_expansionRegion;
}
void ExpansionRegionActivationImpl::setExpansionRegion(const std::shared_ptr<uml::ExpansionRegion>& _expansionRegion)
{
    m_expansionRegion = _expansionRegion;
	//additional setter call for redefined reference ActionActivation::action
	fUML::Semantics::Actions::ActionActivationImpl::setAction(_expansionRegion);
}
/*Additional Setter for redefined reference 'ActionActivation::action'*/
void ExpansionRegionActivationImpl::setAction(const std::shared_ptr<uml::Action>& _action)
{
	std::shared_ptr<uml::ExpansionRegion> _expansionRegion = std::dynamic_pointer_cast<uml::ExpansionRegion>(_action);
	if(_expansionRegion)
	{
		m_expansionRegion = _expansionRegion;

		//additional setter call for redefined reference ActionActivation::action
		fUML::Semantics::Actions::ActionActivationImpl::setAction(_expansionRegion);
	}
	else
	{
		std::cerr<<"[ExpansionRegionActivation::setAction] : Could not set action because provided action was not of type 'std::shared_ptr<uml::ExpansionRegion>'"<<std::endl;
	}
}
/*Additional Setter for redefined reference 'ActivityNodeActivation::node'*/
void ExpansionRegionActivationImpl::setNode(const std::shared_ptr<uml::ActivityNode>& _node)
{
	std::shared_ptr<uml::ExpansionRegion> _expansionRegion = std::dynamic_pointer_cast<uml::ExpansionRegion>(_node);
	if(_expansionRegion)
	{
		m_expansionRegion = _expansionRegion;

		//additional setter call for redefined reference ActionActivation::action
		fUML::Semantics::Actions::ActionActivationImpl::setNode(_node);
	}
	else
	{
		std::cerr<<"[ExpansionRegionActivation::setNode] : Could not set node because provided node was not of type 'std::shared_ptr<uml::ExpansionRegion>'"<<std::endl;
	}
}

/* Getter & Setter for reference inputExpansionTokens */
const std::shared_ptr<Bag<fUML::Semantics::Activities::TokenSet>>& ExpansionRegionActivationImpl::getInputExpansionTokens() const
{
	if(m_inputExpansionTokens == nullptr)
	{
		m_inputExpansionTokens.reset(new Bag<fUML::Semantics::Activities::TokenSet>());
		
		
	}
    return m_inputExpansionTokens;
}

/* Getter & Setter for reference inputTokens */
const std::shared_ptr<Bag<fUML::Semantics::Activities::TokenSet>>& ExpansionRegionActivationImpl::getInputTokens() const
{
	if(m_inputTokens == nullptr)
	{
		m_inputTokens.reset(new Bag<fUML::Semantics::Activities::TokenSet>());
		
		
	}
    return m_inputTokens;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> ExpansionRegionActivationImpl::eContainer() const
{
	if(auto wp = m_group.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void ExpansionRegionActivationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get fUMLFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void ExpansionRegionActivationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("next");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'int'
			int value;
			std::istringstream(iter->second) >> value;
			this->setNext(value);
		}
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("activationGroups");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("activationGroups")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("expansionRegion");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("expansionRegion")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("inputExpansionTokens");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("inputExpansionTokens")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("inputTokens");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("inputTokens")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ActionActivationImpl::loadAttributes(loadHandler, attr_list);
}

void ExpansionRegionActivationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	ActionActivationImpl::loadNode(nodeName, loadHandler);
}

void ExpansionRegionActivationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_ACTIVATIONGROUPS:
		{
			std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionActivationGroup>> _activationGroups = getActivationGroups();
			for(const std::shared_ptr<ecore::EObject>& ref : references)
			{
				std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup>  _r = std::dynamic_pointer_cast<fUML::Semantics::Actions::ExpansionActivationGroup>(ref);
				if (_r != nullptr)
				{
					_activationGroups->push_back(_r);
				}
			}
			return;
		}

		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_EXPANSIONREGION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::ExpansionRegion> _expansionRegion = std::dynamic_pointer_cast<uml::ExpansionRegion>( references.front() );
				setExpansionRegion(_expansionRegion);
			}
			
			return;
		}

		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTEXPANSIONTOKENS:
		{
			std::shared_ptr<Bag<fUML::Semantics::Activities::TokenSet>> _inputExpansionTokens = getInputExpansionTokens();
			for(const std::shared_ptr<ecore::EObject>& ref : references)
			{
				std::shared_ptr<fUML::Semantics::Activities::TokenSet>  _r = std::dynamic_pointer_cast<fUML::Semantics::Activities::TokenSet>(ref);
				if (_r != nullptr)
				{
					_inputExpansionTokens->push_back(_r);
				}
			}
			return;
		}

		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTTOKENS:
		{
			std::shared_ptr<Bag<fUML::Semantics::Activities::TokenSet>> _inputTokens = getInputTokens();
			for(const std::shared_ptr<ecore::EObject>& ref : references)
			{
				std::shared_ptr<fUML::Semantics::Activities::TokenSet>  _r = std::dynamic_pointer_cast<fUML::Semantics::Activities::TokenSet>(ref);
				if (_r != nullptr)
				{
					_inputTokens->push_back(_r);
				}
			}
			return;
		}
	}
	ActionActivationImpl::resolveReferences(featureID, references);
}

void ExpansionRegionActivationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ActionActivationImpl::saveContent(saveHandler);
	
	fUML::Semantics::Activities::ActivityNodeActivationImpl::saveContent(saveHandler);
	
	fUML::Semantics::Loci::SemanticVisitorImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void ExpansionRegionActivationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<fUML::Semantics::Actions::ActionsPackage> package = fUML::Semantics::Actions::ActionsPackage::eInstance();
		// Add attributes
		if ( this->eIsSet(package->getExpansionRegionActivation_Attribute_next()) )
		{
			saveHandler->addAttribute("next", this->getNext());
		}
	// Add references
		saveHandler->addReferences<fUML::Semantics::Actions::ExpansionActivationGroup>("activationGroups", this->getActivationGroups());
		saveHandler->addReference(this->getExpansionRegion(), "expansionRegion", getExpansionRegion()->eClass() != uml::umlPackage::eInstance()->getExpansionRegion_Class()); 
		saveHandler->addReferences<fUML::Semantics::Activities::TokenSet>("inputExpansionTokens", this->getInputExpansionTokens());
		saveHandler->addReferences<fUML::Semantics::Activities::TokenSet>("inputTokens", this->getInputTokens());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

std::shared_ptr<ecore::EClass> ExpansionRegionActivationImpl::eStaticClass() const
{
	return fUML::Semantics::Actions::ActionsPackage::eInstance()->getExpansionRegionActivation_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> ExpansionRegionActivationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_ACTIVATIONGROUPS:
			return eEcoreContainerAny(getActivationGroups(),fUML::Semantics::Actions::ActionsPackage::EXPANSIONACTIVATIONGROUP_CLASS); //5113
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_EXPANSIONREGION:
			return eAny(getExpansionRegion(),uml::umlPackage::EXPANSIONREGION_CLASS,false); //5115
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTEXPANSIONTOKENS:
			return eEcoreContainerAny(getInputExpansionTokens(),fUML::Semantics::Activities::ActivitiesPackage::TOKENSET_CLASS); //5112
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTTOKENS:
			return eEcoreContainerAny(getInputTokens(),fUML::Semantics::Activities::ActivitiesPackage::TOKENSET_CLASS); //5111
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_NEXT:
			return eAny(getNext(),ecore::ecorePackage::EINT_CLASS,false); //5114
	}
	return ActionActivationImpl::eGet(featureID, resolve, coreType);
}

bool ExpansionRegionActivationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_ACTIVATIONGROUPS:
			return getActivationGroups() != nullptr; //5113
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_EXPANSIONREGION:
			return getExpansionRegion() != nullptr; //5115
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTEXPANSIONTOKENS:
			return getInputExpansionTokens() != nullptr; //5112
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTTOKENS:
			return getInputTokens() != nullptr; //5111
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_NEXT:
			return getNext() != 0; //5114
	}
	return ActionActivationImpl::internalEIsSet(featureID);
}

bool ExpansionRegionActivationImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_ACTIVATIONGROUPS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<fUML::Semantics::Actions::ExpansionActivationGroup>> _activationGroups = getActivationGroups();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup> valueToAdd = std::dynamic_pointer_cast<fUML::Semantics::Actions::ExpansionActivationGroup>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_activationGroups->includes(valueToAdd)))
								{
									_activationGroups->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'activationGroups'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'activationGroups'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_EXPANSIONREGION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::ExpansionRegion> _expansionRegion = std::dynamic_pointer_cast<uml::ExpansionRegion>(eObject);
					if(_expansionRegion)
					{
						setExpansionRegion(_expansionRegion); //5115
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'expansionRegion'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'expansionRegion'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTEXPANSIONTOKENS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<fUML::Semantics::Activities::TokenSet>> _inputExpansionTokens = getInputExpansionTokens();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<fUML::Semantics::Activities::TokenSet> valueToAdd = std::dynamic_pointer_cast<fUML::Semantics::Activities::TokenSet>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_inputExpansionTokens->includes(valueToAdd)))
								{
									_inputExpansionTokens->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'inputExpansionTokens'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'inputExpansionTokens'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_INPUTTOKENS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<fUML::Semantics::Activities::TokenSet>> _inputTokens = getInputTokens();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<fUML::Semantics::Activities::TokenSet> valueToAdd = std::dynamic_pointer_cast<fUML::Semantics::Activities::TokenSet>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_inputTokens->includes(valueToAdd)))
								{
									_inputTokens->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'inputTokens'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'inputTokens'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::Semantics::Actions::ActionsPackage::EXPANSIONREGIONACTIVATION_ATTRIBUTE_NEXT:
		{
			try
			{
				int _next = newValue->get<int>();
				setNext(_next); //5114
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'next'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ActionActivationImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> ExpansionRegionActivationImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// fUML::Semantics::Actions::ExpansionRegionActivation::doAction(): 1666075641
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_DOACTION:
		{
			this->doAction();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::doOutput(): 665072324
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_DOOUTPUT:
		{
			this->doOutput();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::doStructuredActivity(): 16459977
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_DOSTRUCTUREDACTIVITY:
		{
			this->doStructuredActivity();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::getExpansionNodeActivation(uml::ExpansionNode) : fUML::Semantics::Actions::ExpansionNodeActivation: 2910413301
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_GETEXPANSIONNODEACTIVATION_EXPANSIONNODE:
		{
			//Retrieve input parameter 'node'
			//parameter 0
			std::shared_ptr<uml::ExpansionNode> incoming_param_node;
			Bag<Any>::const_iterator incoming_param_node_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_node_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_node = std::dynamic_pointer_cast<uml::ExpansionNode>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'node'. Failed to invoke operation 'getExpansionNodeActivation'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'node'. Failed to invoke operation 'getExpansionNodeActivation'!")
					return nullptr;
				}
			}
		
			result = eEcoreAny(this->getExpansionNodeActivation(incoming_param_node), fUML::Semantics::Actions::ActionsPackage::EXPANSIONNODEACTIVATION_CLASS);
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::isSuspended() : bool: 1287707085
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_ISSUSPENDED:
		{
			result = eAny(this->isSuspended(), 0, false);
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::numberOfValues() : int: 386548955
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_NUMBEROFVALUES:
		{
			result = eAny(this->numberOfValues(), 0, false);
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::resume(fUML::Semantics::Actions::ExpansionActivationGroup): 4204554741
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_RESUME_EXPANSIONACTIVATIONGROUP:
		{
			//Retrieve input parameter 'activationGroup'
			//parameter 0
			std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup> incoming_param_activationGroup;
			Bag<Any>::const_iterator incoming_param_activationGroup_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activationGroup_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activationGroup = std::dynamic_pointer_cast<fUML::Semantics::Actions::ExpansionActivationGroup>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activationGroup'. Failed to invoke operation 'resume'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activationGroup'. Failed to invoke operation 'resume'!")
					return nullptr;
				}
			}
		
			this->resume(incoming_param_activationGroup);
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::runGroup(fUML::Semantics::Actions::ExpansionActivationGroup): 2755718114
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_RUNGROUP_EXPANSIONACTIVATIONGROUP:
		{
			//Retrieve input parameter 'activationGroup'
			//parameter 0
			std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup> incoming_param_activationGroup;
			Bag<Any>::const_iterator incoming_param_activationGroup_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activationGroup_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activationGroup = std::dynamic_pointer_cast<fUML::Semantics::Actions::ExpansionActivationGroup>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activationGroup'. Failed to invoke operation 'runGroup'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activationGroup'. Failed to invoke operation 'runGroup'!")
					return nullptr;
				}
			}
		
			this->runGroup(incoming_param_activationGroup);
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::runIterative(): 2181022978
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_RUNITERATIVE:
		{
			this->runIterative();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::runParallel(): 789694982
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_RUNPARALLEL:
		{
			this->runParallel();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::sendOffers(): 4292864607
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_SENDOFFERS:
		{
			this->sendOffers();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::takeOfferedTokens() : fUML::Semantics::Activities::Token[*]: 4271661133
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_TAKEOFFEREDTOKENS:
		{
			std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> resultList = this->takeOfferedTokens();
			return eEcoreContainerAny(resultList,fUML::Semantics::Activities::ActivitiesPackage::TOKEN_CLASS);
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::terminate(): 1626800569
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_TERMINATE:
		{
			this->terminate();
			break;
		}
		// fUML::Semantics::Actions::ExpansionRegionActivation::terminateGroup(fUML::Semantics::Actions::ExpansionActivationGroup): 2249229986
		case ActionsPackage::EXPANSIONREGIONACTIVATION_OPERATION_TERMINATEGROUP_EXPANSIONACTIVATIONGROUP:
		{
			//Retrieve input parameter 'activationGroup'
			//parameter 0
			std::shared_ptr<fUML::Semantics::Actions::ExpansionActivationGroup> incoming_param_activationGroup;
			Bag<Any>::const_iterator incoming_param_activationGroup_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activationGroup_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activationGroup = std::dynamic_pointer_cast<fUML::Semantics::Actions::ExpansionActivationGroup>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activationGroup'. Failed to invoke operation 'terminateGroup'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activationGroup'. Failed to invoke operation 'terminateGroup'!")
					return nullptr;
				}
			}
		
			this->terminateGroup(incoming_param_activationGroup);
			break;
		}

		default:
		{
			// call superTypes
			result = ActionActivationImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<fUML::Semantics::Actions::ExpansionRegionActivation> ExpansionRegionActivationImpl::getThisExpansionRegionActivationPtr() const
{
	return m_thisExpansionRegionActivationPtr.lock();
}
void ExpansionRegionActivationImpl::setThisExpansionRegionActivationPtr(std::weak_ptr<fUML::Semantics::Actions::ExpansionRegionActivation> thisExpansionRegionActivationPtr)
{
	m_thisExpansionRegionActivationPtr = thisExpansionRegionActivationPtr;
	setThisActionActivationPtr(thisExpansionRegionActivationPtr);
}


