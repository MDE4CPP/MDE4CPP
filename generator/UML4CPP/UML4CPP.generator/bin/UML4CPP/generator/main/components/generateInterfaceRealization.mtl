[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML InterfaceRealization artefacts
 * 
 */]
[module generateInterfaceRealization('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::validation::validateModel /]

[**
 * generate creation of meta model instance for an InterfaceRealization element
*/]
[template public generateInterfaceRealizationCreation(anInterfaceRealization : InterfaceRealization)]
[memberName(anInterfaceRealization)/] = factory->createInterfaceRealization_in_ImplementingClassifier([anInterfaceRealization.owner.oclAsType(NamedElement).memberName()/]);
[if (not (anInterfaceRealization.owner = anInterfaceRealization.ancestors(Package)->first()))]
[anInterfaceRealization.ancestors(Package)->first().memberName()/]->getPackagedElement()->push_back([memberName(anInterfaceRealization)/]);
[/if]
[/template]

[**
 * generate initialization of meta model instance for an InterfaceRealization element
 * 
 * this includes:
 * - set InterfaceRealization name
 * - set client elements
 * - set contract element
 * - set supplier elements
*/]
[template public generateInterfaceRealizationInitialization(anInterfaceRealization : InterfaceRealization)]
[memberName(anInterfaceRealization)/]->setName("[anInterfaceRealization.name/]");
[for (aClient : NamedElement | anInterfaceRealization.client)]
[memberName(anInterfaceRealization)/]->getClient()->push_back([memberName(aClient)/]);
[/for]
[memberName(anInterfaceRealization)/]->setContract([anInterfaceRealization.contract.generatePackageGetterCall(anInterfaceRealization)/]);
[for (aSupplier : NamedElement | anInterfaceRealization.supplier)]
[memberName(anInterfaceRealization)/]->getSupplier()->push_back([aSupplier.generatePackageGetterCall(anInterfaceRealization)/]);
[/for]
[/template]

[**
 * template to generate C++ fragment of interface names, which extend a class
*/]
[template public generateInterfaceExtensions(aClass : Class) post (trim())]
[for (interfaceR : InterfaceRealization | aClass.ownedElement->filter(InterfaceRealization)->sortedBy(myQualifiedName()))]
[for (aSupplier : NamedElement | interfaceR.supplier->select(oclIsUndefined() or name.oclIsUndefined())) before(',') separator (',')]
['class '.concat(aClass.name).concat(': interface realization cannot be generated because interface is undefined (').concat(aSupplier.toString()).concat(')').registerError()/]
[/for]
[for (aSupplier : NamedElement | interfaceR.supplier->reject(oclIsUndefined() or name.oclIsUndefined())) before(',') separator (',')]
public [if (not aSupplier.namespace.oclIsInvalid())][aSupplier.namespace.myNamespaceName()/]::[/if][aSupplier.name/][/for]
[/for]
[/template]