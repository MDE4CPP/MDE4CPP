
#include "uml/impl/PseudostateImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "uml/Comment.hpp"
#include "uml/Dependency.hpp"
#include "uml/Element.hpp"
#include "uml/Namespace.hpp"
#include "uml/Region.hpp"
#include "uml/State.hpp"
#include "uml/StateMachine.hpp"
#include "uml/StringExpression.hpp"
#include "uml/Transition.hpp"
#include "uml/Vertex.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
PseudostateImpl::PseudostateImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

PseudostateImpl::~PseudostateImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Pseudostate "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
PseudostateImpl::PseudostateImpl(std::weak_ptr<uml::Region> par_container)
:PseudostateImpl()
{
	m_container = par_container;
	m_namespace = par_container;
}

//Additional constructor for the containments back reference
PseudostateImpl::PseudostateImpl(std::weak_ptr<uml::Namespace> par_namespace)
:PseudostateImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
PseudostateImpl::PseudostateImpl(std::weak_ptr<uml::Element> par_owner)
:PseudostateImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
PseudostateImpl::PseudostateImpl(std::weak_ptr<uml::State> par_state)
:PseudostateImpl()
{
	m_state = par_state;
	m_namespace = par_state;
}

//Additional constructor for the containments back reference
PseudostateImpl::PseudostateImpl(std::weak_ptr<uml::StateMachine> par_stateMachine)
:PseudostateImpl()
{
	m_stateMachine = par_stateMachine;
	m_namespace = par_stateMachine;
}

PseudostateImpl::PseudostateImpl(const PseudostateImpl & obj): PseudostateImpl()
{
	*this = obj;
}

PseudostateImpl& PseudostateImpl::operator=(const PseudostateImpl & obj)
{
	//call overloaded =Operator for each base class
	VertexImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Pseudostate 
	 * which is generated by the compiler (as Pseudostate is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Pseudostate::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Pseudostate "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_kind = obj.getKind();

	//copy references with no containment (soft copy)
	m_state  = obj.getState();
	m_stateMachine  = obj.getStateMachine();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> PseudostateImpl::copy() const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl());
	*element =(*this);
	element->setThisPseudostatePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute kind */
uml::PseudostateKind PseudostateImpl::getKind() const 
{
	return m_kind;
}
void PseudostateImpl::setKind(uml::PseudostateKind _kind)
{
	m_kind = _kind;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference state */
std::weak_ptr<uml::State> PseudostateImpl::getState() const
{
    return m_state;
}
void PseudostateImpl::setState(std::weak_ptr<uml::State> _state)
{
    m_state = _state;
	
}

/* Getter & Setter for reference stateMachine */
std::weak_ptr<uml::StateMachine> PseudostateImpl::getStateMachine() const
{
    return m_stateMachine;
}
void PseudostateImpl::setStateMachine(std::weak_ptr<uml::StateMachine> _stateMachine)
{
    m_stateMachine = _stateMachine;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> PseudostateImpl::eContainer() const
{
	if(auto wp = m_container.lock())
	{
		return wp;
	}

	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_state.lock())
	{
		return wp;
	}

	if(auto wp = m_stateMachine.lock())
	{
		return wp;
	}
	return nullptr;
}

std::shared_ptr<ecore::EClass> PseudostateImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getPseudostate_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> PseudostateImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_KIND:
			return eAny(getKind(),uml::umlPackage::PSEUDOSTATEKIND_CLASS,false); //18913
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_STATE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getState().lock();
			return eEcoreAny(returnValue,uml::umlPackage::STATE_CLASS); //18912
		}
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_STATEMACHINE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getStateMachine().lock();
			return eEcoreAny(returnValue,uml::umlPackage::STATEMACHINE_CLASS); //18914
		}
	}
	return VertexImpl::eGet(featureID, resolve, coreType);
}

bool PseudostateImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_KIND:
			return m_kind != uml::PseudostateKind::INITIAL;; //18913
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_STATE:
			return getState().lock() != nullptr; //18912
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_STATEMACHINE:
			return getStateMachine().lock() != nullptr; //18914
	}
	return VertexImpl::internalEIsSet(featureID);
}

bool PseudostateImpl::eSet(int featureID, std::shared_ptr<Any> newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_KIND:
		{
			try
			{
				uml::PseudostateKind _kind = newValue->get<uml::PseudostateKind>();
				setKind(_kind); //18913
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'kind'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_STATE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::State> _state = std::dynamic_pointer_cast<uml::State>(eObject);
					if(_state)
					{
						setState(_state); //18912
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'state'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'state'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PSEUDOSTATE_ATTRIBUTE_STATEMACHINE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::StateMachine> _stateMachine = std::dynamic_pointer_cast<uml::StateMachine>(eObject);
					if(_stateMachine)
					{
						setStateMachine(_stateMachine); //18914
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'stateMachine'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'stateMachine'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return VertexImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> PseudostateImpl::eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = VertexImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Pseudostate> PseudostateImpl::getThisPseudostatePtr() const
{
	return m_thisPseudostatePtr.lock();
}
void PseudostateImpl::setThisPseudostatePtr(std::weak_ptr<uml::Pseudostate> thisPseudostatePtr)
{
	m_thisPseudostatePtr = thisPseudostatePtr;
	setThisVertexPtr(thisPseudostatePtr);
}


