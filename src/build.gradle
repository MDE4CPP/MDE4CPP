/*
 * MDE4CPP - Model Driven Engineering for C++
 *
 * Copyright (c) TU Ilmenau, Systems and Software Engineering Group
 * All rights reserved.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

description 'Models and generated source code collection'

task deliverBasicInterfaces() {
	group 'Basic interfaces'
	description 'deliver abstractDataTypes, util, persistence and pluginFramework interfaces'
		
	dependsOn rootProject.tasks.getByPath(':src:common:abstractDataTypes:deliverAbstractDataTypes')
	dependsOn rootProject.tasks.getByPath(':src:common:pluginFramework:deliverPluginFrameworkInterface')
	dependsOn rootProject.tasks.getByPath(':src:common:persistence:deliverPersistenceInterface')
	dependsOn rootProject.tasks.getByPath(':src:util:deliverUtil')
}

task buildEcoreModels() {
	group 'Source'
	description 'generate and compile all ecore models'
	
	dependsOn 'ecore:ecore:buildEcore'
	dependsOn 'ecore:types:buildTypes'
	dependsOn 'uml:buildUml'
	dependsOn 'fuml:buildFUML'
	dependsOn 'pscs:buildPSCS'
	dependsOn 'ocl:oclModel:buildOcl'
}

task buildReflectionModels() {
	group 'Source'
	description 'generate and compile reflection models'
	
	dependsOn 'common:ecoreReflection:buildEcoreReflection'
	dependsOn 'common:primitivetypesReflection:buildPrimitivetypesReflection'
	dependsOn 'common:umlReflection:buildUmlReflection'
}

task buildUMLProfiles() {
	group 'Source'
	description 'generate and compile uml profile models'
	
	dependsOn 'common:standardProfile:buildStandardProfile'
	dependsOn 'common:UML4CPPProfile:buildUML4CPPProfile'
}

// Compile all without generating the models
task compileEcoreModels() {
	group 'Source'
	description 'compile all ecore models'
	
	dependsOn rootProject.tasks.getByPath(':src:deliverBasicInterfaces')
	
	dependsOn rootProject.tasks.getByPath(':src:ecore:ecore:src_gen:compileEcore')
	dependsOn rootProject.tasks.getByPath(':src:ecore:types:src_gen:compileTypes')
	dependsOn rootProject.tasks.getByPath(':src:uml:src_gen:compileUml')
	dependsOn rootProject.tasks.getByPath(':src:fuml:src_gen:compileFUML')
	dependsOn rootProject.tasks.getByPath(':src:pscs:src_gen:compilePSCS')
	dependsOn rootProject.tasks.getByPath(':src:ocl:oclModel:src_gen:compileOcl')
}

// Compile all without generating the models
task compileReflectionModels() {
	group 'Source'
	description 'compile all reflection models'
	
	dependsOn rootProject.tasks.getByPath(':src:common:ecoreReflection:src_gen:compileEcoreReflection')
	dependsOn rootProject.tasks.getByPath(':src:common:primitivetypesReflection:src_gen:compilePrimitivetypesReflection')
	dependsOn rootProject.tasks.getByPath(':src:common:umlReflection:src_gen:compileUmlReflection')
	
	dependsOn rootProject.tasks.getByPath(':src:ocl:oclParser:compileOclParser')
	rootProject.tasks.getByPath(':src:common:umlReflection:src_gen:compileUmlReflection')
		.mustRunAfter rootProject.tasks.getByPath(':src:ocl:oclParser:compileOclParser')
}

task compileUMLProfiles() {
	group 'Source'
	description 'compile all uml profile models'
	
	dependsOn rootProject.tasks.getByPath(':src:common:standardProfile:src_gen:compileStandardProfile')
	dependsOn rootProject.tasks.getByPath(':src:common:UML4CPPProfile:src_gen:compileUML4CPPProfile')
}

task generateEcoreModels() {
	group 'Source'
	description 'generate all ecore models'
	
	dependsOn rootProject.tasks.getByPath(':src:ecore:ecore:model:generateEcore')
	dependsOn rootProject.tasks.getByPath(':src:ecore:types:model:generateTypes')
	dependsOn rootProject.tasks.getByPath(':src:uml:model:generateUml')
	dependsOn rootProject.tasks.getByPath(':src:fuml:model:generateFUML')
	dependsOn rootProject.tasks.getByPath(':src:pscs:model:generatePSCS')
	dependsOn rootProject.tasks.getByPath(':src:ocl:oclModel:model:generateOcl')
}

task generateReflectionModels() {
	group 'Source'
	description 'generate all reflection models'
	
	dependsOn rootProject.tasks.getByPath(':src:common:ecoreReflection:model:generateEcoreReflection')
	dependsOn rootProject.tasks.getByPath(':src:common:primitivetypesReflection:model:generatePrimitivetypesReflection')
	dependsOn rootProject.tasks.getByPath(':src:common:umlReflection:model:generateUmlReflection')
}

task generateUMLProfiles() {
	group 'Source'
	description 'generate all uml profile models'
	
	dependsOn rootProject.tasks.getByPath(':src:common:standardProfile:model:generateStandardProfile')
	dependsOn rootProject.tasks.getByPath(':src:common:UML4CPPProfile:model:generateUML4CPPProfile')
}

/**
 * Convert line endings on GNU/Linux & macOS
 */
task dos2unix_srcgen {
	doLast {
		fileTree('.').matching{ 
			include "**/src_gen/**/*.hpp"
			include "**/src_gen/**/*.cpp"
			exclude "**/.cmake"
		}.each { 
			aFile -> exec{
			    commandLine 'dos2unix'
			    args aFile.absolutePath
			}
		}
	}
}

//EOF
