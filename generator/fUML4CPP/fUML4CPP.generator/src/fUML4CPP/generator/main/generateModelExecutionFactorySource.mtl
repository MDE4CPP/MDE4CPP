[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[**FERTIG*/]
[module generateModelExecutionFactorySource('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]

[template public generateModelExecutionFactorySource(aPackage : Package) {
	className : String = aPackage.getFactoryName(); 
	packageName : String = aPackage.getPackageName();
}]

[file (packageName.concat('Exec/impl/') + className.concat('Impl.cpp'), false, 'UTF-8')]
#include "[className/]Impl.hpp"
#include <iostream>

[defineDebugMacro()/]

[if (aPackage.getExpansionRegions()->size() > 0)]
#include "uml/ExpansionRegion.hpp"
#include "[packageName/]/[packageName/]Package.hpp"
[for (anExpansionRegion : ExpansionRegion | aPackage.getExpansionRegions())]
#include "[packageName/]Exec/[anExpansionRegion.getExpansionRegionActivationName()/].hpp"
[/for]
[/if]

using namespace [packageName/];

//*********************************
// Constructor / Destructor
//*********************************
[className/]Impl::[className/]Impl()
{
}

[className/]Impl::~[className/]Impl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [className/] "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

std::shared_ptr<fUML::Semantics::Loci::SemanticVisitor> [className/]Impl::instantiateVisitor(std::shared_ptr<uml::Element> element)
{
[if (aPackage.getExpansionRegions()->size() > 0)]
	std::shared_ptr<[packageName/]Package> package = [packageName/]Package::eInstance();
[for (anExpansionRegion : ExpansionRegion | aPackage.getExpansionRegions())]
	if (element == package->[anExpansionRegion.generatePackageGetterCall(aPackage)/])
	{
		std::shared_ptr<[anExpansionRegion.getExpansionRegionActivationName()/]> activiation(new [anExpansionRegion.getExpansionRegionActivationName()/]());
		activiation->setMetaElementID(-1);
		activiation->setThisExecutionPtr(activiation);
		return activiation;
	}
[/for]

[/if]
	return fUML::Semantics::Loci::ExecutionFactoryImpl::instantiateVisitor(element);
}
[/file]
[/template]