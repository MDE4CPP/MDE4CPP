//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSCS_SEMANTICS_ACTIONS_CS_DEFAULTCONSTRUCTSTRATEGYCS_DEFAULTCONSTRUCTSTRATEGYIMPL_HPP
#define PSCS_SEMANTICS_ACTIONS_CS_DEFAULTCONSTRUCTSTRATEGYCS_DEFAULTCONSTRUCTSTRATEGYIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "PSCS/PSCS.hpp" 

// model includes
#include "../CS_DefaultConstructStrategy.hpp"

#include "PSCS/Semantics/Actions/impl/ActionsFactoryImpl.hpp"
#include "PSCS/Semantics/Actions/impl/CS_ConstructStrategyImpl.hpp"

//*********************************
namespace PSCS::Semantics::Actions 
{
	class PSCS_API CS_DefaultConstructStrategyImpl : virtual public CS_ConstructStrategyImpl, virtual public CS_DefaultConstructStrategy 
	{
		public: 
			CS_DefaultConstructStrategyImpl(const CS_DefaultConstructStrategyImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			CS_DefaultConstructStrategyImpl& operator=(CS_DefaultConstructStrategyImpl const&); 

		protected:
			friend class PSCS::Semantics::Actions::ActionsFactoryImpl;
			CS_DefaultConstructStrategyImpl();
			virtual std::shared_ptr<PSCS::Semantics::Actions::CS_DefaultConstructStrategy> getThisCS_DefaultConstructStrategyPtr() const;
			virtual void setThisCS_DefaultConstructStrategyPtr(std::weak_ptr<PSCS::Semantics::Actions::CS_DefaultConstructStrategy> thisCS_DefaultConstructStrategyPtr);


		public:
			//destructor
			virtual ~CS_DefaultConstructStrategyImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<uml::Association>& getDefaultAssociation() const ;
			virtual void setDefaultAssociation(const std::shared_ptr<uml::Association>&) ;
			virtual const std::shared_ptr<Bag<uml::Class>>& getGeneratedRealizingClasses() const ;
			virtual const std::shared_ptr<fUML::Semantics::Loci::Locus>& getLocus() const ;
			virtual void setLocus(const std::shared_ptr<fUML::Semantics::Loci::Locus>&) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual const std::shared_ptr<ecore::EClass>& eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<PSCS::Semantics::Actions::CS_DefaultConstructStrategy> m_thisCS_DefaultConstructStrategyPtr;
	};
}
#endif /* end of include guard: PSCS_SEMANTICS_ACTIONS_CS_DEFAULTCONSTRUCTSTRATEGYCS_DEFAULTCONSTRUCTSTRATEGYIMPL_HPP */
