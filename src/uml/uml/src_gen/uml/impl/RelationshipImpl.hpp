//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_RELATIONSHIPRELATIONSHIPIMPL_HPP
#define UML_RELATIONSHIPRELATIONSHIPIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Relationship.hpp"

#include "uml/impl/ElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API RelationshipImpl : virtual public ElementImpl, virtual public Relationship 
	{
		public: 
			RelationshipImpl(const RelationshipImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;
			RelationshipImpl& operator=(RelationshipImpl const&); 

		protected:
			friend class umlFactoryImpl;
			RelationshipImpl();
			virtual std::shared_ptr<uml::Relationship> getThisRelationshipPtr() const;
			virtual void setThisRelationshipPtr(std::weak_ptr<uml::Relationship> thisRelationshipPtr);

			//Additional constructors for the containments back reference
			RelationshipImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~RelationshipImpl() = 0;
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			
			
			//*********************************
			// Union Reference Getters
			//*********************************
			/*!
			Specifies the elements related by the Relationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::Element>> getRelatedElement() const ;
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual const std::shared_ptr<ecore::EClass>& eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::Relationship> m_thisRelationshipPtr;
	};
}
#endif /* end of include guard: UML_RELATIONSHIPRELATIONSHIPIMPL_HPP */
