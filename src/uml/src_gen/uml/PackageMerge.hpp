//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PACKAGEMERGE_HPP
#define UML_PACKAGEMERGE_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T, class ... U> class Subset;



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class DirectedRelationship;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class Package;
}

// base class includes
#include "uml/DirectedRelationship.hpp"

// enum includes


//*********************************
namespace uml 
{
	/*!
	A package merge defines how the contents of one package are extended by the contents of another package.
	<p>From package UML::Packages.</p>
	*/
	
	class PackageMerge:virtual public DirectedRelationship
	{
		public:
 			PackageMerge(const PackageMerge &) {}

		protected:
			PackageMerge(){}


			//Additional constructors for the containments back reference

			PackageMerge(std::weak_ptr<uml::Element > par_owner);

			//Additional constructors for the containments back reference

			PackageMerge(std::weak_ptr<uml::Package > par_receivingPackage);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~PackageMerge() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			References the Package that is to be merged with the receiving package of the PackageMerge.
			<p>From package UML::Packages.</p>
			*/
			
			virtual std::shared_ptr<uml::Package > getMergedPackage() const = 0;
			
			/*!
			References the Package that is to be merged with the receiving package of the PackageMerge.
			<p>From package UML::Packages.</p>
			*/
			
			virtual void setMergedPackage(std::shared_ptr<uml::Package> _mergedPackage) = 0;
			
			/*!
			References the Package that is being extended with the contents of the merged package of the PackageMerge.
			<p>From package UML::Packages.</p>
			*/
			
			virtual std::weak_ptr<uml::Package > getReceivingPackage() const = 0;
			
			/*!
			References the Package that is being extended with the contents of the merged package of the PackageMerge.
			<p>From package UML::Packages.</p>
			*/
			
			virtual void setReceivingPackage(std::shared_ptr<uml::Package> _receivingPackage) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			References the Package that is to be merged with the receiving package of the PackageMerge.
			<p>From package UML::Packages.</p>
			*/
			
			std::shared_ptr<uml::Package > m_mergedPackage;/*!
			References the Package that is being extended with the contents of the merged package of the PackageMerge.
			<p>From package UML::Packages.</p>
			*/
			
			std::weak_ptr<uml::Package > m_receivingPackage;

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::Element>> getOwnedElement() const = 0;/*!
			The Element that owns this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::weak_ptr<uml::Element > getOwner() const = 0;/*!
			Specifies the elements related by the Relationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::Element>> getRelatedElement() const = 0;/*!
			Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<SubsetUnion<uml::Element, uml::Element>> getSource() const = 0;/*!
			Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<SubsetUnion<uml::Element, uml::Element>> getTarget() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: UML_PACKAGEMERGE_HPP */
