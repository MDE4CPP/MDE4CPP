//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSCS_SEMANTICS_LOCIFACTORY_HPP
#define PSCS_SEMANTICS_LOCIFACTORY_HPP
// namespace macro header include
#include "PSCS/PSCS.hpp"

#include <map>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EFactory.hpp"
#include "PSCS/Semantics/Loci/LociPackage.hpp"

namespace fUML::Semantics::Loci
{
	class Locus;
}


namespace PSCS::Semantics::Loci 
{
	class LociFactoryPluginImpl;
}
namespace PSCS::Semantics::Loci 
{
	class PSCS_API LociFactory : virtual public ecore::EFactory 
	{
		private:    
			LociFactory(LociFactory const&) = delete;
			LociFactory& operator=(LociFactory const&) = delete;
		protected:
			LociFactory(){}
		private:    	
			friend class LociPluginImpl; 
		// Header only sinleton like implemenation for LociFactory eInstance()
		private: 
			static std::shared_ptr<LociFactory>* getLociFactoryStaticPtr()
			{
				static std::shared_ptr<LociFactory> local_instance; 
				return &(local_instance);
			}
		    static void seteInstance(std::shared_ptr<LociFactory> _instance) {*(getLociFactoryStaticPtr())=_instance;}; 
		public:
			static std::shared_ptr<LociFactory> eInstance(){return *(getLociFactoryStaticPtr());}
		
		public:    		
			//Creator functions
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const = 0;

			virtual std::shared_ptr<PSCS::Semantics::Loci::CS_ExecutionFactory> createCS_ExecutionFactory(const int metaElementID = LociPackage::CS_EXECUTIONFACTORY_CLASS) const = 0;
			//Add as contained object
			virtual std::shared_ptr<PSCS::Semantics::Loci::CS_ExecutionFactory> createCS_ExecutionFactory_as_factory_in_Locus(std::weak_ptr<fUML::Semantics::Loci::Locus> par_Locus, const int metaElementID = LociPackage::CS_EXECUTIONFACTORY_CLASS) const = 0;
			virtual std::shared_ptr<PSCS::Semantics::Loci::CS_Executor> createCS_Executor(const int metaElementID = LociPackage::CS_EXECUTOR_CLASS) const = 0;
			//Add as contained object
			virtual std::shared_ptr<PSCS::Semantics::Loci::CS_Executor> createCS_Executor_as_executor_in_Locus(std::weak_ptr<fUML::Semantics::Loci::Locus> par_Locus, const int metaElementID = LociPackage::CS_EXECUTOR_CLASS) const = 0;
			virtual std::shared_ptr<PSCS::Semantics::Loci::CS_Locus> createCS_Locus(const int metaElementID = LociPackage::CS_LOCUS_CLASS) const = 0;
			
	};
}
#endif /* end of include guard: PSCS_SEMANTICS_LOCIFACTORY_HPP */
