[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of enumeration file
 * 
 */]
[module generateEnumerationFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * template for generation of file with delcaration of enumeration class and corresponding literals
*/]
[template public generateEnumerationFile(anEnum : Enumeration)]
[file (anEnum._package.getPackageName().concat('/').concat(anEnum.name).concat('.hpp'), false, 'UTF-8')]
[anEnum.startGuard()/]

[if (not anEnum.getNearestPackage().ignoreNamespace())]namespace [anEnum._package.name/] 
{
[/if]
	enum class [anEnum.name/] 
	{
[for (lit : EnumerationLiteral | anEnum.ownedLiteral->asOrderedSet()->sortedBy(myQualifiedName())) separator (',\n')]
		[lit.name.toUpperCase()/] = [anEnum.ownedLiteral->indexOf(lit).toString()/][/for]
	};
[if (not anEnum.getNearestPackage().ignoreNamespace())]}[/if]
[anEnum.endGuard()/]
[/file]
[/template]