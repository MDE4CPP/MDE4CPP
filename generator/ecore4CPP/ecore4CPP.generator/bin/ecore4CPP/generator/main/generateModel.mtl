[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModel('http://www.eclipse.org/emf/2002/Ecore')]
 
[import ecore4CPP::generator::main::generateAttribute/]
[import ecore4CPP::generator::main::generateClass/]
[import ecore4CPP::generator::main::generateOperation/]
[import ecore4CPP::generator::main::generatePersistence/]
[import ecore4CPP::generator::main::generateReference/]
[import ecore4CPP::generator::main::generateUnion /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[query public includes(aClass : EClass) : Set(EClassifier) =OrderedSet{aClass.eSuperTypes,aClass.eAllStructuralFeatures.eType,aClass.eOperations.eType,aClass.eOperations.eParameters.eType}->flatten() /]

[template public generateModel(aClass : EClass)]
[file (aClass.generateNamespacePath().concat('/').concat(aClass.name.toUpperFirst()).concat('.hpp'), false, 'UTF-8')]
[startGuard(aClass)/]

[if (aClass.eOperations.eParameters.eType->select(name = 'EMap')->size() > 0 or aClass.eAttributes.eType->select(name = 'EMap')->size() > 0)]
#include <map>
[/if]
#include <list>
#include <memory>
#include <string>

[if (aClass.eAttributes.eType->select(requiresAny())->size() > 0)]
#include "abstractDataTypes/Any.hpp"
[/if]

// forward declarations
[generateAbstractDataTypesForwardDeclaration()/]

[if (aClass.eAttributes.eType->select(requiresAny())->size() = 0 and aClass.eOperations.eParameters.eType->select(requiresAny())->size() > 0)]
class AnyObject;
typedef std::shared_ptr<AnyObject> Any;
[/if]

//*********************************
// generated Includes

[generatePersistenceForwardDeclarations()/]

//Forward Declaration for used types
[for (element : EClassifier| aClass.includes()->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
namespace [element.generateNamespaceDefinition()/] 
{
	class [element.name/];
}
[/for]

// base class includes
[for (elements : EClassifier| aClass.eSuperTypes->asOrderedSet()->sortedBy(name)) separator ('\n')]
#include "[elements.generateNamespacePath()/]/[elements.name.toUpperFirst().concat('.hpp')/]"
[/for]

// enum includes
[for (elements : EEnum| aClass.includes()->selectByKind(EEnum)->asOrderedSet()->sortedBy(name)) separator ('\n')]
#include "[elements.generateNamespacePath()/]/[elements.name.toUpperFirst().concat('.hpp')/]"
[/for]

[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
#include "ecore/EObject.hpp"
[/if]

//*********************************
namespace [aClass.generateNamespaceDefinition()/] 
{
	[aClass.generateDokumentation()/]
	class [aClass.name.toUpperFirst()/] [if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))] : virtual public ecore::EObject 
[else]
[for (sClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name)) before (':') separator (',')]
virtual public [ClassWithNamespace(aClass,sClass)/][/for]
[/if][if(aClass.hasKey('shared_from_this'))], public std::enable_shared_from_this<[aClass.name.toUpperFirst()/]>[/if]
	{
		public:
 			[aClass.name.toUpperFirst()/](const [aClass.name.toUpperFirst()/] &) {}
			[aClass.name.toUpperFirst()/]& operator=([aClass.name.toUpperFirst()/] const&) = delete;

		protected:
			[aClass.name.toUpperFirst()/](){}

			[if(aClass.containsContainerAttribute())]

			[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
			[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
			//Additional constructors for the containments back reference

			[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
					[if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
			[aClass.name.toUpperFirst()/]([aReference.generateReferenceType(true)/] par_[aReference.eType.name/], const int reference_id);
					[/if]
			[else]
			[aClass.name.toUpperFirst()/]([aReference.generateReferenceType(true)/] par_[aReference.name/]);
			[/if]
			[/for]
			[/let]
			[/if]

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~[aClass.name.toUpperFirst()/]() {}

			//*********************************
			// Operations
			//*********************************
			[aClass.eOperations->sortedBy(name).generateOperationDecl(false)/]
			//*********************************
			// Attributes Getter Setter
			//*********************************
			[aClass.eAttributes->sortedBy(name).generateAttributeAccessorsDecl(false)/]
			//*********************************
			// Reference
			//*********************************
			[aClass.eReferences->sortedBy(name).generateReferenceDecl(false)/]

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			[aClass.eAttributes->sortedBy(name).generateAttributeProtectedMember()/]
			
			//*********************************
			// Reference Members
			//*********************************
			[aClass.eReferences->sortedBy(name).generateProtectedReference()/]

		public:
			//*********************************
			// Union Getter
			//*********************************
			[aClass.generateUnionGetterDeclaretaion(false)/]

			[aClass.generateEContainerOperation(false)/] 
			
			//*********************************
			// Persistence Functions
			//*********************************
			[aClass.generatePersistenceDecl(false)/]
	};

}
[endGuard(aClass)/]
[/file]
[/template]