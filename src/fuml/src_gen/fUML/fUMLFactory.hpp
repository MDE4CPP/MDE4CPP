//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUMLFACTORY_HPP
#define FUMLFACTORY_HPP

#include <map>
#include <memory>

// namespace macro header include
#include "fUML/fUML.hpp"

#include "ecore/EFactory.hpp"
#include "fUML/fUMLPackage.hpp"

namespace fUML 
{
	class fUMLPackage;
}
namespace fUML::Semantics::Activities 
{
	class ActivityNodeActivationGroup;
}


namespace fUML::Semantics::Actions 
{
	class StructuredActivityNodeActivation;
}
namespace fUML::Semantics::Activities 
{
	class ActivityExecution;
	class ActivityNodeActivationGroup;
}






namespace fUML::Semantics::Loci 
{
	class Locus;
}













namespace fUML 
{
	class FUML_API fUMLFactory : virtual public ecore::EFactory 
	{
		private:    
			fUMLFactory(fUMLFactory const&) = delete;
			fUMLFactory& operator=(fUMLFactory const&) = delete;
		protected:
			fUMLFactory(){}
		
			//Singleton Instance and Getter
			private:
				static std::shared_ptr<fUMLFactory> instance;
			public:
				static std::shared_ptr<fUMLFactory> eInstance();
		
			//Creator functions
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const = 0;

			
	};
}
#endif /* end of include guard: FUMLFACTORY_HPP */
