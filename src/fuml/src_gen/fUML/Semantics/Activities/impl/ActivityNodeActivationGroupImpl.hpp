//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_ACTIVITIES_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP
#define FUML_SEMANTICS_ACTIVITIES_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "fUML/fUML.hpp" 

// model includes
#include "../ActivityNodeActivationGroup.hpp"

#include "fUML/Semantics/Activities/impl/ActivitiesFactoryImpl.hpp"

#include "ecore/impl/EModelElementImpl.hpp"

//*********************************
namespace fUML::Semantics::Activities 
{
	class FUML_API ActivityNodeActivationGroupImpl : virtual public ecore::EModelElementImpl,
virtual public ActivityNodeActivationGroup 
	{
		public: 
			ActivityNodeActivationGroupImpl(const ActivityNodeActivationGroupImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ActivityNodeActivationGroupImpl& operator=(ActivityNodeActivationGroupImpl const&); 

		protected:
			friend class fUML::Semantics::Activities::ActivitiesFactoryImpl;
			ActivityNodeActivationGroupImpl();
			virtual std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> getThisActivityNodeActivationGroupPtr() const;
			virtual void setThisActivityNodeActivationGroupPtr(std::weak_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> thisActivityNodeActivationGroupPtr);

			//Additional constructors for the containments back reference
			ActivityNodeActivationGroupImpl(std::weak_ptr<fUML::Semantics::Activities::ActivityExecution> par_activityExecution);
			//Additional constructors for the containments back reference
			ActivityNodeActivationGroupImpl(std::weak_ptr<fUML::Semantics::Actions::StructuredActivityNodeActivation> par_containingNodeActivation);

		public:
			//destructor
			virtual ~ActivityNodeActivationGroupImpl();
			
			//*********************************
			// Operations
			//*********************************
			virtual void activate(const std::shared_ptr<Bag<uml::ActivityNode>>& nodes, const std::shared_ptr<Bag<uml::ActivityEdge>>& edges) ;
			virtual void addEdgeInstance(const std::shared_ptr<fUML::Semantics::Activities::ActivityEdgeInstance>& instance) ;
			virtual void addNodeActivation(const std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation>& activation) ;
			virtual bool checkIncomingEdges(const std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityEdgeInstance>>& incomingEdges, const std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityNodeActivation>>& activations) ;
			virtual void createEdgeInstance(const std::shared_ptr<Bag<uml::ActivityEdge>>& edges) ;
			virtual std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation> createNodeActivation(const std::shared_ptr<uml::ActivityNode>& node) ;
			virtual void createNodeActivations(const std::shared_ptr<Bag<uml::ActivityNode>>& nodes) ;
			virtual std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation> getNodeActivation(const std::shared_ptr<uml::ActivityNode>& node) ;
			virtual std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityParameterNodeActivation>> getOutputParameterNodeActivations() ;
			virtual bool hasSourceFor(const std::shared_ptr<fUML::Semantics::Activities::ActivityEdgeInstance>& edgeInstance) ;
			virtual bool isSuspended() ;
			virtual void resume(const std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation>& activation) ;
			virtual std::shared_ptr<fUML::Semantics::Activities::ActivityExecution> retrieveActivityExecution() ;
			virtual void run(const std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityNodeActivation>>& activations) ;
			virtual void runNodes(const std::shared_ptr<Bag<uml::ActivityNode>>& nodes) ;
			virtual void suspend(const std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivation>& activation) ;
			virtual void terminateAll() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::weak_ptr<fUML::Semantics::Activities::ActivityExecution> getActivityExecution() const ;
			virtual void setActivityExecution(std::weak_ptr<fUML::Semantics::Activities::ActivityExecution>) ;
			virtual std::weak_ptr<fUML::Semantics::Actions::StructuredActivityNodeActivation> getContainingNodeActivation() const ;
			virtual void setContainingNodeActivation(std::weak_ptr<fUML::Semantics::Actions::StructuredActivityNodeActivation>) ;
			virtual const std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityEdgeInstance>>& getEdgeInstances() const ;
			virtual const std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityNodeActivation>>& getNodeActivations() const ;
			virtual const std::shared_ptr<Bag<fUML::Semantics::Activities::ActivityNodeActivation>>& getSuspendedActivations() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> m_thisActivityNodeActivationGroupPtr;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_ACTIVITIES_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP */
