//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_EXCEPTIONHANDLEREXCEPTIONHANDLERIMPL_HPP
#define UML_EXCEPTIONHANDLEREXCEPTIONHANDLERIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../ExceptionHandler.hpp"

#include "uml/impl/ElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ExceptionHandlerImpl : virtual public ElementImpl, virtual public ExceptionHandler 
	{
		public: 
			ExceptionHandlerImpl(const ExceptionHandlerImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ExceptionHandlerImpl& operator=(ExceptionHandlerImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ExceptionHandlerImpl();
			virtual std::shared_ptr<uml::ExceptionHandler> getThisExceptionHandlerPtr() const;
			virtual void setThisExceptionHandlerPtr(std::weak_ptr<uml::ExceptionHandler> thisExceptionHandlerPtr);

			//Additional constructors for the containments back reference
			ExceptionHandlerImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			ExceptionHandlerImpl(std::weak_ptr<uml::ExecutableNode> par_protectedNode);

		public:
			//destructor
			virtual ~ExceptionHandlerImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			An ObjectNode within the handlerBody. When the ExceptionHandler catches an exception, the exception token is placed on this ObjectNode, causing the handlerBody to execute.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::ObjectNode> getExceptionInput() const ;
			/*!
			An ObjectNode within the handlerBody. When the ExceptionHandler catches an exception, the exception token is placed on this ObjectNode, causing the handlerBody to execute.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setExceptionInput(const std::shared_ptr<uml::ObjectNode>&) ;
			/*!
			The Classifiers whose instances the ExceptionHandler catches as exceptions. If an exception occurs whose type is any exceptionType, the ExceptionHandler catches the exception and executes the handlerBody.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Classifier>> getExceptionType() const ;
			/*!
			An ExecutableNode that is executed if the ExceptionHandler catches an exception.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::ExecutableNode> getHandlerBody() const ;
			/*!
			An ExecutableNode that is executed if the ExceptionHandler catches an exception.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setHandlerBody(const std::shared_ptr<uml::ExecutableNode>&) ;
			/*!
			The ExecutableNode protected by the ExceptionHandler. If an exception propagates out of the protectedNode and has a type matching one of the exceptionTypes, then it is caught by this ExceptionHandler.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::weak_ptr<uml::ExecutableNode> getProtectedNode() const ;
			/*!
			The ExecutableNode protected by the ExceptionHandler. If an exception propagates out of the protectedNode and has a type matching one of the exceptionTypes, then it is caught by this ExceptionHandler.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setProtectedNode(std::weak_ptr<uml::ExecutableNode>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::ExceptionHandler> m_thisExceptionHandlerPtr;
	};
}
#endif /* end of include guard: UML_EXCEPTIONHANDLEREXCEPTIONHANDLERIMPL_HPP */
