[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateDataTypeImplementationHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::components::generateDataType /]

[template public generateDataTypeImplementationHeader(aDataType : DataType) {dataTypeName : String = aDataType.name.toUpperFirst() + 'Impl'; containingPackage : Package = aDataType.ancestors()->filter(Package)->first()}]
[file (containingPackage.generateNamespacePath(false) + '/impl/' + dataTypeName + '.hpp', false, 'UTF-8')]
[startGuard(dataTypeName)/]

//Model includes
#include "../[aDataType.name.toUpperFirst().concat('.hpp')/]"
[for (general : Classifier | aDataType.general->asOrderedSet()->sortedBy(myQualifiedName()))]
#include "[general.getNearestPackage().generateNamespacePath(false)/]/impl/[general.name.toUpperFirst()/]Impl.hpp"
[/for]
[if (aDataType.general->isEmpty())]
#include "[aDataType.getGeneralSuperClassImplInclude()/]"
[/if]

class Any;

namespace uml
{
	class Property;
	class Operation;
[if (aDataType.ownedAttribute->reject(type.oclIsUndefined())->select(hasSetter())->select(type.oclIsKindOf(Enumeration))->size() > 0)]
	class EnumerationLiteral;
[/if]
}

//*********************************
[if (not containingPackage.isIgnoreNamespace())]namespace [containingPackage.generateNamespace(false)/]
{
[/if]
	struct [dataTypeName/] [for (general : Classifier | aDataType.general->reject(oclIsUndefined() and name.oclIsUndefined())) before (':') separator (',')]
virtual public [general.getClassifierName(aDataType, false, general.getNearestPackage().isIgnoreNamespace())/]Impl[/for][if (aDataType.general->isEmpty())]
 : virtual public [aDataType.getGeneralSuperClassName()/]Impl[/if], virtual public [aDataType.name.toUpperFirst()/]
	{
		public: 
			[dataTypeName/](const [dataTypeName/] & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;  
			[dataTypeName/]& operator=([dataTypeName/] const&);

		protected:
			friend class [aDataType.getNearestPackage().myNamespaceName().concat('FactoryImpl')/];

			//constructor
			[dataTypeName/]();

		public:

			//destructor
			virtual ~[dataTypeName/]();

			//*********************************
			// Operations
			//*********************************
			[for (anOperation : Operation | aDataType.ownedOperation->sortedBy(name)) before('\t\t\t//Methods defined by Operations\n') after('\n')]
			[anOperation.generateOperationDecl(true)/]
			[/for]
			//*********************************
			// Attributes Getter Setter
			//*********************************
			[aDataType.ownedAttribute.generateAttributeAccessorsDeclaration(true)/]
			
			//*********************************
			// Union Getter
			//*********************************
			[aDataType.generateUnionGetterDeclaretaion(true)/]

		public:
			//**************************************
			// StructuralFeature Getter & Setter
			//**************************************
			[aDataType.generateeGetSetDel(true)/]
		
			//**************************************
			// Operation & OpaqueBehavior Invocation
			//**************************************
			[aDataType.generateInvoke(true)/]

	};
[if (not containingPackage.isIgnoreNamespace())]}[/if]
[endGuard(dataTypeName)/]
[/file]
[/template]
