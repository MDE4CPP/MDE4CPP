[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */]
[module generateClassifierObjectSource('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[query public supportedTypes(type : Type) : Boolean = (type.name = 'Integer') or (type.name = 'Boolean') /]
[query public getStructuralFeaturesFromRSTA(aPackage : Package, aClassifier : Classifier) : OrderedSet(StructuralFeature) = aPackage.allOwnedElements()->filter(ReadStructuralFeatureAction)->select(object.type=aClassifier).structuralFeature->addAll(getStructuralFeaturesFromASTVA(aClassifier))->addAll(getStructuralFeaturesFromRSTVA(aClassifier))->asOrderedSet()->sortedBy(name)/]
[query public getASTVA(aPackage : Package, aClassifier : Classifier) : OrderedSet(AddStructuralFeatureValueAction) = aPackage.allOwnedElements()->filter(AddStructuralFeatureValueAction)->select(object.type=aClassifier)->asOrderedSet()->sortedBy(name)/]
[query public getStructuralFeaturesFromASTVA(aPackage : Package, aClassifier : Classifier) : OrderedSet(StructuralFeature) = aPackage.allOwnedElements()->filter(AddStructuralFeatureValueAction)->select(object.type=aClassifier).structuralFeature->asOrderedSet()->sortedBy(name)/]
[query public getStructuralFeaturesFromRSTVA(aPackage : Package, aClassifier : Classifier) : OrderedSet(StructuralFeature) = aPackage.allOwnedElements()->filter(RemoveStructuralFeatureValueAction)->select(object.type=aClassifier).structuralFeature->asOrderedSet()->sortedBy(name)/]

[template public generateClassifierObjectSource(aClassifier : Classifier, aPackage:Package) {
	className : String = objectClassName();
	pointerName : String = pointerName(aPackage);
}]
[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]Exec/[className/].hpp"

#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aClassifier.getNearestPackage().myNamespaceName()/]/[aClassifier.name.toUpperFirst()/].hpp"
#include "[aClassifier.getNearestPackage().getPackageName()/]/[aClassifier.getNearestPackage().name/]Package.hpp"
#include "uml/Class.hpp"
[let attributes : OrderedSet(Property) = aClassifier.getAllAttributes().oclAsType(Property)->flatten()->asOrderedSet()->sortedBy(qualifiedName) ]
[if (attributes->size() > 0)]
#include "abstractDataTypes/Any.hpp"
#include "PSCS/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_Reference.hpp"
#include "fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp"
#include "fUML/Semantics/Values/Value.hpp"
#include "fUML/Semantics/SimpleClassifiers/FeatureValue.hpp"
[if (aClassifier.ownedElement->filter(Connector)->size() > 0)]
#include "PSCS/Semantics/StructuredClassifiers/CS_Link.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_InteractionPoint.hpp"
#include "fUML/Semantics/CommonBehavior/Execution.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/Loci/ChoiceStrategy.hpp"
#include "uml/Association.hpp"
#include "uml/Connector.hpp"
#include "uml/ConnectorEnd.hpp"
#include "uml/Operation.hpp"
#include "uml/Port.hpp"
[/if]
#include "uml/Property.hpp"
[for (property : Property | attributes->sortedBy(qualifiedName))]
[property.type.generateTypeInclude(aPackage)/]
[/for]

[for (aPack : Package | attributes.getNearestPackage()->asSet()->flatten()->sortedBy(name))]
#include "[aPack.getPackageName()/]/[aPack.name/]Package.hpp"
[/for]
[/if]
[/let]
[for (action : AddStructuralFeatureValueAction | aPackage.getASTVA(aClassifier)->select(not (structuralFeature.type = value.type)))]
#include "[aPackage.getPackageName()/]Exec/[action.value.type.oclAsType(Classifier).objectClassName()/].hpp"
#include "[action.value.type._package.myNamespaceName()/]/[action.value.type.name/].hpp"
[/for]


using namespace [aPackage.name/];

[className/]::[className/](std::shared_ptr<[pointerName/]> _element):
	m_umlValue(_element)
{
	this->getTypes()->add([aClassifier.getModelPackage()/][aClassifier.generatePackageGetterCall(aClassifier)/]);
}

[className/]::[className/]([className/] &obj):
	CS_ObjectImpl(obj)
{
}

[className/]::[className/]()
{
	this->getTypes()->add([aClassifier.getModelPackage()/][aClassifier.generatePackageGetterCall(aClassifier)/]);
}

[className/]::~[className/]()
{
}

std::shared_ptr<ecore::EObject> [className/]::copy()
{
	std::shared_ptr<[className/]> element(new [className/](*this));
	element->setThis[className/]Ptr(element);
	return element;
}

std::shared_ptr<[pointerName/]> [className/]::getUmlValue() const
{
	return m_umlValue;
}

void [className/]::setUmlValue(std::shared_ptr<[pointerName/]> _element)
{
	m_umlValue = _element;
}

void [className/]::setThis[className/]Ptr(std::weak_ptr<[className/]> thisObjectPtr)
{
	setThisCS_ObjectPtr(thisObjectPtr);
}

[let attributes : OrderedSet(Property) = aClassifier.getAllAttributes().oclAsType(Property)->flatten()->asOrderedSet()->sortedBy(qualifiedName) ]
[if (attributes->size() > 0)]
[if (aClassifier.ownedElement->filter(Connector)->size() > 0)]
/*std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> [className/]::dispatchIn(std::shared_ptr<uml::Operation>  operation,std::shared_ptr<uml::Port>  onPort)
{
	std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> execution = nullptr;
	
	//Get all Connector elements of this objects type
	std::shared_ptr<Bag<uml::Connector>> connectorsOfMetaClass = this->getUmlValue()->getMetaClass()->getOwnedConnector();
	
	//Will contain potential targets to dispatch operation call to
	std::shared_ptr<Bag<uml::Property>> potentialTargets(new Bag<uml::Property>());
	
	for(unsigned int i = 0; i < connectorsOfMetaClass->size(); i++)
	{
		std::shared_ptr<uml::Connector> connector = connectorsOfMetaClass->at(i);
		std::shared_ptr<uml::ConnectorEnd> end1 = connector->getEnd()->at(0);
		std::shared_ptr<uml::ConnectorEnd> end2 = connector->getEnd()->at(1);
		
		std::shared_ptr<uml::Property> potentialTarget = nullptr;
		
		//If onPort matches role of end1 of connector, role of end2 is potential dispatch target
		if(onPort == end1->getRole()){
			potentialTarget = std::dynamic_pointer_cast<uml::Property>(end2->getRole());
		}
		//If onPort matches role of end2 of connector, role of end1 is potential dispatch target
		else if(onPort == end2->getRole())
		{
			potentialTarget = std::dynamic_pointer_cast<uml::Property>(end1->getRole());
		}
		
		if(potentialTarget != nullptr){
			//Check if target provides the required operation
			//Retrieve all provided operations of potentialTargets type and supertypes
			std::shared_ptr<uml::Classifier> potentialTargetType = std::dynamic_pointer_cast<uml::Classifier>(potentialTarget->getType());
			std::shared_ptr<Bag<uml::Operation>> potentialTargetOperations = potentialTargetType->getAllOperations();
				
			unsigned int j = 0;
			bool providesOperation = false;
				
			while(!providesOperation && j < potentialTargetOperations->size())
			{
				providesOperation = operation->matches(potentialTargetOperations->at(j));
			}
				
			if(providesOperation) {potentialTargets->add(potentialTarget);}
		}
	}
	
	if(potentialTargets->size() == 0) return execution;

	//Choose target to dispatch to from potential targets
	std::shared_ptr<fUML::Semantics::Loci::ChoiceStrategy> strategy = std::dynamic_pointer_cast<fUML::Semantics::Loci::ChoiceStrategy>(this->getLocus()->getFactory()->getStrategy("choice"));
	//Since fUML only specifies FirstChoiceStrategy, choose() will always return 1
	std::shared_ptr<uml::Property> targetProperty = potentialTargets->at(strategy->choose(potentialTargets->size())-1);

	//Get operation to call
	std::shared_ptr<uml::Operation> targetOperation = nullptr;
	std::shared_ptr<Bag<uml::Operation>> operations = (std::dynamic_pointer_cast<uml::Classifier>(targetProperty->getType()))->getAllOperations();
	unsigned int i = 0;
	
	while((targetOperation == nullptr) && (i < operations->size()))
	{
		if(operation->matches(operations->at(i)))
		{
			targetOperation = operations->at(i);
		}
	}
	
	if(targetOperation == nullptr) return execution;
	
	//Get FeatureValue for chosen target
	std::shared_ptr<fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = this->retrieveFeatureValue(targetProperty);
	//Get CS_Reference for chosen target
	std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> targetforDispatching = std::dynamic_pointer_cast<PSCS::Semantics::StructuredClassifiers::CS_Reference>(featureValue->getValues()->at(0));
	
	if(targetforDispatching != nullptr){
		execution = targetforDispatching->dispatch(targetOperation);
	}
	
	return execution;
}*/

std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> [className/]::dispatchOut(std::shared_ptr<uml::Operation>  operation,std::shared_ptr<uml::Port>  onPort)
{
	return nullptr;
}

std::shared_ptr<Bag<PSCS::Semantics::StructuredClassifiers::CS_Link>> [className/]::getLinks(std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_InteractionPoint> interactionPoint)
{
	std::shared_ptr<Bag<PSCS::Semantics::StructuredClassifiers::CS_Link>> allLinks(new Bag<PSCS::Semantics::StructuredClassifiers::CS_Link>());
	
	//Retrieve all metamodel elements
	std::shared_ptr<Bag<uml::Element>> modelMembers = Op_ProvInterface::Op_ProvInterfacePackage::eInstance()->allOwnedElements();
	std::shared_ptr<Bag<uml::Connector>> connectors(new Bag<uml::Connector>());
	std::shared_ptr<uml::Port> definingPort = interactionPoint->getDefiningPort();
	
	//Filter model elements for connectors that are connected to interactionPoints' definingPort
	for(unsigned int i = 0; i < modelMembers->size(); i++)
	{
		std::shared_ptr<uml::Connector> elementAsConnector = std::dynamic_pointer_cast<uml::Connector>(modelMembers->at(i));
		if(elementAsConnector != nullptr)
		{
			std::shared_ptr<uml::ConnectorEnd> end1 = elementAsConnector->getEnd()->at(0);
			std::shared_ptr<uml::ConnectorEnd> end2 = elementAsConnector->getEnd()->at(1);
			
			if((end1->getRole() == definingPort) || (end2->getRole() == definingPort))
			{
				connectors->add(elementAsConnector);
			}
		}
	}

	
	//For each connector that is connected to interactionPoints' definingPort:
	//- retrieve FeatureValue of otherEnd
	//-	create Link and add both interactionPoint as well as retrieved FeatureValue of otherEnd to the links' featureValues property
	//- add Link to allLinks
	
	for(unsigned int i = 0; i < connectors->size(); i++)
	{
		std::shared_ptr<uml::Connector> currentConnector = connectors->at(i);
		std::shared_ptr<Bag<fUML::Semantics::Values::Value>> otherEndValues(new Bag<fUML::Semantics::Values::Value>());
		std::shared_ptr<Bag<fUML::Semantics::Values::Value>> definingEndValues(new Bag<fUML::Semantics::Values::Value>());
		std::shared_ptr<uml::ConnectorEnd> end1 = currentConnector->getEnd()->at(0);
		std::shared_ptr<uml::ConnectorEnd> end2 = currentConnector->getEnd()->at(1);
		
		definingEndValues->add(interactionPoint);
		
		if(definingPort == end1->getRole())
		{
			std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> dummyBag(new Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>());
			otherEndValues = interactionPoint->getReferent()->getValues(currentConnector->getType()->getMemberEnd()->at(1), dummyBag);
			
			std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Link> newLink = PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createCS_Link();
			newLink->setType(currentConnector->getType());
			newLink->assignFeatureValue(newLink->getType()->getMemberEnd()->at(0), definingEndValues, -1);
			newLink->assignFeatureValue(newLink->getType()->getMemberEnd()->at(1), otherEndValues, -1);
			
			allLinks->add(newLink);
		}
		else if(definingPort == end2->getRole())
		{
			std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> dummyBag(new Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>());
			otherEndValues = interactionPoint->getReferent()->getValues(currentConnector->getType()->getMemberEnd()->at(0), dummyBag);
			
			std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Link> newLink = PSCS::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createCS_Link();
			newLink->setType(currentConnector->getType());
			newLink->assignFeatureValue(newLink->getType()->getOwnedEnd()->at(0), otherEndValues, -1);
			newLink->assignFeatureValue(newLink->getType()->getOwnedEnd()->at(1), definingEndValues, -1);
		
			allLinks->add(newLink);
		}
	}
	
	return allLinks;
}

[/if]

void [className/]::removeValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<fUML::Semantics::Values::Value> value)
{
	std::shared_ptr<uml::Property> property = std::dynamic_pointer_cast<uml::Property>(feature);
	if (property == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": feature is null or not kind of uml::Property" << std::endl;
		throw "feature is null or not kind of uml::Property";
	}

	if (m_umlValue == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": not implemented for object lists" << std::endl;
		throw "UnsupportedParameterException";	
	}

[for (aProperty : Property | aClassifier.getAllAttributes().oclAsType(Property))]
	if (property == [aProperty.getModelPackage()/][aProperty.generatePackageGetterCall(aProperty)/])
	{
[if (aProperty.upper = 1)]
[if (aProperty.isPrimitiveTypedProperty())]
[if (aProperty.default->notEmpty())]
				m_umlValue->[aProperty.setterName()/]([aProperty.genDefault()/]);
[else]
				// no default value defined, clear not realized
[/if]
[else]
				m_umlValue->[aProperty.setterName()/](nullptr);
[/if]

[else]
		if (value == nullptr) // clear mode
		{
			m_umlValue->[aProperty.getterName()/]()->clear();
		}
		else
		{
[if (aProperty.isPrimitiveTypedProperty())]
			std::shared_ptr<[aProperty.type.getValueClass()/]> inputValue = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(value);
			if (inputValue != nullptr)
			{
				[aProperty.type.generateCppType(true)/] specificValue = inputValue->getValue();
				std::shared_ptr<Bag<[aProperty.type.generateCppType(true)/]>> valueList = m_umlValue->[aProperty.getterName()/];
				Bag<int>::iterator iter = valueList->begin();
				Bag<int>::iterator end = valueList->end();
				while (iter != end)
				{
					if (specificValue == *iter)
					{
						valueList->erase(iter);
						break;
					}
					iter++;
				}
			}
[else]
			/* Should use PSCS::CS_Reference but dynamic_pointer_cast fails --> using fUML::Reference instead
			std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> reference = std::dynamic_pointer_cast<PSCS::Semantics::StructuredClassifiers::CS_Reference>(value); */
			std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> reference = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>(value);
			std::shared_ptr<[aProperty.type.getValueClass()/]> inputValue = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(reference->getReferent());
			if (inputValue != nullptr)
			{
				m_umlValue->[aProperty.getterName()/]()->erase(inputValue->getUmlValue());
[/if]
			}
		}
[/if]
	}
[/for]
}


std::shared_ptr<Bag<fUML::Semantics::Values::Value>> [className/]::getValues(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues)
{
	std::shared_ptr<uml::Property> property = std::dynamic_pointer_cast<uml::Property>(feature);
	if (property == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": feature is null or not kind of uml::Property" << std::endl;
		throw "feature is null or not kind of uml::Property";
	}

	if (m_umlValue == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": no value stored inside [className/]" << std::endl;
		throw "NullPointerException";	
	}

	std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values(new Bag<fUML::Semantics::Values::Value>());
[for (aProperty : Property | aClassifier.getAllAttributes().oclAsType(Property))]
	if (property == [aProperty.getModelPackage()/][aProperty.generatePackageGetterCall(aProperty)/])
	{
[if (aProperty.type.oclIsKindOf(Enumeration))]
		[aProperty.type.generateCppType(false)/] [aProperty.name/] = m_umlValue->[aProperty.getterName()/]();
		std::shared_ptr<fUML::Semantics::SimpleClassifiers::EnumerationValue> value = [getFUMLSimpleClassifierFactory()/]->createEnumerationValue();
[for (literal : EnumerationLiteral | aProperty.type.oclAsType(Enumeration).ownedLiteral)]
		if ([aProperty.name/] == [literal.enumeration.namespace.name/]::[literal.enumeration.name/]::[literal.name.toUpperCase()/])
		{
			value->setLiteral([literal.generatePackageGetterCall()/]);
		}
[/for]
		values->add(value);
[elseif (aProperty.isPrimitiveTypedProperty())]
[if (aProperty.upper = 1)]
		std::shared_ptr<[aProperty.type.getValueClass()/]> value = [getFUMLSimpleClassifierFactory()/]->create[aProperty.type.name.toUpperFirst()/]Value();
		value->setValue(m_umlValue->[if (aClassifier.getNearestPackage().name.toLower() = 'uml')]get[aProperty.name.toUpperFirst()/][else][aProperty.getterName()/][/if]());
		values->add(value);
[else]
		std::shared_ptr<Bag<[aProperty.type.generateCppType(true)/]>> valueList = m_umlValue->[aProperty.getterName()/]();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator iter = valueList->begin();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator end = valueList->end();
		while (iter != end)
		{
			std::shared_ptr<[aProperty.type.getValueClass()/]> value = [getFUMLSimpleClassifierFactory()/]->create[aProperty.type.name.toUpperFirst()/]Value();
			value->setValue(*(*iter));
			values->push_back(value);
			iter++;
		}
[/if]
[else]
[if (aProperty.upper = 1)]
		std::shared_ptr<[aProperty.type.getValueClass()/]> value(new [aProperty.type.oclAsType(Classifier).objectClassName()/]());
		value->setThis[aProperty.type.oclAsType(Classifier).objectClassName()/]Ptr(value);
		value->setLocus(this->getLocus());
		value->setUmlValue(m_umlValue->[aProperty.getterName()/]()[if(aProperty.isBackReference())].lock()[/if]);
		std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> reference= [getPSCSStructuredClassifierFactory()/]->createCS_Reference();
		reference->setReferent(value);
		values->add(reference);
[else]
		[aProperty.generateCppType()/] [aProperty.name.toLowerFirst()/]List = m_umlValue->[aProperty.getterName()/]();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator iter = [aProperty.name.toLowerFirst()/]List->begin();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator end = [aProperty.name.toLowerFirst()/]List->end();
		while (iter != end)
		{
			std::shared_ptr<[aProperty.type.getValueClass()/]> value(new [aProperty.type.oclAsType(Classifier).objectClassName()/]());
			value->setThis[aProperty.type.oclAsType(Classifier).objectClassName()/]Ptr(value);
			value->setLocus(this->getLocus());
			value->setUmlValue(*iter);
			std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> reference= [getPSCSStructuredClassifierFactory()/]->createCS_Reference();
			reference->setReferent(value);
			values->add(reference);
			iter++;
		} 
[/if]
[/if]
	}
[/for]	
	return values;
}

std::shared_ptr<fUML::Semantics::SimpleClassifiers::FeatureValue> [className/]::retrieveFeatureValue(std::shared_ptr<uml::StructuralFeature> feature)
{
	std::shared_ptr<fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue([getFUMLSimpleClassifierFactory()/]->createFeatureValue());
	featureValue->setFeature(feature);

	std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues(new Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>());
	std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values = this->getValues(feature, featureValues);
	
	for(unsigned int i = 0; i < values->size(); i++)
	{
		featureValue->getValues()->add(values->at(i));
	}

	return featureValue;
}


void [className/]::setFeatureValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values, int position)
{
	std::shared_ptr<uml::Property> property = std::dynamic_pointer_cast<uml::Property>(feature);
	if (property == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": feature is null or not kind of uml::Property" << std::endl;
		throw "feature is null or not kind of uml::Property";
	}

	if (m_umlValue == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": not implemented for object lists" << std::endl;
		throw "UnsupportedParameterException";
	}

	if (values->size() == 0)
	{
		std::cout << __PRETTY_FUNCTION__ << ": no input value given" << std::endl;
		return;
	}
[for (action : AddStructuralFeatureValueAction | aPackage.getASTVA(aClassifier))]
[let aProperty : Property = action.structuralFeature.oclAsType(Property)]
	if (property == [action.structuralFeature.getModelPackage()/][aProperty.generatePackageGetterCall(aProperty)/])
	{
[if (aProperty.upper = 1)]
		std::shared_ptr<Value> inputValue = values->at(0);
		[aProperty.generateSetFeatureValue(action.value)/]
[else]
		Bag<fUML::Semantics::Values::Value>::iterator iter = values->begin();
		Bag<fUML::Semantics::Values::Value>::iterator end = values->end();
		while (iter != end)
		{
			std::shared_ptr<Value> inputValue = *iter;
			[aProperty.generateSetFeatureValue(action.value)/]
			iter++;
		}
[/if]
	}
[/let]
[/for]
}

void [className/]::assignFeatureValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values, int position)
{
	this->setFeatureValue(feature, values, position);
}

std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> [className/]::retrieveFeatureValues()
{
	std::shared_ptr<uml::Classifier> type = this->getTypes()->at(0);
	std::shared_ptr<Bag<uml::Property>> allAttributes = type->getAllAttributes();
	std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues(new Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>());
	
	for(unsigned int i = 0; i < allAttributes->size(); i++)
	{
		featureValues->add(this->retrieveFeatureValue(allAttributes->at(i)));
	}
	
	return featureValues;
}

[/if]
[/let]
[/file]
[/template]

[template private generateSetFeatureValue(aProperty : Property, valuePin : InputPin)]
[if (aProperty.isPrimitiveTypedProperty())]
std::shared_ptr<[aProperty.type.getValueClass()/]> valueObject = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(inputValue);
if (valueObject != nullptr)
{
[if (aProperty.upper = 1)]
	m_umlValue->[aProperty.setterName()/](valueObject->[aProperty.getterPrefix()/]Value());
[else]
	std::shared_ptr<[aProperty.type.generateCppType(true)/]> value(new [aProperty.type.generateCppType(true)/](valueObject->getValue()));
	m_umlValue->[aProperty.getterName()/]()->push_back(value);
[/if]
}
[else]
std::shared_ptr<PSCS::Semantics::StructuredClassifiers::CS_Reference> reference = std::dynamic_pointer_cast<PSCS::Semantics::StructuredClassifiers::CS_Reference>(inputValue);
std::shared_ptr<[valuePin.type.getValueClass()/]> value = std::dynamic_pointer_cast<[valuePin.type.getValueClass()/]>(reference->getReferent());
if (value != nullptr)
{
[if (aProperty.upper = 1)]
	m_umlValue->[aProperty.setterName()/](value->getUmlValue());
[else]
	m_umlValue->[aProperty.getterName()/]()->push_back(value->getUmlValue());
[/if]
}
[/if]
[/template]

[query private isPrimitiveTypedProperty(aProperty : Property) : Boolean = aProperty.type.oclIsKindOf(PrimitiveType) /] 