//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CLASSIFIERTEMPLATEPARAMETERCLASSIFIERTEMPLATEPARAMETERIMPL_HPP
#define UML_CLASSIFIERTEMPLATEPARAMETERCLASSIFIERTEMPLATEPARAMETERIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../ClassifierTemplateParameter.hpp"

#include "uml/impl/TemplateParameterImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ClassifierTemplateParameterImpl : virtual public TemplateParameterImpl, virtual public ClassifierTemplateParameter 
	{
		public: 
			ClassifierTemplateParameterImpl(const ClassifierTemplateParameterImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ClassifierTemplateParameterImpl& operator=(ClassifierTemplateParameterImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ClassifierTemplateParameterImpl();
			virtual std::shared_ptr<uml::ClassifierTemplateParameter> getThisClassifierTemplateParameterPtr() const;
			virtual void setThisClassifierTemplateParameterPtr(std::weak_ptr<uml::ClassifierTemplateParameter> thisClassifierTemplateParameterPtr);

			//Additional constructors for the containments back reference
			ClassifierTemplateParameterImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			ClassifierTemplateParameterImpl(std::weak_ptr<uml::TemplateSignature> par_signature);

		public:
			//destructor
			virtual ~ClassifierTemplateParameterImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.
			<p>From package UML::Classification.</p>
			*/
			 
			virtual bool getAllowSubstitutable() const ;
			/*!
			Constrains the required relationship between an actual parameter and the parameteredElement for this formal parameter.
			<p>From package UML::Classification.</p>
			*/
			 
			virtual void setAllowSubstitutable (bool _allowSubstitutable);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The classifiers that constrain the argument that can be used for the parameter. If the allowSubstitutable attribute is true, then any Classifier that is compatible with this constraining Classifier can be substituted; otherwise, it must be either this Classifier or one of its specializations. If this property is empty, there are no constraints on the Classifier that can be used as an argument.
			<p>From package UML::Classification.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Classifier>> getConstrainingClassifier() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::ClassifierTemplateParameter> m_thisClassifierTemplateParameterPtr;
	};
}
#endif /* end of include guard: UML_CLASSIFIERTEMPLATEPARAMETERCLASSIFIERTEMPLATEPARAMETERIMPL_HPP */
