
#include "PSSM/Semantics/StateMachines/impl/StateActivationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Includes from codegen annotation
#include "uml/Trigger.hpp"
#include "uml/State.hpp"
#include "fUML/MDE4CPP_Extensions/FUML_Object.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineExecution.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineConfiguration.hpp"
#include "PSSM/Semantics/Loci/SM_Locus.hpp"
#include "fUML/Semantics/Loci/Executor.hpp"
#include "PSSM/Semantics/StateMachines/StateMetadata.hpp"
#include "PSSM/Semantics/CommonBehavior/SM_ObjectActivation.hpp"
#include "PSSM/Semantics/StateMachines/EntryPointPseudostateActivation.hpp"
#include "uml/Pseudostate.hpp"
#include "uml/Transition.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "fUML/Semantics/Loci/LociFactory.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesFactory.hpp"
#include "uml/umlFactory.hpp"
#include "uml/Behavior.hpp"
#include "PSSM/Semantics/StateMachines/ConnectionPointActivation.hpp"
#include "PSSM/Semantics/StateMachines/DoActivityContextObject.hpp"
#include "fUML/Semantics/CommonBehavior/EventOccurrence.hpp"
#include "uml/NamedElement.hpp"
#include "PSSM/Semantics/StateMachines/RegionActivation.hpp"
#include "fUML/Semantics/Loci/SemanticVisitor.hpp"
#include "PSSM/Semantics/StateMachines/TransitionActivation.hpp"
#include "uml/Vertex.hpp"
#include "PSSM/Semantics/StateMachines/VertexActivation.hpp"
//Factories and Package includes
#include "PSSM/PSSMPackage.hpp"
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "fUML/Semantics/Loci/LociPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
StateActivationImpl::StateActivationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

StateActivationImpl::~StateActivationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete StateActivation "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


StateActivationImpl::StateActivationImpl(const StateActivationImpl & obj): StateActivationImpl()
{
	*this = obj;
}

StateActivationImpl& StateActivationImpl::operator=(const StateActivationImpl & obj)
{
	//call overloaded =Operator for each base class
	VertexActivationImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of StateActivation 
	 * which is generated by the compiler (as StateActivation is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//StateActivation::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy StateActivation "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_isDoActivityCompleted = obj.getIsDoActivityCompleted();
	m_isEntryCompleted = obj.getIsEntryCompleted();
	m_isExitCompleted = obj.getIsExitCompleted();

	//copy references with no containment (soft copy)
	m_doActivityContextObject  = obj.getDoActivityContextObject();
	//Clone references with containment (deep copy)
	//clone reference 'connectionPointActivations'
	const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>>& connectionPointActivationsList = obj.getConnectionPointActivations();
	if(connectionPointActivationsList)
	{
		m_connectionPointActivations.reset(new Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>());
		
		
		for(const std::shared_ptr<PSSM::Semantics::StateMachines::ConnectionPointActivation>& connectionPointActivationsindexElem: *connectionPointActivationsList) 
		{
			const std::shared_ptr<PSSM::Semantics::StateMachines::ConnectionPointActivation>& temp = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::ConnectionPointActivation>((connectionPointActivationsindexElem)->copy());
			m_connectionPointActivations->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for connectionPointActivations.")
	}

	//clone reference 'regionActivations'
	const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>>& regionActivationsList = obj.getRegionActivations();
	if(regionActivationsList)
	{
		m_regionActivations.reset(new Bag<PSSM::Semantics::StateMachines::RegionActivation>());
		
		
		for(const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& regionActivationsindexElem: *regionActivationsList) 
		{
			const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& temp = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>((regionActivationsindexElem)->copy());
			m_regionActivations->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for regionActivations.")
	}
	
	
	return *this;
}

std::shared_ptr<ecore::EObject> StateActivationImpl::copy() const
{
	std::shared_ptr<StateActivationImpl> element(new StateActivationImpl());
	*element =(*this);
	element->setThisStateActivationPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************




bool StateActivationImpl::canDefer(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Return true if current state activation is capable of deferring the given
	// event occurrence; false otherwise. Note that false is returned in case where
	// the deferring constraint is overridden by an outgoing transition
	// 
	// Note: for the moment the evaluation is done with the assumption that the
	// received event occurrence is a signal event occurrence. This will change
	// as soon as other kind of event (e.g. call event) will be supported in fUML.
	//State state = (State) this.node;
	//boolean deferred = this.match(eventOccurrence, state.getDeferrableTriggers());
	//while(!deferred && state.getRedefinedState() != null){
	//	state = state.getRedefinedState();
	//	deferred = this.match(eventOccurrence, state.getDeferrableTriggers());
	//}
	//if(deferred){
	//	int i = 0;
	//	TransitionActivation overridingTransitionActivation = null;
	//	while(overridingTransitionActivation == null && i < this.outgoingTransitionActivations.size()){
	//		TransitionActivation currentTransitionActivation = this.outgoingTransitionActivations.get(i);
	//		if(currentTransitionActivation.canFireOn(eventOccurrence)){
	//			overridingTransitionActivation = currentTransitionActivation;
	//		}
	//		i++;
	//	}
	//	deferred = overridingTransitionActivation == null;
	//}
	//return deferred;
	std::shared_ptr<uml::State> state = std::dynamic_pointer_cast<uml::State>(this->getNode());

	bool deferred = this->match(eventOccurrence, std::dynamic_pointer_cast<Bag<uml::Trigger>>(state->getDeferrableTrigger()));

	while(!deferred && state->getRedefinedState() != nullptr) 
	{
		state = state->getRedefinedState();
		deferred = this->match(eventOccurrence, std::dynamic_pointer_cast<Bag<uml::Trigger>>(state->getDeferrableTrigger()));
	}

	if(deferred)
	{
		deferred = false;
		for (auto outgoingTransitionActivation : *m_outgoingTransitionActivations)
		{
			if (outgoingTransitionActivation->canFireOn(eventOccurrence))
			{
				deferred = true;
			}
		}
		/*std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation> overridingTransitionActivation = nullptr;
		while(overridingTransitionActivation == nullptr && i < this->m_outgoingTransitionActivations->size()) {
			std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation> currentTransitionActivation = this->m_outgoingTransitionActivations->at(i);
			if(currentTransitionActivation->canFireOn(eventOccurrence)) {
				overridingTransitionActivation = currentTransitionActivation;
			}
			i++;
		}
		deferred = overridingTransitionActivation == nullptr;*/
	}
	return deferred;
	//end of body
}

void StateActivationImpl::defer(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Postpone the time at which this Event Occurrence will be available in the event pool.
	// The given Event Occurrence is placed in the deferred event pool and will be released
	// only when the current State Activation leaves the State Machine configuration.
	//Object_ context = this.getExecutionContext();
	//if(context.objectActivation != null){
	//	((SM_ObjectActivation)context.objectActivation).registerDeferredEvent(eventOccurrence, this); 
	//}
	auto context = this->getExecutionContext();
	if(context->getObjectActivation() != nullptr) {
		std::dynamic_pointer_cast<PSSM::Semantics::CommonBehavior::SM_ObjectActivation>(context->getObjectActivation())->registerDeferredEvent(eventOccurrence, this->getThisStateActivationPtr());
	}
	//end of body
}

void StateActivationImpl::enter(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Enter this State by executing its entry Behavior if one is specified, invoke its doActivity Behavior if one is specified and, if composite, all owned RegionActivations are entered.
	// As the State is now active, it registers itself in the StateMachineConfiguration of the owning StateMachine and sets itself as the history of its owning RegionActivation.
	// All parent Vertices must be entered beforehand until the least common ancestor of this StateActivation and the source StateActivation of the entering Transition is reached.
	// NOTE: Due to the unability of MDE4CPP to invoke behaviors asynchronously, the sequence order has been altered compared to the specification.
	if (this->getStatus() == StateMetadata::IDLE) {
		this->getThisVertexActivationPtr()->enter(enteringTransition, eventOccurrence, leastCommonAncestor);
		if (std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>(this->m_parent) != leastCommonAncestor) {
			if (auto parentVertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(this->m_parent)) {
				parentVertexActivation->enter(enteringTransition, eventOccurrence, leastCommonAncestor);
			}		
		}
		
		this->tryExecuteEntry(eventOccurrence);
		//this->tryInvokeDoActivity(eventOccurrence);
		/*if (std::dynamic_pointer_cast<uml::State>(this->getNode())->getIsComposite())
		{
			this->enterRegions(nullptr, eventOccurrence);
		}*/
		
		std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineExecution>(this->getStateMachineExecution())->getConfiguration()->_register(this->getThisStateActivationPtr());
		this->getOwningRegionActivation()->setHistory(this->getThisStateActivationPtr());

		this->tryInvokeDoActivity(eventOccurrence);
		if (std::dynamic_pointer_cast<uml::State>(this->getNode())->getIsComposite())
		{
			this->enterRegions(nullptr, eventOccurrence);
		}
	}
	//end of body
}

void StateActivationImpl::enterRegions(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Regions can be entered either implicitly or explicitly. 
	// A Region is typically entered implicitly when its Activation is triggered
	// by a Transition terminating on the edge of its containing State.
	// A Region is typically entered explicitly when one of its contained
	// States is targeted by a Transition coming from the outside.
	// *** Regions are entered concurrently ***
	//List<Vertex> targetedVertices = new ArrayList<Vertex>();
	//VertexActivation sourceActivation = enteringTransition.getSourceActivation();
	//if(sourceActivation instanceof ForkPseudostateActivation){
	//	Pseudostate fork = (Pseudostate)sourceActivation.getNode();
	//	for(int i = 0; i < fork.getOutgoings().size(); i++){
	//		targetedVertices.add(fork.getOutgoings().get(i).getTarget());
	//	}
	//}else{
	//	VertexActivation targetActivation = enteringTransition.getTargetActivation();
	//	if(targetActivation instanceof EntryPointPseudostateActivation){
	//		Pseudostate entryPoint = (Pseudostate)targetActivation.getNode();
	//		for(int i = 0; i < entryPoint.getOutgoings().size(); i++){
	//			targetedVertices.add(entryPoint.getOutgoings().get(i).getTarget());
	//		}
	//	}else{
	//		if(!(targetActivation instanceof HistoryPseudostateActivation)){
	//			targetedVertices.add((Vertex)targetActivation.getNode());
	//		}
	//	}
	//}
	//for(int i=0; i < this.regionActivation.size(); i++){
	//	RegionActivation regionActivation = this.regionActivation.get(i);
	//	int j = 0;
	//	boolean found = false;
	//	while(j < targetedVertices.size() && !found){
	//		found = regionActivation.getVertexActivation(targetedVertices.get(j)) != null;
	//		j++;
	//	}
	//	if(!found){
	//		regionActivation.enter(enteringTransition, eventOccurrence);
	//	}
	//}
	std::shared_ptr<Bag<uml::Vertex>> targetedVertices(new Bag<uml::Vertex>());
	auto sourceActivation = enteringTransition->getSourceActivation();

	//Fork

	//Else
	auto targetActivation = enteringTransition->getTargetActivation();

	if (std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::EntryPointPseudostateActivation>(targetActivation) != nullptr) 
	{
		auto entryPoint = std::dynamic_pointer_cast<uml::Pseudostate>(targetActivation->getNode());
		for (auto outgoingTransition : *(entryPoint->getOutgoings())) 
		{
			targetedVertices->add(outgoingTransition->getTarget());
		}
	} // else history

	for (auto regionActivation : *m_regionActivations)
	{
		int j=0;
		bool found = false;
		while (j < int(targetedVertices->size()) && !found) 
		{
			found = regionActivation->getVertexActivation(targetedVertices->at(j)) != nullptr;
			j++;
		}
		if (!found) 
		{
			regionActivation->enter(enteringTransition, eventOccurrence);
		}
	}
	//end of body
}

void StateActivationImpl::exit(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& exitingTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Exit this StateActivation by exiting all owned RegionActivations if the State is composite, abort its doActivtiy Behavior if one is specified and running
	// and execute its exit Behavior synchonously if one is specified.
	// As the State is now idle, it unregisters itself in the StateMachineConfiguration of the owning StateMachine.
	if (std::dynamic_pointer_cast<uml::State>(this->getNode())->getIsComposite())
	{
		for (auto ownedRegionActivation : *(this->m_regionActivations))
		{
			ownedRegionActivation->exit(nullptr, eventOccurrence);
		}
	}
	//this->setIsDoActivityCompleted(true); tbd
	this->tryExecuteExit(eventOccurrence);
	this->setStatus(PSSM::Semantics::StateMachines::StateMetadata::IDLE);
	std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineExecution>(this->getStateMachineExecution())->getConfiguration()->unregister(this->getThisStateActivationPtr());
	//end of body
}

std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>> StateActivationImpl::getConnectionPointActivation()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Return the activation for the exit point or the entry point.
//ConnectionPointActivation activation = null;
//int i = 0;
//while(i < this.connectionPointActivation.size() && activation==null){
//	if(this.connectionPointActivation.get(i).getNode()==vertex){
//		activation = this.connectionPointActivation.get(i);
//	}
//	i++;
//}
	return nullptr;
	//end of body
}

std::shared_ptr<PSSM::Semantics::StateMachines::ConnectionPointActivation> StateActivationImpl::getConnectionPointActivation(const std::shared_ptr<uml::Vertex>& vertex)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Behavior> StateActivationImpl::getDoActivity()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Return the DoActivity Behavior of the State or one inherited
	// from a Redefined State. If no DoActivity Behavior can be found, null is
	// returned.
	auto state = std::dynamic_pointer_cast<uml::State>(this->getNode());
	auto doActivityBehavior = state->getDoActivity();
	while(doActivityBehavior == nullptr && state->getRedefinedState() != nullptr){
		state = state->getRedefinedState();
		doActivityBehavior = state->getDoActivity();
	}
	return doActivityBehavior;
	//end of body
}

std::shared_ptr<uml::Behavior> StateActivationImpl::getEntry()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Return the Entry Behavior of the State or one inherited
	// from a Redefined State. If no Entry Behavior can be found, null is
	// returned.
	auto state = std::dynamic_pointer_cast<uml::State>(this->getNode());
	auto entryBehavior = state->getEntry();
	while(entryBehavior == nullptr && state->getRedefinedState() != nullptr){
		state = state->getRedefinedState();
		entryBehavior = state->getEntry();
	}
	return entryBehavior;
	//end of body
}

std::shared_ptr<uml::Behavior> StateActivationImpl::getExit()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Return the Exit Behavior of the State or one inherited
	// from a Redefined State. If no Exit Behavior can be found, null is
	// returned.
	auto state = std::dynamic_pointer_cast<uml::State>(this->getNode());
	auto exitBehavior = state->getExit();
	while(exitBehavior == nullptr && state->getRedefinedState() != nullptr){
		state = state->getRedefinedState();
		exitBehavior = state->getExit();
	}
	return exitBehavior;
	//end of body
}

std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> StateActivationImpl::getFireableTransitions(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Return the set of transitions that can fire using the the given event occurrence
//List<TransitionActivation> fireableTransitions = new ArrayList<TransitionActivation>();
//for(int i=0; i < this.outgoingTransitionActivations.size(); i++){
//	TransitionActivation outgoingTransitionActivation = this.outgoingTransitionActivations.get(i);
//	if(outgoingTransitionActivation.canFireOn(eventOccurrence)){
//		fireableTransitions.add(outgoingTransitionActivation);
//	}
//}
//return fireableTransitions;
	return nullptr;

	//end of body
}

std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>> StateActivationImpl::getRegionActivation()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	//return this.regionActivation;
return nullptr;

	//end of body
}

bool StateActivationImpl::hasCompleted()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// A state is considered completed under the following circumstances:
	// 1 - If the State is simple, both its entry and doActivity Behaviors have finished their execution
	// 2 - If the State is composite, all its owned Regions must have completed (by reaching their FinalStates) additionally
	// When this operation returns 'true', then the generation of a CompletionEventOccurrence is allowed for this particular State
	bool stateHasCompleted = this->m_isEntryCompleted && this->m_isDoActivityCompleted;
	if (std::dynamic_pointer_cast<uml::State>(this->getNode())->getIsComposite())
	{
		for (auto ownedRegionActivation : *(this->getRegionActivations()))
		{
			stateHasCompleted = stateHasCompleted && ownedRegionActivation->getIsCompleted();
		}
	}
	return stateHasCompleted;
	//end of body
}

void StateActivationImpl::notifyCompletion()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// When a State completes (i.e. its entry and doActivity Behaviors have been executed completeley),
	// an CompletionEventOccurrence is sent to the StateMachine owning this State. 
	// EventOccurrences of this type are prioritized to others in the Dispatch Loop.
	std::dynamic_pointer_cast<PSSM::Semantics::CommonBehavior::SM_ObjectActivation>(this->getExecutionContext()->getObjectActivation())->registerCompletionEvent(this->getThisStateActivationPtr());
	//end of body
}

void StateActivationImpl::releaseDeferredEvents()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// If events have been deferred by that state then these latter return to the
// regular event pool.
//Object_ context = this.getExecutionContext();
//if(context.objectActivation != null){
//	((SM_ObjectActivation)context.objectActivation).releaseDeferredEvents(this); 
//}

	//end of body
}

void StateActivationImpl::tryExecuteEntry(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Execute the State's entry Behavior if specified.
	// If not, but the State redefines another State which itself has an entry Behavior specified, then this Behavior is executed.
	// This rule applies recursively.
	if (!this->m_isEntryCompleted)
	{
		if (auto entryBehavior = this->getEntry()) // != nullptr
		{
			/*if (auto entryBehaviorExecution = this->getExecutionFor(entryBehavior, eventOccurrence)) // != nullptr
			{
				entryBehaviorExecution->execute();
				this->setIsEntryCompleted(true);
			}*/
			this->getExecutionLocus()->getExecutor()->execute(entryBehavior, this->getExecutionContext(), std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>(new Bag<fUML::Semantics::CommonBehavior::ParameterValue>()));
		}
		this->setIsEntryCompleted(true);
		if (this->hasCompleted())
		{
			this->notifyCompletion();
		}
	}
	//end of body
}

void StateActivationImpl::tryExecuteExit(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Execute the State's exit Behavior if specified.
	// If not, but the State redefines another State which itself has an exit Behavior specified, then this Behavior is executed.
	// This rule applies recursively.
	if (auto exitBehavior = this->getExit()) // != nullptr
	{
		/*if (auto exitBehaviorExecution = this->getExecutionFor(exitBehavior, eventOccurrence)) // != nullptr
		{
			exitBehaviorExecution->execute();
		}*/
		this->getExecutionLocus()->getExecutor()->execute(exitBehavior, this->getExecutionContext(), std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>(new Bag<fUML::Semantics::CommonBehavior::ParameterValue>()));
	}
	//super.exit(null, eventOccurrence, null);
	//end of body
}

void StateActivationImpl::tryInvokeDoActivity(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// If an doActivity behavior is specified for that state then it is executed.
	// If no doActivity is specified but the state redefines another state which
	// provides a doActivity then this latter is executed instead. The rule applies
	// recursively.
	//if(!this.isDoActivityCompleted){
	//	Behavior doActivity = this.getDoActivity();
	//	if(doActivity!=null){
	//		// Create, initialize and register to the locus the doActivityContextObject.
	//		this.doActivityContextObject = new DoActivityContextObject();
	//		this.getExecutionLocus().add(this.doActivityContextObject);
	//		this.doActivityContextObject.initialize(this.getExecutionContext());
	//		this.doActivityContextObject.owner = this;
	//		// Extract data from triggering event occurrence if possible. Reuse event occurrence
	//		// embedded data extraction logic provided by EventTriggeredExecution.
	//		List<ParameterValue> inputs = null;
	//		Execution doActivityExecution = this.getExecutionFor(doActivity, eventOccurrence);
	//		if(doActivityExecution instanceof EventTriggeredExecution){
	//			((EventTriggeredExecution)doActivityExecution).initialize();
	//			inputs = new ArrayList<ParameterValue>(((EventTriggeredExecution)doActivityExecution).wrappedExecution.parameterValues);
	//		}
	//		// Start doActivity execution on its own thread of execution (i.e., this
	//		// a different thread of execution than the one used for the state machine).
	//		this.doActivityContextObject.startBehavior(doActivity, inputs);
	//	}
	//}
	if (!this->m_isDoActivityCompleted)
	{
		if (auto doActivityBehavior = this->getDoActivity()) // != nullptr
		{
			// tbd
		}
		this->setIsDoActivityCompleted(true);
		if (this->hasCompleted())
		{
			this->notifyCompletion();
		}
	}
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute isDoActivityCompleted */
bool StateActivationImpl::getIsDoActivityCompleted() const 
{
	return m_isDoActivityCompleted;
}
void StateActivationImpl::setIsDoActivityCompleted(bool _isDoActivityCompleted)
{
	m_isDoActivityCompleted = _isDoActivityCompleted;
	
}

/* Getter & Setter for attribute isEntryCompleted */
bool StateActivationImpl::getIsEntryCompleted() const 
{
	return m_isEntryCompleted;
}
void StateActivationImpl::setIsEntryCompleted(bool _isEntryCompleted)
{
	m_isEntryCompleted = _isEntryCompleted;
	
}

/* Getter & Setter for attribute isExitCompleted */
bool StateActivationImpl::getIsExitCompleted() const 
{
	return m_isExitCompleted;
}
void StateActivationImpl::setIsExitCompleted(bool _isExitCompleted)
{
	m_isExitCompleted = _isExitCompleted;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference connectionPointActivations */
const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>>& StateActivationImpl::getConnectionPointActivations() const
{
	if(m_connectionPointActivations == nullptr)
	{
		m_connectionPointActivations.reset(new Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>());
		
		
	}
    return m_connectionPointActivations;
}

/* Getter & Setter for reference doActivityContextObject */
const std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject>& StateActivationImpl::getDoActivityContextObject() const
{
    return m_doActivityContextObject;
}
void StateActivationImpl::setDoActivityContextObject(const std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject>& _doActivityContextObject)
{
    m_doActivityContextObject = _doActivityContextObject;
	
}

/* Getter & Setter for reference regionActivations */
const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>>& StateActivationImpl::getRegionActivations() const
{
	if(m_regionActivations == nullptr)
	{
		m_regionActivations.reset(new Bag<PSSM::Semantics::StateMachines::RegionActivation>());
		
		
	}
    return m_regionActivations;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> StateActivationImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void StateActivationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void StateActivationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("isDoActivityCompleted");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsDoActivityCompleted(value);
		}

		iter = attr_list.find("isEntryCompleted");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsEntryCompleted(value);
		}

		iter = attr_list.find("isExitCompleted");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsExitCompleted(value);
		}
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("doActivityContextObject");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("doActivityContextObject")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	VertexActivationImpl::loadAttributes(loadHandler, attr_list);
}

void StateActivationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("connectionPointActivations") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChildContainer<PSSM::Semantics::StateMachines::ConnectionPointActivation>(this->getConnectionPointActivations());  

			return; 
		}

		if ( nodeName.compare("regionActivations") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "RegionActivation";
			}
			loadHandler->handleChildContainer<PSSM::Semantics::StateMachines::RegionActivation>(this->getRegionActivations());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	VertexActivationImpl::loadNode(nodeName, loadHandler);
}

void StateActivationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_DOACTIVITYCONTEXTOBJECT:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject> _doActivityContextObject = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::DoActivityContextObject>( references.front() );
				setDoActivityContextObject(_doActivityContextObject);
			}
			
			return;
		}
	}
	VertexActivationImpl::resolveReferences(featureID, references);
}

void StateActivationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	VertexActivationImpl::saveContent(saveHandler);
	
	StateMachineSemanticVisitorImpl::saveContent(saveHandler);
	
	fUML::Semantics::Loci::SemanticVisitorImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void StateActivationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
		// Add attributes
		if ( this->eIsSet(package->getStateActivation_Attribute_isDoActivityCompleted()) )
		{
			saveHandler->addAttribute("isDoActivityCompleted", this->getIsDoActivityCompleted());
		}

		if ( this->eIsSet(package->getStateActivation_Attribute_isEntryCompleted()) )
		{
			saveHandler->addAttribute("isEntryCompleted", this->getIsEntryCompleted());
		}

		if ( this->eIsSet(package->getStateActivation_Attribute_isExitCompleted()) )
		{
			saveHandler->addAttribute("isExitCompleted", this->getIsExitCompleted());
		}
	// Add references
		saveHandler->addReference(this->getDoActivityContextObject(), "doActivityContextObject", getDoActivityContextObject()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getDoActivityContextObject_Class()); 
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'connectionPointActivations'

		saveHandler->addReferences<PSSM::Semantics::StateMachines::ConnectionPointActivation>("connectionPointActivations", this->getConnectionPointActivations());

		// Save 'regionActivations'

		saveHandler->addReferences<PSSM::Semantics::StateMachines::RegionActivation>("regionActivations", this->getRegionActivations());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& StateActivationImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateActivation_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> StateActivationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_CONNECTIONPOINTACTIVATIONS:
			return eEcoreContainerAny(getConnectionPointActivations(),PSSM::Semantics::StateMachines::StateMachinesPackage::CONNECTIONPOINTACTIVATION_CLASS); //355
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_DOACTIVITYCONTEXTOBJECT:
			return eAny(getDoActivityContextObject(),PSSM::Semantics::StateMachines::StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_CLASS,false); //3510
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISDOACTIVITYCOMPLETED:
			return eAny(getIsDoActivityCompleted(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //357
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISENTRYCOMPLETED:
			return eAny(getIsEntryCompleted(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //358
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISEXITCOMPLETED:
			return eAny(getIsExitCompleted(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //359
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_REGIONACTIVATIONS:
			return eEcoreContainerAny(getRegionActivations(),PSSM::Semantics::StateMachines::StateMachinesPackage::REGIONACTIVATION_CLASS); //356
	}
	return VertexActivationImpl::eGet(featureID, resolve, coreType);
}

bool StateActivationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_CONNECTIONPOINTACTIVATIONS:
			return getConnectionPointActivations() != nullptr; //355
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_DOACTIVITYCONTEXTOBJECT:
			return getDoActivityContextObject() != nullptr; //3510
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISDOACTIVITYCOMPLETED:
			return getIsDoActivityCompleted() != false; //357
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISENTRYCOMPLETED:
			return getIsEntryCompleted() != false; //358
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISEXITCOMPLETED:
			return getIsExitCompleted() != false; //359
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_REGIONACTIVATIONS:
			return getRegionActivations() != nullptr; //356
	}
	return VertexActivationImpl::internalEIsSet(featureID);
}

bool StateActivationImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_CONNECTIONPOINTACTIVATIONS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>>& _connectionPointActivations = getConnectionPointActivations();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<PSSM::Semantics::StateMachines::ConnectionPointActivation> valueToAdd = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::ConnectionPointActivation>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_connectionPointActivations->includes(valueToAdd)))
								{
									_connectionPointActivations->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'connectionPointActivations'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'connectionPointActivations'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_DOACTIVITYCONTEXTOBJECT:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject> _doActivityContextObject = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::DoActivityContextObject>(eObject);
					if(_doActivityContextObject)
					{
						setDoActivityContextObject(_doActivityContextObject); //3510
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'doActivityContextObject'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'doActivityContextObject'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISDOACTIVITYCOMPLETED:
		{
			try
			{
				bool _isDoActivityCompleted = newValue->get<bool>();
				setIsDoActivityCompleted(_isDoActivityCompleted); //357
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isDoActivityCompleted'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISENTRYCOMPLETED:
		{
			try
			{
				bool _isEntryCompleted = newValue->get<bool>();
				setIsEntryCompleted(_isEntryCompleted); //358
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isEntryCompleted'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_ISEXITCOMPLETED:
		{
			try
			{
				bool _isExitCompleted = newValue->get<bool>();
				setIsExitCompleted(_isExitCompleted); //359
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isExitCompleted'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEACTIVATION_ATTRIBUTE_REGIONACTIVATIONS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>>& _regionActivations = getRegionActivations();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> valueToAdd = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_regionActivations->includes(valueToAdd)))
								{
									_regionActivations->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'regionActivations'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'regionActivations'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return VertexActivationImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> StateActivationImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::StateActivation::canDefer(fUML::Semantics::CommonBehavior::EventOccurrence) : bool: 2789139276
		case StateMachinesPackage::STATEACTIVATION_OPERATION_CANDEFER_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'canDefer'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'canDefer'!")
					return nullptr;
				}
			}
		
			result = eAny(this->canDefer(incoming_param_eventOccurrence), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::defer(fUML::Semantics::CommonBehavior::EventOccurrence): 4224449580
		case StateMachinesPackage::STATEACTIVATION_OPERATION_DEFER_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'defer'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'defer'!")
					return nullptr;
				}
			}
		
			this->defer(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::enter(PSSM::Semantics::StateMachines::TransitionActivation, fUML::Semantics::CommonBehavior::EventOccurrence, PSSM::Semantics::StateMachines::RegionActivation): 2281369893
		case StateMachinesPackage::STATEACTIVATION_OPERATION_ENTER_TRANSITIONACTIVATION_REGIONACTIVATION:
		{
			//Retrieve input parameter 'enteringTransition'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation> incoming_param_enteringTransition;
			Bag<Any>::const_iterator incoming_param_enteringTransition_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_enteringTransition_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_enteringTransition = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::TransitionActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'enteringTransition'. Failed to invoke operation 'enter'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'enteringTransition'. Failed to invoke operation 'enter'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'eventOccurrence'
			//parameter 1
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'enter'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'enter'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'leastCommonAncestor'
			//parameter 2
			std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> incoming_param_leastCommonAncestor;
			Bag<Any>::const_iterator incoming_param_leastCommonAncestor_arguments_citer = std::next(arguments->begin(), 2);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_leastCommonAncestor_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_leastCommonAncestor = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'leastCommonAncestor'. Failed to invoke operation 'enter'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'leastCommonAncestor'. Failed to invoke operation 'enter'!")
					return nullptr;
				}
			}
		
			this->enter(incoming_param_enteringTransition,incoming_param_eventOccurrence,incoming_param_leastCommonAncestor);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::enterRegions(PSSM::Semantics::StateMachines::TransitionActivation, fUML::Semantics::CommonBehavior::EventOccurrence): 1250090279
		case StateMachinesPackage::STATEACTIVATION_OPERATION_ENTERREGIONS_TRANSITIONACTIVATION_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'enteringTransition'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation> incoming_param_enteringTransition;
			Bag<Any>::const_iterator incoming_param_enteringTransition_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_enteringTransition_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_enteringTransition = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::TransitionActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'enteringTransition'. Failed to invoke operation 'enterRegions'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'enteringTransition'. Failed to invoke operation 'enterRegions'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'eventOccurrence'
			//parameter 1
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'enterRegions'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'enterRegions'!")
					return nullptr;
				}
			}
		
			this->enterRegions(incoming_param_enteringTransition,incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::exit(PSSM::Semantics::StateMachines::TransitionActivation, fUML::Semantics::CommonBehavior::EventOccurrence, PSSM::Semantics::StateMachines::RegionActivation): 2035618913
		case StateMachinesPackage::STATEACTIVATION_OPERATION_EXIT_TRANSITIONACTIVATION_REGIONACTIVATION:
		{
			//Retrieve input parameter 'exitingTransition'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation> incoming_param_exitingTransition;
			Bag<Any>::const_iterator incoming_param_exitingTransition_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_exitingTransition_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_exitingTransition = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::TransitionActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'exitingTransition'. Failed to invoke operation 'exit'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'exitingTransition'. Failed to invoke operation 'exit'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'eventOccurrence'
			//parameter 1
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'exit'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'exit'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'leastCommonAncestor'
			//parameter 2
			std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> incoming_param_leastCommonAncestor;
			Bag<Any>::const_iterator incoming_param_leastCommonAncestor_arguments_citer = std::next(arguments->begin(), 2);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_leastCommonAncestor_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_leastCommonAncestor = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::RegionActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'leastCommonAncestor'. Failed to invoke operation 'exit'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'leastCommonAncestor'. Failed to invoke operation 'exit'!")
					return nullptr;
				}
			}
		
			this->exit(incoming_param_exitingTransition,incoming_param_eventOccurrence,incoming_param_leastCommonAncestor);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getConnectionPointActivation() : PSSM::Semantics::StateMachines::ConnectionPointActivation[*]: 2311985214
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETCONNECTIONPOINTACTIVATION:
		{
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::ConnectionPointActivation>> resultList = this->getConnectionPointActivation();
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::CONNECTIONPOINTACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getConnectionPointActivation(uml::Vertex) : PSSM::Semantics::StateMachines::ConnectionPointActivation: 547341700
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETCONNECTIONPOINTACTIVATION_VERTEX:
		{
			//Retrieve input parameter 'vertex'
			//parameter 0
			std::shared_ptr<uml::Vertex> incoming_param_vertex;
			Bag<Any>::const_iterator incoming_param_vertex_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_vertex_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_vertex = std::dynamic_pointer_cast<uml::Vertex>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'vertex'. Failed to invoke operation 'getConnectionPointActivation'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'vertex'. Failed to invoke operation 'getConnectionPointActivation'!")
					return nullptr;
				}
			}
		
			result = eEcoreAny(this->getConnectionPointActivation(incoming_param_vertex), PSSM::Semantics::StateMachines::StateMachinesPackage::CONNECTIONPOINTACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getDoActivity() : uml::Behavior: 4226202519
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETDOACTIVITY:
		{
			result = eEcoreAny(this->getDoActivity(), uml::umlPackage::BEHAVIOR_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getEntry() : uml::Behavior: 3191084329
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETENTRY:
		{
			result = eEcoreAny(this->getEntry(), uml::umlPackage::BEHAVIOR_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getExit() : uml::Behavior: 3548364997
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETEXIT:
		{
			result = eEcoreAny(this->getExit(), uml::umlPackage::BEHAVIOR_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getFireableTransitions(fUML::Semantics::CommonBehavior::EventOccurrence) : PSSM::Semantics::StateMachines::TransitionActivation[*]: 3980114190
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETFIREABLETRANSITIONS_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'getFireableTransitions'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'getFireableTransitions'!")
					return nullptr;
				}
			}
		
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> resultList = this->getFireableTransitions(incoming_param_eventOccurrence);
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::TRANSITIONACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::getRegionActivation() : PSSM::Semantics::StateMachines::RegionActivation[*]: 2594219842
		case StateMachinesPackage::STATEACTIVATION_OPERATION_GETREGIONACTIVATION:
		{
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::RegionActivation>> resultList = this->getRegionActivation();
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::REGIONACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::hasCompleted() : bool: 2755482
		case StateMachinesPackage::STATEACTIVATION_OPERATION_HASCOMPLETED:
		{
			result = eAny(this->hasCompleted(), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::notifyCompletion(): 766766718
		case StateMachinesPackage::STATEACTIVATION_OPERATION_NOTIFYCOMPLETION:
		{
			this->notifyCompletion();
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::releaseDeferredEvents(): 172993166
		case StateMachinesPackage::STATEACTIVATION_OPERATION_RELEASEDEFERREDEVENTS:
		{
			this->releaseDeferredEvents();
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::tryExecuteEntry(fUML::Semantics::CommonBehavior::EventOccurrence): 1254837562
		case StateMachinesPackage::STATEACTIVATION_OPERATION_TRYEXECUTEENTRY_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryExecuteEntry'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryExecuteEntry'!")
					return nullptr;
				}
			}
		
			this->tryExecuteEntry(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::tryExecuteExit(fUML::Semantics::CommonBehavior::EventOccurrence): 4200303626
		case StateMachinesPackage::STATEACTIVATION_OPERATION_TRYEXECUTEEXIT_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryExecuteExit'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryExecuteExit'!")
					return nullptr;
				}
			}
		
			this->tryExecuteExit(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::StateActivation::tryInvokeDoActivity(fUML::Semantics::CommonBehavior::EventOccurrence): 2571062497
		case StateMachinesPackage::STATEACTIVATION_OPERATION_TRYINVOKEDOACTIVITY_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryInvokeDoActivity'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'tryInvokeDoActivity'!")
					return nullptr;
				}
			}
		
			this->tryInvokeDoActivity(incoming_param_eventOccurrence);
			break;
		}

		default:
		{
			// call superTypes
			result = VertexActivationImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::StateActivation> StateActivationImpl::getThisStateActivationPtr() const
{
	return m_thisStateActivationPtr.lock();
}
void StateActivationImpl::setThisStateActivationPtr(std::weak_ptr<PSSM::Semantics::StateMachines::StateActivation> thisStateActivationPtr)
{
	m_thisStateActivationPtr = thisStateActivationPtr;
	setThisVertexActivationPtr(thisStateActivationPtr);
}


