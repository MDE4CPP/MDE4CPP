[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModelExecutorImplementationHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]


[template public generateModelExecutorImplementationHeader(aPackage : Package)
{
upperName : String = aPackage.getPackageName().sanitize(); 
originalName : String = aPackage.generateNamespacePath(false);
}]
[file (originalName.concat('Exec/impl/') + upperName.concat('ExecutorImpl.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'ExecutorImpl')/]

#include "../[upperName/]Executor.hpp"
#include "fUML/Semantics/Loci/impl/ExecutorImpl.hpp"
//#include "PSCS/Semantics/Loci/impl/CS_ExecutorImpl.hpp"

//Forward Declaration for used types
namespace uml
{
	class Activity;
	class OpaqueBehavior;
}

namespace fUML::Semantics::Activities 
{
	class ActivityExecution;
}

namespace [aPackage.generateNamespace(false)/] 
{
	class [upperName/]ExecutorImpl :virtual public /*PSCS::Semantics::Loci::CS_ExecutorImpl*/ fUML::Semantics::Loci::ExecutorImpl, virtual public [upperName/]Executor
	{
		private:    
			[upperName/]ExecutorImpl& operator=([upperName/]ExecutorImpl const&) = delete;
			std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> invokeOpaqueBehavior(const std::shared_ptr<uml::OpaqueBehavior>&, const std::shared_ptr<uml::Element>&, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>&);

		public:
			[upperName/]ExecutorImpl();
			virtual ~[upperName/]ExecutorImpl();
			
			/*!
			 */ 
			virtual std::shared_ptr<Any> evaluate(const std::shared_ptr<uml::ValueSpecification>&);
			virtual std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> execute(const std::shared_ptr<uml::Behavior>&, const std::shared_ptr<uml::Element>&, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>&);
			virtual void setThisExecutorPtr(std::weak_ptr</*PSCS::Semantics::Loci::CS_Executor*/fUML::Semantics::Loci::Executor>);
	};
}
[endGuard(aPackage,'ExecutorImpl')/]
[/file]
[/template]