//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef UMLTESTS_TESTSUITETIMEHELPER_HPP
#define UMLTESTS_TESTSUITETIMEHELPER_HPP

#include <chrono>

class TestSuiteTimeHelper {
	private:
		static std::chrono::time_point<std::chrono::high_resolution_clock> _TimeAtTestBegin;
		static std::chrono::time_point<std::chrono::high_resolution_clock> _TimeAtTestEnd;

	public:
		static std::chrono::time_point<std::chrono::high_resolution_clock> GetCurrentTime() {
			return std::chrono::high_resolution_clock::now();
		}

		static void SetTimeAtTestBegin() {
			_TimeAtTestBegin = GetCurrentTime();
		}

		static void SetTimeAtTestEnd() {
			_TimeAtTestEnd = GetCurrentTime();
		}

		static double GetTestRuntimeInMS() {
			return GetTimeDifferenceInMlS( _TimeAtTestBegin, _TimeAtTestEnd ).count();
		}

		static std::chrono::duration<double, std::nano> GetTimeDifferenceInNS( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
				std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {
			return t2 - t1;
		}

		static std::chrono::duration<double, std::micro> GetTimeDifferenceInMcS( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
				std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {
			return t2 - t1;
		}

		static std::chrono::duration<double, std::milli> GetTimeDifferenceInMlS( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
				std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {
			return t2 - t1;
		}

		static std::chrono::duration<double> GetTimeDifferenceInS( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
				std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {
			return t2 - t1;
		}
};

#endif /* end of include guard: UMLTESTS_TESTSUITETIMEHELPER_HPP */
