[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClassifierObjectHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::generateClassifierObjectSource /]
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateClassifierObjectHeader(aClassifier : Classifier, aPackage :Package) {
	className : String = objectClassName();
	pointerName : String = pointerName(aPackage);
}]
[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.hpp'), false, 'UTF-8')]
[startGuard(aClassifier,'Execution')/]

#include "fUML/Semantics/StructuredClassifiers/impl/ObjectImpl.hpp"

template <class T> 
class Bag;

namespace [aClassifier.getNearestPackage().myNamespaceName()/]
{
	class [aClassifier.name.toUpperFirst()/];
}

namespace [aPackage.name/] 
{
	class [className/] : virtual public fUML::Semantics::StructuredClassifiers::ObjectImpl
	{
		public:
		    //constructors
		    [className/]([className/] &obj);
		    [className/](std::shared_ptr<[pointerName/]>);
		 	[className/]();
		    //destructor
		    virtual ~[className/]();
		
		    virtual std::shared_ptr<ecore::EObject> copy();
			
			virtual std::shared_ptr<[pointerName/]> getUmlValue() const;
			virtual void setUmlValue(std::shared_ptr<[pointerName/]>);
			virtual void setThis[className/]Ptr(std::weak_ptr<[className/]> thisObjectPtr);
[if (aPackage.getStructuralFeaturesFromRSTVA(aClassifier)->size() > 0)]
			virtual void removeValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<fUML::Semantics::Values::Value> values);
[/if]
[if (aPackage.getStructuralFeaturesFromRSTA(aClassifier)->size() > 0)]
			virtual std::shared_ptr<Bag<fUML::Semantics::Values::Value>> getValues(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues);
[/if]
[if (aPackage.getStructuralFeaturesFromASTVA(aClassifier)->size() > 0)]
			virtual void setFeatureValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::Values::Value>> value, int position);
[/if]
		
		protected:
			std::shared_ptr<[pointerName/]> m_umlValue = nullptr;
	};
}
[endGuard(aClassifier,'Object')/]
[/file]
[/template]