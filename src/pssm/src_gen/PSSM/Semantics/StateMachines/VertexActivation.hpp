//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSSM_SEMANTICS_STATEMACHINES_VERTEXACTIVATION_HPP
#define PSSM_SEMANTICS_STATEMACHINES_VERTEXACTIVATION_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSSM
{
	class PSSMFactory;
}

//Forward Declaration for used types 
namespace fUML::Semantics::CommonBehavior 
{
	class EventOccurrence;
}
namespace PSSM::Semantics::StateMachines 
{
	class RegionActivation;
	class TransitionActivation;
}
namespace uml 
{
	class NamedElement;
	class Vertex;
}

// namespace macro header include
#include "PSSM/PSSM.hpp"

// base class includes
#include "PSSM/Semantics/StateMachines/StateMachineSemanticVisitor.hpp"

// enum includes
#include "PSSM/Semantics/StateMachines/StateMetadata.hpp"
#include "PSSM/Semantics/StateMachines/TransitionMetadata.hpp"



//*********************************
namespace PSSM::Semantics::StateMachines 
{
	
	class PSSM_API VertexActivation : virtual public StateMachineSemanticVisitor
	{
		public:
 			VertexActivation(const VertexActivation &) {}

		protected:
			VertexActivation(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~VertexActivation() {}

			//*********************************
			// Operations
			//*********************************
			virtual void addIncomingTransition(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& transitionActivation) = 0;
			virtual void addOutgoingTransition(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& transitionActivation) = 0;
			virtual bool canPropagateExecution(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor) = 0;
			virtual void enter(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor) = 0;
			virtual void exit(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& exitingTransition, const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence, const std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation>& leastCommonAncestor) = 0;
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> getAscendingHierarchy() = 0;
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> getIncomingTransitions() = 0;
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getLeastCommonAncestor(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& vertexActivation) = 0;
			virtual std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> getOutgoingTransitions() = 0;
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getOwningRegionActivation() = 0;
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getParentVertexActivation() = 0;
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::RegionActivation> getRegionActivation(const std::shared_ptr<fUML::Semantics::Loci::SemanticVisitor>& semanticVisitor) = 0;
			
			virtual std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> getVertexActivation(const std::shared_ptr<uml::Vertex>& vertex) = 0;
			virtual bool isActive() = 0;
			virtual bool isEnterable(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& enteringTransition, bool staticCheck) = 0;
			virtual bool isExitable(const std::shared_ptr<PSSM::Semantics::StateMachines::TransitionActivation>& exitingTransition, bool staticCheck) = 0;
			
			virtual void tagIncomingTransition(PSSM::Semantics::StateMachines::TransitionMetadata status, bool staticCheck) = 0;
			virtual void tagOutgoingTransition(PSSM::Semantics::StateMachines::TransitionMetadata status, bool staticCheck) = 0;
			virtual void terminate() = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual PSSM::Semantics::StateMachines::StateMetadata getStatus() const = 0;
			virtual void setStatus (PSSM::Semantics::StateMachines::StateMetadata _status)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>>& getIncomingTransitionActivations() const = 0;
			virtual const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>>& getOutgoingTransitionActivations() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			PSSM::Semantics::StateMachines::StateMetadata m_status= PSSM::Semantics::StateMachines::StateMetadata::IDLE;
			
			//*********************************
			// Reference Members
			//*********************************
			mutable std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> m_incomingTransitionActivations;
			mutable std::shared_ptr<Bag<PSSM::Semantics::StateMachines::TransitionActivation>> m_outgoingTransitionActivations;
	};
}
#endif /* end of include guard: PSSM_SEMANTICS_STATEMACHINES_VERTEXACTIVATION_HPP */
