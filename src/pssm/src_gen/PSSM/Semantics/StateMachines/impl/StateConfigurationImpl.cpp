
#include "PSSM/Semantics/StateMachines/impl/StateConfigurationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "PSSM/Semantics/StateMachines/StateMachinesFactory.hpp"
#include "PSSM/Semantics/StateMachines/StateConfiguration.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineConfiguration.hpp"
#include "PSSM/Semantics/StateMachines/VertexActivation.hpp"
//Factories and Package includes
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "PSSM/PSSMPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
StateConfigurationImpl::StateConfigurationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

StateConfigurationImpl::~StateConfigurationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete StateConfiguration "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


StateConfigurationImpl::StateConfigurationImpl(const StateConfigurationImpl & obj): StateConfigurationImpl()
{
	*this = obj;
}

StateConfigurationImpl& StateConfigurationImpl::operator=(const StateConfigurationImpl & obj)
{
	//call overloaded =Operator for each base class
	ecore::EModelElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of StateConfiguration 
	 * which is generated by the compiler (as StateConfiguration is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//StateConfiguration::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy StateConfiguration "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_level = obj.getLevel();

	//copy references with no containment (soft copy)
	m_completeConfiguration  = obj.getCompleteConfiguration();
	m_parent  = obj.getParent();
	m_vertexActivation  = obj.getVertexActivation();
	//Clone references with containment (deep copy)
	//clone reference 'children'
	const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::StateConfiguration>>& childrenList = obj.getChildren();
	if(childrenList)
	{
		m_children.reset(new Bag<PSSM::Semantics::StateMachines::StateConfiguration>());
		
		
		for(const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& childrenindexElem: *childrenList) 
		{
			const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& temp = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>((childrenindexElem)->copy());
			m_children->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for children.")
	}
	
	return *this;
}

std::shared_ptr<ecore::EObject> StateConfigurationImpl::copy() const
{
	std::shared_ptr<StateConfigurationImpl> element(new StateConfigurationImpl());
	*element =(*this);
	element->setThisStateConfigurationPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
bool StateConfigurationImpl::add(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation, const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>>& context)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Add the VertexActivation as a new child to the tree structure of StateConfigurations
	bool added = false;
	if (!context->empty())
	{
		auto currentVertexActivation = context->at(context->size()-1);
		for (const auto& child : *(this->m_children))
		{
			if (child->getVertexActivation() == currentVertexActivation)
			{
				auto newContext = std::make_shared<Bag<PSSM::Semantics::StateMachines::VertexActivation>>(*context->copy());
				newContext->erase(currentVertexActivation);
				added = child->add(activation, newContext);
				break;
			}
		}
	}
	else
	{
		bool alreadyAdded = false;
		for (const auto& child : *(this->m_children))
		{
			if (child->getVertexActivation() == activation)
			{
				alreadyAdded = true;
				break;
			}
		}
		if (alreadyAdded)
		{
			auto newStateConfiguration = PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createStateConfiguration_as_children_in_StateConfiguration(this->getThisStateConfigurationPtr());
			newStateConfiguration->setVertexActivation(activation);
			newStateConfiguration->setCompleteConfiguration(this->m_completeConfiguration);
			newStateConfiguration->setLevel(this->m_level+1);
			newStateConfiguration->setParent(this->getThisStateConfigurationPtr());
			this->m_children->add(newStateConfiguration);
			added = true;
		}
	}
	return added;
	//end of body
}

bool StateConfigurationImpl::addChild(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->add(activation, this->getContext(activation));
	//end of body
}



std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> StateConfigurationImpl::getContext(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// The Context of a StateConfiguration is its own VertexActivation's hierarchy of parent VertexActivations
	// down to the closest VertexActivation which is that of an own child StateActivation.
	auto hierarchy = activation->getAscendingHierarchy();
	auto context = std::make_shared<Bag<PSSM::Semantics::StateMachines::VertexActivation>>(*hierarchy->copy());
	for (const auto& hierarchyVertex : *hierarchy) 
	{
		for (const auto& child : *(this->getChildren()))
		{
			if (child->getVertexActivation() != hierarchyVertex)
			{
				context->erase(child->getVertexActivation());
			}
			else return context;
		}
	}
	return context;
	//end of body
}





bool StateConfigurationImpl::isActive(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->m_vertexActivation == activation;
	//end of body
}

bool StateConfigurationImpl::remove(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation, const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>>& context)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Remove the given VertexActivation from the tree structure
	bool removed = false;
	if (!context->empty())
	{
		auto currentVertexActivation = context->at(context->size()-1);
		for (const auto& child : *(this->m_children))
		{
			if (child->getVertexActivation() == currentVertexActivation)
			{
				auto newContext = std::make_shared<Bag<PSSM::Semantics::StateMachines::VertexActivation>>(*context->copy());
				newContext->erase(currentVertexActivation);
				removed = child->remove(activation, newContext);
				break;
			}
		}
	}
	else
	{
		for (const auto& child : *(this->m_children))
		{
			if (child->getVertexActivation() == activation)
			{
				this->m_children->erase(child);
				removed = true;
				break;
			}
		}
	}
	return removed;
	//end of body
}

bool StateConfigurationImpl::removeChild(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->remove(activation, this->getContext(activation));
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute level */
int StateConfigurationImpl::getLevel() const 
{
	return m_level;
}
void StateConfigurationImpl::setLevel(int _level)
{
	m_level = _level;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference children */
const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::StateConfiguration>>& StateConfigurationImpl::getChildren() const
{
	if(m_children == nullptr)
	{
		m_children.reset(new Bag<PSSM::Semantics::StateMachines::StateConfiguration>());
		
		
	}
    return m_children;
}

/* Getter & Setter for reference completeConfiguration */
const std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration>& StateConfigurationImpl::getCompleteConfiguration() const
{
    return m_completeConfiguration;
}
void StateConfigurationImpl::setCompleteConfiguration(const std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration>& _completeConfiguration)
{
    m_completeConfiguration = _completeConfiguration;
	
}

/* Getter & Setter for reference parent */
const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& StateConfigurationImpl::getParent() const
{
    return m_parent;
}
void StateConfigurationImpl::setParent(const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& _parent)
{
    m_parent = _parent;
	
}

/* Getter & Setter for reference vertexActivation */
const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& StateConfigurationImpl::getVertexActivation() const
{
    return m_vertexActivation;
}
void StateConfigurationImpl::setVertexActivation(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& _vertexActivation)
{
    m_vertexActivation = _vertexActivation;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> StateConfigurationImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void StateConfigurationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void StateConfigurationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("level");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'int'
			int value;
			std::istringstream(iter->second) >> value;
			this->setLevel(value);
		}
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("completeConfiguration");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("completeConfiguration")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("parent");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("parent")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("vertexActivation");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("vertexActivation")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void StateConfigurationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("children") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "PSSM::Semantics::StateMachines::StateConfiguration";
			}
			else
			{
				if (std::string::npos == typeName.find("PSSM::Semantics::StateMachines/]"))
				{
					typeName = "PSSM::Semantics::StateMachines::"+typeName;
				}
			}
			std::shared_ptr<ecore::ecoreFactory> modelFactory = ecore::ecoreFactory::eInstance();		
			std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> new_children = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(modelFactory->create(typeName, loadHandler->getCurrentObject(), PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_CHILDREN));
			if(new_children)
			{
				loadHandler->handleChild(new_children);
				getChildren()->push_back(new_children);
			} 

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
}

void StateConfigurationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_COMPLETECONFIGURATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration> _completeConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineConfiguration>( references.front() );
				setCompleteConfiguration(_completeConfiguration);
			}
			
			return;
		}

		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_PARENT:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> _parent = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>( references.front() );
				setParent(_parent);
			}
			
			return;
		}

		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_VERTEXACTIVATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _vertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>( references.front() );
				setVertexActivation(_vertexActivation);
			}
			
			return;
		}
	}
	ecore::EObjectImpl::resolveReferences(featureID, references);
}

void StateConfigurationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void StateConfigurationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
		// Add attributes
          if ( this->eIsSet(package->getStateConfiguration_Attribute_level()) )
          {
			saveHandler->addAttribute("level", this->getLevel());
          }
	// Add references
	if ( this->eIsSet(package->getStateConfiguration_Attribute_completeConfiguration()) )
	{
		saveHandler->addReference(this->getCompleteConfiguration(), "completeConfiguration", getCompleteConfiguration()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateMachineConfiguration_Class()); 
	}
	if ( this->eIsSet(package->getStateConfiguration_Attribute_parent()) )
	{
		saveHandler->addReference(this->getParent(), "parent", getParent()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateConfiguration_Class()); 
	}
	if ( this->eIsSet(package->getStateConfiguration_Attribute_vertexActivation()) )
	{
		saveHandler->addReference(this->getVertexActivation(), "vertexActivation", getVertexActivation()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getVertexActivation_Class()); 
	}
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'children'
	    if ( this->eIsSet(package->getStateConfiguration_Attribute_children()) )
	    {
		saveHandler->addReferences<PSSM::Semantics::StateMachines::StateConfiguration>("children", this->getChildren());
	    }
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& StateConfigurationImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateConfiguration_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> StateConfigurationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_CHILDREN:
			return eEcoreContainerAny(getChildren(),PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_CLASS); //362
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_COMPLETECONFIGURATION:
			return eAny(getCompleteConfiguration(),PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_CLASS,false); //363
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_LEVEL:
			return eAny(getLevel(),ecore::ecorePackage::EINT_CLASS,false); //360
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_PARENT:
			return eAny(getParent(),PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_CLASS,false); //364
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_VERTEXACTIVATION:
			return eAny(getVertexActivation(),PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS,false); //361
	}
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
}

bool StateConfigurationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_CHILDREN:
			return getChildren() != nullptr; //362
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_COMPLETECONFIGURATION:
			return getCompleteConfiguration() != nullptr; //363
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_LEVEL:
			return getLevel() != 0; //360
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_PARENT:
			return getParent() != nullptr; //364
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_VERTEXACTIVATION:
			return getVertexActivation() != nullptr; //361
	}
	return ecore::EObjectImpl::internalEIsSet(featureID);
}

bool StateConfigurationImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_CHILDREN:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<PSSM::Semantics::StateMachines::StateConfiguration>>& _children = getChildren();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> valueToAdd = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_children->includes(valueToAdd)))
								{
									_children->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'children'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'children'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_COMPLETECONFIGURATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration> _completeConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineConfiguration>(eObject);
					if(_completeConfiguration)
					{
						setCompleteConfiguration(_completeConfiguration); //363
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'completeConfiguration'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'completeConfiguration'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_LEVEL:
		{
			try
			{
				int _level = newValue->get<int>();
				setLevel(_level); //360
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'level'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_PARENT:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> _parent = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(eObject);
					if(_parent)
					{
						setParent(_parent); //364
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'parent'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'parent'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_ATTRIBUTE_VERTEXACTIVATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _vertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(eObject);
					if(_vertexActivation)
					{
						setVertexActivation(_vertexActivation); //361
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'vertexActivation'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'vertexActivation'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ecore::EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> StateConfigurationImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::StateConfiguration::add(PSSM::Semantics::StateMachines::VertexActivation, PSSM::Semantics::StateMachines::VertexActivation[*]) : bool: 1302841860
		case StateMachinesPackage::STATECONFIGURATION_OPERATION_ADD_VERTEXACTIVATION_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'add'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'add'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> incoming_param_context;
			Bag<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>((*incoming_param_context_arguments_citer));
				if(ecoreContainerAny)
				{
					try
					{
						std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
				
						if(eObjectList)
						{
							incoming_param_context.reset();
							for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
							{
								std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _temp = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(anEObject);
								incoming_param_context->add(_temp);
							}
						}
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreContainerAny' for parameter 'context'. Failed to invoke operation 'add'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreContainerAny' for parameter 'context'. Failed to invoke operation 'add'!")
					return nullptr;
				}
			}
		
			result = eAny(this->add(incoming_param_activation,incoming_param_context), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateConfiguration::addChild(PSSM::Semantics::StateMachines::VertexActivation) : bool: 140837363
		case StateMachinesPackage::STATECONFIGURATION_OPERATION_ADDCHILD_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'addChild'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'addChild'!")
					return nullptr;
				}
			}
		
			result = eAny(this->addChild(incoming_param_activation), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateConfiguration::getContext(PSSM::Semantics::StateMachines::VertexActivation) : PSSM::Semantics::StateMachines::VertexActivation[*]: 2582060224
		case StateMachinesPackage::STATECONFIGURATION_OPERATION_GETCONTEXT_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'getContext'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'getContext'!")
					return nullptr;
				}
			}
		
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> resultList = this->getContext(incoming_param_activation);
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateConfiguration::isActive(PSSM::Semantics::StateMachines::VertexActivation) : bool: 1005078878
		case StateMachinesPackage::STATECONFIGURATION_OPERATION_ISACTIVE_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'isActive'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'isActive'!")
					return nullptr;
				}
			}
		
			result = eAny(this->isActive(incoming_param_activation), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateConfiguration::remove(PSSM::Semantics::StateMachines::VertexActivation, PSSM::Semantics::StateMachines::VertexActivation[*]) : bool: 272269553
		case StateMachinesPackage::STATECONFIGURATION_OPERATION_REMOVE_VERTEXACTIVATION_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'remove'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'remove'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> incoming_param_context;
			Bag<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>((*incoming_param_context_arguments_citer));
				if(ecoreContainerAny)
				{
					try
					{
						std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
				
						if(eObjectList)
						{
							incoming_param_context.reset();
							for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
							{
								std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> _temp = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(anEObject);
								incoming_param_context->add(_temp);
							}
						}
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreContainerAny' for parameter 'context'. Failed to invoke operation 'remove'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreContainerAny' for parameter 'context'. Failed to invoke operation 'remove'!")
					return nullptr;
				}
			}
		
			result = eAny(this->remove(incoming_param_activation,incoming_param_context), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateConfiguration::removeChild(PSSM::Semantics::StateMachines::VertexActivation) : bool: 1516485268
		case StateMachinesPackage::STATECONFIGURATION_OPERATION_REMOVECHILD_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'removeChild'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'removeChild'!")
					return nullptr;
				}
			}
		
			result = eAny(this->removeChild(incoming_param_activation), 0, false);
			break;
		}

		default:
		{
			// call superTypes
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> StateConfigurationImpl::getThisStateConfigurationPtr() const
{
	return m_thisStateConfigurationPtr.lock();
}
void StateConfigurationImpl::setThisStateConfigurationPtr(std::weak_ptr<PSSM::Semantics::StateMachines::StateConfiguration> thisStateConfigurationPtr)
{
	m_thisStateConfigurationPtr = thisStateConfigurationPtr;
}


