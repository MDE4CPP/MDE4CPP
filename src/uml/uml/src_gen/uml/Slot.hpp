//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_SLOT_HPP
#define UML_SLOT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class InstanceSpecification;
	class StructuralFeature;
	class ValueSpecification;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Element.hpp"




//*********************************
namespace uml 
{
	/*!
	A Slot designates that an entity modeled by an InstanceSpecification has a value or values for a specific StructuralFeature.
	<p>From package UML::Classification.</p>
	*/
	
	class UML_API Slot : virtual public Element
	{
		public:
 			Slot(const Slot &) {}

		protected:
			Slot(){}
			//Additional constructors for the containments back reference
			Slot(std::weak_ptr<uml::Element> par_owner);

			//Additional constructors for the containments back reference
			Slot(std::weak_ptr<uml::InstanceSpecification> par_owningInstance);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Slot() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The StructuralFeature that specifies the values that may be held by the Slot.
			<p>From package UML::Classification.</p>
			*/
			
			virtual std::shared_ptr<uml::StructuralFeature> getDefiningFeature() const = 0;
			/*!
			The StructuralFeature that specifies the values that may be held by the Slot.
			<p>From package UML::Classification.</p>
			*/
			
			virtual void setDefiningFeature(std::shared_ptr<uml::StructuralFeature>) = 0;
			/*!
			The InstanceSpecification that owns this Slot.
			<p>From package UML::Classification.</p>
			*/
			
			virtual std::weak_ptr<uml::InstanceSpecification> getOwningInstance() const = 0;
			/*!
			The InstanceSpecification that owns this Slot.
			<p>From package UML::Classification.</p>
			*/
			
			virtual void setOwningInstance(std::weak_ptr<uml::InstanceSpecification>) = 0;
			/*!
			The value or values held by the Slot.
			<p>From package UML::Classification.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::ValueSpecification, uml::Element>> getValue() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The StructuralFeature that specifies the values that may be held by the Slot.
			<p>From package UML::Classification.</p>
			*/
			
			std::shared_ptr<uml::StructuralFeature> m_definingFeature;
			/*!
			The InstanceSpecification that owns this Slot.
			<p>From package UML::Classification.</p>
			*/
			
			std::weak_ptr<uml::InstanceSpecification> m_owningInstance;
			/*!
			The value or values held by the Slot.
			<p>From package UML::Classification.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::ValueSpecification, uml::Element>> m_value;
	};
}
#endif /* end of include guard: UML_SLOT_HPP */
