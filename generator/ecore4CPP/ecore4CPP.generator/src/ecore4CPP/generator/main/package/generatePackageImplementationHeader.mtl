[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generatePackageImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute /]
[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateDatatype /]
[import ecore4CPP::generator::main::generateOperation /]
[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::package::generatePackageHelper /]

[template public generatePackageImplHeader(anEPackage : EPackage)]
[file (anEPackage.generateNamespacePath().concat('/impl/').concat(anEPackage.name).concat('PackageImpl.hpp'), false, 'UTF-8')]
[startGuard(anEPackage,'PackageImpl')/]

// namespace macro header include
#include "[anEPackage.getRootPackage().name/]/[anEPackage.getRootPackage().name/].hpp"

[comment  Generate Includes for the Factory/]
#include "ecore/ecorePackage.hpp"
#include "ecore/impl/EPackageImpl.hpp"

[if (not(anEPackage.name = 'ecore') )]
#include "[anEPackage.getRootPackage().name/]/[anEPackage.getNamespacePathWithoutRoot()/][anEPackage.name.concat('Package')/].hpp" 
[/if]


namespace [anEPackage.generateNamespaceDefinition()/] 
{
[for (elements : EClass| anEPackage.eClassifiers->selectByKind(EClass)->reject(doNotGenerateEClassifier())->sortedBy(name)) separator ('\n')]
	class [elements.name/];[/for]
[for (aSubPackage : EPackage| anEPackage.eSubpackages->selectByKind(EPackage)->sortedBy(name)) separator ('\n')]
	namespace [aSubPackage.name/] 
	{
		class [aSubPackage.name/]Package;
	}
[/for]
}

namespace ecore
{
	class ecoreFactory;
}

namespace [anEPackage.generateNamespaceDefinition()/]
{
	class [anEPackage.getRootPackage().name.toUpper()/]_API [anEPackage.name.concat('PackageImpl')/] : public [anEPackage.needNamespace('EPackageImpl')/] ,virtual public [anEPackage.name.concat('Package')/]
	{
		private:    
			[anEPackage.name.concat('PackageImpl')/]([anEPackage.name.concat('PackageImpl')/] const&) = delete;
			[anEPackage.name.concat('PackageImpl')/]& operator=([anEPackage.name.concat('PackageImpl')/] const&) = delete;

		protected:
			[anEPackage.name.concat('PackageImpl')/]();

		public:
			virtual ~[anEPackage.name.concat('PackageImpl')/]();

[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->reject(doNotGenerateEClassifier())->asOrderedSet()->sortedBy(name)) separator ('\n')]
			// Begin Class [aClass.name.toUpperFirst()/]
			//Class and Feature Getter
			[aClass.generateModelElementGetter(anEPackage, true)/]
			[aClass.eAttributes->reject(doNotGenerateEStructuralFeature())->sortedBy(name).generateModelElementGetter(anEPackage, true)/]
			[aClass.eReferences->reject(doNotGenerateEStructuralFeature())->sortedBy(name).generateModelElementGetter(anEPackage, true)/]
			[aClass.eOperations->reject(doNotGenerateEOperation())->sortedBy(name).generateModelElementGetter(anEPackage, true)/]
			// End Class [aClass.name.toUpperFirst()/]
[/for]

			[anEPackage.eClassifiers->selectByKind(EDataType)->reject(doNotGenerateEClassifier()).generateModelElementGetter(anEPackage, true)/]
			// SubPackages Getters
			[anEPackage.eSubpackages->reject(doNotGenerateEPackage())->sortedBy(name).generateSubPackageGetter(true)/]

		private:
			[anEPackage.eClassifiers->selectByKind(EClass)->reject(doNotGenerateEClassifier())->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
			[anEPackage.eClassifiers->selectByKind(EDataType)->reject(doNotGenerateEClassifier())->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
			[anEPackage.eClassifiers->selectByKind(EClass).eAttributes->reject(doNotGenerateEStructuralFeature())->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
			[anEPackage.eClassifiers->selectByKind(EClass).eReferences->reject(doNotGenerateEStructuralFeature())->sortedBy(name).generatePrivatePackageMember(anEPackage)/]
			[anEPackage.eClassifiers->selectByKind(EClass).eOperations->reject(doNotGenerateEOperation())->sortedBy(name).generatePrivatePackageMember(anEPackage)/]

			friend class [anEPackage.name.concat('Package')/];

			static bool isInited;
			static [anEPackage.name.concat('Package')/]* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init(std::shared_ptr<ecore::EPackage> package);

		public:
			void createPackageContents(std::shared_ptr<ecore::EPackage> package);
			void initializePackageContents();

		private:
[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->reject(doNotGenerateEClassifier())->asOrderedSet()->sortedBy(name))]
			void create[aClass.name.toUpperFirst()/]Content(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
[/for]
			void createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);

[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->reject(doNotGenerateEClassifier())->asOrderedSet()->sortedBy(name))]
			void initialize[aClass.name.toUpperFirst()/]Content();
[/for]
			void initializePackageEDataTypes();



[if anEPackage.name.equalsIgnoreCase('ecore')]
	
	//prevent from hiding functions
	using EPackageImpl::getEAnnotation;
	using EPackageImpl::getEClassifier;
[/if]
	};
}
[endGuard(anEPackage,'PackageImpl')/]
[/file]
[/template]