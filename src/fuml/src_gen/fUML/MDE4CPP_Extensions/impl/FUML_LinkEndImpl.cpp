
#include "fUML/MDE4CPP_Extensions/impl/FUML_LinkEndImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>



#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsFactory.hpp"
#include "fUML/MDE4CPP_Extensions/FUML_Object.hpp"
#include "uml/Property.hpp"
//Factories and Package includes
#include "fUML/fUMLPackage.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace fUML::MDE4CPP_Extensions;

//*********************************
// Constructor / Destructor
//*********************************
FUML_LinkEndImpl::FUML_LinkEndImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

FUML_LinkEndImpl::~FUML_LinkEndImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete FUML_LinkEnd "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


FUML_LinkEndImpl::FUML_LinkEndImpl(const FUML_LinkEndImpl & obj): FUML_LinkEndImpl()
{
	*this = obj;
}

FUML_LinkEndImpl& FUML_LinkEndImpl::operator=(const FUML_LinkEndImpl & obj)
{
	//call overloaded =Operator for each base class
	ecore::EModelElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of FUML_LinkEnd 
	 * which is generated by the compiler (as FUML_LinkEnd is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//FUML_LinkEnd::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy FUML_LinkEnd "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_position = obj.getPosition();

	//copy references with no containment (soft copy)
	m_end  = obj.getEnd();
	m_endValue  = obj.getEndValue();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> FUML_LinkEndImpl::copy() const
{
	std::shared_ptr<FUML_LinkEndImpl> element(new FUML_LinkEndImpl());
	*element =(*this);
	element->setThisFUML_LinkEndPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute position */
int FUML_LinkEndImpl::getPosition() const 
{
	return m_position;
}
void FUML_LinkEndImpl::setPosition(int _position)
{
	m_position = _position;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference end */
const std::shared_ptr<uml::Property>& FUML_LinkEndImpl::getEnd() const
{
    return m_end;
}
void FUML_LinkEndImpl::setEnd(const std::shared_ptr<uml::Property>& _end)
{
    m_end = _end;
	
}

/* Getter & Setter for reference endValue */
const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& FUML_LinkEndImpl::getEndValue() const
{
    return m_endValue;
}
void FUML_LinkEndImpl::setEndValue(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& _endValue)
{
    m_endValue = _endValue;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> FUML_LinkEndImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void FUML_LinkEndImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get fUMLFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void FUML_LinkEndImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("position");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'int'
			int value;
			std::istringstream(iter->second) >> value;
			this->setPosition(value);
		}
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("end");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("end")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("endValue");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("endValue")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void FUML_LinkEndImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
}

void FUML_LinkEndImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_END:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::Property> _end = std::dynamic_pointer_cast<uml::Property>( references.front() );
				setEnd(_end);
			}
			
			return;
		}

		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_ENDVALUE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> _endValue = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_Object>( references.front() );
				setEndValue(_endValue);
			}
			
			return;
		}
	}
	ecore::EObjectImpl::resolveReferences(featureID, references);
}

void FUML_LinkEndImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void FUML_LinkEndImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage> package = fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance();
		// Add attributes
          if ( this->eIsSet(package->getFUML_LinkEnd_Attribute_position()) )
          {
			saveHandler->addAttribute("position", this->getPosition());
          }
	// Add references
	if ( this->eIsSet(package->getFUML_LinkEnd_Attribute_end()) )
	{
		saveHandler->addReference(this->getEnd(), "end", getEnd()->eClass() != uml::umlPackage::eInstance()->getProperty_Class()); 
	}
	if ( this->eIsSet(package->getFUML_LinkEnd_Attribute_endValue()) )
	{
		saveHandler->addReference(this->getEndValue(), "endValue", getEndValue()->eClass() != fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance()->getFUML_Object_Class()); 
	}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& FUML_LinkEndImpl::eStaticClass() const
{
	return fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance()->getFUML_LinkEnd_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> FUML_LinkEndImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_END:
			return eAny(getEnd(),uml::umlPackage::PROPERTY_CLASS,false); //551
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_ENDVALUE:
			return eAny(getEndValue(),fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_CLASS,false); //550
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_POSITION:
			return eAny(getPosition(),ecore::ecorePackage::EINT_CLASS,false); //552
	}
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
}

bool FUML_LinkEndImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_END:
			return getEnd() != nullptr; //551
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_ENDVALUE:
			return getEndValue() != nullptr; //550
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_POSITION:
			return getPosition() != 0; //552
	}
	return ecore::EObjectImpl::internalEIsSet(featureID);
}

bool FUML_LinkEndImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_END:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Property> _end = std::dynamic_pointer_cast<uml::Property>(eObject);
					if(_end)
					{
						setEnd(_end); //551
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'end'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'end'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_ENDVALUE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> _endValue = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_Object>(eObject);
					if(_endValue)
					{
						setEndValue(_endValue); //550
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'endValue'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'endValue'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_ATTRIBUTE_POSITION:
		{
			try
			{
				int _position = newValue->get<int>();
				setPosition(_position); //552
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'position'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ecore::EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> FUML_LinkEndImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> FUML_LinkEndImpl::getThisFUML_LinkEndPtr() const
{
	return m_thisFUML_LinkEndPtr.lock();
}
void FUML_LinkEndImpl::setThisFUML_LinkEndPtr(std::weak_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> thisFUML_LinkEndPtr)
{
	m_thisFUML_LinkEndPtr = thisFUML_LinkEndPtr;
}


