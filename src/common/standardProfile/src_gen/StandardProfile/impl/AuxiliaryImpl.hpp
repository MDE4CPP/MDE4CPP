//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef STANDARDPROFILE_AUXILIARY_AUXILIARYIMPL_HPP
#define STANDARDPROFILE_AUXILIARY_AUXILIARYIMPL_HPP

#include <functional>

//Model includes
#include "../Auxiliary.hpp"
#include "uml/impl/StereotypeImpl.hpp"
#include "uml/Property.hpp"

class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

namespace uml
{
	class Property;
}

//*********************************
namespace StandardProfile
{
	class AuxiliaryImpl : virtual public uml::StereotypeImpl, virtual public Auxiliary
	{
		public: 
			AuxiliaryImpl(const AuxiliaryImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			AuxiliaryImpl& operator=(AuxiliaryImpl const&) = delete;

		protected:
			friend class StandardProfileFactoryImpl;
			//constructor
			AuxiliaryImpl();
			virtual std::shared_ptr<Auxiliary> getThisAuxiliaryPtr();
			virtual void setThisAuxiliaryPtr(std::weak_ptr<Auxiliary> thisAuxiliaryPtr);


		public:

			//destructor
			virtual ~AuxiliaryImpl();

			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			virtual std::weak_ptr<uml::Class> getBase_Class() const ;
			virtual void setBase_Class (std::weak_ptr<uml::Class> _base_Class);
			

		protected:
			virtual std::shared_ptr<uml::Class> getMetaClass();

		public:
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			virtual Any get(std::shared_ptr<uml::Property> _property) const ;
			virtual void set(std::shared_ptr<uml::Property> _property, Any value) ;
			virtual void unset(std::shared_ptr<uml::Property> _property) ;
			
		
		private:
			std::weak_ptr<Auxiliary> m_thisAuxiliaryPtr;
			std::map<std::string,std::function<Any()>> m_getterMap;
			std::map<std::string,std::function<void(Any)>> m_setterMap;
			std::map<std::string,std::function<void()>> m_unsetterMap;
	};
}
#endif /* end of include guard: STANDARDPROFILE_AUXILIARY_AUXILIARYIMPL_HPP */
