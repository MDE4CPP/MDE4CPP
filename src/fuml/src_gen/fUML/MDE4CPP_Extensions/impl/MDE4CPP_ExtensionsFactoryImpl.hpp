//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_MDE4CPP_EXTENSIONSFACTORYIMPL_HPP
#define FUML_MDE4CPP_EXTENSIONSFACTORYIMPL_HPP

// namespace macro header include
#include "fUML/fUML.hpp"

#include "ecore/impl/EFactoryImpl.hpp"

#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsFactory.hpp"

namespace MDE4CPP_Extensions 
{	class FUML_Link;
	class FUML_LinkEnd;
	class FUML_Object;
	class FUML_SignalInstance;
}

namespace fUML::MDE4CPP_Extensions 
{
	class FUML_API MDE4CPP_ExtensionsFactoryImpl : virtual public ecore::EFactoryImpl , virtual public MDE4CPP_ExtensionsFactory 
	{
		private:    
			MDE4CPP_ExtensionsFactoryImpl(MDE4CPP_ExtensionsFactoryImpl const&) = delete;
			MDE4CPP_ExtensionsFactoryImpl& operator=(MDE4CPP_ExtensionsFactoryImpl const&) = delete;

		protected:
			friend class MDE4CPP_ExtensionsFactory;
			// Constructor
			MDE4CPP_ExtensionsFactoryImpl();

		public:
			virtual ~MDE4CPP_ExtensionsFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 virtual std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Link> createFUML_Link(const int metaElementID = MDE4CPP_ExtensionsPackage::FUML_LINK_CLASS) const ;
			 virtual std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> createFUML_LinkEnd(const int metaElementID = MDE4CPP_ExtensionsPackage::FUML_LINKEND_CLASS) const ;
			 //Add as contained object
			 virtual std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> createFUML_LinkEnd_as_linkEnds_in_FUML_Link(std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Link> par_FUML_Link, const int metaElementID = MDE4CPP_ExtensionsPackage::FUML_LINKEND_CLASS) const ;
			 

		private:
			static MDE4CPP_ExtensionsFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: FUML_MDE4CPP_EXTENSIONSFACTORYIMPL_HPP */
