[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModelExecutionFactoryImplementationHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::helpers::fUMLCollectionHelper /]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]


[template public generateModelExecutionFactoryImplementationHeader(aPackage : Package) 
{
upperName : String = aPackage.getPackageName().sanitize(); 
originalName : String = aPackage.generateNamespacePath(false);
}]
[file (originalName.concat('Exec/impl/') + upperName.concat('ExecutionFactoryImpl.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'ExecutionFactoryImpl')/]

#include "../[upperName/]ExecutionFactory.hpp"
#include "fUML/Semantics/Loci/impl/ExecutionFactoryImpl.hpp"
//#include "PSCS/Semantics/Loci/impl/CS_ExecutionFactoryImpl.hpp"

namespace fUML::Semantics::Activities 
{
	class ActivityExecution;
}

namespace [aPackage.generateNamespace(false)/] 
{
	class [upperName/]ExecutionFactoryImpl : virtual public/*PSCS::Semantics::Loci::CS_ExecutionFactoryImpl*/ fUML::Semantics::Loci::ExecutionFactoryImpl, virtual public [upperName/]ExecutionFactory
	{
		private:    
			[upperName/]ExecutionFactoryImpl& operator=([upperName/]ExecutionFactoryImpl const&) = delete;
			[for (anActivity : Activity | aPackage.collectActivitiesOwnedByPackage()->reject(isDoNotGenerateElement())) before('\t\t\t//Methods to create ActivityExecution Prototypes\n')]
			void create[anActivity.memberName().toUpperFirst()/]ExecutionPrototype();
			[comment]std::shared_ptr<fUML::Semantics::Activities::ActivityExecution> get[anActivity.memberName().toUpperFirst()/]ExecutionPrototype();[/comment]
			[/for]

		public:
			[upperName/]ExecutionFactoryImpl();
			virtual ~[upperName/]ExecutionFactoryImpl();
			
			/*!
			 */
			virtual std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> createExecution(std::shared_ptr<uml::Behavior>, std::shared_ptr<uml::Element>);
			virtual void setThisExecutionFactoryPtr(std::weak_ptr</*PSCS::Semantics::Loci::CS_ExecutionFactory*/fUML::Semantics::Loci::ExecutionFactory>);
	
		private:
			[for (anActivity : Activity | aPackage.collectActivitiesOwnedByPackage()->reject(isDoNotGenerateElement())) before('\t\t\t//ActivityExecution Prototypes\n')]
			std::shared_ptr<fUML::Semantics::Activities::ActivityExecution> m_[anActivity.memberName()/]ExecutionPrototype;
			[/for]
	};
}
[endGuard(aPackage,'ExecutionFactoryImpl')/]
[/file]
[/template]