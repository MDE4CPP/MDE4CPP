//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_DIRECTEDRELATIONSHIP_HPP
#define UML_DIRECTEDRELATIONSHIP_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class SubsetUnion;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Relationship.hpp"




//*********************************
namespace uml 
{
	/*!
	A DirectedRelationship represents a relationship between a collection of source model Elements and a collection of target model Elements.
	<p>From package UML::CommonStructure.</p>
	*/
	
	class UML_API DirectedRelationship : virtual public Relationship
	{
		public:
 			DirectedRelationship(const DirectedRelationship &) {}

		protected:
			DirectedRelationship(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~DirectedRelationship() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			
			

			//*********************************
			// Union Reference Getters
			//*********************************
			/*!
			Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<SubsetUnion<uml::Element, uml::Element>> getSource() const = 0;
			/*!
			Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<SubsetUnion<uml::Element, uml::Element>> getTarget() const = 0;

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			mutable std::shared_ptr<SubsetUnion<uml::Element, uml::Element>> m_source;
			/*!
			Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p>
			*/
			
			mutable std::shared_ptr<SubsetUnion<uml::Element, uml::Element>> m_target;
	};
}
#endif /* end of include guard: UML_DIRECTEDRELATIONSHIP_HPP */
