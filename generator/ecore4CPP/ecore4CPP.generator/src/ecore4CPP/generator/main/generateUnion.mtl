[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateUnion('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::validation::validation /]


[***###########################################################################################
 * Section for generating the declarations of Getter methods for EReference elements that are Unions in the generated class header files (interface as well as implementation)
*/]
[template public generateUnionGetterDeclaration(aUnionReference : EReference, impl : Boolean) post(trim())]
[if (aUnionReference.doNotGenerateEStructuralFeature())]
	[printInfo(aUnionReference.eStructuralFeatureNoGenerationMessage(), 4)/]
[else]
[aUnionReference._generateUnionGetterDeclaration(impl)/]
[/if]
[/template]

[template private _generateUnionGetterDeclaration(aUnionReference : EReference, impl : EBoolean) ? (hasGetter() and isUnion()) post(trim())]
[comment "if not impl" so the warning message will only be printed once /]
[if ((not impl) and aUnionReference.eReferenceType.doNotGenerateEClassifier())]
[printWarning(aUnionReference.eReferenceTypeNoGenerationMessage(), 'ecore4CPP::generator::main::generateUnion:generateUnionGetterDeclaretaion', 2)/]
[/if]
[printInfo(aUnionReference.eStructuralFeatureGetterGenerationMessage(), 4)/]
[aUnionReference.generateDocumentation()/]
virtual [aUnionReference.generateReferenceType()/] [aUnionReference.GetterName()/]() const [abstractSufix(impl)/];
[/template]

[***###########################################################################################
 * Section for generating the implementations of Getter methods for EReference elements that are Unions in the generated class header files (interface as well as implementation)
*/]
[template public generateUnionGetterImplementation(aUnionReference : EReference, anEClass: EClass) post(trim())]
[if (aUnionReference.doNotGenerateEStructuralFeature())]
	[printInfo(aUnionReference.eStructuralFeatureNoGenerationMessage(), 4)/]
[else]
[aUnionReference._generateUnionGetterImplementation(anEClass)/]
[/if]
[/template]

[template private _generateUnionGetterImplementation(aUnionReference : EReference, anEClass: EClass) ? (hasGetter() and aUnionReference.isUnion()) post(trim())]
[printInfo(aUnionReference.eStructuralFeatureGetterGenerationMessage(), 4)/]
[aUnionReference.generateReferenceType()/] [anEClass.name.toUpperFirst()/]Impl::[aUnionReference.GetterName()/]() const
{
[if (not (aUnionReference.upperBound = 1))]
	if(m_[aUnionReference.name/] == nullptr)
	{
		[aUnionReference.generateReferenceInit()/]
		[aUnionReference.InitReferences()/]
	}
[/if]
	return m_[aUnionReference.name/];
}
[/template]