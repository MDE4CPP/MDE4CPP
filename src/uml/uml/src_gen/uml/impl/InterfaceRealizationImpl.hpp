//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INTERFACEREALIZATIONINTERFACEREALIZATIONIMPL_HPP
#define UML_INTERFACEREALIZATIONINTERFACEREALIZATIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../InterfaceRealization.hpp"

#include "uml/impl/RealizationImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API InterfaceRealizationImpl : virtual public RealizationImpl, virtual public InterfaceRealization 
	{
		public: 
			InterfaceRealizationImpl(const InterfaceRealizationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			InterfaceRealizationImpl& operator=(InterfaceRealizationImpl const&); 

		protected:
			friend class umlFactoryImpl;
			InterfaceRealizationImpl();
			virtual std::shared_ptr<uml::InterfaceRealization> getThisInterfaceRealizationPtr() const;
			virtual void setThisInterfaceRealizationPtr(std::weak_ptr<uml::InterfaceRealization> thisInterfaceRealizationPtr);

			//Additional constructors for the containments back reference
			InterfaceRealizationImpl(std::weak_ptr<uml::BehavioredClassifier> par_implementingClassifier);
			//Additional constructors for the containments back reference
			InterfaceRealizationImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			InterfaceRealizationImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			InterfaceRealizationImpl(std::weak_ptr<uml::Package> par_owningPackage);
			//Additional constructors for the containments back reference
			InterfaceRealizationImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);

		public:
			//destructor
			virtual ~InterfaceRealizationImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References the Interface specifying the conformance contract.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual std::shared_ptr<uml::Interface> getContract() const ;
			/*!
			References the Interface specifying the conformance contract.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual void setContract(std::shared_ptr<uml::Interface>) ;
			/*!
			References the BehavioredClassifier that owns this InterfaceRealization, i.e., the BehavioredClassifier that realizes the Interface to which it refers.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual std::weak_ptr<uml::BehavioredClassifier> getImplementingClassifier() const ;
			/*!
			References the BehavioredClassifier that owns this InterfaceRealization, i.e., the BehavioredClassifier that realizes the Interface to which it refers.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual void setImplementingClassifier(std::weak_ptr<uml::BehavioredClassifier>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::InterfaceRealization> m_thisInterfaceRealizationPtr;
	};
}
#endif /* end of include guard: UML_INTERFACEREALIZATIONINTERFACEREALIZATIONIMPL_HPP */
