[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generatePackageImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute /]
[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateDatatype /]
[import ecore4CPP::generator::main::generateOperation /]
[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::package::generatePackageHelper /]

[query private metaModelIncludes(anEPackage : EPackage) : Sequence(EPackage) = Sequence{anEPackage.eAllContents(EClass).eAllSuperTypes.getRootPackage(),anEPackage.eAllContents(EStructuralFeature).eType.getRootPackage(),anEPackage.eAllContents(EParameter).eType.getRootPackage()}->flatten() /]

[query private getClassifierElementTypes(attributes : Sequence(EAttribute) ) : Sequence(EPackage) = attributes->select(a : EAttribute | not a.eType.oclIsUndefined() and a.eType.oclIsKindOf(EClassifier)).eType.ePackage/]
[query private getClassifierElementTypes(reference : Sequence(EReference) ) : Sequence(EPackage) = reference->select(r : EReference | not r.eType.oclIsUndefined() and r.eType.oclIsKindOf(EClassifier)).eType.ePackage/]
[query private getClassifierElementTypes(operations : Sequence(EOperation) ) : Sequence(EPackage) = (operations->select(op : EOperation | not op.eType.oclIsUndefined() and op.eType.oclIsKindOf(EClassifier)).eType.ePackage)->union(operations->select(op : EOperation | not op.eType.oclIsUndefined() and op.eType.oclIsKindOf(EClass)).eParameters.eType.ePackage)/]


[template public generatePackageImplSource(anEPackage : EPackage) { packageName : String = anEPackage.name.toUpperFirst().concat('PackageImpl').toUpperFirst(); }]
[file (anEPackage.generateNamespacePath().concat('/impl/').concat(packageName).concat('.cpp'), false, 'UTF-8')]
#include "[anEPackage.generateNamespacePath()/]/impl/[packageName/].hpp"

#include <cassert>

[generateAbstractDataTypesIncludes()/]
//metametamodel classes
[for (elements : EClassifier| anEPackage.getMetaMetaModelClasses())]
#include "[elements.ePackage.name/]/[elements.name.toUpperFirst()/].hpp"
[/for]

//metamodel factory
#include "[anEPackage.generateNamespacePath()/]/[anEPackage.name.toUpperFirst().concat('Factory')/].hpp"

//depending model packages
[for (pack : EPackage | anEPackage.metaModelIncludes()->asOrderedSet()->sortedBy(name)) ? (not ( pack=anEPackage))]
#include "[pack.name/]/[pack.name.concat('Package').toUpperFirst()/].hpp"
[/for]
[for (aSubPackage : EPackage| anEPackage.eSubpackages->selectByKind(EPackage)->sortedBy(name)) separator ('\n')]
#include "[aSubPackage.getRootPackage().name/]/[aSubPackage.getNamespacePathWithoutRoot()/]impl/[aSubPackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
[/for]

using namespace [anEPackage.generateNamespaceDefinition()/];

bool [packageName/]::isInited = false;

[packageName/]::[packageName/]()
{
	setEFactoryInstance(std::shared_ptr<ecore::EFactory >( [anEPackage.name.concat('Factory').toUpperFirst()/]::eInstance()));
}

[packageName/]::~[packageName/]()
{
}

[anEPackage.name.concat('Package').toUpperFirst()/]* [packageName/]::create()
{
	if (isInited)
	{
		return [anEPackage.name.concat('Package').toUpperFirst()/]::eInstance().get();
	}
	isInited = true;
	 
    // Obtain or create package and create package meta-data objects
    [packageName/] * metaModelPackage = new [packageName/]();
    return metaModelPackage;
}

void [packageName/]::init(std::shared_ptr<ecore::EPackage> package)
{
    // Initialize created meta-data
	createPackageContents(package);
	setThisEPackagePtr(package);
    initializePackageContents();   
}

[anEPackage.eSubpackages->sortedBy(name).generateSubPackageGetterImpl(anEPackage)/]

[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
// Begin Class [aClass.name.toUpperFirst()/]
[aClass.generateModelElementGetterImpl(anEPackage)/]
[aClass.eAttributes->sortedBy(name).generateModelElementGetterImpl(anEPackage)/]
[aClass.eReferences->sortedBy(name).generateModelElementGetterImpl(anEPackage)/]
[aClass.eOperations->sortedBy(name).generateModelElementGetterImpl(anEPackage)/]
// End Class [aClass.name.toUpperFirst()/]
[/for]
[anEPackage.eClassifiers->selectByKind(EDataType)->sortedBy(name).generateModelElementGetterImpl(anEPackage)/]
[/file]

[comment] create additional file for create function to reduce comiling time
[/comment]
[file (anEPackage.generateNamespacePath().concat('/impl/').concat(packageName).concat('_Creation.cpp'), false, 'UTF-8')]
#include "[anEPackage.generateNamespacePath()/]/impl/[packageName/].hpp"

// metametamodel factory
#include "[anEPackage.eClass().ePackage.name/]/[anEPackage.eClass().ePackage.name.toUpperFirst().concat('Factory')/].hpp"

#include <cassert>

[generateAbstractDataTypesIncludes()/]
//metametamodel classes
[for (elements : EClassifier| anEPackage.getMetaMetaModelClasses())]
#include "[elements.ePackage.name/]/[elements.name.toUpperFirst()/].hpp"
[/for]

//depending model packages
[for (pack : EPackage | anEPackage.metaModelIncludes()->asOrderedSet()->sortedBy(name)) ? (not ( pack=anEPackage))]
#include "[pack.name/]/[pack.name.concat('Package').toUpperFirst()/].hpp"
[/for]
//include subpackages 
[for (aSubPackage : EPackage| anEPackage.eSubpackages->selectByKind(EPackage)->sortedBy(name)) separator ('\n')]
#include "[aSubPackage.getRootPackage().name/]/[aSubPackage.getNamespacePathWithoutRoot()/]impl/[aSubPackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
[/for]
 
using namespace [anEPackage.generateNamespaceDefinition()/];

void [packageName/]::createPackageContents(std::shared_ptr<ecore::EPackage> package)
{
	if (isCreated) 
	{
		return;
	}
	isCreated = true;

	std::shared_ptr<ecore::EcoreFactory> factory = ecore::EcoreFactory::eInstance();

[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->asOrderedSet()->sortedBy(name))]
	create[aClass.name.toUpperFirst()/]Content(package, factory);
[/for]

	createPackageEDataTypes(package, factory);

[for (aSubPackage: EPackage | anEPackage.eSubpackages->sortedBy(name))]
	std::dynamic_pointer_cast<[aSubPackage.generateNamespaceDefinition()/]::[aSubPackage.name.toUpperFirst()/]PackageImpl>(get[aSubPackage.getMemberNameUpperFirst()/]Package())->createPackageContents(get[aSubPackage.getMemberNameUpperFirst()/]Package());

[/for]	
}

[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
void [packageName/]::create[aClass.name.toUpperFirst()/]Content(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	[aClass.generateClassCreation()/]
	[aClass.eAttributes->sortedBy(name).generateAttributeCreation()/]
	[aClass.eReferences->sortedBy(name).generateReferenceCreation()/]
	[aClass.eOperations->sortedBy(name).generateOperationCreation()/]
}
[/for]

void [packageName/]::createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	[anEPackage.eClassifiers->selectByKind(EDataType)->sortedBy(name).generateEDatatypeCreation()/]
}
[/file]

[comment] create additional file for initialize function to reduce comiling time
[/comment]
[file (anEPackage.generateNamespacePath().concat('/impl/').concat(packageName).concat('_Initialization.cpp'), false, 'UTF-8')]
#include "[anEPackage.generateNamespacePath()/]/impl/[packageName/].hpp"

#include <cassert>

[generateAbstractDataTypesIncludes()/]
//metametamodel classes
[for (elements : EClassifier| anEPackage.getMetaMetaModelClasses())]
#include "[elements.ePackage.name/]/[elements.name.toUpperFirst()/].hpp"
[/for]

// metametamodel factory
#include "[anEPackage.eClass().ePackage.name/]/[anEPackage.eClass().ePackage.name.toUpperFirst().concat('Factory')/].hpp"

//depending model packages
[for (aSubPackage : EPackage| anEPackage.eSubpackages->selectByKind(EPackage)->sortedBy(name)) separator ('\n')]
#include "[aSubPackage.getRootPackage().name/]/[aSubPackage.getNamespacePathWithoutRoot()/]impl/[aSubPackage.name.toUpperFirst().concat('PackageImpl')/].hpp"
[/for]

[let classifiers: OrderedSet(EClass) = anEPackage.eClassifiers->selectByKind(EClass)]
	[let packageList: OrderedSet(EPackage) = (anEPackage.metaModelIncludes())->union(getClassifierElementTypes(classifiers.eAttributes)->union(getClassifierElementTypes(classifiers.eReferences))->union(getClassifierElementTypes(classifiers.eOperations))->union(classifiers.eSuperTypes.ePackage))->asOrderedSet()->sortedBy(name) ]
[for (aPackage : EPackage | packageList) ? (not ( aPackage=anEPackage))]
#include "[aPackage.getRootPackage().name/]/[aPackage .getNamespacePathWithoutRoot()/][aPackage.name.toUpperFirst().concat('Package')/].hpp"
[/for]
	[/let]
[/let]


using namespace [anEPackage.generateNamespaceDefinition()/];

void [packageName/]::initializePackageContents()
{
	if (isInitialized)
	{
		return;
	}
	isInitialized = true;

	// Initialize package
	setName(eNAME);
	setNsPrefix(eNS_PREFIX);
	setNsURI(eNS_URI);
	
	// Add supertypes to classes
	[anEPackage.eClassifiers->selectByKind(EClass)->sortedBy(name).initSuperTypes()/]

 	// Initialize classes and features; add operations and parameters
[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->asOrderedSet()->sortedBy(name))]
	initialize[aClass.name.toUpperFirst()/]Content();
[/for]

	initializePackageEDataTypes();

[for (aSubPackage: EPackage | anEPackage.eSubpackages->sortedBy(name))]
	std::dynamic_pointer_cast<[aSubPackage.generateNamespaceDefinition()/]::[aSubPackage.name.toUpperFirst()/]PackageImpl>(get[aSubPackage.getMemberNameUpperFirst()/]Package())->initializePackageContents();
[/for]	
}

[for (aClass : EClass | anEPackage.eClassifiers->selectByKind(EClass)->asOrderedSet()->sortedBy(name)) separator ('\n')]
void [packageName/]::initialize[aClass.name.toUpperFirst()/]Content()
{
	[aClass.generateClassInit()/]
	[aClass.eAttributes->sortedBy(name).generateAttributeInitialization()/]
	[aClass.eReferences->sortedBy(name).generateReferenceInitialization()/]
	[aClass.eOperations->sortedBy(name).generateOperationInitialization()/]
}
[/for]

void [packageName/]::initializePackageEDataTypes()
{
	[anEPackage.eClassifiers->selectByKind(EDataType)->sortedBy(name).generateEDatatypeInitialization()/]
}

[/file]
[/template]