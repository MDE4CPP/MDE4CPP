//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECOREPLUGIN_HPP
#define ECOREPLUGIN_HPP

// namespace macro header include
#include "ecore/ecore.hpp"

#include "pluginFramework/EcoreModelPlugin.hpp"

namespace ecore
{
			class ecorePackage;
			class ecoreFactory;
}
namespace ecore
{
	class ECORE_API ecorePlugin : virtual public EcoreModelPlugin
	{
		public:
			virtual ~ecorePlugin(){};
		// Header only sinleton like implemenation for ecorePlugin eInstance()
		private:
			static std::shared_ptr<ecorePlugin>* getecorePluginStaticPtr()
			{
				static std::shared_ptr<ecorePlugin> local_instance; 
				return &(local_instance);
			}
		    static void seteInstance(ecorePlugin* _instance) {(*getecorePluginStaticPtr()).reset(_instance);}; 
		public:
			static std::shared_ptr<ecorePlugin> eInstance(){return *(getecorePluginStaticPtr());}
			static std::shared_ptr<ecorePlugin> init();
	
			virtual std::string eclipseURI() = 0;
			virtual std::string eNAME() = 0;
			virtual std::string eNS_URI() = 0;
			virtual std::string eNS_PREFIX() = 0;
	 		
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EFactory> getEFactory() = 0;
			virtual std::shared_ptr<ecore::EPackage> getEPackage() = 0;
			virtual std::shared_ptr<ecore::ecorePackage> getecorePackage() = 0;
			virtual std::shared_ptr<ecore::ecoreFactory> getecoreFactory() = 0;
		protected:
			ecorePlugin(){};
	};
}
#endif /* end of include guard: ECOREPLUGIN_HPP */
