//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_LOCI_EXECUTIONFACTORY_HPP
#define FUML_SEMANTICS_LOCI_EXECUTIONFACTORY_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T> class Bag; 



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace fUML
{
	class fUMLFactory;
}

//Forward Declaration for used types 
namespace fUML::Semantics::CommonBehavior 
{
	class Execution;
	class OpaqueBehaviorExecution;
}
namespace fUML::Semantics::Loci 
{
	class Locus;
	class SemanticStrategy;
	class SemanticVisitor;
}
namespace fUML::Semantics::StructuredClassifiers 
{
	class Object;
}
namespace fUML::Semantics::Values 
{
	class Evaluation;
}
namespace uml 
{
	class Behavior;
	class Element;
	class OpaqueBehavior;
	class PrimitiveType;
	class ValueSpecification;
}

// base class includes

// enum includes

#include "ecore/EModelElement.hpp"

//Includes from codegen annotation
#include "fUML/FUMLPackage.hpp"
#include "fUML/FUMLFactory.hpp"
#include "fUML/Semantics/Values/ValuesFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/Semantics/Activities/ActivitiesFactory.hpp"
#include "fUML/Semantics/Actions/ActionsFactory.hpp"
#include "fUML/Semantics/Classification/ClassificationFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"

#include "uml/OpaqueBehavior.hpp"
#include "fUML/Semantics/CommonBehavior/OpaqueBehaviorExecution.hpp"
#include "fUML/Semantics/CommonBehavior/CallEventBehavior.hpp"
#include "uml/CentralBufferNode.hpp"
#include "uml/StructuredActivityNode.hpp"
#include "fUML/Semantics/Values/Value.hpp"
#include "fUML/Semantics/Values/Evaluation.hpp"
#include "uml/Element.hpp"
#include "uml/ValueSpecification.hpp"
#include "fUML/Semantics/Values/LiteralBooleanEvaluation.hpp"
#include "fUML/Semantics/Values/LiteralStringEvaluation.hpp"
#include "fUML/Semantics/Values/LiteralNullEvaluation.hpp"
#include "fUML/Semantics/Classification/InstanceValueEvaluation.hpp"
#include "fUML/Semantics/Values/LiteralUnlimitedNaturalEvaluation.hpp"
#include "fUML/Semantics/Values/LiteralIntegerEvaluation.hpp"
#include "fUML/Semantics/Values/LiteralRealEvaluation.hpp"
#include "fUML/Semantics/CommonBehavior/CallEventExecution.hpp"
#include "uml/umlPackage.hpp"
#include "uml/InstanceValue.hpp"
#include "uml/LiteralBoolean.hpp"
#include "uml/LiteralInteger.hpp"
#include "uml/LiteralNull.hpp"
#include "uml/LiteralReal.hpp"
#include "uml/LiteralString.hpp"
#include "uml/LiteralUnlimitedNatural.hpp"
#include "fUML/Semantics/Activities/ActivityExecution.hpp"
#include "fUML/Semantics/Activities/ActivityFinalNodeActivation.hpp"
#include "fUML/Semantics/Activities/CentralBufferNodeActivation.hpp"
#include "fUML/Semantics/Activities/ActivityParameterNodeActivation.hpp"
#include "fUML/Semantics/Actions/AddStructuralFeatureValueActionActivation.hpp"
#include "fUML/Semantics/Actions/CallBehaviorActionActivation.hpp"
#include "fUML/Semantics/Actions/CallOperationActionActivation.hpp"
#include "fUML/Semantics/Actions/ClearAssociationActionActivation.hpp"
#include "fUML/Semantics/Actions/CreateLinkActionActivation.hpp"
#include "fUML/Semantics/Actions/ClearStructuralFeatureActionActivation.hpp"
#include "fUML/Semantics/Actions/CreateObjectActionActivation.hpp"
#include "fUML/Semantics/Activities/DecisionNodeActivation.hpp"
#include "fUML/Semantics/Actions/DestroyLinkActionActivation.hpp"
#include "fUML/Semantics/Actions/DestroyObjectActionActivation.hpp"
#include "fUML/Semantics/Activities/FlowFinalNodeActivation.hpp"
#include "fUML/Semantics/Activities/ForkNodeActivation.hpp"
#include "fUML/Semantics/Activities/InitialNodeActivation.hpp"
#include "fUML/Semantics/Actions/InputPinActivation.hpp"
#include "fUML/Semantics/Activities/JoinNodeActivation.hpp"
#include "fUML/Semantics/Activities/MergeNodeActivation.hpp"
#include "fUML/Semantics/Actions/OutputPinActivation.hpp"
#include "fUML/Semantics/Actions/ReadLinkActionActivation.hpp"
#include "fUML/Semantics/Actions/ReadSelfActionActivation.hpp"
#include "fUML/Semantics/Actions/ReadStructuralFeatureActionActivation.hpp"
#include "fUML/Semantics/Actions/RemoveStructuralFeatureValueActivation.hpp"
#include "fUML/Semantics/Actions/SendSignalActionActivation.hpp"
#include "fUML/Semantics/Actions/TestIdentityActionActivation.hpp"
#include "fUML/Semantics/Actions/ValueSpecificationActionActivation.hpp"
#include "uml/Activity.hpp"
#include "uml/ActivityFinalNode.hpp"
#include "uml/ActivityParameterNode.hpp"
#include "uml/AddStructuralFeatureValueAction.hpp"
#include "uml/CallBehaviorAction.hpp"
#include "uml/CallOperationAction.hpp"
#include "uml/ClearAssociationAction.hpp"
#include "uml/ClearStructuralFeatureAction.hpp"
#include "uml/CreateLinkAction.hpp"
#include "uml/CreateObjectAction.hpp"
#include "uml/DecisionNode.hpp"
#include "uml/DestroyLinkAction.hpp"
#include "uml/DestroyObjectAction.hpp"
#include "uml/FlowFinalNode.hpp"
#include "uml/ForkNode.hpp"
#include "uml/InitialNode.hpp"
#include "uml/InputPin.hpp"
#include "uml/JoinNode.hpp"
#include "uml/MergeNode.hpp"
#include "uml/OutputPin.hpp"
#include "uml/ReadLinkAction.hpp"
#include "uml/ReadSelfAction.hpp"
#include "uml/ReadStructuralFeatureAction.hpp"
#include "uml/RemoveStructuralFeatureValueAction.hpp"
#include "uml/SendSignalAction.hpp"
#include "uml/TestIdentityAction.hpp"
#include "uml/ValueSpecificationAction.hpp"
#include "fUML/Semantics/Actions/AcceptEventActionActivation.hpp"
#include "fUML/Semantics/Actions/ConditionalNodeActivation.hpp"
#include "fUML/Semantics/Activities/DataStoreNodeActivation.hpp"
#include "fUML/Semantics/Activities/ExpansionNodeActivation.hpp"
#include "fUML/Semantics/Activities/ExpansionRegionActivation.hpp"
#include "fUML/Semantics/Actions/LoopNodeActivation.hpp"
#include "fUML/Semantics/Actions/ReadExtentActionActivation.hpp"
#include "fUML/Semantics/Actions/ReadIsClassifiedObjectActionActivation.hpp"
#include "fUML/Semantics/Actions/ReclassifyObjectActionActivation.hpp"
#include "fUML/Semantics/Actions/ReduceActionActivation.hpp"
#include "fUML/Semantics/Actions/StartClassifierBehaviorActionActivation.hpp"
#include "fUML/Semantics/Actions/StartObjectBehaviorActionActivation.hpp"
#include "fUML/Semantics/Actions/StructuredActivityNodeActivation.hpp"
#include "uml/AcceptEventAction.hpp"
#include "uml/ConditionalNode.hpp"
#include "uml/DataStoreNode.hpp"
#include "uml/ExpansionNode.hpp"
#include "uml/ExpansionRegion.hpp"
#include "uml/LoopNode.hpp"
#include "uml/ReadExtentAction.hpp"
#include "uml/ReadIsClassifiedObjectAction.hpp"
#include "uml/ReclassifyObjectAction.hpp"
#include "uml/ReduceAction.hpp"
#include "uml/StartClassifierBehaviorAction.hpp"
#include "uml/StartObjectBehaviorAction.hpp"

//*********************************
namespace fUML::Semantics::Loci 
{
	
	class ExecutionFactory : virtual public ecore::EModelElement

	{
		public:
 			ExecutionFactory(const ExecutionFactory &) {}
			ExecutionFactory& operator=(ExecutionFactory const&) = delete;

		protected:
			ExecutionFactory(){}


			//Additional constructors for the containments back reference

			ExecutionFactory(std::weak_ptr<fUML::Semantics::Loci::Locus > par_locus);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~ExecutionFactory() {}

			//*********************************
			// Operations
			//*********************************
			 
			virtual void addBuiltInType(std::shared_ptr<org.eclipse.uml2.uml.PrimitiveType> type) = 0;
			
			 
			virtual void addPrimitiveBehaviorPrototype(std::shared_ptr<fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> execution) = 0;
			
			 
			virtual void assignStrategy(std::shared_ptr<fUML::Semantics::Loci::SemanticStrategy> strategy) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::Values::Evaluation> createEvaluation(std::shared_ptr<org.eclipse.uml2.uml.ValueSpecification> specification) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> createExecution(std::shared_ptr<org.eclipse.uml2.uml.Behavior> behavior,std::shared_ptr<fUML::Semantics::StructuredClassifiers::Object> context) = 0;
			
			 
			virtual std::shared_ptr<org.eclipse.uml2.uml.PrimitiveType> getBuiltInType(std::string name) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::Loci::SemanticStrategy> getStrategy(std::string name) = 0;
			
			 
			virtual int getStrategyIndex(std::string name) = 0;
			
			
			
			 
			virtual std::shared_ptr<fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> instantiateOpaqueBehaviorExecution(std::shared_ptr<org.eclipse.uml2.uml.Behavior> behavior) = 0;
			
			 
			virtual std::shared_ptr<fUML::Semantics::Loci::SemanticVisitor> instantiateVisitor(std::shared_ptr<org.eclipse.uml2.uml.Element> element) = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			
			virtual std::shared_ptr<Bag<org.eclipse.uml2.uml.PrimitiveType>> getBuiltInTypes() const = 0;
			
			
			
			virtual std::weak_ptr<fUML::Semantics::Loci::Locus > getLocus() const = 0;
			
			
			virtual void setLocus(std::shared_ptr<fUML::Semantics::Loci::Locus> _locus) = 0;
			
			
			virtual std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution>> getPrimitiveBehaviorPrototypes() const = 0;
			
			
			
			virtual std::shared_ptr<Bag<fUML::Semantics::Loci::SemanticStrategy>> getStrategies() const = 0;
			
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			
			mutable std::shared_ptr<Bag<org.eclipse.uml2.uml.PrimitiveType>> m_builtInTypes;
			std::weak_ptr<fUML::Semantics::Loci::Locus > m_locus;
			mutable std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution>> m_primitiveBehaviorPrototypes;
			mutable std::shared_ptr<Bag<fUML::Semantics::Loci::SemanticStrategy>> m_strategies;

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: FUML_SEMANTICS_LOCI_EXECUTIONFACTORY_HPP */
