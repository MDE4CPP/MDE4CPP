//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_MDE4CPP_EXTENSIONS_FUML_OBJECTFUML_OBJECTIMPL_HPP
#define FUML_MDE4CPP_EXTENSIONS_FUML_OBJECTFUML_OBJECTIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "fUML/fUML.hpp" 

// model includes
#include "../FUML_Object.hpp"

#include "fUML/MDE4CPP_Extensions/impl/MDE4CPP_ExtensionsFactoryImpl.hpp"
#include "uml/impl/ElementImpl.hpp"

//*********************************
namespace fUML::MDE4CPP_Extensions 
{
	class FUML_API FUML_ObjectImpl : virtual public uml::ElementImpl, virtual public FUML_Object 
	{
		public: 
			FUML_ObjectImpl(const FUML_ObjectImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;
			FUML_ObjectImpl& operator=(FUML_ObjectImpl const&); 

		protected:
			friend class fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsFactoryImpl;
			FUML_ObjectImpl();
			virtual std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> getThisFUML_ObjectPtr() const;
			virtual void setThisFUML_ObjectPtr(std::weak_ptr<fUML::MDE4CPP_Extensions::FUML_Object> thisFUML_ObjectPtr);


		public:
			//destructor
			virtual ~FUML_ObjectImpl() = 0;
			
			//*********************************
			// Operations
			//*********************************
			virtual void _register(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& accepter) ;
			virtual void addTo(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Link>& link, const std::shared_ptr<uml::Property>& end) ;
			virtual void destroy() ;
			virtual const std::shared_ptr<Bag<uml::Classifier>>& getTypes() const ;
			virtual std::shared_ptr<Any> invokeOpaqueBehavior(std::string _qualifiedName, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments) ;
			virtual std::shared_ptr<Any> invokeOpaqueBehavior(unsigned long _uID, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments) ;
			virtual std::shared_ptr<Any> invokeOperation(std::string _qualifiedName, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments) ;
			virtual std::shared_ptr<Any> invokeOperation(unsigned long _uID, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments) ;
			virtual void send(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence) ;
			virtual void startBehavior(const std::shared_ptr<uml::Class>& classifier, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>& inputs) ;
			virtual void unregister(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& accepter) ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_Link>>& getLinks() const ;
			virtual const std::shared_ptr<fUML::Semantics::Loci::Locus>& getLocus() const ;
			virtual void setLocus(const std::shared_ptr<fUML::Semantics::Loci::Locus>&) ;
			virtual const std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation>& getObjectActivation() const ;
			virtual void setObjectActivation(const std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation>&) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual const std::shared_ptr<ecore::EClass>& eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<fUML::MDE4CPP_Extensions::FUML_Object> m_thisFUML_ObjectPtr;
	};
}
#endif /* end of include guard: FUML_MDE4CPP_EXTENSIONS_FUML_OBJECTFUML_OBJECTIMPL_HPP */
