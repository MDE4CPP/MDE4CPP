
#include "ecore/impl/EObjectImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Union.hpp"


#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"

//Includes from codegen annotation
#include "ecore/EObjectContainer.hpp"

//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "ecore/ecoreFactory.hpp"

#include "ecore/EClass.hpp"
#include "ecore/EObject.hpp"
#include "ecore/EOperation.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"

//Factories an Package includes
#include "ecore/ecorePackage.hpp"


#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"

using namespace ecore;

//*********************************
// Constructor / Destructor
//*********************************
EObjectImpl::EObjectImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

EObjectImpl::~EObjectImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete EObject "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
EObjectImpl::EObjectImpl(std::weak_ptr<ecore::EObject> par_eContainer)
:EObjectImpl()
{
	m_eContainer = par_eContainer;
}

EObjectImpl::EObjectImpl(const EObjectImpl & obj): EObjectImpl()
{
	*this = obj;
}

EObjectImpl& EObjectImpl::operator=(const EObjectImpl & obj)
{
	//call overloaded =Operator for each base class
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of EObject 
	 * which is generated by the compiler (as EObject is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//EObject::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy EObject "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_metaElementID = obj.getMetaElementID();

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> EObjectImpl::copy() const
{
	std::shared_ptr<EObjectImpl> element(new EObjectImpl());
	*element =(*this);
	element->setThisEObjectPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
Any EObjectImpl::eAllContents() const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr<Bag<AnyObject>> returnList=std::make_shared<Bag<AnyObject>>();
	std::shared_ptr<ecore::EClass> metaClass=this->eClass();
	std::shared_ptr<Bag<ecore::EStructuralFeature>> features=metaClass->getEAllStructuralFeatures();
	int size = features->size();
	for (auto i = 0; i < size; ++i)
	{
		Any anyValue=this->eGet(features->at(i));
		if(anyValue)
		{
			returnList->push_back(anyValue);
		}
	}
	return eAny(returnList);
	//end of body
}

std::shared_ptr<ecore::EClass> EObjectImpl::eClass() const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->eStaticClass();
	//end of body
}

std::shared_ptr<ecore::EObject> EObjectImpl::eContainer()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		if(auto wp = m_eContainer.lock())
	{
		return wp;
	}
	return nullptr;
	//end of body
}

std::shared_ptr<ecore::EStructuralFeature> EObjectImpl::eContainingFeature() const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

std::shared_ptr<ecore::EReference> EObjectImpl::eContainmentFeature() const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

std::shared_ptr<Bag<ecore::EObject> > EObjectImpl::eContents() const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr<Bag<ecore::EObject>> returnList=std::make_shared<Bag<ecore::EObject>>();

	std::shared_ptr<ecore::EClass> metaClass=this->eClass();
	std::shared_ptr<Bag<ecore::EStructuralFeature>> features=metaClass->getEAllStructuralFeatures();
	int size = features->size();
	for (auto i = 0; i < size; ++i)
	{
		Any anyValue=this->eGet(features->at(i));
		try
		{
			std::shared_ptr<ecore::EObject> value=anyValue->get<std::shared_ptr<ecore::EObject>>();
			if(value)
			{
				returnList->push_back(value);
			}
		}
		catch(...){}
		try
		{
			std::shared_ptr<Bag<EObject>> valueList = anyValue->get<std::shared_ptr<Bag<EObject>>>();
			if(valueList)
			{
				std::shared_ptr<ecore::EObjectContainer> containerObject= ecore::ecoreFactory::eInstance()->createEObjectContainer();
				std::shared_ptr<Bag<ecore::EObject>> container=containerObject->getContainer();
				container.swap(valueList);
				returnList->push_back(containerObject);
			}
		}
		catch(...){}

	}
	return returnList;

	//end of body
}

std::shared_ptr<std::list < ecore::EObject>> EObjectImpl::eCrossReferences() const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

Any EObjectImpl::eGet(std::shared_ptr<ecore::EStructuralFeature> feature) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->eGet(feature,false);
	//end of body
}

Any EObjectImpl::eGet(std::shared_ptr<ecore::EStructuralFeature> feature,bool resolve) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->eGet(feature->getFeatureID(),resolve,false);
	//end of body
}

Any EObjectImpl::eInvoke(std::shared_ptr<ecore::EOperation> operation,std::shared_ptr<std::list < Any>> arguments)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	  std::cout << __PRETTY_FUNCTION__  << std::endl;

  Any result;
  result = this->eInvoke(operation->getOperationID(), arguments);

  return result;
	//end of body
}

bool EObjectImpl::eIsProxy() const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

bool EObjectImpl::eIsSet(std::shared_ptr<ecore::EStructuralFeature> feature) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->internalEIsSet(feature->getFeatureID());
	//end of body
}

int EObjectImpl::eResource() const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

void EObjectImpl::eSet(std::shared_ptr<ecore::EStructuralFeature> feature,Any newValue)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	this->eSet(feature->getFeatureID(), newValue);
	//end of body
}

void EObjectImpl::eUnset(std::shared_ptr<ecore::EStructuralFeature> feature) const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute metaElementID */
long long EObjectImpl::getMetaElementID() const 
{
	return m_metaElementID;
}
void EObjectImpl::setMetaElementID(long long _metaElementID)
{
	m_metaElementID = _metaElementID;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference eContainer */

void EObjectImpl::setEContainer(std::weak_ptr<ecore::EObject> _eContainer)
{
    m_eContainer = _eContainer;
	
}

/* Getter & Setter for reference eContentUnion */

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<ecore::EObject>> EObjectImpl::getEContentUnion() const
{
	if(m_eContentUnion == nullptr)
	{
		/*Union*/
		m_eContentUnion.reset(new Union<ecore::EObject>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_eContentUnion - Union<ecore::EObject>()" << std::endl;
		#endif
		
		
	}
	return m_eContentUnion;
}

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> EObjectImpl::eContainer() const
{
	if(auto wp = m_eContainer.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void EObjectImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get ecoreFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void EObjectImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("metaElementID");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'long long'
			long long value;
			std::istringstream(iter->second) >> value;
			this->setMetaElementID(value);
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

}

void EObjectImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("eContentUnion") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "EObject";
			}
			loadHandler->handleChildContainer<ecore::EObject>(this->getEContentUnion());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
}

void EObjectImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTAINER:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::EObject> _eContainer = std::dynamic_pointer_cast<ecore::EObject>( references.front() );
				setEContainer(_eContainer);
			}
			
			return;
		}
	}
}

void EObjectImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void EObjectImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<ecore::ecorePackage> package = ecore::ecorePackage::eInstance();
		// Add attributes
		if ( this->eIsSet(package->getEObject_Attribute_metaElementID()) )
		{
			saveHandler->addAttribute("metaElementID", this->getMetaElementID());
		}
		//
		// Add new tags (from references)
		//
		std::shared_ptr<EClass> metaClass = this->eClass();
		// Save 'eContentUnion'

		saveHandler->addReferences<ecore::EObject>("eContentUnion", this->getEContentUnion());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}


std::shared_ptr<EClass> EObjectImpl::eStaticClass() const
{
	return ecore::ecorePackage::eInstance()->getEObject_Class();
}


//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any EObjectImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTAINER:
		{
			std::shared_ptr<ecore::EObject> returnValue=eContainer();
			return eAny(returnValue); //391
		}
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTENTUNION:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EObject>::iterator iter = getEContentUnion()->begin();
			Bag<ecore::EObject>::iterator end = getEContentUnion()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //390			
		}
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_METAELEMENTID:
			return eAny(getMetaElementID()); //392
	}
	Any result;
	return result;
}

bool EObjectImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTAINER:
			return eContainer() != nullptr; //391
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTENTUNION:
			return getEContentUnion() != nullptr; //390
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_METAELEMENTID:
			return getMetaElementID() != 0; //392
	}
	bool result = false;
	return result;
}

bool EObjectImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTAINER:
		{
			// BOOST CAST
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<ecore::EObject> _eContainer = std::dynamic_pointer_cast<ecore::EObject>(_temp);
			setEContainer(_eContainer); //391
			return true;
		}
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_ECONTENTUNION:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EObject>> eContentUnionList(new Bag<ecore::EObject>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eContentUnionList->add(std::dynamic_pointer_cast<ecore::EObject>(*iter));
				iter++;
			}
			
			Bag<ecore::EObject>::iterator iterEContentUnion = getEContentUnion()->begin();
			Bag<ecore::EObject>::iterator endEContentUnion = getEContentUnion()->end();
			while (iterEContentUnion != endEContentUnion)
			{
				if (eContentUnionList->find(*iterEContentUnion) == -1)
				{
					getEContentUnion()->erase(*iterEContentUnion);
				}
				iterEContentUnion++;
			}
 
			iterEContentUnion = eContentUnionList->begin();
			endEContentUnion = eContentUnionList->end();
			while (iterEContentUnion != endEContentUnion)
			{
				if (getEContentUnion()->find(*iterEContentUnion) == -1)
				{
					getEContentUnion()->add(*iterEContentUnion);
				}
				iterEContentUnion++;			
			}
			return true;
		}
		case ecore::ecorePackage::EOBJECT_ATTRIBUTE_METAELEMENTID:
		{
			// BOOST CAST
			long long _metaElementID = newValue->get<long long>();
			setMetaElementID(_metaElementID); //392
			return true;
		}
	}

	bool result = false;
	return result;
}

//*********************************
// EOperation Invoke
//*********************************
Any EObjectImpl::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;

  	switch(operationID)
	{
		
		// 345308248
		case ecorePackage::EOBJECT_OPERATION_EALLCONTENTS:
		{
			result = eAny(this->eAllContents());
			break;
		}
		
		// 1897829605
		case ecorePackage::EOBJECT_OPERATION_ECLASS:
		{
			result = eAny(this->eClass());
			break;
		}
		
		// 1564505762
		case ecorePackage::EOBJECT_OPERATION_ECONTAINER:
		{
			result = eAny(this->eContainer());
			break;
		}
		
		// 1314774326
		case ecorePackage::EOBJECT_OPERATION_ECONTAININGFEATURE:
		{
			result = eAny(this->eContainingFeature());
			break;
		}
		
		// 1559436300
		case ecorePackage::EOBJECT_OPERATION_ECONTAINMENTFEATURE:
		{
			result = eAny(this->eContainmentFeature());
			break;
		}
		
		// 1140157049
		case ecorePackage::EOBJECT_OPERATION_ECONTENTS:
		{
			result = eAny(this->eContents());
			break;
		}
		
		// 1830400680
		case ecorePackage::EOBJECT_OPERATION_ECROSSREFERENCES:
		{
			result = eAny(this->eCrossReferences());
			break;
		}
		
		// 765237638
		case ecorePackage::EOBJECT_OPERATION_EGET_ESTRUCTURALFEATURE:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<Any>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get<std::shared_ptr<ecore::EStructuralFeature> >();
			result = eAny(this->eGet(incoming_param_feature));
			break;
		}
		
		// 728807147
		case ecorePackage::EOBJECT_OPERATION_EGET_ESTRUCTURALFEATURE_EBOOLEAN:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<Any>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get<std::shared_ptr<ecore::EStructuralFeature> >();
			//Retrieve input parameter 'resolve'
			//parameter 1
			bool incoming_param_resolve;
			std::list<Any>::const_iterator incoming_param_resolve_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_resolve = (*incoming_param_resolve_arguments_citer)->get<bool >();
			result = eAny(this->eGet(incoming_param_feature,incoming_param_resolve));
			break;
		}
		
		// 447398534
		case ecorePackage::EOBJECT_OPERATION_EINVOKE_EOPERATION_EELIST:
		{
			//Retrieve input parameter 'operation'
			//parameter 0
			std::shared_ptr<ecore::EOperation> incoming_param_operation;
			std::list<Any>::const_iterator incoming_param_operation_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_operation = (*incoming_param_operation_arguments_citer)->get<std::shared_ptr<ecore::EOperation> >();
			//Retrieve input parameter 'arguments'
			//parameter 1
			std::shared_ptr<std::list < Any>> incoming_param_arguments;
			std::list<Any>::const_iterator incoming_param_arguments_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_arguments = (*incoming_param_arguments_arguments_citer)->get<std::shared_ptr<std::list < Any>> >();
			result = eAny(this->eInvoke(incoming_param_operation,incoming_param_arguments));
			break;
		}
		
		// 780766387
		case ecorePackage::EOBJECT_OPERATION_EISPROXY:
		{
			result = eAny(this->eIsProxy());
			break;
		}
		
		// 527097480
		case ecorePackage::EOBJECT_OPERATION_EISSET_ESTRUCTURALFEATURE:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<Any>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get<std::shared_ptr<ecore::EStructuralFeature> >();
			result = eAny(this->eIsSet(incoming_param_feature));
			break;
		}
		
		// 281242010
		case ecorePackage::EOBJECT_OPERATION_ERESOURCE:
		{
			result = eAny(this->eResource());
			break;
		}
		
		// 921412853
		case ecorePackage::EOBJECT_OPERATION_ESET_ESTRUCTURALFEATURE_EJAVAOBJECT:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<Any>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get<std::shared_ptr<ecore::EStructuralFeature> >();
			//Retrieve input parameter 'newValue'
			//parameter 1
			Any incoming_param_newValue;
			std::list<Any>::const_iterator incoming_param_newValue_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_newValue = (*incoming_param_newValue_arguments_citer)->get<Any >();
			this->eSet(incoming_param_feature,incoming_param_newValue);
			break;
		}
		
		// 640572767
		case ecorePackage::EOBJECT_OPERATION_EUNSET_ESTRUCTURALFEATURE:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<Any>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get<std::shared_ptr<ecore::EStructuralFeature> >();
			this->eUnset(incoming_param_feature);
			break;
		}

		default:
		{
			// call superTypes
			break;
		}
  	}

	return result;
}


std::shared_ptr<ecore::EObject> EObjectImpl::getThisEObjectPtr() const
{
	return m_thisEObjectPtr.lock();
}
void EObjectImpl::setThisEObjectPtr(std::weak_ptr<ecore::EObject> thisEObjectPtr)
{
	m_thisEObjectPtr = thisEObjectPtr;
}
