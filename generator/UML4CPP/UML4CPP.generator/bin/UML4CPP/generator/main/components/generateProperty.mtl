[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Property artefacts
 * 
 */]
[module generateProperty('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateStereotype /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * checks if Property is read only
*/]
[query public hasSetter(aProperty : Property) : Boolean = not aProperty.isReadOnly and aProperty.upper = 1/]

[**
 * generate getter and setter declaration
 * setter is only generated if hasSetter query returns true
*/]
[template public generateAttributeAccessorsDeclaration(aProperty : Property, impl : Boolean)]
virtual [aProperty.generateCppType()/] [aProperty.getterName()/]() const [abstractSuffix(impl)/];
[if (aProperty.hasSetter())]
virtual void [aProperty.setterName()/] ([aProperty.generateCppType()/] _[aProperty.name/])[abstractSuffix(impl)/];
[/if]
[/template]

[**
 * generate attribute member declaration
 */]
[template public generateAttributeProtectedMember(aProperty : Property)]
[if (aProperty.isStatic)]static [/if][aProperty.generateCppType()/] m_[aProperty.name/][if (aProperty.default->notEmpty())]= [aProperty.genDefault()/][/if];

[/template]

[**
 * generate attribute member initialization for properties without default value and upper <> 1
 */]
[template public initAttributeProtectedMember(aProperty : Property)]
m_[aProperty.name/].reset(new Bag<[aProperty.type.transformType()/]>());

[/template]

[**
 * generate attribute member initialization for properties with InstanceValue as default value
*/]
[template public initPropertyFromInstanceValue(instVal : InstanceValue)]
m_[instVal.owner.oclAsType(NamedElement).name/] = [instVal.type._package.getPackageName()/]::[instVal.type._package.getPackageName()/]Factory::eInstance()->create[instVal.type.name.toUpperFirst()/]();

[/template]

[***
 * generate property getter implementation
*/]
[template public generateAttributeGetterImplementationCpp(aProperty : Property)]
[aProperty.generateAttributeGetterImplementationCpp(aProperty.class)/]
[/template]

[template public generateAttributeGetterImplementationCpp(aProperty : Property, aClass : Class)]
[aProperty.generateCppType()/] [aClass.name.toUpperFirst()/]Impl::[aProperty.getterName()/]() const 
{
	return m_[aProperty.name/];
}
[/template]

[template public generateAttributeGetterImplementationCpp(aProperty : Property, aInterface : Interface)]
[aProperty.generateCppType()/] [aInterface.name.toUpperFirst()/]Impl::[aProperty.getterName()/]() const 
{
	return m_[aProperty.name/];
}
[/template]

[**
 * generate property setter implementation
*/]
[template public generateAttributeSetterImplementationCpp(aProperty : Property )]
[aProperty.generateAttributeSetterImplementationCpp(aProperty.class)/]
[/template]

[template public generateAttributeSetterImplementationCpp(aProperty : Property, aClass : Class) ? (aProperty.hasSetter())]
void [aClass.name.toUpperFirst()/]Impl::[aProperty.setterName()/]([aProperty.generateCppType()/] _[aProperty.name/])
{
	m_[aProperty.name/] = _[aProperty.name/];
}
[/template]

[template public generateAttributeSetterImplementationCpp(aProperty : Property, aInterface : Interface) ? (aProperty.hasSetter())]
void [aInterface.name.toUpperFirst()/]Impl::[aProperty.setterName()/]([aProperty.generateCppType()/] _[aProperty.name/])
{
	m_[aProperty.name/] = _[aProperty.name/];
}
[/template]


[**
 * generate creation of meta model instance for an Property element
*/]
[template public generateAttributeCreation(aProperty : Property) post(trim())]
[if (not aProperty.class.oclIsUndefined())]
	[if (aProperty.oclIsTypeOf(Property))]
	[aProperty.memberName()/] = factory->createProperty_in_Class([aProperty.class.memberName()/]);
	[elseif (aProperty.oclIsTypeOf(Port))]
	[aProperty.memberName()/] = factory->createPort_in_Class([aProperty.class.memberName()/]);
	[/if]
[else][if (not aProperty.interface.oclIsUndefined())]
	[if (aProperty.oclIsTypeOf(Property))]
	[aProperty.memberName()/] = factory->createProperty_in_Interface([aProperty.interface.memberName()/]);
	[elseif (aProperty.oclIsTypeOf(Port))]
	[aProperty.memberName()/] = factory->createPort_in_Interface([aProperty.interface.memberName()/]);
	[/if]
[/if][/if]
[/template]

[**
 * generate initialization of meta model instance for an Property element
 * 
 * this includes:
 * - set property name
 * - set type
 * - set lower and upper bound
 * - set visibility
 * - set default value
 * - apply stereotypes
*/]
[template public generateAttributeInitialization(aProperty : Property)]
[aProperty.memberName()/]->setName("[aProperty.name/]");
[aProperty.memberName()/]->setType([aProperty.type.generatePackageGetterCall(aProperty)/]);
[aProperty.memberName()/]->setLower([aProperty.lower/]);
[aProperty.memberName()/]->setUpper([aProperty.upper/]);
[aProperty.memberName()/]->setVisibility(uml::VisibilityKind::[aProperty.visibility.toString().toUpperCase()/]);

[if (not aProperty.defaultValue.oclIsUndefined())][aProperty.memberName()/]->setDefaultValue([memberName(aProperty.defaultValue)/]);[/if]
[aProperty.generateStereotypeApplication()/]
[/template]

[**
 * add properties of realizing interfaces to class attributes
*/]
[template public addInterfaceAttribute(aProperty : Property, aClass : Class)]
[aClass.memberName()/]->getOwnedAttribute()->push_back([if (aClass.getNearestPackage() = aProperty.getNearestPackage())][aProperty.memberName()/][else][aProperty.generatePackageGetterCall()/][/if]);
[/template]

[**
 * generate default values for properties with primitive type or enumeration type
*/]
[template public genDefault(aProperty : Property) ? (aProperty.type.name='String' or aProperty.type.name='EString')]
"[aProperty.default/]" /*defined default string*/
[/template]

[template public genDefault(aProperty : Property) ? ((aProperty.type.name='Integer') or (aProperty.type.name='Real') or (aProperty.type.name='Boolean') or (aProperty.type.name='UnlimitedNatural') or (aProperty.type.name='EInt') or (aProperty.type.name='EDouble') or (aProperty.type.name='EBoolean') or (aProperty.type.name='EFloat'))]
[aProperty.default/] /*defined default value*/
[/template]

[template public genDefault(aProperty : Property) ? (aProperty.type.oclIsKindOf(Enumeration))]
[aProperty.type.qualifiedName/]::[aProperty.default.toUpper()/]
[/template]