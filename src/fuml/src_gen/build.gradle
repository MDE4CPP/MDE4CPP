// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: ecore4cpp::generator::main::generateBuildFile
plugins{
	id "tui.sse.mde4cpp.MDE4CPPCompile" version "0.6"	
}

import org.gradle.internal.os.OperatingSystem;

description 'Compile task for project: fUML'

task compileFUMLSrc(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	description 'compile fUML'

	projectFolder = file('.' + File.separator + 'fUML')

	inputs.files(fileTree('.') {
        exclude 'fUML/.cmake/**'
    })

   	if(!file(['fUML','.cmake'].join(File.separator)).exists()){
   	    outputs.upToDateWhen { false }
   	}

	if(OperatingSystem.current().isWindows()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','fUML' +       '.dll'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','fUML' + 'd' + '.dll'].join(File.separator))}
	}
	else if(OperatingSystem.current().isLinux()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','fUML' +       '.so'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','fUML' + 'd' + '.so'].join(File.separator))}
	}
	else if(OperatingSystem.current().isMacOsX()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','fUML' +       '.dylib'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','fUML' + 'd' + '.dylib'].join(File.separator))}
	}
	else {
	    //not supported os
	}

	outputs.files(fileTree([rootDir,'application','include','fUML'].join(File.separator)))
	outputs.dir([rootDir,'application','include','fUML'].join(File.separator))

	def buildFile = file('..'+File.separator+'model'+File.separator+'build.gradle')
	if(!buildFile.exists()) 
	{
		mustRunAfter = [getRootProject().getTasksByName('runCommandGenerateFUML', true)]
	}
	else
	{
		mustRunAfter = [getRootProject().getTasksByName('generateFUMLModel', true)]
	}	

	dependsOn getRootProject().getTasksByName('deliverBasicInterfaces', true)


	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName('compileEcoreSrc', true)
	if(ecore.isEmpty())  
	{
		logger.info('Task not found: ' + ecore.toString() + '. Use buildEcore now')
		def buildecore = getRootProject().getTasksByName('buildEcore', true)
		dependsOn buildecore
		inputs.files(buildecore.outputs)
	}
	else
	{
		dependsOn ecore
		inputs.files(ecore.outputs)
	}

	// dependency to model 'types'
	def types = getRootProject().getTasksByName('compileTypesSrc', true)
	if(types.isEmpty())  
	{
		logger.info('Task not found: ' + types.toString() + '. Use buildTypes now')
		def buildtypes = getRootProject().getTasksByName('buildTypes', true)
		dependsOn buildtypes
		inputs.files(buildtypes.outputs)
	}
	else
	{
		dependsOn types
		inputs.files(types.outputs)
	}

	// dependency to model 'uml'
	def uml = getRootProject().getTasksByName('compileUmlSrc', true)
	if(uml.isEmpty())  
	{
		logger.info('Task not found: ' + uml.toString() + '. Use buildUml now')
		def builduml = getRootProject().getTasksByName('buildUml', true)
		dependsOn builduml
		inputs.files(builduml.outputs)
	}
	else
	{
		dependsOn uml
		inputs.files(uml.outputs)
	}
}

task clean {
	// Extension of gradle built-in task:clean
	doLast {
		def dot_cmake = file('fUML/.cmake')
		if(dot_cmake.exists()){
			delete dot_cmake.absolutePath
			println "deleting: " + dot_cmake.absolutePath
		}
		
		compileFUMLSrc.outputs.files.each{
			if(it.exists()){
				delete it.absolutePath
			    println "deleting: " + it
			}
  		}
	}
}
