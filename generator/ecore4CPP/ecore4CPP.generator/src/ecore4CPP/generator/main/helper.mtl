[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module helper('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helpers::keywords /]

[**
 * Helper for c++ abstract function sufix
*/]
[query public abstractSufix(impl : Boolean) : String = if (impl = false) then '= 0' else '' endif/]
[query public getterPrefix(feature : EStructuralFeature) : String = if feature.eType.name = 'EBoolean' then 'is' else 'get' endif/]

[**
 * check if application should be prepared
*/]
[query public prepareApplication(ePackage : EPackage) : Boolean = eAllContents()->filter(ecore::EAnnotation)->select(source = sourceNamePrepareApplication())->notEmpty() /]
[query public hasMainSourceCode(ePackage : EPackage) : Boolean = if (prepareApplication()) then eAllContents()->filter(ecore::EAnnotation)->select(source = sourceNamePrepareApplication())->first().details->select(key = keyMainSourceCode())->notEmpty() else false endif /]
[query public getMainSourceCode(ePackage : EPackage) : String = eAllContents()->filter(ecore::EAnnotation)->select(source = sourceNamePrepareApplication())->first().details->select(key = keyMainSourceCode())->first().value /]

[query public hasMainSourceIncludes(ePackage : EPackage) : Boolean = if (prepareApplication()) then eAllContents()->filter(ecore::EAnnotation)->select(source = sourceNamePrepareApplication())->first().details->select(key = keyMainIncludes())->notEmpty() else false endif /]
[query public getMainSourceIncludes(ePackage : EPackage) : String = eAllContents()->filter(ecore::EAnnotation)->select(source = sourceNamePrepareApplication())->first().details->select(key = keyMainIncludes())->first().value /]

[**
 * namespace generation
*/]
[query private getRootPackageName(anEPackage : EPackage, ignoreRoot : Boolean) : String = if (ignoreRoot) then '' else anEPackage.name endif /]
[query private getNamespace(aEPackage : EPackage, separator : String, ignoreRoot : Boolean) : String = if(eSuperPackage.oclIsUndefined()) then getRootPackageName(ignoreRoot) else eSuperPackage.getNamespace(separator, ignoreRoot).concat(separator).concat(aEPackage.name) endif/]
[query public generateNamespacePath(anEPackage : EPackage) : String = anEPackage.getNamespace('/', false) /]
[query public generateNamespacePath(anEClassifier : EClassifier) : String = anEClassifier.ePackage.generateNamespacePath() /]
[query public generateNamespaceDefinition(anEClassifier : EClassifier) : String = anEClassifier.ePackage.getNamespace('::', false) /]
[query public generateNamespaceDefinition(anEPackage : EPackage) : String = anEPackage.getNamespace('::', false) /]
[query public getRootPackage(aEPackage : EPackage) : EPackage = if(eSuperPackage.oclIsUndefined()) then aEPackage else eSuperPackage.getRootPackage() endif /]
[query public getRootPackage(aEClassifier : EClassifier) : EPackage = if(aEClassifier.ePackage.oclIsUndefined()) then aEClassifier.ePackage else aEClassifier.ePackage.getRootPackage() endif /]

[query public getNamespacePathWithoutRoot(anEClassifier : EClassifier) : String = anEClassifier.ePackage.getNamespace('/', true).concat('/').substring(2) /] [comment first char is '/', which should be removed, index starts at 1 /] 
[query public getNamespacePathWithoutRoot(anEPackage : EPackage) : String = anEPackage.getNamespace('/', true).concat('/').substring(2) /] [comment first char is '/', which should be removed, index starts at 1 /] 

[**
 * Helper for sourcegen annotations
*/]
[query public hasSourceGen(aModelElement : EModelElement) : Boolean = eAnnotations->select(source = sourceNameCodeGen())->notEmpty()  /]
[query public SourceGen(aModelElement : EModelElement) : EAnnotation = eAnnotations->select(source = sourceNameCodeGen())->first() /]

[**
 * check and get key value from sourcegen eannotation
*/]
[query public hasKey(aModelElement : EModelElement, aKey:String) : Boolean = if aModelElement.hasSourceGen() then aModelElement.SourceGen().details->select(key = aKey)->notEmpty() else false endif /]
[query public valueKey(aModelElement : EModelElement, aKey:String) : String = aModelElement.SourceGen().details->select(key = aKey)->first().value /]

[query public containsContainerAttribute(aClass : EClass) : Boolean =  getContainsContainerAttribute()->notEmpty() /]
[query public getContainsContainerAttribute(aClass : EClass) : OrderedSet(EReference) =  aClass.eReferences->select(isContainerAttribute())->sortedBy(name) /]

[query public isContainerAttribute(aRef : EReference) : Boolean =  not (aRef.hasKey(keyNoBackReference())) and  aRef.container or (aRef->closure(eAnnotations->select(source=sourceNameSubset()).references.oclAsType(EReference))->select(container)->size() > 0)  /]

[query public getSuperTypeContainers(aClass:EClass) : OrderedSet(EReference) = if not(aClass.eSuperTypes->isEmpty()) then aClass.eSuperTypes.getAllContainers()->flatten()->asOrderedSet() else OrderedSet{} endif /]

[query public getAllContainers(aClass : EClass) : OrderedSet(EReference) =  if getContainsContainerAttribute()->notEmpty() then if getSuperTypeContainers()->isEmpty() then getContainsContainerAttribute() else OrderedSet{getContainsContainerAttribute()}->append(getSuperTypeContainers()->flatten()->reject(oclIsUndefined())->asOrderedSet())->flatten()->asOrderedSet() endif else getSuperTypeContainers()->asOrderedSet() endif /]
[comment][query public getFirstContainer(aClass : EClass) : EReference =  if getContainsContainerAttribute()->notEmpty() then getContainsContainerAttribute()->first() else if not(aClass.eSuperTypes->isEmpty()) then aClass.eSuperTypes.getFirstContainer()->flatten() else null endif endif /][/comment]

[query public hasImplOnly(aModelElement : EModelElement) : Boolean =  if aModelElement.hasKey(keyImplOnly()) then aModelElement.valueKey(keyImplOnly())='true' else false endif /]
[query public doNotGenerate(aModelElement : EModelElement) : Boolean =  if aModelElement.hasKey(keyDoNotGenerate()) then aModelElement.valueKey(keyDoNotGenerate())='true' else false endif /]
[query public hasImplSetterOnly(aModelElement : EModelElement) : Boolean = if aModelElement.hasKey(keyImplSetterOnly()) then aModelElement.valueKey(keyImplSetterOnly())='true' else false endif/]

[query public SetterName(feature : EStructuralFeature) : String = if hasKey(keySetterName()) then valueKey(keySetterName()) else 'set'.concat(name.toUpperFirst()) endif/]
[query public GetterName(feature : EStructuralFeature) : String = if hasKey(keyGetterName()) then valueKey(keyGetterName()) else getterPrefix().concat(name.toUpperFirst()) endif/]

[query public packageGetter(aReference : EReference) : String = if oclIsUndefined() then 'nullptr' else getterPrefix().concat(getMemberNameUpperFirst()).concat('()') endif/]
[query public packageGetter(aAttribute : EAttribute) : String = 'get'.concat(getMemberNameUpperFirst()).concat('()') /]

[query public metamodelPackageNameForEstructuralFeture(aStructural : EStructuralFeature,aClass: EClass) : String = if( aStructural.eContainingClass.ePackage = aClass.getRootPackage()) then generateNamespaceDefinition(aStructural.eContainingClass.ePackage).concat('::').concat(aStructural.eContainingClass.ePackage.name.toUpperFirst()).concat('Package') else generateNamespaceDefinition(aStructural.eContainingClass).concat('::').concat(aStructural.eContainingClass.ePackage.name).concat('Package') endif/]

[**
 * Get a string of the getterfunction for the element in the corresponding metamodel package 
*/] 
[query public packageGetter(aEClassifier : EClassifier, aStruct : EStructuralFeature) : String = packageGetter(aEClassifier,aStruct.eContainingClass) /]
[query public packageGetter(aEClass : EClass, supertype : EClass) : String = packageGetter(supertype.oclAsType(EClassifier),aEClass.oclAsType(EClassifier)) /]
[query public packageGetter(aEClassifier1 : EClassifier, aEClassifier2 : EClassifier) : String = needMetaModelPackageGetter(aEClassifier1, aEClassifier2).concat('get').concat(aEClassifier1.getMemberNameUpperFirst()).concat('()') /]
[query public needMetaModelPackageGetter(aClassifier1 : EClassifier ,aClassifier2 : EClassifier ) : String = if(aClassifier1.generateNamespaceDefinition() = aClassifier2.generateNamespaceDefinition()) then '' else  aClassifier1.getPackage_eInstance().concat('->')  endif /]

[**
 * Subset Union helper queries
*/]
[query public hasSubset(aModelElement : EModelElement) : Boolean = eAnnotations->select(source = sourceNameSubset())->notEmpty()  /]
[query public isUnion(aModelElement : EModelElement) : Boolean = eAnnotations->select(source = sourceNameUnion())->notEmpty()  /]
[query public isSubsetUnion(aModelElement: EModelElement) : Boolean = hasSubset() and (isUnion() or subsetIsUnion())/]
[query public Subset(aModelElement : EModelElement) : Set(EObject) = eAnnotations->select(source = sourceNameSubset())->asOrderedSet()->first().references /]

[query public subsetIsUnion(aModelElement : EModelElement) : Boolean = aModelElement.ancestors(EPackage).eAllContents()->filter(EAnnotation)->select(a:EAnnotation|a.source=sourceNameSubset()).references->includes(self) /]

[query public findLowerSubset(owner: EClass, thisClass : EClass, ref : EReference) : EReference = let r : EReference = owner.getSubsetsForUnion(ref)->select(aRef : EReference | aRef.eType = thisClass)->asOrderedSet()->first() in if r.oclIsUndefined() then ref else r endif /]


[**
 * 
*/]

[query public generateTypeClass(anEClass : EClass, ignoreNamespace : Boolean) : String = if (ignoreNamespace) then anEClass.name else anEClass.generateNamespaceDefinition().concat('::').concat(anEClass.name) endif /]
[query public generateTypeClass(anEClass : EClass) : String = anEClass.generateTypeClass(anEClass.ePackage = anEClass.getRootPackage()) /]

[query public metamodelaTypedElementString(aStructuralFeature : EStructuralFeature) : String = aStructuralFeature.eClass().generateTypeClass(aStructuralFeature.eContainingClass.ePackage = aStructuralFeature.eClass().ePackage) /]
[query public metamodelaTypedElementString(aOperation : EOperation) : String = aOperation.eClass().generateTypeClass(aOperation.eContainingClass.ePackage = aOperation.eClass().ePackage) /]

[query public metaModelTypeString(aClass : EClassifier) : String = metaModelTypeString(aClass, aClass.ePackage) /]
[query public metaModelTypeString(anENamedElement : ENamedElement, anEPackage : EPackage) : String = anENamedElement.eClass().generateTypeClass(anEPackage = anENamedElement.eClass()) /]

[query public needNamespace(anPackage : EPackage,str :String) : String = if not( anPackage.name = 'ecore') then 'ecore::'.concat(str) else str endif /]

[query public ClassWithNamespace(aClass : EClass, base : EClass) : String = if aClass.generateNamespaceDefinition() = base.generateNamespaceDefinition() then base.name else base.generateNamespaceDefinition().concat('::').concat(base.name) endif /] 

[query private getGuardName(namedelement : ENamedElement, sufix: String) : String = 
		if (namedelement.eContainer().oclIsUndefined()) 
		then namedelement.name.concat(sufix).concat('_hpp').toUpperCase() 
		else namedelement.eContainer().oclAsType(EPackage).getNamespace('_', false).concat('_').concat(namedelement.name).concat(sufix).concat('_hpp').toUpperCase()
		endif/]

[**
 * Helper for include guard
*/]
[template public startGuard(namedelement : ENamedElement)]
[startGuard(namedelement,'')/]
[/template]

[template public startGuard(namedelement : ENamedElement, sufix : String)]
//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef [getGuardName(sufix)/]
#define [getGuardName(sufix)/]
[/template]

[template public defineDebugMacros(namedelement : ENamedElement)]
#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"
[/template]

[template public endGuard(namedelement : ENamedElement)]
[endGuard(namedelement, '')/]
[/template]

[template public endGuard(namedelement : ENamedElement, sufix : String)]
#endif /* end of include guard: [getGuardName(sufix)/] */
[/template]

[query public hasDocumentationnAnnotation(aModelElement : EModelElement) : Boolean = eAnnotations->select(source = sourceNameGenModel())->notEmpty()  /]
[query public DocumentationAnnotation(aModelElement : EModelElement) : EAnnotation = eAnnotations->select(source = sourceNameGenModel())->first() /]

[query public hasDocKey(aModelElement : EModelElement) : Boolean = if aModelElement.hasDocumentationnAnnotation() then aModelElement.DocumentationAnnotation().details->select(key = keyDocumentation())->notEmpty() else false endif /]
[query public docDescription(aModelElement : EModelElement) : String = aModelElement.DocumentationAnnotation().details->select(key = keyDocumentation())->first().value /]

[**
 * Add the doxygen documentation for .
 * @param aElement 
 */]
[template public generateDokumentation(aElement : EModelElement)]
/*!
 [if (aElement.hasDocKey())][aElement.docDescription()/] [/if]
*/
[/template]

[query public ignore(aModelElement : EModelElement) : Boolean = eAnnotations->select(source = sourceNameIgnore())->notEmpty()  /]

[query public getUnionsReference(aClass : EClass) : Set(EReference) = OrderedSet{aClass.getSubsetedUnionsReference(),aClass.eReferences->select(isUnion())}->flatten()->sortedBy(name) /]

[query public getSubsetedUnionsReference(aClass : EClass): Set(EReference) =  aClass.eAllReferences->select(if hasSubset() then not Subset()->forAll(e| not e.oclAsType(EModelElement).isUnion()) else false endif ).Subset().oclAsType(EReference)->asOrderedSet()->sortedBy(name)/]
[query public getSubsetsForUnion(aClass : EClass,union : EReference): Set(EReference) =  aClass.eAllReferences->select(if hasSubset() then not Subset()->forAll(e| not (e.oclAsType(EReference) = union)) else false endif ).oclAsType(EReference)->asOrderedSet()->sortedBy(name)/]

[query public getClassifierIDName(anEClass : EClass) : String = if(name = 'EClass' or name = 'EDataType' or name = 'EEnum') then 'MetaElement' else getFeatureIDName(anEClass) endif/]
[query public getFeatureIDName(anEClass : EClass) : String = if(name = 'EAttribute' or name = 'EReference') then 'Feature' else getOperationIDName(anEClass) endif/]
[query public getOperationIDName(anEClass : EClass) : String = if(name = 'EOperation') then 'Operation' else 'MetaElement' endif/]

[**
 * generate member names for package generation
 *
 *
 */]
[query public getClassMemberName(anENamedElement : ENamedElement) : String = 'm_'.concat(anENamedElement.getMemberName()) /]
[query public getStaticAttributeIDName(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName().toUpperCase() /]
[query public getMemberNameUpperFirst(anENamedElement : ENamedElement) : String = anENamedElement.getMemberName().toUpperFirst() /]

[query public getMemberName(anENamedElement : ENamedElement) : String = if (anENamedElement.oclIsKindOf(EClassifier)) then anENamedElement.oclAsType(EClassifier).getMemberName() else anENamedElement.getMemberNameStructFeat() endif/]
[query private getMemberNameStructFeat(anENamedElement : ENamedElement) : String = if (anENamedElement.oclIsKindOf(EStructuralFeature)) then anENamedElement.oclAsType(EStructuralFeature).getMemberName() else anENamedElement.getMemberNameOperation() endif/]
[query private getMemberNameOperation(anENamedElement : ENamedElement) : String = if (anENamedElement.oclIsKindOf(EOperation)) then anENamedElement.oclAsType(EOperation).getMemberName() else anENamedElement.getMemberNameGeneral() endif/]
[query private getMemberNameGeneral(anENamedElement : ENamedElement) : String = anENamedElement.name.toLowerFirst().concat('_') /]

[query public getMemberName(anEClassifier : EClassifier) : String = anEClassifier.name.toLowerFirst().concat('_Class') /]
[query public getMemberName(aStructural : EStructuralFeature) : String = eContainingClass.name.toLowerFirst().concat('_Attribute_').concat(aStructural.name.toLowerFirst()) /]
[query public getMemberName(aOperation : EOperation) : String = aOperation.eContainingClass.name.toLowerFirst().concat('_Operation_'.concat(aOperation.name.toLowerFirst()).concat(aOperation.parameterListName())) /]

[query public parameterListName( aOperation : EOperation) : String = if aOperation.eParameters->notEmpty() then '_'.concat(aOperation.singlemultipleParameter()) else '' endif /]
[query public singlemultipleParameter(aOperation : EOperation) : String = if aOperation.eParameters->size()>1 then aOperation.eParameters->first().eType.name.concat('_').concat(aOperation.eParameters->last().eType.name) else aOperation.eParameters->first().eType.name endif /]
[query public getMyClassifierID(anEClassifier : EClassifier) : EInt = anEClassifier.getRootPackage().eAllContents()->selectByKind(EClassifier)->sortedBy(name)->indexOf(anEClassifier) /]

[query public getPackageAccess(aSubPackage : EPackage, usePackage : Boolean) : String = if usePackage = true then if not aSubPackage.eSuperPackage->isEmpty() then getPackageAccess(aSubPackage.eSuperPackage, usePackage).concat('::').concat(aSubPackage.name) else '' endif else  if not aSubPackage.eSuperPackage->isEmpty() then getPackageAccess(aSubPackage.eSuperPackage, usePackage).concat('->get').concat(aSubPackage.name).concat('_Package()') else ''  endif endif/]
[query public getPackageAccess(aClass : EClassifier, usePackage : Boolean ) : String = if usePackage = true then getPackageAccess(aClass.ePackage, usePackage ) else getPackageAccess(aClass.ePackage, usePackage ) endif /]
[query public getPackage_eInstance(aClass : EClassifier) : String = aClass.getRootPackage().name.concat(getPackageAccess(aClass, true)).concat('::').concat(aClass.ePackage.name.toUpperFirst()).concat('Package::eInstance()')/]

[template public generateAbstractDataTypesForwardDeclaration(anEClass : EClass)]
[if (anEClass.eReferences->select(upperBound <> 1 and not hasSubset() and not isUnion())->size() > 0 or anEClass.eOperations.eParameters->select((eType.requiresBag()  or upperBound <> 1) and not doNotGenerate())->size() > 0)]
template<class T> class Bag; 
[/if]
[if (anEClass.eReferences->select(hasSubset() and not isSubsetUnion())->size() > 0)]
template<class T, class ... U> class Subset;
[/if]
[if (anEClass.eReferences->select(isSubsetUnion())->size() > 0)]
template<class T, class ... U> class SubsetUnion;
[/if]
[if (anEClass.eReferences->select(isUnion() and not isSubsetUnion())->size() > 0)]
template<class T> class Union;[/if]
[/template]

[template public generateAbstractDataTypesIncludes(anEClass : EClass)]
[if (anEClass.eAllReferences->select(upperBound <> 1 and not hasSubset() and not isUnion())->size() > 0 or anEClass.eAllOperations.eParameters->select((eType.requiresBag()  or upperBound <> 1) and not doNotGenerate())->size() > 0)]
#include "abstractDataTypes/Bag.hpp"
[/if]
[if (anEClass.eAllReferences->select((hasSubset() and not isSubsetUnion()) or eOpposite.existsAndIsSubet())->size() > 0)]
#include "abstractDataTypes/Subset.hpp"
[/if]
[if (anEClass.eAllReferences->select(isSubsetUnion()or eOpposite.existsAndIsSubetUnion())->size() > 0)]
#include "abstractDataTypes/SubsetUnion.hpp"
[/if]
[if (anEClass.eAllReferences->select((isUnion() and not isSubsetUnion()) or eOpposite.existsAndIsUnion())->size() > 0)]
#include "abstractDataTypes/Union.hpp"[/if]
[/template]

[template public generateAbstractDataTypesIncludes(anEPackage : EPackage)]
#include "abstractDataTypes/SubsetUnion.hpp"
[/template]

[query private existsAndIsSubet(anEReference : EReference) : Boolean = if (anEReference.oclIsUndefined()) then false else anEReference.hasSubset() and not isSubsetUnion() endif/]
[query private existsAndIsSubetUnion(anEReference : EReference) : Boolean = if (anEReference.oclIsUndefined()) then false else anEReference.isSubsetUnion() endif/]
[query private existsAndIsUnion(anEReference : EReference) : Boolean = if (anEReference.oclIsUndefined()) then false else anEReference.isUnion() and not isSubsetUnion() endif/]
[query public requiresBag(anEClassifier : EClassifier) : Boolean = if (oclIsUndefined()) then false else (name = 'ETreeIterator' or name = 'EEList') endif/]

[query public generateObjectMonitoring(anEObject : EObject) : Boolean = false/]