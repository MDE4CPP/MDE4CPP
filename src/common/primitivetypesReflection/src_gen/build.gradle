// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::configuration::generateGradleFiles
plugins{
	id "tui.sse.mde4cpp.MDE4CPPCompile" version "0.6"	
}
import org.gradle.internal.os.OperatingSystem;

description 'Compile tasks for project: primitivetypesReflection'

task compilePrimitivetypesReflection(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'primitivetypesReflection'
	description 'compile primitivetypesReflection'

	projectFolder = file('.' + File.separator + 'primitivetypesReflection')

	inputs.files(fileTree('.') {
        exclude 'primitivetypesReflection/.cmake/**'
    })

	if(!file('.' + File.separator + 'primitivetypesReflection' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}

	if(OperatingSystem.current().isWindows()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','primitivetypesReflection' +       '.dll'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','primitivetypesReflection' + 'd' + '.dll'].join(File.separator))}
	}
	else if(OperatingSystem.current().isLinux()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','primitivetypesReflection' +       '.so'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','primitivetypesReflection' + 'd' + '.so'].join(File.separator))}
	}
	else if(OperatingSystem.current().isMacOsX()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','primitivetypesReflection' +       '.dylib'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','primitivetypesReflection' + 'd' + '.dylib'].join(File.separator))}
	}
	else {
	    //not supported os
	}

	outputs.files(fileTree([rootDir,'application','include','primitivetypesReflection'].join(File.separator)))
	outputs.dir([rootDir,'application','include','primitivetypesReflection'].join(File.separator))

	dependsOn getRootProject().getTasksByName('deliverBasicInterfaces', true)

	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName('compileEcore', true)
	dependsOn ecore
	inputs.files(ecore.outputs)

	// dependency to model 'uml'
	def uml = getRootProject().getTasksByName('compileUml', true)
	dependsOn uml
	inputs.files(uml.outputs)
}

task clean {
	// Extension of gradle built-in task:clean
	doLast {
		def dot_cmake = file('primitivetypesReflection/.cmake')
		if(dot_cmake.exists()){
			delete dot_cmake.absolutePath
			println "deleting: " + dot_cmake.absolutePath
		}
		
		compilePrimitivetypesReflection.outputs.files.each{
			if(it.exists()){
				delete it.absolutePath
			    println "deleting: " + it
			}
  		}
	}
}
