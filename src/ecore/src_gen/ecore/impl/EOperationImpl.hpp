//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EOPERATIONEOPERATIONIMPL_HPP
#define ECORE_EOPERATIONEOPERATIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "ecore/ecore.hpp" 

// model includes
#include "../EOperation.hpp"

#include "ecore/impl/ETypedElementImpl.hpp"

//*********************************
namespace ecore 
{
	class ECORE_API EOperationImpl : virtual public ETypedElementImpl, virtual public EOperation 
	{
		public: 
			EOperationImpl(const EOperationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			EOperationImpl& operator=(EOperationImpl const&); 

		protected:
			friend class ecoreFactoryImpl;
			EOperationImpl();
			virtual std::shared_ptr<ecore::EOperation> getThisEOperationPtr() const;
			virtual void setThisEOperationPtr(std::weak_ptr<ecore::EOperation> thisEOperationPtr);

			//Additional constructors for the containments back reference
			EOperationImpl(std::weak_ptr<ecore::EObject> par_eContainer);
			//Additional constructors for the containments back reference
			EOperationImpl(std::weak_ptr<ecore::EClass> par_eContainingClass);

		public:
			//destructor
			virtual ~EOperationImpl();
			
			//*********************************
			// Operations
			//*********************************
			virtual int getOperationID() ;
			virtual bool isOverrideOf(std::shared_ptr<ecore::EOperation> someOperation) const ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::weak_ptr<ecore::EClass> getEContainingClass() const ;
			virtual std::shared_ptr<Bag<ecore::EClassifier>> getEExceptions() const ;
			virtual std::shared_ptr<Bag<ecore::EGenericType>> getEGenericExceptions() const ;
			virtual std::shared_ptr<Subset<ecore::EParameter, ecore::EObject>> getEParameters() const ;
			virtual std::shared_ptr<Bag<ecore::ETypeParameter>> getETypeParameters() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<ecore::EOperation> m_thisEOperationPtr;
	};
}
#endif /* end of include guard: ECORE_EOPERATIONEOPERATIONIMPL_HPP */
