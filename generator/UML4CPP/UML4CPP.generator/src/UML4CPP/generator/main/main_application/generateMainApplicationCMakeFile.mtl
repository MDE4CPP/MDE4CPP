[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation CMakeLists file for main application
 * 
 */]
[module generateMainApplicationCMakeFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateOpaqueBehavior /]
[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::model_execution::model_execution /]


[template public generateMainApplicationCMakeFile(aPackage : Package) { packageName : String = getPackageName(); }]
[comment ------------------------------------------------------------------- /]
[comment CMakeLists.txt file for application build                           /]
[comment ------------------------------------------------------------------- /]
[file ('../application/src/CMakeLists.txt', false, 'UTF-8')]
# DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
# @generator: uml4cpp::generator::main::generateApplicationFiles

# C++ project of application for [packageName/].uml, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

# [protected ('project_name')]
# You may manually edit the project name, won't be overwritten upon generation.
PROJECT(App_[packageName/])
# [/protected]

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(CMAKE_CXX_STANDARD 17)

[comment IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang") -> not necessary after removing openmp/]
SET(CMAKE_CXX_FLAGS "-Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fmax-errors=5")
IF(APPLE)
  string(APPEND CMAKE_CXX_FLAGS " -Qunused-arguments")
ENDIF(APPLE)
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	main.cpp
# [protected ('cpp')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

INCLUDE_DIRECTORIES(
	../
	${MDE4CPP_HOME}/application/include
# [protected ('includes')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

# Apple specific stuff
IF(APPLE)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
  SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup")
ENDIF(APPLE)

IF(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
	[generateCMakeFindLibraryCommands('.so', 'bin', 'Linux')/]
ELSEIF(APPLE)
	[generateCMakeFindLibraryCommands('.dylib', 'bin', 'Apple')/]
ELSE()
	[generateCMakeFindLibraryCommands('', 'lib', 'Win')/]
ENDIF()

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")

IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateLibraryLinking(true)/]
ELSE()
	[generateLibraryLinking(false)/]
ENDIF()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME} 
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
)
[/file]
[/template]

[template private generateCMakeFindLibraryCommands(aPackage : Package, ending : String, folderName : String, system : String)]
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, true, system)/]
ELSE()
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, false, system)/]
ENDIF()
[/template]

[template private generateCMakeFindLibraryCommand(aPackage : Package, ending : String, folderName : String, debugMode : Boolean, system : String)]
[for (packName : String | aPackage.collectIncludingModelNames())]
FIND_LIBRARY([packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [packName/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[/for]
FIND_LIBRARY([aPackage.getPackageName().toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [aPackage.getPackageName()/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[if (aPackage.hasMainActivity() or (aPackage.isPSSMExecutable() and aPackage.hasMainStateMachine()))]
FIND_LIBRARY(PLUGINFRAMEWORK_[libraryVariableNameSuffix(debugMode)/] pluginFramework[libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[elseif (aPackage.hasMainOpaqueBehavior() and aPackage.getMainOpaqueBehavior().hasLanguage(keyLibrary()))]
	[for (libName : String | aPackage.getMainOpaqueBehavior().getEntriesForLanguageTokenized(keyLibrary()))]
FIND_LIBRARY([libName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [libName/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
	[/for]
[/if]

# [protected ('library_' + system + '_' + buildModeCMakeProperty(debugMode))] 
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
[/template]

[template private generateLibraryLinking(aPackage : Package, debugMode : Boolean)]
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
[for (packName : String | aPackage.collectIncludingModelNames())]
	[buildModeCMakeProperty(debugMode)/] ${[packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
[/for]
	[buildModeCMakeProperty(debugMode)/] ${[aPackage.getPackageName().toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
[if (aPackage.hasMainActivity() or (aPackage.isPSSMExecutable() and aPackage.hasMainStateMachine()))]
	[buildModeCMakeProperty(debugMode)/] ${PLUGINFRAMEWORK_[libraryVariableNameSuffix(debugMode)/]}
[elseif (aPackage.hasMainOpaqueBehavior() and aPackage.getMainOpaqueBehavior().hasLanguage(keyLibrary()))]
	[for (libName : String | aPackage.getMainOpaqueBehavior().getEntriesForLanguageTokenized(keyLibrary()))]
	[buildModeCMakeProperty(debugMode)/] ${[libName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
	[/for]
[/if]

	# [protected ('library_linking_' + buildModeCMakeProperty(debugMode))] 
	# You may manually edit the following lines, won't be overwritten upon generation.

	# [/protected]
)
[/template]
[query private libraryVariableNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'DEBUG' else 'RELEASE' endif/]
[query private libraryNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'd' else '' endif/]
[query private buildModeCMakeProperty(debugMode : Boolean) : String = if (debugMode) then 'debug' else 'optimized' endif/]
