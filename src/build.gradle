/*
 * MDE4CPP - Model Driven Engineering for C++
 *
 * Copyright (c) TU Ilmenau, Systems and Software Engineering Group
 * All rights reserved.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

description 'Models and generated source code collection'

task deliverBasicInterfaces() {
	group 'Basic interfaces'
	description 'deliver abstractDataTypes, util, persistence and pluginFramework interfaces'
		
	dependsOn 'common:abstractDataTypes:deliverAbstractDataTypes'
	dependsOn 'common:pluginFramework:deliverPluginFrameworkInterface'
	dependsOn 'common:persistence:deliverPersistenceInterface'
	dependsOn 'util:deliverUtil'
}

task buildEcoreModels() {
	group 'Source'
	description 'generate and compile all ecore models'
	
	dependsOn 'ecore:buildEcore'
	dependsOn 'uml:types:buildTypes'
	dependsOn 'uml:uml:buildUml'
	dependsOn 'fuml:buildFUML'
	//dependsOn 'pscs:buildPSCS'
	//dependsOn 'ocl:oclModel:buildOcl'
}


task buildReflectionModels() {
	group 'Source'
	description 'generate and compile reflection models'
	
	dependsOn 'common:ecoreReflection:buildEcoreReflection'
	dependsOn 'common:primitivetypesReflection:buildPrimitivetypesReflection'
	dependsOn 'common:umlReflection:buildUmlReflection'
}

task buildUMLProfiles() {
	group 'Source'
	description 'generate and compile uml profile models'
	
	dependsOn 'common:standardProfile:buildStandardProfile'
	dependsOn 'common:UML4CPPProfile:buildUML4CPPProfile'
}


// Compile all without generating the models
task compileEcoreModels() {
	group 'Source'
	description 'compile all ecore models'
	
	dependsOn 'deliverBasicInterfaces'
	
	dependsOn 'ecore:src_gen:compileEcore'
	dependsOn 'uml:types:src_gen:compileTypes'
	dependsOn 'uml:uml:src_gen:compileUml'
	dependsOn 'fuml:src_gen:compileFUML'
	//dependsOn 'pscs:src_gen:compilePSCS'
	//dependsOn 'ocl:oclModel:src_gen:compileOcl'
}

// Compile all without generating the models
task compileReflectionModels() {
	group 'Source'
	description 'compile all reflection models'
	
	dependsOn 'common:ecoreReflection:src_gen:compileEcoreReflection'
	dependsOn 'common:primitivetypesReflection:src_gen:compilePrimitivetypesReflection'
	dependsOn 'common:umlReflection:src_gen:compileUmlReflection'
	
	/*dependsOn 'ocl:oclParser:compileOclParser'
	rootProject.tasks.getByPath(':src:common:umlReflection:src_gen:compileUmlReflection')
		.mustRunAfter rootProject.tasks.getByPath(':src:ocl:oclParser:compileOclParser')*/
}

task compileUMLProfiles() {
	group 'Source'
	description 'compile all uml profile models'
	
	dependsOn 'common:standardProfile:src_gen:compileStandardProfile'
	dependsOn 'common:UML4CPPProfile:src_gen:compileUML4CPPProfile'
}


task generateEcoreModels() {
	group 'Source'
	description 'generate all ecore models'
	
	dependsOn 'ecore:model:generateEcore'
	dependsOn 'uml:types:model:generateTypes'
	dependsOn 'uml:uml:model:generateUml'
	dependsOn 'fuml:model:generateFUML'
	//dependsOn 'pscs:model:generatePSCS'
	//dependsOn 'ocl:oclModel:model:generateOcl'
}


task generateReflectionModels() {
	group 'Source'
	description 'generate all reflection models'
	
	dependsOn 'common:ecoreReflection:model:generateEcoreReflection'
	dependsOn 'common:primitivetypesReflection:model:generatePrimitivetypesReflection'
	dependsOn 'common:umlReflection:model:generateUmlReflection'
}

task generateUMLProfiles() {
	group 'Source'
	description 'generate all uml profile models'
	
	dependsOn 'common:standardProfile:model:generateStandardProfile'
	dependsOn 'common:UML4CPPProfile:model:generateUML4CPPProfile'
}


/**
 * Convert line endings on GNU/Linux & macOS
 */
task dos2unix_srcgen {
	doLast {
		fileTree('.').matching{ 
			include "**/src_gen/**/*.hpp"
			include "**/src_gen/**/*.cpp"
			exclude "**/.cmake"
		}.each { 
			aFile -> exec{
			    commandLine 'dos2unix'
			    args aFile.absolutePath
			}
		}
	}
}

//EOF
