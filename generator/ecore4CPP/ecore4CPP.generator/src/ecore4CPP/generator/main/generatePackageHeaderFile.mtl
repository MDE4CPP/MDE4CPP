[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2021 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR 
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
 * DEALINGS IN THE SOFTWARE.
 */]
[module generatePackageHeaderFile('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]

[template public generatePackageHeaderFile(aPackage : EPackage) { 
	packageName : String = aPackage.getRootPackage().name; 
}]

[comment ------------------------------------------------------------------- /]
[comment generate package dll import/export macro in xxx/xxx.hpp             /]
[comment ------------------------------------------------------------------- /]
[file (packageName.concat('/').concat(packageName).concat('.hpp'), false, 'UTF-8')]
// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// generated by ecore4cpp::generator::main::generatePackageHeaderFile

#ifndef [('__').concat(packageName).concat('_').concat(packageName).concat('_').concat('hpp')/]
#define [('__').concat(packageName).concat('_').concat(packageName).concat('_').concat('hpp')/]

#ifdef _MSC_VER
#pragma once
#endif //_MSC_VER

#if defined(WIN32) || defined(_WIN32) || defined(__WIN32__) || defined(__NT__)
  #if defined([('BUILD_').concat(packageName.toUpper())/])
    #define [packageName.toUpper().concat('_API')/] __declspec(dllexport)
  #else
    #define [packageName.toUpper().concat('_API')/] __declspec(dllimport)
  #endif
#else
  #define [packageName.toUpper().concat('_API')/] 
#endif

#endif //[('__').concat(packageName).concat('_').concat(packageName).concat('_').concat('hpp')/]

//EOF
[/file]
[/template]
