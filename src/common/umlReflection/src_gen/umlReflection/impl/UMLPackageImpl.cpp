#include "umlReflection/impl/UMLPackageImpl.hpp"

//meta meta model classes
#include "uml/Association.hpp"
#include "uml/Class.hpp"
#include "uml/Comment.hpp"
#include "uml/Constraint.hpp"
#include "uml/Enumeration.hpp"
#include "uml/EnumerationLiteral.hpp"
#include "uml/Generalization.hpp"
#include "uml/InstanceValue.hpp"
#include "uml/Interface.hpp"
#include "uml/LiteralBoolean.hpp"
#include "uml/LiteralInteger.hpp"
#include "uml/LiteralUnlimitedNatural.hpp"
#include "uml/OpaqueExpression.hpp"
#include "uml/Operation.hpp"
#include "uml/PackageImport.hpp"
#include "uml/Parameter.hpp"
#include "uml/PrimitiveType.hpp"
#include "uml/ProfileApplication.hpp"
#include "uml/Property.hpp"
#include "uml/TemplateBinding.hpp"
#include "uml/TemplateParameterSubstitution.hpp"

#include "abstractDataTypes/SubsetUnion.hpp"
#include "uml/VisibilityKind.hpp"
//meta meta model factory
#include "uml/UmlFactory.hpp"
#include "uml/UmlPackage.hpp"


//depending model packages
#include "ecoreReflection/EcorePackage.hpp"
#include "ecoreReflection/EcorePackage.hpp"
#include "primitivetypesReflection/PrimitiveTypesPackage.hpp"

#include "ecore/EAttribute.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/EOperation.hpp"
#include "ecore/EPackage.hpp"
#include "ecore/EReference.hpp"

using namespace UML;

UMLPackageImpl::UMLPackageImpl()
{
}

UMLPackageImpl::~UMLPackageImpl()
{
}

bool UMLPackageImpl::isInited = false;

UMLPackage* UMLPackageImpl::create()
{
	if (isInited)
	{
		return UMLPackage::eInstance().get();
	}
	isInited = true;
	
    // Obtain or create and register package, create package meta-data objects
    UMLPackageImpl * metaModelPackage = new UMLPackageImpl();
    return metaModelPackage;
}

void UMLPackageImpl::init(std::shared_ptr<uml::Package> uML)
{
    // Initialize created meta-data
	setThisPackagePtr(uML);
	initMetaModel();
    createPackageContents(uML);
    initializePackageContents(uML);   
}

void UMLPackageImpl::initMetaModel()
{
}

void UMLPackageImpl::createPackageContents(std::shared_ptr<uml::Package> uML)
{
	if (isCreated)
	{
		return;
	}
	isCreated = true;

	std::shared_ptr<uml::UmlFactory> factory = uml::UmlFactory::eInstance();

	createPackageValueSpecifications(uML, factory);
	createPackageInterfaces(uML, factory);
	createPackageClasses(uML, factory);
	createPackageInstanceSpecifications(uML, factory);
	createPackageStereotypes(uML, factory);
	createPackageActivities(uML, factory);
	createPackageDependencies(uML, factory);
	createPackagePrimitiveTypes(uML, factory);
	createPackageEnumerationLiterals(uML, factory);
	createPackageInterfaceRealizations(uML, factory);
}

void UMLPackageImpl::createPackageActivities(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}


void UMLPackageImpl::createPackageClasses(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
	std::shared_ptr<uml::Constraint> con = nullptr;
	std::shared_ptr<uml::OpaqueExpression> oe = nullptr;

	// Abstraction
	uML_Abstraction = factory->createClass_in_Package(uML, uml::UmlPackage::ABSTRACTION_CLASS);
	
    // Abstraction attributes
	uML_Abstraction_mapping = factory->createProperty_in_Class(uML_Abstraction);

    //-------------------------------------------
	// AcceptCallAction
	uML_AcceptCallAction = factory->createClass_in_Package(uML, uml::UmlPackage::ACCEPTCALLACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_AcceptCallAction);
	con->setName("result_pins");
	con->getConstrainedElement()->push_back(uML_AcceptCallAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptCallAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() in"\
	"result->size() = parameter->size() and"\
	"Sequence{1..result->size()}->forAll(i | "\
	"	parameter->at(i).type.conformsTo(result->at(i).type) and "\
	"	parameter->at(i).isOrdered = result->at(i).isOrdered and"\
	"	parameter->at(i).compatibleWith(result->at(i)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AcceptCallAction);
	
	con->setName("trigger_call_event");
	
	con->getConstrainedElement()->push_back(uML_AcceptCallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptCallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("trigger->size()=1 and"\
	
	"trigger->asSequence()->first().event.oclIsKindOf(CallEvent)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AcceptCallAction);
	
	con->setName("unmarshall");
	
	con->getConstrainedElement()->push_back(uML_AcceptCallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptCallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isUnmarshall = true")));
	
	con->setSpecification(oe);
	
    // AcceptCallAction attributes
	uML_AcceptCallAction_returnInformation = factory->createProperty_in_Class(uML_AcceptCallAction);

    //-------------------------------------------
	// AcceptEventAction
	uML_AcceptEventAction = factory->createClass_in_Package(uML, uml::UmlPackage::ACCEPTEVENTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_AcceptEventAction);
	con->setName("conforming_type");
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptEventAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not isUnmarshall implies "\
	"	result->isEmpty() or"\
	"	let type: Type = result->first().type in"\
	"	type=null or "\
	"		(trigger->forAll(event.oclIsKindOf(SignalEvent)) and "\
	"		 trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AcceptEventAction);
	
	con->setName("no_input_pins");
	
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptEventAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("input->size() = 0")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AcceptEventAction);
	
	con->setName("no_output_pins");
	
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptEventAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(self.oclIsTypeOf(AcceptEventAction) and"\
	
	"   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or  "\
	
	"                             event.oclIsKindOf(CallEvent))))"\
	
	"implies output->size() = 0")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AcceptEventAction);
	
	con->setName("one_output_pin");
	
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptEventAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies "\
	
	"	output->size() = 1 and output->first().is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AcceptEventAction);
	
	con->setName("unmarshall_signal_events");
	
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AcceptEventAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isUnmarshall and self.oclIsTypeOf(AcceptEventAction) implies"\
	
	"	trigger->size()=1 and"\
	
	"	trigger->asSequence()->first().event.oclIsKindOf(SignalEvent) and"\
	
	"	let attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() in"\
	
	"	attribute->size()>0 and result->size() = attribute->size() and"\
	
	"	Sequence{1..result->size()}->forAll(i | "\
	
	"		result->at(i).type = attribute->at(i).type and "\
	
	"		result->at(i).isOrdered = attribute->at(i).isOrdered and"\
	
	"		result->at(i).includesMultiplicity(attribute->at(i)))")));
	
	con->setSpecification(oe);
	
    // AcceptEventAction attributes
	uML_AcceptEventAction_isUnmarshall = factory->createProperty_in_Class(uML_AcceptEventAction);
	uML_AcceptEventAction_result = factory->createProperty_in_Class(uML_AcceptEventAction);
	uML_AcceptEventAction_trigger = factory->createProperty_in_Class(uML_AcceptEventAction);

    //-------------------------------------------
	// Action
	uML_Action = factory->createClass_in_Package(uML, uml::UmlPackage::ACTION_CLASS);
	
    // Action attributes
	uML_Action_context = factory->createProperty_in_Class(uML_Action);
	uML_Action_input = factory->createProperty_in_Class(uML_Action);
	uML_Action_isLocallyReentrant = factory->createProperty_in_Class(uML_Action);
	uML_Action_localPostcondition = factory->createProperty_in_Class(uML_Action);
	uML_Action_localPrecondition = factory->createProperty_in_Class(uML_Action);
	uML_Action_output = factory->createProperty_in_Class(uML_Action);
    // Action operations
	uML_Action_allActions__ = factory->createOperation_in_Class(uML_Action);
	uML_Action_allActions_result = factory->createParameter_in_Operation(uML_Action_allActions__);

	uML_Action_allOwnedNodes__ = factory->createOperation_in_Class(uML_Action);
	uML_Action_allOwnedNodes_result = factory->createParameter_in_Operation(uML_Action_allOwnedNodes__);

	uML_Action_containingBehavior__ = factory->createOperation_in_Class(uML_Action);
	uML_Action_containingBehavior_result = factory->createParameter_in_Operation(uML_Action_containingBehavior__);

	uML_Action_context__ = factory->createOperation_in_Class(uML_Action);
	uML_Action_context_result = factory->createParameter_in_Operation(uML_Action_context__);

    //-------------------------------------------
	// ActionExecutionSpecification
	uML_ActionExecutionSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIONEXECUTIONSPECIFICATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ActionExecutionSpecification);
	con->setName("action_referenced");
	con->getConstrainedElement()->push_back(uML_ActionExecutionSpecification);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActionExecutionSpecification));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) and"\
	"let parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union("\
	"enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->"\
	"collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in"\
	"(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction")));
	con->setSpecification(oe);
	
    // ActionExecutionSpecification attributes
	uML_ActionExecutionSpecification_action = factory->createProperty_in_Class(uML_ActionExecutionSpecification);

    //-------------------------------------------
	// ActionInputPin
	uML_ActionInputPin = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIONINPUTPIN_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ActionInputPin);
	con->setName("input_pin");
	con->getConstrainedElement()->push_back(uML_ActionInputPin);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActionInputPin));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("fromAction.input->forAll(oclIsKindOf(ActionInputPin))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActionInputPin);
	
	con->setName("no_control_or_object_flow");
	
	con->getConstrainedElement()->push_back(uML_ActionInputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActionInputPin));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("fromAction.incoming->union(outgoing)->isEmpty() and"\
	
	"fromAction.input.incoming->isEmpty() and"\
	
	"fromAction.output.outgoing->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActionInputPin);
	
	con->setName("one_output_pin");
	
	con->getConstrainedElement()->push_back(uML_ActionInputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActionInputPin));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("fromAction.output->size() = 1")));
	
	con->setSpecification(oe);
	
    // ActionInputPin attributes
	uML_ActionInputPin_fromAction = factory->createProperty_in_Class(uML_ActionInputPin);

    //-------------------------------------------
	// Activity
	uML_Activity = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITY_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Activity);
	con->setName("maximum_one_parameter_node");
	con->getConstrainedElement()->push_back(uML_Activity);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Activity));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedParameter->forAll(p | "\
	"   p.direction <> ParameterDirectionKind::inout implies node->select("\
	"       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Activity);
	
	con->setName("maximum_two_parameter_nodes");
	
	con->getConstrainedElement()->push_back(uML_Activity);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Activity));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedParameter->forAll(p | "\
	
	"p.direction = ParameterDirectionKind::inout implies"\
	
	"let associatedNodes : Set(ActivityNode) = node->select("\
	
	"       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in "\
	
	"  associatedNodes->size()=2 and"\
	
	"  associatedNodes->select(incoming->notEmpty())->size()<=1 and"\
	
	"  associatedNodes->select(outgoing->notEmpty())->size()<=1"\
	
	")")));
	
	con->setSpecification(oe);
	
    // Activity attributes
	uML_Activity_edge = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_group = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_isReadOnly = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_isSingleExecution = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_node = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_ownedGroup = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_ownedNode = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_partition = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_structuredNode = factory->createProperty_in_Class(uML_Activity);
	uML_Activity_variable = factory->createProperty_in_Class(uML_Activity);

    //-------------------------------------------
	// ActivityEdge
	uML_ActivityEdge = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITYEDGE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ActivityEdge);
	con->setName("source_and_target");
	con->getConstrainedElement()->push_back(uML_ActivityEdge);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityEdge));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity")));
	con->setSpecification(oe);
	
    // ActivityEdge attributes
	uML_ActivityEdge_activity = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_guard = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_inGroup = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_inPartition = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_inStructuredNode = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_interrupts = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_redefinedEdge = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_source = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_target = factory->createProperty_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_weight = factory->createProperty_in_Class(uML_ActivityEdge);
    // ActivityEdge operations
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_ActivityEdge);
	uML_ActivityEdge_isConsistentWith_result = factory->createParameter_in_Operation(uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement);uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement);

    //-------------------------------------------
	// ActivityFinalNode
	uML_ActivityFinalNode = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITYFINALNODE_CLASS);
	

    //-------------------------------------------
	// ActivityGroup
	uML_ActivityGroup = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITYGROUP_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ActivityGroup);
	con->setName("nodes_and_edges");
	con->getConstrainedElement()->push_back(uML_ActivityGroup);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityGroup));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("containedNode->forAll(activity = self.containingActivity()) and "\
	"containedEdge->forAll(activity = self.containingActivity())")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityGroup);
	
	con->setName("not_contained");
	
	con->getConstrainedElement()->push_back(uML_ActivityGroup);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityGroup));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("subgroup->closure(subgroup).containedNode->excludesAll(containedNode) and"\
	
	"superGroup->closure(superGroup).containedNode->excludesAll(containedNode) and "\
	
	"subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and "\
	
	"superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)")));
	
	con->setSpecification(oe);
	
    // ActivityGroup attributes
	uML_ActivityGroup_containedEdge = factory->createProperty_in_Class(uML_ActivityGroup);
	uML_ActivityGroup_containedNode = factory->createProperty_in_Class(uML_ActivityGroup);
	uML_ActivityGroup_inActivity = factory->createProperty_in_Class(uML_ActivityGroup);
	uML_ActivityGroup_subgroup = factory->createProperty_in_Class(uML_ActivityGroup);
	uML_ActivityGroup_superGroup = factory->createProperty_in_Class(uML_ActivityGroup);
    // ActivityGroup operations
	uML_ActivityGroup_containingActivity__ = factory->createOperation_in_Class(uML_ActivityGroup);
	uML_ActivityGroup_containingActivity_result = factory->createParameter_in_Operation(uML_ActivityGroup_containingActivity__);

    //-------------------------------------------
	// ActivityNode
	uML_ActivityNode = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITYNODE_CLASS);
	
    // ActivityNode attributes
	uML_ActivityNode_activity = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_inGroup = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_inInterruptibleRegion = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_inPartition = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_inStructuredNode = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_incoming = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_outgoing = factory->createProperty_in_Class(uML_ActivityNode);
	uML_ActivityNode_redefinedNode = factory->createProperty_in_Class(uML_ActivityNode);
    // ActivityNode operations
	uML_ActivityNode_containingActivity__ = factory->createOperation_in_Class(uML_ActivityNode);
	uML_ActivityNode_containingActivity_result = factory->createParameter_in_Operation(uML_ActivityNode_containingActivity__);

	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_ActivityNode);
	uML_ActivityNode_isConsistentWith_result = factory->createParameter_in_Operation(uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement);uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement);

    //-------------------------------------------
	// ActivityParameterNode
	uML_ActivityParameterNode = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITYPARAMETERNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ActivityParameterNode);
	con->setName("has_parameters");
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityParameterNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("activity.ownedParameter->includes(parameter)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityParameterNode);
	
	con->setName("no_edges");
	
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityParameterNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("incoming->isEmpty() or outgoing->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityParameterNode);
	
	con->setName("no_incoming_edges");
	
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityParameterNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(outgoing->notEmpty() and incoming->isEmpty()) implies "\
	
	"	(parameter.direction = ParameterDirectionKind::_'in' or "\
	
	"	 parameter.direction = ParameterDirectionKind::inout)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityParameterNode);
	
	con->setName("no_outgoing_edges");
	
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityParameterNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(incoming->notEmpty() and outgoing->isEmpty()) implies "\
	
	"	(parameter.direction = ParameterDirectionKind::out or "\
	
	"	 parameter.direction = ParameterDirectionKind::inout or "\
	
	"	 parameter.direction = ParameterDirectionKind::return)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityParameterNode);
	
	con->setName("same_type");
	
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityParameterNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("type = parameter.type")));
	
	con->setSpecification(oe);
	
    // ActivityParameterNode attributes
	uML_ActivityParameterNode_parameter = factory->createProperty_in_Class(uML_ActivityParameterNode);

    //-------------------------------------------
	// ActivityPartition
	uML_ActivityPartition = factory->createClass_in_Package(uML, uml::UmlPackage::ACTIVITYPARTITION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ActivityPartition);
	con->setName("dimension_not_contained");
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityPartition));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isDimension implies superPartition->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityPartition);
	
	con->setName("represents_classifier");
	
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityPartition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies"\
	
	"("\
	
	"   let representedClassifier : Classifier = represents.oclAsType(Classifier) in"\
	
	"     superPartition.represents.oclIsKindOf(Classifier) and"\
	
	"      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in"\
	
	"       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and "\
	
	"        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior))) "\
	
	"       or"\
	
	"       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))"\
	
	"       or"\
	
	"       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and "\
	
	"                                                                      a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier))))"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityPartition);
	
	con->setName("represents_property");
	
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityPartition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies"\
	
	"("\
	
	"  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)"\
	
	"  in"\
	
	"    superPartition.subpartition->reject(isExternal)->forAll(p | "\
	
	"       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ActivityPartition);
	
	con->setName("represents_property_and_is_contained");
	
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ActivityPartition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies"\
	
	"("\
	
	"  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or "\
	
	"  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)"\
	
	")")));
	
	con->setSpecification(oe);
	
    // ActivityPartition attributes
	uML_ActivityPartition_edge = factory->createProperty_in_Class(uML_ActivityPartition);
	uML_ActivityPartition_isDimension = factory->createProperty_in_Class(uML_ActivityPartition);
	uML_ActivityPartition_isExternal = factory->createProperty_in_Class(uML_ActivityPartition);
	uML_ActivityPartition_node = factory->createProperty_in_Class(uML_ActivityPartition);
	uML_ActivityPartition_represents = factory->createProperty_in_Class(uML_ActivityPartition);
	uML_ActivityPartition_subpartition = factory->createProperty_in_Class(uML_ActivityPartition);
	uML_ActivityPartition_superPartition = factory->createProperty_in_Class(uML_ActivityPartition);

    //-------------------------------------------
	// Actor
	uML_Actor = factory->createClass_in_Package(uML, uml::UmlPackage::ACTOR_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Actor);
	con->setName("associations");
	con->getConstrainedElement()->push_back(uML_Actor);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Actor));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Actor);
	
	con->setName("must_have_name");
	
	con->getConstrainedElement()->push_back(uML_Actor);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Actor));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("name->notEmpty()")));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// AddStructuralFeatureValueAction
	uML_AddStructuralFeatureValueAction = factory->createClass_in_Package(uML, uml::UmlPackage::ADDSTRUCTURALFEATUREVALUEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_AddStructuralFeatureValueAction);
	con->setName("insertAt_pin");
	con->getConstrainedElement()->push_back(uML_AddStructuralFeatureValueAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AddStructuralFeatureValueAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if not structuralFeature.isOrdered then insertAt = nullelse   not isReplaceAll implies  	insertAt<>null and   	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))endif")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AddStructuralFeatureValueAction);
	
	con->setName("required_value");
	
	con->getConstrainedElement()->push_back(uML_AddStructuralFeatureValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AddStructuralFeatureValueAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value<>null")));
	
	con->setSpecification(oe);
	
    // AddStructuralFeatureValueAction attributes
	uML_AddStructuralFeatureValueAction_insertAt = factory->createProperty_in_Class(uML_AddStructuralFeatureValueAction);
	uML_AddStructuralFeatureValueAction_isReplaceAll = factory->createProperty_in_Class(uML_AddStructuralFeatureValueAction);

    //-------------------------------------------
	// AddVariableValueAction
	uML_AddVariableValueAction = factory->createClass_in_Package(uML, uml::UmlPackage::ADDVARIABLEVALUEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_AddVariableValueAction);
	con->setName("insertAt_pin");
	con->getConstrainedElement()->push_back(uML_AddVariableValueAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AddVariableValueAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if not variable.isOrdered then insertAt = nullelse   not isReplaceAll implies  	insertAt<>null and   	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))endif")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AddVariableValueAction);
	
	con->setName("required_value");
	
	con->getConstrainedElement()->push_back(uML_AddVariableValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AddVariableValueAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value <> null")));
	
	con->setSpecification(oe);
	
    // AddVariableValueAction attributes
	uML_AddVariableValueAction_insertAt = factory->createProperty_in_Class(uML_AddVariableValueAction);
	uML_AddVariableValueAction_isReplaceAll = factory->createProperty_in_Class(uML_AddVariableValueAction);

    //-------------------------------------------
	// AnyReceiveEvent
	uML_AnyReceiveEvent = factory->createClass_in_Package(uML, uml::UmlPackage::ANYRECEIVEEVENT_CLASS);
	

    //-------------------------------------------
	// Artifact
	uML_Artifact = factory->createClass_in_Package(uML, uml::UmlPackage::ARTIFACT_CLASS);
	
    // Artifact attributes
	uML_Artifact_fileName = factory->createProperty_in_Class(uML_Artifact);
	uML_Artifact_manifestation = factory->createProperty_in_Class(uML_Artifact);
	uML_Artifact_nestedArtifact = factory->createProperty_in_Class(uML_Artifact);
	uML_Artifact_ownedAttribute = factory->createProperty_in_Class(uML_Artifact);
	uML_Artifact_ownedOperation = factory->createProperty_in_Class(uML_Artifact);
    // Artifact operations
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_Artifact);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createParameter_in_Operation(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createParameter_in_Operation(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower = factory->createParameter_in_Operation(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper = factory->createParameter_in_Operation(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type = factory->createOperation_in_Class(uML_Artifact);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn = factory->createParameter_in_Operation(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createParameter_in_Operation(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createParameter_in_Operation(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createParameter_in_Operation(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createParameter_in_Operation(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);

    //-------------------------------------------
	// Association
	uML_Association = factory->createClass_in_Package(uML, uml::UmlPackage::ASSOCIATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Association);
	con->setName("association_ends");
	con->getConstrainedElement()->push_back(uML_Association);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Association));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Association);
	
	con->setName("binary_associations");
	
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Association));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Association);
	
	con->setName("ends_must_be_typed");
	
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Association));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("memberEnd->forAll(type->notEmpty())")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Association);
	
	con->setName("specialized_end_number");
	
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Association));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Association);
	
	con->setName("specialized_end_types");
	
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Association));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("Sequence{1..memberEnd->size()}->"\
	
	"	forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->"\
	
	"		forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))")));
	
	con->setSpecification(oe);
	
    // Association attributes
	uML_Association_endType = factory->createProperty_in_Class(uML_Association);
	uML_Association_isDerived = factory->createProperty_in_Class(uML_Association);
	uML_Association_memberEnd = factory->createProperty_in_Class(uML_Association);
	uML_Association_navigableOwnedEnd = factory->createProperty_in_Class(uML_Association);
	uML_Association_ownedEnd = factory->createProperty_in_Class(uML_Association);
    // Association operations
	uML_Association_endType__ = factory->createOperation_in_Class(uML_Association);
	uML_Association_endType_result = factory->createParameter_in_Operation(uML_Association_endType__);

	uML_Association_isBinary__ = factory->createOperation_in_Class(uML_Association);
	uML_Association_isBinary__return = factory->createParameter_in_Operation(uML_Association_isBinary__);

    //-------------------------------------------
	// AssociationClass
	uML_AssociationClass = factory->createClass_in_Package(uML, uml::UmlPackage::ASSOCIATIONCLASS_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_AssociationClass);
	con->setName("cannot_be_defined");
	con->getConstrainedElement()->push_back(uML_AssociationClass);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AssociationClass));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_AssociationClass);
	
	con->setName("disjoint_attributes_ends");
	
	con->getConstrainedElement()->push_back(uML_AssociationClass);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_AssociationClass));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedAttribute->intersection(ownedEnd)->isEmpty()")));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// Behavior
	uML_Behavior = factory->createClass_in_Package(uML, uml::UmlPackage::BEHAVIOR_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Behavior);
	con->setName("feature_of_context_classifier");
	con->getConstrainedElement()->push_back(uML_Behavior);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Behavior));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("_'context'.feature->includes(specification)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Behavior);
	
	con->setName("most_one_behavior");
	
	con->getConstrainedElement()->push_back(uML_Behavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Behavior));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Behavior);
	
	con->setName("parameters_match");
	
	con->getConstrainedElement()->push_back(uML_Behavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Behavior));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("specification <> null implies ownedParameter->size() = specification.ownedParameter->size()")));
	
	con->setSpecification(oe);
	
    // Behavior attributes
	uML_Behavior_context = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_isReentrant = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_ownedParameter = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_ownedParameterSet = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_postcondition = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_precondition = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_redefinedBehavior = factory->createProperty_in_Class(uML_Behavior);
	uML_Behavior_specification = factory->createProperty_in_Class(uML_Behavior);
    // Behavior operations
	uML_Behavior_behavioredClassifier_Element_Element = factory->createOperation_in_Class(uML_Behavior);
	uML_Behavior_behavioredClassifier_Element_Element_from = factory->createParameter_in_Operation(uML_Behavior_behavioredClassifier_Element_Element);uML_Behavior_behavioredClassifier_result = factory->createParameter_in_Operation(uML_Behavior_behavioredClassifier_Element_Element);

	uML_Behavior_context__ = factory->createOperation_in_Class(uML_Behavior);
	uML_Behavior_context_result = factory->createParameter_in_Operation(uML_Behavior_context__);

	uML_Behavior_inputParameters__ = factory->createOperation_in_Class(uML_Behavior);
	uML_Behavior_inputParameters_result = factory->createParameter_in_Operation(uML_Behavior_inputParameters__);

	uML_Behavior_outputParameters__ = factory->createOperation_in_Class(uML_Behavior);
	uML_Behavior_outputParameters_result = factory->createParameter_in_Operation(uML_Behavior_outputParameters__);

    //-------------------------------------------
	// BehaviorExecutionSpecification
	uML_BehaviorExecutionSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::BEHAVIOREXECUTIONSPECIFICATION_CLASS);
	
    // BehaviorExecutionSpecification attributes
	uML_BehaviorExecutionSpecification_behavior = factory->createProperty_in_Class(uML_BehaviorExecutionSpecification);

    //-------------------------------------------
	// BehavioralFeature
	uML_BehavioralFeature = factory->createClass_in_Package(uML, uml::UmlPackage::BEHAVIORALFEATURE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_BehavioralFeature);
	con->setName("abstract_no_method");
	con->getConstrainedElement()->push_back(uML_BehavioralFeature);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_BehavioralFeature));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isAbstract implies method->isEmpty()")));
	con->setSpecification(oe);
	
    // BehavioralFeature attributes
	uML_BehavioralFeature_concurrency = factory->createProperty_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_isAbstract = factory->createProperty_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_method = factory->createProperty_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_ownedParameter = factory->createProperty_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_ownedParameterSet = factory->createProperty_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_raisedException = factory->createProperty_in_Class(uML_BehavioralFeature);
    // BehavioralFeature operations
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type = factory->createOperation_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn = factory->createParameter_in_Operation(uML_BehavioralFeature_createReturnResult_String_Type_String_Type);uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name = factory->createParameter_in_Operation(uML_BehavioralFeature_createReturnResult_String_Type_String_Type);uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type = factory->createParameter_in_Operation(uML_BehavioralFeature_createReturnResult_String_Type_String_Type);

	uML_BehavioralFeature_inputParameters__ = factory->createOperation_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_inputParameters_result = factory->createParameter_in_Operation(uML_BehavioralFeature_inputParameters__);

	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace = factory->createOperation_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_isDistinguishableFrom_result = factory->createParameter_in_Operation(uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n = factory->createParameter_in_Operation(uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns = factory->createParameter_in_Operation(uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);

	uML_BehavioralFeature_outputParameters__ = factory->createOperation_in_Class(uML_BehavioralFeature);
	uML_BehavioralFeature_outputParameters_result = factory->createParameter_in_Operation(uML_BehavioralFeature_outputParameters__);

    //-------------------------------------------
	// BehavioredClassifier
	uML_BehavioredClassifier = factory->createClass_in_Package(uML, uml::UmlPackage::BEHAVIOREDCLASSIFIER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_BehavioredClassifier);
	con->setName("class_behavior");
	con->getConstrainedElement()->push_back(uML_BehavioredClassifier);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_BehavioredClassifier));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()")));
	con->setSpecification(oe);
	
    // BehavioredClassifier attributes
	uML_BehavioredClassifier_classifierBehavior = factory->createProperty_in_Class(uML_BehavioredClassifier);
	uML_BehavioredClassifier_interfaceRealization = factory->createProperty_in_Class(uML_BehavioredClassifier);
	uML_BehavioredClassifier_ownedBehavior = factory->createProperty_in_Class(uML_BehavioredClassifier);
    // BehavioredClassifier operations
	uML_BehavioredClassifier_getAllImplementedInterfaces__ = factory->createOperation_in_Class(uML_BehavioredClassifier);
	uML_BehavioredClassifier_getAllImplementedInterfaces__return = factory->createParameter_in_Operation(uML_BehavioredClassifier_getAllImplementedInterfaces__);

	uML_BehavioredClassifier_getImplementedInterfaces__ = factory->createOperation_in_Class(uML_BehavioredClassifier);
	uML_BehavioredClassifier_getImplementedInterfaces__return = factory->createParameter_in_Operation(uML_BehavioredClassifier_getImplementedInterfaces__);

    //-------------------------------------------
	// BroadcastSignalAction
	uML_BroadcastSignalAction = factory->createClass_in_Package(uML, uml::UmlPackage::BROADCASTSIGNALACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_BroadcastSignalAction);
	con->setName("no_onport");
	con->getConstrainedElement()->push_back(uML_BroadcastSignalAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_BroadcastSignalAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("onPort=null")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_BroadcastSignalAction);
	
	con->setName("number_of_arguments");
	
	con->getConstrainedElement()->push_back(uML_BroadcastSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_BroadcastSignalAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("argument->size() = signal.allAttributes()->size()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_BroadcastSignalAction);
	
	con->setName("type_ordering_multiplicity");
	
	con->getConstrainedElement()->push_back(uML_BroadcastSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_BroadcastSignalAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let attribute: OrderedSet(Property) = signal.allAttributes() in"\
	
	"Sequence{1..argument->size()}->forAll(i | "\
	
	"	argument->at(i).type.conformsTo(attribute->at(i).type) and "\
	
	"	argument->at(i).isOrdered = attribute->at(i).isOrdered and"\
	
	"	argument->at(i).compatibleWith(attribute->at(i)))")));
	
	con->setSpecification(oe);
	
    // BroadcastSignalAction attributes
	uML_BroadcastSignalAction_signal = factory->createProperty_in_Class(uML_BroadcastSignalAction);

    //-------------------------------------------
	// CallAction
	uML_CallAction = factory->createClass_in_Package(uML, uml::UmlPackage::CALLACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CallAction);
	con->setName("argument_pins");
	con->getConstrainedElement()->push_back(uML_CallAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CallAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let parameter: OrderedSet(Parameter) = self.inputParameters() in"\
	"argument->size() = parameter->size() and"\
	"Sequence{1..argument->size()}->forAll(i | "\
	"	argument->at(i).type.conformsTo(parameter->at(i).type) and "\
	"	argument->at(i).isOrdered = parameter->at(i).isOrdered and"\
	"	argument->at(i).compatibleWith(parameter->at(i)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CallAction);
	
	con->setName("result_pins");
	
	con->getConstrainedElement()->push_back(uML_CallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let parameter: OrderedSet(Parameter) = self.outputParameters() in"\
	
	"result->size() = parameter->size() and"\
	
	"Sequence{1..result->size()}->forAll(i | "\
	
	"	parameter->at(i).type.conformsTo(result->at(i).type) and "\
	
	"	parameter->at(i).isOrdered = result->at(i).isOrdered and"\
	
	"	parameter->at(i).compatibleWith(result->at(i)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CallAction);
	
	con->setName("synchronous_call");
	
	con->getConstrainedElement()->push_back(uML_CallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result->notEmpty() implies isSynchronous")));
	
	con->setSpecification(oe);
	
    // CallAction attributes
	uML_CallAction_isSynchronous = factory->createProperty_in_Class(uML_CallAction);
	uML_CallAction_result = factory->createProperty_in_Class(uML_CallAction);
    // CallAction operations
	uML_CallAction_inputParameters__ = factory->createOperation_in_Class(uML_CallAction);
	uML_CallAction_inputParameters_result = factory->createParameter_in_Operation(uML_CallAction_inputParameters__);

	uML_CallAction_outputParameters__ = factory->createOperation_in_Class(uML_CallAction);
	uML_CallAction_outputParameters_result = factory->createParameter_in_Operation(uML_CallAction_outputParameters__);

    //-------------------------------------------
	// CallBehaviorAction
	uML_CallBehaviorAction = factory->createClass_in_Package(uML, uml::UmlPackage::CALLBEHAVIORACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CallBehaviorAction);
	con->setName("no_onport");
	con->getConstrainedElement()->push_back(uML_CallBehaviorAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CallBehaviorAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("onPort=null")));
	con->setSpecification(oe);
	
    // CallBehaviorAction attributes
	uML_CallBehaviorAction_behavior = factory->createProperty_in_Class(uML_CallBehaviorAction);
    // CallBehaviorAction operations
	uML_CallBehaviorAction_inputParameters__ = factory->createOperation_in_Class(uML_CallBehaviorAction);
	uML_CallBehaviorAction_inputParameters_result = factory->createParameter_in_Operation(uML_CallBehaviorAction_inputParameters__);

	uML_CallBehaviorAction_outputParameters__ = factory->createOperation_in_Class(uML_CallBehaviorAction);
	uML_CallBehaviorAction_outputParameters_result = factory->createParameter_in_Operation(uML_CallBehaviorAction_outputParameters__);

    //-------------------------------------------
	// CallEvent
	uML_CallEvent = factory->createClass_in_Package(uML, uml::UmlPackage::CALLEVENT_CLASS);
	
    // CallEvent attributes
	uML_CallEvent_operation = factory->createProperty_in_Class(uML_CallEvent);

    //-------------------------------------------
	// CallOperationAction
	uML_CallOperationAction = factory->createClass_in_Package(uML, uml::UmlPackage::CALLOPERATIONACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CallOperationAction);
	con->setName("type_target_pin");
	con->getConstrainedElement()->push_back(uML_CallOperationAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CallOperationAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)"\
	"else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)"\
	"endif")));
	con->setSpecification(oe);
	
    // CallOperationAction attributes
	uML_CallOperationAction_operation = factory->createProperty_in_Class(uML_CallOperationAction);
	uML_CallOperationAction_target = factory->createProperty_in_Class(uML_CallOperationAction);
    // CallOperationAction operations
	uML_CallOperationAction_inputParameters__ = factory->createOperation_in_Class(uML_CallOperationAction);
	uML_CallOperationAction_inputParameters_result = factory->createParameter_in_Operation(uML_CallOperationAction_inputParameters__);

	uML_CallOperationAction_outputParameters__ = factory->createOperation_in_Class(uML_CallOperationAction);
	uML_CallOperationAction_outputParameters_result = factory->createParameter_in_Operation(uML_CallOperationAction_outputParameters__);

    //-------------------------------------------
	// CentralBufferNode
	uML_CentralBufferNode = factory->createClass_in_Package(uML, uml::UmlPackage::CENTRALBUFFERNODE_CLASS);
	

    //-------------------------------------------
	// ChangeEvent
	uML_ChangeEvent = factory->createClass_in_Package(uML, uml::UmlPackage::CHANGEEVENT_CLASS);
	
    // ChangeEvent attributes
	uML_ChangeEvent_changeExpression = factory->createProperty_in_Class(uML_ChangeEvent);

    //-------------------------------------------
	// Class
	uML_Class = factory->createClass_in_Package(uML, uml::UmlPackage::CLASS_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Class);
	con->setName("passive_class");
	con->getConstrainedElement()->push_back(uML_Class);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Class));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)")));
	con->setSpecification(oe);
	
    // Class attributes
	uML_Class_extension = factory->createProperty_in_Class(uML_Class);
	uML_Class_isAbstract = factory->createProperty_in_Class(uML_Class);
	uML_Class_isActive = factory->createProperty_in_Class(uML_Class);
	uML_Class_nestedClassifier = factory->createProperty_in_Class(uML_Class);
	uML_Class_ownedAttribute = factory->createProperty_in_Class(uML_Class);
	uML_Class_ownedOperation = factory->createProperty_in_Class(uML_Class);
	uML_Class_ownedReception = factory->createProperty_in_Class(uML_Class);
	uML_Class_superClass = factory->createProperty_in_Class(uML_Class);
    // Class operations
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type = factory->createOperation_in_Class(uML_Class);
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn = factory->createParameter_in_Operation(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createParameter_in_Operation(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createParameter_in_Operation(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createParameter_in_Operation(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createParameter_in_Operation(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);

	uML_Class_extension__ = factory->createOperation_in_Class(uML_Class);
	uML_Class_extension_result = factory->createParameter_in_Operation(uML_Class_extension__);

	uML_Class_isMetaclass__ = factory->createOperation_in_Class(uML_Class);
	uML_Class_isMetaclass__return = factory->createParameter_in_Operation(uML_Class_isMetaclass__);

	uML_Class_superClass__ = factory->createOperation_in_Class(uML_Class);
	uML_Class_superClass_result = factory->createParameter_in_Operation(uML_Class_superClass__);

    //-------------------------------------------
	// Classifier
	uML_Classifier = factory->createClass_in_Package(uML, uml::UmlPackage::CLASSIFIER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Classifier);
	con->setName("maps_to_generalization_set");
	con->getConstrainedElement()->push_back(uML_Classifier);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Classifier));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("powertypeExtent->forAll( gs | "\
	"  gs.generalization->forAll( gen | "\
	"    not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific) "\
	"  ))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Classifier);
	
	con->setName("no_cycles_in_generalization");
	
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Classifier));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not allParents()->includes(self)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Classifier);
	
	con->setName("non_final_parents");
	
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Classifier));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parents()->forAll(not isFinalSpecialization)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Classifier);
	
	con->setName("specialize_type");
	
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Classifier));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parents()->forAll(c | self.maySpecializeType(c))")));
	
	con->setSpecification(oe);
	
    // Classifier attributes
	uML_Classifier_attribute = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_collaborationUse = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_feature = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_general = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_generalization = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_inheritedMember = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_isAbstract = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_isFinalSpecialization = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_ownedTemplateSignature = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_ownedUseCase = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_powertypeExtent = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_redefinedClassifier = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_representation = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_substitution = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_templateParameter = factory->createProperty_in_Class(uML_Classifier);
	uML_Classifier_useCase = factory->createProperty_in_Class(uML_Classifier);
    // Classifier operations
	uML_Classifier_allAttributes__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_allAttributes_result = factory->createParameter_in_Operation(uML_Classifier_allAttributes__);

	uML_Classifier_allFeatures__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_allFeatures_result = factory->createParameter_in_Operation(uML_Classifier_allFeatures__);

	uML_Classifier_allParents__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_allParents_result = factory->createParameter_in_Operation(uML_Classifier_allParents__);

	uML_Classifier_allRealizedInterfaces__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_allRealizedInterfaces_result = factory->createParameter_in_Operation(uML_Classifier_allRealizedInterfaces__);

	uML_Classifier_allSlottableFeatures__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_allSlottableFeatures_result = factory->createParameter_in_Operation(uML_Classifier_allSlottableFeatures__);

	uML_Classifier_allUsedInterfaces__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_allUsedInterfaces_result = factory->createParameter_in_Operation(uML_Classifier_allUsedInterfaces__);

	uML_Classifier_conformsTo_Type_Type = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_conformsTo_result = factory->createParameter_in_Operation(uML_Classifier_conformsTo_Type_Type);uML_Classifier_conformsTo_Type_Type_other = factory->createParameter_in_Operation(uML_Classifier_conformsTo_Type_Type);

	uML_Classifier_directlyRealizedInterfaces__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_directlyRealizedInterfaces_result = factory->createParameter_in_Operation(uML_Classifier_directlyRealizedInterfaces__);

	uML_Classifier_directlyUsedInterfaces__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_directlyUsedInterfaces_result = factory->createParameter_in_Operation(uML_Classifier_directlyUsedInterfaces__);

	uML_Classifier_general__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_general_result = factory->createParameter_in_Operation(uML_Classifier_general__);

	uML_Classifier_getAllAttributes__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getAllAttributes__return = factory->createParameter_in_Operation(uML_Classifier_getAllAttributes__);

	uML_Classifier_getAllOperations__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getAllOperations__return = factory->createParameter_in_Operation(uML_Classifier_getAllOperations__);

	uML_Classifier_getAllUsedInterfaces__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getAllUsedInterfaces__return = factory->createParameter_in_Operation(uML_Classifier_getAllUsedInterfaces__);

	uML_Classifier_getOperation_String_String_Type_String_String_Type = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_String_String_Type);uML_Classifier_getOperation_String_String_Type_String_String_Type_name = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_String_String_Type);uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_String_String_Type);uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_String_String_Type);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean);uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean);uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean);uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean);uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase = factory->createParameter_in_Operation(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean);

	uML_Classifier_getOperations__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getOperations__return = factory->createParameter_in_Operation(uML_Classifier_getOperations__);

	uML_Classifier_getUsedInterfaces__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_getUsedInterfaces__return = factory->createParameter_in_Operation(uML_Classifier_getUsedInterfaces__);

	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_hasVisibilityOf_result = factory->createParameter_in_Operation(uML_Classifier_hasVisibilityOf_NamedElement_NamedElement);uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n = factory->createParameter_in_Operation(uML_Classifier_hasVisibilityOf_NamedElement_NamedElement);

	uML_Classifier_inherit_NamedElement_NamedElement = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_inherit_result = factory->createParameter_in_Operation(uML_Classifier_inherit_NamedElement_NamedElement);uML_Classifier_inherit_NamedElement_NamedElement_inhs = factory->createParameter_in_Operation(uML_Classifier_inherit_NamedElement_NamedElement);

	uML_Classifier_inheritableMembers_Classifier_Classifier = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_inheritableMembers_result = factory->createParameter_in_Operation(uML_Classifier_inheritableMembers_Classifier_Classifier);uML_Classifier_inheritableMembers_Classifier_Classifier_c = factory->createParameter_in_Operation(uML_Classifier_inheritableMembers_Classifier_Classifier);

	uML_Classifier_inheritedMember__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_inheritedMember_result = factory->createParameter_in_Operation(uML_Classifier_inheritedMember__);

	uML_Classifier_isSubstitutableFor_Classifier_Classifier = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract = factory->createParameter_in_Operation(uML_Classifier_isSubstitutableFor_Classifier_Classifier);uML_Classifier_isSubstitutableFor_result = factory->createParameter_in_Operation(uML_Classifier_isSubstitutableFor_Classifier_Classifier);

	uML_Classifier_isTemplate__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_isTemplate_result = factory->createParameter_in_Operation(uML_Classifier_isTemplate__);

	uML_Classifier_maySpecializeType_Classifier_Classifier = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_maySpecializeType_result = factory->createParameter_in_Operation(uML_Classifier_maySpecializeType_Classifier_Classifier);uML_Classifier_maySpecializeType_Classifier_Classifier_c = factory->createParameter_in_Operation(uML_Classifier_maySpecializeType_Classifier_Classifier);

	uML_Classifier_parents__ = factory->createOperation_in_Class(uML_Classifier);
	uML_Classifier_parents_result = factory->createParameter_in_Operation(uML_Classifier_parents__);

    //-------------------------------------------
	// ClassifierTemplateParameter
	uML_ClassifierTemplateParameter = factory->createClass_in_Package(uML, uml::UmlPackage::CLASSIFIERTEMPLATEPARAMETER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ClassifierTemplateParameter);
	con->setName("actual_is_classifier");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string(" templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClassifierTemplateParameter);
	
	con->setName("constraining_classifiers_constrain_args");
	
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("templateParameterSubstitution.actual->forAll( a |"\
	
	"  let arg : Classifier = a.oclAsType(Classifier) in"\
	
	"    constrainingClassifier->forAll("\
	
	"      cc |  "\
	
	"         arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))"\
	
	"      )"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClassifierTemplateParameter);
	
	con->setName("constraining_classifiers_constrain_parametered_element");
	
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("constrainingClassifier->forAll("\
	
	"     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc))"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClassifierTemplateParameter);
	
	con->setName("has_constraining_classifier");
	
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("allowSubstitutable implies constrainingClassifier->notEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClassifierTemplateParameter);
	
	con->setName("matching_abstract");
	
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClassifierTemplateParameter);
	
	con->setName("parametered_element_no_features");
	
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())")));
	
	con->setSpecification(oe);
	
    // ClassifierTemplateParameter attributes
	uML_ClassifierTemplateParameter_allowSubstitutable = factory->createProperty_in_Class(uML_ClassifierTemplateParameter);
	uML_ClassifierTemplateParameter_constrainingClassifier = factory->createProperty_in_Class(uML_ClassifierTemplateParameter);
	uML_ClassifierTemplateParameter_parameteredElement = factory->createProperty_in_Class(uML_ClassifierTemplateParameter);

    //-------------------------------------------
	// Clause
	uML_Clause = factory->createClass_in_Package(uML, uml::UmlPackage::CLAUSE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Clause);
	con->setName("body_output_pins");
	con->getConstrainedElement()->push_back(uML_Clause);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Clause));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Clause);
	
	con->setName("decider_output");
	
	con->getConstrainedElement()->push_back(uML_Clause);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Clause));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("test.oclAsType(Action).allActions().output->includes(decider) and"\
	
	"decider.type = Boolean and"\
	
	"decider.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Clause);
	
	con->setName("test_and_body");
	
	con->getConstrainedElement()->push_back(uML_Clause);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Clause));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("test->intersection(_'body')->isEmpty()")));
	
	con->setSpecification(oe);
	
    // Clause attributes
	uML_Clause_body = factory->createProperty_in_Class(uML_Clause);
	uML_Clause_bodyOutput = factory->createProperty_in_Class(uML_Clause);
	uML_Clause_decider = factory->createProperty_in_Class(uML_Clause);
	uML_Clause_predecessorClause = factory->createProperty_in_Class(uML_Clause);
	uML_Clause_successorClause = factory->createProperty_in_Class(uML_Clause);
	uML_Clause_test = factory->createProperty_in_Class(uML_Clause);

    //-------------------------------------------
	// ClearAssociationAction
	uML_ClearAssociationAction = factory->createClass_in_Package(uML, uml::UmlPackage::CLEARASSOCIATIONACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ClearAssociationAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ClearAssociationAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClearAssociationAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClearAssociationAction);
	
	con->setName("same_type");
	
	con->getConstrainedElement()->push_back(uML_ClearAssociationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClearAssociationAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("association.memberEnd->exists(self.object.type.conformsTo(type))")));
	
	con->setSpecification(oe);
	
    // ClearAssociationAction attributes
	uML_ClearAssociationAction_association = factory->createProperty_in_Class(uML_ClearAssociationAction);
	uML_ClearAssociationAction_object = factory->createProperty_in_Class(uML_ClearAssociationAction);

    //-------------------------------------------
	// ClearStructuralFeatureAction
	uML_ClearStructuralFeatureAction = factory->createClass_in_Package(uML, uml::UmlPackage::CLEARSTRUCTURALFEATUREACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ClearStructuralFeatureAction);
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_ClearStructuralFeatureAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClearStructuralFeatureAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result<>null implies result.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ClearStructuralFeatureAction);
	
	con->setName("type_of_result");
	
	con->getConstrainedElement()->push_back(uML_ClearStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ClearStructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result<>null implies result.type = object.type")));
	
	con->setSpecification(oe);
	
    // ClearStructuralFeatureAction attributes
	uML_ClearStructuralFeatureAction_result = factory->createProperty_in_Class(uML_ClearStructuralFeatureAction);

    //-------------------------------------------
	// ClearVariableAction
	uML_ClearVariableAction = factory->createClass_in_Package(uML, uml::UmlPackage::CLEARVARIABLEACTION_CLASS);
	

    //-------------------------------------------
	// Collaboration
	uML_Collaboration = factory->createClass_in_Package(uML, uml::UmlPackage::COLLABORATION_CLASS);
	
    // Collaboration attributes
	uML_Collaboration_collaborationRole = factory->createProperty_in_Class(uML_Collaboration);

    //-------------------------------------------
	// CollaborationUse
	uML_CollaborationUse = factory->createClass_in_Package(uML, uml::UmlPackage::COLLABORATIONUSE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CollaborationUse);
	con->setName("client_elements");
	con->getConstrainedElement()->push_back(uML_CollaborationUse);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CollaborationUse));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("roleBinding->collect(client)->forAll(ne1, ne2 |"\
	"  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and"\
	"    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in"\
	"      ce1.structuredClassifier = ce2.structuredClassifier)"\
	"and"\
	"  roleBinding->collect(supplier)->forAll(ne1, ne2 |"\
	"  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and"\
	"    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in"\
	"      ce1.collaboration = ce2.collaboration)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CollaborationUse);
	
	con->setName("connectors");
	
	con->getConstrainedElement()->push_back(uML_CollaborationUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CollaborationUse));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("type.ownedConnector->forAll(connector |"\
	
	"  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),"\
	
	"        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),"\
	
	"        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),"\
	
	"        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in"\
	
	"          contextClassifier.ownedConnector->exists( correspondingConnector | "\
	
	"              correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )"\
	
	"              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) )"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CollaborationUse);
	
	con->setName("every_role");
	
	con->getConstrainedElement()->push_back(uML_CollaborationUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CollaborationUse));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))")));
	
	con->setSpecification(oe);
	
    // CollaborationUse attributes
	uML_CollaborationUse_roleBinding = factory->createProperty_in_Class(uML_CollaborationUse);
	uML_CollaborationUse_type = factory->createProperty_in_Class(uML_CollaborationUse);

    //-------------------------------------------
	// CombinedFragment
	uML_CombinedFragment = factory->createClass_in_Package(uML, uml::UmlPackage::COMBINEDFRAGMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CombinedFragment);
	con->setName("break");
	con->getConstrainedElement()->push_back(uML_CombinedFragment);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CombinedFragment));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("interactionOperator=InteractionOperatorKind::break  implies   "\
	"enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union("\
	"   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CombinedFragment);
	
	con->setName("consider_and_ignore");
	
	con->getConstrainedElement()->push_back(uML_CombinedFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CombinedFragment));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CombinedFragment);
	
	con->setName("opt_loop_break_neg");
	
	con->getConstrainedElement()->push_back(uML_CombinedFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CombinedFragment));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or"\
	
	"interactionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or"\
	
	"interactionOperator = InteractionOperatorKind::neg)"\
	
	"implies operand->size()=1")));
	
	con->setSpecification(oe);
	
    // CombinedFragment attributes
	uML_CombinedFragment_cfragmentGate = factory->createProperty_in_Class(uML_CombinedFragment);
	uML_CombinedFragment_interactionOperator = factory->createProperty_in_Class(uML_CombinedFragment);
	uML_CombinedFragment_operand = factory->createProperty_in_Class(uML_CombinedFragment);

    //-------------------------------------------
	// Comment
	uML_Comment = factory->createClass_in_Package(uML, uml::UmlPackage::COMMENT_CLASS);
	
    // Comment attributes
	uML_Comment_annotatedElement = factory->createProperty_in_Class(uML_Comment);
	uML_Comment_body = factory->createProperty_in_Class(uML_Comment);

    //-------------------------------------------
	// CommunicationPath
	uML_CommunicationPath = factory->createClass_in_Package(uML, uml::UmlPackage::COMMUNICATIONPATH_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CommunicationPath);
	con->setName("association_ends");
	con->getConstrainedElement()->push_back(uML_CommunicationPath);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CommunicationPath));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("endType->forAll (oclIsKindOf(DeploymentTarget))")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// Component
	uML_Component = factory->createClass_in_Package(uML, uml::UmlPackage::COMPONENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Component);
	con->setName("no_nested_classifiers");
	con->getConstrainedElement()->push_back(uML_Component);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Component));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("nestedClassifier->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Component);
	
	con->setName("no_packaged_elements");
	
	con->getConstrainedElement()->push_back(uML_Component);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Component));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("nestingClass <> null implies packagedElement->isEmpty()")));
	
	con->setSpecification(oe);
	
    // Component attributes
	uML_Component_isIndirectlyInstantiated = factory->createProperty_in_Class(uML_Component);
	uML_Component_packagedElement = factory->createProperty_in_Class(uML_Component);
	uML_Component_provided = factory->createProperty_in_Class(uML_Component);
	uML_Component_realization = factory->createProperty_in_Class(uML_Component);
	uML_Component_required = factory->createProperty_in_Class(uML_Component);
    // Component operations
	uML_Component_createOwnedClass_String_Boolean_String_Boolean = factory->createOperation_in_Class(uML_Component);
	uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn = factory->createParameter_in_Operation(uML_Component_createOwnedClass_String_Boolean_String_Boolean);uML_Component_createOwnedClass_String_Boolean_String_Boolean_name = factory->createParameter_in_Operation(uML_Component_createOwnedClass_String_Boolean_String_Boolean);uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract = factory->createParameter_in_Operation(uML_Component_createOwnedClass_String_Boolean_String_Boolean);

	uML_Component_createOwnedEnumeration_String_String = factory->createOperation_in_Class(uML_Component);
	uML_Component_createOwnedEnumeration_String_Stringreturn = factory->createParameter_in_Operation(uML_Component_createOwnedEnumeration_String_String);uML_Component_createOwnedEnumeration_String_String_name = factory->createParameter_in_Operation(uML_Component_createOwnedEnumeration_String_String);

	uML_Component_createOwnedInterface_String_String = factory->createOperation_in_Class(uML_Component);
	uML_Component_createOwnedInterface_String_Stringreturn = factory->createParameter_in_Operation(uML_Component_createOwnedInterface_String_String);uML_Component_createOwnedInterface_String_String_name = factory->createParameter_in_Operation(uML_Component_createOwnedInterface_String_String);

	uML_Component_createOwnedPrimitiveType_String_String = factory->createOperation_in_Class(uML_Component);
	uML_Component_createOwnedPrimitiveType_String_Stringreturn = factory->createParameter_in_Operation(uML_Component_createOwnedPrimitiveType_String_String);uML_Component_createOwnedPrimitiveType_String_String_name = factory->createParameter_in_Operation(uML_Component_createOwnedPrimitiveType_String_String);

	uML_Component_provided__ = factory->createOperation_in_Class(uML_Component);
	uML_Component_provided_result = factory->createParameter_in_Operation(uML_Component_provided__);

	uML_Component_required__ = factory->createOperation_in_Class(uML_Component);
	uML_Component_required_result = factory->createParameter_in_Operation(uML_Component_required__);

    //-------------------------------------------
	// ComponentRealization
	uML_ComponentRealization = factory->createClass_in_Package(uML, uml::UmlPackage::COMPONENTREALIZATION_CLASS);
	
    // ComponentRealization attributes
	uML_ComponentRealization_abstraction = factory->createProperty_in_Class(uML_ComponentRealization);
	uML_ComponentRealization_realizingClassifier = factory->createProperty_in_Class(uML_ComponentRealization);

    //-------------------------------------------
	// ConditionalNode
	uML_ConditionalNode = factory->createClass_in_Package(uML, uml::UmlPackage::CONDITIONALNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ConditionalNode);
	con->setName("clause_no_predecessor");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConditionalNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("clause->closure(predecessorClause)->intersection(clause)->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConditionalNode);
	
	con->setName("executable_nodes");
	
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConditionalNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConditionalNode);
	
	con->setName("matching_output_pins");
	
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConditionalNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("clause->forAll("\
	
	"	bodyOutput->size()=self.result->size() and"\
	
	"	Sequence{1..self.result->size()}->forAll(i |"\
	
	"		bodyOutput->at(i).type.conformsTo(result->at(i).type) and"\
	
	"		bodyOutput->at(i).isOrdered = result->at(i).isOrdered and"\
	
	"		bodyOutput->at(i).isUnique = result->at(i).isUnique and"\
	
	"		bodyOutput->at(i).compatibleWith(result->at(i))))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConditionalNode);
	
	con->setName("no_input_pins");
	
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConditionalNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("input->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConditionalNode);
	
	con->setName("one_clause_with_executable_node");
	
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConditionalNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | "\
	
	"	self.clause->select(test->union(_'body')->includes(n))->size()=1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConditionalNode);
	
	con->setName("result_no_incoming");
	
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConditionalNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.incoming->isEmpty()")));
	
	con->setSpecification(oe);
	
    // ConditionalNode attributes
	uML_ConditionalNode_clause = factory->createProperty_in_Class(uML_ConditionalNode);
	uML_ConditionalNode_isAssured = factory->createProperty_in_Class(uML_ConditionalNode);
	uML_ConditionalNode_isDeterminate = factory->createProperty_in_Class(uML_ConditionalNode);
	uML_ConditionalNode_result = factory->createProperty_in_Class(uML_ConditionalNode);
    // ConditionalNode operations
	uML_ConditionalNode_allActions__ = factory->createOperation_in_Class(uML_ConditionalNode);
	uML_ConditionalNode_allActions_result = factory->createParameter_in_Operation(uML_ConditionalNode_allActions__);

    //-------------------------------------------
	// ConnectableElement
	uML_ConnectableElement = factory->createClass_in_Package(uML, uml::UmlPackage::CONNECTABLEELEMENT_CLASS);
	
    // ConnectableElement attributes
	uML_ConnectableElement_end = factory->createProperty_in_Class(uML_ConnectableElement);
	uML_ConnectableElement_templateParameter = factory->createProperty_in_Class(uML_ConnectableElement);
    // ConnectableElement operations
	uML_ConnectableElement_end__ = factory->createOperation_in_Class(uML_ConnectableElement);
	uML_ConnectableElement_end_result = factory->createParameter_in_Operation(uML_ConnectableElement_end__);

    //-------------------------------------------
	// ConnectableElementTemplateParameter
	uML_ConnectableElementTemplateParameter = factory->createClass_in_Package(uML, uml::UmlPackage::CONNECTABLEELEMENTTEMPLATEPARAMETER_CLASS);
	
    // ConnectableElementTemplateParameter attributes
	uML_ConnectableElementTemplateParameter_parameteredElement = factory->createProperty_in_Class(uML_ConnectableElementTemplateParameter);

    //-------------------------------------------
	// ConnectionPointReference
	uML_ConnectionPointReference = factory->createClass_in_Package(uML, uml::UmlPackage::CONNECTIONPOINTREFERENCE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ConnectionPointReference);
	con->setName("entry_pseudostates");
	con->getConstrainedElement()->push_back(uML_ConnectionPointReference);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConnectionPointReference));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("entry->forAll(kind = PseudostateKind::entryPoint)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConnectionPointReference);
	
	con->setName("exit_pseudostates");
	
	con->getConstrainedElement()->push_back(uML_ConnectionPointReference);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConnectionPointReference));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("exit->forAll(kind = PseudostateKind::exitPoint)")));
	
	con->setSpecification(oe);
	
    // ConnectionPointReference attributes
	uML_ConnectionPointReference_entry = factory->createProperty_in_Class(uML_ConnectionPointReference);
	uML_ConnectionPointReference_exit = factory->createProperty_in_Class(uML_ConnectionPointReference);
	uML_ConnectionPointReference_state = factory->createProperty_in_Class(uML_ConnectionPointReference);

    //-------------------------------------------
	// Connector
	uML_Connector = factory->createClass_in_Package(uML, uml::UmlPackage::CONNECTOR_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Connector);
	con->setName("roles");
	con->getConstrainedElement()->push_back(uML_Connector);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Connector));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("structuredClassifier <> null"\
	"and"\
	"  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)"\
	"or"\
	"  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Connector);
	
	con->setName("types");
	
	con->getConstrainedElement()->push_back(uML_Connector);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Connector));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("type<>null implies "\
	
	"  let noOfEnds : Integer = end->size() in "\
	
	"  (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))")));
	
	con->setSpecification(oe);
	
    // Connector attributes
	uML_Connector_contract = factory->createProperty_in_Class(uML_Connector);
	uML_Connector_end = factory->createProperty_in_Class(uML_Connector);
	uML_Connector_kind = factory->createProperty_in_Class(uML_Connector);
	uML_Connector_redefinedConnector = factory->createProperty_in_Class(uML_Connector);
	uML_Connector_type = factory->createProperty_in_Class(uML_Connector);
    // Connector operations
	uML_Connector_kind__ = factory->createOperation_in_Class(uML_Connector);
	uML_Connector_kind_result = factory->createParameter_in_Operation(uML_Connector_kind__);

    //-------------------------------------------
	// ConnectorEnd
	uML_ConnectorEnd = factory->createClass_in_Package(uML, uml::UmlPackage::CONNECTOREND_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ConnectorEnd);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConnectorEnd));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.compatibleWith(definingEnd)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConnectorEnd);
	
	con->setName("part_with_port_empty");
	
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConnectorEnd));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConnectorEnd);
	
	con->setName("role_and_part_with_port");
	
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConnectorEnd));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("partWithPort->notEmpty() implies "\
	
	"  (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConnectorEnd);
	
	con->setName("self_part_with_port");
	
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConnectorEnd));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)")));
	
	con->setSpecification(oe);
	
    // ConnectorEnd attributes
	uML_ConnectorEnd_definingEnd = factory->createProperty_in_Class(uML_ConnectorEnd);
	uML_ConnectorEnd_partWithPort = factory->createProperty_in_Class(uML_ConnectorEnd);
	uML_ConnectorEnd_role = factory->createProperty_in_Class(uML_ConnectorEnd);
    // ConnectorEnd operations
	uML_ConnectorEnd_definingEnd__ = factory->createOperation_in_Class(uML_ConnectorEnd);
	uML_ConnectorEnd_definingEnd_result = factory->createParameter_in_Operation(uML_ConnectorEnd_definingEnd__);

    //-------------------------------------------
	// ConsiderIgnoreFragment
	uML_ConsiderIgnoreFragment = factory->createClass_in_Package(uML, uml::UmlPackage::CONSIDERIGNOREFRAGMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ConsiderIgnoreFragment);
	con->setName("consider_or_ignore");
	con->getConstrainedElement()->push_back(uML_ConsiderIgnoreFragment);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConsiderIgnoreFragment));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ConsiderIgnoreFragment);
	
	con->setName("type");
	
	con->getConstrainedElement()->push_back(uML_ConsiderIgnoreFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ConsiderIgnoreFragment));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))")));
	
	con->setSpecification(oe);
	
    // ConsiderIgnoreFragment attributes
	uML_ConsiderIgnoreFragment_message = factory->createProperty_in_Class(uML_ConsiderIgnoreFragment);

    //-------------------------------------------
	// Constraint
	uML_Constraint = factory->createClass_in_Package(uML, uml::UmlPackage::CONSTRAINT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Constraint);
	con->setName("boolean_value");
	con->getConstrainedElement()->push_back(uML_Constraint);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Constraint));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Constraint);
	
	con->setName("no_side_effects");
	
	con->getConstrainedElement()->push_back(uML_Constraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Constraint));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Constraint);
	
	con->setName("not_apply_to_self");
	
	con->getConstrainedElement()->push_back(uML_Constraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Constraint));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not constrainedElement->includes(self)")));
	
	con->setSpecification(oe);
	
    // Constraint attributes
	uML_Constraint_constrainedElement = factory->createProperty_in_Class(uML_Constraint);
	uML_Constraint_context = factory->createProperty_in_Class(uML_Constraint);
	uML_Constraint_specification = factory->createProperty_in_Class(uML_Constraint);

    //-------------------------------------------
	// Continuation
	uML_Continuation = factory->createClass_in_Package(uML, uml::UmlPackage::CONTINUATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Continuation);
	con->setName("first_or_last_interaction_fragment");
	con->getConstrainedElement()->push_back(uML_Continuation);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Continuation));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string(" enclosingOperand->notEmpty() and "\
	" let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in "\
	"   ( peerFragments->notEmpty() and "\
	"   ((peerFragments->first() = self) or  (peerFragments->last() = self)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Continuation);
	
	con->setName("global");
	
	con->getConstrainedElement()->push_back(uML_Continuation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Continuation));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("enclosingOperand->notEmpty() and"\
	
	"  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in "\
	
	"    (operandLifelines->notEmpty() and "\
	
	"    operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Continuation);
	
	con->setName("same_name");
	
	con->getConstrainedElement()->push_back(uML_Continuation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Continuation));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("enclosingOperand.combinedFragment->notEmpty() and"\
	
	"let parentInteraction : Set(Interaction) = "\
	
	"enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->"\
	
	"collect(enclosingInteraction).oclAsType(Interaction)->asSet()"\
	
	"in "\
	
	"(parentInteraction->size() = 1) "\
	
	"and let peerInteractions : Set(Interaction) ="\
	
	" (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)->"\
	
	" select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in"\
	
	" (peerInteractions->notEmpty()) and "\
	
	"  let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment->"\
	
	" select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in"\
	
	"   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->"\
	
	"   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->"\
	
	"   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->"\
	
	"   forAll(c : Continuation |  (c.name = self.name) implies "\
	
	"  (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self"\
	
	"  self.covered->asSet()->"\
	
	"  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))"\
	
	"   and"\
	
	" (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c"\
	
	" c.covered->asSet()->"\
	
	"  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))"\
	
	"  )")));
	
	con->setSpecification(oe);
	
    // Continuation attributes
	uML_Continuation_setting = factory->createProperty_in_Class(uML_Continuation);

    //-------------------------------------------
	// ControlFlow
	uML_ControlFlow = factory->createClass_in_Package(uML, uml::UmlPackage::CONTROLFLOW_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ControlFlow);
	con->setName("object_nodes");
	con->getConstrainedElement()->push_back(uML_ControlFlow);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ControlFlow));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and "\
	"(target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// ControlNode
	uML_ControlNode = factory->createClass_in_Package(uML, uml::UmlPackage::CONTROLNODE_CLASS);
	

    //-------------------------------------------
	// CreateLinkAction
	uML_CreateLinkAction = factory->createClass_in_Package(uML, uml::UmlPackage::CREATELINKACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CreateLinkAction);
	con->setName("association_not_abstract");
	con->getConstrainedElement()->push_back(uML_CreateLinkAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateLinkAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not self.association().isAbstract")));
	con->setSpecification(oe);
	
    // CreateLinkAction attributes
	uML_CreateLinkAction_endData = factory->createProperty_in_Class(uML_CreateLinkAction);

    //-------------------------------------------
	// CreateLinkObjectAction
	uML_CreateLinkObjectAction = factory->createClass_in_Package(uML, uml::UmlPackage::CREATELINKOBJECTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CreateLinkObjectAction);
	con->setName("association_class");
	con->getConstrainedElement()->push_back(uML_CreateLinkObjectAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateLinkObjectAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.association().oclIsKindOf(AssociationClass)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CreateLinkObjectAction);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_CreateLinkObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateLinkObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CreateLinkObjectAction);
	
	con->setName("type_of_result");
	
	con->getConstrainedElement()->push_back(uML_CreateLinkObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateLinkObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = association()")));
	
	con->setSpecification(oe);
	
    // CreateLinkObjectAction attributes
	uML_CreateLinkObjectAction_result = factory->createProperty_in_Class(uML_CreateLinkObjectAction);

    //-------------------------------------------
	// CreateObjectAction
	uML_CreateObjectAction = factory->createClass_in_Package(uML, uml::UmlPackage::CREATEOBJECTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_CreateObjectAction);
	con->setName("classifier_not_abstract");
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateObjectAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not classifier.isAbstract")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CreateObjectAction);
	
	con->setName("classifier_not_association_class");
	
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not classifier.oclIsKindOf(AssociationClass)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CreateObjectAction);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_CreateObjectAction);
	
	con->setName("same_type");
	
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_CreateObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = classifier")));
	
	con->setSpecification(oe);
	
    // CreateObjectAction attributes
	uML_CreateObjectAction_classifier = factory->createProperty_in_Class(uML_CreateObjectAction);
	uML_CreateObjectAction_result = factory->createProperty_in_Class(uML_CreateObjectAction);

    //-------------------------------------------
	// DataStoreNode
	uML_DataStoreNode = factory->createClass_in_Package(uML, uml::UmlPackage::DATASTORENODE_CLASS);
	

    //-------------------------------------------
	// DataType
	uML_DataType = factory->createClass_in_Package(uML, uml::UmlPackage::DATATYPE_CLASS);
	
    // DataType attributes
	uML_DataType_ownedAttribute = factory->createProperty_in_Class(uML_DataType);
	uML_DataType_ownedOperation = factory->createProperty_in_Class(uML_DataType);
    // DataType operations
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_DataType);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createParameter_in_Operation(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createParameter_in_Operation(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower = factory->createParameter_in_Operation(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper = factory->createParameter_in_Operation(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type = factory->createOperation_in_Class(uML_DataType);
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn = factory->createParameter_in_Operation(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createParameter_in_Operation(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createParameter_in_Operation(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createParameter_in_Operation(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createParameter_in_Operation(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);

    //-------------------------------------------
	// DecisionNode
	uML_DecisionNode = factory->createClass_in_Package(uML, uml::UmlPackage::DECISIONNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	con->setName("decision_input_flow_incoming");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("incoming->includes(decisionInputFlow)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("edges");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let allEdges: Set(ActivityEdge) = incoming->union(outgoing) in"\
	
	"let allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif in"\
	
	"allRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))"\
	
	"")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("incoming_control_one_input_parameter");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) implies"\
	
	"	decisionInput.inputParameters()->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("incoming_object_one_input_parameter");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies"\
	
	"	decisionInput.inputParameters()->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("incoming_outgoing_edges");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("parameters");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("decisionInput<>null implies "\
	
	"  (decisionInput.ownedParameter->forAll(par | "\
	
	"     par.direction <> ParameterDirectionKind::out and "\
	
	"     par.direction <> ParameterDirectionKind::inout ) and"\
	
	"   decisionInput.ownedParameter->one(par | "\
	
	"     par.direction <> ParameterDirectionKind::return))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("two_input_parameters");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies"\
	
	"	decisionInput.inputParameters()->size()=2")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DecisionNode);
	
	con->setName("zero_input_parameters");
	
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DecisionNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies"\
	
	"   decisionInput.inputParameters()->isEmpty()")));
	
	con->setSpecification(oe);
	
    // DecisionNode attributes
	uML_DecisionNode_decisionInput = factory->createProperty_in_Class(uML_DecisionNode);
	uML_DecisionNode_decisionInputFlow = factory->createProperty_in_Class(uML_DecisionNode);

    //-------------------------------------------
	// Dependency
	uML_Dependency = factory->createClass_in_Package(uML, uml::UmlPackage::DEPENDENCY_CLASS);
	
    // Dependency attributes
	uML_Dependency_client = factory->createProperty_in_Class(uML_Dependency);
	uML_Dependency_supplier = factory->createProperty_in_Class(uML_Dependency);

    //-------------------------------------------
	// DeployedArtifact
	uML_DeployedArtifact = factory->createClass_in_Package(uML, uml::UmlPackage::DEPLOYEDARTIFACT_CLASS);
	

    //-------------------------------------------
	// Deployment
	uML_Deployment = factory->createClass_in_Package(uML, uml::UmlPackage::DEPLOYMENT_CLASS);
	
    // Deployment attributes
	uML_Deployment_configuration = factory->createProperty_in_Class(uML_Deployment);
	uML_Deployment_deployedArtifact = factory->createProperty_in_Class(uML_Deployment);
	uML_Deployment_location = factory->createProperty_in_Class(uML_Deployment);

    //-------------------------------------------
	// DeploymentSpecification
	uML_DeploymentSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::DEPLOYMENTSPECIFICATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_DeploymentSpecification);
	con->setName("deployed_elements");
	con->getConstrainedElement()->push_back(uML_DeploymentSpecification);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DeploymentSpecification));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DeploymentSpecification);
	
	con->setName("deployment_target");
	
	con->getConstrainedElement()->push_back(uML_DeploymentSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DeploymentSpecification));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))")));
	
	con->setSpecification(oe);
	
    // DeploymentSpecification attributes
	uML_DeploymentSpecification_deployment = factory->createProperty_in_Class(uML_DeploymentSpecification);
	uML_DeploymentSpecification_deploymentLocation = factory->createProperty_in_Class(uML_DeploymentSpecification);
	uML_DeploymentSpecification_executionLocation = factory->createProperty_in_Class(uML_DeploymentSpecification);

    //-------------------------------------------
	// DeploymentTarget
	uML_DeploymentTarget = factory->createClass_in_Package(uML, uml::UmlPackage::DEPLOYMENTTARGET_CLASS);
	
    // DeploymentTarget attributes
	uML_DeploymentTarget_deployedElement = factory->createProperty_in_Class(uML_DeploymentTarget);
	uML_DeploymentTarget_deployment = factory->createProperty_in_Class(uML_DeploymentTarget);
    // DeploymentTarget operations
	uML_DeploymentTarget_deployedElement__ = factory->createOperation_in_Class(uML_DeploymentTarget);
	uML_DeploymentTarget_deployedElement_result = factory->createParameter_in_Operation(uML_DeploymentTarget_deployedElement__);

    //-------------------------------------------
	// DestroyLinkAction
	uML_DestroyLinkAction = factory->createClass_in_Package(uML, uml::UmlPackage::DESTROYLINKACTION_CLASS);
	
    // DestroyLinkAction attributes
	uML_DestroyLinkAction_endData = factory->createProperty_in_Class(uML_DestroyLinkAction);

    //-------------------------------------------
	// DestroyObjectAction
	uML_DestroyObjectAction = factory->createClass_in_Package(uML, uml::UmlPackage::DESTROYOBJECTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_DestroyObjectAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_DestroyObjectAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DestroyObjectAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("target.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DestroyObjectAction);
	
	con->setName("no_type");
	
	con->getConstrainedElement()->push_back(uML_DestroyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DestroyObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("target.type= null")));
	
	con->setSpecification(oe);
	
    // DestroyObjectAction attributes
	uML_DestroyObjectAction_isDestroyLinks = factory->createProperty_in_Class(uML_DestroyObjectAction);
	uML_DestroyObjectAction_isDestroyOwnedObjects = factory->createProperty_in_Class(uML_DestroyObjectAction);
	uML_DestroyObjectAction_target = factory->createProperty_in_Class(uML_DestroyObjectAction);

    //-------------------------------------------
	// DestructionOccurrenceSpecification
	uML_DestructionOccurrenceSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::DESTRUCTIONOCCURRENCESPECIFICATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_DestructionOccurrenceSpecification);
	con->setName("no_occurrence_specifications_below");
	con->getConstrainedElement()->push_back(uML_DestructionOccurrenceSpecification);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DestructionOccurrenceSpecification));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let o : InteractionOperand = enclosingOperand in o->notEmpty() and "\
	"let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)"\
	"in peerEvents->last() = self")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// Device
	uML_Device = factory->createClass_in_Package(uML, uml::UmlPackage::DEVICE_CLASS);
	

    //-------------------------------------------
	// DirectedRelationship
	uML_DirectedRelationship = factory->createClass_in_Package(uML, uml::UmlPackage::DIRECTEDRELATIONSHIP_CLASS);
	
    // DirectedRelationship attributes
	uML_DirectedRelationship_source = factory->createProperty_in_Class(uML_DirectedRelationship);
	uML_DirectedRelationship_target = factory->createProperty_in_Class(uML_DirectedRelationship);

    //-------------------------------------------
	// Duration
	uML_Duration = factory->createClass_in_Package(uML, uml::UmlPackage::DURATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Duration);
	con->setName("no_expr_requires_observation");
	con->getConstrainedElement()->push_back(uML_Duration);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Duration));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))")));
	con->setSpecification(oe);
	
    // Duration attributes
	uML_Duration_expr = factory->createProperty_in_Class(uML_Duration);
	uML_Duration_observation = factory->createProperty_in_Class(uML_Duration);
    // Duration operations
	uML_Duration_stringValue__ = factory->createOperation_in_Class(uML_Duration);
	uML_Duration_stringValue__return = factory->createParameter_in_Operation(uML_Duration_stringValue__);

    //-------------------------------------------
	// DurationConstraint
	uML_DurationConstraint = factory->createClass_in_Package(uML, uml::UmlPackage::DURATIONCONSTRAINT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_DurationConstraint);
	con->setName("first_event_multiplicity");
	con->getConstrainedElement()->push_back(uML_DurationConstraint);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DurationConstraint));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if (constrainedElement->size() = 2)"\
	"  then (firstEvent->size() = 2) else (firstEvent->size() = 0) "\
	"endif")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_DurationConstraint);
	
	con->setName("has_one_or_two_constrainedElements");
	
	con->getConstrainedElement()->push_back(uML_DurationConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DurationConstraint));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("constrainedElement->size() = 1 or constrainedElement->size()=2")));
	
	con->setSpecification(oe);
	
    // DurationConstraint attributes
	uML_DurationConstraint_firstEvent = factory->createProperty_in_Class(uML_DurationConstraint);
	uML_DurationConstraint_specification = factory->createProperty_in_Class(uML_DurationConstraint);

    //-------------------------------------------
	// DurationInterval
	uML_DurationInterval = factory->createClass_in_Package(uML, uml::UmlPackage::DURATIONINTERVAL_CLASS);
	
    // DurationInterval attributes
	uML_DurationInterval_max = factory->createProperty_in_Class(uML_DurationInterval);
	uML_DurationInterval_min = factory->createProperty_in_Class(uML_DurationInterval);

    //-------------------------------------------
	// DurationObservation
	uML_DurationObservation = factory->createClass_in_Package(uML, uml::UmlPackage::DURATIONOBSERVATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_DurationObservation);
	con->setName("first_event_multiplicity");
	con->getConstrainedElement()->push_back(uML_DurationObservation);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_DurationObservation));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if (event->size() = 2)"\
	"  then (firstEvent->size() = 2) else (firstEvent->size() = 0)"\
	"endif")));
	con->setSpecification(oe);
	
    // DurationObservation attributes
	uML_DurationObservation_event = factory->createProperty_in_Class(uML_DurationObservation);
	uML_DurationObservation_firstEvent = factory->createProperty_in_Class(uML_DurationObservation);

    //-------------------------------------------
	// Element
	uML_Element = factory->createClass_in_Package(uML, uml::UmlPackage::ELEMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Element);
	con->setName("has_owner");
	con->getConstrainedElement()->push_back(uML_Element);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Element));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("mustBeOwned() implies owner->notEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Element);
	
	con->setName("not_own_self");
	
	con->getConstrainedElement()->push_back(uML_Element);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Element));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not allOwnedElements()->includes(self)")));
	
	con->setSpecification(oe);
	
    // Element attributes
	uML_Element_ownedComment = factory->createProperty_in_Class(uML_Element);
	uML_Element_ownedElement = factory->createProperty_in_Class(uML_Element);
	uML_Element_owner = factory->createProperty_in_Class(uML_Element);
    // Element operations
	uML_Element_addKeyword_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_addKeyword_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_addKeyword_String_String);uML_Element_addKeyword_String_String_keyword = factory->createParameter_in_Operation(uML_Element_addKeyword_String_String);

	uML_Element_allOwnedElements__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_allOwnedElements_result = factory->createParameter_in_Operation(uML_Element_allOwnedElements__);

	uML_Element_applyStereotype_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_applyStereotype_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_applyStereotype_Stereotype_Stereotype);uML_Element_applyStereotype_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_applyStereotype_Stereotype_Stereotype);

	uML_Element_createEAnnotation_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_createEAnnotation_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_createEAnnotation_String_String);uML_Element_createEAnnotation_String_String_source = factory->createParameter_in_Operation(uML_Element_createEAnnotation_String_String);

	uML_Element_destroy__ = factory->createOperation_in_Class(uML_Element);

	uML_Element_getApplicableStereotype_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_getApplicableStereotype_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_getApplicableStereotype_String_String);uML_Element_getApplicableStereotype_String_String_qualifiedName = factory->createParameter_in_Operation(uML_Element_getApplicableStereotype_String_String);

	uML_Element_getApplicableStereotypes__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getApplicableStereotypes__return = factory->createParameter_in_Operation(uML_Element_getApplicableStereotypes__);

	uML_Element_getAppliedStereotype_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_getAppliedStereotype_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_getAppliedStereotype_String_String);uML_Element_getAppliedStereotype_String_String_qualifiedName = factory->createParameter_in_Operation(uML_Element_getAppliedStereotype_String_String);

	uML_Element_getAppliedStereotypes__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getAppliedStereotypes__return = factory->createParameter_in_Operation(uML_Element_getAppliedStereotypes__);

	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn = factory->createParameter_in_Operation(uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String);uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype = factory->createParameter_in_Operation(uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String);uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName = factory->createParameter_in_Operation(uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String);

	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype);uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype);

	uML_Element_getKeywords__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getKeywords__return = factory->createParameter_in_Operation(uML_Element_getKeywords__);

	uML_Element_getModel__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getModel__return = factory->createParameter_in_Operation(uML_Element_getModel__);

	uML_Element_getNearestPackage__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getNearestPackage__return = factory->createParameter_in_Operation(uML_Element_getNearestPackage__);

	uML_Element_getRelationships__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getRelationships__return = factory->createParameter_in_Operation(uML_Element_getRelationships__);

	uML_Element_getRelationships_EClass_EClass = factory->createOperation_in_Class(uML_Element);
	uML_Element_getRelationships_EClass_EClassreturn = factory->createParameter_in_Operation(uML_Element_getRelationships_EClass_EClass);uML_Element_getRelationships_EClass_EClass_eClass = factory->createParameter_in_Operation(uML_Element_getRelationships_EClass_EClass);

	uML_Element_getRequiredStereotype_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_getRequiredStereotype_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_getRequiredStereotype_String_String);uML_Element_getRequiredStereotype_String_String_qualifiedName = factory->createParameter_in_Operation(uML_Element_getRequiredStereotype_String_String);

	uML_Element_getRequiredStereotypes__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getRequiredStereotypes__return = factory->createParameter_in_Operation(uML_Element_getRequiredStereotypes__);

	uML_Element_getSourceDirectedRelationships__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getSourceDirectedRelationships__return = factory->createParameter_in_Operation(uML_Element_getSourceDirectedRelationships__);

	uML_Element_getSourceDirectedRelationships_EClass_EClass = factory->createOperation_in_Class(uML_Element);
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn = factory->createParameter_in_Operation(uML_Element_getSourceDirectedRelationships_EClass_EClass);uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass = factory->createParameter_in_Operation(uML_Element_getSourceDirectedRelationships_EClass_EClass);

	uML_Element_getStereotypeApplication_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_getStereotypeApplication_Stereotype_Stereotype);uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_getStereotypeApplication_Stereotype_Stereotype);

	uML_Element_getStereotypeApplications__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getStereotypeApplications__return = factory->createParameter_in_Operation(uML_Element_getStereotypeApplications__);

	uML_Element_getTargetDirectedRelationships__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_getTargetDirectedRelationships__return = factory->createParameter_in_Operation(uML_Element_getTargetDirectedRelationships__);

	uML_Element_getTargetDirectedRelationships_EClass_EClass = factory->createOperation_in_Class(uML_Element);
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn = factory->createParameter_in_Operation(uML_Element_getTargetDirectedRelationships_EClass_EClass);uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass = factory->createParameter_in_Operation(uML_Element_getTargetDirectedRelationships_EClass_EClass);

	uML_Element_getValue_Stereotype_String_Stereotype_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn = factory->createParameter_in_Operation(uML_Element_getValue_Stereotype_String_Stereotype_String);uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype = factory->createParameter_in_Operation(uML_Element_getValue_Stereotype_String_Stereotype_String);uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName = factory->createParameter_in_Operation(uML_Element_getValue_Stereotype_String_Stereotype_String);

	uML_Element_hasKeyword_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_hasKeyword_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_hasKeyword_String_String);uML_Element_hasKeyword_String_String_keyword = factory->createParameter_in_Operation(uML_Element_hasKeyword_String_String);

	uML_Element_hasValue_Stereotype_String_Stereotype_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn = factory->createParameter_in_Operation(uML_Element_hasValue_Stereotype_String_Stereotype_String);uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype = factory->createParameter_in_Operation(uML_Element_hasValue_Stereotype_String_Stereotype_String);uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName = factory->createParameter_in_Operation(uML_Element_hasValue_Stereotype_String_Stereotype_String);

	uML_Element_isStereotypeApplicable_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_isStereotypeApplicable_Stereotype_Stereotype);uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_isStereotypeApplicable_Stereotype_Stereotype);

	uML_Element_isStereotypeApplied_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_isStereotypeApplied_Stereotype_Stereotype);uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_isStereotypeApplied_Stereotype_Stereotype);

	uML_Element_isStereotypeRequired_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_isStereotypeRequired_Stereotype_Stereotype);uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_isStereotypeRequired_Stereotype_Stereotype);

	uML_Element_mustBeOwned__ = factory->createOperation_in_Class(uML_Element);
	uML_Element_mustBeOwned_result = factory->createParameter_in_Operation(uML_Element_mustBeOwned__);

	uML_Element_removeKeyword_String_String = factory->createOperation_in_Class(uML_Element);
	uML_Element_removeKeyword_String_Stringreturn = factory->createParameter_in_Operation(uML_Element_removeKeyword_String_String);uML_Element_removeKeyword_String_String_keyword = factory->createParameter_in_Operation(uML_Element_removeKeyword_String_String);

	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject = factory->createOperation_in_Class(uML_Element);
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype = factory->createParameter_in_Operation(uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject);uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName = factory->createParameter_in_Operation(uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject);uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue = factory->createParameter_in_Operation(uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject);

	uML_Element_unapplyStereotype_Stereotype_Stereotype = factory->createOperation_in_Class(uML_Element);
	uML_Element_unapplyStereotype_Stereotype_Stereotypereturn = factory->createParameter_in_Operation(uML_Element_unapplyStereotype_Stereotype_Stereotype);uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype = factory->createParameter_in_Operation(uML_Element_unapplyStereotype_Stereotype_Stereotype);

    //-------------------------------------------
	// ElementImport
	uML_ElementImport = factory->createClass_in_Package(uML, uml::UmlPackage::ELEMENTIMPORT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ElementImport);
	con->setName("imported_element_is_public");
	con->getConstrainedElement()->push_back(uML_ElementImport);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ElementImport));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ElementImport);
	
	con->setName("visibility_public_or_private");
	
	con->getConstrainedElement()->push_back(uML_ElementImport);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ElementImport));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("visibility = VisibilityKind::public or visibility = VisibilityKind::private")));
	
	con->setSpecification(oe);
	
    // ElementImport attributes
	uML_ElementImport_alias = factory->createProperty_in_Class(uML_ElementImport);
	uML_ElementImport_importedElement = factory->createProperty_in_Class(uML_ElementImport);
	uML_ElementImport_importingNamespace = factory->createProperty_in_Class(uML_ElementImport);
	uML_ElementImport_visibility = factory->createProperty_in_Class(uML_ElementImport);
    // ElementImport operations
	uML_ElementImport_getName__ = factory->createOperation_in_Class(uML_ElementImport);
	uML_ElementImport_getName_result = factory->createParameter_in_Operation(uML_ElementImport_getName__);

    //-------------------------------------------
	// EncapsulatedClassifier
	uML_EncapsulatedClassifier = factory->createClass_in_Package(uML, uml::UmlPackage::ENCAPSULATEDCLASSIFIER_CLASS);
	
    // EncapsulatedClassifier attributes
	uML_EncapsulatedClassifier_ownedPort = factory->createProperty_in_Class(uML_EncapsulatedClassifier);
    // EncapsulatedClassifier operations
	uML_EncapsulatedClassifier_ownedPort__ = factory->createOperation_in_Class(uML_EncapsulatedClassifier);
	uML_EncapsulatedClassifier_ownedPort_result = factory->createParameter_in_Operation(uML_EncapsulatedClassifier_ownedPort__);

    //-------------------------------------------
	// Enumeration
	uML_Enumeration = factory->createClass_in_Package(uML, uml::UmlPackage::ENUMERATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Enumeration);
	con->setName("immutable");
	con->getConstrainedElement()->push_back(uML_Enumeration);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Enumeration));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedAttribute->forAll(isReadOnly)")));
	con->setSpecification(oe);
	
    // Enumeration attributes
	uML_Enumeration_ownedLiteral = factory->createProperty_in_Class(uML_Enumeration);

    //-------------------------------------------
	// EnumerationLiteral
	uML_EnumerationLiteral = factory->createClass_in_Package(uML, uml::UmlPackage::ENUMERATIONLITERAL_CLASS);
	
    // EnumerationLiteral attributes
	uML_EnumerationLiteral_classifier = factory->createProperty_in_Class(uML_EnumerationLiteral);
	uML_EnumerationLiteral_enumeration = factory->createProperty_in_Class(uML_EnumerationLiteral);
    // EnumerationLiteral operations
	uML_EnumerationLiteral_classifier__ = factory->createOperation_in_Class(uML_EnumerationLiteral);
	uML_EnumerationLiteral_classifier_result = factory->createParameter_in_Operation(uML_EnumerationLiteral_classifier__);

	uML_EnumerationLiteral_getClassifiers__ = factory->createOperation_in_Class(uML_EnumerationLiteral);
	uML_EnumerationLiteral_getClassifiers__return = factory->createParameter_in_Operation(uML_EnumerationLiteral_getClassifiers__);

    //-------------------------------------------
	// Event
	uML_Event = factory->createClass_in_Package(uML, uml::UmlPackage::EVENT_CLASS);
	

    //-------------------------------------------
	// ExceptionHandler
	uML_ExceptionHandler = factory->createClass_in_Package(uML, uml::UmlPackage::EXCEPTIONHANDLER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ExceptionHandler);
	con->setName("edge_source_target");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExceptionHandler));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() in"\
	"nodes.outgoing->forAll(nodes->includes(target)) and"\
	"nodes.incoming->forAll(nodes->includes(source))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ExceptionHandler);
	
	con->setName("exception_input_type");
	
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExceptionHandler));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("exceptionInput.type=null or "\
	
	"exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ExceptionHandler);
	
	con->setName("handler_body_edges");
	
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExceptionHandler));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ExceptionHandler);
	
	con->setName("handler_body_owner");
	
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExceptionHandler));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("handlerBody.owner=protectedNode.owner")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ExceptionHandler);
	
	con->setName("one_input");
	
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExceptionHandler));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("handlerBody.oclIsKindOf(Action) and"\
	
	"let inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input in"\
	
	"inputs->size()=1 and inputs->first()=exceptionInput")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ExceptionHandler);
	
	con->setName("output_pins");
	
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExceptionHandler));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies"\
	
	"("\
	
	"  handlerBody.oclIsKindOf(Action) and "\
	
	"  let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,"\
	
	"        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in"\
	
	"    protectedNodeOutput->size() = handlerBodyOutput->size() and"\
	
	"    Sequence{1..protectedNodeOutput->size()}->forAll(i |"\
	
	"    	handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and"\
	
	"    	handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and"\
	
	"    	handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i)))"\
	
	")")));
	
	con->setSpecification(oe);
	
    // ExceptionHandler attributes
	uML_ExceptionHandler_exceptionInput = factory->createProperty_in_Class(uML_ExceptionHandler);
	uML_ExceptionHandler_exceptionType = factory->createProperty_in_Class(uML_ExceptionHandler);
	uML_ExceptionHandler_handlerBody = factory->createProperty_in_Class(uML_ExceptionHandler);
	uML_ExceptionHandler_protectedNode = factory->createProperty_in_Class(uML_ExceptionHandler);

    //-------------------------------------------
	// ExecutableNode
	uML_ExecutableNode = factory->createClass_in_Package(uML, uml::UmlPackage::EXECUTABLENODE_CLASS);
	
    // ExecutableNode attributes
	uML_ExecutableNode_handler = factory->createProperty_in_Class(uML_ExecutableNode);

    //-------------------------------------------
	// ExecutionEnvironment
	uML_ExecutionEnvironment = factory->createClass_in_Package(uML, uml::UmlPackage::EXECUTIONENVIRONMENT_CLASS);
	

    //-------------------------------------------
	// ExecutionOccurrenceSpecification
	uML_ExecutionOccurrenceSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::EXECUTIONOCCURRENCESPECIFICATION_CLASS);
	
    // ExecutionOccurrenceSpecification attributes
	uML_ExecutionOccurrenceSpecification_execution = factory->createProperty_in_Class(uML_ExecutionOccurrenceSpecification);

    //-------------------------------------------
	// ExecutionSpecification
	uML_ExecutionSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::EXECUTIONSPECIFICATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ExecutionSpecification);
	con->setName("same_lifeline");
	con->getConstrainedElement()->push_back(uML_ExecutionSpecification);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExecutionSpecification));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("start.covered = finish.covered")));
	con->setSpecification(oe);
	
    // ExecutionSpecification attributes
	uML_ExecutionSpecification_finish = factory->createProperty_in_Class(uML_ExecutionSpecification);
	uML_ExecutionSpecification_start = factory->createProperty_in_Class(uML_ExecutionSpecification);

    //-------------------------------------------
	// ExpansionNode
	uML_ExpansionNode = factory->createClass_in_Package(uML, uml::UmlPackage::EXPANSIONNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ExpansionNode);
	con->setName("region_as_input_or_output");
	con->getConstrainedElement()->push_back(uML_ExpansionNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExpansionNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("regionAsInput->notEmpty() xor regionAsOutput->notEmpty()")));
	con->setSpecification(oe);
	
    // ExpansionNode attributes
	uML_ExpansionNode_regionAsInput = factory->createProperty_in_Class(uML_ExpansionNode);
	uML_ExpansionNode_regionAsOutput = factory->createProperty_in_Class(uML_ExpansionNode);

    //-------------------------------------------
	// ExpansionRegion
	uML_ExpansionRegion = factory->createClass_in_Package(uML, uml::UmlPackage::EXPANSIONREGION_CLASS);
	
    // ExpansionRegion attributes
	uML_ExpansionRegion_inputElement = factory->createProperty_in_Class(uML_ExpansionRegion);
	uML_ExpansionRegion_mode = factory->createProperty_in_Class(uML_ExpansionRegion);
	uML_ExpansionRegion_outputElement = factory->createProperty_in_Class(uML_ExpansionRegion);

    //-------------------------------------------
	// Expression
	uML_Expression = factory->createClass_in_Package(uML, uml::UmlPackage::EXPRESSION_CLASS);
	
    // Expression attributes
	uML_Expression_operand = factory->createProperty_in_Class(uML_Expression);
	uML_Expression_symbol = factory->createProperty_in_Class(uML_Expression);

    //-------------------------------------------
	// Extend
	uML_Extend = factory->createClass_in_Package(uML, uml::UmlPackage::EXTEND_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Extend);
	con->setName("extension_points");
	con->getConstrainedElement()->push_back(uML_Extend);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Extend));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))")));
	con->setSpecification(oe);
	
    // Extend attributes
	uML_Extend_condition = factory->createProperty_in_Class(uML_Extend);
	uML_Extend_extendedCase = factory->createProperty_in_Class(uML_Extend);
	uML_Extend_extension = factory->createProperty_in_Class(uML_Extend);
	uML_Extend_extensionLocation = factory->createProperty_in_Class(uML_Extend);

    //-------------------------------------------
	// Extension
	uML_Extension = factory->createClass_in_Package(uML, uml::UmlPackage::EXTENSION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Extension);
	con->setName("is_binary");
	con->getConstrainedElement()->push_back(uML_Extension);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Extension));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("memberEnd->size() = 2")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Extension);
	
	con->setName("non_owned_end");
	
	con->getConstrainedElement()->push_back(uML_Extension);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Extension));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)")));
	
	con->setSpecification(oe);
	
    // Extension attributes
	uML_Extension_isRequired = factory->createProperty_in_Class(uML_Extension);
	uML_Extension_metaclass = factory->createProperty_in_Class(uML_Extension);
	uML_Extension_ownedEnd = factory->createProperty_in_Class(uML_Extension);
    // Extension operations
	uML_Extension_getStereotype__ = factory->createOperation_in_Class(uML_Extension);
	uML_Extension_getStereotype__return = factory->createParameter_in_Operation(uML_Extension_getStereotype__);

	uML_Extension_getStereotypeEnd__ = factory->createOperation_in_Class(uML_Extension);
	uML_Extension_getStereotypeEnd__return = factory->createParameter_in_Operation(uML_Extension_getStereotypeEnd__);

	uML_Extension_isRequired__ = factory->createOperation_in_Class(uML_Extension);
	uML_Extension_isRequired_result = factory->createParameter_in_Operation(uML_Extension_isRequired__);

	uML_Extension_metaclass__ = factory->createOperation_in_Class(uML_Extension);
	uML_Extension_metaclass_result = factory->createParameter_in_Operation(uML_Extension_metaclass__);

	uML_Extension_metaclassEnd__ = factory->createOperation_in_Class(uML_Extension);
	uML_Extension_metaclassEnd_result = factory->createParameter_in_Operation(uML_Extension_metaclassEnd__);

    //-------------------------------------------
	// ExtensionEnd
	uML_ExtensionEnd = factory->createClass_in_Package(uML, uml::UmlPackage::EXTENSIONEND_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ExtensionEnd);
	con->setName("aggregation");
	con->getConstrainedElement()->push_back(uML_ExtensionEnd);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExtensionEnd));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.aggregation = AggregationKind::composite")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ExtensionEnd);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_ExtensionEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExtensionEnd));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1")));
	
	con->setSpecification(oe);
	
    // ExtensionEnd attributes
	uML_ExtensionEnd_lower = factory->createProperty_in_Class(uML_ExtensionEnd);
	uML_ExtensionEnd_type = factory->createProperty_in_Class(uML_ExtensionEnd);
    // ExtensionEnd operations
	uML_ExtensionEnd_getLower__ = factory->createOperation_in_Class(uML_ExtensionEnd);
	uML_ExtensionEnd_getLower__return = factory->createParameter_in_Operation(uML_ExtensionEnd_getLower__);

	uML_ExtensionEnd_lowerBound__ = factory->createOperation_in_Class(uML_ExtensionEnd);
	uML_ExtensionEnd_lowerBound_result = factory->createParameter_in_Operation(uML_ExtensionEnd_lowerBound__);

	uML_ExtensionEnd_setLower_Integer_Integer = factory->createOperation_in_Class(uML_ExtensionEnd);
	uML_ExtensionEnd_setLower_Integer_Integer_newLower = factory->createParameter_in_Operation(uML_ExtensionEnd_setLower_Integer_Integer);

    //-------------------------------------------
	// ExtensionPoint
	uML_ExtensionPoint = factory->createClass_in_Package(uML, uml::UmlPackage::EXTENSIONPOINT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ExtensionPoint);
	con->setName("must_have_name");
	con->getConstrainedElement()->push_back(uML_ExtensionPoint);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ExtensionPoint));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("name->notEmpty ()")));
	con->setSpecification(oe);
	
    // ExtensionPoint attributes
	uML_ExtensionPoint_useCase = factory->createProperty_in_Class(uML_ExtensionPoint);

    //-------------------------------------------
	// Feature
	uML_Feature = factory->createClass_in_Package(uML, uml::UmlPackage::FEATURE_CLASS);
	
    // Feature attributes
	uML_Feature_featuringClassifier = factory->createProperty_in_Class(uML_Feature);
	uML_Feature_isStatic = factory->createProperty_in_Class(uML_Feature);

    //-------------------------------------------
	// FinalNode
	uML_FinalNode = factory->createClass_in_Package(uML, uml::UmlPackage::FINALNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_FinalNode);
	con->setName("no_outgoing_edges");
	con->getConstrainedElement()->push_back(uML_FinalNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("outgoing->isEmpty()")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// FinalState
	uML_FinalState = factory->createClass_in_Package(uML, uml::UmlPackage::FINALSTATE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_FinalState);
	con->setName("cannot_reference_submachine");
	con->getConstrainedElement()->push_back(uML_FinalState);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalState));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("submachine->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_FinalState);
	
	con->setName("no_entry_behavior");
	
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalState));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("entry->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_FinalState);
	
	con->setName("no_exit_behavior");
	
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalState));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("exit->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_FinalState);
	
	con->setName("no_outgoing_transitions");
	
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalState));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("outgoing->size() = 0")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_FinalState);
	
	con->setName("no_regions");
	
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalState));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("region->size() = 0")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_FinalState);
	
	con->setName("no_state_behavior");
	
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FinalState));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("doActivity->isEmpty()")));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// FlowFinalNode
	uML_FlowFinalNode = factory->createClass_in_Package(uML, uml::UmlPackage::FLOWFINALNODE_CLASS);
	

    //-------------------------------------------
	// ForkNode
	uML_ForkNode = factory->createClass_in_Package(uML, uml::UmlPackage::FORKNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ForkNode);
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_ForkNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ForkNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in"\
	"allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ForkNode);
	
	con->setName("one_incoming_edge");
	
	con->getConstrainedElement()->push_back(uML_ForkNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ForkNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("incoming->size()=1")));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// FunctionBehavior
	uML_FunctionBehavior = factory->createClass_in_Package(uML, uml::UmlPackage::FUNCTIONBEHAVIOR_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_FunctionBehavior);
	con->setName("one_output_parameter");
	con->getConstrainedElement()->push_back(uML_FunctionBehavior);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FunctionBehavior));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.ownedParameter->"\
	"  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_FunctionBehavior);
	
	con->setName("types_of_parameters");
	
	con->getConstrainedElement()->push_back(uML_FunctionBehavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_FunctionBehavior));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedParameter->forAll(p | p.type <> null and"\
	
	"  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))")));
	
	con->setSpecification(oe);
	
    // FunctionBehavior operations
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType = factory->createOperation_in_Class(uML_FunctionBehavior);
	uML_FunctionBehavior_hasAllDataTypeAttributes_result = factory->createParameter_in_Operation(uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType);uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d = factory->createParameter_in_Operation(uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType);

    //-------------------------------------------
	// Gate
	uML_Gate = factory->createClass_in_Package(uML, uml::UmlPackage::GATE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Gate);
	con->setName("actual_gate_distinguishable");
	con->getConstrainedElement()->push_back(uML_Gate);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Gate);
	
	con->setName("actual_gate_matched");
	
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Gate);
	
	con->setName("formal_gate_distinguishable");
	
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Gate);
	
	con->setName("inside_cf_gate_distinguishable");
	
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isInsideCF() implies"\
	
	"let selfOperand : InteractionOperand = self.getOperand() in"\
	
	"  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Gate);
	
	con->setName("inside_cf_matched");
	
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Gate);
	
	con->setName("outside_cf_gate_distinguishable");
	
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Gate);
	
	con->setName("outside_cf_matched");
	
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Gate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isOutsideCF() implies"\
	
	" if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt"\
	
	" then self.combinedFragment.operand->forAll(op : InteractionOperand |"\
	
	" self.combinedFragment.cfragmentGate->select(isInsideCF() and "\
	
	" oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1)"\
	
	" else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1"\
	
	" endif")));
	
	con->setSpecification(oe);
	
    // Gate operations
	uML_Gate_getName__ = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_getName_result = factory->createParameter_in_Operation(uML_Gate_getName__);

	uML_Gate_getOperand__ = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_getOperand_result = factory->createParameter_in_Operation(uML_Gate_getOperand__);

	uML_Gate_isActual__ = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_isActual_result = factory->createParameter_in_Operation(uML_Gate_isActual__);

	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_isDistinguishableFrom_result = factory->createParameter_in_Operation(uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n = factory->createParameter_in_Operation(uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns = factory->createParameter_in_Operation(uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);

	uML_Gate_isFormal__ = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_isFormal_result = factory->createParameter_in_Operation(uML_Gate_isFormal__);

	uML_Gate_isInsideCF__ = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_isInsideCF_result = factory->createParameter_in_Operation(uML_Gate_isInsideCF__);

	uML_Gate_isOutsideCF__ = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_isOutsideCF_result = factory->createParameter_in_Operation(uML_Gate_isOutsideCF__);

	uML_Gate_matches_Gate_Gate = factory->createOperation_in_Class(uML_Gate);
	uML_Gate_matches_result = factory->createParameter_in_Operation(uML_Gate_matches_Gate_Gate);uML_Gate_matches_Gate_Gate_gateToMatch = factory->createParameter_in_Operation(uML_Gate_matches_Gate_Gate);

    //-------------------------------------------
	// GeneralOrdering
	uML_GeneralOrdering = factory->createClass_in_Package(uML, uml::UmlPackage::GENERALORDERING_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_GeneralOrdering);
	con->setName("irreflexive_transitive_closure");
	con->getConstrainedElement()->push_back(uML_GeneralOrdering);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_GeneralOrdering));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("after->closure(toAfter.after)->excludes(before)")));
	con->setSpecification(oe);
	
    // GeneralOrdering attributes
	uML_GeneralOrdering_after = factory->createProperty_in_Class(uML_GeneralOrdering);
	uML_GeneralOrdering_before = factory->createProperty_in_Class(uML_GeneralOrdering);

    //-------------------------------------------
	// Generalization
	uML_Generalization = factory->createClass_in_Package(uML, uml::UmlPackage::GENERALIZATION_CLASS);
	
    // Generalization attributes
	uML_Generalization_general = factory->createProperty_in_Class(uML_Generalization);
	uML_Generalization_generalizationSet = factory->createProperty_in_Class(uML_Generalization);
	uML_Generalization_isSubstitutable = factory->createProperty_in_Class(uML_Generalization);
	uML_Generalization_specific = factory->createProperty_in_Class(uML_Generalization);

    //-------------------------------------------
	// GeneralizationSet
	uML_GeneralizationSet = factory->createClass_in_Package(uML, uml::UmlPackage::GENERALIZATIONSET_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_GeneralizationSet);
	con->setName("generalization_same_classifier");
	con->getConstrainedElement()->push_back(uML_GeneralizationSet);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_GeneralizationSet));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("generalization->collect(general)->asSet()->size() <= 1")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_GeneralizationSet);
	
	con->setName("maps_to_generalization_set");
	
	con->getConstrainedElement()->push_back(uML_GeneralizationSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_GeneralizationSet));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("powertype <> null implies generalization->forAll( gen | "\
	
	"    not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)"\
	
	"  )")));
	
	con->setSpecification(oe);
	
    // GeneralizationSet attributes
	uML_GeneralizationSet_generalization = factory->createProperty_in_Class(uML_GeneralizationSet);
	uML_GeneralizationSet_isCovering = factory->createProperty_in_Class(uML_GeneralizationSet);
	uML_GeneralizationSet_isDisjoint = factory->createProperty_in_Class(uML_GeneralizationSet);
	uML_GeneralizationSet_powertype = factory->createProperty_in_Class(uML_GeneralizationSet);

    //-------------------------------------------
	// Image
	uML_Image = factory->createClass_in_Package(uML, uml::UmlPackage::IMAGE_CLASS);
	
    // Image attributes
	uML_Image_content = factory->createProperty_in_Class(uML_Image);
	uML_Image_format = factory->createProperty_in_Class(uML_Image);
	uML_Image_location = factory->createProperty_in_Class(uML_Image);

    //-------------------------------------------
	// Include
	uML_Include = factory->createClass_in_Package(uML, uml::UmlPackage::INCLUDE_CLASS);
	
    // Include attributes
	uML_Include_addition = factory->createProperty_in_Class(uML_Include);
	uML_Include_includingCase = factory->createProperty_in_Class(uML_Include);

    //-------------------------------------------
	// InformationFlow
	uML_InformationFlow = factory->createClass_in_Package(uML, uml::UmlPackage::INFORMATIONFLOW_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InformationFlow);
	con->setName("convey_classifiers");
	con->getConstrainedElement()->push_back(uML_InformationFlow);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InformationFlow));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)"\
	"  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InformationFlow);
	
	con->setName("must_conform");
	
	con->getConstrainedElement()->push_back(uML_InformationFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InformationFlow));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InformationFlow);
	
	con->setName("sources_and_targets_kind");
	
	con->getConstrainedElement()->push_back(uML_InformationFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InformationFlow));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(self.informationSource->forAll( sis |"\
	
	"  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or "\
	
	"  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or "\
	
	"  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or "\
	
	"  (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) "\
	
	""\
	
	"and"\
	
	""\
	
	"(self.informationTarget->forAll( sit | "\
	
	"  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or "\
	
	"  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or "\
	
	"  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or "\
	
	"(oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))")));
	
	con->setSpecification(oe);
	
    // InformationFlow attributes
	uML_InformationFlow_conveyed = factory->createProperty_in_Class(uML_InformationFlow);
	uML_InformationFlow_informationSource = factory->createProperty_in_Class(uML_InformationFlow);
	uML_InformationFlow_informationTarget = factory->createProperty_in_Class(uML_InformationFlow);
	uML_InformationFlow_realization = factory->createProperty_in_Class(uML_InformationFlow);
	uML_InformationFlow_realizingActivityEdge = factory->createProperty_in_Class(uML_InformationFlow);
	uML_InformationFlow_realizingConnector = factory->createProperty_in_Class(uML_InformationFlow);
	uML_InformationFlow_realizingMessage = factory->createProperty_in_Class(uML_InformationFlow);

    //-------------------------------------------
	// InformationItem
	uML_InformationItem = factory->createClass_in_Package(uML, uml::UmlPackage::INFORMATIONITEM_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InformationItem);
	con->setName("has_no");
	con->getConstrainedElement()->push_back(uML_InformationItem);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InformationItem));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.generalization->isEmpty() and self.feature->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InformationItem);
	
	con->setName("not_instantiable");
	
	con->getConstrainedElement()->push_back(uML_InformationItem);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InformationItem));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isAbstract")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InformationItem);
	
	con->setName("sources_and_targets");
	
	con->getConstrainedElement()->push_back(uML_InformationItem);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InformationItem));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |"\
	
	"  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and"\
	
	"    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and"\
	
	"      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or"\
	
	"        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))")));
	
	con->setSpecification(oe);
	
    // InformationItem attributes
	uML_InformationItem_represented = factory->createProperty_in_Class(uML_InformationItem);

    //-------------------------------------------
	// InitialNode
	uML_InitialNode = factory->createClass_in_Package(uML, uml::UmlPackage::INITIALNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InitialNode);
	con->setName("control_edges");
	con->getConstrainedElement()->push_back(uML_InitialNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InitialNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("outgoing->forAll(oclIsKindOf(ControlFlow))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InitialNode);
	
	con->setName("no_incoming_edges");
	
	con->getConstrainedElement()->push_back(uML_InitialNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InitialNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("incoming->isEmpty()")));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// InputPin
	uML_InputPin = factory->createClass_in_Package(uML, uml::UmlPackage::INPUTPIN_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InputPin);
	con->setName("outgoing_edges_structured_only");
	con->getConstrainedElement()->push_back(uML_InputPin);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InputPin));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("outgoing->notEmpty() implies"\
	"	action<>null and"\
	"	action.oclIsKindOf(StructuredActivityNode) and"\
	"	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// InstanceSpecification
	uML_InstanceSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::INSTANCESPECIFICATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InstanceSpecification);
	con->setName("defining_feature");
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InstanceSpecification));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InstanceSpecification);
	
	con->setName("deployment_artifact");
	
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InstanceSpecification));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InstanceSpecification);
	
	con->setName("deployment_target");
	
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InstanceSpecification));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InstanceSpecification);
	
	con->setName("structural_feature");
	
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InstanceSpecification));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))")));
	
	con->setSpecification(oe);
	
    // InstanceSpecification attributes
	uML_InstanceSpecification_classifier = factory->createProperty_in_Class(uML_InstanceSpecification);
	uML_InstanceSpecification_slot = factory->createProperty_in_Class(uML_InstanceSpecification);
	uML_InstanceSpecification_specification = factory->createProperty_in_Class(uML_InstanceSpecification);

    //-------------------------------------------
	// InstanceValue
	uML_InstanceValue = factory->createClass_in_Package(uML, uml::UmlPackage::INSTANCEVALUE_CLASS);
	
    // InstanceValue attributes
	uML_InstanceValue_instance = factory->createProperty_in_Class(uML_InstanceValue);
    // InstanceValue operations
	uML_InstanceValue_stringValue__ = factory->createOperation_in_Class(uML_InstanceValue);
	uML_InstanceValue_stringValue__return = factory->createParameter_in_Operation(uML_InstanceValue_stringValue__);

    //-------------------------------------------
	// Interaction
	uML_Interaction = factory->createClass_in_Package(uML, uml::UmlPackage::INTERACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Interaction);
	con->setName("not_contained");
	con->getConstrainedElement()->push_back(uML_Interaction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Interaction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("enclosingInteraction->isEmpty()")));
	con->setSpecification(oe);
	
    // Interaction attributes
	uML_Interaction_action = factory->createProperty_in_Class(uML_Interaction);
	uML_Interaction_formalGate = factory->createProperty_in_Class(uML_Interaction);
	uML_Interaction_fragment = factory->createProperty_in_Class(uML_Interaction);
	uML_Interaction_lifeline = factory->createProperty_in_Class(uML_Interaction);
	uML_Interaction_message = factory->createProperty_in_Class(uML_Interaction);

    //-------------------------------------------
	// InteractionConstraint
	uML_InteractionConstraint = factory->createClass_in_Package(uML, uml::UmlPackage::INTERACTIONCONSTRAINT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InteractionConstraint);
	con->setName("dynamic_variables");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionConstraint));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionConstraint);
	
	con->setName("global_data");
	
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionConstraint));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionConstraint);
	
	con->setName("maxint_greater_equal_minint");
	
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionConstraint));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("maxint->notEmpty() implies (minint->notEmpty() and "\
	
	"maxint->asSequence()->first().integerValue() >="\
	
	"minint->asSequence()->first().integerValue() )")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionConstraint);
	
	con->setName("maxint_positive");
	
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionConstraint));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("maxint->notEmpty() implies "\
	
	"maxint->asSequence()->first().integerValue() > 0")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionConstraint);
	
	con->setName("minint_maxint");
	
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionConstraint));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("maxint->notEmpty() or minint->notEmpty() implies"\
	
	"interactionOperand.combinedFragment.interactionOperator ="\
	
	"InteractionOperatorKind::loop")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionConstraint);
	
	con->setName("minint_non_negative");
	
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionConstraint));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("minint->notEmpty() implies "\
	
	"minint->asSequence()->first().integerValue() >= 0")));
	
	con->setSpecification(oe);
	
    // InteractionConstraint attributes
	uML_InteractionConstraint_maxint = factory->createProperty_in_Class(uML_InteractionConstraint);
	uML_InteractionConstraint_minint = factory->createProperty_in_Class(uML_InteractionConstraint);

    //-------------------------------------------
	// InteractionFragment
	uML_InteractionFragment = factory->createClass_in_Package(uML, uml::UmlPackage::INTERACTIONFRAGMENT_CLASS);
	
    // InteractionFragment attributes
	uML_InteractionFragment_covered = factory->createProperty_in_Class(uML_InteractionFragment);
	uML_InteractionFragment_enclosingInteraction = factory->createProperty_in_Class(uML_InteractionFragment);
	uML_InteractionFragment_enclosingOperand = factory->createProperty_in_Class(uML_InteractionFragment);
	uML_InteractionFragment_generalOrdering = factory->createProperty_in_Class(uML_InteractionFragment);

    //-------------------------------------------
	// InteractionOperand
	uML_InteractionOperand = factory->createClass_in_Package(uML, uml::UmlPackage::INTERACTIONOPERAND_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InteractionOperand);
	con->setName("guard_contain_references");
	con->getConstrainedElement()->push_back(uML_InteractionOperand);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionOperand));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionOperand);
	
	con->setName("guard_directly_prior");
	
	con->getConstrainedElement()->push_back(uML_InteractionOperand);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionOperand));
	
	con->setSpecification(oe);
	
    // InteractionOperand attributes
	uML_InteractionOperand_fragment = factory->createProperty_in_Class(uML_InteractionOperand);
	uML_InteractionOperand_guard = factory->createProperty_in_Class(uML_InteractionOperand);

    //-------------------------------------------
	// InteractionUse
	uML_InteractionUse = factory->createClass_in_Package(uML, uml::UmlPackage::INTERACTIONUSE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InteractionUse);
	con->setName("all_lifelines");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionUse));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->"\
	"union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->"\
	"collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in"\
	"parentInteraction->size()=1 and let refInteraction : Interaction = refersTo in"\
	"parentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->"\
	"forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and "\
	"("\
	"( refLifeline.selector.oclIsKindOf(LiteralString) implies"\
	"  intLifeline.selector.oclIsKindOf(LiteralString) and "\
	"  refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and"\
	"( refLifeline.selector.oclIsKindOf(LiteralInteger) implies"\
	"  intLifeline.selector.oclIsKindOf(LiteralInteger) and "\
	"  refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )"\
	")"\
	" implies self.covered->asSet()->includes(intLifeline)))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionUse);
	
	con->setName("arguments_are_constants");
	
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionUse));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionUse);
	
	con->setName("arguments_correspond_to_parameters");
	
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionUse));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionUse);
	
	con->setName("gates_match");
	
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionUse));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("actualGate->notEmpty() implies "\
	
	"refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) and"\
	
	"self.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionUse);
	
	con->setName("returnValueRecipient_coverage");
	
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionUse));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("returnValueRecipient->asSet()->notEmpty() implies"\
	
	"let covCE : Set(ConnectableElement) = covered.represents->asSet() in "\
	
	"covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in "\
	
	"let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in "\
	
	"allProps->includes(returnValueRecipient)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_InteractionUse);
	
	con->setName("returnValue_type_recipient_correspondence");
	
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InteractionUse));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()")));
	
	con->setSpecification(oe);
	
    // InteractionUse attributes
	uML_InteractionUse_actualGate = factory->createProperty_in_Class(uML_InteractionUse);
	uML_InteractionUse_argument = factory->createProperty_in_Class(uML_InteractionUse);
	uML_InteractionUse_refersTo = factory->createProperty_in_Class(uML_InteractionUse);
	uML_InteractionUse_returnValue = factory->createProperty_in_Class(uML_InteractionUse);
	uML_InteractionUse_returnValueRecipient = factory->createProperty_in_Class(uML_InteractionUse);

    //-------------------------------------------
	// Interface
	uML_Interface = factory->createClass_in_Package(uML, uml::UmlPackage::INTERFACE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Interface);
	con->setName("visibility");
	con->getConstrainedElement()->push_back(uML_Interface);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Interface));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("feature->forAll(visibility = VisibilityKind::public)")));
	con->setSpecification(oe);
	
    // Interface attributes
	uML_Interface_nestedClassifier = factory->createProperty_in_Class(uML_Interface);
	uML_Interface_ownedAttribute = factory->createProperty_in_Class(uML_Interface);
	uML_Interface_ownedOperation = factory->createProperty_in_Class(uML_Interface);
	uML_Interface_ownedReception = factory->createProperty_in_Class(uML_Interface);
	uML_Interface_protocol = factory->createProperty_in_Class(uML_Interface);
	uML_Interface_redefinedInterface = factory->createProperty_in_Class(uML_Interface);
    // Interface operations
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_Interface);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createParameter_in_Operation(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createParameter_in_Operation(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower = factory->createParameter_in_Operation(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper = factory->createParameter_in_Operation(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type = factory->createOperation_in_Class(uML_Interface);
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn = factory->createParameter_in_Operation(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createParameter_in_Operation(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createParameter_in_Operation(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createParameter_in_Operation(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createParameter_in_Operation(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type);

    //-------------------------------------------
	// InterfaceRealization
	uML_InterfaceRealization = factory->createClass_in_Package(uML, uml::UmlPackage::INTERFACEREALIZATION_CLASS);
	
    // InterfaceRealization attributes
	uML_InterfaceRealization_contract = factory->createProperty_in_Class(uML_InterfaceRealization);
	uML_InterfaceRealization_implementingClassifier = factory->createProperty_in_Class(uML_InterfaceRealization);

    //-------------------------------------------
	// InterruptibleActivityRegion
	uML_InterruptibleActivityRegion = factory->createClass_in_Package(uML, uml::UmlPackage::INTERRUPTIBLEACTIVITYREGION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_InterruptibleActivityRegion);
	con->setName("interrupting_edges");
	con->getConstrainedElement()->push_back(uML_InterruptibleActivityRegion);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_InterruptibleActivityRegion));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("interruptingEdge->forAll(edge | "\
	"  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)")));
	con->setSpecification(oe);
	
    // InterruptibleActivityRegion attributes
	uML_InterruptibleActivityRegion_interruptingEdge = factory->createProperty_in_Class(uML_InterruptibleActivityRegion);
	uML_InterruptibleActivityRegion_node = factory->createProperty_in_Class(uML_InterruptibleActivityRegion);

    //-------------------------------------------
	// Interval
	uML_Interval = factory->createClass_in_Package(uML, uml::UmlPackage::INTERVAL_CLASS);
	
    // Interval attributes
	uML_Interval_max = factory->createProperty_in_Class(uML_Interval);
	uML_Interval_min = factory->createProperty_in_Class(uML_Interval);

    //-------------------------------------------
	// IntervalConstraint
	uML_IntervalConstraint = factory->createClass_in_Package(uML, uml::UmlPackage::INTERVALCONSTRAINT_CLASS);
	
    // IntervalConstraint attributes
	uML_IntervalConstraint_specification = factory->createProperty_in_Class(uML_IntervalConstraint);

    //-------------------------------------------
	// InvocationAction
	uML_InvocationAction = factory->createClass_in_Package(uML, uml::UmlPackage::INVOCATIONACTION_CLASS);
	
    // InvocationAction attributes
	uML_InvocationAction_argument = factory->createProperty_in_Class(uML_InvocationAction);
	uML_InvocationAction_onPort = factory->createProperty_in_Class(uML_InvocationAction);

    //-------------------------------------------
	// JoinNode
	uML_JoinNode = factory->createClass_in_Package(uML, uml::UmlPackage::JOINNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_JoinNode);
	con->setName("incoming_object_flow");
	con->getConstrainedElement()->push_back(uML_JoinNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_JoinNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))"\
	"else outgoing->forAll(oclIsKindOf(ControlFlow))"\
	"endif")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_JoinNode);
	
	con->setName("one_outgoing_edge");
	
	con->getConstrainedElement()->push_back(uML_JoinNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_JoinNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("outgoing->size() = 1")));
	
	con->setSpecification(oe);
	
    // JoinNode attributes
	uML_JoinNode_isCombineDuplicate = factory->createProperty_in_Class(uML_JoinNode);
	uML_JoinNode_joinSpec = factory->createProperty_in_Class(uML_JoinNode);

    //-------------------------------------------
	// Lifeline
	uML_Lifeline = factory->createClass_in_Package(uML, uml::UmlPackage::LIFELINE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Lifeline);
	con->setName("interaction_uses_share_lifeline");
	con->getConstrainedElement()->push_back(uML_Lifeline);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Lifeline));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let intUses : Set(InteractionUse) = interaction.interactionUse  in "\
	"intUses->forAll"\
	"( iuse : InteractionUse | "\
	"let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()"\
	"->union("\
	"iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()"\
	"               ) "\
	"in"\
	"let peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()"\
	"->union("\
	"usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()"\
	"->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->"\
	"select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()"\
	"               )->excluding(iuse)"\
	" in"\
	"peerUses->forAll( peerUse : InteractionUse |"\
	" peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and "\
	" ( self.selector.oclIsKindOf(LiteralString) implies"\
	"  l.selector.oclIsKindOf(LiteralString) and "\
	"  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )"\
	"  and "\
	"( self.selector.oclIsKindOf(LiteralInteger) implies"\
	"  l.selector.oclIsKindOf(LiteralInteger) and "\
	"  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )"\
	")  "\
	"implies"\
	" usingInteraction.lifeline->exists(represents = self.represents and"\
	" ( self.selector.oclIsKindOf(LiteralString) implies"\
	"  l.selector.oclIsKindOf(LiteralString) and "\
	"  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )"\
	"and "\
	"( self.selector.oclIsKindOf(LiteralInteger) implies"\
	"  l.selector.oclIsKindOf(LiteralInteger) and "\
	"  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )"\
	")"\
	"                                                )"\
	"                    )"\
	")")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Lifeline);
	
	con->setName("same_classifier");
	
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Lifeline));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("represents.namespace->closure(namespace)->includes(interaction._'context')")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Lifeline);
	
	con->setName("selector_int_or_string");
	
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Lifeline));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.selector->notEmpty() implies "\
	
	"self.selector.oclIsKindOf(LiteralInteger) or "\
	
	"self.selector.oclIsKindOf(LiteralString)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Lifeline);
	
	con->setName("selector_specified");
	
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Lifeline));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string(" self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())")));
	
	con->setSpecification(oe);
	
    // Lifeline attributes
	uML_Lifeline_coveredBy = factory->createProperty_in_Class(uML_Lifeline);
	uML_Lifeline_decomposedAs = factory->createProperty_in_Class(uML_Lifeline);
	uML_Lifeline_interaction = factory->createProperty_in_Class(uML_Lifeline);
	uML_Lifeline_represents = factory->createProperty_in_Class(uML_Lifeline);
	uML_Lifeline_selector = factory->createProperty_in_Class(uML_Lifeline);

    //-------------------------------------------
	// LinkAction
	uML_LinkAction = factory->createClass_in_Package(uML, uml::UmlPackage::LINKACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_LinkAction);
	con->setName("not_static");
	con->getConstrainedElement()->push_back(uML_LinkAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("endData->forAll(not end.isStatic)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LinkAction);
	
	con->setName("same_association");
	
	con->getConstrainedElement()->push_back(uML_LinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("endData.end = self.association().memberEnd->asBag()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LinkAction);
	
	con->setName("same_pins");
	
	con->getConstrainedElement()->push_back(uML_LinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("inputValue->asBag()=endData.allPins()")));
	
	con->setSpecification(oe);
	
    // LinkAction attributes
	uML_LinkAction_endData = factory->createProperty_in_Class(uML_LinkAction);
	uML_LinkAction_inputValue = factory->createProperty_in_Class(uML_LinkAction);
    // LinkAction operations
	uML_LinkAction_association__ = factory->createOperation_in_Class(uML_LinkAction);
	uML_LinkAction_association_result = factory->createParameter_in_Operation(uML_LinkAction_association__);

    //-------------------------------------------
	// LinkEndCreationData
	uML_LinkEndCreationData = factory->createClass_in_Package(uML, uml::UmlPackage::LINKENDCREATIONDATA_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_LinkEndCreationData);
	con->setName("insertAt_pin");
	con->getConstrainedElement()->push_back(uML_LinkEndCreationData);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndCreationData));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if  not end.isOrderedthen insertAt = nullelse	not isReplaceAll=false implies	insertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))endif")));
	con->setSpecification(oe);
	
    // LinkEndCreationData attributes
	uML_LinkEndCreationData_insertAt = factory->createProperty_in_Class(uML_LinkEndCreationData);
	uML_LinkEndCreationData_isReplaceAll = factory->createProperty_in_Class(uML_LinkEndCreationData);
    // LinkEndCreationData operations
	uML_LinkEndCreationData_allPins__ = factory->createOperation_in_Class(uML_LinkEndCreationData);
	uML_LinkEndCreationData_allPins_result = factory->createParameter_in_Operation(uML_LinkEndCreationData_allPins__);

    //-------------------------------------------
	// LinkEndData
	uML_LinkEndData = factory->createClass_in_Package(uML, uml::UmlPackage::LINKENDDATA_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_LinkEndData);
	con->setName("end_object_input_pin");
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndData));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value->excludesAll(qualifier.value)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LinkEndData);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndData));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value<>null implies value.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LinkEndData);
	
	con->setName("property_is_association_end");
	
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndData));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("end.association <> null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LinkEndData);
	
	con->setName("qualifiers");
	
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndData));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("end.qualifier->includesAll(qualifier.qualifier)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LinkEndData);
	
	con->setName("same_type");
	
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndData));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value<>null implies value.type.conformsTo(end.type)")));
	
	con->setSpecification(oe);
	
    // LinkEndData attributes
	uML_LinkEndData_end = factory->createProperty_in_Class(uML_LinkEndData);
	uML_LinkEndData_qualifier = factory->createProperty_in_Class(uML_LinkEndData);
	uML_LinkEndData_value = factory->createProperty_in_Class(uML_LinkEndData);
    // LinkEndData operations
	uML_LinkEndData_allPins__ = factory->createOperation_in_Class(uML_LinkEndData);
	uML_LinkEndData_allPins_result = factory->createParameter_in_Operation(uML_LinkEndData_allPins__);

    //-------------------------------------------
	// LinkEndDestructionData
	uML_LinkEndDestructionData = factory->createClass_in_Package(uML, uml::UmlPackage::LINKENDDESTRUCTIONDATA_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_LinkEndDestructionData);
	con->setName("destroyAt_pin");
	con->getConstrainedElement()->push_back(uML_LinkEndDestructionData);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LinkEndDestructionData));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if  not end.isOrdered or end.isUnique or isDestroyDuplicates"\
	"then destroyAt = null"\
	"else"\
	"	destroyAt <> null and "\
	"	destroyAt->forAll(type=UnlimitedNatural and is(1,1))"\
	"endif")));
	con->setSpecification(oe);
	
    // LinkEndDestructionData attributes
	uML_LinkEndDestructionData_destroyAt = factory->createProperty_in_Class(uML_LinkEndDestructionData);
	uML_LinkEndDestructionData_isDestroyDuplicates = factory->createProperty_in_Class(uML_LinkEndDestructionData);
    // LinkEndDestructionData operations
	uML_LinkEndDestructionData_allPins__ = factory->createOperation_in_Class(uML_LinkEndDestructionData);
	uML_LinkEndDestructionData_allPins_result = factory->createParameter_in_Operation(uML_LinkEndDestructionData_allPins__);

    //-------------------------------------------
	// LiteralBoolean
	uML_LiteralBoolean = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALBOOLEAN_CLASS);
	
    // LiteralBoolean attributes
	uML_LiteralBoolean_value = factory->createProperty_in_Class(uML_LiteralBoolean);
    // LiteralBoolean operations
	uML_LiteralBoolean_booleanValue__ = factory->createOperation_in_Class(uML_LiteralBoolean);
	uML_LiteralBoolean_booleanValue_result = factory->createParameter_in_Operation(uML_LiteralBoolean_booleanValue__);

	uML_LiteralBoolean_isComputable__ = factory->createOperation_in_Class(uML_LiteralBoolean);
	uML_LiteralBoolean_isComputable_result = factory->createParameter_in_Operation(uML_LiteralBoolean_isComputable__);

	uML_LiteralBoolean_stringValue__ = factory->createOperation_in_Class(uML_LiteralBoolean);
	uML_LiteralBoolean_stringValue__return = factory->createParameter_in_Operation(uML_LiteralBoolean_stringValue__);

    //-------------------------------------------
	// LiteralInteger
	uML_LiteralInteger = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALINTEGER_CLASS);
	
    // LiteralInteger attributes
	uML_LiteralInteger_value = factory->createProperty_in_Class(uML_LiteralInteger);
    // LiteralInteger operations
	uML_LiteralInteger_integerValue__ = factory->createOperation_in_Class(uML_LiteralInteger);
	uML_LiteralInteger_integerValue_result = factory->createParameter_in_Operation(uML_LiteralInteger_integerValue__);

	uML_LiteralInteger_isComputable__ = factory->createOperation_in_Class(uML_LiteralInteger);
	uML_LiteralInteger_isComputable_result = factory->createParameter_in_Operation(uML_LiteralInteger_isComputable__);

	uML_LiteralInteger_stringValue__ = factory->createOperation_in_Class(uML_LiteralInteger);
	uML_LiteralInteger_stringValue__return = factory->createParameter_in_Operation(uML_LiteralInteger_stringValue__);

    //-------------------------------------------
	// LiteralNull
	uML_LiteralNull = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALNULL_CLASS);
	
    // LiteralNull operations
	uML_LiteralNull_isComputable__ = factory->createOperation_in_Class(uML_LiteralNull);
	uML_LiteralNull_isComputable_result = factory->createParameter_in_Operation(uML_LiteralNull_isComputable__);

	uML_LiteralNull_isNull__ = factory->createOperation_in_Class(uML_LiteralNull);
	uML_LiteralNull_isNull_result = factory->createParameter_in_Operation(uML_LiteralNull_isNull__);

    //-------------------------------------------
	// LiteralReal
	uML_LiteralReal = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALREAL_CLASS);
	
    // LiteralReal attributes
	uML_LiteralReal_value = factory->createProperty_in_Class(uML_LiteralReal);
    // LiteralReal operations
	uML_LiteralReal_isComputable__ = factory->createOperation_in_Class(uML_LiteralReal);
	uML_LiteralReal_isComputable_result = factory->createParameter_in_Operation(uML_LiteralReal_isComputable__);

	uML_LiteralReal_realValue__ = factory->createOperation_in_Class(uML_LiteralReal);
	uML_LiteralReal_realValue_result = factory->createParameter_in_Operation(uML_LiteralReal_realValue__);

	uML_LiteralReal_stringValue__ = factory->createOperation_in_Class(uML_LiteralReal);
	uML_LiteralReal_stringValue__return = factory->createParameter_in_Operation(uML_LiteralReal_stringValue__);

    //-------------------------------------------
	// LiteralSpecification
	uML_LiteralSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALSPECIFICATION_CLASS);
	

    //-------------------------------------------
	// LiteralString
	uML_LiteralString = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALSTRING_CLASS);
	
    // LiteralString attributes
	uML_LiteralString_value = factory->createProperty_in_Class(uML_LiteralString);
    // LiteralString operations
	uML_LiteralString_integerValue__ = factory->createOperation_in_Class(uML_LiteralString);
	uML_LiteralString_integerValue__return = factory->createParameter_in_Operation(uML_LiteralString_integerValue__);

	uML_LiteralString_isComputable__ = factory->createOperation_in_Class(uML_LiteralString);
	uML_LiteralString_isComputable_result = factory->createParameter_in_Operation(uML_LiteralString_isComputable__);

	uML_LiteralString_stringValue__ = factory->createOperation_in_Class(uML_LiteralString);
	uML_LiteralString_stringValue_result = factory->createParameter_in_Operation(uML_LiteralString_stringValue__);

	uML_LiteralString_unlimitedValue__ = factory->createOperation_in_Class(uML_LiteralString);
	uML_LiteralString_unlimitedValue__return = factory->createParameter_in_Operation(uML_LiteralString_unlimitedValue__);

    //-------------------------------------------
	// LiteralUnlimitedNatural
	uML_LiteralUnlimitedNatural = factory->createClass_in_Package(uML, uml::UmlPackage::LITERALUNLIMITEDNATURAL_CLASS);
	
    // LiteralUnlimitedNatural attributes
	uML_LiteralUnlimitedNatural_value = factory->createProperty_in_Class(uML_LiteralUnlimitedNatural);
    // LiteralUnlimitedNatural operations
	uML_LiteralUnlimitedNatural_isComputable__ = factory->createOperation_in_Class(uML_LiteralUnlimitedNatural);
	uML_LiteralUnlimitedNatural_isComputable_result = factory->createParameter_in_Operation(uML_LiteralUnlimitedNatural_isComputable__);

	uML_LiteralUnlimitedNatural_stringValue__ = factory->createOperation_in_Class(uML_LiteralUnlimitedNatural);
	uML_LiteralUnlimitedNatural_stringValue__return = factory->createParameter_in_Operation(uML_LiteralUnlimitedNatural_stringValue__);

	uML_LiteralUnlimitedNatural_unlimitedValue__ = factory->createOperation_in_Class(uML_LiteralUnlimitedNatural);
	uML_LiteralUnlimitedNatural_unlimitedValue_result = factory->createParameter_in_Operation(uML_LiteralUnlimitedNatural_unlimitedValue__);

    //-------------------------------------------
	// LoopNode
	uML_LoopNode = factory->createClass_in_Package(uML, uml::UmlPackage::LOOPNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_LoopNode);
	con->setName("body_output_pins");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("executable_nodes");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("input_edges");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("loopVariableInput.outgoing->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("loop_variable_outgoing");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("allOwnedNodes()->includesAll(loopVariable.outgoing.target)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("matching_loop_variables");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("loopVariableInput->size()=loopVariable->size() and"\
	
	"loopVariableInput.type=loopVariable.type and"\
	
	"loopVariableInput.isUnique=loopVariable.isUnique and"\
	
	"loopVariableInput.lower=loopVariable.lower and"\
	
	"loopVariableInput.upper=loopVariable.upper")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("matching_output_pins");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("bodyOutput->size()=loopVariable->size() and"\
	
	"Sequence{1..loopVariable->size()}->forAll(i |"\
	
	"	bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) and"\
	
	"	bodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered and"\
	
	"	bodyOutput->at(i).isUnique = loopVariable->at(i).isUnique and"\
	
	"	loopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("matching_result_pins");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result->size()=loopVariable->size() and"\
	
	"result.type=loopVariable.type and"\
	
	"result.isUnique=loopVariable.isUnique and"\
	
	"result.lower=loopVariable.lower and"\
	
	"result.upper=loopVariable.upper")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("result_no_incoming");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.incoming->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_LoopNode);
	
	con->setName("setup_test_and_body");
	
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_LoopNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("setupPart->intersection(test)->isEmpty() and"\
	
	"setupPart->intersection(bodyPart)->isEmpty() and"\
	
	"test->intersection(bodyPart)->isEmpty()")));
	
	con->setSpecification(oe);
	
    // LoopNode attributes
	uML_LoopNode_bodyOutput = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_bodyPart = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_decider = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_isTestedFirst = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_loopVariable = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_loopVariableInput = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_result = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_setupPart = factory->createProperty_in_Class(uML_LoopNode);
	uML_LoopNode_test = factory->createProperty_in_Class(uML_LoopNode);
    // LoopNode operations
	uML_LoopNode_allActions__ = factory->createOperation_in_Class(uML_LoopNode);
	uML_LoopNode_allActions_result = factory->createParameter_in_Operation(uML_LoopNode_allActions__);

	uML_LoopNode_sourceNodes__ = factory->createOperation_in_Class(uML_LoopNode);
	uML_LoopNode_sourceNodes_result = factory->createParameter_in_Operation(uML_LoopNode_sourceNodes__);

    //-------------------------------------------
	// Manifestation
	uML_Manifestation = factory->createClass_in_Package(uML, uml::UmlPackage::MANIFESTATION_CLASS);
	
    // Manifestation attributes
	uML_Manifestation_utilizedElement = factory->createProperty_in_Class(uML_Manifestation);

    //-------------------------------------------
	// MergeNode
	uML_MergeNode = factory->createClass_in_Package(uML, uml::UmlPackage::MERGENODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_MergeNode);
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_MergeNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MergeNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in"\
	"allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_MergeNode);
	
	con->setName("one_outgoing_edge");
	
	con->getConstrainedElement()->push_back(uML_MergeNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MergeNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("outgoing->size()=1")));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// Message
	uML_Message = factory->createClass_in_Package(uML, uml::UmlPackage::MESSAGE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Message);
	con->setName("arguments");
	con->getConstrainedElement()->push_back(uML_Message);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("cannot_cross_boundaries");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("sendEvent->notEmpty() and receiveEvent->notEmpty() implies"\
	
	"let sendEnclosingFrag : Set(InteractionFragment) = "\
	
	"sendEvent->asOrderedSet()->first().enclosingFragment()"\
	
	"in "\
	
	"let receiveEnclosingFrag : Set(InteractionFragment) = "\
	
	"receiveEvent->asOrderedSet()->first().enclosingFragment()"\
	
	"in  sendEnclosingFrag = receiveEnclosingFrag")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("occurrence_specifications");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("sending_receiving_message_event");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)"\
	
	"implies"\
	
	"let f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered in"\
	
	"f = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  implies"\
	
	"f.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < "\
	
	"f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("signature_is_operation_reply");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies "\
	
	" let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->"\
	
	"select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)"\
	
	"in replyParms->size() = self.argument->size() and"\
	
	"self.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) in"\
	
	"e.operand->notEmpty()  implies "\
	
	"let p : Parameter = replyParms->at(self.argument->indexOf(o)) in"\
	
	"e.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("signature_is_operation_request");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies "\
	
	" let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->"\
	
	" select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )"\
	
	"in requestParms->size() = self.argument->size() and"\
	
	"self.argument->forAll( o: ValueSpecification | "\
	
	"not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies "\
	
	"let p : Parameter = requestParms->at(self.argument->indexOf(o)) in"\
	
	"o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))"\
	
	")")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("signature_is_signal");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies"\
	
	"   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->"\
	
	"             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()"\
	
	"   in signalAttributes->size() = self.argument->size()"\
	
	"   and self.argument->forAll( o: ValueSpecification |"\
	
	"          not (o.oclIsKindOf(Expression)"\
	
	"          and o.oclAsType(Expression).symbol->size()=0"\
	
	"          and o.oclAsType(Expression).operand->isEmpty() ) implies"\
	
	"              let p : Property = signalAttributes->at(self.argument->indexOf(o))"\
	
	"              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Message);
	
	con->setName("signature_refer_to");
	
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Message));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("signature->notEmpty() implies "\
	
	"((signature.oclIsKindOf(Operation) and "\
	
	"(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) "\
	
	") or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal )"\
	
	" ) and name = signature.name")));
	
	con->setSpecification(oe);
	
    // Message attributes
	uML_Message_argument = factory->createProperty_in_Class(uML_Message);
	uML_Message_connector = factory->createProperty_in_Class(uML_Message);
	uML_Message_interaction = factory->createProperty_in_Class(uML_Message);
	uML_Message_messageKind = factory->createProperty_in_Class(uML_Message);
	uML_Message_messageSort = factory->createProperty_in_Class(uML_Message);
	uML_Message_receiveEvent = factory->createProperty_in_Class(uML_Message);
	uML_Message_sendEvent = factory->createProperty_in_Class(uML_Message);
	uML_Message_signature = factory->createProperty_in_Class(uML_Message);
    // Message operations
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace = factory->createOperation_in_Class(uML_Message);
	uML_Message_isDistinguishableFrom_result = factory->createParameter_in_Operation(uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n = factory->createParameter_in_Operation(uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns = factory->createParameter_in_Operation(uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);

	uML_Message_messageKind__ = factory->createOperation_in_Class(uML_Message);
	uML_Message_messageKind_result = factory->createParameter_in_Operation(uML_Message_messageKind__);

    //-------------------------------------------
	// MessageEnd
	uML_MessageEnd = factory->createClass_in_Package(uML, uml::UmlPackage::MESSAGEEND_CLASS);
	
    // MessageEnd attributes
	uML_MessageEnd_message = factory->createProperty_in_Class(uML_MessageEnd);
    // MessageEnd operations
	uML_MessageEnd_enclosingFragment__ = factory->createOperation_in_Class(uML_MessageEnd);
	uML_MessageEnd_enclosingFragment_result = factory->createParameter_in_Operation(uML_MessageEnd_enclosingFragment__);

	uML_MessageEnd_isReceive__ = factory->createOperation_in_Class(uML_MessageEnd);
	uML_MessageEnd_isReceive_result = factory->createParameter_in_Operation(uML_MessageEnd_isReceive__);

	uML_MessageEnd_isSend__ = factory->createOperation_in_Class(uML_MessageEnd);
	uML_MessageEnd_isSend_result = factory->createParameter_in_Operation(uML_MessageEnd_isSend__);

	uML_MessageEnd_oppositeEnd__ = factory->createOperation_in_Class(uML_MessageEnd);
	uML_MessageEnd_oppositeEnd_result = factory->createParameter_in_Operation(uML_MessageEnd_oppositeEnd__);

    //-------------------------------------------
	// MessageEvent
	uML_MessageEvent = factory->createClass_in_Package(uML, uml::UmlPackage::MESSAGEEVENT_CLASS);
	

    //-------------------------------------------
	// MessageOccurrenceSpecification
	uML_MessageOccurrenceSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::MESSAGEOCCURRENCESPECIFICATION_CLASS);
	

    //-------------------------------------------
	// Model
	uML_Model = factory->createClass_in_Package(uML, uml::UmlPackage::MODEL_CLASS);
	
    // Model attributes
	uML_Model_viewpoint = factory->createProperty_in_Class(uML_Model);
    // Model operations
	uML_Model_isMetamodel__ = factory->createOperation_in_Class(uML_Model);
	uML_Model_isMetamodel__return = factory->createParameter_in_Operation(uML_Model_isMetamodel__);

    //-------------------------------------------
	// MultiplicityElement
	uML_MultiplicityElement = factory->createClass_in_Package(uML, uml::UmlPackage::MULTIPLICITYELEMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_MultiplicityElement);
	con->setName("lower_ge_0");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MultiplicityElement));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("lowerBound() >= 0")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_MultiplicityElement);
	
	con->setName("lower_is_integer");
	
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MultiplicityElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("lowerValue <> null implies lowerValue.integerValue() <> null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_MultiplicityElement);
	
	con->setName("upper_ge_lower");
	
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MultiplicityElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("upperBound() >= lowerBound()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_MultiplicityElement);
	
	con->setName("upper_is_unlimitedNatural");
	
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MultiplicityElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("upperValue <> null implies upperValue.unlimitedValue() <> null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_MultiplicityElement);
	
	con->setName("value_specification_constant");
	
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MultiplicityElement));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_MultiplicityElement);
	
	con->setName("value_specification_no_side_effects");
	
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_MultiplicityElement));
	
	con->setSpecification(oe);
	
    // MultiplicityElement attributes
	uML_MultiplicityElement_isOrdered = factory->createProperty_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_isUnique = factory->createProperty_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_lower = factory->createProperty_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_lowerValue = factory->createProperty_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_upper = factory->createProperty_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_upperValue = factory->createProperty_in_Class(uML_MultiplicityElement);
    // MultiplicityElement operations
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_compatibleWith_result = factory->createParameter_in_Operation(uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement);uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other = factory->createParameter_in_Operation(uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement);

	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_includesMultiplicity_result = factory->createParameter_in_Operation(uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement);uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M = factory->createParameter_in_Operation(uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement);

	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_is_result = factory->createParameter_in_Operation(uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural);uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound = factory->createParameter_in_Operation(uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural);uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound = factory->createParameter_in_Operation(uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural);

	uML_MultiplicityElement_isMultivalued__ = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_isMultivalued_result = factory->createParameter_in_Operation(uML_MultiplicityElement_isMultivalued__);

	uML_MultiplicityElement_lower__ = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_lower_result = factory->createParameter_in_Operation(uML_MultiplicityElement_lower__);

	uML_MultiplicityElement_lowerBound__ = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_lowerBound_result = factory->createParameter_in_Operation(uML_MultiplicityElement_lowerBound__);

	uML_MultiplicityElement_setLower_Integer_Integer = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_setLower_Integer_Integer_newLower = factory->createParameter_in_Operation(uML_MultiplicityElement_setLower_Integer_Integer);

	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper = factory->createParameter_in_Operation(uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural);

	uML_MultiplicityElement_upper__ = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_upper_result = factory->createParameter_in_Operation(uML_MultiplicityElement_upper__);

	uML_MultiplicityElement_upperBound__ = factory->createOperation_in_Class(uML_MultiplicityElement);
	uML_MultiplicityElement_upperBound_result = factory->createParameter_in_Operation(uML_MultiplicityElement_upperBound__);

    //-------------------------------------------
	// NamedElement
	uML_NamedElement = factory->createClass_in_Package(uML, uml::UmlPackage::NAMEDELEMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_NamedElement);
	con->setName("has_no_qualified_name");
	con->getConstrainedElement()->push_back(uML_NamedElement);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_NamedElement));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_NamedElement);
	
	con->setName("has_qualified_name");
	
	con->getConstrainedElement()->push_back(uML_NamedElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_NamedElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_NamedElement);
	
	con->setName("visibility_needs_ownership");
	
	con->getConstrainedElement()->push_back(uML_NamedElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_NamedElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(namespace = null and owner <> null) implies visibility = null")));
	
	con->setSpecification(oe);
	
    // NamedElement attributes
	uML_NamedElement_clientDependency = factory->createProperty_in_Class(uML_NamedElement);
	uML_NamedElement_name = factory->createProperty_in_Class(uML_NamedElement);
	uML_NamedElement_nameExpression = factory->createProperty_in_Class(uML_NamedElement);
	uML_NamedElement_namespace = factory->createProperty_in_Class(uML_NamedElement);
	uML_NamedElement_qualifiedName = factory->createProperty_in_Class(uML_NamedElement);
	uML_NamedElement_visibility = factory->createProperty_in_Class(uML_NamedElement);
    // NamedElement operations
	uML_NamedElement_allNamespaces__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_allNamespaces_result = factory->createParameter_in_Operation(uML_NamedElement_allNamespaces__);

	uML_NamedElement_allOwningPackages__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_allOwningPackages_result = factory->createParameter_in_Operation(uML_NamedElement_allOwningPackages__);

	uML_NamedElement_clientDependency__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_clientDependency_result = factory->createParameter_in_Operation(uML_NamedElement_clientDependency__);

	uML_NamedElement_createDependency_NamedElement_NamedElement = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_createDependency_NamedElement_NamedElementreturn = factory->createParameter_in_Operation(uML_NamedElement_createDependency_NamedElement_NamedElement);uML_NamedElement_createDependency_NamedElement_NamedElement_supplier = factory->createParameter_in_Operation(uML_NamedElement_createDependency_NamedElement_NamedElement);

	uML_NamedElement_createUsage_NamedElement_NamedElement = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_createUsage_NamedElement_NamedElementreturn = factory->createParameter_in_Operation(uML_NamedElement_createUsage_NamedElement_NamedElement);uML_NamedElement_createUsage_NamedElement_NamedElement_supplier = factory->createParameter_in_Operation(uML_NamedElement_createUsage_NamedElement_NamedElement);

	uML_NamedElement_getLabel__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_getLabel__return = factory->createParameter_in_Operation(uML_NamedElement_getLabel__);

	uML_NamedElement_getLabel_Boolean_Boolean = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_getLabel_Boolean_Booleanreturn = factory->createParameter_in_Operation(uML_NamedElement_getLabel_Boolean_Boolean);uML_NamedElement_getLabel_Boolean_Boolean_localize = factory->createParameter_in_Operation(uML_NamedElement_getLabel_Boolean_Boolean);

	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_isDistinguishableFrom_result = factory->createParameter_in_Operation(uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n = factory->createParameter_in_Operation(uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns = factory->createParameter_in_Operation(uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace);

	uML_NamedElement_namespace__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_namespace_result = factory->createParameter_in_Operation(uML_NamedElement_namespace__);

	uML_NamedElement_qualifiedName__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_qualifiedName_result = factory->createParameter_in_Operation(uML_NamedElement_qualifiedName__);

	uML_NamedElement_separator__ = factory->createOperation_in_Class(uML_NamedElement);
	uML_NamedElement_separator_result = factory->createParameter_in_Operation(uML_NamedElement_separator__);

    //-------------------------------------------
	// Namespace
	uML_Namespace = factory->createClass_in_Package(uML, uml::UmlPackage::NAMESPACE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Namespace);
	con->setName("cannot_import_ownedMembers");
	con->getConstrainedElement()->push_back(uML_Namespace);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Namespace));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Namespace);
	
	con->setName("cannot_import_self");
	
	con->getConstrainedElement()->push_back(uML_Namespace);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Namespace));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("packageImport.importedPackage.oclAsType(Namespace)->excludes(self)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Namespace);
	
	con->setName("members_distinguishable");
	
	con->getConstrainedElement()->push_back(uML_Namespace);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Namespace));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("membersAreDistinguishable()")));
	
	con->setSpecification(oe);
	
    // Namespace attributes
	uML_Namespace_elementImport = factory->createProperty_in_Class(uML_Namespace);
	uML_Namespace_importedMember = factory->createProperty_in_Class(uML_Namespace);
	uML_Namespace_member = factory->createProperty_in_Class(uML_Namespace);
	uML_Namespace_ownedMember = factory->createProperty_in_Class(uML_Namespace);
	uML_Namespace_ownedRule = factory->createProperty_in_Class(uML_Namespace);
	uML_Namespace_packageImport = factory->createProperty_in_Class(uML_Namespace);
    // Namespace operations
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn = factory->createParameter_in_Operation(uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind);uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element = factory->createParameter_in_Operation(uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind);uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility = factory->createParameter_in_Operation(uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind);

	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn = factory->createParameter_in_Operation(uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind);uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_ = factory->createParameter_in_Operation(uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind);uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility = factory->createParameter_in_Operation(uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind);

	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_excludeCollisions_result = factory->createParameter_in_Operation(uML_Namespace_excludeCollisions_PackageableElement_PackageableElement);uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps = factory->createParameter_in_Operation(uML_Namespace_excludeCollisions_PackageableElement_PackageableElement);

	uML_Namespace_getImportedElements__ = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_getImportedElements__return = factory->createParameter_in_Operation(uML_Namespace_getImportedElements__);

	uML_Namespace_getImportedPackages__ = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_getImportedPackages__return = factory->createParameter_in_Operation(uML_Namespace_getImportedPackages__);

	uML_Namespace_getNamesOfMember_NamedElement_NamedElement = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_getNamesOfMember_result = factory->createParameter_in_Operation(uML_Namespace_getNamesOfMember_NamedElement_NamedElement);uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element = factory->createParameter_in_Operation(uML_Namespace_getNamesOfMember_NamedElement_NamedElement);

	uML_Namespace_importMembers_PackageableElement_PackageableElement = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_importMembers_result = factory->createParameter_in_Operation(uML_Namespace_importMembers_PackageableElement_PackageableElement);uML_Namespace_importMembers_PackageableElement_PackageableElement_imps = factory->createParameter_in_Operation(uML_Namespace_importMembers_PackageableElement_PackageableElement);

	uML_Namespace_importedMember__ = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_importedMember_result = factory->createParameter_in_Operation(uML_Namespace_importedMember__);

	uML_Namespace_membersAreDistinguishable__ = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_membersAreDistinguishable_result = factory->createParameter_in_Operation(uML_Namespace_membersAreDistinguishable__);

	uML_Namespace_ownedMember__ = factory->createOperation_in_Class(uML_Namespace);
	uML_Namespace_ownedMember_result = factory->createParameter_in_Operation(uML_Namespace_ownedMember__);

    //-------------------------------------------
	// Node
	uML_Node = factory->createClass_in_Package(uML, uml::UmlPackage::NODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Node);
	con->setName("internal_structure");
	con->getConstrainedElement()->push_back(uML_Node);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Node));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("part->forAll(oclIsKindOf(Node))")));
	con->setSpecification(oe);
	
    // Node attributes
	uML_Node_nestedNode = factory->createProperty_in_Class(uML_Node);
    // Node operations
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_Node);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper = factory->createParameter_in_Operation(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural);

	uML_Node_getCommunicationPaths__ = factory->createOperation_in_Class(uML_Node);
	uML_Node_getCommunicationPaths__return = factory->createParameter_in_Operation(uML_Node_getCommunicationPaths__);

    //-------------------------------------------
	// ObjectFlow
	uML_ObjectFlow = factory->createClass_in_Package(uML, uml::UmlPackage::OBJECTFLOW_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	con->setName("compatible_types");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("input_and_output_parameter");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("selection<>null implies"\
	
	"	selection.inputParameters()->size()=1 and"\
	
	"	selection.inputParameters()->forAll(not isUnique and is(0,*)) and"\
	
	"	selection.outputParameters()->size()=1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("is_multicast_or_is_multireceive");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not (isMulticast and isMultireceive)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("no_executable_nodes");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("same_upper_bounds");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("selection_behavior");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("selection<>null implies source.oclIsKindOf(ObjectNode)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("target");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectFlow);
	
	con->setName("transformation_behavior");
	
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectFlow));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("transformation<>null implies"\
	
	"	transformation.inputParameters()->size()=1 and"\
	
	"	transformation.outputParameters()->size()=1")));
	
	con->setSpecification(oe);
	
    // ObjectFlow attributes
	uML_ObjectFlow_isMulticast = factory->createProperty_in_Class(uML_ObjectFlow);
	uML_ObjectFlow_isMultireceive = factory->createProperty_in_Class(uML_ObjectFlow);
	uML_ObjectFlow_selection = factory->createProperty_in_Class(uML_ObjectFlow);
	uML_ObjectFlow_transformation = factory->createProperty_in_Class(uML_ObjectFlow);

    //-------------------------------------------
	// ObjectNode
	uML_ObjectNode = factory->createClass_in_Package(uML, uml::UmlPackage::OBJECTNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ObjectNode);
	con->setName("input_output_parameter");
	con->getConstrainedElement()->push_back(uML_ObjectNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("selection<>null implies"\
	"	selection.inputParameters()->size()=1 and"\
	"	selection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and"\
	"	selection.outputParameters()->size()=1 and"\
	"		selection.inputParameters()->forAll(p | self.type.conformsTo(p.type))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectNode);
	
	con->setName("object_flow_edges");
	
	con->getConstrainedElement()->push_back(uML_ObjectNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ObjectNode);
	
	con->setName("selection_behavior");
	
	con->getConstrainedElement()->push_back(uML_ObjectNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ObjectNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)")));
	
	con->setSpecification(oe);
	
    // ObjectNode attributes
	uML_ObjectNode_inState = factory->createProperty_in_Class(uML_ObjectNode);
	uML_ObjectNode_isControlType = factory->createProperty_in_Class(uML_ObjectNode);
	uML_ObjectNode_ordering = factory->createProperty_in_Class(uML_ObjectNode);
	uML_ObjectNode_selection = factory->createProperty_in_Class(uML_ObjectNode);
	uML_ObjectNode_upperBound = factory->createProperty_in_Class(uML_ObjectNode);

    //-------------------------------------------
	// Observation
	uML_Observation = factory->createClass_in_Package(uML, uml::UmlPackage::OBSERVATION_CLASS);
	

    //-------------------------------------------
	// OccurrenceSpecification
	uML_OccurrenceSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::OCCURRENCESPECIFICATION_CLASS);
	
    // OccurrenceSpecification attributes
	uML_OccurrenceSpecification_covered = factory->createProperty_in_Class(uML_OccurrenceSpecification);
	uML_OccurrenceSpecification_toAfter = factory->createProperty_in_Class(uML_OccurrenceSpecification);
	uML_OccurrenceSpecification_toBefore = factory->createProperty_in_Class(uML_OccurrenceSpecification);
    // OccurrenceSpecification operations
	uML_OccurrenceSpecification_getCovered__ = factory->createOperation_in_Class(uML_OccurrenceSpecification);
	uML_OccurrenceSpecification_getCovered__return = factory->createParameter_in_Operation(uML_OccurrenceSpecification_getCovered__);

	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline = factory->createOperation_in_Class(uML_OccurrenceSpecification);
	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value = factory->createParameter_in_Operation(uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline);

    //-------------------------------------------
	// OpaqueAction
	uML_OpaqueAction = factory->createClass_in_Package(uML, uml::UmlPackage::OPAQUEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_OpaqueAction);
	con->setName("language_body_size");
	con->getConstrainedElement()->push_back(uML_OpaqueAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_OpaqueAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("language->notEmpty() implies (_'body'->size() = language->size())")));
	con->setSpecification(oe);
	
    // OpaqueAction attributes
	uML_OpaqueAction_body = factory->createProperty_in_Class(uML_OpaqueAction);
	uML_OpaqueAction_inputValue = factory->createProperty_in_Class(uML_OpaqueAction);
	uML_OpaqueAction_language = factory->createProperty_in_Class(uML_OpaqueAction);
	uML_OpaqueAction_outputValue = factory->createProperty_in_Class(uML_OpaqueAction);

    //-------------------------------------------
	// OpaqueBehavior
	uML_OpaqueBehavior = factory->createClass_in_Package(uML, uml::UmlPackage::OPAQUEBEHAVIOR_CLASS);
	
    // OpaqueBehavior attributes
	uML_OpaqueBehavior_body = factory->createProperty_in_Class(uML_OpaqueBehavior);
	uML_OpaqueBehavior_language = factory->createProperty_in_Class(uML_OpaqueBehavior);

    //-------------------------------------------
	// OpaqueExpression
	uML_OpaqueExpression = factory->createClass_in_Package(uML, uml::UmlPackage::OPAQUEEXPRESSION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_OpaqueExpression);
	con->setName("language_body_size");
	con->getConstrainedElement()->push_back(uML_OpaqueExpression);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_OpaqueExpression));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("language->notEmpty() implies (_'body'->size() = language->size())")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_OpaqueExpression);
	
	con->setName("one_return_result_parameter");
	
	con->getConstrainedElement()->push_back(uML_OpaqueExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_OpaqueExpression));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("behavior <> null implies"\
	
	"   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_OpaqueExpression);
	
	con->setName("only_return_result_parameters");
	
	con->getConstrainedElement()->push_back(uML_OpaqueExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_OpaqueExpression));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()")));
	
	con->setSpecification(oe);
	
    // OpaqueExpression attributes
	uML_OpaqueExpression_behavior = factory->createProperty_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_body = factory->createProperty_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_language = factory->createProperty_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_result = factory->createProperty_in_Class(uML_OpaqueExpression);
    // OpaqueExpression operations
	uML_OpaqueExpression_isIntegral__ = factory->createOperation_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_isIntegral_result = factory->createParameter_in_Operation(uML_OpaqueExpression_isIntegral__);

	uML_OpaqueExpression_isNonNegative__ = factory->createOperation_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_isNonNegative_result = factory->createParameter_in_Operation(uML_OpaqueExpression_isNonNegative__);

	uML_OpaqueExpression_isPositive__ = factory->createOperation_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_isPositive_result = factory->createParameter_in_Operation(uML_OpaqueExpression_isPositive__);

	uML_OpaqueExpression_result__ = factory->createOperation_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_result_result = factory->createParameter_in_Operation(uML_OpaqueExpression_result__);

	uML_OpaqueExpression_stringValue__ = factory->createOperation_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_stringValue__return = factory->createParameter_in_Operation(uML_OpaqueExpression_stringValue__);

	uML_OpaqueExpression_value__ = factory->createOperation_in_Class(uML_OpaqueExpression);
	uML_OpaqueExpression_value_result = factory->createParameter_in_Operation(uML_OpaqueExpression_value__);

    //-------------------------------------------
	// Operation
	uML_Operation = factory->createClass_in_Package(uML, uml::UmlPackage::OPERATION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Operation);
	con->setName("at_most_one_return");
	con->getConstrainedElement()->push_back(uML_Operation);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Operation));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Operation);
	
	con->setName("only_body_for_query");
	
	con->getConstrainedElement()->push_back(uML_Operation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Operation));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("bodyCondition <> null implies isQuery")));
	
	con->setSpecification(oe);
	
    // Operation attributes
	uML_Operation_bodyCondition = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_class = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_datatype = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_interface = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_isOrdered = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_isQuery = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_isUnique = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_lower = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_ownedParameter = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_postcondition = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_precondition = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_raisedException = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_redefinedOperation = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_templateParameter = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_type = factory->createProperty_in_Class(uML_Operation);
	uML_Operation_upper = factory->createProperty_in_Class(uML_Operation);
    // Operation operations
	uML_Operation_getReturnResult__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_getReturnResult__return = factory->createParameter_in_Operation(uML_Operation_getReturnResult__);

	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_isConsistentWith_result = factory->createParameter_in_Operation(uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement);uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_Operation_isOrdered__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_isOrdered_result = factory->createParameter_in_Operation(uML_Operation_isOrdered__);

	uML_Operation_isUnique__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_isUnique_result = factory->createParameter_in_Operation(uML_Operation_isUnique__);

	uML_Operation_lower__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_lower_result = factory->createParameter_in_Operation(uML_Operation_lower__);

	uML_Operation_returnResult__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_returnResult_result = factory->createParameter_in_Operation(uML_Operation_returnResult__);

	uML_Operation_setIsOrdered_Boolean_Boolean = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered = factory->createParameter_in_Operation(uML_Operation_setIsOrdered_Boolean_Boolean);

	uML_Operation_setIsUnique_Boolean_Boolean = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique = factory->createParameter_in_Operation(uML_Operation_setIsUnique_Boolean_Boolean);

	uML_Operation_setLower_Integer_Integer = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_setLower_Integer_Integer_newLower = factory->createParameter_in_Operation(uML_Operation_setLower_Integer_Integer);

	uML_Operation_setType_Type_Type = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_setType_Type_Type_newType = factory->createParameter_in_Operation(uML_Operation_setType_Type_Type);

	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper = factory->createParameter_in_Operation(uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural);

	uML_Operation_type__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_type_result = factory->createParameter_in_Operation(uML_Operation_type__);

	uML_Operation_upper__ = factory->createOperation_in_Class(uML_Operation);
	uML_Operation_upper_result = factory->createParameter_in_Operation(uML_Operation_upper__);

    //-------------------------------------------
	// OperationTemplateParameter
	uML_OperationTemplateParameter = factory->createClass_in_Package(uML, uml::UmlPackage::OPERATIONTEMPLATEPARAMETER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_OperationTemplateParameter);
	con->setName("match_default_signature");
	con->getConstrainedElement()->push_back(uML_OperationTemplateParameter);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_OperationTemplateParameter));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in "\
	"    defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and"\
	"    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix | "\
	"        let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in"\
	"          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))")));
	con->setSpecification(oe);
	
    // OperationTemplateParameter attributes
	uML_OperationTemplateParameter_parameteredElement = factory->createProperty_in_Class(uML_OperationTemplateParameter);

    //-------------------------------------------
	// OutputPin
	uML_OutputPin = factory->createClass_in_Package(uML, uml::UmlPackage::OUTPUTPIN_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_OutputPin);
	con->setName("incoming_edges_structured_only");
	con->getConstrainedElement()->push_back(uML_OutputPin);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_OutputPin));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("incoming->notEmpty() implies"\
	"	action<>null and"\
	"	action.oclIsKindOf(StructuredActivityNode) and"\
	"	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// Package
	uML_Package = factory->createClass_in_Package(uML, uml::UmlPackage::PACKAGE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Package);
	con->setName("elements_public_or_private");
	con->getConstrainedElement()->push_back(uML_Package);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Package));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)")));
	con->setSpecification(oe);
	
    // Package attributes
	uML_Package_URI = factory->createProperty_in_Class(uML_Package);
	uML_Package_nestedPackage = factory->createProperty_in_Class(uML_Package);
	uML_Package_nestingPackage = factory->createProperty_in_Class(uML_Package);
	uML_Package_ownedStereotype = factory->createProperty_in_Class(uML_Package);
	uML_Package_ownedType = factory->createProperty_in_Class(uML_Package);
	uML_Package_packageMerge = factory->createProperty_in_Class(uML_Package);
	uML_Package_packagedElement = factory->createProperty_in_Class(uML_Package);
	uML_Package_profileApplication = factory->createProperty_in_Class(uML_Package);
    // Package operations
	uML_Package_allApplicableStereotypes__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_allApplicableStereotypes_result = factory->createParameter_in_Operation(uML_Package_allApplicableStereotypes__);

	uML_Package_applyProfile_Profile_Profile = factory->createOperation_in_Class(uML_Package);
	uML_Package_applyProfile_Profile_Profilereturn = factory->createParameter_in_Operation(uML_Package_applyProfile_Profile_Profile);uML_Package_applyProfile_Profile_Profile_profile = factory->createParameter_in_Operation(uML_Package_applyProfile_Profile_Profile);

	uML_Package_containingProfile__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_containingProfile_result = factory->createParameter_in_Operation(uML_Package_containingProfile__);

	uML_Package_createOwnedClass_String_Boolean_String_Boolean = factory->createOperation_in_Class(uML_Package);
	uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn = factory->createParameter_in_Operation(uML_Package_createOwnedClass_String_Boolean_String_Boolean);uML_Package_createOwnedClass_String_Boolean_String_Boolean_name = factory->createParameter_in_Operation(uML_Package_createOwnedClass_String_Boolean_String_Boolean);uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract = factory->createParameter_in_Operation(uML_Package_createOwnedClass_String_Boolean_String_Boolean);

	uML_Package_createOwnedEnumeration_String_String = factory->createOperation_in_Class(uML_Package);
	uML_Package_createOwnedEnumeration_String_Stringreturn = factory->createParameter_in_Operation(uML_Package_createOwnedEnumeration_String_String);uML_Package_createOwnedEnumeration_String_String_name = factory->createParameter_in_Operation(uML_Package_createOwnedEnumeration_String_String);

	uML_Package_createOwnedInterface_String_String = factory->createOperation_in_Class(uML_Package);
	uML_Package_createOwnedInterface_String_Stringreturn = factory->createParameter_in_Operation(uML_Package_createOwnedInterface_String_String);uML_Package_createOwnedInterface_String_String_name = factory->createParameter_in_Operation(uML_Package_createOwnedInterface_String_String);

	uML_Package_createOwnedPrimitiveType_String_String = factory->createOperation_in_Class(uML_Package);
	uML_Package_createOwnedPrimitiveType_String_Stringreturn = factory->createParameter_in_Operation(uML_Package_createOwnedPrimitiveType_String_String);uML_Package_createOwnedPrimitiveType_String_String_name = factory->createParameter_in_Operation(uML_Package_createOwnedPrimitiveType_String_String);

	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean = factory->createOperation_in_Class(uML_Package);
	uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn = factory->createParameter_in_Operation(uML_Package_createOwnedStereotype_String_Boolean_String_Boolean);uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name = factory->createParameter_in_Operation(uML_Package_createOwnedStereotype_String_Boolean_String_Boolean);uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract = factory->createParameter_in_Operation(uML_Package_createOwnedStereotype_String_Boolean_String_Boolean);

	uML_Package_getAllAppliedProfiles__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_getAllAppliedProfiles__return = factory->createParameter_in_Operation(uML_Package_getAllAppliedProfiles__);

	uML_Package_getAllProfileApplications__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_getAllProfileApplications__return = factory->createParameter_in_Operation(uML_Package_getAllProfileApplications__);

	uML_Package_getAppliedProfile_String_String = factory->createOperation_in_Class(uML_Package);
	uML_Package_getAppliedProfile_String_Stringreturn = factory->createParameter_in_Operation(uML_Package_getAppliedProfile_String_String);uML_Package_getAppliedProfile_String_String_qualifiedName = factory->createParameter_in_Operation(uML_Package_getAppliedProfile_String_String);

	uML_Package_getAppliedProfile_String_Boolean_String_Boolean = factory->createOperation_in_Class(uML_Package);
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn = factory->createParameter_in_Operation(uML_Package_getAppliedProfile_String_Boolean_String_Boolean);uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName = factory->createParameter_in_Operation(uML_Package_getAppliedProfile_String_Boolean_String_Boolean);uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse = factory->createParameter_in_Operation(uML_Package_getAppliedProfile_String_Boolean_String_Boolean);

	uML_Package_getAppliedProfiles__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_getAppliedProfiles__return = factory->createParameter_in_Operation(uML_Package_getAppliedProfiles__);

	uML_Package_getProfileApplication_Profile_Profile = factory->createOperation_in_Class(uML_Package);
	uML_Package_getProfileApplication_Profile_Profilereturn = factory->createParameter_in_Operation(uML_Package_getProfileApplication_Profile_Profile);uML_Package_getProfileApplication_Profile_Profile_profile = factory->createParameter_in_Operation(uML_Package_getProfileApplication_Profile_Profile);

	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean = factory->createOperation_in_Class(uML_Package);
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn = factory->createParameter_in_Operation(uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean);uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile = factory->createParameter_in_Operation(uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean);uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse = factory->createParameter_in_Operation(uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean);

	uML_Package_isModelLibrary__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_isModelLibrary__return = factory->createParameter_in_Operation(uML_Package_isModelLibrary__);

	uML_Package_isProfileApplied_Profile_Profile = factory->createOperation_in_Class(uML_Package);
	uML_Package_isProfileApplied_Profile_Profilereturn = factory->createParameter_in_Operation(uML_Package_isProfileApplied_Profile_Profile);uML_Package_isProfileApplied_Profile_Profile_profile = factory->createParameter_in_Operation(uML_Package_isProfileApplied_Profile_Profile);

	uML_Package_makesVisible_NamedElement_NamedElement = factory->createOperation_in_Class(uML_Package);
	uML_Package_makesVisible_result = factory->createParameter_in_Operation(uML_Package_makesVisible_NamedElement_NamedElement);uML_Package_makesVisible_NamedElement_NamedElement_el = factory->createParameter_in_Operation(uML_Package_makesVisible_NamedElement_NamedElement);

	uML_Package_mustBeOwned__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_mustBeOwned_result = factory->createParameter_in_Operation(uML_Package_mustBeOwned__);

	uML_Package_nestedPackage__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_nestedPackage_result = factory->createParameter_in_Operation(uML_Package_nestedPackage__);

	uML_Package_ownedStereotype__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_ownedStereotype_result = factory->createParameter_in_Operation(uML_Package_ownedStereotype__);

	uML_Package_ownedType__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_ownedType_result = factory->createParameter_in_Operation(uML_Package_ownedType__);

	uML_Package_unapplyProfile_Profile_Profile = factory->createOperation_in_Class(uML_Package);
	uML_Package_unapplyProfile_Profile_Profilereturn = factory->createParameter_in_Operation(uML_Package_unapplyProfile_Profile_Profile);uML_Package_unapplyProfile_Profile_Profile_profile = factory->createParameter_in_Operation(uML_Package_unapplyProfile_Profile_Profile);

	uML_Package_visibleMembers__ = factory->createOperation_in_Class(uML_Package);
	uML_Package_visibleMembers_result = factory->createParameter_in_Operation(uML_Package_visibleMembers__);

    //-------------------------------------------
	// PackageImport
	uML_PackageImport = factory->createClass_in_Package(uML, uml::UmlPackage::PACKAGEIMPORT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_PackageImport);
	con->setName("public_or_private");
	con->getConstrainedElement()->push_back(uML_PackageImport);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_PackageImport));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("visibility = VisibilityKind::public or visibility = VisibilityKind::private")));
	con->setSpecification(oe);
	
    // PackageImport attributes
	uML_PackageImport_importedPackage = factory->createProperty_in_Class(uML_PackageImport);
	uML_PackageImport_importingNamespace = factory->createProperty_in_Class(uML_PackageImport);
	uML_PackageImport_visibility = factory->createProperty_in_Class(uML_PackageImport);

    //-------------------------------------------
	// PackageMerge
	uML_PackageMerge = factory->createClass_in_Package(uML, uml::UmlPackage::PACKAGEMERGE_CLASS);
	
    // PackageMerge attributes
	uML_PackageMerge_mergedPackage = factory->createProperty_in_Class(uML_PackageMerge);
	uML_PackageMerge_receivingPackage = factory->createProperty_in_Class(uML_PackageMerge);

    //-------------------------------------------
	// PackageableElement
	uML_PackageableElement = factory->createClass_in_Package(uML, uml::UmlPackage::PACKAGEABLEELEMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_PackageableElement);
	con->setName("namespace_needs_visibility");
	con->getConstrainedElement()->push_back(uML_PackageableElement);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_PackageableElement));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("visibility = null implies namespace = null")));
	con->setSpecification(oe);
	
    // PackageableElement attributes
	uML_PackageableElement_visibility = factory->createProperty_in_Class(uML_PackageableElement);

    //-------------------------------------------
	// Parameter
	uML_Parameter = factory->createClass_in_Package(uML, uml::UmlPackage::PARAMETER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Parameter);
	con->setName("connector_end");
	con->getConstrainedElement()->push_back(uML_Parameter);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Parameter));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("end->notEmpty() implies collaboration->notEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Parameter);
	
	con->setName("in_and_out");
	
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Parameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))"\
	
	"and"\
	
	"(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Parameter);
	
	con->setName("not_exception");
	
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Parameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Parameter);
	
	con->setName("object_effect");
	
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Parameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(type.oclIsKindOf(DataType)) implies (effect = null)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Parameter);
	
	con->setName("reentrant_behaviors");
	
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Parameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(isStream and behavior <> null) implies not behavior.isReentrant")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Parameter);
	
	con->setName("stream_and_exception");
	
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Parameter));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not (isException and isStream)")));
	
	con->setSpecification(oe);
	
    // Parameter attributes
	uML_Parameter_default = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_defaultValue = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_direction = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_effect = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_isException = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_isStream = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_operation = factory->createProperty_in_Class(uML_Parameter);
	uML_Parameter_parameterSet = factory->createProperty_in_Class(uML_Parameter);
    // Parameter operations
	uML_Parameter_default__ = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_default_result = factory->createParameter_in_Operation(uML_Parameter_default__);

	uML_Parameter_isSetDefault__ = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_isSetDefault__return = factory->createParameter_in_Operation(uML_Parameter_isSetDefault__);

	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value = factory->createParameter_in_Operation(uML_Parameter_setBooleanDefaultValue_Boolean_Boolean);

	uML_Parameter_setDefault_String_String = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_setDefault_String_String_newDefault = factory->createParameter_in_Operation(uML_Parameter_setDefault_String_String);

	uML_Parameter_setIntegerDefaultValue_Integer_Integer = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_setIntegerDefaultValue_Integer_Integer_value = factory->createParameter_in_Operation(uML_Parameter_setIntegerDefaultValue_Integer_Integer);

	uML_Parameter_setNullDefaultValue__ = factory->createOperation_in_Class(uML_Parameter);

	uML_Parameter_setRealDefaultValue_Real_Real = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_setRealDefaultValue_Real_Real_value = factory->createParameter_in_Operation(uML_Parameter_setRealDefaultValue_Real_Real);

	uML_Parameter_setStringDefaultValue_String_String = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_setStringDefaultValue_String_String_value = factory->createParameter_in_Operation(uML_Parameter_setStringDefaultValue_String_String);

	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural = factory->createOperation_in_Class(uML_Parameter);
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value = factory->createParameter_in_Operation(uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural);

	uML_Parameter_unsetDefault__ = factory->createOperation_in_Class(uML_Parameter);

    //-------------------------------------------
	// ParameterSet
	uML_ParameterSet = factory->createClass_in_Package(uML, uml::UmlPackage::PARAMETERSET_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ParameterSet);
	con->setName("input");
	con->getConstrainedElement()->push_back(uML_ParameterSet);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ParameterSet));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("((parameter->exists(direction = ParameterDirectionKind::_'in')) implies "\
	"    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))"\
	"    and"\
	"((parameter->exists(direction = ParameterDirectionKind::out)) implies "\
	"    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ParameterSet);
	
	con->setName("same_parameterized_entity");
	
	con->getConstrainedElement()->push_back(uML_ParameterSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ParameterSet));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ParameterSet);
	
	con->setName("two_parameter_sets");
	
	con->getConstrainedElement()->push_back(uML_ParameterSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ParameterSet));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))")));
	
	con->setSpecification(oe);
	
    // ParameterSet attributes
	uML_ParameterSet_condition = factory->createProperty_in_Class(uML_ParameterSet);
	uML_ParameterSet_parameter = factory->createProperty_in_Class(uML_ParameterSet);

    //-------------------------------------------
	// ParameterableElement
	uML_ParameterableElement = factory->createClass_in_Package(uML, uml::UmlPackage::PARAMETERABLEELEMENT_CLASS);
	
    // ParameterableElement attributes
	uML_ParameterableElement_owningTemplateParameter = factory->createProperty_in_Class(uML_ParameterableElement);
	uML_ParameterableElement_templateParameter = factory->createProperty_in_Class(uML_ParameterableElement);
    // ParameterableElement operations
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement = factory->createOperation_in_Class(uML_ParameterableElement);
	uML_ParameterableElement_isCompatibleWith_result = factory->createParameter_in_Operation(uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement);uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p = factory->createParameter_in_Operation(uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement);

	uML_ParameterableElement_isTemplateParameter__ = factory->createOperation_in_Class(uML_ParameterableElement);
	uML_ParameterableElement_isTemplateParameter_result = factory->createParameter_in_Operation(uML_ParameterableElement_isTemplateParameter__);

    //-------------------------------------------
	// PartDecomposition
	uML_PartDecomposition = factory->createClass_in_Package(uML, uml::UmlPackage::PARTDECOMPOSITION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_PartDecomposition);
	con->setName("assume");
	con->getConstrainedElement()->push_back(uML_PartDecomposition);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_PartDecomposition));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_PartDecomposition);
	
	con->setName("commutativity_of_decomposition");
	
	con->getConstrainedElement()->push_back(uML_PartDecomposition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_PartDecomposition));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_PartDecomposition);
	
	con->setName("parts_of_internal_structures");
	
	con->getConstrainedElement()->push_back(uML_PartDecomposition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_PartDecomposition));
	
	con->setSpecification(oe);
	

    //-------------------------------------------
	// Pin
	uML_Pin = factory->createClass_in_Package(uML, uml::UmlPackage::PIN_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Pin);
	con->setName("control_pins");
	con->getConstrainedElement()->push_back(uML_Pin);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pin));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isControl implies isControlType")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pin);
	
	con->setName("not_unique");
	
	con->getConstrainedElement()->push_back(uML_Pin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pin));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not isUnique")));
	
	con->setSpecification(oe);
	
    // Pin attributes
	uML_Pin_isControl = factory->createProperty_in_Class(uML_Pin);

    //-------------------------------------------
	// Port
	uML_Port = factory->createClass_in_Package(uML, uml::UmlPackage::PORT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Port);
	con->setName("default_value");
	con->getConstrainedElement()->push_back(uML_Port);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Port));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("type.oclIsKindOf(Interface) implies defaultValue->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Port);
	
	con->setName("encapsulated_owner");
	
	con->getConstrainedElement()->push_back(uML_Port);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Port));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("owner = encapsulatedClassifier")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Port);
	
	con->setName("port_aggregation");
	
	con->getConstrainedElement()->push_back(uML_Port);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Port));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("aggregation = AggregationKind::composite")));
	
	con->setSpecification(oe);
	
    // Port attributes
	uML_Port_isBehavior = factory->createProperty_in_Class(uML_Port);
	uML_Port_isConjugated = factory->createProperty_in_Class(uML_Port);
	uML_Port_isService = factory->createProperty_in_Class(uML_Port);
	uML_Port_protocol = factory->createProperty_in_Class(uML_Port);
	uML_Port_provided = factory->createProperty_in_Class(uML_Port);
	uML_Port_redefinedPort = factory->createProperty_in_Class(uML_Port);
	uML_Port_required = factory->createProperty_in_Class(uML_Port);
    // Port operations
	uML_Port_basicProvided__ = factory->createOperation_in_Class(uML_Port);
	uML_Port_basicProvided_result = factory->createParameter_in_Operation(uML_Port_basicProvided__);

	uML_Port_basicRequired__ = factory->createOperation_in_Class(uML_Port);
	uML_Port_basicRequired_result = factory->createParameter_in_Operation(uML_Port_basicRequired__);

	uML_Port_provided__ = factory->createOperation_in_Class(uML_Port);
	uML_Port_provided_result = factory->createParameter_in_Operation(uML_Port_provided__);

	uML_Port_required__ = factory->createOperation_in_Class(uML_Port);
	uML_Port_required_result = factory->createParameter_in_Operation(uML_Port_required__);

    //-------------------------------------------
	// PrimitiveType
	uML_PrimitiveType = factory->createClass_in_Package(uML, uml::UmlPackage::PRIMITIVETYPE_CLASS);
	

    //-------------------------------------------
	// Profile
	uML_Profile = factory->createClass_in_Package(uML, uml::UmlPackage::PROFILE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Profile);
	con->setName("metaclass_reference_not_specialized");
	con->getConstrainedElement()->push_back(uML_Profile);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Profile));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("metaclassReference.importedElement->"\
	"	select(c | c.oclIsKindOf(Classifier) and"\
	"		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()"\
	"and "\
	"packagedElement->"\
	"    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->"\
	"       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Profile);
	
	con->setName("references_same_metamodel");
	
	con->getConstrainedElement()->push_back(uML_Profile);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Profile));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->"\
	
	"  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()")));
	
	con->setSpecification(oe);
	
    // Profile attributes
	uML_Profile_metaclassReference = factory->createProperty_in_Class(uML_Profile);
	uML_Profile_metamodelReference = factory->createProperty_in_Class(uML_Profile);
    // Profile operations
	uML_Profile_create_Classifier_Classifier = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_create_Classifier_Classifierreturn = factory->createParameter_in_Operation(uML_Profile_create_Classifier_Classifier);uML_Profile_create_Classifier_Classifier_classifier = factory->createParameter_in_Operation(uML_Profile_create_Classifier_Classifier);

	uML_Profile_define__ = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_define__return = factory->createParameter_in_Operation(uML_Profile_define__);

	uML_Profile_getDefinition__ = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_getDefinition__return = factory->createParameter_in_Operation(uML_Profile_getDefinition__);

	uML_Profile_getDefinition_NamedElement_NamedElement = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_getDefinition_NamedElement_NamedElementreturn = factory->createParameter_in_Operation(uML_Profile_getDefinition_NamedElement_NamedElement);uML_Profile_getDefinition_NamedElement_NamedElement_namedElement = factory->createParameter_in_Operation(uML_Profile_getDefinition_NamedElement_NamedElement);

	uML_Profile_getOwnedExtensions_Boolean_Boolean = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn = factory->createParameter_in_Operation(uML_Profile_getOwnedExtensions_Boolean_Boolean);uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly = factory->createParameter_in_Operation(uML_Profile_getOwnedExtensions_Boolean_Boolean);

	uML_Profile_getReferencedMetaclasses__ = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_getReferencedMetaclasses__return = factory->createParameter_in_Operation(uML_Profile_getReferencedMetaclasses__);

	uML_Profile_getReferencedMetamodels__ = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_getReferencedMetamodels__return = factory->createParameter_in_Operation(uML_Profile_getReferencedMetamodels__);

	uML_Profile_isDefined__ = factory->createOperation_in_Class(uML_Profile);
	uML_Profile_isDefined__return = factory->createParameter_in_Operation(uML_Profile_isDefined__);

    //-------------------------------------------
	// ProfileApplication
	uML_ProfileApplication = factory->createClass_in_Package(uML, uml::UmlPackage::PROFILEAPPLICATION_CLASS);
	
    // ProfileApplication attributes
	uML_ProfileApplication_appliedProfile = factory->createProperty_in_Class(uML_ProfileApplication);
	uML_ProfileApplication_applyingPackage = factory->createProperty_in_Class(uML_ProfileApplication);
	uML_ProfileApplication_isStrict = factory->createProperty_in_Class(uML_ProfileApplication);
    // ProfileApplication operations
	uML_ProfileApplication_getAppliedDefinition__ = factory->createOperation_in_Class(uML_ProfileApplication);
	uML_ProfileApplication_getAppliedDefinition__return = factory->createParameter_in_Operation(uML_ProfileApplication_getAppliedDefinition__);

	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement = factory->createOperation_in_Class(uML_ProfileApplication);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn = factory->createParameter_in_Operation(uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement);uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement = factory->createParameter_in_Operation(uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement);

    //-------------------------------------------
	// Property
	uML_Property = factory->createClass_in_Package(uML, uml::UmlPackage::PROPERTY_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Property);
	con->setName("binding_to_attribute");
	con->getConstrainedElement()->push_back(uML_Property);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(self.isAttribute()"\
	"and (templateParameterSubstitution->notEmpty())"\
	"implies (templateParameterSubstitution->forAll(ts |"\
	"    ts.formal.oclIsKindOf(Property)"\
	"    and ts.formal.oclAsType(Property).isAttribute())))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("deployment_target");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("derived_union_is_derived");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isDerivedUnion implies isDerived")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("derived_union_is_read_only");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isDerivedUnion implies isReadOnly")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("multiplicity_of_composite");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isComposite and association <> null implies opposite.upperBound() <= 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("qualified_is_association_end");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("qualifier->notEmpty() implies association->notEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("redefined_property_inherited");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(redefinedProperty->notEmpty()) implies"\
	
	"  (redefinitionContext->notEmpty() and"\
	
	"      redefinedProperty->forAll(rp|"\
	
	"        ((redefinitionContext->collect(fc|"\
	
	"          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("subsetted_property_names");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("subsettedProperty->forAll(sp | sp.name <> name)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("subsetting_context_conforms");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("subsetting_rules");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Property);
	
	con->setName("type_of_opposite_end");
	
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Property));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type")));
	
	con->setSpecification(oe);
	
    // Property attributes
	uML_Property_aggregation = factory->createProperty_in_Class(uML_Property);
	uML_Property_association = factory->createProperty_in_Class(uML_Property);
	uML_Property_associationEnd = factory->createProperty_in_Class(uML_Property);
	uML_Property_class = factory->createProperty_in_Class(uML_Property);
	uML_Property_datatype = factory->createProperty_in_Class(uML_Property);
	uML_Property_default = factory->createProperty_in_Class(uML_Property);
	uML_Property_defaultValue = factory->createProperty_in_Class(uML_Property);
	uML_Property_interface = factory->createProperty_in_Class(uML_Property);
	uML_Property_isComposite = factory->createProperty_in_Class(uML_Property);
	uML_Property_isDerived = factory->createProperty_in_Class(uML_Property);
	uML_Property_isDerivedUnion = factory->createProperty_in_Class(uML_Property);
	uML_Property_isID = factory->createProperty_in_Class(uML_Property);
	uML_Property_opposite = factory->createProperty_in_Class(uML_Property);
	uML_Property_owningAssociation = factory->createProperty_in_Class(uML_Property);
	uML_Property_qualifier = factory->createProperty_in_Class(uML_Property);
	uML_Property_redefinedProperty = factory->createProperty_in_Class(uML_Property);
	uML_Property_subsettedProperty = factory->createProperty_in_Class(uML_Property);
    // Property operations
	uML_Property_getDefault__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_getDefault_result = factory->createParameter_in_Operation(uML_Property_getDefault__);

	uML_Property_getOtherEnd__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_getOtherEnd__return = factory->createParameter_in_Operation(uML_Property_getOtherEnd__);

	uML_Property_isAttribute__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_isAttribute_result = factory->createParameter_in_Operation(uML_Property_isAttribute__);

	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement = factory->createOperation_in_Class(uML_Property);
	uML_Property_isCompatibleWith_result = factory->createParameter_in_Operation(uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement);uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p = factory->createParameter_in_Operation(uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement);

	uML_Property_isComposite__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_isComposite_result = factory->createParameter_in_Operation(uML_Property_isComposite__);

	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_Property);
	uML_Property_isConsistentWith_result = factory->createParameter_in_Operation(uML_Property_isConsistentWith_RedefinableElement_RedefinableElement);uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_Property_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_Property_isNavigable__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_isNavigable_result = factory->createParameter_in_Operation(uML_Property_isNavigable__);

	uML_Property_isSetDefault__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_isSetDefault__return = factory->createParameter_in_Operation(uML_Property_isSetDefault__);

	uML_Property_opposite__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_opposite_result = factory->createParameter_in_Operation(uML_Property_opposite__);

	uML_Property_setBooleanDefaultValue_Boolean_Boolean = factory->createOperation_in_Class(uML_Property);
	uML_Property_setBooleanDefaultValue_Boolean_Boolean_value = factory->createParameter_in_Operation(uML_Property_setBooleanDefaultValue_Boolean_Boolean);

	uML_Property_setDefault_String_String = factory->createOperation_in_Class(uML_Property);
	uML_Property_setDefault_String_String_newDefault = factory->createParameter_in_Operation(uML_Property_setDefault_String_String);

	uML_Property_setIntegerDefaultValue_Integer_Integer = factory->createOperation_in_Class(uML_Property);
	uML_Property_setIntegerDefaultValue_Integer_Integer_value = factory->createParameter_in_Operation(uML_Property_setIntegerDefaultValue_Integer_Integer);

	uML_Property_setIsComposite_Boolean_Boolean = factory->createOperation_in_Class(uML_Property);
	uML_Property_setIsComposite_Boolean_Boolean_newIsComposite = factory->createParameter_in_Operation(uML_Property_setIsComposite_Boolean_Boolean);

	uML_Property_setIsNavigable_Boolean_Boolean = factory->createOperation_in_Class(uML_Property);
	uML_Property_setIsNavigable_Boolean_Boolean_isNavigable = factory->createParameter_in_Operation(uML_Property_setIsNavigable_Boolean_Boolean);

	uML_Property_setNullDefaultValue__ = factory->createOperation_in_Class(uML_Property);

	uML_Property_setOpposite_Property_Property = factory->createOperation_in_Class(uML_Property);
	uML_Property_setOpposite_Property_Property_newOpposite = factory->createParameter_in_Operation(uML_Property_setOpposite_Property_Property);

	uML_Property_setRealDefaultValue_Real_Real = factory->createOperation_in_Class(uML_Property);
	uML_Property_setRealDefaultValue_Real_Real_value = factory->createParameter_in_Operation(uML_Property_setRealDefaultValue_Real_Real);

	uML_Property_setStringDefaultValue_String_String = factory->createOperation_in_Class(uML_Property);
	uML_Property_setStringDefaultValue_String_String_value = factory->createParameter_in_Operation(uML_Property_setStringDefaultValue_String_String);

	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural = factory->createOperation_in_Class(uML_Property);
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value = factory->createParameter_in_Operation(uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural);

	uML_Property_subsettingContext__ = factory->createOperation_in_Class(uML_Property);
	uML_Property_subsettingContext_result = factory->createParameter_in_Operation(uML_Property_subsettingContext__);

	uML_Property_unsetDefault__ = factory->createOperation_in_Class(uML_Property);

    //-------------------------------------------
	// ProtocolConformance
	uML_ProtocolConformance = factory->createClass_in_Package(uML, uml::UmlPackage::PROTOCOLCONFORMANCE_CLASS);
	
    // ProtocolConformance attributes
	uML_ProtocolConformance_generalMachine = factory->createProperty_in_Class(uML_ProtocolConformance);
	uML_ProtocolConformance_specificMachine = factory->createProperty_in_Class(uML_ProtocolConformance);

    //-------------------------------------------
	// ProtocolStateMachine
	uML_ProtocolStateMachine = factory->createClass_in_Package(uML, uml::UmlPackage::PROTOCOLSTATEMACHINE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ProtocolStateMachine);
	con->setName("classifier_context");
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("_'context' <> null and specification = null")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ProtocolStateMachine);
	
	con->setName("deep_or_shallow_history");
	
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ProtocolStateMachine);
	
	con->setName("entry_exit_do");
	
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ProtocolStateMachine);
	
	con->setName("protocol_transitions");
	
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))")));
	
	con->setSpecification(oe);
	
    // ProtocolStateMachine attributes
	uML_ProtocolStateMachine_conformance = factory->createProperty_in_Class(uML_ProtocolStateMachine);

    //-------------------------------------------
	// ProtocolTransition
	uML_ProtocolTransition = factory->createClass_in_Package(uML, uml::UmlPackage::PROTOCOLTRANSITION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ProtocolTransition);
	con->setName("associated_actions");
	con->getConstrainedElement()->push_back(uML_ProtocolTransition);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolTransition));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("effect = null")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ProtocolTransition);
	
	con->setName("belongs_to_psm");
	
	con->getConstrainedElement()->push_back(uML_ProtocolTransition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolTransition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("container.belongsToPSM()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ProtocolTransition);
	
	con->setName("refers_to_operation");
	
	con->getConstrainedElement()->push_back(uML_ProtocolTransition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ProtocolTransition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then "\
	
	"    containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())"\
	
	"else true endif")));
	
	con->setSpecification(oe);
	
    // ProtocolTransition attributes
	uML_ProtocolTransition_postCondition = factory->createProperty_in_Class(uML_ProtocolTransition);
	uML_ProtocolTransition_preCondition = factory->createProperty_in_Class(uML_ProtocolTransition);
	uML_ProtocolTransition_referred = factory->createProperty_in_Class(uML_ProtocolTransition);
    // ProtocolTransition operations
	uML_ProtocolTransition_referred__ = factory->createOperation_in_Class(uML_ProtocolTransition);
	uML_ProtocolTransition_referred_result = factory->createParameter_in_Operation(uML_ProtocolTransition_referred__);

    //-------------------------------------------
	// Pseudostate
	uML_Pseudostate = factory->createClass_in_Package(uML, uml::UmlPackage::PSEUDOSTATE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	con->setName("choice_vertex");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("fork_vertex");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("history_vertices");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("initial_vertex");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("join_vertex");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("junction_vertex");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("outgoing_from_initial");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("transitions_incoming");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::join) implies-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions -- such that these source vertices belong to different regions of that orthogonal state incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in	((contState <> null) and (contState.region		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Pseudostate);
	
	con->setName("transitions_outgoing");
	
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Pseudostate));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = PseudostateKind::fork) implies"\
	
	""\
	
	"-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions "\
	
	"-- such that these targets belong to different regions of that orthogonal state "\
	
	""\
	
	"outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in"\
	
	"	((contState <> null) and (contState.region"\
	
	"		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))")));
	
	con->setSpecification(oe);
	
    // Pseudostate attributes
	uML_Pseudostate_kind = factory->createProperty_in_Class(uML_Pseudostate);
	uML_Pseudostate_state = factory->createProperty_in_Class(uML_Pseudostate);
	uML_Pseudostate_stateMachine = factory->createProperty_in_Class(uML_Pseudostate);

    //-------------------------------------------
	// QualifierValue
	uML_QualifierValue = factory->createClass_in_Package(uML, uml::UmlPackage::QUALIFIERVALUE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_QualifierValue);
	con->setName("multiplicity_of_qualifier");
	con->getConstrainedElement()->push_back(uML_QualifierValue);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_QualifierValue));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_QualifierValue);
	
	con->setName("qualifier_attribute");
	
	con->getConstrainedElement()->push_back(uML_QualifierValue);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_QualifierValue));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("linkEndData.end.qualifier->includes(qualifier)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_QualifierValue);
	
	con->setName("type_of_qualifier");
	
	con->getConstrainedElement()->push_back(uML_QualifierValue);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_QualifierValue));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value.type.conformsTo(qualifier.type)")));
	
	con->setSpecification(oe);
	
    // QualifierValue attributes
	uML_QualifierValue_qualifier = factory->createProperty_in_Class(uML_QualifierValue);
	uML_QualifierValue_value = factory->createProperty_in_Class(uML_QualifierValue);

    //-------------------------------------------
	// RaiseExceptionAction
	uML_RaiseExceptionAction = factory->createClass_in_Package(uML, uml::UmlPackage::RAISEEXCEPTIONACTION_CLASS);
	
    // RaiseExceptionAction attributes
	uML_RaiseExceptionAction_exception = factory->createProperty_in_Class(uML_RaiseExceptionAction);

    //-------------------------------------------
	// ReadExtentAction
	uML_ReadExtentAction = factory->createClass_in_Package(uML, uml::UmlPackage::READEXTENTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadExtentAction);
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_ReadExtentAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadExtentAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(0,*)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadExtentAction);
	
	con->setName("type_is_classifier");
	
	con->getConstrainedElement()->push_back(uML_ReadExtentAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadExtentAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = classifier")));
	
	con->setSpecification(oe);
	
    // ReadExtentAction attributes
	uML_ReadExtentAction_classifier = factory->createProperty_in_Class(uML_ReadExtentAction);
	uML_ReadExtentAction_result = factory->createProperty_in_Class(uML_ReadExtentAction);

    //-------------------------------------------
	// ReadIsClassifiedObjectAction
	uML_ReadIsClassifiedObjectAction = factory->createClass_in_Package(uML, uml::UmlPackage::READISCLASSIFIEDOBJECTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadIsClassifiedObjectAction);
	con->setName("boolean_result");
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = Boolean")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadIsClassifiedObjectAction);
	
	con->setName("multiplicity_of_input");
	
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadIsClassifiedObjectAction);
	
	con->setName("multiplicity_of_output");
	
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadIsClassifiedObjectAction);
	
	con->setName("no_type");
	
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type = null")));
	
	con->setSpecification(oe);
	
    // ReadIsClassifiedObjectAction attributes
	uML_ReadIsClassifiedObjectAction_classifier = factory->createProperty_in_Class(uML_ReadIsClassifiedObjectAction);
	uML_ReadIsClassifiedObjectAction_isDirect = factory->createProperty_in_Class(uML_ReadIsClassifiedObjectAction);
	uML_ReadIsClassifiedObjectAction_object = factory->createProperty_in_Class(uML_ReadIsClassifiedObjectAction);
	uML_ReadIsClassifiedObjectAction_result = factory->createProperty_in_Class(uML_ReadIsClassifiedObjectAction);

    //-------------------------------------------
	// ReadLinkAction
	uML_ReadLinkAction = factory->createClass_in_Package(uML, uml::UmlPackage::READLINKACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadLinkAction);
	con->setName("compatible_multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.openEnd()->first().compatibleWith(result)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkAction);
	
	con->setName("navigable_open_end");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.openEnd()->first().isNavigable()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkAction);
	
	con->setName("one_open_end");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.openEnd()->size() = 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkAction);
	
	con->setName("type_and_ordering");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkAction);
	
	con->setName("visibility");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let openEnd : Property = self.openEnd()->first() in  openEnd.visibility = VisibilityKind::public or   endData->exists(oed |     oed.end<>openEnd and     (_'context' = oed.end.type or       (openEnd.visibility = VisibilityKind::protected and         _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))")));
	
	con->setSpecification(oe);
	
    // ReadLinkAction attributes
	uML_ReadLinkAction_result = factory->createProperty_in_Class(uML_ReadLinkAction);
    // ReadLinkAction operations
	uML_ReadLinkAction_openEnd__ = factory->createOperation_in_Class(uML_ReadLinkAction);
	uML_ReadLinkAction_openEnd_result = factory->createParameter_in_Operation(uML_ReadLinkAction_openEnd__);

    //-------------------------------------------
	// ReadLinkObjectEndAction
	uML_ReadLinkObjectEndAction = factory->createClass_in_Package(uML, uml::UmlPackage::READLINKOBJECTENDACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	con->setName("association_of_association");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("end.association.oclIsKindOf(AssociationClass)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	
	con->setName("ends_of_association");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("end.association.memberEnd->forAll(e | not e.isStatic)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	
	con->setName("multiplicity_of_object");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	
	con->setName("multiplicity_of_result");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	
	con->setName("property");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("end.association <> null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	
	con->setName("type_of_object");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type = end.association")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndAction);
	
	con->setName("type_of_result");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = end.type")));
	
	con->setSpecification(oe);
	
    // ReadLinkObjectEndAction attributes
	uML_ReadLinkObjectEndAction_end = factory->createProperty_in_Class(uML_ReadLinkObjectEndAction);
	uML_ReadLinkObjectEndAction_object = factory->createProperty_in_Class(uML_ReadLinkObjectEndAction);
	uML_ReadLinkObjectEndAction_result = factory->createProperty_in_Class(uML_ReadLinkObjectEndAction);

    //-------------------------------------------
	// ReadLinkObjectEndQualifierAction
	uML_ReadLinkObjectEndQualifierAction = factory->createClass_in_Package(uML, uml::UmlPackage::READLINKOBJECTENDQUALIFIERACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	con->setName("association_of_association");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("qualifier.associationEnd.association.oclIsKindOf(AssociationClass)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("ends_of_association");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("multiplicity_of_object");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("multiplicity_of_qualifier");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("qualifier.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("multiplicity_of_result");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("qualifier_attribute");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("qualifier.associationEnd <> null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("same_type");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = qualifier.type")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadLinkObjectEndQualifierAction);
	
	con->setName("type_of_object");
	
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type = qualifier.associationEnd.association")));
	
	con->setSpecification(oe);
	
    // ReadLinkObjectEndQualifierAction attributes
	uML_ReadLinkObjectEndQualifierAction_object = factory->createProperty_in_Class(uML_ReadLinkObjectEndQualifierAction);
	uML_ReadLinkObjectEndQualifierAction_qualifier = factory->createProperty_in_Class(uML_ReadLinkObjectEndQualifierAction);
	uML_ReadLinkObjectEndQualifierAction_result = factory->createProperty_in_Class(uML_ReadLinkObjectEndQualifierAction);

    //-------------------------------------------
	// ReadSelfAction
	uML_ReadSelfAction = factory->createClass_in_Package(uML, uml::UmlPackage::READSELFACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadSelfAction);
	con->setName("contained");
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadSelfAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("_'context' <> null")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadSelfAction);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadSelfAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadSelfAction);
	
	con->setName("not_static");
	
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadSelfAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let behavior: Behavior = self.containingBehavior() in"\
	
	"behavior.specification<>null implies not behavior.specification.isStatic")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadSelfAction);
	
	con->setName("type");
	
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadSelfAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type = _'context'")));
	
	con->setSpecification(oe);
	
    // ReadSelfAction attributes
	uML_ReadSelfAction_result = factory->createProperty_in_Class(uML_ReadSelfAction);

    //-------------------------------------------
	// ReadStructuralFeatureAction
	uML_ReadStructuralFeatureAction = factory->createClass_in_Package(uML, uml::UmlPackage::READSTRUCTURALFEATUREACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadStructuralFeatureAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadStructuralFeatureAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadStructuralFeatureAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("structuralFeature.compatibleWith(result)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadStructuralFeatureAction);
	
	con->setName("type_and_ordering");
	
	con->getConstrainedElement()->push_back(uML_ReadStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadStructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered")));
	
	con->setSpecification(oe);
	
    // ReadStructuralFeatureAction attributes
	uML_ReadStructuralFeatureAction_result = factory->createProperty_in_Class(uML_ReadStructuralFeatureAction);

    //-------------------------------------------
	// ReadVariableAction
	uML_ReadVariableAction = factory->createClass_in_Package(uML, uml::UmlPackage::READVARIABLEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReadVariableAction);
	con->setName("compatible_multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadVariableAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadVariableAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("variable.compatibleWith(result)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReadVariableAction);
	
	con->setName("type_and_ordering");
	
	con->getConstrainedElement()->push_back(uML_ReadVariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReadVariableAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type =variable.type and result.isOrdered = variable.isOrdered")));
	
	con->setSpecification(oe);
	
    // ReadVariableAction attributes
	uML_ReadVariableAction_result = factory->createProperty_in_Class(uML_ReadVariableAction);

    //-------------------------------------------
	// Realization
	uML_Realization = factory->createClass_in_Package(uML, uml::UmlPackage::REALIZATION_CLASS);
	

    //-------------------------------------------
	// Reception
	uML_Reception = factory->createClass_in_Package(uML, uml::UmlPackage::RECEPTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Reception);
	con->setName("same_name_as_signal");
	con->getConstrainedElement()->push_back(uML_Reception);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Reception));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("name = signal.name")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Reception);
	
	con->setName("same_structure_as_signal");
	
	con->getConstrainedElement()->push_back(uML_Reception);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Reception));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("signal.ownedAttribute->size() = ownedParameter->size() and"\
	
	"Sequence{1..signal.ownedAttribute->size()}->forAll( i | "\
	
	"    ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and "\
	
	"    ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and"\
	
	"    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and"\
	
	"    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and"\
	
	"    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound()"\
	
	")")));
	
	con->setSpecification(oe);
	
    // Reception attributes
	uML_Reception_signal = factory->createProperty_in_Class(uML_Reception);

    //-------------------------------------------
	// ReclassifyObjectAction
	uML_ReclassifyObjectAction = factory->createClass_in_Package(uML, uml::UmlPackage::RECLASSIFYOBJECTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReclassifyObjectAction);
	con->setName("classifier_not_abstract");
	con->getConstrainedElement()->push_back(uML_ReclassifyObjectAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReclassifyObjectAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not newClassifier->exists(isAbstract)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReclassifyObjectAction);
	
	con->setName("input_pin");
	
	con->getConstrainedElement()->push_back(uML_ReclassifyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReclassifyObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type = null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReclassifyObjectAction);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_ReclassifyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReclassifyObjectAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	
	con->setSpecification(oe);
	
    // ReclassifyObjectAction attributes
	uML_ReclassifyObjectAction_isReplaceAll = factory->createProperty_in_Class(uML_ReclassifyObjectAction);
	uML_ReclassifyObjectAction_newClassifier = factory->createProperty_in_Class(uML_ReclassifyObjectAction);
	uML_ReclassifyObjectAction_object = factory->createProperty_in_Class(uML_ReclassifyObjectAction);
	uML_ReclassifyObjectAction_oldClassifier = factory->createProperty_in_Class(uML_ReclassifyObjectAction);

    //-------------------------------------------
	// RedefinableElement
	uML_RedefinableElement = factory->createClass_in_Package(uML, uml::UmlPackage::REDEFINABLEELEMENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_RedefinableElement);
	con->setName("non_leaf_redefinition");
	con->getConstrainedElement()->push_back(uML_RedefinableElement);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_RedefinableElement));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("redefinedElement->forAll(re | not re.isLeaf)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_RedefinableElement);
	
	con->setName("redefinition_consistent");
	
	con->getConstrainedElement()->push_back(uML_RedefinableElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_RedefinableElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("redefinedElement->forAll(re | re.isConsistentWith(self))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_RedefinableElement);
	
	con->setName("redefinition_context_valid");
	
	con->getConstrainedElement()->push_back(uML_RedefinableElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_RedefinableElement));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("redefinedElement->forAll(re | self.isRedefinitionContextValid(re))")));
	
	con->setSpecification(oe);
	
    // RedefinableElement attributes
	uML_RedefinableElement_isLeaf = factory->createProperty_in_Class(uML_RedefinableElement);
	uML_RedefinableElement_redefinedElement = factory->createProperty_in_Class(uML_RedefinableElement);
	uML_RedefinableElement_redefinitionContext = factory->createProperty_in_Class(uML_RedefinableElement);
    // RedefinableElement operations
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_RedefinableElement);
	uML_RedefinableElement_isConsistentWith_result = factory->createParameter_in_Operation(uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement);uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_RedefinableElement);
	uML_RedefinableElement_isRedefinitionContextValid_result = factory->createParameter_in_Operation(uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement);uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement = factory->createParameter_in_Operation(uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement);

    //-------------------------------------------
	// RedefinableTemplateSignature
	uML_RedefinableTemplateSignature = factory->createClass_in_Package(uML, uml::UmlPackage::REDEFINABLETEMPLATESIGNATURE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_RedefinableTemplateSignature);
	con->setName("redefines_parents");
	con->getConstrainedElement()->push_back(uML_RedefinableTemplateSignature);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_RedefinableTemplateSignature));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))")));
	con->setSpecification(oe);
	
    // RedefinableTemplateSignature attributes
	uML_RedefinableTemplateSignature_classifier = factory->createProperty_in_Class(uML_RedefinableTemplateSignature);
	uML_RedefinableTemplateSignature_extendedSignature = factory->createProperty_in_Class(uML_RedefinableTemplateSignature);
	uML_RedefinableTemplateSignature_inheritedParameter = factory->createProperty_in_Class(uML_RedefinableTemplateSignature);
    // RedefinableTemplateSignature operations
	uML_RedefinableTemplateSignature_inheritedParameter__ = factory->createOperation_in_Class(uML_RedefinableTemplateSignature);
	uML_RedefinableTemplateSignature_inheritedParameter_result = factory->createParameter_in_Operation(uML_RedefinableTemplateSignature_inheritedParameter__);

	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_RedefinableTemplateSignature);
	uML_RedefinableTemplateSignature_isConsistentWith_result = factory->createParameter_in_Operation(uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement);uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement);

    //-------------------------------------------
	// ReduceAction
	uML_ReduceAction = factory->createClass_in_Package(uML, uml::UmlPackage::REDUCEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReduceAction);
	con->setName("input_type_is_collection");
	con->getConstrainedElement()->push_back(uML_ReduceAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReduceAction));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReduceAction);
	
	con->setName("output_types_are_compatible");
	
	con->getConstrainedElement()->push_back(uML_ReduceAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReduceAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("reducer.outputParameters().type->forAll(conformsTo(result.type))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReduceAction);
	
	con->setName("reducer_inputs_output");
	
	con->getConstrainedElement()->push_back(uML_ReduceAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReduceAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let inputs: OrderedSet(Parameter) = reducer.inputParameters() in"\
	
	"let outputs: OrderedSet(Parameter) = reducer.outputParameters() in"\
	
	"inputs->size()=2 and outputs->size()=1 and"\
	
	"inputs.type->forAll(t | "\
	
	"	outputs.type->forAll(conformsTo(t)) and "\
	
	"	-- Note that the following only checks the case when the collection is via multiple tokens."\
	
	"	collection.upperBound()>1 implies collection.type.conformsTo(t))")));
	
	con->setSpecification(oe);
	
    // ReduceAction attributes
	uML_ReduceAction_collection = factory->createProperty_in_Class(uML_ReduceAction);
	uML_ReduceAction_isOrdered = factory->createProperty_in_Class(uML_ReduceAction);
	uML_ReduceAction_reducer = factory->createProperty_in_Class(uML_ReduceAction);
	uML_ReduceAction_result = factory->createProperty_in_Class(uML_ReduceAction);

    //-------------------------------------------
	// Region
	uML_Region = factory->createClass_in_Package(uML, uml::UmlPackage::REGION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Region);
	con->setName("deep_history_vertex");
	con->getConstrainedElement()->push_back(uML_Region);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Region));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Region);
	
	con->setName("initial_vertex");
	
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Region));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Region);
	
	con->setName("owned");
	
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Region));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Region);
	
	con->setName("shallow_history_vertex");
	
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Region));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1")));
	
	con->setSpecification(oe);
	
    // Region attributes
	uML_Region_extendedRegion = factory->createProperty_in_Class(uML_Region);
	uML_Region_redefinitionContext = factory->createProperty_in_Class(uML_Region);
	uML_Region_state = factory->createProperty_in_Class(uML_Region);
	uML_Region_stateMachine = factory->createProperty_in_Class(uML_Region);
	uML_Region_subvertex = factory->createProperty_in_Class(uML_Region);
	uML_Region_transition = factory->createProperty_in_Class(uML_Region);
    // Region operations
	uML_Region_belongsToPSM__ = factory->createOperation_in_Class(uML_Region);
	uML_Region_belongsToPSM_result = factory->createParameter_in_Operation(uML_Region_belongsToPSM__);

	uML_Region_containingStateMachine__ = factory->createOperation_in_Class(uML_Region);
	uML_Region_containingStateMachine_result = factory->createParameter_in_Operation(uML_Region_containingStateMachine__);

	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_Region);
	uML_Region_isConsistentWith_result = factory->createParameter_in_Operation(uML_Region_isConsistentWith_RedefinableElement_RedefinableElement);uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_Region_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_Region);
	uML_Region_isRedefinitionContextValid_result = factory->createParameter_in_Operation(uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement);uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement = factory->createParameter_in_Operation(uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement);

	uML_Region_redefinitionContext__ = factory->createOperation_in_Class(uML_Region);
	uML_Region_redefinitionContext_result = factory->createParameter_in_Operation(uML_Region_redefinitionContext__);

    //-------------------------------------------
	// Relationship
	uML_Relationship = factory->createClass_in_Package(uML, uml::UmlPackage::RELATIONSHIP_CLASS);
	
    // Relationship attributes
	uML_Relationship_relatedElement = factory->createProperty_in_Class(uML_Relationship);

    //-------------------------------------------
	// RemoveStructuralFeatureValueAction
	uML_RemoveStructuralFeatureValueAction = factory->createClass_in_Package(uML, uml::UmlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_RemoveStructuralFeatureValueAction);
	con->setName("removeAt_and_value");
	con->getConstrainedElement()->push_back(uML_RemoveStructuralFeatureValueAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_RemoveStructuralFeatureValueAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then"\
	"  value = null and"\
	"  removeAt <> null and"\
	"  removeAt.type = UnlimitedNatural and"\
	"  removeAt.is(1,1)"\
	"else"\
	"  removeAt = null and value <> null"\
	"endif")));
	con->setSpecification(oe);
	
    // RemoveStructuralFeatureValueAction attributes
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates = factory->createProperty_in_Class(uML_RemoveStructuralFeatureValueAction);
	uML_RemoveStructuralFeatureValueAction_removeAt = factory->createProperty_in_Class(uML_RemoveStructuralFeatureValueAction);

    //-------------------------------------------
	// RemoveVariableValueAction
	uML_RemoveVariableValueAction = factory->createClass_in_Package(uML, uml::UmlPackage::REMOVEVARIABLEVALUEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_RemoveVariableValueAction);
	con->setName("removeAt_and_value");
	con->getConstrainedElement()->push_back(uML_RemoveVariableValueAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_RemoveVariableValueAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if  variable.isOrdered and not variable.isUnique and not isRemoveDuplicates then "\
	"  value = null and"\
	"  removeAt <> null and"\
	"  removeAt.type = UnlimitedNatural and"\
	"  removeAt.is(1,1)"\
	"else"\
	"  removeAt = null and value <> null"\
	"endif")));
	con->setSpecification(oe);
	
    // RemoveVariableValueAction attributes
	uML_RemoveVariableValueAction_isRemoveDuplicates = factory->createProperty_in_Class(uML_RemoveVariableValueAction);
	uML_RemoveVariableValueAction_removeAt = factory->createProperty_in_Class(uML_RemoveVariableValueAction);

    //-------------------------------------------
	// ReplyAction
	uML_ReplyAction = factory->createClass_in_Package(uML, uml::UmlPackage::REPLYACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ReplyAction);
	con->setName("event_on_reply_to_call_trigger");
	con->getConstrainedElement()->push_back(uML_ReplyAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReplyAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("replyToCall.event.oclIsKindOf(CallEvent)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ReplyAction);
	
	con->setName("pins_match_parameter");
	
	con->getConstrainedElement()->push_back(uML_ReplyAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ReplyAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in"\
	
	"replyValue->size()=parameter->size() and"\
	
	"Sequence{1..replyValue->size()}->forAll(i |"\
	
	"	replyValue->at(i).type.conformsTo(parameter->at(i).type) and"\
	
	"	replyValue->at(i).isOrdered=parameter->at(i).isOrdered and"\
	
	"	replyValue->at(i).compatibleWith(parameter->at(i)))")));
	
	con->setSpecification(oe);
	
    // ReplyAction attributes
	uML_ReplyAction_replyToCall = factory->createProperty_in_Class(uML_ReplyAction);
	uML_ReplyAction_replyValue = factory->createProperty_in_Class(uML_ReplyAction);
	uML_ReplyAction_returnInformation = factory->createProperty_in_Class(uML_ReplyAction);

    //-------------------------------------------
	// SendObjectAction
	uML_SendObjectAction = factory->createClass_in_Package(uML, uml::UmlPackage::SENDOBJECTACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_SendObjectAction);
	con->setName("type_target_pin");
	con->getConstrainedElement()->push_back(uML_SendObjectAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_SendObjectAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)")));
	con->setSpecification(oe);
	
    // SendObjectAction attributes
	uML_SendObjectAction_request = factory->createProperty_in_Class(uML_SendObjectAction);
	uML_SendObjectAction_target = factory->createProperty_in_Class(uML_SendObjectAction);

    //-------------------------------------------
	// SendSignalAction
	uML_SendSignalAction = factory->createClass_in_Package(uML, uml::UmlPackage::SENDSIGNALACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_SendSignalAction);
	con->setName("number_order");
	con->getConstrainedElement()->push_back(uML_SendSignalAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_SendSignalAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("argument->size()=signal.allAttributes()->size()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_SendSignalAction);
	
	con->setName("type_ordering_multiplicity");
	
	con->getConstrainedElement()->push_back(uML_SendSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_SendSignalAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let attribute: OrderedSet(Property) = signal.allAttributes() in"\
	
	"Sequence{1..argument->size()}->forAll(i | "\
	
	"	argument->at(i).type.conformsTo(attribute->at(i).type) and "\
	
	"	argument->at(i).isOrdered = attribute->at(i).isOrdered and"\
	
	"	argument->at(i).compatibleWith(attribute->at(i)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_SendSignalAction);
	
	con->setName("type_target_pin");
	
	con->getConstrainedElement()->push_back(uML_SendSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_SendSignalAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)")));
	
	con->setSpecification(oe);
	
    // SendSignalAction attributes
	uML_SendSignalAction_signal = factory->createProperty_in_Class(uML_SendSignalAction);
	uML_SendSignalAction_target = factory->createProperty_in_Class(uML_SendSignalAction);

    //-------------------------------------------
	// SequenceNode
	uML_SequenceNode = factory->createClass_in_Package(uML, uml::UmlPackage::SEQUENCENODE_CLASS);
	
    // SequenceNode attributes
	uML_SequenceNode_executableNode = factory->createProperty_in_Class(uML_SequenceNode);

    //-------------------------------------------
	// Signal
	uML_Signal = factory->createClass_in_Package(uML, uml::UmlPackage::SIGNAL_CLASS);
	
    // Signal attributes
	uML_Signal_ownedAttribute = factory->createProperty_in_Class(uML_Signal);
    // Signal operations
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_Signal);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createParameter_in_Operation(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createParameter_in_Operation(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower = factory->createParameter_in_Operation(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper = factory->createParameter_in_Operation(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);

    //-------------------------------------------
	// SignalEvent
	uML_SignalEvent = factory->createClass_in_Package(uML, uml::UmlPackage::SIGNALEVENT_CLASS);
	
    // SignalEvent attributes
	uML_SignalEvent_signal = factory->createProperty_in_Class(uML_SignalEvent);

    //-------------------------------------------
	// Slot
	uML_Slot = factory->createClass_in_Package(uML, uml::UmlPackage::SLOT_CLASS);
	
    // Slot attributes
	uML_Slot_definingFeature = factory->createProperty_in_Class(uML_Slot);
	uML_Slot_owningInstance = factory->createProperty_in_Class(uML_Slot);
	uML_Slot_value = factory->createProperty_in_Class(uML_Slot);

    //-------------------------------------------
	// StartClassifierBehaviorAction
	uML_StartClassifierBehaviorAction = factory->createClass_in_Package(uML, uml::UmlPackage::STARTCLASSIFIERBEHAVIORACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_StartClassifierBehaviorAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_StartClassifierBehaviorAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StartClassifierBehaviorAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StartClassifierBehaviorAction);
	
	con->setName("type_has_classifier");
	
	con->getConstrainedElement()->push_back(uML_StartClassifierBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StartClassifierBehaviorAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type->notEmpty() implies "\
	
	"   (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)")));
	
	con->setSpecification(oe);
	
    // StartClassifierBehaviorAction attributes
	uML_StartClassifierBehaviorAction_object = factory->createProperty_in_Class(uML_StartClassifierBehaviorAction);

    //-------------------------------------------
	// StartObjectBehaviorAction
	uML_StartObjectBehaviorAction = factory->createClass_in_Package(uML, uml::UmlPackage::STARTOBJECTBEHAVIORACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_StartObjectBehaviorAction);
	con->setName("multiplicity_of_object");
	con->getConstrainedElement()->push_back(uML_StartObjectBehaviorAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StartObjectBehaviorAction);
	
	con->setName("no_onport");
	
	con->getConstrainedElement()->push_back(uML_StartObjectBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("onPort->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StartObjectBehaviorAction);
	
	con->setName("type_of_object");
	
	con->getConstrainedElement()->push_back(uML_StartObjectBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.behavior()<>null")));
	
	con->setSpecification(oe);
	
    // StartObjectBehaviorAction attributes
	uML_StartObjectBehaviorAction_object = factory->createProperty_in_Class(uML_StartObjectBehaviorAction);
    // StartObjectBehaviorAction operations
	uML_StartObjectBehaviorAction_behavior__ = factory->createOperation_in_Class(uML_StartObjectBehaviorAction);
	uML_StartObjectBehaviorAction_behavior_result = factory->createParameter_in_Operation(uML_StartObjectBehaviorAction_behavior__);

	uML_StartObjectBehaviorAction_inputParameters__ = factory->createOperation_in_Class(uML_StartObjectBehaviorAction);
	uML_StartObjectBehaviorAction_inputParameters_result = factory->createParameter_in_Operation(uML_StartObjectBehaviorAction_inputParameters__);

	uML_StartObjectBehaviorAction_outputParameters__ = factory->createOperation_in_Class(uML_StartObjectBehaviorAction);
	uML_StartObjectBehaviorAction_outputParameters_result = factory->createParameter_in_Operation(uML_StartObjectBehaviorAction_outputParameters__);

    //-------------------------------------------
	// State
	uML_State = factory->createClass_in_Package(uML, uml::UmlPackage::STATE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_State);
	con->setName("composite_states");
	con->getConstrainedElement()->push_back(uML_State);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_State));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("connectionPoint->notEmpty() implies isComposite")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_State);
	
	con->setName("destinations_or_sources_of_transitions");
	
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_State));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("self.isSubmachineState implies (self.connection->forAll (cp |"\
	
	"  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and"\
	
	"  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_State);
	
	con->setName("entry_or_exit");
	
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_State));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_State);
	
	con->setName("submachine_or_regions");
	
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_State));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isComposite implies not isSubmachineState")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_State);
	
	con->setName("submachine_states");
	
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_State));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("isSubmachineState implies connection->notEmpty( )")));
	
	con->setSpecification(oe);
	
    // State attributes
	uML_State_connection = factory->createProperty_in_Class(uML_State);
	uML_State_connectionPoint = factory->createProperty_in_Class(uML_State);
	uML_State_deferrableTrigger = factory->createProperty_in_Class(uML_State);
	uML_State_doActivity = factory->createProperty_in_Class(uML_State);
	uML_State_entry = factory->createProperty_in_Class(uML_State);
	uML_State_exit = factory->createProperty_in_Class(uML_State);
	uML_State_isComposite = factory->createProperty_in_Class(uML_State);
	uML_State_isOrthogonal = factory->createProperty_in_Class(uML_State);
	uML_State_isSimple = factory->createProperty_in_Class(uML_State);
	uML_State_isSubmachineState = factory->createProperty_in_Class(uML_State);
	uML_State_redefinedState = factory->createProperty_in_Class(uML_State);
	uML_State_redefinitionContext = factory->createProperty_in_Class(uML_State);
	uML_State_region = factory->createProperty_in_Class(uML_State);
	uML_State_stateInvariant = factory->createProperty_in_Class(uML_State);
	uML_State_submachine = factory->createProperty_in_Class(uML_State);
    // State operations
	uML_State_containingStateMachine__ = factory->createOperation_in_Class(uML_State);
	uML_State_containingStateMachine_result = factory->createParameter_in_Operation(uML_State_containingStateMachine__);

	uML_State_isComposite__ = factory->createOperation_in_Class(uML_State);
	uML_State_isComposite_result = factory->createParameter_in_Operation(uML_State_isComposite__);

	uML_State_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_State);
	uML_State_isConsistentWith_result = factory->createParameter_in_Operation(uML_State_isConsistentWith_RedefinableElement_RedefinableElement);uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_State_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_State_isOrthogonal__ = factory->createOperation_in_Class(uML_State);
	uML_State_isOrthogonal_result = factory->createParameter_in_Operation(uML_State_isOrthogonal__);

	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_State);
	uML_State_isRedefinitionContextValid_result = factory->createParameter_in_Operation(uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement);uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement = factory->createParameter_in_Operation(uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement);

	uML_State_isSimple__ = factory->createOperation_in_Class(uML_State);
	uML_State_isSimple_result = factory->createParameter_in_Operation(uML_State_isSimple__);

	uML_State_isSubmachineState__ = factory->createOperation_in_Class(uML_State);
	uML_State_isSubmachineState_result = factory->createParameter_in_Operation(uML_State_isSubmachineState__);

	uML_State_redefinitionContext__ = factory->createOperation_in_Class(uML_State);
	uML_State_redefinitionContext_result = factory->createParameter_in_Operation(uML_State_redefinitionContext__);

    //-------------------------------------------
	// StateInvariant
	uML_StateInvariant = factory->createClass_in_Package(uML, uml::UmlPackage::STATEINVARIANT_CLASS);
	
    // StateInvariant attributes
	uML_StateInvariant_covered = factory->createProperty_in_Class(uML_StateInvariant);
	uML_StateInvariant_invariant = factory->createProperty_in_Class(uML_StateInvariant);

    //-------------------------------------------
	// StateMachine
	uML_StateMachine = factory->createClass_in_Package(uML, uml::UmlPackage::STATEMACHINE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_StateMachine);
	con->setName("classifier_context");
	con->getConstrainedElement()->push_back(uML_StateMachine);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StateMachine));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("_'context' <> null implies not _'context'.oclIsKindOf(Interface)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StateMachine);
	
	con->setName("connection_points");
	
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StateMachine));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StateMachine);
	
	con->setName("context_classifier");
	
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StateMachine));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StateMachine);
	
	con->setName("method");
	
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StateMachine));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("specification <> null implies connectionPoint->isEmpty()")));
	
	con->setSpecification(oe);
	
    // StateMachine attributes
	uML_StateMachine_connectionPoint = factory->createProperty_in_Class(uML_StateMachine);
	uML_StateMachine_extendedStateMachine = factory->createProperty_in_Class(uML_StateMachine);
	uML_StateMachine_region = factory->createProperty_in_Class(uML_StateMachine);
	uML_StateMachine_submachineState = factory->createProperty_in_Class(uML_StateMachine);
    // StateMachine operations
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex = factory->createOperation_in_Class(uML_StateMachine);
	uML_StateMachine_LCA_result = factory->createParameter_in_Operation(uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex);uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1 = factory->createParameter_in_Operation(uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex);uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2 = factory->createParameter_in_Operation(uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex);

	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex = factory->createOperation_in_Class(uML_StateMachine);
	uML_StateMachine_LCAState_result = factory->createParameter_in_Operation(uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex);uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1 = factory->createParameter_in_Operation(uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex);uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2 = factory->createParameter_in_Operation(uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex);

	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex = factory->createOperation_in_Class(uML_StateMachine);
	uML_StateMachine_ancestor_result = factory->createParameter_in_Operation(uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex);uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1 = factory->createParameter_in_Operation(uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex);uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2 = factory->createParameter_in_Operation(uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex);

	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_StateMachine);
	uML_StateMachine_isConsistentWith_result = factory->createParameter_in_Operation(uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement);uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_StateMachine);
	uML_StateMachine_isRedefinitionContextValid_result = factory->createParameter_in_Operation(uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement);uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement = factory->createParameter_in_Operation(uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement);

    //-------------------------------------------
	// Stereotype
	uML_Stereotype = factory->createClass_in_Package(uML, uml::UmlPackage::STEREOTYPE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Stereotype);
	con->setName("associationEndOwnership");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedAttribute"\
	"->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))"\
	"->forAll(opposite.owner = association)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Stereotype);
	
	con->setName("base_property_multiplicity_multiple_extension");
	
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Stereotype);
	
	con->setName("base_property_multiplicity_single_extension");
	
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Stereotype);
	
	con->setName("base_property_upper_bound");
	
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Stereotype);
	
	con->setName("binaryAssociationsOnly");
	
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("ownedAttribute.association->forAll(memberEnd->size()=2)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Stereotype);
	
	con->setName("generalize");
	
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("allParents()->forAll(oclIsKindOf(Stereotype)) "\
	
	"and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Stereotype);
	
	con->setName("name_not_clash");
	
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Stereotype));
	
	con->setSpecification(oe);
	
    // Stereotype attributes
	uML_Stereotype_icon = factory->createProperty_in_Class(uML_Stereotype);
	uML_Stereotype_profile = factory->createProperty_in_Class(uML_Stereotype);
    // Stereotype operations
	uML_Stereotype_containingProfile__ = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_containingProfile_result = factory->createParameter_in_Operation(uML_Stereotype_containingProfile__);

	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn = factory->createParameter_in_Operation(uML_Stereotype_createExtension_Class_Boolean_Class_Boolean);uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass = factory->createParameter_in_Operation(uML_Stereotype_createExtension_Class_Boolean_Class_Boolean);uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired = factory->createParameter_in_Operation(uML_Stereotype_createExtension_Class_Boolean_Class_Boolean);

	uML_Stereotype_createIcon_String_String = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_createIcon_String_Stringreturn = factory->createParameter_in_Operation(uML_Stereotype_createIcon_String_String);uML_Stereotype_createIcon_String_String_location = factory->createParameter_in_Operation(uML_Stereotype_createIcon_String_String);

	uML_Stereotype_createIcon_String_String_String_String = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_createIcon_String_String_String_Stringreturn = factory->createParameter_in_Operation(uML_Stereotype_createIcon_String_String_String_String);uML_Stereotype_createIcon_String_String_String_String_format = factory->createParameter_in_Operation(uML_Stereotype_createIcon_String_String_String_String);uML_Stereotype_createIcon_String_String_String_String_content = factory->createParameter_in_Operation(uML_Stereotype_createIcon_String_String_String_String);

	uML_Stereotype_getAllExtendedMetaclasses__ = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_getAllExtendedMetaclasses__return = factory->createParameter_in_Operation(uML_Stereotype_getAllExtendedMetaclasses__);

	uML_Stereotype_getDefinition__ = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_getDefinition__return = factory->createParameter_in_Operation(uML_Stereotype_getDefinition__);

	uML_Stereotype_getExtendedMetaclasses__ = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_getExtendedMetaclasses__return = factory->createParameter_in_Operation(uML_Stereotype_getExtendedMetaclasses__);

	uML_Stereotype_getKeyword__ = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_getKeyword__return = factory->createParameter_in_Operation(uML_Stereotype_getKeyword__);

	uML_Stereotype_getKeyword_Boolean_Boolean = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_getKeyword_Boolean_Booleanreturn = factory->createParameter_in_Operation(uML_Stereotype_getKeyword_Boolean_Boolean);uML_Stereotype_getKeyword_Boolean_Boolean_localize = factory->createParameter_in_Operation(uML_Stereotype_getKeyword_Boolean_Boolean);

	uML_Stereotype_profile__ = factory->createOperation_in_Class(uML_Stereotype);
	uML_Stereotype_profile_result = factory->createParameter_in_Operation(uML_Stereotype_profile__);

    //-------------------------------------------
	// StringExpression
	uML_StringExpression = factory->createClass_in_Package(uML, uml::UmlPackage::STRINGEXPRESSION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_StringExpression);
	con->setName("operands");
	con->getConstrainedElement()->push_back(uML_StringExpression);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StringExpression));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("operand->forAll (oclIsKindOf (LiteralString))")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StringExpression);
	
	con->setName("subexpressions");
	
	con->getConstrainedElement()->push_back(uML_StringExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StringExpression));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif")));
	
	con->setSpecification(oe);
	
    // StringExpression attributes
	uML_StringExpression_owningExpression = factory->createProperty_in_Class(uML_StringExpression);
	uML_StringExpression_subExpression = factory->createProperty_in_Class(uML_StringExpression);
    // StringExpression operations
	uML_StringExpression_stringValue__ = factory->createOperation_in_Class(uML_StringExpression);
	uML_StringExpression_stringValue_result = factory->createParameter_in_Operation(uML_StringExpression_stringValue__);

    //-------------------------------------------
	// StructuralFeature
	uML_StructuralFeature = factory->createClass_in_Package(uML, uml::UmlPackage::STRUCTURALFEATURE_CLASS);
	
    // StructuralFeature attributes
	uML_StructuralFeature_isReadOnly = factory->createProperty_in_Class(uML_StructuralFeature);

    //-------------------------------------------
	// StructuralFeatureAction
	uML_StructuralFeatureAction = factory->createClass_in_Package(uML, uml::UmlPackage::STRUCTURALFEATUREACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_StructuralFeatureAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StructuralFeatureAction);
	
	con->setName("not_static");
	
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not structuralFeature.isStatic")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StructuralFeatureAction);
	
	con->setName("object_type");
	
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) or"\
	
	"	object.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StructuralFeatureAction);
	
	con->setName("one_featuring_classifier");
	
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("structuralFeature.featuringClassifier->size() = 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StructuralFeatureAction);
	
	con->setName("visibility");
	
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("structuralFeature.visibility = VisibilityKind::public or_'context'.allFeatures()->includes(structuralFeature) orstructuralFeature.visibility=VisibilityKind::protected and_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))")));
	
	con->setSpecification(oe);
	
    // StructuralFeatureAction attributes
	uML_StructuralFeatureAction_object = factory->createProperty_in_Class(uML_StructuralFeatureAction);
	uML_StructuralFeatureAction_structuralFeature = factory->createProperty_in_Class(uML_StructuralFeatureAction);

    //-------------------------------------------
	// StructuredActivityNode
	uML_StructuredActivityNode = factory->createClass_in_Package(uML, uml::UmlPackage::STRUCTUREDACTIVITYNODE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_StructuredActivityNode);
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_StructuredActivityNode);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuredActivityNode));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->"\
	"	union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StructuredActivityNode);
	
	con->setName("input_pin_edges");
	
	con->getConstrainedElement()->push_back(uML_StructuredActivityNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuredActivityNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("input.incoming.source->excludesAll(allOwnedNodes()-output)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_StructuredActivityNode);
	
	con->setName("output_pin_edges");
	
	con->getConstrainedElement()->push_back(uML_StructuredActivityNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_StructuredActivityNode));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("output.outgoing.target->excludesAll(allOwnedNodes()-input)")));
	
	con->setSpecification(oe);
	
    // StructuredActivityNode attributes
	uML_StructuredActivityNode_activity = factory->createProperty_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_edge = factory->createProperty_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_mustIsolate = factory->createProperty_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_node = factory->createProperty_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_structuredNodeInput = factory->createProperty_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_structuredNodeOutput = factory->createProperty_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_variable = factory->createProperty_in_Class(uML_StructuredActivityNode);
    // StructuredActivityNode operations
	uML_StructuredActivityNode_allActions__ = factory->createOperation_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_allActions_result = factory->createParameter_in_Operation(uML_StructuredActivityNode_allActions__);

	uML_StructuredActivityNode_allOwnedNodes__ = factory->createOperation_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_allOwnedNodes_result = factory->createParameter_in_Operation(uML_StructuredActivityNode_allOwnedNodes__);

	uML_StructuredActivityNode_containingActivity__ = factory->createOperation_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_containingActivity_result = factory->createParameter_in_Operation(uML_StructuredActivityNode_containingActivity__);

	uML_StructuredActivityNode_sourceNodes__ = factory->createOperation_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_sourceNodes_result = factory->createParameter_in_Operation(uML_StructuredActivityNode_sourceNodes__);

	uML_StructuredActivityNode_targetNodes__ = factory->createOperation_in_Class(uML_StructuredActivityNode);
	uML_StructuredActivityNode_targetNodes_result = factory->createParameter_in_Operation(uML_StructuredActivityNode_targetNodes__);

    //-------------------------------------------
	// StructuredClassifier
	uML_StructuredClassifier = factory->createClass_in_Package(uML, uml::UmlPackage::STRUCTUREDCLASSIFIER_CLASS);
	
    // StructuredClassifier attributes
	uML_StructuredClassifier_ownedAttribute = factory->createProperty_in_Class(uML_StructuredClassifier);
	uML_StructuredClassifier_ownedConnector = factory->createProperty_in_Class(uML_StructuredClassifier);
	uML_StructuredClassifier_part = factory->createProperty_in_Class(uML_StructuredClassifier);
	uML_StructuredClassifier_role = factory->createProperty_in_Class(uML_StructuredClassifier);
    // StructuredClassifier operations
	uML_StructuredClassifier_allRoles__ = factory->createOperation_in_Class(uML_StructuredClassifier);
	uML_StructuredClassifier_allRoles_result = factory->createParameter_in_Operation(uML_StructuredClassifier_allRoles__);

	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_StructuredClassifier);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createParameter_in_Operation(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createParameter_in_Operation(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower = factory->createParameter_in_Operation(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper = factory->createParameter_in_Operation(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural);

	uML_StructuredClassifier_part__ = factory->createOperation_in_Class(uML_StructuredClassifier);
	uML_StructuredClassifier_part_result = factory->createParameter_in_Operation(uML_StructuredClassifier_part__);

    //-------------------------------------------
	// Substitution
	uML_Substitution = factory->createClass_in_Package(uML, uml::UmlPackage::SUBSTITUTION_CLASS);
	
    // Substitution attributes
	uML_Substitution_contract = factory->createProperty_in_Class(uML_Substitution);
	uML_Substitution_substitutingClassifier = factory->createProperty_in_Class(uML_Substitution);

    //-------------------------------------------
	// TemplateBinding
	uML_TemplateBinding = factory->createClass_in_Package(uML, uml::UmlPackage::TEMPLATEBINDING_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TemplateBinding);
	con->setName("one_parameter_substitution");
	con->getConstrainedElement()->push_back(uML_TemplateBinding);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TemplateBinding));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_TemplateBinding);
	
	con->setName("parameter_substitution_formal");
	
	con->getConstrainedElement()->push_back(uML_TemplateBinding);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TemplateBinding));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))")));
	
	con->setSpecification(oe);
	
    // TemplateBinding attributes
	uML_TemplateBinding_boundElement = factory->createProperty_in_Class(uML_TemplateBinding);
	uML_TemplateBinding_parameterSubstitution = factory->createProperty_in_Class(uML_TemplateBinding);
	uML_TemplateBinding_signature = factory->createProperty_in_Class(uML_TemplateBinding);

    //-------------------------------------------
	// TemplateParameter
	uML_TemplateParameter = factory->createClass_in_Package(uML, uml::UmlPackage::TEMPLATEPARAMETER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TemplateParameter);
	con->setName("must_be_compatible");
	con->getConstrainedElement()->push_back(uML_TemplateParameter);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TemplateParameter));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("default <> null implies default.isCompatibleWith(parameteredElement)")));
	con->setSpecification(oe);
	
    // TemplateParameter attributes
	uML_TemplateParameter_default = factory->createProperty_in_Class(uML_TemplateParameter);
	uML_TemplateParameter_ownedDefault = factory->createProperty_in_Class(uML_TemplateParameter);
	uML_TemplateParameter_ownedParameteredElement = factory->createProperty_in_Class(uML_TemplateParameter);
	uML_TemplateParameter_parameteredElement = factory->createProperty_in_Class(uML_TemplateParameter);
	uML_TemplateParameter_signature = factory->createProperty_in_Class(uML_TemplateParameter);

    //-------------------------------------------
	// TemplateParameterSubstitution
	uML_TemplateParameterSubstitution = factory->createClass_in_Package(uML, uml::UmlPackage::TEMPLATEPARAMETERSUBSTITUTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TemplateParameterSubstitution);
	con->setName("must_be_compatible");
	con->getConstrainedElement()->push_back(uML_TemplateParameterSubstitution);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TemplateParameterSubstitution));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))")));
	con->setSpecification(oe);
	
    // TemplateParameterSubstitution attributes
	uML_TemplateParameterSubstitution_actual = factory->createProperty_in_Class(uML_TemplateParameterSubstitution);
	uML_TemplateParameterSubstitution_formal = factory->createProperty_in_Class(uML_TemplateParameterSubstitution);
	uML_TemplateParameterSubstitution_ownedActual = factory->createProperty_in_Class(uML_TemplateParameterSubstitution);
	uML_TemplateParameterSubstitution_templateBinding = factory->createProperty_in_Class(uML_TemplateParameterSubstitution);

    //-------------------------------------------
	// TemplateSignature
	uML_TemplateSignature = factory->createClass_in_Package(uML, uml::UmlPackage::TEMPLATESIGNATURE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TemplateSignature);
	con->setName("own_elements");
	con->getConstrainedElement()->push_back(uML_TemplateSignature);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TemplateSignature));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_TemplateSignature);
	
	con->setName("unique_parameters");
	
	con->getConstrainedElement()->push_back(uML_TemplateSignature);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TemplateSignature));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies"\
	
	"   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)")));
	
	con->setSpecification(oe);
	
    // TemplateSignature attributes
	uML_TemplateSignature_ownedParameter = factory->createProperty_in_Class(uML_TemplateSignature);
	uML_TemplateSignature_parameter = factory->createProperty_in_Class(uML_TemplateSignature);
	uML_TemplateSignature_template = factory->createProperty_in_Class(uML_TemplateSignature);

    //-------------------------------------------
	// TemplateableElement
	uML_TemplateableElement = factory->createClass_in_Package(uML, uml::UmlPackage::TEMPLATEABLEELEMENT_CLASS);
	
    // TemplateableElement attributes
	uML_TemplateableElement_ownedTemplateSignature = factory->createProperty_in_Class(uML_TemplateableElement);
	uML_TemplateableElement_templateBinding = factory->createProperty_in_Class(uML_TemplateableElement);
    // TemplateableElement operations
	uML_TemplateableElement_isTemplate__ = factory->createOperation_in_Class(uML_TemplateableElement);
	uML_TemplateableElement_isTemplate_result = factory->createParameter_in_Operation(uML_TemplateableElement_isTemplate__);

	uML_TemplateableElement_parameterableElements__ = factory->createOperation_in_Class(uML_TemplateableElement);
	uML_TemplateableElement_parameterableElements_result = factory->createParameter_in_Operation(uML_TemplateableElement_parameterableElements__);

    //-------------------------------------------
	// TestIdentityAction
	uML_TestIdentityAction = factory->createClass_in_Package(uML, uml::UmlPackage::TESTIDENTITYACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TestIdentityAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_TestIdentityAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TestIdentityAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("first.is(1,1) and second.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_TestIdentityAction);
	
	con->setName("no_type");
	
	con->getConstrainedElement()->push_back(uML_TestIdentityAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TestIdentityAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("first.type= null and second.type = null")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_TestIdentityAction);
	
	con->setName("result_is_boolean");
	
	con->getConstrainedElement()->push_back(uML_TestIdentityAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TestIdentityAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.type=Boolean")));
	
	con->setSpecification(oe);
	
    // TestIdentityAction attributes
	uML_TestIdentityAction_first = factory->createProperty_in_Class(uML_TestIdentityAction);
	uML_TestIdentityAction_result = factory->createProperty_in_Class(uML_TestIdentityAction);
	uML_TestIdentityAction_second = factory->createProperty_in_Class(uML_TestIdentityAction);

    //-------------------------------------------
	// TimeConstraint
	uML_TimeConstraint = factory->createClass_in_Package(uML, uml::UmlPackage::TIMECONSTRAINT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TimeConstraint);
	con->setName("has_one_constrainedElement");
	con->getConstrainedElement()->push_back(uML_TimeConstraint);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TimeConstraint));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("constrainedElement->size() = 1")));
	con->setSpecification(oe);
	
    // TimeConstraint attributes
	uML_TimeConstraint_firstEvent = factory->createProperty_in_Class(uML_TimeConstraint);
	uML_TimeConstraint_specification = factory->createProperty_in_Class(uML_TimeConstraint);

    //-------------------------------------------
	// TimeEvent
	uML_TimeEvent = factory->createClass_in_Package(uML, uml::UmlPackage::TIMEEVENT_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TimeEvent);
	con->setName("when_non_negative");
	con->getConstrainedElement()->push_back(uML_TimeEvent);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TimeEvent));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("when.integerValue() >= 0")));
	con->setSpecification(oe);
	
    // TimeEvent attributes
	uML_TimeEvent_isRelative = factory->createProperty_in_Class(uML_TimeEvent);
	uML_TimeEvent_when = factory->createProperty_in_Class(uML_TimeEvent);

    //-------------------------------------------
	// TimeExpression
	uML_TimeExpression = factory->createClass_in_Package(uML, uml::UmlPackage::TIMEEXPRESSION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_TimeExpression);
	con->setName("no_expr_requires_observation");
	con->getConstrainedElement()->push_back(uML_TimeExpression);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_TimeExpression));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))")));
	con->setSpecification(oe);
	
    // TimeExpression attributes
	uML_TimeExpression_expr = factory->createProperty_in_Class(uML_TimeExpression);
	uML_TimeExpression_observation = factory->createProperty_in_Class(uML_TimeExpression);
    // TimeExpression operations
	uML_TimeExpression_stringValue__ = factory->createOperation_in_Class(uML_TimeExpression);
	uML_TimeExpression_stringValue__return = factory->createParameter_in_Operation(uML_TimeExpression_stringValue__);

    //-------------------------------------------
	// TimeInterval
	uML_TimeInterval = factory->createClass_in_Package(uML, uml::UmlPackage::TIMEINTERVAL_CLASS);
	
    // TimeInterval attributes
	uML_TimeInterval_max = factory->createProperty_in_Class(uML_TimeInterval);
	uML_TimeInterval_min = factory->createProperty_in_Class(uML_TimeInterval);

    //-------------------------------------------
	// TimeObservation
	uML_TimeObservation = factory->createClass_in_Package(uML, uml::UmlPackage::TIMEOBSERVATION_CLASS);
	
    // TimeObservation attributes
	uML_TimeObservation_event = factory->createProperty_in_Class(uML_TimeObservation);
	uML_TimeObservation_firstEvent = factory->createProperty_in_Class(uML_TimeObservation);

    //-------------------------------------------
	// Transition
	uML_Transition = factory->createClass_in_Package(uML, uml::UmlPackage::TRANSITION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Transition);
	con->setName("fork_segment_guards");
	con->getConstrainedElement()->push_back(uML_Transition);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("fork_segment_state");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("initial_transition");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) implies	trigger->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("join_segment_guards");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("join_segment_state");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("outgoing_pseudostates");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("state_is_external");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = TransitionKind::external) implies"\
	
	"	not (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("state_is_internal");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = TransitionKind::internal) implies"\
	
	"		(source.oclIsKindOf (State) and source = target)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_Transition);
	
	con->setName("state_is_local");
	
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Transition));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("(kind = TransitionKind::local) implies"\
	
	"		((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or"\
	
	"		(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))")));
	
	con->setSpecification(oe);
	
    // Transition attributes
	uML_Transition_container = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_effect = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_guard = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_kind = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_redefinedTransition = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_redefinitionContext = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_source = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_target = factory->createProperty_in_Class(uML_Transition);
	uML_Transition_trigger = factory->createProperty_in_Class(uML_Transition);
    // Transition operations
	uML_Transition_containingStateMachine__ = factory->createOperation_in_Class(uML_Transition);
	uML_Transition_containingStateMachine_result = factory->createParameter_in_Operation(uML_Transition_containingStateMachine__);

	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement = factory->createOperation_in_Class(uML_Transition);
	uML_Transition_isConsistentWith_result = factory->createParameter_in_Operation(uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement);uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement = factory->createParameter_in_Operation(uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement);

	uML_Transition_redefinitionContext__ = factory->createOperation_in_Class(uML_Transition);
	uML_Transition_redefinitionContext_result = factory->createParameter_in_Operation(uML_Transition_redefinitionContext__);

    //-------------------------------------------
	// Trigger
	uML_Trigger = factory->createClass_in_Package(uML, uml::UmlPackage::TRIGGER_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_Trigger);
	con->setName("trigger_with_ports");
	con->getConstrainedElement()->push_back(uML_Trigger);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_Trigger));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("port->notEmpty() implies event.oclIsKindOf(MessageEvent)")));
	con->setSpecification(oe);
	
    // Trigger attributes
	uML_Trigger_event = factory->createProperty_in_Class(uML_Trigger);
	uML_Trigger_port = factory->createProperty_in_Class(uML_Trigger);

    //-------------------------------------------
	// Type
	uML_Type = factory->createClass_in_Package(uML, uml::UmlPackage::TYPE_CLASS);
	
    // Type attributes
	uML_Type_package = factory->createProperty_in_Class(uML_Type);
    // Type operations
	uML_Type_conformsTo_Type_Type = factory->createOperation_in_Class(uML_Type);
	uML_Type_conformsTo_result = factory->createParameter_in_Operation(uML_Type_conformsTo_Type_Type);uML_Type_conformsTo_Type_Type_other = factory->createParameter_in_Operation(uML_Type_conformsTo_Type_Type);

	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural = factory->createOperation_in_Class(uML_Type);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper = factory->createParameter_in_Operation(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural);

	uML_Type_getAssociations__ = factory->createOperation_in_Class(uML_Type);
	uML_Type_getAssociations__return = factory->createParameter_in_Operation(uML_Type_getAssociations__);

    //-------------------------------------------
	// TypedElement
	uML_TypedElement = factory->createClass_in_Package(uML, uml::UmlPackage::TYPEDELEMENT_CLASS);
	
    // TypedElement attributes
	uML_TypedElement_type = factory->createProperty_in_Class(uML_TypedElement);

    //-------------------------------------------
	// UnmarshallAction
	uML_UnmarshallAction = factory->createClass_in_Package(uML, uml::UmlPackage::UNMARSHALLACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_UnmarshallAction);
	con->setName("multiplicity_of_object");
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UnmarshallAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UnmarshallAction);
	
	con->setName("number_of_result");
	
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UnmarshallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("unmarshallType.allAttributes()->size() = result->size()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UnmarshallAction);
	
	con->setName("object_type");
	
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UnmarshallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("object.type.conformsTo(unmarshallType)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UnmarshallAction);
	
	con->setName("structural_feature");
	
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UnmarshallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("unmarshallType.allAttributes()->size() >= 1")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UnmarshallAction);
	
	con->setName("type_ordering_and_multiplicity");
	
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UnmarshallAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in"\
	
	"Sequence{1..result->size()}->forAll(i | "\
	
	"	attribute->at(i).type.conformsTo(result->at(i).type) and"\
	
	"	attribute->at(i).isOrdered=result->at(i).isOrdered and"\
	
	"	attribute->at(i).compatibleWith(result->at(i)))")));
	
	con->setSpecification(oe);
	
    // UnmarshallAction attributes
	uML_UnmarshallAction_object = factory->createProperty_in_Class(uML_UnmarshallAction);
	uML_UnmarshallAction_result = factory->createProperty_in_Class(uML_UnmarshallAction);
	uML_UnmarshallAction_unmarshallType = factory->createProperty_in_Class(uML_UnmarshallAction);

    //-------------------------------------------
	// Usage
	uML_Usage = factory->createClass_in_Package(uML, uml::UmlPackage::USAGE_CLASS);
	

    //-------------------------------------------
	// UseCase
	uML_UseCase = factory->createClass_in_Package(uML, uml::UmlPackage::USECASE_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_UseCase);
	con->setName("binary_associations");
	con->getConstrainedElement()->push_back(uML_UseCase);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UseCase));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UseCase);
	
	con->setName("cannot_include_self");
	
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UseCase));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("not allIncludedUseCases()->includes(self)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UseCase);
	
	con->setName("must_have_name");
	
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UseCase));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("name -> notEmpty ()")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_UseCase);
	
	con->setName("no_association_to_use_case");
	
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_UseCase));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies "\
	
	"   ("\
	
	"   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in"\
	
	"   usecases->size() > 1 implies usecases->collect(subject)->size() > 1"\
	
	"   )"\
	
	")")));
	
	con->setSpecification(oe);
	
    // UseCase attributes
	uML_UseCase_extend = factory->createProperty_in_Class(uML_UseCase);
	uML_UseCase_extensionPoint = factory->createProperty_in_Class(uML_UseCase);
	uML_UseCase_include = factory->createProperty_in_Class(uML_UseCase);
	uML_UseCase_subject = factory->createProperty_in_Class(uML_UseCase);
    // UseCase operations
	uML_UseCase_allIncludedUseCases__ = factory->createOperation_in_Class(uML_UseCase);
	uML_UseCase_allIncludedUseCases_result = factory->createParameter_in_Operation(uML_UseCase_allIncludedUseCases__);

    //-------------------------------------------
	// ValuePin
	uML_ValuePin = factory->createClass_in_Package(uML, uml::UmlPackage::VALUEPIN_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ValuePin);
	con->setName("compatible_type");
	con->getConstrainedElement()->push_back(uML_ValuePin);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ValuePin));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value.type.conformsTo(type)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ValuePin);
	
	con->setName("no_incoming_edges");
	
	con->getConstrainedElement()->push_back(uML_ValuePin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ValuePin));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("incoming->isEmpty()")));
	
	con->setSpecification(oe);
	
    // ValuePin attributes
	uML_ValuePin_value = factory->createProperty_in_Class(uML_ValuePin);

    //-------------------------------------------
	// ValueSpecification
	uML_ValueSpecification = factory->createClass_in_Package(uML, uml::UmlPackage::VALUESPECIFICATION_CLASS);
	
    // ValueSpecification operations
	uML_ValueSpecification_booleanValue__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_booleanValue_result = factory->createParameter_in_Operation(uML_ValueSpecification_booleanValue__);

	uML_ValueSpecification_integerValue__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_integerValue_result = factory->createParameter_in_Operation(uML_ValueSpecification_integerValue__);

	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_isCompatibleWith_result = factory->createParameter_in_Operation(uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement);uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p = factory->createParameter_in_Operation(uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement);

	uML_ValueSpecification_isComputable__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_isComputable_result = factory->createParameter_in_Operation(uML_ValueSpecification_isComputable__);

	uML_ValueSpecification_isNull__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_isNull_result = factory->createParameter_in_Operation(uML_ValueSpecification_isNull__);

	uML_ValueSpecification_realValue__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_realValue_result = factory->createParameter_in_Operation(uML_ValueSpecification_realValue__);

	uML_ValueSpecification_stringValue__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_stringValue_result = factory->createParameter_in_Operation(uML_ValueSpecification_stringValue__);

	uML_ValueSpecification_unlimitedValue__ = factory->createOperation_in_Class(uML_ValueSpecification);
	uML_ValueSpecification_unlimitedValue_result = factory->createParameter_in_Operation(uML_ValueSpecification_unlimitedValue__);

    //-------------------------------------------
	// ValueSpecificationAction
	uML_ValueSpecificationAction = factory->createClass_in_Package(uML, uml::UmlPackage::VALUESPECIFICATIONACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_ValueSpecificationAction);
	con->setName("compatible_type");
	con->getConstrainedElement()->push_back(uML_ValueSpecificationAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ValueSpecificationAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value.type.conformsTo(result.type)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_ValueSpecificationAction);
	
	con->setName("multiplicity");
	
	con->getConstrainedElement()->push_back(uML_ValueSpecificationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_ValueSpecificationAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result.is(1,1)")));
	
	con->setSpecification(oe);
	
    // ValueSpecificationAction attributes
	uML_ValueSpecificationAction_result = factory->createProperty_in_Class(uML_ValueSpecificationAction);
	uML_ValueSpecificationAction_value = factory->createProperty_in_Class(uML_ValueSpecificationAction);

    //-------------------------------------------
	// Variable
	uML_Variable = factory->createClass_in_Package(uML, uml::UmlPackage::VARIABLE_CLASS);
	
    // Variable attributes
	uML_Variable_activityScope = factory->createProperty_in_Class(uML_Variable);
	uML_Variable_scope = factory->createProperty_in_Class(uML_Variable);
    // Variable operations
	uML_Variable_isAccessibleBy_Action_Action = factory->createOperation_in_Class(uML_Variable);
	uML_Variable_isAccessibleBy_result = factory->createParameter_in_Operation(uML_Variable_isAccessibleBy_Action_Action);uML_Variable_isAccessibleBy_Action_Action_a = factory->createParameter_in_Operation(uML_Variable_isAccessibleBy_Action_Action);

    //-------------------------------------------
	// VariableAction
	uML_VariableAction = factory->createClass_in_Package(uML, uml::UmlPackage::VARIABLEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_VariableAction);
	con->setName("scope_of_variable");
	con->getConstrainedElement()->push_back(uML_VariableAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_VariableAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("variable.isAccessibleBy(self)")));
	con->setSpecification(oe);
	
    // VariableAction attributes
	uML_VariableAction_variable = factory->createProperty_in_Class(uML_VariableAction);

    //-------------------------------------------
	// Vertex
	uML_Vertex = factory->createClass_in_Package(uML, uml::UmlPackage::VERTEX_CLASS);
	
    // Vertex attributes
	uML_Vertex_container = factory->createProperty_in_Class(uML_Vertex);
	uML_Vertex_incoming = factory->createProperty_in_Class(uML_Vertex);
	uML_Vertex_outgoing = factory->createProperty_in_Class(uML_Vertex);
    // Vertex operations
	uML_Vertex_containingStateMachine__ = factory->createOperation_in_Class(uML_Vertex);
	uML_Vertex_containingStateMachine_result = factory->createParameter_in_Operation(uML_Vertex_containingStateMachine__);

	uML_Vertex_incoming__ = factory->createOperation_in_Class(uML_Vertex);
	uML_Vertex_incoming_result = factory->createParameter_in_Operation(uML_Vertex_incoming__);

	uML_Vertex_isContainedInRegion_Region_Region = factory->createOperation_in_Class(uML_Vertex);
	uML_Vertex_isContainedInRegion_result = factory->createParameter_in_Operation(uML_Vertex_isContainedInRegion_Region_Region);uML_Vertex_isContainedInRegion_Region_Region_r = factory->createParameter_in_Operation(uML_Vertex_isContainedInRegion_Region_Region);

	uML_Vertex_isContainedInState_State_State = factory->createOperation_in_Class(uML_Vertex);
	uML_Vertex_isContainedInState_result = factory->createParameter_in_Operation(uML_Vertex_isContainedInState_State_State);uML_Vertex_isContainedInState_State_State_s = factory->createParameter_in_Operation(uML_Vertex_isContainedInState_State_State);

	uML_Vertex_outgoing__ = factory->createOperation_in_Class(uML_Vertex);
	uML_Vertex_outgoing_result = factory->createParameter_in_Operation(uML_Vertex_outgoing__);

    //-------------------------------------------
	// WriteLinkAction
	uML_WriteLinkAction = factory->createClass_in_Package(uML, uml::UmlPackage::WRITELINKACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_WriteLinkAction);
	con->setName("allow_access");
	con->getConstrainedElement()->push_back(uML_WriteLinkAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteLinkAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("endData.end->exists(end |"\
	"  end.type=_'context' or"\
	"  end.visibility=VisibilityKind::public or "\
	"  end.visibility=VisibilityKind::protected and"\
	"  endData.end->exists(other | "\
	"    other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))")));
	con->setSpecification(oe);
	

    //-------------------------------------------
	// WriteStructuralFeatureAction
	uML_WriteStructuralFeatureAction = factory->createClass_in_Package(uML, uml::UmlPackage::WRITESTRUCTURALFEATUREACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_WriteStructuralFeatureAction);
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result <> null implies result.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_WriteStructuralFeatureAction);
	
	con->setName("multiplicity_of_value");
	
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value<>null implies value.is(1,1)")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_WriteStructuralFeatureAction);
	
	con->setName("type_of_result");
	
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("result <> null implies result.type = object.type")));
	
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_WriteStructuralFeatureAction);
	
	con->setName("type_of_value");
	
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value <> null implies value.type.conformsTo(structuralFeature.type)")));
	
	con->setSpecification(oe);
	
    // WriteStructuralFeatureAction attributes
	uML_WriteStructuralFeatureAction_result = factory->createProperty_in_Class(uML_WriteStructuralFeatureAction);
	uML_WriteStructuralFeatureAction_value = factory->createProperty_in_Class(uML_WriteStructuralFeatureAction);

    //-------------------------------------------
	// WriteVariableAction
	uML_WriteVariableAction = factory->createClass_in_Package(uML, uml::UmlPackage::WRITEVARIABLEACTION_CLASS);
	//constraints
	con = factory->createConstraint_in_Context(uML_WriteVariableAction);
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_WriteVariableAction);
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteVariableAction));
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value<>null implies value.is(1,1)")));
	con->setSpecification(oe);
	
	con = factory->createConstraint_in_Context(uML_WriteVariableAction);
	
	con->setName("value_type");
	
	con->getConstrainedElement()->push_back(uML_WriteVariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner(uML_WriteVariableAction));
	
	oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("OCL")));
	
	oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("value <> null implies value.type.conformsTo(variable.type)")));
	
	con->setSpecification(oe);
	
    // WriteVariableAction attributes
	uML_WriteVariableAction_value = factory->createProperty_in_Class(uML_WriteVariableAction);
} 

void UMLPackageImpl::createPackageDependencies(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}

void UMLPackageImpl::createPackageEnumerationLiterals(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
	uML_AggregationKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_AggregationKind->setName("AggregationKind");
	
	uML_AggregationKind_composite = factory->createEnumerationLiteral_in_Enumeration(uML_AggregationKind);
	uML_AggregationKind_composite->setName("composite");
	uML_AggregationKind_composite->getClassifier()->push_back(uML_AggregationKind);
	uML_AggregationKind_none = factory->createEnumerationLiteral_in_Enumeration(uML_AggregationKind);
	uML_AggregationKind_none->setName("none");
	uML_AggregationKind_none->getClassifier()->push_back(uML_AggregationKind);
	uML_AggregationKind_shared = factory->createEnumerationLiteral_in_Enumeration(uML_AggregationKind);
	uML_AggregationKind_shared->setName("shared");
	uML_AggregationKind_shared->getClassifier()->push_back(uML_AggregationKind);
	uML_CallConcurrencyKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_CallConcurrencyKind->setName("CallConcurrencyKind");
	
	uML_CallConcurrencyKind_concurrent = factory->createEnumerationLiteral_in_Enumeration(uML_CallConcurrencyKind);
	uML_CallConcurrencyKind_concurrent->setName("concurrent");
	uML_CallConcurrencyKind_concurrent->getClassifier()->push_back(uML_CallConcurrencyKind);
	uML_CallConcurrencyKind_guarded = factory->createEnumerationLiteral_in_Enumeration(uML_CallConcurrencyKind);
	uML_CallConcurrencyKind_guarded->setName("guarded");
	uML_CallConcurrencyKind_guarded->getClassifier()->push_back(uML_CallConcurrencyKind);
	uML_CallConcurrencyKind_sequential = factory->createEnumerationLiteral_in_Enumeration(uML_CallConcurrencyKind);
	uML_CallConcurrencyKind_sequential->setName("sequential");
	uML_CallConcurrencyKind_sequential->getClassifier()->push_back(uML_CallConcurrencyKind);
	uML_ConnectorKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_ConnectorKind->setName("ConnectorKind");
	
	uML_ConnectorKind_assembly = factory->createEnumerationLiteral_in_Enumeration(uML_ConnectorKind);
	uML_ConnectorKind_assembly->setName("assembly");
	uML_ConnectorKind_assembly->getClassifier()->push_back(uML_ConnectorKind);
	uML_ConnectorKind_delegation = factory->createEnumerationLiteral_in_Enumeration(uML_ConnectorKind);
	uML_ConnectorKind_delegation->setName("delegation");
	uML_ConnectorKind_delegation->getClassifier()->push_back(uML_ConnectorKind);
	uML_ExpansionKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_ExpansionKind->setName("ExpansionKind");
	
	uML_ExpansionKind_iterative = factory->createEnumerationLiteral_in_Enumeration(uML_ExpansionKind);
	uML_ExpansionKind_iterative->setName("iterative");
	uML_ExpansionKind_iterative->getClassifier()->push_back(uML_ExpansionKind);
	uML_ExpansionKind_parallel = factory->createEnumerationLiteral_in_Enumeration(uML_ExpansionKind);
	uML_ExpansionKind_parallel->setName("parallel");
	uML_ExpansionKind_parallel->getClassifier()->push_back(uML_ExpansionKind);
	uML_ExpansionKind_stream = factory->createEnumerationLiteral_in_Enumeration(uML_ExpansionKind);
	uML_ExpansionKind_stream->setName("stream");
	uML_ExpansionKind_stream->getClassifier()->push_back(uML_ExpansionKind);
	uML_InteractionOperatorKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_InteractionOperatorKind->setName("InteractionOperatorKind");
	
	uML_InteractionOperatorKind_alt = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_alt->setName("alt");
	uML_InteractionOperatorKind_alt->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_assert = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_assert->setName("assert");
	uML_InteractionOperatorKind_assert->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_break = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_break->setName("break");
	uML_InteractionOperatorKind_break->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_consider = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_consider->setName("consider");
	uML_InteractionOperatorKind_consider->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_critical = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_critical->setName("critical");
	uML_InteractionOperatorKind_critical->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_ignore = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_ignore->setName("ignore");
	uML_InteractionOperatorKind_ignore->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_loop = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_loop->setName("loop");
	uML_InteractionOperatorKind_loop->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_neg = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_neg->setName("neg");
	uML_InteractionOperatorKind_neg->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_opt = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_opt->setName("opt");
	uML_InteractionOperatorKind_opt->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_par = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_par->setName("par");
	uML_InteractionOperatorKind_par->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_seq = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_seq->setName("seq");
	uML_InteractionOperatorKind_seq->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_strict = factory->createEnumerationLiteral_in_Enumeration(uML_InteractionOperatorKind);
	uML_InteractionOperatorKind_strict->setName("strict");
	uML_InteractionOperatorKind_strict->getClassifier()->push_back(uML_InteractionOperatorKind);
	uML_MessageKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_MessageKind->setName("MessageKind");
	
	uML_MessageKind_complete = factory->createEnumerationLiteral_in_Enumeration(uML_MessageKind);
	uML_MessageKind_complete->setName("complete");
	uML_MessageKind_complete->getClassifier()->push_back(uML_MessageKind);
	uML_MessageKind_found = factory->createEnumerationLiteral_in_Enumeration(uML_MessageKind);
	uML_MessageKind_found->setName("found");
	uML_MessageKind_found->getClassifier()->push_back(uML_MessageKind);
	uML_MessageKind_lost = factory->createEnumerationLiteral_in_Enumeration(uML_MessageKind);
	uML_MessageKind_lost->setName("lost");
	uML_MessageKind_lost->getClassifier()->push_back(uML_MessageKind);
	uML_MessageKind_unknown = factory->createEnumerationLiteral_in_Enumeration(uML_MessageKind);
	uML_MessageKind_unknown->setName("unknown");
	uML_MessageKind_unknown->getClassifier()->push_back(uML_MessageKind);
	uML_MessageSort = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_MessageSort->setName("MessageSort");
	
	uML_MessageSort_asynchCall = factory->createEnumerationLiteral_in_Enumeration(uML_MessageSort);
	uML_MessageSort_asynchCall->setName("asynchCall");
	uML_MessageSort_asynchCall->getClassifier()->push_back(uML_MessageSort);
	uML_MessageSort_asynchSignal = factory->createEnumerationLiteral_in_Enumeration(uML_MessageSort);
	uML_MessageSort_asynchSignal->setName("asynchSignal");
	uML_MessageSort_asynchSignal->getClassifier()->push_back(uML_MessageSort);
	uML_MessageSort_createMessage = factory->createEnumerationLiteral_in_Enumeration(uML_MessageSort);
	uML_MessageSort_createMessage->setName("createMessage");
	uML_MessageSort_createMessage->getClassifier()->push_back(uML_MessageSort);
	uML_MessageSort_deleteMessage = factory->createEnumerationLiteral_in_Enumeration(uML_MessageSort);
	uML_MessageSort_deleteMessage->setName("deleteMessage");
	uML_MessageSort_deleteMessage->getClassifier()->push_back(uML_MessageSort);
	uML_MessageSort_reply = factory->createEnumerationLiteral_in_Enumeration(uML_MessageSort);
	uML_MessageSort_reply->setName("reply");
	uML_MessageSort_reply->getClassifier()->push_back(uML_MessageSort);
	uML_MessageSort_synchCall = factory->createEnumerationLiteral_in_Enumeration(uML_MessageSort);
	uML_MessageSort_synchCall->setName("synchCall");
	uML_MessageSort_synchCall->getClassifier()->push_back(uML_MessageSort);
	uML_ObjectNodeOrderingKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_ObjectNodeOrderingKind->setName("ObjectNodeOrderingKind");
	
	uML_ObjectNodeOrderingKind_FIFO = factory->createEnumerationLiteral_in_Enumeration(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_FIFO->setName("FIFO");
	uML_ObjectNodeOrderingKind_FIFO->getClassifier()->push_back(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_LIFO = factory->createEnumerationLiteral_in_Enumeration(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_LIFO->setName("LIFO");
	uML_ObjectNodeOrderingKind_LIFO->getClassifier()->push_back(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_ordered = factory->createEnumerationLiteral_in_Enumeration(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_ordered->setName("ordered");
	uML_ObjectNodeOrderingKind_ordered->getClassifier()->push_back(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_unordered = factory->createEnumerationLiteral_in_Enumeration(uML_ObjectNodeOrderingKind);
	uML_ObjectNodeOrderingKind_unordered->setName("unordered");
	uML_ObjectNodeOrderingKind_unordered->getClassifier()->push_back(uML_ObjectNodeOrderingKind);
	uML_ParameterDirectionKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_ParameterDirectionKind->setName("ParameterDirectionKind");
	
	uML_ParameterDirectionKind_in = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_in->setName("in");
	uML_ParameterDirectionKind_in->getClassifier()->push_back(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_inout = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_inout->setName("inout");
	uML_ParameterDirectionKind_inout->getClassifier()->push_back(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_out = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_out->setName("out");
	uML_ParameterDirectionKind_out->getClassifier()->push_back(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_return = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterDirectionKind);
	uML_ParameterDirectionKind_return->setName("return");
	uML_ParameterDirectionKind_return->getClassifier()->push_back(uML_ParameterDirectionKind);
	uML_ParameterEffectKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_ParameterEffectKind->setName("ParameterEffectKind");
	
	uML_ParameterEffectKind_create = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterEffectKind);
	uML_ParameterEffectKind_create->setName("create");
	uML_ParameterEffectKind_create->getClassifier()->push_back(uML_ParameterEffectKind);
	uML_ParameterEffectKind_delete = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterEffectKind);
	uML_ParameterEffectKind_delete->setName("delete");
	uML_ParameterEffectKind_delete->getClassifier()->push_back(uML_ParameterEffectKind);
	uML_ParameterEffectKind_read = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterEffectKind);
	uML_ParameterEffectKind_read->setName("read");
	uML_ParameterEffectKind_read->getClassifier()->push_back(uML_ParameterEffectKind);
	uML_ParameterEffectKind_update = factory->createEnumerationLiteral_in_Enumeration(uML_ParameterEffectKind);
	uML_ParameterEffectKind_update->setName("update");
	uML_ParameterEffectKind_update->getClassifier()->push_back(uML_ParameterEffectKind);
	uML_PseudostateKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_PseudostateKind->setName("PseudostateKind");
	
	uML_PseudostateKind_choice = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_choice->setName("choice");
	uML_PseudostateKind_choice->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_deepHistory = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_deepHistory->setName("deepHistory");
	uML_PseudostateKind_deepHistory->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_entryPoint = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_entryPoint->setName("entryPoint");
	uML_PseudostateKind_entryPoint->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_exitPoint = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_exitPoint->setName("exitPoint");
	uML_PseudostateKind_exitPoint->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_fork = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_fork->setName("fork");
	uML_PseudostateKind_fork->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_initial = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_initial->setName("initial");
	uML_PseudostateKind_initial->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_join = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_join->setName("join");
	uML_PseudostateKind_join->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_junction = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_junction->setName("junction");
	uML_PseudostateKind_junction->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_shallowHistory = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_shallowHistory->setName("shallowHistory");
	uML_PseudostateKind_shallowHistory->getClassifier()->push_back(uML_PseudostateKind);
	uML_PseudostateKind_terminate = factory->createEnumerationLiteral_in_Enumeration(uML_PseudostateKind);
	uML_PseudostateKind_terminate->setName("terminate");
	uML_PseudostateKind_terminate->getClassifier()->push_back(uML_PseudostateKind);
	uML_TransitionKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_TransitionKind->setName("TransitionKind");
	
	uML_TransitionKind_external = factory->createEnumerationLiteral_in_Enumeration(uML_TransitionKind);
	uML_TransitionKind_external->setName("external");
	uML_TransitionKind_external->getClassifier()->push_back(uML_TransitionKind);
	uML_TransitionKind_internal = factory->createEnumerationLiteral_in_Enumeration(uML_TransitionKind);
	uML_TransitionKind_internal->setName("internal");
	uML_TransitionKind_internal->getClassifier()->push_back(uML_TransitionKind);
	uML_TransitionKind_local = factory->createEnumerationLiteral_in_Enumeration(uML_TransitionKind);
	uML_TransitionKind_local->setName("local");
	uML_TransitionKind_local->getClassifier()->push_back(uML_TransitionKind);
	uML_VisibilityKind = factory->createEnumeration_in_Namespace(uML); // TODO Package, Owner
	uML_VisibilityKind->setName("VisibilityKind");
	
	uML_VisibilityKind_package = factory->createEnumerationLiteral_in_Enumeration(uML_VisibilityKind);
	uML_VisibilityKind_package->setName("package");
	uML_VisibilityKind_package->getClassifier()->push_back(uML_VisibilityKind);
	uML_VisibilityKind_private = factory->createEnumerationLiteral_in_Enumeration(uML_VisibilityKind);
	uML_VisibilityKind_private->setName("private");
	uML_VisibilityKind_private->getClassifier()->push_back(uML_VisibilityKind);
	uML_VisibilityKind_protected = factory->createEnumerationLiteral_in_Enumeration(uML_VisibilityKind);
	uML_VisibilityKind_protected->setName("protected");
	uML_VisibilityKind_protected->getClassifier()->push_back(uML_VisibilityKind);
	uML_VisibilityKind_public = factory->createEnumerationLiteral_in_Enumeration(uML_VisibilityKind);
	uML_VisibilityKind_public->setName("public");
	uML_VisibilityKind_public->getClassifier()->push_back(uML_VisibilityKind);
	
}

void UMLPackageImpl::createPackageInstanceSpecifications(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}

void UMLPackageImpl::createPackageInterfaceRealizations(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}

void UMLPackageImpl::createPackageInterfaces(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}

void UMLPackageImpl::createPackagePrimitiveTypes(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}

void UMLPackageImpl::createPackageStereotypes(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
}

void UMLPackageImpl::createPackageValueSpecifications(std::shared_ptr<uml::Package> uML, std::shared_ptr<uml::UmlFactory> factory)
{
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_lowerValue_LiteralInteger_UML_A_action_actionExecutionSpecification_actionExecutionSpecification = factory->createLiteralInteger_in_Owner(uML_A_action_actionExecutionSpecification_actionExecutionSpecification);
	
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_action_actionExecutionSpecification_actionExecutionSpecification = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_action_actionExecutionSpecification_actionExecutionSpecification);
	
	uML_A_action_interaction_interaction_lowerValue_LiteralInteger_UML_A_action_interaction_interaction = factory->createLiteralInteger_in_Owner(uML_A_action_interaction_interaction);
	
	uML_A_actualGate_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_actualGate_interactionUse_interactionUse = factory->createLiteralInteger_in_Owner(uML_A_actualGate_interactionUse_interactionUse);
	
	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution = factory->createLiteralInteger_in_Owner(uML_A_actual_templateParameterSubstitution_templateParameterSubstitution);
	
	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_actual_templateParameterSubstitution_templateParameterSubstitution);
	
	uML_A_addition_include_include_lowerValue_LiteralInteger_UML_A_addition_include_include = factory->createLiteralInteger_in_Owner(uML_A_addition_include_include);
	
	uML_A_addition_include_include_upperValue_LiteralUnlimitedNatural_UML_A_addition_include_include = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_addition_include_include);
	
	uML_A_annotatedElement_comment_comment_lowerValue_LiteralInteger_UML_A_annotatedElement_comment_comment = factory->createLiteralInteger_in_Owner(uML_A_annotatedElement_comment_comment);
	
	uML_A_annotatedElement_comment_comment_upperValue_LiteralUnlimitedNatural_UML_A_annotatedElement_comment_comment = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_annotatedElement_comment_comment);
	
	uML_A_appliedProfile_profileApplication_profileApplication_lowerValue_LiteralInteger_UML_A_appliedProfile_profileApplication_profileApplication = factory->createLiteralInteger_in_Owner(uML_A_appliedProfile_profileApplication_profileApplication);
	
	uML_A_appliedProfile_profileApplication_profileApplication_upperValue_LiteralUnlimitedNatural_UML_A_appliedProfile_profileApplication_profileApplication = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_appliedProfile_profileApplication_profileApplication);
	
	uML_A_argument_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_argument_interactionUse_interactionUse = factory->createLiteralInteger_in_Owner(uML_A_argument_interactionUse_interactionUse);
	
	uML_A_argument_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_argument_invocationAction_invocationAction = factory->createLiteralInteger_in_Owner(uML_A_argument_invocationAction_invocationAction);
	
	uML_A_argument_message_message_lowerValue_LiteralInteger_UML_A_argument_message_message = factory->createLiteralInteger_in_Owner(uML_A_argument_message_message);
	
	uML_A_association_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_association_clearAssociationAction_clearAssociationAction = factory->createLiteralInteger_in_Owner(uML_A_association_clearAssociationAction_clearAssociationAction);
	
	uML_A_attribute_classifier_classifier_lowerValue_LiteralInteger_UML_A_attribute_classifier_classifier = factory->createLiteralInteger_in_Owner(uML_A_attribute_classifier_classifier);
	
	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_lowerValue_LiteralInteger_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification = factory->createLiteralInteger_in_Owner(uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification);
	
	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification);
	
	uML_A_behavior_callBehaviorAction_callBehaviorAction_lowerValue_LiteralInteger_UML_A_behavior_callBehaviorAction_callBehaviorAction = factory->createLiteralInteger_in_Owner(uML_A_behavior_callBehaviorAction_callBehaviorAction);
	
	uML_A_behavior_callBehaviorAction_callBehaviorAction_upperValue_LiteralUnlimitedNatural_UML_A_behavior_callBehaviorAction_callBehaviorAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_behavior_callBehaviorAction_callBehaviorAction);
	
	uML_A_behavior_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_behavior_opaqueExpression_opaqueExpression = factory->createLiteralInteger_in_Owner(uML_A_behavior_opaqueExpression_opaqueExpression);
	
	uML_A_behavior_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_behavior_opaqueExpression_opaqueExpression = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_behavior_opaqueExpression_opaqueExpression);
	
	uML_A_bodyCondition_bodyContext_bodyContext_lowerValue_LiteralInteger_UML_A_bodyCondition_bodyContext_bodyContext = factory->createLiteralInteger_in_Owner(uML_A_bodyCondition_bodyContext_bodyContext);
	
	uML_A_bodyOutput_clause_clause_lowerValue_LiteralInteger_UML_A_bodyOutput_clause_clause = factory->createLiteralInteger_in_Owner(uML_A_bodyOutput_clause_clause);
	
	uML_A_bodyOutput_clause_clause_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_clause_clause = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_bodyOutput_clause_clause);
	
	uML_A_bodyOutput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyOutput_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_bodyOutput_loopNode_loopNode);
	
	uML_A_bodyOutput_loopNode_loopNode_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_loopNode_loopNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_bodyOutput_loopNode_loopNode);
	
	uML_A_bodyPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyPart_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_bodyPart_loopNode_loopNode);
	
	uML_A_body_clause_clause_lowerValue_LiteralInteger_UML_A_body_clause_clause = factory->createLiteralInteger_in_Owner(uML_A_body_clause_clause);
	
	uML_A_cfragmentGate_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_cfragmentGate_combinedFragment_combinedFragment = factory->createLiteralInteger_in_Owner(uML_A_cfragmentGate_combinedFragment_combinedFragment);
	
	uML_A_changeExpression_changeEvent_changeEvent_lowerValue_LiteralInteger_UML_A_changeExpression_changeEvent_changeEvent = factory->createLiteralInteger_in_Owner(uML_A_changeExpression_changeEvent_changeEvent);
	
	uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_classifierBehavior_behavioredClassifier_behavioredClassifier = factory->createLiteralInteger_in_Owner(uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier);
	
	uML_A_classifier_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_classifier_createObjectAction_createObjectAction = factory->createLiteralInteger_in_Owner(uML_A_classifier_createObjectAction_createObjectAction);
	
	uML_A_classifier_createObjectAction_createObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_createObjectAction_createObjectAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_classifier_createObjectAction_createObjectAction);
	
	uML_A_classifier_enumerationLiteral_enumerationLiteral_lowerValue_LiteralInteger_UML_A_classifier_enumerationLiteral_enumerationLiteral = factory->createLiteralInteger_in_Owner(uML_A_classifier_enumerationLiteral_enumerationLiteral);
	
	uML_A_classifier_enumerationLiteral_enumerationLiteral_upperValue_LiteralUnlimitedNatural_UML_A_classifier_enumerationLiteral_enumerationLiteral = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_classifier_enumerationLiteral_enumerationLiteral);
	
	uML_A_classifier_instanceSpecification_instanceSpecification_lowerValue_LiteralInteger_UML_A_classifier_instanceSpecification_instanceSpecification = factory->createLiteralInteger_in_Owner(uML_A_classifier_instanceSpecification_instanceSpecification);
	
	uML_A_classifier_instanceSpecification_instanceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_classifier_instanceSpecification_instanceSpecification = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_classifier_instanceSpecification_instanceSpecification);
	
	uML_A_classifier_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_classifier_readExtentAction_readExtentAction = factory->createLiteralInteger_in_Owner(uML_A_classifier_readExtentAction_readExtentAction);
	
	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction = factory->createLiteralInteger_in_Owner(uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction);
	
	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction);
	
	uML_A_clientDependency_client_dependency_lowerValue_LiteralInteger_UML_A_clientDependency_client_dependency = factory->createLiteralInteger_in_Owner(uML_A_clientDependency_client_dependency);
	
	uML_A_clientDependency_client_dependency_upperValue_LiteralUnlimitedNatural_UML_A_clientDependency_client_dependency = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_clientDependency_client_dependency);
	
	uML_A_collaborationRole_collaboration_collaboration_lowerValue_LiteralInteger_UML_A_collaborationRole_collaboration_collaboration = factory->createLiteralInteger_in_Owner(uML_A_collaborationRole_collaboration_collaboration);
	
	uML_A_collaborationRole_collaboration_collaboration_upperValue_LiteralUnlimitedNatural_UML_A_collaborationRole_collaboration_collaboration = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_collaborationRole_collaboration_collaboration);
	
	uML_A_collaborationUse_classifier_classifier_lowerValue_LiteralInteger_UML_A_collaborationUse_classifier_classifier = factory->createLiteralInteger_in_Owner(uML_A_collaborationUse_classifier_classifier);
	
	uML_A_collection_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_collection_reduceAction_reduceAction = factory->createLiteralInteger_in_Owner(uML_A_collection_reduceAction_reduceAction);
	
	uML_A_condition_extend_extend_lowerValue_LiteralInteger_UML_A_condition_extend_extend = factory->createLiteralInteger_in_Owner(uML_A_condition_extend_extend);
	
	uML_A_condition_parameterSet_parameterSet_lowerValue_LiteralInteger_UML_A_condition_parameterSet_parameterSet = factory->createLiteralInteger_in_Owner(uML_A_condition_parameterSet_parameterSet);
	
	uML_A_connector_message_message_lowerValue_LiteralInteger_UML_A_connector_message_message = factory->createLiteralInteger_in_Owner(uML_A_connector_message_message);
	
	uML_A_connector_message_message_upperValue_LiteralUnlimitedNatural_UML_A_connector_message_message = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_connector_message_message);
	
	uML_A_constrainedElement_constraint_constraint_lowerValue_LiteralInteger_UML_A_constrainedElement_constraint_constraint = factory->createLiteralInteger_in_Owner(uML_A_constrainedElement_constraint_constraint);
	
	uML_A_constrainedElement_constraint_constraint_upperValue_LiteralUnlimitedNatural_UML_A_constrainedElement_constraint_constraint = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_constrainedElement_constraint_constraint);
	
	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_lowerValue_LiteralInteger_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter = factory->createLiteralInteger_in_Owner(uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter);
	
	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_upperValue_LiteralUnlimitedNatural_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter);
	
	uML_A_context_action_action_lowerValue_LiteralInteger_UML_A_context_action_action = factory->createLiteralInteger_in_Owner(uML_A_context_action_action);
	
	uML_A_context_action_action_upperValue_LiteralUnlimitedNatural_UML_A_context_action_action = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_context_action_action);
	
	uML_A_context_behavior_behavior_lowerValue_LiteralInteger_UML_A_context_behavior_behavior = factory->createLiteralInteger_in_Owner(uML_A_context_behavior_behavior);
	
	uML_A_context_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_context_behavior_behavior = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_context_behavior_behavior);
	
	uML_A_contract_connector_connector_lowerValue_LiteralInteger_UML_A_contract_connector_connector = factory->createLiteralInteger_in_Owner(uML_A_contract_connector_connector);
	
	uML_A_contract_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_contract_connector_connector = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_contract_connector_connector);
	
	uML_A_contract_interfaceRealization_interfaceRealization_lowerValue_LiteralInteger_UML_A_contract_interfaceRealization_interfaceRealization = factory->createLiteralInteger_in_Owner(uML_A_contract_interfaceRealization_interfaceRealization);
	
	uML_A_contract_interfaceRealization_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_A_contract_interfaceRealization_interfaceRealization = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_contract_interfaceRealization_interfaceRealization);
	
	uML_A_contract_substitution_substitution_lowerValue_LiteralInteger_UML_A_contract_substitution_substitution = factory->createLiteralInteger_in_Owner(uML_A_contract_substitution_substitution);
	
	uML_A_contract_substitution_substitution_upperValue_LiteralUnlimitedNatural_UML_A_contract_substitution_substitution = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_contract_substitution_substitution);
	
	uML_A_conveyed_conveyingFlow_conveyingFlow_lowerValue_LiteralInteger_UML_A_conveyed_conveyingFlow_conveyingFlow = factory->createLiteralInteger_in_Owner(uML_A_conveyed_conveyingFlow_conveyingFlow);
	
	uML_A_conveyed_conveyingFlow_conveyingFlow_upperValue_LiteralUnlimitedNatural_UML_A_conveyed_conveyingFlow_conveyingFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_conveyed_conveyingFlow_conveyingFlow);
	
	uML_A_covered_events_events_lowerValue_LiteralInteger_UML_A_covered_events_events = factory->createLiteralInteger_in_Owner(uML_A_covered_events_events);
	
	uML_A_covered_events_events_upperValue_LiteralUnlimitedNatural_UML_A_covered_events_events = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_covered_events_events);
	
	uML_A_covered_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_covered_stateInvariant_stateInvariant = factory->createLiteralInteger_in_Owner(uML_A_covered_stateInvariant_stateInvariant);
	
	uML_A_covered_stateInvariant_stateInvariant_upperValue_LiteralUnlimitedNatural_UML_A_covered_stateInvariant_stateInvariant = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_covered_stateInvariant_stateInvariant);
	
	uML_A_decider_clause_clause_lowerValue_LiteralInteger_UML_A_decider_clause_clause = factory->createLiteralInteger_in_Owner(uML_A_decider_clause_clause);
	
	uML_A_decider_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_decider_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_decider_loopNode_loopNode);
	
	uML_A_decisionInputFlow_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInputFlow_decisionNode_decisionNode = factory->createLiteralInteger_in_Owner(uML_A_decisionInputFlow_decisionNode_decisionNode);
	
	uML_A_decisionInput_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInput_decisionNode_decisionNode = factory->createLiteralInteger_in_Owner(uML_A_decisionInput_decisionNode_decisionNode);
	
	uML_A_decisionInput_decisionNode_decisionNode_upperValue_LiteralUnlimitedNatural_UML_A_decisionInput_decisionNode_decisionNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_decisionInput_decisionNode_decisionNode);
	
	uML_A_defaultValue_owningParameter_owningParameter_lowerValue_LiteralInteger_UML_A_defaultValue_owningParameter_owningParameter = factory->createLiteralInteger_in_Owner(uML_A_defaultValue_owningParameter_owningParameter);
	
	uML_A_defaultValue_owningProperty_owningProperty_lowerValue_LiteralInteger_UML_A_defaultValue_owningProperty_owningProperty = factory->createLiteralInteger_in_Owner(uML_A_defaultValue_owningProperty_owningProperty);
	
	uML_A_default_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_default_templateParameter_templateParameter = factory->createLiteralInteger_in_Owner(uML_A_default_templateParameter_templateParameter);
	
	uML_A_default_templateParameter_templateParameter_upperValue_LiteralUnlimitedNatural_UML_A_default_templateParameter_templateParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_default_templateParameter_templateParameter);
	
	uML_A_deferrableTrigger_state_state_lowerValue_LiteralInteger_UML_A_deferrableTrigger_state_state = factory->createLiteralInteger_in_Owner(uML_A_deferrableTrigger_state_state);
	
	uML_A_definingEnd_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_definingEnd_connectorEnd_connectorEnd = factory->createLiteralInteger_in_Owner(uML_A_definingEnd_connectorEnd_connectorEnd);
	
	uML_A_definingEnd_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_definingEnd_connectorEnd_connectorEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_definingEnd_connectorEnd_connectorEnd);
	
	uML_A_definingFeature_slot_slot_lowerValue_LiteralInteger_UML_A_definingFeature_slot_slot = factory->createLiteralInteger_in_Owner(uML_A_definingFeature_slot_slot);
	
	uML_A_definingFeature_slot_slot_upperValue_LiteralUnlimitedNatural_UML_A_definingFeature_slot_slot = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_definingFeature_slot_slot);
	
	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_lowerValue_LiteralInteger_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact = factory->createLiteralInteger_in_Owner(uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact);
	
	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_upperValue_LiteralUnlimitedNatural_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact);
	
	uML_A_deployedElement_deploymentTarget_deploymentTarget_lowerValue_LiteralInteger_UML_A_deployedElement_deploymentTarget_deploymentTarget = factory->createLiteralInteger_in_Owner(uML_A_deployedElement_deploymentTarget_deploymentTarget);
	
	uML_A_deployedElement_deploymentTarget_deploymentTarget_upperValue_LiteralUnlimitedNatural_UML_A_deployedElement_deploymentTarget_deploymentTarget = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_deployedElement_deploymentTarget_deploymentTarget);
	
	uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData_lowerValue_LiteralInteger_UML_A_destroyAt_linkEndDestructionData_linkEndDestructionData = factory->createLiteralInteger_in_Owner(uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData);
	
	uML_A_doActivity_state_state_lowerValue_LiteralInteger_UML_A_doActivity_state_state = factory->createLiteralInteger_in_Owner(uML_A_doActivity_state_state);
	
	uML_A_effect_transition_transition_lowerValue_LiteralInteger_UML_A_effect_transition_transition = factory->createLiteralInteger_in_Owner(uML_A_effect_transition_transition);
	
	uML_A_endType_association_association_lowerValue_LiteralInteger_UML_A_endType_association_association = factory->createLiteralInteger_in_Owner(uML_A_endType_association_association);
	
	uML_A_endType_association_association_upperValue_LiteralUnlimitedNatural_UML_A_endType_association_association = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_endType_association_association);
	
	uML_A_end_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_end_linkEndData_linkEndData = factory->createLiteralInteger_in_Owner(uML_A_end_linkEndData_linkEndData);
	
	uML_A_end_linkEndData_linkEndData_upperValue_LiteralUnlimitedNatural_UML_A_end_linkEndData_linkEndData = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_end_linkEndData_linkEndData);
	
	uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_end_readLinkObjectEndAction_readLinkObjectEndAction = factory->createLiteralInteger_in_Owner(uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction);
	
	uML_A_end_role_end_lowerValue_LiteralInteger_UML_A_end_role_end = factory->createLiteralInteger_in_Owner(uML_A_end_role_end);
	
	uML_A_end_role_end_upperValue_LiteralUnlimitedNatural_UML_A_end_role_end = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_end_role_end);
	
	uML_A_entry_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_entry_connectionPointReference_connectionPointReference = factory->createLiteralInteger_in_Owner(uML_A_entry_connectionPointReference_connectionPointReference);
	
	uML_A_entry_state_state_lowerValue_LiteralInteger_UML_A_entry_state_state = factory->createLiteralInteger_in_Owner(uML_A_entry_state_state);
	
	uML_A_event_durationObservation_durationObservation_lowerValue_LiteralInteger_UML_A_event_durationObservation_durationObservation = factory->createLiteralInteger_in_Owner(uML_A_event_durationObservation_durationObservation);
	
	uML_A_event_durationObservation_durationObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_durationObservation_durationObservation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_event_durationObservation_durationObservation);
	
	uML_A_event_timeObservation_timeObservation_lowerValue_LiteralInteger_UML_A_event_timeObservation_timeObservation = factory->createLiteralInteger_in_Owner(uML_A_event_timeObservation_timeObservation);
	
	uML_A_event_timeObservation_timeObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_timeObservation_timeObservation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_event_timeObservation_timeObservation);
	
	uML_A_event_trigger_trigger_lowerValue_LiteralInteger_UML_A_event_trigger_trigger = factory->createLiteralInteger_in_Owner(uML_A_event_trigger_trigger);
	
	uML_A_event_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_event_trigger_trigger = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_event_trigger_trigger);
	
	uML_A_exceptionInput_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionInput_exceptionHandler_exceptionHandler = factory->createLiteralInteger_in_Owner(uML_A_exceptionInput_exceptionHandler_exceptionHandler);
	
	uML_A_exceptionInput_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionInput_exceptionHandler_exceptionHandler = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_exceptionInput_exceptionHandler_exceptionHandler);
	
	uML_A_exceptionType_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionType_exceptionHandler_exceptionHandler = factory->createLiteralInteger_in_Owner(uML_A_exceptionType_exceptionHandler_exceptionHandler);
	
	uML_A_exceptionType_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionType_exceptionHandler_exceptionHandler = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_exceptionType_exceptionHandler_exceptionHandler);
	
	uML_A_exception_raiseExceptionAction_raiseExceptionAction_lowerValue_LiteralInteger_UML_A_exception_raiseExceptionAction_raiseExceptionAction = factory->createLiteralInteger_in_Owner(uML_A_exception_raiseExceptionAction_raiseExceptionAction);
	
	uML_A_executableNode_sequenceNode_sequenceNode_lowerValue_LiteralInteger_UML_A_executableNode_sequenceNode_sequenceNode = factory->createLiteralInteger_in_Owner(uML_A_executableNode_sequenceNode_sequenceNode);
	
	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_lowerValue_LiteralInteger_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification = factory->createLiteralInteger_in_Owner(uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification);
	
	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification);
	
	uML_A_exit_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_exit_connectionPointReference_connectionPointReference = factory->createLiteralInteger_in_Owner(uML_A_exit_connectionPointReference_connectionPointReference);
	
	uML_A_exit_state_state_lowerValue_LiteralInteger_UML_A_exit_state_state = factory->createLiteralInteger_in_Owner(uML_A_exit_state_state);
	
	uML_A_expr_duration_duration_lowerValue_LiteralInteger_UML_A_expr_duration_duration = factory->createLiteralInteger_in_Owner(uML_A_expr_duration_duration);
	
	uML_A_expr_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_expr_timeExpression_timeExpression = factory->createLiteralInteger_in_Owner(uML_A_expr_timeExpression_timeExpression);
	
	uML_A_extendedCase_extend_extend_lowerValue_LiteralInteger_UML_A_extendedCase_extend_extend = factory->createLiteralInteger_in_Owner(uML_A_extendedCase_extend_extend);
	
	uML_A_extendedCase_extend_extend_upperValue_LiteralUnlimitedNatural_UML_A_extendedCase_extend_extend = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_extendedCase_extend_extend);
	
	uML_A_extendedRegion_region_region_lowerValue_LiteralInteger_UML_A_extendedRegion_region_region = factory->createLiteralInteger_in_Owner(uML_A_extendedRegion_region_region);
	
	uML_A_extendedRegion_region_region_upperValue_LiteralUnlimitedNatural_UML_A_extendedRegion_region_region = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_extendedRegion_region_region);
	
	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature = factory->createLiteralInteger_in_Owner(uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature);
	
	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature);
	
	uML_A_extendedStateMachine_stateMachine_stateMachine_lowerValue_LiteralInteger_UML_A_extendedStateMachine_stateMachine_stateMachine = factory->createLiteralInteger_in_Owner(uML_A_extendedStateMachine_stateMachine_stateMachine);
	
	uML_A_extendedStateMachine_stateMachine_stateMachine_upperValue_LiteralUnlimitedNatural_UML_A_extendedStateMachine_stateMachine_stateMachine = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_extendedStateMachine_stateMachine_stateMachine);
	
	uML_A_extensionLocation_extension_extension_lowerValue_LiteralInteger_UML_A_extensionLocation_extension_extension = factory->createLiteralInteger_in_Owner(uML_A_extensionLocation_extension_extension);
	
	uML_A_extensionLocation_extension_extension_upperValue_LiteralUnlimitedNatural_UML_A_extensionLocation_extension_extension = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_extensionLocation_extension_extension);
	
	uML_A_finish_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_finish_executionSpecification_executionSpecification = factory->createLiteralInteger_in_Owner(uML_A_finish_executionSpecification_executionSpecification);
	
	uML_A_finish_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_finish_executionSpecification_executionSpecification = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_finish_executionSpecification_executionSpecification);
	
	uML_A_first_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_first_testIdentityAction_testIdentityAction = factory->createLiteralInteger_in_Owner(uML_A_first_testIdentityAction_testIdentityAction);
	
	uML_A_formalGate_interaction_interaction_lowerValue_LiteralInteger_UML_A_formalGate_interaction_interaction = factory->createLiteralInteger_in_Owner(uML_A_formalGate_interaction_interaction);
	
	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution = factory->createLiteralInteger_in_Owner(uML_A_formal_templateParameterSubstitution_templateParameterSubstitution);
	
	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_formal_templateParameterSubstitution_templateParameterSubstitution);
	
	uML_A_fromAction_actionInputPin_actionInputPin_lowerValue_LiteralInteger_UML_A_fromAction_actionInputPin_actionInputPin = factory->createLiteralInteger_in_Owner(uML_A_fromAction_actionInputPin_actionInputPin);
	
	uML_A_generalMachine_protocolConformance_protocolConformance_lowerValue_LiteralInteger_UML_A_generalMachine_protocolConformance_protocolConformance = factory->createLiteralInteger_in_Owner(uML_A_generalMachine_protocolConformance_protocolConformance);
	
	uML_A_generalMachine_protocolConformance_protocolConformance_upperValue_LiteralUnlimitedNatural_UML_A_generalMachine_protocolConformance_protocolConformance = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_generalMachine_protocolConformance_protocolConformance);
	
	uML_A_generalOrdering_interactionFragment_interactionFragment_lowerValue_LiteralInteger_UML_A_generalOrdering_interactionFragment_interactionFragment = factory->createLiteralInteger_in_Owner(uML_A_generalOrdering_interactionFragment_interactionFragment);
	
	uML_A_general_classifier_classifier_lowerValue_LiteralInteger_UML_A_general_classifier_classifier = factory->createLiteralInteger_in_Owner(uML_A_general_classifier_classifier);
	
	uML_A_general_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_general_classifier_classifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_general_classifier_classifier);
	
	uML_A_general_generalization_generalization_lowerValue_LiteralInteger_UML_A_general_generalization_generalization = factory->createLiteralInteger_in_Owner(uML_A_general_generalization_generalization);
	
	uML_A_general_generalization_generalization_upperValue_LiteralUnlimitedNatural_UML_A_general_generalization_generalization = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_general_generalization_generalization);
	
	uML_A_guard_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_guard_activityEdge_activityEdge = factory->createLiteralInteger_in_Owner(uML_A_guard_activityEdge_activityEdge);
	
	uML_A_guard_transition_transition_lowerValue_LiteralInteger_UML_A_guard_transition_transition = factory->createLiteralInteger_in_Owner(uML_A_guard_transition_transition);
	
	uML_A_handlerBody_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_handlerBody_exceptionHandler_exceptionHandler = factory->createLiteralInteger_in_Owner(uML_A_handlerBody_exceptionHandler_exceptionHandler);
	
	uML_A_handlerBody_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_handlerBody_exceptionHandler_exceptionHandler = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_handlerBody_exceptionHandler_exceptionHandler);
	
	uML_A_icon_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_icon_stereotype_stereotype = factory->createLiteralInteger_in_Owner(uML_A_icon_stereotype_stereotype);
	
	uML_A_importedElement_import_import_lowerValue_LiteralInteger_UML_A_importedElement_import_import = factory->createLiteralInteger_in_Owner(uML_A_importedElement_import_import);
	
	uML_A_importedElement_import_import_upperValue_LiteralUnlimitedNatural_UML_A_importedElement_import_import = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_importedElement_import_import);
	
	uML_A_importedMember_namespace_namespace_lowerValue_LiteralInteger_UML_A_importedMember_namespace_namespace = factory->createLiteralInteger_in_Owner(uML_A_importedMember_namespace_namespace);
	
	uML_A_importedMember_namespace_namespace_upperValue_LiteralUnlimitedNatural_UML_A_importedMember_namespace_namespace = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_importedMember_namespace_namespace);
	
	uML_A_importedPackage_packageImport_packageImport_lowerValue_LiteralInteger_UML_A_importedPackage_packageImport_packageImport = factory->createLiteralInteger_in_Owner(uML_A_importedPackage_packageImport_packageImport);
	
	uML_A_importedPackage_packageImport_packageImport_upperValue_LiteralUnlimitedNatural_UML_A_importedPackage_packageImport_packageImport = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_importedPackage_packageImport_packageImport);
	
	uML_A_inState_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_inState_objectNode_objectNode = factory->createLiteralInteger_in_Owner(uML_A_inState_objectNode_objectNode);
	
	uML_A_inState_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_inState_objectNode_objectNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_inState_objectNode_objectNode);
	
	uML_A_incoming_target_vertex_incoming_lowerValue_LiteralInteger_UML_A_incoming_target_vertex_incoming = factory->createLiteralInteger_in_Owner(uML_A_incoming_target_vertex_incoming);
	
	uML_A_incoming_target_vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_A_incoming_target_vertex_incoming = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_incoming_target_vertex_incoming);
	
	uML_A_informationSource_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationSource_informationFlow_informationFlow = factory->createLiteralInteger_in_Owner(uML_A_informationSource_informationFlow_informationFlow);
	
	uML_A_informationSource_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationSource_informationFlow_informationFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_informationSource_informationFlow_informationFlow);
	
	uML_A_informationTarget_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationTarget_informationFlow_informationFlow = factory->createLiteralInteger_in_Owner(uML_A_informationTarget_informationFlow_informationFlow);
	
	uML_A_informationTarget_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationTarget_informationFlow_informationFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_informationTarget_informationFlow_informationFlow);
	
	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_lowerValue_LiteralInteger_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier = factory->createLiteralInteger_in_Owner(uML_A_inheritedMember_inheritingClassifier_inheritingClassifier);
	
	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_upperValue_LiteralUnlimitedNatural_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_inheritedMember_inheritingClassifier_inheritingClassifier);
	
	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature = factory->createLiteralInteger_in_Owner(uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature);
	
	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature);
	
	uML_A_inputValue_linkAction_linkAction_lowerValue_LiteralInteger_UML_A_inputValue_linkAction_linkAction = factory->createLiteralInteger_in_Owner(uML_A_inputValue_linkAction_linkAction);
	
	uML_A_inputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_inputValue_opaqueAction_opaqueAction = factory->createLiteralInteger_in_Owner(uML_A_inputValue_opaqueAction_opaqueAction);
	
	uML_A_input_action_action_lowerValue_LiteralInteger_UML_A_input_action_action = factory->createLiteralInteger_in_Owner(uML_A_input_action_action);
	
	uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction = factory->createLiteralInteger_in_Owner(uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction);
	
	uML_A_insertAt_addVariableValueAction_addVariableValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addVariableValueAction_addVariableValueAction = factory->createLiteralInteger_in_Owner(uML_A_insertAt_addVariableValueAction_addVariableValueAction);
	
	uML_A_insertAt_linkEndCreationData_linkEndCreationData_lowerValue_LiteralInteger_UML_A_insertAt_linkEndCreationData_linkEndCreationData = factory->createLiteralInteger_in_Owner(uML_A_insertAt_linkEndCreationData_linkEndCreationData);
	
	uML_A_instance_instanceValue_instanceValue_lowerValue_LiteralInteger_UML_A_instance_instanceValue_instanceValue = factory->createLiteralInteger_in_Owner(uML_A_instance_instanceValue_instanceValue);
	
	uML_A_instance_instanceValue_instanceValue_upperValue_LiteralUnlimitedNatural_UML_A_instance_instanceValue_instanceValue = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_instance_instanceValue_instanceValue);
	
	uML_A_invariant_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_invariant_stateInvariant_stateInvariant = factory->createLiteralInteger_in_Owner(uML_A_invariant_stateInvariant_stateInvariant);
	
	uML_A_joinSpec_joinNode_joinNode_lowerValue_LiteralInteger_UML_A_joinSpec_joinNode_joinNode = factory->createLiteralInteger_in_Owner(uML_A_joinSpec_joinNode_joinNode);
	
	uML_A_localPostcondition_action_action_lowerValue_LiteralInteger_UML_A_localPostcondition_action_action = factory->createLiteralInteger_in_Owner(uML_A_localPostcondition_action_action);
	
	uML_A_localPrecondition_action_action_lowerValue_LiteralInteger_UML_A_localPrecondition_action_action = factory->createLiteralInteger_in_Owner(uML_A_localPrecondition_action_action);
	
	uML_A_loopVariableInput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariableInput_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_loopVariableInput_loopNode_loopNode);
	
	uML_A_loopVariable_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariable_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_loopVariable_loopNode_loopNode);
	
	uML_A_lowerValue_owningLower_owningLower_lowerValue_LiteralInteger_UML_A_lowerValue_owningLower_owningLower = factory->createLiteralInteger_in_Owner(uML_A_lowerValue_owningLower_owningLower);
	
	uML_A_mapping_abstraction_abstraction_lowerValue_LiteralInteger_UML_A_mapping_abstraction_abstraction = factory->createLiteralInteger_in_Owner(uML_A_mapping_abstraction_abstraction);
	
	uML_A_max_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_max_durationInterval_durationInterval = factory->createLiteralInteger_in_Owner(uML_A_max_durationInterval_durationInterval);
	
	uML_A_max_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_durationInterval_durationInterval = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_max_durationInterval_durationInterval);
	
	uML_A_max_interval_interval_lowerValue_LiteralInteger_UML_A_max_interval_interval = factory->createLiteralInteger_in_Owner(uML_A_max_interval_interval);
	
	uML_A_max_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_max_interval_interval = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_max_interval_interval);
	
	uML_A_max_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_max_timeInterval_timeInterval = factory->createLiteralInteger_in_Owner(uML_A_max_timeInterval_timeInterval);
	
	uML_A_max_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_timeInterval_timeInterval = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_max_timeInterval_timeInterval);
	
	uML_A_maxint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_maxint_interactionConstraint_interactionConstraint = factory->createLiteralInteger_in_Owner(uML_A_maxint_interactionConstraint_interactionConstraint);
	
	uML_A_member_memberNamespace_memberNamespace_lowerValue_LiteralInteger_UML_A_member_memberNamespace_memberNamespace = factory->createLiteralInteger_in_Owner(uML_A_member_memberNamespace_memberNamespace);
	
	uML_A_member_memberNamespace_memberNamespace_upperValue_LiteralUnlimitedNatural_UML_A_member_memberNamespace_memberNamespace = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_member_memberNamespace_memberNamespace);
	
	uML_A_mergedPackage_packageMerge_packageMerge_lowerValue_LiteralInteger_UML_A_mergedPackage_packageMerge_packageMerge = factory->createLiteralInteger_in_Owner(uML_A_mergedPackage_packageMerge_packageMerge);
	
	uML_A_mergedPackage_packageMerge_packageMerge_upperValue_LiteralUnlimitedNatural_UML_A_mergedPackage_packageMerge_packageMerge = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_mergedPackage_packageMerge_packageMerge);
	
	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_lowerValue_LiteralInteger_UML_A_message_considerIgnoreFragment_considerIgnoreFragment = factory->createLiteralInteger_in_Owner(uML_A_message_considerIgnoreFragment_considerIgnoreFragment);
	
	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_upperValue_LiteralUnlimitedNatural_UML_A_message_considerIgnoreFragment_considerIgnoreFragment = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_message_considerIgnoreFragment_considerIgnoreFragment);
	
	uML_A_message_messageEnd_messageEnd_lowerValue_LiteralInteger_UML_A_message_messageEnd_messageEnd = factory->createLiteralInteger_in_Owner(uML_A_message_messageEnd_messageEnd);
	
	uML_A_message_messageEnd_messageEnd_upperValue_LiteralUnlimitedNatural_UML_A_message_messageEnd_messageEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_message_messageEnd_messageEnd);
	
	uML_A_metaclassReference_profile_profile_lowerValue_LiteralInteger_UML_A_metaclassReference_profile_profile = factory->createLiteralInteger_in_Owner(uML_A_metaclassReference_profile_profile);
	
	uML_A_metamodelReference_profile_profile_lowerValue_LiteralInteger_UML_A_metamodelReference_profile_profile = factory->createLiteralInteger_in_Owner(uML_A_metamodelReference_profile_profile);
	
	uML_A_min_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_min_durationInterval_durationInterval = factory->createLiteralInteger_in_Owner(uML_A_min_durationInterval_durationInterval);
	
	uML_A_min_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_durationInterval_durationInterval = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_min_durationInterval_durationInterval);
	
	uML_A_min_interval_interval_lowerValue_LiteralInteger_UML_A_min_interval_interval = factory->createLiteralInteger_in_Owner(uML_A_min_interval_interval);
	
	uML_A_min_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_min_interval_interval = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_min_interval_interval);
	
	uML_A_min_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_min_timeInterval_timeInterval = factory->createLiteralInteger_in_Owner(uML_A_min_timeInterval_timeInterval);
	
	uML_A_min_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_timeInterval_timeInterval = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_min_timeInterval_timeInterval);
	
	uML_A_minint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_minint_interactionConstraint_interactionConstraint = factory->createLiteralInteger_in_Owner(uML_A_minint_interactionConstraint_interactionConstraint);
	
	uML_A_nameExpression_namedElement_namedElement_lowerValue_LiteralInteger_UML_A_nameExpression_namedElement_namedElement = factory->createLiteralInteger_in_Owner(uML_A_nameExpression_namedElement_namedElement);
	
	uML_A_navigableOwnedEnd_association_association_lowerValue_LiteralInteger_UML_A_navigableOwnedEnd_association_association = factory->createLiteralInteger_in_Owner(uML_A_navigableOwnedEnd_association_association);
	
	uML_A_nestedArtifact_artifact_artifact_lowerValue_LiteralInteger_UML_A_nestedArtifact_artifact_artifact = factory->createLiteralInteger_in_Owner(uML_A_nestedArtifact_artifact_artifact);
	
	uML_A_nestedClassifier_interface_interface_lowerValue_LiteralInteger_UML_A_nestedClassifier_interface_interface = factory->createLiteralInteger_in_Owner(uML_A_nestedClassifier_interface_interface);
	
	uML_A_nestedClassifier_nestingClass_nestingClass_lowerValue_LiteralInteger_UML_A_nestedClassifier_nestingClass_nestingClass = factory->createLiteralInteger_in_Owner(uML_A_nestedClassifier_nestingClass_nestingClass);
	
	uML_A_nestedNode_node_node_lowerValue_LiteralInteger_UML_A_nestedNode_node_node = factory->createLiteralInteger_in_Owner(uML_A_nestedNode_node_node);
	
	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction = factory->createLiteralInteger_in_Owner(uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction);
	
	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction);
	
	uML_A_object_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_object_clearAssociationAction_clearAssociationAction = factory->createLiteralInteger_in_Owner(uML_A_object_clearAssociationAction_clearAssociationAction);
	
	uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction = factory->createLiteralInteger_in_Owner(uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction);
	
	uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndAction_readLinkObjectEndAction = factory->createLiteralInteger_in_Owner(uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction);
	
	uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction = factory->createLiteralInteger_in_Owner(uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction);
	
	uML_A_object_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_object_reclassifyObjectAction_reclassifyObjectAction = factory->createLiteralInteger_in_Owner(uML_A_object_reclassifyObjectAction_reclassifyObjectAction);
	
	uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction = factory->createLiteralInteger_in_Owner(uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction);
	
	uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startObjectBehaviorAction_startObjectBehaviorAction = factory->createLiteralInteger_in_Owner(uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction);
	
	uML_A_object_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_object_structuralFeatureAction_structuralFeatureAction = factory->createLiteralInteger_in_Owner(uML_A_object_structuralFeatureAction_structuralFeatureAction);
	
	uML_A_object_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_object_unmarshallAction_unmarshallAction = factory->createLiteralInteger_in_Owner(uML_A_object_unmarshallAction_unmarshallAction);
	
	uML_A_observation_duration_duration_lowerValue_LiteralInteger_UML_A_observation_duration_duration = factory->createLiteralInteger_in_Owner(uML_A_observation_duration_duration);
	
	uML_A_observation_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_observation_timeExpression_timeExpression = factory->createLiteralInteger_in_Owner(uML_A_observation_timeExpression_timeExpression);
	
	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction = factory->createLiteralInteger_in_Owner(uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction);
	
	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction);
	
	uML_A_onPort_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_onPort_invocationAction_invocationAction = factory->createLiteralInteger_in_Owner(uML_A_onPort_invocationAction_invocationAction);
	
	uML_A_onPort_invocationAction_invocationAction_upperValue_LiteralUnlimitedNatural_UML_A_onPort_invocationAction_invocationAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_onPort_invocationAction_invocationAction);
	
	uML_A_operand_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_operand_combinedFragment_combinedFragment = factory->createLiteralInteger_in_Owner(uML_A_operand_combinedFragment_combinedFragment);
	
	uML_A_operand_expression_expression_lowerValue_LiteralInteger_UML_A_operand_expression_expression = factory->createLiteralInteger_in_Owner(uML_A_operand_expression_expression);
	
	uML_A_operation_callEvent_callEvent_lowerValue_LiteralInteger_UML_A_operation_callEvent_callEvent = factory->createLiteralInteger_in_Owner(uML_A_operation_callEvent_callEvent);
	
	uML_A_operation_callEvent_callEvent_upperValue_LiteralUnlimitedNatural_UML_A_operation_callEvent_callEvent = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_operation_callEvent_callEvent);
	
	uML_A_operation_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_operation_callOperationAction_callOperationAction = factory->createLiteralInteger_in_Owner(uML_A_operation_callOperationAction_callOperationAction);
	
	uML_A_operation_callOperationAction_callOperationAction_upperValue_LiteralUnlimitedNatural_UML_A_operation_callOperationAction_callOperationAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_operation_callOperationAction_callOperationAction);
	
	uML_A_opposite_property_property_lowerValue_LiteralInteger_UML_A_opposite_property_property = factory->createLiteralInteger_in_Owner(uML_A_opposite_property_property);
	
	uML_A_outgoing_source_vertex_outgoing_lowerValue_LiteralInteger_UML_A_outgoing_source_vertex_outgoing = factory->createLiteralInteger_in_Owner(uML_A_outgoing_source_vertex_outgoing);
	
	uML_A_outgoing_source_vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_A_outgoing_source_vertex_outgoing = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_outgoing_source_vertex_outgoing);
	
	uML_A_outputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_outputValue_opaqueAction_opaqueAction = factory->createLiteralInteger_in_Owner(uML_A_outputValue_opaqueAction_opaqueAction);
	
	uML_A_output_action_action_lowerValue_LiteralInteger_UML_A_output_action_action = factory->createLiteralInteger_in_Owner(uML_A_output_action_action);
	
	uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution_lowerValue_LiteralInteger_UML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution = factory->createLiteralInteger_in_Owner(uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution);
	
	uML_A_ownedAttribute_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedAttribute_artifact_artifact = factory->createLiteralInteger_in_Owner(uML_A_ownedAttribute_artifact_artifact);
	
	uML_A_ownedAttribute_owningSignal_owningSignal_lowerValue_LiteralInteger_UML_A_ownedAttribute_owningSignal_owningSignal = factory->createLiteralInteger_in_Owner(uML_A_ownedAttribute_owningSignal_owningSignal);
	
	uML_A_ownedAttribute_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedAttribute_structuredClassifier_structuredClassifier = factory->createLiteralInteger_in_Owner(uML_A_ownedAttribute_structuredClassifier_structuredClassifier);
	
	uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_ownedBehavior_behavioredClassifier_behavioredClassifier = factory->createLiteralInteger_in_Owner(uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier);
	
	uML_A_ownedComment_owningElement_owningElement_lowerValue_LiteralInteger_UML_A_ownedComment_owningElement_owningElement = factory->createLiteralInteger_in_Owner(uML_A_ownedComment_owningElement_owningElement);
	
	uML_A_ownedConnector_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedConnector_structuredClassifier_structuredClassifier = factory->createLiteralInteger_in_Owner(uML_A_ownedConnector_structuredClassifier_structuredClassifier);
	
	uML_A_ownedDefault_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_ownedDefault_templateParameter_templateParameter = factory->createLiteralInteger_in_Owner(uML_A_ownedDefault_templateParameter_templateParameter);
	
	uML_A_ownedOperation_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedOperation_artifact_artifact = factory->createLiteralInteger_in_Owner(uML_A_ownedOperation_artifact_artifact);
	
	uML_A_ownedParameterSet_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavior_behavior = factory->createLiteralInteger_in_Owner(uML_A_ownedParameterSet_behavior_behavior);
	
	uML_A_ownedParameterSet_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavioralFeature_behavioralFeature = factory->createLiteralInteger_in_Owner(uML_A_ownedParameterSet_behavioralFeature_behavioralFeature);
	
	uML_A_ownedParameter_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameter_behavior_behavior = factory->createLiteralInteger_in_Owner(uML_A_ownedParameter_behavior_behavior);
	
	uML_A_ownedParameter_ownerFormalParam_ownerFormalParam_lowerValue_LiteralInteger_UML_A_ownedParameter_ownerFormalParam_ownerFormalParam = factory->createLiteralInteger_in_Owner(uML_A_ownedParameter_ownerFormalParam_ownerFormalParam);
	
	uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier_lowerValue_LiteralInteger_UML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier = factory->createLiteralInteger_in_Owner(uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier);
	
	uML_A_ownedReception_class_class_lowerValue_LiteralInteger_UML_A_ownedReception_class_class = factory->createLiteralInteger_in_Owner(uML_A_ownedReception_class_class);
	
	uML_A_ownedReception_interface_interface_lowerValue_LiteralInteger_UML_A_ownedReception_interface_interface = factory->createLiteralInteger_in_Owner(uML_A_ownedReception_interface_interface);
	
	uML_A_ownedUseCase_classifier_classifier_lowerValue_LiteralInteger_UML_A_ownedUseCase_classifier_classifier = factory->createLiteralInteger_in_Owner(uML_A_ownedUseCase_classifier_classifier);
	
	uML_A_packagedElement_component_component_lowerValue_LiteralInteger_UML_A_packagedElement_component_component = factory->createLiteralInteger_in_Owner(uML_A_packagedElement_component_component);
	
	uML_A_packagedElement_owningPackage_owningPackage_lowerValue_LiteralInteger_UML_A_packagedElement_owningPackage_owningPackage = factory->createLiteralInteger_in_Owner(uML_A_packagedElement_owningPackage_owningPackage);
	
	uML_A_parameter_activityParameterNode_activityParameterNode_lowerValue_LiteralInteger_UML_A_parameter_activityParameterNode_activityParameterNode = factory->createLiteralInteger_in_Owner(uML_A_parameter_activityParameterNode_activityParameterNode);
	
	uML_A_parameter_activityParameterNode_activityParameterNode_upperValue_LiteralUnlimitedNatural_UML_A_parameter_activityParameterNode_activityParameterNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_parameter_activityParameterNode_activityParameterNode);
	
	uML_A_parameter_templateSignature_templateSignature_lowerValue_LiteralInteger_UML_A_parameter_templateSignature_templateSignature = factory->createLiteralInteger_in_Owner(uML_A_parameter_templateSignature_templateSignature);
	
	uML_A_parameter_templateSignature_templateSignature_upperValue_LiteralUnlimitedNatural_UML_A_parameter_templateSignature_templateSignature = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_parameter_templateSignature_templateSignature);
	
	uML_A_partWithPort_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_partWithPort_connectorEnd_connectorEnd = factory->createLiteralInteger_in_Owner(uML_A_partWithPort_connectorEnd_connectorEnd);
	
	uML_A_partWithPort_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_partWithPort_connectorEnd_connectorEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_partWithPort_connectorEnd_connectorEnd);
	
	uML_A_part_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_part_structuredClassifier_structuredClassifier = factory->createLiteralInteger_in_Owner(uML_A_part_structuredClassifier_structuredClassifier);
	
	uML_A_partition_activity_activity_lowerValue_LiteralInteger_UML_A_partition_activity_activity = factory->createLiteralInteger_in_Owner(uML_A_partition_activity_activity);
	
	uML_A_port_trigger_trigger_lowerValue_LiteralInteger_UML_A_port_trigger_trigger = factory->createLiteralInteger_in_Owner(uML_A_port_trigger_trigger);
	
	uML_A_port_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_port_trigger_trigger = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_port_trigger_trigger);
	
	uML_A_postCondition_owningTransition_owningTransition_lowerValue_LiteralInteger_UML_A_postCondition_owningTransition_owningTransition = factory->createLiteralInteger_in_Owner(uML_A_postCondition_owningTransition_owningTransition);
	
	uML_A_postcondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_postcondition_behavior_behavior = factory->createLiteralInteger_in_Owner(uML_A_postcondition_behavior_behavior);
	
	uML_A_postcondition_postContext_postContext_lowerValue_LiteralInteger_UML_A_postcondition_postContext_postContext = factory->createLiteralInteger_in_Owner(uML_A_postcondition_postContext_postContext);
	
	uML_A_preCondition_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_preCondition_protocolTransition_protocolTransition = factory->createLiteralInteger_in_Owner(uML_A_preCondition_protocolTransition_protocolTransition);
	
	uML_A_precondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_precondition_behavior_behavior = factory->createLiteralInteger_in_Owner(uML_A_precondition_behavior_behavior);
	
	uML_A_precondition_preContext_preContext_lowerValue_LiteralInteger_UML_A_precondition_preContext_preContext = factory->createLiteralInteger_in_Owner(uML_A_precondition_preContext_preContext);
	
	uML_A_profile_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_profile_stereotype_stereotype = factory->createLiteralInteger_in_Owner(uML_A_profile_stereotype_stereotype);
	
	uML_A_profile_stereotype_stereotype_upperValue_LiteralUnlimitedNatural_UML_A_profile_stereotype_stereotype = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_profile_stereotype_stereotype);
	
	uML_A_protocol_interface_interface_lowerValue_LiteralInteger_UML_A_protocol_interface_interface = factory->createLiteralInteger_in_Owner(uML_A_protocol_interface_interface);
	
	uML_A_protocol_port_port_lowerValue_LiteralInteger_UML_A_protocol_port_port = factory->createLiteralInteger_in_Owner(uML_A_protocol_port_port);
	
	uML_A_protocol_port_port_upperValue_LiteralUnlimitedNatural_UML_A_protocol_port_port = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_protocol_port_port);
	
	uML_A_provided_component_component_lowerValue_LiteralInteger_UML_A_provided_component_component = factory->createLiteralInteger_in_Owner(uML_A_provided_component_component);
	
	uML_A_provided_component_component_upperValue_LiteralUnlimitedNatural_UML_A_provided_component_component = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_provided_component_component);
	
	uML_A_provided_port_port_lowerValue_LiteralInteger_UML_A_provided_port_port = factory->createLiteralInteger_in_Owner(uML_A_provided_port_port);
	
	uML_A_provided_port_port_upperValue_LiteralUnlimitedNatural_UML_A_provided_port_port = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_provided_port_port);
	
	uML_A_qualifier_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_qualifier_qualifierValue_qualifierValue = factory->createLiteralInteger_in_Owner(uML_A_qualifier_qualifierValue_qualifierValue);
	
	uML_A_qualifier_qualifierValue_qualifierValue_upperValue_LiteralUnlimitedNatural_UML_A_qualifier_qualifierValue_qualifierValue = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_qualifier_qualifierValue_qualifierValue);
	
	uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction = factory->createLiteralInteger_in_Owner(uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction);
	
	uML_A_raisedException_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_raisedException_behavioralFeature_behavioralFeature = factory->createLiteralInteger_in_Owner(uML_A_raisedException_behavioralFeature_behavioralFeature);
	
	uML_A_raisedException_behavioralFeature_behavioralFeature_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_behavioralFeature_behavioralFeature = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_raisedException_behavioralFeature_behavioralFeature);
	
	uML_A_raisedException_operation_operation_lowerValue_LiteralInteger_UML_A_raisedException_operation_operation = factory->createLiteralInteger_in_Owner(uML_A_raisedException_operation_operation);
	
	uML_A_raisedException_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_operation_operation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_raisedException_operation_operation);
	
	uML_A_realization_abstraction_flow_abstraction_lowerValue_LiteralInteger_UML_A_realization_abstraction_flow_abstraction = factory->createLiteralInteger_in_Owner(uML_A_realization_abstraction_flow_abstraction);
	
	uML_A_realization_abstraction_flow_abstraction_upperValue_LiteralUnlimitedNatural_UML_A_realization_abstraction_flow_abstraction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_realization_abstraction_flow_abstraction);
	
	uML_A_realizingActivityEdge_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingActivityEdge_informationFlow_informationFlow = factory->createLiteralInteger_in_Owner(uML_A_realizingActivityEdge_informationFlow_informationFlow);
	
	uML_A_realizingActivityEdge_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingActivityEdge_informationFlow_informationFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_realizingActivityEdge_informationFlow_informationFlow);
	
	uML_A_realizingClassifier_componentRealization_componentRealization_lowerValue_LiteralInteger_UML_A_realizingClassifier_componentRealization_componentRealization = factory->createLiteralInteger_in_Owner(uML_A_realizingClassifier_componentRealization_componentRealization);
	
	uML_A_realizingClassifier_componentRealization_componentRealization_upperValue_LiteralUnlimitedNatural_UML_A_realizingClassifier_componentRealization_componentRealization = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_realizingClassifier_componentRealization_componentRealization);
	
	uML_A_realizingConnector_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingConnector_informationFlow_informationFlow = factory->createLiteralInteger_in_Owner(uML_A_realizingConnector_informationFlow_informationFlow);
	
	uML_A_realizingConnector_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingConnector_informationFlow_informationFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_realizingConnector_informationFlow_informationFlow);
	
	uML_A_realizingMessage_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingMessage_informationFlow_informationFlow = factory->createLiteralInteger_in_Owner(uML_A_realizingMessage_informationFlow_informationFlow);
	
	uML_A_realizingMessage_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingMessage_informationFlow_informationFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_realizingMessage_informationFlow_informationFlow);
	
	uML_A_receiveEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_receiveEvent_endMessage_endMessage = factory->createLiteralInteger_in_Owner(uML_A_receiveEvent_endMessage_endMessage);
	
	uML_A_redefinedBehavior_behavior_behavior_lowerValue_LiteralInteger_UML_A_redefinedBehavior_behavior_behavior = factory->createLiteralInteger_in_Owner(uML_A_redefinedBehavior_behavior_behavior);
	
	uML_A_redefinedBehavior_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_redefinedBehavior_behavior_behavior = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedBehavior_behavior_behavior);
	
	uML_A_redefinedClassifier_classifier_classifier_lowerValue_LiteralInteger_UML_A_redefinedClassifier_classifier_classifier = factory->createLiteralInteger_in_Owner(uML_A_redefinedClassifier_classifier_classifier);
	
	uML_A_redefinedClassifier_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_redefinedClassifier_classifier_classifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedClassifier_classifier_classifier);
	
	uML_A_redefinedConnector_connector_connector_lowerValue_LiteralInteger_UML_A_redefinedConnector_connector_connector = factory->createLiteralInteger_in_Owner(uML_A_redefinedConnector_connector_connector);
	
	uML_A_redefinedConnector_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_redefinedConnector_connector_connector = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedConnector_connector_connector);
	
	uML_A_redefinedEdge_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_redefinedEdge_activityEdge_activityEdge = factory->createLiteralInteger_in_Owner(uML_A_redefinedEdge_activityEdge_activityEdge);
	
	uML_A_redefinedEdge_activityEdge_activityEdge_upperValue_LiteralUnlimitedNatural_UML_A_redefinedEdge_activityEdge_activityEdge = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedEdge_activityEdge_activityEdge);
	
	uML_A_redefinedElement_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinedElement_redefinableElement_redefinableElement = factory->createLiteralInteger_in_Owner(uML_A_redefinedElement_redefinableElement_redefinableElement);
	
	uML_A_redefinedElement_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinedElement_redefinableElement_redefinableElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedElement_redefinableElement_redefinableElement);
	
	uML_A_redefinedInterface_interface_interface_lowerValue_LiteralInteger_UML_A_redefinedInterface_interface_interface = factory->createLiteralInteger_in_Owner(uML_A_redefinedInterface_interface_interface);
	
	uML_A_redefinedInterface_interface_interface_upperValue_LiteralUnlimitedNatural_UML_A_redefinedInterface_interface_interface = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedInterface_interface_interface);
	
	uML_A_redefinedNode_activityNode_activityNode_lowerValue_LiteralInteger_UML_A_redefinedNode_activityNode_activityNode = factory->createLiteralInteger_in_Owner(uML_A_redefinedNode_activityNode_activityNode);
	
	uML_A_redefinedNode_activityNode_activityNode_upperValue_LiteralUnlimitedNatural_UML_A_redefinedNode_activityNode_activityNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedNode_activityNode_activityNode);
	
	uML_A_redefinedOperation_operation_operation_lowerValue_LiteralInteger_UML_A_redefinedOperation_operation_operation = factory->createLiteralInteger_in_Owner(uML_A_redefinedOperation_operation_operation);
	
	uML_A_redefinedOperation_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_redefinedOperation_operation_operation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedOperation_operation_operation);
	
	uML_A_redefinedPort_port_port_lowerValue_LiteralInteger_UML_A_redefinedPort_port_port = factory->createLiteralInteger_in_Owner(uML_A_redefinedPort_port_port);
	
	uML_A_redefinedPort_port_port_upperValue_LiteralUnlimitedNatural_UML_A_redefinedPort_port_port = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedPort_port_port);
	
	uML_A_redefinedProperty_property_property_lowerValue_LiteralInteger_UML_A_redefinedProperty_property_property = factory->createLiteralInteger_in_Owner(uML_A_redefinedProperty_property_property);
	
	uML_A_redefinedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_redefinedProperty_property_property = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedProperty_property_property);
	
	uML_A_redefinedState_state_state_lowerValue_LiteralInteger_UML_A_redefinedState_state_state = factory->createLiteralInteger_in_Owner(uML_A_redefinedState_state_state);
	
	uML_A_redefinedState_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinedState_state_state = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedState_state_state);
	
	uML_A_redefinedTransition_transition_transition_lowerValue_LiteralInteger_UML_A_redefinedTransition_transition_transition = factory->createLiteralInteger_in_Owner(uML_A_redefinedTransition_transition_transition);
	
	uML_A_redefinedTransition_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinedTransition_transition_transition = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinedTransition_transition_transition);
	
	uML_A_redefinitionContext_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinitionContext_redefinableElement_redefinableElement = factory->createLiteralInteger_in_Owner(uML_A_redefinitionContext_redefinableElement_redefinableElement);
	
	uML_A_redefinitionContext_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_redefinableElement_redefinableElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinitionContext_redefinableElement_redefinableElement);
	
	uML_A_redefinitionContext_region_region_lowerValue_LiteralInteger_UML_A_redefinitionContext_region_region = factory->createLiteralInteger_in_Owner(uML_A_redefinitionContext_region_region);
	
	uML_A_redefinitionContext_region_region_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_region_region = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinitionContext_region_region);
	
	uML_A_redefinitionContext_state_state_lowerValue_LiteralInteger_UML_A_redefinitionContext_state_state = factory->createLiteralInteger_in_Owner(uML_A_redefinitionContext_state_state);
	
	uML_A_redefinitionContext_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_state_state = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinitionContext_state_state);
	
	uML_A_redefinitionContext_transition_transition_lowerValue_LiteralInteger_UML_A_redefinitionContext_transition_transition = factory->createLiteralInteger_in_Owner(uML_A_redefinitionContext_transition_transition);
	
	uML_A_redefinitionContext_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_transition_transition = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_redefinitionContext_transition_transition);
	
	uML_A_reducer_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_reducer_reduceAction_reduceAction = factory->createLiteralInteger_in_Owner(uML_A_reducer_reduceAction_reduceAction);
	
	uML_A_reducer_reduceAction_reduceAction_upperValue_LiteralUnlimitedNatural_UML_A_reducer_reduceAction_reduceAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_reducer_reduceAction_reduceAction);
	
	uML_A_referred_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_referred_protocolTransition_protocolTransition = factory->createLiteralInteger_in_Owner(uML_A_referred_protocolTransition_protocolTransition);
	
	uML_A_referred_protocolTransition_protocolTransition_upperValue_LiteralUnlimitedNatural_UML_A_referred_protocolTransition_protocolTransition = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_referred_protocolTransition_protocolTransition);
	
	uML_A_refersTo_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_refersTo_interactionUse_interactionUse = factory->createLiteralInteger_in_Owner(uML_A_refersTo_interactionUse_interactionUse);
	
	uML_A_refersTo_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_refersTo_interactionUse_interactionUse = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_refersTo_interactionUse_interactionUse);
	
	uML_A_relatedElement_relationship_relationship_lowerValue_LiteralInteger_UML_A_relatedElement_relationship_relationship = factory->createLiteralInteger_in_Owner(uML_A_relatedElement_relationship_relationship);
	
	uML_A_relatedElement_relationship_relationship_upperValue_LiteralUnlimitedNatural_UML_A_relatedElement_relationship_relationship = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_relatedElement_relationship_relationship);
	
	uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction = factory->createLiteralInteger_in_Owner(uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction);
	
	uML_A_removeAt_removeVariableValueAction_removeVariableValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeVariableValueAction_removeVariableValueAction = factory->createLiteralInteger_in_Owner(uML_A_removeAt_removeVariableValueAction_removeVariableValueAction);
	
	uML_A_replyToCall_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyToCall_replyAction_replyAction = factory->createLiteralInteger_in_Owner(uML_A_replyToCall_replyAction_replyAction);
	
	uML_A_replyValue_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyValue_replyAction_replyAction = factory->createLiteralInteger_in_Owner(uML_A_replyValue_replyAction_replyAction);
	
	uML_A_representation_classifier_classifier_lowerValue_LiteralInteger_UML_A_representation_classifier_classifier = factory->createLiteralInteger_in_Owner(uML_A_representation_classifier_classifier);
	
	uML_A_represented_representation_representation_lowerValue_LiteralInteger_UML_A_represented_representation_representation = factory->createLiteralInteger_in_Owner(uML_A_represented_representation_representation);
	
	uML_A_represented_representation_representation_upperValue_LiteralUnlimitedNatural_UML_A_represented_representation_representation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_represented_representation_representation);
	
	uML_A_represents_activityPartition_activityPartition_lowerValue_LiteralInteger_UML_A_represents_activityPartition_activityPartition = factory->createLiteralInteger_in_Owner(uML_A_represents_activityPartition_activityPartition);
	
	uML_A_represents_activityPartition_activityPartition_upperValue_LiteralUnlimitedNatural_UML_A_represents_activityPartition_activityPartition = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_represents_activityPartition_activityPartition);
	
	uML_A_represents_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_represents_lifeline_lifeline = factory->createLiteralInteger_in_Owner(uML_A_represents_lifeline_lifeline);
	
	uML_A_represents_lifeline_lifeline_upperValue_LiteralUnlimitedNatural_UML_A_represents_lifeline_lifeline = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_represents_lifeline_lifeline);
	
	uML_A_request_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_request_sendObjectAction_sendObjectAction = factory->createLiteralInteger_in_Owner(uML_A_request_sendObjectAction_sendObjectAction);
	
	uML_A_required_component_component_lowerValue_LiteralInteger_UML_A_required_component_component = factory->createLiteralInteger_in_Owner(uML_A_required_component_component);
	
	uML_A_required_component_component_upperValue_LiteralUnlimitedNatural_UML_A_required_component_component = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_required_component_component);
	
	uML_A_required_port_port_lowerValue_LiteralInteger_UML_A_required_port_port = factory->createLiteralInteger_in_Owner(uML_A_required_port_port);
	
	uML_A_required_port_port_upperValue_LiteralUnlimitedNatural_UML_A_required_port_port = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_required_port_port);
	
	uML_A_result_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_result_acceptEventAction_acceptEventAction = factory->createLiteralInteger_in_Owner(uML_A_result_acceptEventAction_acceptEventAction);
	
	uML_A_result_callAction_callAction_lowerValue_LiteralInteger_UML_A_result_callAction_callAction = factory->createLiteralInteger_in_Owner(uML_A_result_callAction_callAction);
	
	uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction = factory->createLiteralInteger_in_Owner(uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction);
	
	uML_A_result_conditionalNode_conditionalNode_lowerValue_LiteralInteger_UML_A_result_conditionalNode_conditionalNode = factory->createLiteralInteger_in_Owner(uML_A_result_conditionalNode_conditionalNode);
	
	uML_A_result_createLinkObjectAction_createLinkObjectAction_lowerValue_LiteralInteger_UML_A_result_createLinkObjectAction_createLinkObjectAction = factory->createLiteralInteger_in_Owner(uML_A_result_createLinkObjectAction_createLinkObjectAction);
	
	uML_A_result_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_result_createObjectAction_createObjectAction = factory->createLiteralInteger_in_Owner(uML_A_result_createObjectAction_createObjectAction);
	
	uML_A_result_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_result_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_result_loopNode_loopNode);
	
	uML_A_result_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_result_opaqueExpression_opaqueExpression = factory->createLiteralInteger_in_Owner(uML_A_result_opaqueExpression_opaqueExpression);
	
	uML_A_result_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_result_opaqueExpression_opaqueExpression = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_result_opaqueExpression_opaqueExpression);
	
	uML_A_result_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_result_readExtentAction_readExtentAction = factory->createLiteralInteger_in_Owner(uML_A_result_readExtentAction_readExtentAction);
	
	uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction = factory->createLiteralInteger_in_Owner(uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction);
	
	uML_A_result_readLinkAction_readLinkAction_lowerValue_LiteralInteger_UML_A_result_readLinkAction_readLinkAction = factory->createLiteralInteger_in_Owner(uML_A_result_readLinkAction_readLinkAction);
	
	uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndAction_readLinkObjectEndAction = factory->createLiteralInteger_in_Owner(uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction);
	
	uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction = factory->createLiteralInteger_in_Owner(uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction);
	
	uML_A_result_readSelfAction_readSelfAction_lowerValue_LiteralInteger_UML_A_result_readSelfAction_readSelfAction = factory->createLiteralInteger_in_Owner(uML_A_result_readSelfAction_readSelfAction);
	
	uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_readStructuralFeatureAction_readStructuralFeatureAction = factory->createLiteralInteger_in_Owner(uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction);
	
	uML_A_result_readVariableAction_readVariableAction_lowerValue_LiteralInteger_UML_A_result_readVariableAction_readVariableAction = factory->createLiteralInteger_in_Owner(uML_A_result_readVariableAction_readVariableAction);
	
	uML_A_result_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_result_reduceAction_reduceAction = factory->createLiteralInteger_in_Owner(uML_A_result_reduceAction_reduceAction);
	
	uML_A_result_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_result_testIdentityAction_testIdentityAction = factory->createLiteralInteger_in_Owner(uML_A_result_testIdentityAction_testIdentityAction);
	
	uML_A_result_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_result_unmarshallAction_unmarshallAction = factory->createLiteralInteger_in_Owner(uML_A_result_unmarshallAction_unmarshallAction);
	
	uML_A_result_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_result_valueSpecificationAction_valueSpecificationAction = factory->createLiteralInteger_in_Owner(uML_A_result_valueSpecificationAction_valueSpecificationAction);
	
	uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction = factory->createLiteralInteger_in_Owner(uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction);
	
	uML_A_returnInformation_acceptCallAction_acceptCallAction_lowerValue_LiteralInteger_UML_A_returnInformation_acceptCallAction_acceptCallAction = factory->createLiteralInteger_in_Owner(uML_A_returnInformation_acceptCallAction_acceptCallAction);
	
	uML_A_returnInformation_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_returnInformation_replyAction_replyAction = factory->createLiteralInteger_in_Owner(uML_A_returnInformation_replyAction_replyAction);
	
	uML_A_returnValueRecipient_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValueRecipient_interactionUse_interactionUse = factory->createLiteralInteger_in_Owner(uML_A_returnValueRecipient_interactionUse_interactionUse);
	
	uML_A_returnValueRecipient_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_returnValueRecipient_interactionUse_interactionUse = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_returnValueRecipient_interactionUse_interactionUse);
	
	uML_A_returnValue_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValue_interactionUse_interactionUse = factory->createLiteralInteger_in_Owner(uML_A_returnValue_interactionUse_interactionUse);
	
	uML_A_roleBinding_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_roleBinding_collaborationUse_collaborationUse = factory->createLiteralInteger_in_Owner(uML_A_roleBinding_collaborationUse_collaborationUse);
	
	uML_A_role_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_role_structuredClassifier_structuredClassifier = factory->createLiteralInteger_in_Owner(uML_A_role_structuredClassifier_structuredClassifier);
	
	uML_A_role_structuredClassifier_structuredClassifier_upperValue_LiteralUnlimitedNatural_UML_A_role_structuredClassifier_structuredClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_role_structuredClassifier_structuredClassifier);
	
	uML_A_second_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_second_testIdentityAction_testIdentityAction = factory->createLiteralInteger_in_Owner(uML_A_second_testIdentityAction_testIdentityAction);
	
	uML_A_selection_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_selection_objectFlow_objectFlow = factory->createLiteralInteger_in_Owner(uML_A_selection_objectFlow_objectFlow);
	
	uML_A_selection_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectFlow_objectFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_selection_objectFlow_objectFlow);
	
	uML_A_selection_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_selection_objectNode_objectNode = factory->createLiteralInteger_in_Owner(uML_A_selection_objectNode_objectNode);
	
	uML_A_selection_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectNode_objectNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_selection_objectNode_objectNode);
	
	uML_A_selector_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_selector_lifeline_lifeline = factory->createLiteralInteger_in_Owner(uML_A_selector_lifeline_lifeline);
	
	uML_A_sendEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_sendEvent_endMessage_endMessage = factory->createLiteralInteger_in_Owner(uML_A_sendEvent_endMessage_endMessage);
	
	uML_A_setupPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_setupPart_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_setupPart_loopNode_loopNode);
	
	uML_A_signal_broadcastSignalAction_broadcastSignalAction_lowerValue_LiteralInteger_UML_A_signal_broadcastSignalAction_broadcastSignalAction = factory->createLiteralInteger_in_Owner(uML_A_signal_broadcastSignalAction_broadcastSignalAction);
	
	uML_A_signal_broadcastSignalAction_broadcastSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_broadcastSignalAction_broadcastSignalAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_signal_broadcastSignalAction_broadcastSignalAction);
	
	uML_A_signal_reception_reception_lowerValue_LiteralInteger_UML_A_signal_reception_reception = factory->createLiteralInteger_in_Owner(uML_A_signal_reception_reception);
	
	uML_A_signal_reception_reception_upperValue_LiteralUnlimitedNatural_UML_A_signal_reception_reception = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_signal_reception_reception);
	
	uML_A_signal_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_signal_sendSignalAction_sendSignalAction = factory->createLiteralInteger_in_Owner(uML_A_signal_sendSignalAction_sendSignalAction);
	
	uML_A_signal_sendSignalAction_sendSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_sendSignalAction_sendSignalAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_signal_sendSignalAction_sendSignalAction);
	
	uML_A_signal_signalEvent_signalEvent_lowerValue_LiteralInteger_UML_A_signal_signalEvent_signalEvent = factory->createLiteralInteger_in_Owner(uML_A_signal_signalEvent_signalEvent);
	
	uML_A_signal_signalEvent_signalEvent_upperValue_LiteralUnlimitedNatural_UML_A_signal_signalEvent_signalEvent = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_signal_signalEvent_signalEvent);
	
	uML_A_signature_message_message_lowerValue_LiteralInteger_UML_A_signature_message_message = factory->createLiteralInteger_in_Owner(uML_A_signature_message_message);
	
	uML_A_signature_message_message_upperValue_LiteralUnlimitedNatural_UML_A_signature_message_message = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_signature_message_message);
	
	uML_A_signature_templateBinding_templateBinding_lowerValue_LiteralInteger_UML_A_signature_templateBinding_templateBinding = factory->createLiteralInteger_in_Owner(uML_A_signature_templateBinding_templateBinding);
	
	uML_A_signature_templateBinding_templateBinding_upperValue_LiteralUnlimitedNatural_UML_A_signature_templateBinding_templateBinding = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_signature_templateBinding_templateBinding);
	
	uML_A_source_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_source_directedRelationship_directedRelationship = factory->createLiteralInteger_in_Owner(uML_A_source_directedRelationship_directedRelationship);
	
	uML_A_source_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_source_directedRelationship_directedRelationship = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_source_directedRelationship_directedRelationship);
	
	uML_A_specification_durationConstraint_durationConstraint_lowerValue_LiteralInteger_UML_A_specification_durationConstraint_durationConstraint = factory->createLiteralInteger_in_Owner(uML_A_specification_durationConstraint_durationConstraint);
	
	uML_A_specification_intervalConstraint_intervalConstraint_lowerValue_LiteralInteger_UML_A_specification_intervalConstraint_intervalConstraint = factory->createLiteralInteger_in_Owner(uML_A_specification_intervalConstraint_intervalConstraint);
	
	uML_A_specification_owningConstraint_owningConstraint_lowerValue_LiteralInteger_UML_A_specification_owningConstraint_owningConstraint = factory->createLiteralInteger_in_Owner(uML_A_specification_owningConstraint_owningConstraint);
	
	uML_A_specification_owningInstanceSpec_owningInstanceSpec_lowerValue_LiteralInteger_UML_A_specification_owningInstanceSpec_owningInstanceSpec = factory->createLiteralInteger_in_Owner(uML_A_specification_owningInstanceSpec_owningInstanceSpec);
	
	uML_A_specification_timeConstraint_timeConstraint_lowerValue_LiteralInteger_UML_A_specification_timeConstraint_timeConstraint = factory->createLiteralInteger_in_Owner(uML_A_specification_timeConstraint_timeConstraint);
	
	uML_A_start_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_start_executionSpecification_executionSpecification = factory->createLiteralInteger_in_Owner(uML_A_start_executionSpecification_executionSpecification);
	
	uML_A_start_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_start_executionSpecification_executionSpecification = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_start_executionSpecification_executionSpecification);
	
	uML_A_stateInvariant_owningState_owningState_lowerValue_LiteralInteger_UML_A_stateInvariant_owningState_owningState = factory->createLiteralInteger_in_Owner(uML_A_stateInvariant_owningState_owningState);
	
	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction = factory->createLiteralInteger_in_Owner(uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction);
	
	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_upperValue_LiteralUnlimitedNatural_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction);
	
	uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode = factory->createLiteralInteger_in_Owner(uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode);
	
	uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode = factory->createLiteralInteger_in_Owner(uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode);
	
	uML_A_structuredNode_activity_activity_lowerValue_LiteralInteger_UML_A_structuredNode_activity_activity = factory->createLiteralInteger_in_Owner(uML_A_structuredNode_activity_activity);
	
	uML_A_subsettedProperty_property_property_lowerValue_LiteralInteger_UML_A_subsettedProperty_property_property = factory->createLiteralInteger_in_Owner(uML_A_subsettedProperty_property_property);
	
	uML_A_subsettedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_subsettedProperty_property_property = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_subsettedProperty_property_property);
	
	uML_A_superClass_class_class_lowerValue_LiteralInteger_UML_A_superClass_class_class = factory->createLiteralInteger_in_Owner(uML_A_superClass_class_class);
	
	uML_A_superClass_class_class_upperValue_LiteralUnlimitedNatural_UML_A_superClass_class_class = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_superClass_class_class);
	
	uML_A_supplier_supplierDependency_supplierDependency_lowerValue_LiteralInteger_UML_A_supplier_supplierDependency_supplierDependency = factory->createLiteralInteger_in_Owner(uML_A_supplier_supplierDependency_supplierDependency);
	
	uML_A_supplier_supplierDependency_supplierDependency_upperValue_LiteralUnlimitedNatural_UML_A_supplier_supplierDependency_supplierDependency = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_supplier_supplierDependency_supplierDependency);
	
	uML_A_target_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_target_callOperationAction_callOperationAction = factory->createLiteralInteger_in_Owner(uML_A_target_callOperationAction_callOperationAction);
	
	uML_A_target_destroyObjectAction_destroyObjectAction_lowerValue_LiteralInteger_UML_A_target_destroyObjectAction_destroyObjectAction = factory->createLiteralInteger_in_Owner(uML_A_target_destroyObjectAction_destroyObjectAction);
	
	uML_A_target_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_target_directedRelationship_directedRelationship = factory->createLiteralInteger_in_Owner(uML_A_target_directedRelationship_directedRelationship);
	
	uML_A_target_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_target_directedRelationship_directedRelationship = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_target_directedRelationship_directedRelationship);
	
	uML_A_target_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_target_sendObjectAction_sendObjectAction = factory->createLiteralInteger_in_Owner(uML_A_target_sendObjectAction_sendObjectAction);
	
	uML_A_target_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_target_sendSignalAction_sendSignalAction = factory->createLiteralInteger_in_Owner(uML_A_target_sendSignalAction_sendSignalAction);
	
	uML_A_test_clause_clause_lowerValue_LiteralInteger_UML_A_test_clause_clause = factory->createLiteralInteger_in_Owner(uML_A_test_clause_clause);
	
	uML_A_test_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_test_loopNode_loopNode = factory->createLiteralInteger_in_Owner(uML_A_test_loopNode_loopNode);
	
	uML_A_transformation_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_transformation_objectFlow_objectFlow = factory->createLiteralInteger_in_Owner(uML_A_transformation_objectFlow_objectFlow);
	
	uML_A_transformation_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_transformation_objectFlow_objectFlow = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_transformation_objectFlow_objectFlow);
	
	uML_A_trigger_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_trigger_acceptEventAction_acceptEventAction = factory->createLiteralInteger_in_Owner(uML_A_trigger_acceptEventAction_acceptEventAction);
	
	uML_A_trigger_transition_transition_lowerValue_LiteralInteger_UML_A_trigger_transition_transition = factory->createLiteralInteger_in_Owner(uML_A_trigger_transition_transition);
	
	uML_A_type_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_type_collaborationUse_collaborationUse = factory->createLiteralInteger_in_Owner(uML_A_type_collaborationUse_collaborationUse);
	
	uML_A_type_collaborationUse_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_A_type_collaborationUse_collaborationUse = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_type_collaborationUse_collaborationUse);
	
	uML_A_type_connector_connector_lowerValue_LiteralInteger_UML_A_type_connector_connector = factory->createLiteralInteger_in_Owner(uML_A_type_connector_connector);
	
	uML_A_type_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_type_connector_connector = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_type_connector_connector);
	
	uML_A_type_extensionEnd_extensionEnd_lowerValue_LiteralInteger_UML_A_type_extensionEnd_extensionEnd = factory->createLiteralInteger_in_Owner(uML_A_type_extensionEnd_extensionEnd);
	
	uML_A_type_extensionEnd_extensionEnd_upperValue_LiteralUnlimitedNatural_UML_A_type_extensionEnd_extensionEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_type_extensionEnd_extensionEnd);
	
	uML_A_type_operation_operation_lowerValue_LiteralInteger_UML_A_type_operation_operation = factory->createLiteralInteger_in_Owner(uML_A_type_operation_operation);
	
	uML_A_type_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_type_operation_operation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_type_operation_operation);
	
	uML_A_type_typedElement_typedElement_lowerValue_LiteralInteger_UML_A_type_typedElement_typedElement = factory->createLiteralInteger_in_Owner(uML_A_type_typedElement_typedElement);
	
	uML_A_type_typedElement_typedElement_upperValue_LiteralUnlimitedNatural_UML_A_type_typedElement_typedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_type_typedElement_typedElement);
	
	uML_A_unmarshallType_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_unmarshallType_unmarshallAction_unmarshallAction = factory->createLiteralInteger_in_Owner(uML_A_unmarshallType_unmarshallAction_unmarshallAction);
	
	uML_A_unmarshallType_unmarshallAction_unmarshallAction_upperValue_LiteralUnlimitedNatural_UML_A_unmarshallType_unmarshallAction_unmarshallAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_unmarshallType_unmarshallAction_unmarshallAction);
	
	uML_A_upperBound_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_upperBound_objectNode_objectNode = factory->createLiteralInteger_in_Owner(uML_A_upperBound_objectNode_objectNode);
	
	uML_A_upperValue_owningUpper_owningUpper_lowerValue_LiteralInteger_UML_A_upperValue_owningUpper_owningUpper = factory->createLiteralInteger_in_Owner(uML_A_upperValue_owningUpper_owningUpper);
	
	uML_A_utilizedElement_manifestation_manifestation_lowerValue_LiteralInteger_UML_A_utilizedElement_manifestation_manifestation = factory->createLiteralInteger_in_Owner(uML_A_utilizedElement_manifestation_manifestation);
	
	uML_A_utilizedElement_manifestation_manifestation_upperValue_LiteralUnlimitedNatural_UML_A_utilizedElement_manifestation_manifestation = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_utilizedElement_manifestation_manifestation);
	
	uML_A_value_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_value_linkEndData_linkEndData = factory->createLiteralInteger_in_Owner(uML_A_value_linkEndData_linkEndData);
	
	uML_A_value_owningSlot_owningSlot_lowerValue_LiteralInteger_UML_A_value_owningSlot_owningSlot = factory->createLiteralInteger_in_Owner(uML_A_value_owningSlot_owningSlot);
	
	uML_A_value_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_value_qualifierValue_qualifierValue = factory->createLiteralInteger_in_Owner(uML_A_value_qualifierValue_qualifierValue);
	
	uML_A_value_valuePin_valuePin_lowerValue_LiteralInteger_UML_A_value_valuePin_valuePin = factory->createLiteralInteger_in_Owner(uML_A_value_valuePin_valuePin);
	
	uML_A_value_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_value_valueSpecificationAction_valueSpecificationAction = factory->createLiteralInteger_in_Owner(uML_A_value_valueSpecificationAction_valueSpecificationAction);
	
	uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction = factory->createLiteralInteger_in_Owner(uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction);
	
	uML_A_value_writeVariableAction_writeVariableAction_lowerValue_LiteralInteger_UML_A_value_writeVariableAction_writeVariableAction = factory->createLiteralInteger_in_Owner(uML_A_value_writeVariableAction_writeVariableAction);
	
	uML_A_variable_variableAction_variableAction_lowerValue_LiteralInteger_UML_A_variable_variableAction_variableAction = factory->createLiteralInteger_in_Owner(uML_A_variable_variableAction_variableAction);
	
	uML_A_variable_variableAction_variableAction_upperValue_LiteralUnlimitedNatural_UML_A_variable_variableAction_variableAction = factory->createLiteralUnlimitedNatural_in_Owner(uML_A_variable_variableAction_variableAction);
	
	uML_A_weight_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_weight_activityEdge_activityEdge = factory->createLiteralInteger_in_Owner(uML_A_weight_activityEdge_activityEdge);
	
	uML_A_when_timeEvent_timeEvent_lowerValue_LiteralInteger_UML_A_when_timeEvent_timeEvent = factory->createLiteralInteger_in_Owner(uML_A_when_timeEvent_timeEvent);
	
	uML_Abstraction_mapping_lowerValue_LiteralInteger_UML_Abstraction_mapping = factory->createLiteralInteger_in_Owner(uML_Abstraction_mapping);
	
	uML_AcceptCallAction_result_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptCallAction_result_pins);
	
	uML_AcceptCallAction_trigger_call_event_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptCallAction_trigger_call_event);
	
	uML_AcceptCallAction_unmarshall_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptCallAction_unmarshall);
	
	uML_AcceptEventAction_conforming_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptEventAction_conforming_type);
	
	uML_AcceptEventAction_isUnmarshall_defaultValue_LiteralBoolean_UML_AcceptEventAction_isUnmarshall = factory->createLiteralBoolean_in_Owner(uML_AcceptEventAction_isUnmarshall);
	
	uML_AcceptEventAction_no_input_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptEventAction_no_input_pins);
	
	uML_AcceptEventAction_no_output_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptEventAction_no_output_pins);
	
	uML_AcceptEventAction_one_output_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptEventAction_one_output_pin);
	
	uML_AcceptEventAction_result_lowerValue_LiteralInteger_UML_AcceptEventAction_result = factory->createLiteralInteger_in_Owner(uML_AcceptEventAction_result);
	
	uML_AcceptEventAction_result_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_AcceptEventAction_result);
	
	uML_AcceptEventAction_trigger_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_trigger = factory->createLiteralUnlimitedNatural_in_Owner(uML_AcceptEventAction_trigger);
	
	uML_AcceptEventAction_unmarshall_signal_events_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AcceptEventAction_unmarshall_signal_events);
	
	uML_ActionExecutionSpecification_action_referenced_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActionExecutionSpecification_action_referenced);
	
	uML_ActionInputPin_input_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActionInputPin_input_pin);
	
	uML_ActionInputPin_no_control_or_object_flow_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActionInputPin_no_control_or_object_flow);
	
	uML_ActionInputPin_one_output_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActionInputPin_one_output_pin);
	
	uML_Action_allActions_result_lowerValue_LiteralInteger_UML_Action_allActions_result = factory->createLiteralInteger_in_Owner(uML_Action_allActions_result);
	
	uML_Action_allActions_result_upperValue_LiteralUnlimitedNatural_UML_Action_allActions_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Action_allActions_result);
	
	uML_Action_allActions_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Action_allActions_spec);
	
	uML_Action_allOwnedNodes_result_lowerValue_LiteralInteger_UML_Action_allOwnedNodes_result = factory->createLiteralInteger_in_Owner(uML_Action_allOwnedNodes_result);
	
	uML_Action_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_Action_allOwnedNodes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Action_allOwnedNodes_result);
	
	uML_Action_allOwnedNodes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Action_allOwnedNodes_spec);
	
	uML_Action_containingBehavior_result_lowerValue_LiteralInteger_UML_Action_containingBehavior_result = factory->createLiteralInteger_in_Owner(uML_Action_containingBehavior_result);
	
	uML_Action_containingBehavior_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Action_containingBehavior_spec);
	
	uML_Action_context_lowerValue_LiteralInteger_UML_Action_context = factory->createLiteralInteger_in_Owner(uML_Action_context);
	
	uML_Action_context_result_lowerValue_LiteralInteger_UML_Action_context_result = factory->createLiteralInteger_in_Owner(uML_Action_context_result);
	
	uML_Action_context_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Action_context_spec);
	
	uML_Action_input_lowerValue_LiteralInteger_UML_Action_input = factory->createLiteralInteger_in_Owner(uML_Action_input);
	
	uML_Action_input_upperValue_LiteralUnlimitedNatural_UML_Action_input = factory->createLiteralUnlimitedNatural_in_Owner(uML_Action_input);
	
	uML_Action_isLocallyReentrant_defaultValue_LiteralBoolean_UML_Action_isLocallyReentrant = factory->createLiteralBoolean_in_Owner(uML_Action_isLocallyReentrant);
	
	uML_Action_localPostcondition_lowerValue_LiteralInteger_UML_Action_localPostcondition = factory->createLiteralInteger_in_Owner(uML_Action_localPostcondition);
	
	uML_Action_localPostcondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPostcondition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Action_localPostcondition);
	
	uML_Action_localPrecondition_lowerValue_LiteralInteger_UML_Action_localPrecondition = factory->createLiteralInteger_in_Owner(uML_Action_localPrecondition);
	
	uML_Action_localPrecondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPrecondition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Action_localPrecondition);
	
	uML_Action_output_lowerValue_LiteralInteger_UML_Action_output = factory->createLiteralInteger_in_Owner(uML_Action_output);
	
	uML_Action_output_upperValue_LiteralUnlimitedNatural_UML_Action_output = factory->createLiteralUnlimitedNatural_in_Owner(uML_Action_output);
	
	uML_ActivityContent_containingActivity_containingActivity_lowerValue_LiteralInteger_UML_ActivityContent_containingActivity_containingActivity = factory->createLiteralInteger_in_Owner(uML_ActivityContent_containingActivity_containingActivity);
	
	uML_ActivityEdge_activity_lowerValue_LiteralInteger_UML_ActivityEdge_activity = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_activity);
	
	uML_ActivityEdge_guard_lowerValue_LiteralInteger_UML_ActivityEdge_guard = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_guard);
	
	uML_ActivityEdge_inGroup_lowerValue_LiteralInteger_UML_ActivityEdge_inGroup = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_inGroup);
	
	uML_ActivityEdge_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inGroup = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityEdge_inGroup);
	
	uML_ActivityEdge_inPartition_lowerValue_LiteralInteger_UML_ActivityEdge_inPartition = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_inPartition);
	
	uML_ActivityEdge_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inPartition = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityEdge_inPartition);
	
	uML_ActivityEdge_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityEdge_inStructuredNode = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_inStructuredNode);
	
	uML_ActivityEdge_interrupts_lowerValue_LiteralInteger_UML_ActivityEdge_interrupts = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_interrupts);
	
	uML_ActivityEdge_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityEdge_isConsistentWith_spec);
	
	uML_ActivityEdge_redefinedEdge_lowerValue_LiteralInteger_UML_ActivityEdge_redefinedEdge = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_redefinedEdge);
	
	uML_ActivityEdge_redefinedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_redefinedEdge = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityEdge_redefinedEdge);
	
	uML_ActivityEdge_source_and_target_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityEdge_source_and_target);
	
	uML_ActivityEdge_weight_lowerValue_LiteralInteger_UML_ActivityEdge_weight = factory->createLiteralInteger_in_Owner(uML_ActivityEdge_weight);
	
	uML_ActivityGroup_containedEdge_lowerValue_LiteralInteger_UML_ActivityGroup_containedEdge = factory->createLiteralInteger_in_Owner(uML_ActivityGroup_containedEdge);
	
	uML_ActivityGroup_containedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedEdge = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityGroup_containedEdge);
	
	uML_ActivityGroup_containedNode_lowerValue_LiteralInteger_UML_ActivityGroup_containedNode = factory->createLiteralInteger_in_Owner(uML_ActivityGroup_containedNode);
	
	uML_ActivityGroup_containedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityGroup_containedNode);
	
	uML_ActivityGroup_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityGroup_containingActivity_result = factory->createLiteralInteger_in_Owner(uML_ActivityGroup_containingActivity_result);
	
	uML_ActivityGroup_containingActivity_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityGroup_containingActivity_spec);
	
	uML_ActivityGroup_inActivity_lowerValue_LiteralInteger_UML_ActivityGroup_inActivity = factory->createLiteralInteger_in_Owner(uML_ActivityGroup_inActivity);
	
	uML_ActivityGroup_nodes_and_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityGroup_nodes_and_edges);
	
	uML_ActivityGroup_not_contained_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityGroup_not_contained);
	
	uML_ActivityGroup_subgroup_lowerValue_LiteralInteger_UML_ActivityGroup_subgroup = factory->createLiteralInteger_in_Owner(uML_ActivityGroup_subgroup);
	
	uML_ActivityGroup_subgroup_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_subgroup = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityGroup_subgroup);
	
	uML_ActivityGroup_superGroup_lowerValue_LiteralInteger_UML_ActivityGroup_superGroup = factory->createLiteralInteger_in_Owner(uML_ActivityGroup_superGroup);
	
	uML_ActivityNode_activity_lowerValue_LiteralInteger_UML_ActivityNode_activity = factory->createLiteralInteger_in_Owner(uML_ActivityNode_activity);
	
	uML_ActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityNode_containingActivity_result = factory->createLiteralInteger_in_Owner(uML_ActivityNode_containingActivity_result);
	
	uML_ActivityNode_containingActivity_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityNode_containingActivity_spec);
	
	uML_ActivityNode_inGroup_lowerValue_LiteralInteger_UML_ActivityNode_inGroup = factory->createLiteralInteger_in_Owner(uML_ActivityNode_inGroup);
	
	uML_ActivityNode_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inGroup = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityNode_inGroup);
	
	uML_ActivityNode_inInterruptibleRegion_lowerValue_LiteralInteger_UML_ActivityNode_inInterruptibleRegion = factory->createLiteralInteger_in_Owner(uML_ActivityNode_inInterruptibleRegion);
	
	uML_ActivityNode_inInterruptibleRegion_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inInterruptibleRegion = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityNode_inInterruptibleRegion);
	
	uML_ActivityNode_inPartition_lowerValue_LiteralInteger_UML_ActivityNode_inPartition = factory->createLiteralInteger_in_Owner(uML_ActivityNode_inPartition);
	
	uML_ActivityNode_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inPartition = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityNode_inPartition);
	
	uML_ActivityNode_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityNode_inStructuredNode = factory->createLiteralInteger_in_Owner(uML_ActivityNode_inStructuredNode);
	
	uML_ActivityNode_incoming_lowerValue_LiteralInteger_UML_ActivityNode_incoming = factory->createLiteralInteger_in_Owner(uML_ActivityNode_incoming);
	
	uML_ActivityNode_incoming_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_incoming = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityNode_incoming);
	
	uML_ActivityNode_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityNode_isConsistentWith_spec);
	
	uML_ActivityNode_outgoing_lowerValue_LiteralInteger_UML_ActivityNode_outgoing = factory->createLiteralInteger_in_Owner(uML_ActivityNode_outgoing);
	
	uML_ActivityNode_outgoing_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_outgoing = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityNode_outgoing);
	
	uML_ActivityNode_redefinedNode_lowerValue_LiteralInteger_UML_ActivityNode_redefinedNode = factory->createLiteralInteger_in_Owner(uML_ActivityNode_redefinedNode);
	
	uML_ActivityNode_redefinedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_redefinedNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityNode_redefinedNode);
	
	uML_ActivityParameterNode_has_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityParameterNode_has_parameters);
	
	uML_ActivityParameterNode_no_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityParameterNode_no_edges);
	
	uML_ActivityParameterNode_no_incoming_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityParameterNode_no_incoming_edges);
	
	uML_ActivityParameterNode_no_outgoing_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityParameterNode_no_outgoing_edges);
	
	uML_ActivityParameterNode_same_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityParameterNode_same_type);
	
	uML_ActivityPartition_dimension_not_contained_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityPartition_dimension_not_contained);
	
	uML_ActivityPartition_edge_lowerValue_LiteralInteger_UML_ActivityPartition_edge = factory->createLiteralInteger_in_Owner(uML_ActivityPartition_edge);
	
	uML_ActivityPartition_edge_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_edge = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityPartition_edge);
	
	uML_ActivityPartition_isDimension_defaultValue_LiteralBoolean_UML_ActivityPartition_isDimension = factory->createLiteralBoolean_in_Owner(uML_ActivityPartition_isDimension);
	
	uML_ActivityPartition_isExternal_defaultValue_LiteralBoolean_UML_ActivityPartition_isExternal = factory->createLiteralBoolean_in_Owner(uML_ActivityPartition_isExternal);
	
	uML_ActivityPartition_node_lowerValue_LiteralInteger_UML_ActivityPartition_node = factory->createLiteralInteger_in_Owner(uML_ActivityPartition_node);
	
	uML_ActivityPartition_node_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_node = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityPartition_node);
	
	uML_ActivityPartition_represents_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityPartition_represents_classifier);
	
	uML_ActivityPartition_represents_lowerValue_LiteralInteger_UML_ActivityPartition_represents = factory->createLiteralInteger_in_Owner(uML_ActivityPartition_represents);
	
	uML_ActivityPartition_represents_property_and_is_contained_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityPartition_represents_property_and_is_contained);
	
	uML_ActivityPartition_represents_property_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ActivityPartition_represents_property);
	
	uML_ActivityPartition_subpartition_lowerValue_LiteralInteger_UML_ActivityPartition_subpartition = factory->createLiteralInteger_in_Owner(uML_ActivityPartition_subpartition);
	
	uML_ActivityPartition_subpartition_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_subpartition = factory->createLiteralUnlimitedNatural_in_Owner(uML_ActivityPartition_subpartition);
	
	uML_ActivityPartition_superPartition_lowerValue_LiteralInteger_UML_ActivityPartition_superPartition = factory->createLiteralInteger_in_Owner(uML_ActivityPartition_superPartition);
	
	uML_Activity_edge_lowerValue_LiteralInteger_UML_Activity_edge = factory->createLiteralInteger_in_Owner(uML_Activity_edge);
	
	uML_Activity_edge_upperValue_LiteralUnlimitedNatural_UML_Activity_edge = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_edge);
	
	uML_Activity_group_lowerValue_LiteralInteger_UML_Activity_group = factory->createLiteralInteger_in_Owner(uML_Activity_group);
	
	uML_Activity_group_upperValue_LiteralUnlimitedNatural_UML_Activity_group = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_group);
	
	uML_Activity_isReadOnly_defaultValue_LiteralBoolean_UML_Activity_isReadOnly = factory->createLiteralBoolean_in_Owner(uML_Activity_isReadOnly);
	
	uML_Activity_isSingleExecution_defaultValue_LiteralBoolean_UML_Activity_isSingleExecution = factory->createLiteralBoolean_in_Owner(uML_Activity_isSingleExecution);
	
	uML_Activity_maximum_one_parameter_node_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Activity_maximum_one_parameter_node);
	
	uML_Activity_maximum_two_parameter_nodes_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Activity_maximum_two_parameter_nodes);
	
	uML_Activity_node_lowerValue_LiteralInteger_UML_Activity_node = factory->createLiteralInteger_in_Owner(uML_Activity_node);
	
	uML_Activity_node_upperValue_LiteralUnlimitedNatural_UML_Activity_node = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_node);
	
	uML_Activity_ownedGroup_lowerValue_LiteralInteger_UML_Activity_ownedGroup = factory->createLiteralInteger_in_Owner(uML_Activity_ownedGroup);
	
	uML_Activity_ownedGroup_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedGroup = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_ownedGroup);
	
	uML_Activity_ownedNode_lowerValue_LiteralInteger_UML_Activity_ownedNode = factory->createLiteralInteger_in_Owner(uML_Activity_ownedNode);
	
	uML_Activity_ownedNode_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_ownedNode);
	
	uML_Activity_partition_lowerValue_LiteralInteger_UML_Activity_partition = factory->createLiteralInteger_in_Owner(uML_Activity_partition);
	
	uML_Activity_partition_upperValue_LiteralUnlimitedNatural_UML_Activity_partition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_partition);
	
	uML_Activity_structuredNode_lowerValue_LiteralInteger_UML_Activity_structuredNode = factory->createLiteralInteger_in_Owner(uML_Activity_structuredNode);
	
	uML_Activity_structuredNode_upperValue_LiteralUnlimitedNatural_UML_Activity_structuredNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_structuredNode);
	
	uML_Activity_variable_lowerValue_LiteralInteger_UML_Activity_variable = factory->createLiteralInteger_in_Owner(uML_Activity_variable);
	
	uML_Activity_variable_upperValue_LiteralUnlimitedNatural_UML_Activity_variable = factory->createLiteralUnlimitedNatural_in_Owner(uML_Activity_variable);
	
	uML_Actor_associations_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Actor_associations);
	
	uML_Actor_must_have_name_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Actor_must_have_name);
	
	uML_AddStructuralFeatureValueAction_insertAt_lowerValue_LiteralInteger_UML_AddStructuralFeatureValueAction_insertAt = factory->createLiteralInteger_in_Owner(uML_AddStructuralFeatureValueAction_insertAt);
	
	uML_AddStructuralFeatureValueAction_insertAt_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AddStructuralFeatureValueAction_insertAt_pin);
	
	uML_AddStructuralFeatureValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddStructuralFeatureValueAction_isReplaceAll = factory->createLiteralBoolean_in_Owner(uML_AddStructuralFeatureValueAction_isReplaceAll);
	
	uML_AddStructuralFeatureValueAction_required_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AddStructuralFeatureValueAction_required_value);
	
	uML_AddVariableValueAction_insertAt_lowerValue_LiteralInteger_UML_AddVariableValueAction_insertAt = factory->createLiteralInteger_in_Owner(uML_AddVariableValueAction_insertAt);
	
	uML_AddVariableValueAction_insertAt_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AddVariableValueAction_insertAt_pin);
	
	uML_AddVariableValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddVariableValueAction_isReplaceAll = factory->createLiteralBoolean_in_Owner(uML_AddVariableValueAction_isReplaceAll);
	
	uML_AddVariableValueAction_required_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AddVariableValueAction_required_value);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralInteger_in_Owner(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralInteger_in_Owner(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralInteger_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralInteger_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralInteger_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralInteger_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_Artifact_fileName_lowerValue_LiteralInteger_UML_Artifact_fileName = factory->createLiteralInteger_in_Owner(uML_Artifact_fileName);
	
	uML_Artifact_manifestation_lowerValue_LiteralInteger_UML_Artifact_manifestation = factory->createLiteralInteger_in_Owner(uML_Artifact_manifestation);
	
	uML_Artifact_manifestation_upperValue_LiteralUnlimitedNatural_UML_Artifact_manifestation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_manifestation);
	
	uML_Artifact_nestedArtifact_lowerValue_LiteralInteger_UML_Artifact_nestedArtifact = factory->createLiteralInteger_in_Owner(uML_Artifact_nestedArtifact);
	
	uML_Artifact_nestedArtifact_upperValue_LiteralUnlimitedNatural_UML_Artifact_nestedArtifact = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_nestedArtifact);
	
	uML_Artifact_ownedAttribute_lowerValue_LiteralInteger_UML_Artifact_ownedAttribute = factory->createLiteralInteger_in_Owner(uML_Artifact_ownedAttribute);
	
	uML_Artifact_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedAttribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_ownedAttribute);
	
	uML_Artifact_ownedOperation_lowerValue_LiteralInteger_UML_Artifact_ownedOperation = factory->createLiteralInteger_in_Owner(uML_Artifact_ownedOperation);
	
	uML_Artifact_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedOperation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Artifact_ownedOperation);
	
	uML_AssociationClass_cannot_be_defined_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AssociationClass_cannot_be_defined);
	
	uML_AssociationClass_disjoint_attributes_ends_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_AssociationClass_disjoint_attributes_ends);
	
	uML_Association_association_ends_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Association_association_ends);
	
	uML_Association_binary_associations_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Association_binary_associations);
	
	uML_Association_endType_result_upperValue_LiteralUnlimitedNatural_UML_Association_endType_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Association_endType_result);
	
	uML_Association_endType_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Association_endType_spec);
	
	uML_Association_endType_upperValue_LiteralUnlimitedNatural_UML_Association_endType = factory->createLiteralUnlimitedNatural_in_Owner(uML_Association_endType);
	
	uML_Association_ends_must_be_typed_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Association_ends_must_be_typed);
	
	uML_Association_isDerived_defaultValue_LiteralBoolean_UML_Association_isDerived = factory->createLiteralBoolean_in_Owner(uML_Association_isDerived);
	
	uML_Association_memberEnd_lowerValue_LiteralInteger_UML_Association_memberEnd = factory->createLiteralInteger_in_Owner(uML_Association_memberEnd);
	
	uML_Association_memberEnd_upperValue_LiteralUnlimitedNatural_UML_Association_memberEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_Association_memberEnd);
	
	uML_Association_navigableOwnedEnd_lowerValue_LiteralInteger_UML_Association_navigableOwnedEnd = factory->createLiteralInteger_in_Owner(uML_Association_navigableOwnedEnd);
	
	uML_Association_navigableOwnedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_navigableOwnedEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_Association_navigableOwnedEnd);
	
	uML_Association_ownedEnd_lowerValue_LiteralInteger_UML_Association_ownedEnd = factory->createLiteralInteger_in_Owner(uML_Association_ownedEnd);
	
	uML_Association_ownedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_ownedEnd = factory->createLiteralUnlimitedNatural_in_Owner(uML_Association_ownedEnd);
	
	uML_Association_specialized_end_number_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Association_specialized_end_number);
	
	uML_Association_specialized_end_types_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Association_specialized_end_types);
	
	uML_BehaviorExecutionSpecification_behavior_lowerValue_LiteralInteger_UML_BehaviorExecutionSpecification_behavior = factory->createLiteralInteger_in_Owner(uML_BehaviorExecutionSpecification_behavior);
	
	uML_Behavior_behavioredClassifier_result_lowerValue_LiteralInteger_UML_Behavior_behavioredClassifier_result = factory->createLiteralInteger_in_Owner(uML_Behavior_behavioredClassifier_result);
	
	uML_Behavior_behavioredClassifier_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_behavioredClassifier_spec);
	
	uML_Behavior_context_lowerValue_LiteralInteger_UML_Behavior_context = factory->createLiteralInteger_in_Owner(uML_Behavior_context);
	
	uML_Behavior_context_result_lowerValue_LiteralInteger_UML_Behavior_context_result = factory->createLiteralInteger_in_Owner(uML_Behavior_context_result);
	
	uML_Behavior_context_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_context_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_context_result);
	
	uML_Behavior_context_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_context_spec);
	
	uML_Behavior_feature_of_context_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_feature_of_context_classifier);
	
	uML_Behavior_inputParameters_result_lowerValue_LiteralInteger_UML_Behavior_inputParameters_result = factory->createLiteralInteger_in_Owner(uML_Behavior_inputParameters_result);
	
	uML_Behavior_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_inputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_inputParameters_result);
	
	uML_Behavior_inputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_inputParameters_spec);
	
	uML_Behavior_isReentrant_defaultValue_LiteralBoolean_UML_Behavior_isReentrant = factory->createLiteralBoolean_in_Owner(uML_Behavior_isReentrant);
	
	uML_Behavior_isReentrant_lowerValue_LiteralInteger_UML_Behavior_isReentrant = factory->createLiteralInteger_in_Owner(uML_Behavior_isReentrant);
	
	uML_Behavior_most_one_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_most_one_behavior);
	
	uML_Behavior_outputParameters_result_lowerValue_LiteralInteger_UML_Behavior_outputParameters_result = factory->createLiteralInteger_in_Owner(uML_Behavior_outputParameters_result);
	
	uML_Behavior_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_outputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_outputParameters_result);
	
	uML_Behavior_outputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_outputParameters_spec);
	
	uML_Behavior_ownedParameterSet_lowerValue_LiteralInteger_UML_Behavior_ownedParameterSet = factory->createLiteralInteger_in_Owner(uML_Behavior_ownedParameterSet);
	
	uML_Behavior_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameterSet = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_ownedParameterSet);
	
	uML_Behavior_ownedParameter_lowerValue_LiteralInteger_UML_Behavior_ownedParameter = factory->createLiteralInteger_in_Owner(uML_Behavior_ownedParameter);
	
	uML_Behavior_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_ownedParameter);
	
	uML_Behavior_parameters_match_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Behavior_parameters_match);
	
	uML_Behavior_postcondition_lowerValue_LiteralInteger_UML_Behavior_postcondition = factory->createLiteralInteger_in_Owner(uML_Behavior_postcondition);
	
	uML_Behavior_postcondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_postcondition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_postcondition);
	
	uML_Behavior_precondition_lowerValue_LiteralInteger_UML_Behavior_precondition = factory->createLiteralInteger_in_Owner(uML_Behavior_precondition);
	
	uML_Behavior_precondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_precondition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_precondition);
	
	uML_Behavior_redefinedBehavior_lowerValue_LiteralInteger_UML_Behavior_redefinedBehavior = factory->createLiteralInteger_in_Owner(uML_Behavior_redefinedBehavior);
	
	uML_Behavior_redefinedBehavior_upperValue_LiteralUnlimitedNatural_UML_Behavior_redefinedBehavior = factory->createLiteralUnlimitedNatural_in_Owner(uML_Behavior_redefinedBehavior);
	
	uML_Behavior_specification_lowerValue_LiteralInteger_UML_Behavior_specification = factory->createLiteralInteger_in_Owner(uML_Behavior_specification);
	
	uML_BehavioralFeature_abstract_no_method_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BehavioralFeature_abstract_no_method);
	
	uML_BehavioralFeature_concurrency_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_BehavioralFeature_concurrency);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_name = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_type = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_type = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type);
	
	uML_BehavioralFeature_inputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_inputParameters_result = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_inputParameters_result);
	
	uML_BehavioralFeature_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_inputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_inputParameters_result);
	
	uML_BehavioralFeature_inputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BehavioralFeature_inputParameters_spec);
	
	uML_BehavioralFeature_isAbstract_defaultValue_LiteralBoolean_UML_BehavioralFeature_isAbstract = factory->createLiteralBoolean_in_Owner(uML_BehavioralFeature_isAbstract);
	
	uML_BehavioralFeature_isDistinguishableFrom_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BehavioralFeature_isDistinguishableFrom_spec);
	
	uML_BehavioralFeature_method_lowerValue_LiteralInteger_UML_BehavioralFeature_method = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_method);
	
	uML_BehavioralFeature_method_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_method = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_method);
	
	uML_BehavioralFeature_outputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_outputParameters_result = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_outputParameters_result);
	
	uML_BehavioralFeature_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_outputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_outputParameters_result);
	
	uML_BehavioralFeature_outputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BehavioralFeature_outputParameters_spec);
	
	uML_BehavioralFeature_ownedParameterSet_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameterSet = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_ownedParameterSet);
	
	uML_BehavioralFeature_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameterSet = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_ownedParameterSet);
	
	uML_BehavioralFeature_ownedParameter_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameter = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_ownedParameter);
	
	uML_BehavioralFeature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_ownedParameter);
	
	uML_BehavioralFeature_raisedException_lowerValue_LiteralInteger_UML_BehavioralFeature_raisedException = factory->createLiteralInteger_in_Owner(uML_BehavioralFeature_raisedException);
	
	uML_BehavioralFeature_raisedException_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_raisedException = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioralFeature_raisedException);
	
	uML_BehavioredClassifier_class_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BehavioredClassifier_class_behavior);
	
	uML_BehavioredClassifier_classifierBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_classifierBehavior = factory->createLiteralInteger_in_Owner(uML_BehavioredClassifier_classifierBehavior);
	
	uML_BehavioredClassifier_getAllImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getAllImplementedInterfaces__return = factory->createLiteralInteger_in_Owner(uML_BehavioredClassifier_getAllImplementedInterfaces__return);
	
	uML_BehavioredClassifier_getAllImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getAllImplementedInterfaces__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioredClassifier_getAllImplementedInterfaces__return);
	
	uML_BehavioredClassifier_getImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getImplementedInterfaces__return = factory->createLiteralInteger_in_Owner(uML_BehavioredClassifier_getImplementedInterfaces__return);
	
	uML_BehavioredClassifier_getImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getImplementedInterfaces__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioredClassifier_getImplementedInterfaces__return);
	
	uML_BehavioredClassifier_interfaceRealization_lowerValue_LiteralInteger_UML_BehavioredClassifier_interfaceRealization = factory->createLiteralInteger_in_Owner(uML_BehavioredClassifier_interfaceRealization);
	
	uML_BehavioredClassifier_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_interfaceRealization = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioredClassifier_interfaceRealization);
	
	uML_BehavioredClassifier_ownedBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_ownedBehavior = factory->createLiteralInteger_in_Owner(uML_BehavioredClassifier_ownedBehavior);
	
	uML_BehavioredClassifier_ownedBehavior_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_ownedBehavior = factory->createLiteralUnlimitedNatural_in_Owner(uML_BehavioredClassifier_ownedBehavior);
	
	uML_BroadcastSignalAction_no_onport_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BroadcastSignalAction_no_onport);
	
	uML_BroadcastSignalAction_number_of_arguments_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BroadcastSignalAction_number_of_arguments);
	
	uML_BroadcastSignalAction_type_ordering_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_BroadcastSignalAction_type_ordering_multiplicity);
	
	uML_CallAction_argument_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallAction_argument_pins);
	
	uML_CallAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallAction_inputParameters_result = factory->createLiteralInteger_in_Owner(uML_CallAction_inputParameters_result);
	
	uML_CallAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_inputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallAction_inputParameters_result);
	
	uML_CallAction_isSynchronous_defaultValue_LiteralBoolean_UML_CallAction_isSynchronous = factory->createLiteralBoolean_in_Owner(uML_CallAction_isSynchronous);
	
	uML_CallAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallAction_outputParameters_result = factory->createLiteralInteger_in_Owner(uML_CallAction_outputParameters_result);
	
	uML_CallAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_outputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallAction_outputParameters_result);
	
	uML_CallAction_result_lowerValue_LiteralInteger_UML_CallAction_result = factory->createLiteralInteger_in_Owner(uML_CallAction_result);
	
	uML_CallAction_result_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallAction_result_pins);
	
	uML_CallAction_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallAction_result);
	
	uML_CallAction_synchronous_call_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallAction_synchronous_call);
	
	uML_CallBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_inputParameters_result = factory->createLiteralInteger_in_Owner(uML_CallBehaviorAction_inputParameters_result);
	
	uML_CallBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_inputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallBehaviorAction_inputParameters_result);
	
	uML_CallBehaviorAction_inputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallBehaviorAction_inputParameters_spec);
	
	uML_CallBehaviorAction_no_onport_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallBehaviorAction_no_onport);
	
	uML_CallBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_outputParameters_result = factory->createLiteralInteger_in_Owner(uML_CallBehaviorAction_outputParameters_result);
	
	uML_CallBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_outputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallBehaviorAction_outputParameters_result);
	
	uML_CallBehaviorAction_outputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallBehaviorAction_outputParameters_spec);
	
	uML_CallOperationAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_inputParameters_result = factory->createLiteralInteger_in_Owner(uML_CallOperationAction_inputParameters_result);
	
	uML_CallOperationAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_inputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallOperationAction_inputParameters_result);
	
	uML_CallOperationAction_inputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallOperationAction_inputParameters_spec);
	
	uML_CallOperationAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_outputParameters_result = factory->createLiteralInteger_in_Owner(uML_CallOperationAction_outputParameters_result);
	
	uML_CallOperationAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_outputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_CallOperationAction_outputParameters_result);
	
	uML_CallOperationAction_outputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallOperationAction_outputParameters_spec);
	
	uML_CallOperationAction_type_target_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CallOperationAction_type_target_pin);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralInteger_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralInteger_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralInteger_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralInteger_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_Class_extension_lowerValue_LiteralInteger_UML_Class_extension = factory->createLiteralInteger_in_Owner(uML_Class_extension);
	
	uML_Class_extension_result_lowerValue_LiteralInteger_UML_Class_extension_result = factory->createLiteralInteger_in_Owner(uML_Class_extension_result);
	
	uML_Class_extension_result_upperValue_LiteralUnlimitedNatural_UML_Class_extension_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_extension_result);
	
	uML_Class_extension_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Class_extension_spec);
	
	uML_Class_extension_upperValue_LiteralUnlimitedNatural_UML_Class_extension = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_extension);
	
	uML_Class_isAbstract_defaultValue_LiteralBoolean_UML_Class_isAbstract = factory->createLiteralBoolean_in_Owner(uML_Class_isAbstract);
	
	uML_Class_isActive_defaultValue_LiteralBoolean_UML_Class_isActive = factory->createLiteralBoolean_in_Owner(uML_Class_isActive);
	
	uML_Class_nestedClassifier_lowerValue_LiteralInteger_UML_Class_nestedClassifier = factory->createLiteralInteger_in_Owner(uML_Class_nestedClassifier);
	
	uML_Class_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Class_nestedClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_nestedClassifier);
	
	uML_Class_ownedAttribute_lowerValue_LiteralInteger_UML_Class_ownedAttribute = factory->createLiteralInteger_in_Owner(uML_Class_ownedAttribute);
	
	uML_Class_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Class_ownedAttribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_ownedAttribute);
	
	uML_Class_ownedOperation_lowerValue_LiteralInteger_UML_Class_ownedOperation = factory->createLiteralInteger_in_Owner(uML_Class_ownedOperation);
	
	uML_Class_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Class_ownedOperation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_ownedOperation);
	
	uML_Class_ownedReception_lowerValue_LiteralInteger_UML_Class_ownedReception = factory->createLiteralInteger_in_Owner(uML_Class_ownedReception);
	
	uML_Class_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Class_ownedReception = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_ownedReception);
	
	uML_Class_passive_class_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Class_passive_class);
	
	uML_Class_superClass_lowerValue_LiteralInteger_UML_Class_superClass = factory->createLiteralInteger_in_Owner(uML_Class_superClass);
	
	uML_Class_superClass_result_lowerValue_LiteralInteger_UML_Class_superClass_result = factory->createLiteralInteger_in_Owner(uML_Class_superClass_result);
	
	uML_Class_superClass_result_upperValue_LiteralUnlimitedNatural_UML_Class_superClass_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_superClass_result);
	
	uML_Class_superClass_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Class_superClass_spec);
	
	uML_Class_superClass_upperValue_LiteralUnlimitedNatural_UML_Class_superClass = factory->createLiteralUnlimitedNatural_in_Owner(uML_Class_superClass);
	
	uML_ClassifierTemplateParameter_actual_is_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter_actual_is_classifier);
	
	uML_ClassifierTemplateParameter_allowSubstitutable_defaultValue_LiteralBoolean_UML_ClassifierTemplateParameter_allowSubstitutable = factory->createLiteralBoolean_in_Owner(uML_ClassifierTemplateParameter_allowSubstitutable);
	
	uML_ClassifierTemplateParameter_constrainingClassifier_lowerValue_LiteralInteger_UML_ClassifierTemplateParameter_constrainingClassifier = factory->createLiteralInteger_in_Owner(uML_ClassifierTemplateParameter_constrainingClassifier);
	
	uML_ClassifierTemplateParameter_constrainingClassifier_upperValue_LiteralUnlimitedNatural_UML_ClassifierTemplateParameter_constrainingClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_ClassifierTemplateParameter_constrainingClassifier);
	
	uML_ClassifierTemplateParameter_constraining_classifiers_constrain_args_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter_constraining_classifiers_constrain_args);
	
	uML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element);
	
	uML_ClassifierTemplateParameter_has_constraining_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter_has_constraining_classifier);
	
	uML_ClassifierTemplateParameter_matching_abstract_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter_matching_abstract);
	
	uML_ClassifierTemplateParameter_parametered_element_no_features_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClassifierTemplateParameter_parametered_element_no_features);
	
	uML_Classifier_allAttributes_result_lowerValue_LiteralInteger_UML_Classifier_allAttributes_result = factory->createLiteralInteger_in_Owner(uML_Classifier_allAttributes_result);
	
	uML_Classifier_allAttributes_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allAttributes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_allAttributes_result);
	
	uML_Classifier_allAttributes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_allAttributes_spec);
	
	uML_Classifier_allFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allFeatures_result = factory->createLiteralInteger_in_Owner(uML_Classifier_allFeatures_result);
	
	uML_Classifier_allFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allFeatures_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_allFeatures_result);
	
	uML_Classifier_allFeatures_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_allFeatures_spec);
	
	uML_Classifier_allParents_result_lowerValue_LiteralInteger_UML_Classifier_allParents_result = factory->createLiteralInteger_in_Owner(uML_Classifier_allParents_result);
	
	uML_Classifier_allParents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allParents_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_allParents_result);
	
	uML_Classifier_allParents_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_allParents_spec);
	
	uML_Classifier_allRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allRealizedInterfaces_result = factory->createLiteralInteger_in_Owner(uML_Classifier_allRealizedInterfaces_result);
	
	uML_Classifier_allRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allRealizedInterfaces_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_allRealizedInterfaces_result);
	
	uML_Classifier_allRealizedInterfaces_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_allRealizedInterfaces_spec);
	
	uML_Classifier_allSlottableFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allSlottableFeatures_result = factory->createLiteralInteger_in_Owner(uML_Classifier_allSlottableFeatures_result);
	
	uML_Classifier_allSlottableFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allSlottableFeatures_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_allSlottableFeatures_result);
	
	uML_Classifier_allSlottableFeatures_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_allSlottableFeatures_spec);
	
	uML_Classifier_allUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allUsedInterfaces_result = factory->createLiteralInteger_in_Owner(uML_Classifier_allUsedInterfaces_result);
	
	uML_Classifier_allUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allUsedInterfaces_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_allUsedInterfaces_result);
	
	uML_Classifier_allUsedInterfaces_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_allUsedInterfaces_spec);
	
	uML_Classifier_attribute_lowerValue_LiteralInteger_UML_Classifier_attribute = factory->createLiteralInteger_in_Owner(uML_Classifier_attribute);
	
	uML_Classifier_attribute_upperValue_LiteralUnlimitedNatural_UML_Classifier_attribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_attribute);
	
	uML_Classifier_collaborationUse_lowerValue_LiteralInteger_UML_Classifier_collaborationUse = factory->createLiteralInteger_in_Owner(uML_Classifier_collaborationUse);
	
	uML_Classifier_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_Classifier_collaborationUse = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_collaborationUse);
	
	uML_Classifier_conformsTo_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_conformsTo_spec);
	
	uML_Classifier_directlyRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyRealizedInterfaces_result = factory->createLiteralInteger_in_Owner(uML_Classifier_directlyRealizedInterfaces_result);
	
	uML_Classifier_directlyRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyRealizedInterfaces_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_directlyRealizedInterfaces_result);
	
	uML_Classifier_directlyRealizedInterfaces_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_directlyRealizedInterfaces_spec);
	
	uML_Classifier_directlyUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyUsedInterfaces_result = factory->createLiteralInteger_in_Owner(uML_Classifier_directlyUsedInterfaces_result);
	
	uML_Classifier_directlyUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyUsedInterfaces_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_directlyUsedInterfaces_result);
	
	uML_Classifier_directlyUsedInterfaces_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_directlyUsedInterfaces_spec);
	
	uML_Classifier_feature_lowerValue_LiteralInteger_UML_Classifier_feature = factory->createLiteralInteger_in_Owner(uML_Classifier_feature);
	
	uML_Classifier_feature_upperValue_LiteralUnlimitedNatural_UML_Classifier_feature = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_feature);
	
	uML_Classifier_general_lowerValue_LiteralInteger_UML_Classifier_general = factory->createLiteralInteger_in_Owner(uML_Classifier_general);
	
	uML_Classifier_general_result_lowerValue_LiteralInteger_UML_Classifier_general_result = factory->createLiteralInteger_in_Owner(uML_Classifier_general_result);
	
	uML_Classifier_general_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_general_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_general_result);
	
	uML_Classifier_general_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_general_spec);
	
	uML_Classifier_general_upperValue_LiteralUnlimitedNatural_UML_Classifier_general = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_general);
	
	uML_Classifier_generalization_lowerValue_LiteralInteger_UML_Classifier_generalization = factory->createLiteralInteger_in_Owner(uML_Classifier_generalization);
	
	uML_Classifier_generalization_upperValue_LiteralUnlimitedNatural_UML_Classifier_generalization = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_generalization);
	
	uML_Classifier_getAllAttributes__return_lowerValue_LiteralInteger_UML_Classifier_getAllAttributes__return = factory->createLiteralInteger_in_Owner(uML_Classifier_getAllAttributes__return);
	
	uML_Classifier_getAllAttributes__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllAttributes__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getAllAttributes__return);
	
	uML_Classifier_getAllOperations__return_lowerValue_LiteralInteger_UML_Classifier_getAllOperations__return = factory->createLiteralInteger_in_Owner(uML_Classifier_getAllOperations__return);
	
	uML_Classifier_getAllOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllOperations__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getAllOperations__return);
	
	uML_Classifier_getAllUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getAllUsedInterfaces__return = factory->createLiteralInteger_in_Owner(uML_Classifier_getAllUsedInterfaces__return);
	
	uML_Classifier_getAllUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllUsedInterfaces__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getAllUsedInterfaces__return);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Type_name = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Type_name);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Type_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Type_name);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Typereturn = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Typereturn);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Typereturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperation_String_String_Type_String_String_Typereturn);
	
	uML_Classifier_getOperations__return_lowerValue_LiteralInteger_UML_Classifier_getOperations__return = factory->createLiteralInteger_in_Owner(uML_Classifier_getOperations__return);
	
	uML_Classifier_getOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperations__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getOperations__return);
	
	uML_Classifier_getUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getUsedInterfaces__return = factory->createLiteralInteger_in_Owner(uML_Classifier_getUsedInterfaces__return);
	
	uML_Classifier_getUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getUsedInterfaces__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_getUsedInterfaces__return);
	
	uML_Classifier_hasVisibilityOf_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_hasVisibilityOf_pre);
	
	uML_Classifier_hasVisibilityOf_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_hasVisibilityOf_spec);
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs_lowerValue_LiteralInteger_UML_Classifier_inherit_NamedElement_NamedElement_inhs = factory->createLiteralInteger_in_Owner(uML_Classifier_inherit_NamedElement_NamedElement_inhs);
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_NamedElement_NamedElement_inhs = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_inherit_NamedElement_NamedElement_inhs);
	
	uML_Classifier_inherit_result_lowerValue_LiteralInteger_UML_Classifier_inherit_result = factory->createLiteralInteger_in_Owner(uML_Classifier_inherit_result);
	
	uML_Classifier_inherit_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_inherit_result);
	
	uML_Classifier_inherit_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_inherit_spec);
	
	uML_Classifier_inheritableMembers_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_inheritableMembers_pre);
	
	uML_Classifier_inheritableMembers_result_lowerValue_LiteralInteger_UML_Classifier_inheritableMembers_result = factory->createLiteralInteger_in_Owner(uML_Classifier_inheritableMembers_result);
	
	uML_Classifier_inheritableMembers_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritableMembers_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_inheritableMembers_result);
	
	uML_Classifier_inheritableMembers_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_inheritableMembers_spec);
	
	uML_Classifier_inheritedMember_lowerValue_LiteralInteger_UML_Classifier_inheritedMember = factory->createLiteralInteger_in_Owner(uML_Classifier_inheritedMember);
	
	uML_Classifier_inheritedMember_result_lowerValue_LiteralInteger_UML_Classifier_inheritedMember_result = factory->createLiteralInteger_in_Owner(uML_Classifier_inheritedMember_result);
	
	uML_Classifier_inheritedMember_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_inheritedMember_result);
	
	uML_Classifier_inheritedMember_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_inheritedMember_spec);
	
	uML_Classifier_inheritedMember_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_inheritedMember);
	
	uML_Classifier_isAbstract_defaultValue_LiteralBoolean_UML_Classifier_isAbstract = factory->createLiteralBoolean_in_Owner(uML_Classifier_isAbstract);
	
	uML_Classifier_isFinalSpecialization_defaultValue_LiteralBoolean_UML_Classifier_isFinalSpecialization = factory->createLiteralBoolean_in_Owner(uML_Classifier_isFinalSpecialization);
	
	uML_Classifier_isSubstitutableFor_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_isSubstitutableFor_spec);
	
	uML_Classifier_isTemplate_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_isTemplate_spec);
	
	uML_Classifier_maps_to_generalization_set_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_maps_to_generalization_set);
	
	uML_Classifier_maySpecializeType_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_maySpecializeType_spec);
	
	uML_Classifier_no_cycles_in_generalization_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_no_cycles_in_generalization);
	
	uML_Classifier_non_final_parents_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_non_final_parents);
	
	uML_Classifier_ownedTemplateSignature_lowerValue_LiteralInteger_UML_Classifier_ownedTemplateSignature = factory->createLiteralInteger_in_Owner(uML_Classifier_ownedTemplateSignature);
	
	uML_Classifier_ownedUseCase_lowerValue_LiteralInteger_UML_Classifier_ownedUseCase = factory->createLiteralInteger_in_Owner(uML_Classifier_ownedUseCase);
	
	uML_Classifier_ownedUseCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_ownedUseCase = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_ownedUseCase);
	
	uML_Classifier_parents_result_lowerValue_LiteralInteger_UML_Classifier_parents_result = factory->createLiteralInteger_in_Owner(uML_Classifier_parents_result);
	
	uML_Classifier_parents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_parents_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_parents_result);
	
	uML_Classifier_parents_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_parents_spec);
	
	uML_Classifier_powertypeExtent_lowerValue_LiteralInteger_UML_Classifier_powertypeExtent = factory->createLiteralInteger_in_Owner(uML_Classifier_powertypeExtent);
	
	uML_Classifier_powertypeExtent_upperValue_LiteralUnlimitedNatural_UML_Classifier_powertypeExtent = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_powertypeExtent);
	
	uML_Classifier_redefinedClassifier_lowerValue_LiteralInteger_UML_Classifier_redefinedClassifier = factory->createLiteralInteger_in_Owner(uML_Classifier_redefinedClassifier);
	
	uML_Classifier_redefinedClassifier_upperValue_LiteralUnlimitedNatural_UML_Classifier_redefinedClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_redefinedClassifier);
	
	uML_Classifier_representation_lowerValue_LiteralInteger_UML_Classifier_representation = factory->createLiteralInteger_in_Owner(uML_Classifier_representation);
	
	uML_Classifier_specialize_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Classifier_specialize_type);
	
	uML_Classifier_substitution_lowerValue_LiteralInteger_UML_Classifier_substitution = factory->createLiteralInteger_in_Owner(uML_Classifier_substitution);
	
	uML_Classifier_substitution_upperValue_LiteralUnlimitedNatural_UML_Classifier_substitution = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_substitution);
	
	uML_Classifier_templateParameter_lowerValue_LiteralInteger_UML_Classifier_templateParameter = factory->createLiteralInteger_in_Owner(uML_Classifier_templateParameter);
	
	uML_Classifier_useCase_lowerValue_LiteralInteger_UML_Classifier_useCase = factory->createLiteralInteger_in_Owner(uML_Classifier_useCase);
	
	uML_Classifier_useCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_useCase = factory->createLiteralUnlimitedNatural_in_Owner(uML_Classifier_useCase);
	
	uML_Clause_bodyOutput_lowerValue_LiteralInteger_UML_Clause_bodyOutput = factory->createLiteralInteger_in_Owner(uML_Clause_bodyOutput);
	
	uML_Clause_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_Clause_bodyOutput = factory->createLiteralUnlimitedNatural_in_Owner(uML_Clause_bodyOutput);
	
	uML_Clause_body_lowerValue_LiteralInteger_UML_Clause_body = factory->createLiteralInteger_in_Owner(uML_Clause_body);
	
	uML_Clause_body_output_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Clause_body_output_pins);
	
	uML_Clause_body_upperValue_LiteralUnlimitedNatural_UML_Clause_body = factory->createLiteralUnlimitedNatural_in_Owner(uML_Clause_body);
	
	uML_Clause_decider_output_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Clause_decider_output);
	
	uML_Clause_predecessorClause_lowerValue_LiteralInteger_UML_Clause_predecessorClause = factory->createLiteralInteger_in_Owner(uML_Clause_predecessorClause);
	
	uML_Clause_predecessorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_predecessorClause = factory->createLiteralUnlimitedNatural_in_Owner(uML_Clause_predecessorClause);
	
	uML_Clause_successorClause_lowerValue_LiteralInteger_UML_Clause_successorClause = factory->createLiteralInteger_in_Owner(uML_Clause_successorClause);
	
	uML_Clause_successorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_successorClause = factory->createLiteralUnlimitedNatural_in_Owner(uML_Clause_successorClause);
	
	uML_Clause_test_and_body_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Clause_test_and_body);
	
	uML_Clause_test_upperValue_LiteralUnlimitedNatural_UML_Clause_test = factory->createLiteralUnlimitedNatural_in_Owner(uML_Clause_test);
	
	uML_ClearAssociationAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClearAssociationAction_multiplicity);
	
	uML_ClearAssociationAction_same_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClearAssociationAction_same_type);
	
	uML_ClearStructuralFeatureAction_multiplicity_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClearStructuralFeatureAction_multiplicity_of_result);
	
	uML_ClearStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_ClearStructuralFeatureAction_result = factory->createLiteralInteger_in_Owner(uML_ClearStructuralFeatureAction_result);
	
	uML_ClearStructuralFeatureAction_type_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ClearStructuralFeatureAction_type_of_result);
	
	uML_CollaborationUse_client_elements_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CollaborationUse_client_elements);
	
	uML_CollaborationUse_connectors_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CollaborationUse_connectors);
	
	uML_CollaborationUse_every_role_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CollaborationUse_every_role);
	
	uML_CollaborationUse_roleBinding_lowerValue_LiteralInteger_UML_CollaborationUse_roleBinding = factory->createLiteralInteger_in_Owner(uML_CollaborationUse_roleBinding);
	
	uML_CollaborationUse_roleBinding_upperValue_LiteralUnlimitedNatural_UML_CollaborationUse_roleBinding = factory->createLiteralUnlimitedNatural_in_Owner(uML_CollaborationUse_roleBinding);
	
	uML_Collaboration_collaborationRole_lowerValue_LiteralInteger_UML_Collaboration_collaborationRole = factory->createLiteralInteger_in_Owner(uML_Collaboration_collaborationRole);
	
	uML_Collaboration_collaborationRole_upperValue_LiteralUnlimitedNatural_UML_Collaboration_collaborationRole = factory->createLiteralUnlimitedNatural_in_Owner(uML_Collaboration_collaborationRole);
	
	uML_CombinedFragment_break_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CombinedFragment_break);
	
	uML_CombinedFragment_cfragmentGate_lowerValue_LiteralInteger_UML_CombinedFragment_cfragmentGate = factory->createLiteralInteger_in_Owner(uML_CombinedFragment_cfragmentGate);
	
	uML_CombinedFragment_cfragmentGate_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_cfragmentGate = factory->createLiteralUnlimitedNatural_in_Owner(uML_CombinedFragment_cfragmentGate);
	
	uML_CombinedFragment_consider_and_ignore_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CombinedFragment_consider_and_ignore);
	
	uML_CombinedFragment_interactionOperator_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_CombinedFragment_interactionOperator);
	
	uML_CombinedFragment_operand_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_operand = factory->createLiteralUnlimitedNatural_in_Owner(uML_CombinedFragment_operand);
	
	uML_CombinedFragment_opt_loop_break_neg_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CombinedFragment_opt_loop_break_neg);
	
	uML_Comment_annotatedElement_lowerValue_LiteralInteger_UML_Comment_annotatedElement = factory->createLiteralInteger_in_Owner(uML_Comment_annotatedElement);
	
	uML_Comment_annotatedElement_upperValue_LiteralUnlimitedNatural_UML_Comment_annotatedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_Comment_annotatedElement);
	
	uML_Comment_body_lowerValue_LiteralInteger_UML_Comment_body = factory->createLiteralInteger_in_Owner(uML_Comment_body);
	
	uML_CommunicationPath_association_ends_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CommunicationPath_association_ends);
	
	uML_ComponentRealization_abstraction_lowerValue_LiteralInteger_UML_ComponentRealization_abstraction = factory->createLiteralInteger_in_Owner(uML_ComponentRealization_abstraction);
	
	uML_ComponentRealization_realizingClassifier_upperValue_LiteralUnlimitedNatural_UML_ComponentRealization_realizingClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_ComponentRealization_realizingClassifier);
	
	uML_Component_isIndirectlyInstantiated_defaultValue_LiteralBoolean_UML_Component_isIndirectlyInstantiated = factory->createLiteralBoolean_in_Owner(uML_Component_isIndirectlyInstantiated);
	
	uML_Component_no_nested_classifiers_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Component_no_nested_classifiers);
	
	uML_Component_no_packaged_elements_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Component_no_packaged_elements);
	
	uML_Component_packagedElement_lowerValue_LiteralInteger_UML_Component_packagedElement = factory->createLiteralInteger_in_Owner(uML_Component_packagedElement);
	
	uML_Component_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Component_packagedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_Component_packagedElement);
	
	uML_Component_provided_lowerValue_LiteralInteger_UML_Component_provided = factory->createLiteralInteger_in_Owner(uML_Component_provided);
	
	uML_Component_provided_result_lowerValue_LiteralInteger_UML_Component_provided_result = factory->createLiteralInteger_in_Owner(uML_Component_provided_result);
	
	uML_Component_provided_result_upperValue_LiteralUnlimitedNatural_UML_Component_provided_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Component_provided_result);
	
	uML_Component_provided_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Component_provided_spec);
	
	uML_Component_provided_upperValue_LiteralUnlimitedNatural_UML_Component_provided = factory->createLiteralUnlimitedNatural_in_Owner(uML_Component_provided);
	
	uML_Component_realization_lowerValue_LiteralInteger_UML_Component_realization = factory->createLiteralInteger_in_Owner(uML_Component_realization);
	
	uML_Component_realization_upperValue_LiteralUnlimitedNatural_UML_Component_realization = factory->createLiteralUnlimitedNatural_in_Owner(uML_Component_realization);
	
	uML_Component_required_lowerValue_LiteralInteger_UML_Component_required = factory->createLiteralInteger_in_Owner(uML_Component_required);
	
	uML_Component_required_result_lowerValue_LiteralInteger_UML_Component_required_result = factory->createLiteralInteger_in_Owner(uML_Component_required_result);
	
	uML_Component_required_result_upperValue_LiteralUnlimitedNatural_UML_Component_required_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Component_required_result);
	
	uML_Component_required_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Component_required_spec);
	
	uML_Component_required_upperValue_LiteralUnlimitedNatural_UML_Component_required = factory->createLiteralUnlimitedNatural_in_Owner(uML_Component_required);
	
	uML_ConditionalNode_allActions_result_lowerValue_LiteralInteger_UML_ConditionalNode_allActions_result = factory->createLiteralInteger_in_Owner(uML_ConditionalNode_allActions_result);
	
	uML_ConditionalNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_allActions_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConditionalNode_allActions_result);
	
	uML_ConditionalNode_allActions_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_allActions_spec);
	
	uML_ConditionalNode_clause_no_predecessor_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_clause_no_predecessor);
	
	uML_ConditionalNode_clause_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_clause = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConditionalNode_clause);
	
	uML_ConditionalNode_executable_nodes_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_executable_nodes);
	
	uML_ConditionalNode_isAssured_defaultValue_LiteralBoolean_UML_ConditionalNode_isAssured = factory->createLiteralBoolean_in_Owner(uML_ConditionalNode_isAssured);
	
	uML_ConditionalNode_isDeterminate_defaultValue_LiteralBoolean_UML_ConditionalNode_isDeterminate = factory->createLiteralBoolean_in_Owner(uML_ConditionalNode_isDeterminate);
	
	uML_ConditionalNode_matching_output_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_matching_output_pins);
	
	uML_ConditionalNode_no_input_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_no_input_pins);
	
	uML_ConditionalNode_one_clause_with_executable_node_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_one_clause_with_executable_node);
	
	uML_ConditionalNode_result_lowerValue_LiteralInteger_UML_ConditionalNode_result = factory->createLiteralInteger_in_Owner(uML_ConditionalNode_result);
	
	uML_ConditionalNode_result_no_incoming_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConditionalNode_result_no_incoming);
	
	uML_ConditionalNode_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConditionalNode_result);
	
	uML_ConnectableElement_end_lowerValue_LiteralInteger_UML_ConnectableElement_end = factory->createLiteralInteger_in_Owner(uML_ConnectableElement_end);
	
	uML_ConnectableElement_end_result_lowerValue_LiteralInteger_UML_ConnectableElement_end_result = factory->createLiteralInteger_in_Owner(uML_ConnectableElement_end_result);
	
	uML_ConnectableElement_end_result_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConnectableElement_end_result);
	
	uML_ConnectableElement_end_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectableElement_end_spec);
	
	uML_ConnectableElement_end_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConnectableElement_end);
	
	uML_ConnectableElement_templateParameter_lowerValue_LiteralInteger_UML_ConnectableElement_templateParameter = factory->createLiteralInteger_in_Owner(uML_ConnectableElement_templateParameter);
	
	uML_ConnectionPointReference_entry_lowerValue_LiteralInteger_UML_ConnectionPointReference_entry = factory->createLiteralInteger_in_Owner(uML_ConnectionPointReference_entry);
	
	uML_ConnectionPointReference_entry_pseudostates_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectionPointReference_entry_pseudostates);
	
	uML_ConnectionPointReference_entry_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_entry = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConnectionPointReference_entry);
	
	uML_ConnectionPointReference_exit_lowerValue_LiteralInteger_UML_ConnectionPointReference_exit = factory->createLiteralInteger_in_Owner(uML_ConnectionPointReference_exit);
	
	uML_ConnectionPointReference_exit_pseudostates_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectionPointReference_exit_pseudostates);
	
	uML_ConnectionPointReference_exit_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_exit = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConnectionPointReference_exit);
	
	uML_ConnectionPointReference_state_lowerValue_LiteralInteger_UML_ConnectionPointReference_state = factory->createLiteralInteger_in_Owner(uML_ConnectionPointReference_state);
	
	uML_ConnectorEnd_definingEnd_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd = factory->createLiteralInteger_in_Owner(uML_ConnectorEnd_definingEnd);
	
	uML_ConnectorEnd_definingEnd_result_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd_result = factory->createLiteralInteger_in_Owner(uML_ConnectorEnd_definingEnd_result);
	
	uML_ConnectorEnd_definingEnd_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectorEnd_definingEnd_spec);
	
	uML_ConnectorEnd_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectorEnd_multiplicity);
	
	uML_ConnectorEnd_partWithPort_lowerValue_LiteralInteger_UML_ConnectorEnd_partWithPort = factory->createLiteralInteger_in_Owner(uML_ConnectorEnd_partWithPort);
	
	uML_ConnectorEnd_part_with_port_empty_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectorEnd_part_with_port_empty);
	
	uML_ConnectorEnd_role_and_part_with_port_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectorEnd_role_and_part_with_port);
	
	uML_ConnectorEnd_role_lowerValue_LiteralInteger_UML_ConnectorEnd_role = factory->createLiteralInteger_in_Owner(uML_ConnectorEnd_role);
	
	uML_ConnectorEnd_role_upperValue_LiteralUnlimitedNatural_UML_ConnectorEnd_role = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConnectorEnd_role);
	
	uML_ConnectorEnd_self_part_with_port_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConnectorEnd_self_part_with_port);
	
	uML_Connector_contract_lowerValue_LiteralInteger_UML_Connector_contract = factory->createLiteralInteger_in_Owner(uML_Connector_contract);
	
	uML_Connector_contract_upperValue_LiteralUnlimitedNatural_UML_Connector_contract = factory->createLiteralUnlimitedNatural_in_Owner(uML_Connector_contract);
	
	uML_Connector_end_lowerValue_LiteralInteger_UML_Connector_end = factory->createLiteralInteger_in_Owner(uML_Connector_end);
	
	uML_Connector_end_upperValue_LiteralUnlimitedNatural_UML_Connector_end = factory->createLiteralUnlimitedNatural_in_Owner(uML_Connector_end);
	
	uML_Connector_kind_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Connector_kind_spec);
	
	uML_Connector_redefinedConnector_lowerValue_LiteralInteger_UML_Connector_redefinedConnector = factory->createLiteralInteger_in_Owner(uML_Connector_redefinedConnector);
	
	uML_Connector_redefinedConnector_upperValue_LiteralUnlimitedNatural_UML_Connector_redefinedConnector = factory->createLiteralUnlimitedNatural_in_Owner(uML_Connector_redefinedConnector);
	
	uML_Connector_roles_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Connector_roles);
	
	uML_Connector_type_lowerValue_LiteralInteger_UML_Connector_type = factory->createLiteralInteger_in_Owner(uML_Connector_type);
	
	uML_Connector_types_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Connector_types);
	
	uML_ConsiderIgnoreFragment_consider_or_ignore_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConsiderIgnoreFragment_consider_or_ignore);
	
	uML_ConsiderIgnoreFragment_message_lowerValue_LiteralInteger_UML_ConsiderIgnoreFragment_message = factory->createLiteralInteger_in_Owner(uML_ConsiderIgnoreFragment_message);
	
	uML_ConsiderIgnoreFragment_message_upperValue_LiteralUnlimitedNatural_UML_ConsiderIgnoreFragment_message = factory->createLiteralUnlimitedNatural_in_Owner(uML_ConsiderIgnoreFragment_message);
	
	uML_ConsiderIgnoreFragment_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ConsiderIgnoreFragment_type);
	
	uML_Constraint_boolean_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Constraint_boolean_value);
	
	uML_Constraint_constrainedElement_lowerValue_LiteralInteger_UML_Constraint_constrainedElement = factory->createLiteralInteger_in_Owner(uML_Constraint_constrainedElement);
	
	uML_Constraint_constrainedElement_upperValue_LiteralUnlimitedNatural_UML_Constraint_constrainedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_Constraint_constrainedElement);
	
	uML_Constraint_context_lowerValue_LiteralInteger_UML_Constraint_context = factory->createLiteralInteger_in_Owner(uML_Constraint_context);
	
	uML_Constraint_no_side_effects_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Constraint_no_side_effects);
	
	uML_Constraint_not_apply_to_self_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Constraint_not_apply_to_self);
	
	uML_Continuation_first_or_last_interaction_fragment_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Continuation_first_or_last_interaction_fragment);
	
	uML_Continuation_global_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Continuation_global);
	
	uML_Continuation_same_name_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Continuation_same_name);
	
	uML_Continuation_setting_defaultValue_LiteralBoolean_UML_Continuation_setting = factory->createLiteralBoolean_in_Owner(uML_Continuation_setting);
	
	uML_ControlFlow_object_nodes_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ControlFlow_object_nodes);
	
	uML_CreateLinkAction_association_not_abstract_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateLinkAction_association_not_abstract);
	
	uML_CreateLinkAction_endData_lowerValue_LiteralInteger_UML_CreateLinkAction_endData = factory->createLiteralInteger_in_Owner(uML_CreateLinkAction_endData);
	
	uML_CreateLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_CreateLinkAction_endData = factory->createLiteralUnlimitedNatural_in_Owner(uML_CreateLinkAction_endData);
	
	uML_CreateLinkObjectAction_association_class_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateLinkObjectAction_association_class);
	
	uML_CreateLinkObjectAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateLinkObjectAction_multiplicity);
	
	uML_CreateLinkObjectAction_type_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateLinkObjectAction_type_of_result);
	
	uML_CreateObjectAction_classifier_not_abstract_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateObjectAction_classifier_not_abstract);
	
	uML_CreateObjectAction_classifier_not_association_class_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateObjectAction_classifier_not_association_class);
	
	uML_CreateObjectAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateObjectAction_multiplicity);
	
	uML_CreateObjectAction_same_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_CreateObjectAction_same_type);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralInteger_in_Owner(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralInteger_in_Owner(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralInteger_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralInteger_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralInteger_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralInteger_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_DataType_ownedAttribute_lowerValue_LiteralInteger_UML_DataType_ownedAttribute = factory->createLiteralInteger_in_Owner(uML_DataType_ownedAttribute);
	
	uML_DataType_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedAttribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_ownedAttribute);
	
	uML_DataType_ownedOperation_lowerValue_LiteralInteger_UML_DataType_ownedOperation = factory->createLiteralInteger_in_Owner(uML_DataType_ownedOperation);
	
	uML_DataType_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedOperation = factory->createLiteralUnlimitedNatural_in_Owner(uML_DataType_ownedOperation);
	
	uML_DecisionNode_decisionInputFlow_lowerValue_LiteralInteger_UML_DecisionNode_decisionInputFlow = factory->createLiteralInteger_in_Owner(uML_DecisionNode_decisionInputFlow);
	
	uML_DecisionNode_decisionInput_lowerValue_LiteralInteger_UML_DecisionNode_decisionInput = factory->createLiteralInteger_in_Owner(uML_DecisionNode_decisionInput);
	
	uML_DecisionNode_decision_input_flow_incoming_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_decision_input_flow_incoming);
	
	uML_DecisionNode_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_edges);
	
	uML_DecisionNode_incoming_control_one_input_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_incoming_control_one_input_parameter);
	
	uML_DecisionNode_incoming_object_one_input_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_incoming_object_one_input_parameter);
	
	uML_DecisionNode_incoming_outgoing_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_incoming_outgoing_edges);
	
	uML_DecisionNode_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_parameters);
	
	uML_DecisionNode_two_input_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_two_input_parameters);
	
	uML_DecisionNode_zero_input_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DecisionNode_zero_input_parameters);
	
	uML_Dependency_client_upperValue_LiteralUnlimitedNatural_UML_Dependency_client = factory->createLiteralUnlimitedNatural_in_Owner(uML_Dependency_client);
	
	uML_Dependency_supplier_upperValue_LiteralUnlimitedNatural_UML_Dependency_supplier = factory->createLiteralUnlimitedNatural_in_Owner(uML_Dependency_supplier);
	
	uML_DeploymentSpecification_deployed_elements_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DeploymentSpecification_deployed_elements);
	
	uML_DeploymentSpecification_deploymentLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_deploymentLocation = factory->createLiteralInteger_in_Owner(uML_DeploymentSpecification_deploymentLocation);
	
	uML_DeploymentSpecification_deployment_lowerValue_LiteralInteger_UML_DeploymentSpecification_deployment = factory->createLiteralInteger_in_Owner(uML_DeploymentSpecification_deployment);
	
	uML_DeploymentSpecification_deployment_target_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DeploymentSpecification_deployment_target);
	
	uML_DeploymentSpecification_executionLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_executionLocation = factory->createLiteralInteger_in_Owner(uML_DeploymentSpecification_executionLocation);
	
	uML_DeploymentTarget_deployedElement_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement = factory->createLiteralInteger_in_Owner(uML_DeploymentTarget_deployedElement);
	
	uML_DeploymentTarget_deployedElement_result_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement_result = factory->createLiteralInteger_in_Owner(uML_DeploymentTarget_deployedElement_result);
	
	uML_DeploymentTarget_deployedElement_result_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_DeploymentTarget_deployedElement_result);
	
	uML_DeploymentTarget_deployedElement_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DeploymentTarget_deployedElement_spec);
	
	uML_DeploymentTarget_deployedElement_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_DeploymentTarget_deployedElement);
	
	uML_DeploymentTarget_deployment_lowerValue_LiteralInteger_UML_DeploymentTarget_deployment = factory->createLiteralInteger_in_Owner(uML_DeploymentTarget_deployment);
	
	uML_DeploymentTarget_deployment_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployment = factory->createLiteralUnlimitedNatural_in_Owner(uML_DeploymentTarget_deployment);
	
	uML_Deployment_configuration_lowerValue_LiteralInteger_UML_Deployment_configuration = factory->createLiteralInteger_in_Owner(uML_Deployment_configuration);
	
	uML_Deployment_configuration_upperValue_LiteralUnlimitedNatural_UML_Deployment_configuration = factory->createLiteralUnlimitedNatural_in_Owner(uML_Deployment_configuration);
	
	uML_Deployment_deployedArtifact_lowerValue_LiteralInteger_UML_Deployment_deployedArtifact = factory->createLiteralInteger_in_Owner(uML_Deployment_deployedArtifact);
	
	uML_Deployment_deployedArtifact_upperValue_LiteralUnlimitedNatural_UML_Deployment_deployedArtifact = factory->createLiteralUnlimitedNatural_in_Owner(uML_Deployment_deployedArtifact);
	
	uML_DestroyLinkAction_endData_lowerValue_LiteralInteger_UML_DestroyLinkAction_endData = factory->createLiteralInteger_in_Owner(uML_DestroyLinkAction_endData);
	
	uML_DestroyLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_DestroyLinkAction_endData = factory->createLiteralUnlimitedNatural_in_Owner(uML_DestroyLinkAction_endData);
	
	uML_DestroyObjectAction_isDestroyLinks_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyLinks = factory->createLiteralBoolean_in_Owner(uML_DestroyObjectAction_isDestroyLinks);
	
	uML_DestroyObjectAction_isDestroyOwnedObjects_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyOwnedObjects = factory->createLiteralBoolean_in_Owner(uML_DestroyObjectAction_isDestroyOwnedObjects);
	
	uML_DestroyObjectAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DestroyObjectAction_multiplicity);
	
	uML_DestroyObjectAction_no_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DestroyObjectAction_no_type);
	
	uML_DestructionOccurrenceSpecification_no_occurrence_specifications_below_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DestructionOccurrenceSpecification_no_occurrence_specifications_below);
	
	uML_DirectedRelationship_source_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_source = factory->createLiteralUnlimitedNatural_in_Owner(uML_DirectedRelationship_source);
	
	uML_DirectedRelationship_target_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_target = factory->createLiteralUnlimitedNatural_in_Owner(uML_DirectedRelationship_target);
	
	uML_DurationConstraint_firstEvent_lowerValue_LiteralInteger_UML_DurationConstraint_firstEvent = factory->createLiteralInteger_in_Owner(uML_DurationConstraint_firstEvent);
	
	uML_DurationConstraint_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationConstraint_firstEvent = factory->createLiteralUnlimitedNatural_in_Owner(uML_DurationConstraint_firstEvent);
	
	uML_DurationConstraint_first_event_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DurationConstraint_first_event_multiplicity);
	
	uML_DurationConstraint_has_one_or_two_constrainedElements_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DurationConstraint_has_one_or_two_constrainedElements);
	
	uML_DurationObservation_event_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_event = factory->createLiteralUnlimitedNatural_in_Owner(uML_DurationObservation_event);
	
	uML_DurationObservation_firstEvent_lowerValue_LiteralInteger_UML_DurationObservation_firstEvent = factory->createLiteralInteger_in_Owner(uML_DurationObservation_firstEvent);
	
	uML_DurationObservation_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_firstEvent = factory->createLiteralUnlimitedNatural_in_Owner(uML_DurationObservation_firstEvent);
	
	uML_DurationObservation_first_event_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_DurationObservation_first_event_multiplicity);
	
	uML_Duration_expr_lowerValue_LiteralInteger_UML_Duration_expr = factory->createLiteralInteger_in_Owner(uML_Duration_expr);
	
	uML_Duration_no_expr_requires_observation_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Duration_no_expr_requires_observation);
	
	uML_Duration_observation_lowerValue_LiteralInteger_UML_Duration_observation = factory->createLiteralInteger_in_Owner(uML_Duration_observation);
	
	uML_Duration_observation_upperValue_LiteralUnlimitedNatural_UML_Duration_observation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Duration_observation);
	
	uML_ElementImport_alias_lowerValue_LiteralInteger_UML_ElementImport_alias = factory->createLiteralInteger_in_Owner(uML_ElementImport_alias);
	
	uML_ElementImport_getName_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ElementImport_getName_spec);
	
	uML_ElementImport_imported_element_is_public_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ElementImport_imported_element_is_public);
	
	uML_ElementImport_visibility_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_ElementImport_visibility);
	
	uML_ElementImport_visibility_public_or_private_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ElementImport_visibility_public_or_private);
	
	uML_Element_allOwnedElements_result_lowerValue_LiteralInteger_UML_Element_allOwnedElements_result = factory->createLiteralInteger_in_Owner(uML_Element_allOwnedElements_result);
	
	uML_Element_allOwnedElements_result_upperValue_LiteralUnlimitedNatural_UML_Element_allOwnedElements_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_allOwnedElements_result);
	
	uML_Element_allOwnedElements_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Element_allOwnedElements_spec);
	
	uML_Element_getApplicableStereotype_String_Stringreturn_lowerValue_LiteralInteger_UML_Element_getApplicableStereotype_String_Stringreturn = factory->createLiteralInteger_in_Owner(uML_Element_getApplicableStereotype_String_Stringreturn);
	
	uML_Element_getApplicableStereotype_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotype_String_Stringreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getApplicableStereotype_String_Stringreturn);
	
	uML_Element_getApplicableStereotypes__return_lowerValue_LiteralInteger_UML_Element_getApplicableStereotypes__return = factory->createLiteralInteger_in_Owner(uML_Element_getApplicableStereotypes__return);
	
	uML_Element_getApplicableStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotypes__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getApplicableStereotypes__return);
	
	uML_Element_getAppliedStereotype_String_Stringreturn_lowerValue_LiteralInteger_UML_Element_getAppliedStereotype_String_Stringreturn = factory->createLiteralInteger_in_Owner(uML_Element_getAppliedStereotype_String_Stringreturn);
	
	uML_Element_getAppliedStereotype_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotype_String_Stringreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getAppliedStereotype_String_Stringreturn);
	
	uML_Element_getAppliedStereotypes__return_lowerValue_LiteralInteger_UML_Element_getAppliedStereotypes__return = factory->createLiteralInteger_in_Owner(uML_Element_getAppliedStereotypes__return);
	
	uML_Element_getAppliedStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotypes__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getAppliedStereotypes__return);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn = factory->createLiteralInteger_in_Owner(uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn);
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn = factory->createLiteralInteger_in_Owner(uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn);
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn);
	
	uML_Element_getKeywords__return_lowerValue_LiteralInteger_UML_Element_getKeywords__return = factory->createLiteralInteger_in_Owner(uML_Element_getKeywords__return);
	
	uML_Element_getKeywords__return_upperValue_LiteralUnlimitedNatural_UML_Element_getKeywords__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getKeywords__return);
	
	uML_Element_getModel__return_lowerValue_LiteralInteger_UML_Element_getModel__return = factory->createLiteralInteger_in_Owner(uML_Element_getModel__return);
	
	uML_Element_getModel__return_upperValue_LiteralUnlimitedNatural_UML_Element_getModel__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getModel__return);
	
	uML_Element_getNearestPackage__return_lowerValue_LiteralInteger_UML_Element_getNearestPackage__return = factory->createLiteralInteger_in_Owner(uML_Element_getNearestPackage__return);
	
	uML_Element_getNearestPackage__return_upperValue_LiteralUnlimitedNatural_UML_Element_getNearestPackage__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getNearestPackage__return);
	
	uML_Element_getRelationships_EClass_EClassreturn_lowerValue_LiteralInteger_UML_Element_getRelationships_EClass_EClassreturn = factory->createLiteralInteger_in_Owner(uML_Element_getRelationships_EClass_EClassreturn);
	
	uML_Element_getRelationships_EClass_EClassreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships_EClass_EClassreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getRelationships_EClass_EClassreturn);
	
	uML_Element_getRelationships__return_lowerValue_LiteralInteger_UML_Element_getRelationships__return = factory->createLiteralInteger_in_Owner(uML_Element_getRelationships__return);
	
	uML_Element_getRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getRelationships__return);
	
	uML_Element_getRequiredStereotype_String_Stringreturn_lowerValue_LiteralInteger_UML_Element_getRequiredStereotype_String_Stringreturn = factory->createLiteralInteger_in_Owner(uML_Element_getRequiredStereotype_String_Stringreturn);
	
	uML_Element_getRequiredStereotype_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotype_String_Stringreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getRequiredStereotype_String_Stringreturn);
	
	uML_Element_getRequiredStereotypes__return_lowerValue_LiteralInteger_UML_Element_getRequiredStereotypes__return = factory->createLiteralInteger_in_Owner(uML_Element_getRequiredStereotypes__return);
	
	uML_Element_getRequiredStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotypes__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getRequiredStereotypes__return);
	
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships_EClass_EClassreturn = factory->createLiteralInteger_in_Owner(uML_Element_getSourceDirectedRelationships_EClass_EClassreturn);
	
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships_EClass_EClassreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getSourceDirectedRelationships_EClass_EClassreturn);
	
	uML_Element_getSourceDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships__return = factory->createLiteralInteger_in_Owner(uML_Element_getSourceDirectedRelationships__return);
	
	uML_Element_getSourceDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getSourceDirectedRelationships__return);
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn_lowerValue_LiteralInteger_UML_Element_getStereotypeApplication_Stereotype_Stereotypereturn = factory->createLiteralInteger_in_Owner(uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn);
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplication_Stereotype_Stereotypereturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn);
	
	uML_Element_getStereotypeApplications__return_lowerValue_LiteralInteger_UML_Element_getStereotypeApplications__return = factory->createLiteralInteger_in_Owner(uML_Element_getStereotypeApplications__return);
	
	uML_Element_getStereotypeApplications__return_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplications__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getStereotypeApplications__return);
	
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships_EClass_EClassreturn = factory->createLiteralInteger_in_Owner(uML_Element_getTargetDirectedRelationships_EClass_EClassreturn);
	
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships_EClass_EClassreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getTargetDirectedRelationships_EClass_EClassreturn);
	
	uML_Element_getTargetDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships__return = factory->createLiteralInteger_in_Owner(uML_Element_getTargetDirectedRelationships__return);
	
	uML_Element_getTargetDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getTargetDirectedRelationships__return);
	
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn_lowerValue_LiteralInteger_UML_Element_getValue_Stereotype_String_Stereotype_Stringreturn = factory->createLiteralInteger_in_Owner(uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn);
	
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getValue_Stereotype_String_Stereotype_Stringreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn);
	
	uML_Element_has_owner_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Element_has_owner);
	
	uML_Element_mustBeOwned_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Element_mustBeOwned_spec);
	
	uML_Element_not_own_self_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Element_not_own_self);
	
	uML_Element_ownedComment_lowerValue_LiteralInteger_UML_Element_ownedComment = factory->createLiteralInteger_in_Owner(uML_Element_ownedComment);
	
	uML_Element_ownedComment_upperValue_LiteralUnlimitedNatural_UML_Element_ownedComment = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_ownedComment);
	
	uML_Element_ownedElement_lowerValue_LiteralInteger_UML_Element_ownedElement = factory->createLiteralInteger_in_Owner(uML_Element_ownedElement);
	
	uML_Element_ownedElement_upperValue_LiteralUnlimitedNatural_UML_Element_ownedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_Element_ownedElement);
	
	uML_Element_owner_lowerValue_LiteralInteger_UML_Element_owner = factory->createLiteralInteger_in_Owner(uML_Element_owner);
	
	uML_EncapsulatedClassifier_ownedPort_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort = factory->createLiteralInteger_in_Owner(uML_EncapsulatedClassifier_ownedPort);
	
	uML_EncapsulatedClassifier_ownedPort_result_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort_result = factory->createLiteralInteger_in_Owner(uML_EncapsulatedClassifier_ownedPort_result);
	
	uML_EncapsulatedClassifier_ownedPort_result_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_EncapsulatedClassifier_ownedPort_result);
	
	uML_EncapsulatedClassifier_ownedPort_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_EncapsulatedClassifier_ownedPort_spec);
	
	uML_EncapsulatedClassifier_ownedPort_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort = factory->createLiteralUnlimitedNatural_in_Owner(uML_EncapsulatedClassifier_ownedPort);
	
	uML_EnumerationLiteral_classifier_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_EnumerationLiteral_classifier_spec);
	
	uML_EnumerationLiteral_getClassifiers__return_lowerValue_LiteralInteger_UML_EnumerationLiteral_getClassifiers__return = factory->createLiteralInteger_in_Owner(uML_EnumerationLiteral_getClassifiers__return);
	
	uML_EnumerationLiteral_getClassifiers__return_upperValue_LiteralUnlimitedNatural_UML_EnumerationLiteral_getClassifiers__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_EnumerationLiteral_getClassifiers__return);
	
	uML_Enumeration_immutable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Enumeration_immutable);
	
	uML_Enumeration_ownedLiteral_lowerValue_LiteralInteger_UML_Enumeration_ownedLiteral = factory->createLiteralInteger_in_Owner(uML_Enumeration_ownedLiteral);
	
	uML_Enumeration_ownedLiteral_upperValue_LiteralUnlimitedNatural_UML_Enumeration_ownedLiteral = factory->createLiteralUnlimitedNatural_in_Owner(uML_Enumeration_ownedLiteral);
	
	uML_ExceptionHandler_edge_source_target_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExceptionHandler_edge_source_target);
	
	uML_ExceptionHandler_exceptionType_upperValue_LiteralUnlimitedNatural_UML_ExceptionHandler_exceptionType = factory->createLiteralUnlimitedNatural_in_Owner(uML_ExceptionHandler_exceptionType);
	
	uML_ExceptionHandler_exception_input_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExceptionHandler_exception_input_type);
	
	uML_ExceptionHandler_handler_body_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExceptionHandler_handler_body_edges);
	
	uML_ExceptionHandler_handler_body_owner_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExceptionHandler_handler_body_owner);
	
	uML_ExceptionHandler_one_input_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExceptionHandler_one_input);
	
	uML_ExceptionHandler_output_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExceptionHandler_output_pins);
	
	uML_ExecutableNode_handler_lowerValue_LiteralInteger_UML_ExecutableNode_handler = factory->createLiteralInteger_in_Owner(uML_ExecutableNode_handler);
	
	uML_ExecutableNode_handler_upperValue_LiteralUnlimitedNatural_UML_ExecutableNode_handler = factory->createLiteralUnlimitedNatural_in_Owner(uML_ExecutableNode_handler);
	
	uML_ExecutionSpecification_same_lifeline_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExecutionSpecification_same_lifeline);
	
	uML_ExpansionNode_regionAsInput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsInput = factory->createLiteralInteger_in_Owner(uML_ExpansionNode_regionAsInput);
	
	uML_ExpansionNode_regionAsOutput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsOutput = factory->createLiteralInteger_in_Owner(uML_ExpansionNode_regionAsOutput);
	
	uML_ExpansionNode_region_as_input_or_output_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExpansionNode_region_as_input_or_output);
	
	uML_ExpansionRegion_inputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_inputElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_ExpansionRegion_inputElement);
	
	uML_ExpansionRegion_mode_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_ExpansionRegion_mode);
	
	uML_ExpansionRegion_outputElement_lowerValue_LiteralInteger_UML_ExpansionRegion_outputElement = factory->createLiteralInteger_in_Owner(uML_ExpansionRegion_outputElement);
	
	uML_ExpansionRegion_outputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_outputElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_ExpansionRegion_outputElement);
	
	uML_Expression_operand_lowerValue_LiteralInteger_UML_Expression_operand = factory->createLiteralInteger_in_Owner(uML_Expression_operand);
	
	uML_Expression_operand_upperValue_LiteralUnlimitedNatural_UML_Expression_operand = factory->createLiteralUnlimitedNatural_in_Owner(uML_Expression_operand);
	
	uML_Expression_symbol_lowerValue_LiteralInteger_UML_Expression_symbol = factory->createLiteralInteger_in_Owner(uML_Expression_symbol);
	
	uML_Extend_condition_lowerValue_LiteralInteger_UML_Extend_condition = factory->createLiteralInteger_in_Owner(uML_Extend_condition);
	
	uML_Extend_extensionLocation_upperValue_LiteralUnlimitedNatural_UML_Extend_extensionLocation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Extend_extensionLocation);
	
	uML_Extend_extension_points_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Extend_extension_points);
	
	uML_ExtensionEnd_aggregation_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExtensionEnd_aggregation);
	
	uML_ExtensionEnd_lowerBound_result_lowerValue_LiteralInteger_UML_ExtensionEnd_lowerBound_result = factory->createLiteralInteger_in_Owner(uML_ExtensionEnd_lowerBound_result);
	
	uML_ExtensionEnd_lowerBound_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExtensionEnd_lowerBound_spec);
	
	uML_ExtensionEnd_lower_lowerValue_LiteralInteger_UML_ExtensionEnd_lower = factory->createLiteralInteger_in_Owner(uML_ExtensionEnd_lower);
	
	uML_ExtensionEnd_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExtensionEnd_multiplicity);
	
	uML_ExtensionPoint_must_have_name_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ExtensionPoint_must_have_name);
	
	uML_Extension_getStereotypeEnd__return_lowerValue_LiteralInteger_UML_Extension_getStereotypeEnd__return = factory->createLiteralInteger_in_Owner(uML_Extension_getStereotypeEnd__return);
	
	uML_Extension_getStereotypeEnd__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotypeEnd__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Extension_getStereotypeEnd__return);
	
	uML_Extension_getStereotype__return_lowerValue_LiteralInteger_UML_Extension_getStereotype__return = factory->createLiteralInteger_in_Owner(uML_Extension_getStereotype__return);
	
	uML_Extension_getStereotype__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotype__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Extension_getStereotype__return);
	
	uML_Extension_isRequired_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Extension_isRequired_spec);
	
	uML_Extension_is_binary_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Extension_is_binary);
	
	uML_Extension_metaclassEnd_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Extension_metaclassEnd_spec);
	
	uML_Extension_metaclass_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Extension_metaclass_spec);
	
	uML_Extension_non_owned_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Extension_non_owned_end);
	
	uML_Feature_featuringClassifier_lowerValue_LiteralInteger_UML_Feature_featuringClassifier = factory->createLiteralInteger_in_Owner(uML_Feature_featuringClassifier);
	
	uML_Feature_featuringClassifier_upperValue_LiteralUnlimitedNatural_UML_Feature_featuringClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_Feature_featuringClassifier);
	
	uML_Feature_isStatic_defaultValue_LiteralBoolean_UML_Feature_isStatic = factory->createLiteralBoolean_in_Owner(uML_Feature_isStatic);
	
	uML_FinalNode_no_outgoing_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalNode_no_outgoing_edges);
	
	uML_FinalState_cannot_reference_submachine_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalState_cannot_reference_submachine);
	
	uML_FinalState_no_entry_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalState_no_entry_behavior);
	
	uML_FinalState_no_exit_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalState_no_exit_behavior);
	
	uML_FinalState_no_outgoing_transitions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalState_no_outgoing_transitions);
	
	uML_FinalState_no_regions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalState_no_regions);
	
	uML_FinalState_no_state_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FinalState_no_state_behavior);
	
	uML_ForkNode_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ForkNode_edges);
	
	uML_ForkNode_one_incoming_edge_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ForkNode_one_incoming_edge);
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FunctionBehavior_hasAllDataTypeAttributes_spec);
	
	uML_FunctionBehavior_one_output_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FunctionBehavior_one_output_parameter);
	
	uML_FunctionBehavior_types_of_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_FunctionBehavior_types_of_parameters);
	
	uML_Gate_actual_gate_distinguishable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_actual_gate_distinguishable);
	
	uML_Gate_actual_gate_matched_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_actual_gate_matched);
	
	uML_Gate_formal_gate_distinguishable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_formal_gate_distinguishable);
	
	uML_Gate_getName_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_getName_spec);
	
	uML_Gate_getOperand_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_getOperand_spec);
	
	uML_Gate_inside_cf_gate_distinguishable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_inside_cf_gate_distinguishable);
	
	uML_Gate_inside_cf_matched_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_inside_cf_matched);
	
	uML_Gate_isActual_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_isActual_spec);
	
	uML_Gate_isDistinguishableFrom_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_isDistinguishableFrom_spec);
	
	uML_Gate_isFormal_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_isFormal_spec);
	
	uML_Gate_isInsideCF_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_isInsideCF_spec);
	
	uML_Gate_isOutsideCF_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_isOutsideCF_spec);
	
	uML_Gate_matches_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_matches_spec);
	
	uML_Gate_outside_cf_gate_distinguishable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_outside_cf_gate_distinguishable);
	
	uML_Gate_outside_cf_matched_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Gate_outside_cf_matched);
	
	uML_GeneralOrdering_irreflexive_transitive_closure_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_GeneralOrdering_irreflexive_transitive_closure);
	
	uML_GeneralizationSet_generalization_lowerValue_LiteralInteger_UML_GeneralizationSet_generalization = factory->createLiteralInteger_in_Owner(uML_GeneralizationSet_generalization);
	
	uML_GeneralizationSet_generalization_same_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_GeneralizationSet_generalization_same_classifier);
	
	uML_GeneralizationSet_generalization_upperValue_LiteralUnlimitedNatural_UML_GeneralizationSet_generalization = factory->createLiteralUnlimitedNatural_in_Owner(uML_GeneralizationSet_generalization);
	
	uML_GeneralizationSet_isCovering_defaultValue_LiteralBoolean_UML_GeneralizationSet_isCovering = factory->createLiteralBoolean_in_Owner(uML_GeneralizationSet_isCovering);
	
	uML_GeneralizationSet_isDisjoint_defaultValue_LiteralBoolean_UML_GeneralizationSet_isDisjoint = factory->createLiteralBoolean_in_Owner(uML_GeneralizationSet_isDisjoint);
	
	uML_GeneralizationSet_maps_to_generalization_set_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_GeneralizationSet_maps_to_generalization_set);
	
	uML_GeneralizationSet_powertype_lowerValue_LiteralInteger_UML_GeneralizationSet_powertype = factory->createLiteralInteger_in_Owner(uML_GeneralizationSet_powertype);
	
	uML_Generalization_generalizationSet_lowerValue_LiteralInteger_UML_Generalization_generalizationSet = factory->createLiteralInteger_in_Owner(uML_Generalization_generalizationSet);
	
	uML_Generalization_generalizationSet_upperValue_LiteralUnlimitedNatural_UML_Generalization_generalizationSet = factory->createLiteralUnlimitedNatural_in_Owner(uML_Generalization_generalizationSet);
	
	uML_Generalization_isSubstitutable_defaultValue_LiteralBoolean_UML_Generalization_isSubstitutable = factory->createLiteralBoolean_in_Owner(uML_Generalization_isSubstitutable);
	
	uML_Generalization_isSubstitutable_lowerValue_LiteralInteger_UML_Generalization_isSubstitutable = factory->createLiteralInteger_in_Owner(uML_Generalization_isSubstitutable);
	
	uML_Image_content_lowerValue_LiteralInteger_UML_Image_content = factory->createLiteralInteger_in_Owner(uML_Image_content);
	
	uML_Image_format_lowerValue_LiteralInteger_UML_Image_format = factory->createLiteralInteger_in_Owner(uML_Image_format);
	
	uML_Image_location_lowerValue_LiteralInteger_UML_Image_location = factory->createLiteralInteger_in_Owner(uML_Image_location);
	
	uML_InformationFlow_convey_classifiers_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InformationFlow_convey_classifiers);
	
	uML_InformationFlow_conveyed_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_conveyed = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_conveyed);
	
	uML_InformationFlow_informationSource_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationSource = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_informationSource);
	
	uML_InformationFlow_informationTarget_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationTarget = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_informationTarget);
	
	uML_InformationFlow_must_conform_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InformationFlow_must_conform);
	
	uML_InformationFlow_realization_lowerValue_LiteralInteger_UML_InformationFlow_realization = factory->createLiteralInteger_in_Owner(uML_InformationFlow_realization);
	
	uML_InformationFlow_realization_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realization = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_realization);
	
	uML_InformationFlow_realizingActivityEdge_lowerValue_LiteralInteger_UML_InformationFlow_realizingActivityEdge = factory->createLiteralInteger_in_Owner(uML_InformationFlow_realizingActivityEdge);
	
	uML_InformationFlow_realizingActivityEdge_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingActivityEdge = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_realizingActivityEdge);
	
	uML_InformationFlow_realizingConnector_lowerValue_LiteralInteger_UML_InformationFlow_realizingConnector = factory->createLiteralInteger_in_Owner(uML_InformationFlow_realizingConnector);
	
	uML_InformationFlow_realizingConnector_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingConnector = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_realizingConnector);
	
	uML_InformationFlow_realizingMessage_lowerValue_LiteralInteger_UML_InformationFlow_realizingMessage = factory->createLiteralInteger_in_Owner(uML_InformationFlow_realizingMessage);
	
	uML_InformationFlow_realizingMessage_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingMessage = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationFlow_realizingMessage);
	
	uML_InformationFlow_sources_and_targets_kind_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InformationFlow_sources_and_targets_kind);
	
	uML_InformationItem_has_no_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InformationItem_has_no);
	
	uML_InformationItem_not_instantiable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InformationItem_not_instantiable);
	
	uML_InformationItem_represented_lowerValue_LiteralInteger_UML_InformationItem_represented = factory->createLiteralInteger_in_Owner(uML_InformationItem_represented);
	
	uML_InformationItem_represented_upperValue_LiteralUnlimitedNatural_UML_InformationItem_represented = factory->createLiteralUnlimitedNatural_in_Owner(uML_InformationItem_represented);
	
	uML_InformationItem_sources_and_targets_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InformationItem_sources_and_targets);
	
	uML_InitialNode_control_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InitialNode_control_edges);
	
	uML_InitialNode_no_incoming_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InitialNode_no_incoming_edges);
	
	uML_InputPin_outgoing_edges_structured_only_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InputPin_outgoing_edges_structured_only);
	
	uML_InstanceSpecification_classifier_lowerValue_LiteralInteger_UML_InstanceSpecification_classifier = factory->createLiteralInteger_in_Owner(uML_InstanceSpecification_classifier);
	
	uML_InstanceSpecification_classifier_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_classifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_InstanceSpecification_classifier);
	
	uML_InstanceSpecification_defining_feature_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InstanceSpecification_defining_feature);
	
	uML_InstanceSpecification_deployment_artifact_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InstanceSpecification_deployment_artifact);
	
	uML_InstanceSpecification_deployment_target_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InstanceSpecification_deployment_target);
	
	uML_InstanceSpecification_slot_lowerValue_LiteralInteger_UML_InstanceSpecification_slot = factory->createLiteralInteger_in_Owner(uML_InstanceSpecification_slot);
	
	uML_InstanceSpecification_slot_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_slot = factory->createLiteralUnlimitedNatural_in_Owner(uML_InstanceSpecification_slot);
	
	uML_InstanceSpecification_specification_lowerValue_LiteralInteger_UML_InstanceSpecification_specification = factory->createLiteralInteger_in_Owner(uML_InstanceSpecification_specification);
	
	uML_InstanceSpecification_structural_feature_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InstanceSpecification_structural_feature);
	
	uML_InteractionConstraint_dynamic_variables_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionConstraint_dynamic_variables);
	
	uML_InteractionConstraint_global_data_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionConstraint_global_data);
	
	uML_InteractionConstraint_maxint_greater_equal_minint_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionConstraint_maxint_greater_equal_minint);
	
	uML_InteractionConstraint_maxint_lowerValue_LiteralInteger_UML_InteractionConstraint_maxint = factory->createLiteralInteger_in_Owner(uML_InteractionConstraint_maxint);
	
	uML_InteractionConstraint_maxint_positive_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionConstraint_maxint_positive);
	
	uML_InteractionConstraint_minint_lowerValue_LiteralInteger_UML_InteractionConstraint_minint = factory->createLiteralInteger_in_Owner(uML_InteractionConstraint_minint);
	
	uML_InteractionConstraint_minint_maxint_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionConstraint_minint_maxint);
	
	uML_InteractionConstraint_minint_non_negative_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionConstraint_minint_non_negative);
	
	uML_InteractionFragment_covered_lowerValue_LiteralInteger_UML_InteractionFragment_covered = factory->createLiteralInteger_in_Owner(uML_InteractionFragment_covered);
	
	uML_InteractionFragment_covered_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_covered = factory->createLiteralUnlimitedNatural_in_Owner(uML_InteractionFragment_covered);
	
	uML_InteractionFragment_enclosingInteraction_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingInteraction = factory->createLiteralInteger_in_Owner(uML_InteractionFragment_enclosingInteraction);
	
	uML_InteractionFragment_enclosingOperand_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingOperand = factory->createLiteralInteger_in_Owner(uML_InteractionFragment_enclosingOperand);
	
	uML_InteractionFragment_generalOrdering_lowerValue_LiteralInteger_UML_InteractionFragment_generalOrdering = factory->createLiteralInteger_in_Owner(uML_InteractionFragment_generalOrdering);
	
	uML_InteractionFragment_generalOrdering_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_generalOrdering = factory->createLiteralUnlimitedNatural_in_Owner(uML_InteractionFragment_generalOrdering);
	
	uML_InteractionOperand_fragment_lowerValue_LiteralInteger_UML_InteractionOperand_fragment = factory->createLiteralInteger_in_Owner(uML_InteractionOperand_fragment);
	
	uML_InteractionOperand_fragment_upperValue_LiteralUnlimitedNatural_UML_InteractionOperand_fragment = factory->createLiteralUnlimitedNatural_in_Owner(uML_InteractionOperand_fragment);
	
	uML_InteractionOperand_guard_contain_references_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionOperand_guard_contain_references);
	
	uML_InteractionOperand_guard_directly_prior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionOperand_guard_directly_prior);
	
	uML_InteractionOperand_guard_lowerValue_LiteralInteger_UML_InteractionOperand_guard = factory->createLiteralInteger_in_Owner(uML_InteractionOperand_guard);
	
	uML_InteractionUse_actualGate_lowerValue_LiteralInteger_UML_InteractionUse_actualGate = factory->createLiteralInteger_in_Owner(uML_InteractionUse_actualGate);
	
	uML_InteractionUse_actualGate_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_actualGate = factory->createLiteralUnlimitedNatural_in_Owner(uML_InteractionUse_actualGate);
	
	uML_InteractionUse_all_lifelines_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionUse_all_lifelines);
	
	uML_InteractionUse_argument_lowerValue_LiteralInteger_UML_InteractionUse_argument = factory->createLiteralInteger_in_Owner(uML_InteractionUse_argument);
	
	uML_InteractionUse_argument_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_argument = factory->createLiteralUnlimitedNatural_in_Owner(uML_InteractionUse_argument);
	
	uML_InteractionUse_arguments_are_constants_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionUse_arguments_are_constants);
	
	uML_InteractionUse_arguments_correspond_to_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionUse_arguments_correspond_to_parameters);
	
	uML_InteractionUse_gates_match_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionUse_gates_match);
	
	uML_InteractionUse_returnValueRecipient_coverage_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionUse_returnValueRecipient_coverage);
	
	uML_InteractionUse_returnValueRecipient_lowerValue_LiteralInteger_UML_InteractionUse_returnValueRecipient = factory->createLiteralInteger_in_Owner(uML_InteractionUse_returnValueRecipient);
	
	uML_InteractionUse_returnValue_lowerValue_LiteralInteger_UML_InteractionUse_returnValue = factory->createLiteralInteger_in_Owner(uML_InteractionUse_returnValue);
	
	uML_InteractionUse_returnValue_type_recipient_correspondence_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InteractionUse_returnValue_type_recipient_correspondence);
	
	uML_Interaction_action_lowerValue_LiteralInteger_UML_Interaction_action = factory->createLiteralInteger_in_Owner(uML_Interaction_action);
	
	uML_Interaction_action_upperValue_LiteralUnlimitedNatural_UML_Interaction_action = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interaction_action);
	
	uML_Interaction_formalGate_lowerValue_LiteralInteger_UML_Interaction_formalGate = factory->createLiteralInteger_in_Owner(uML_Interaction_formalGate);
	
	uML_Interaction_formalGate_upperValue_LiteralUnlimitedNatural_UML_Interaction_formalGate = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interaction_formalGate);
	
	uML_Interaction_fragment_lowerValue_LiteralInteger_UML_Interaction_fragment = factory->createLiteralInteger_in_Owner(uML_Interaction_fragment);
	
	uML_Interaction_fragment_upperValue_LiteralUnlimitedNatural_UML_Interaction_fragment = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interaction_fragment);
	
	uML_Interaction_lifeline_lowerValue_LiteralInteger_UML_Interaction_lifeline = factory->createLiteralInteger_in_Owner(uML_Interaction_lifeline);
	
	uML_Interaction_lifeline_upperValue_LiteralUnlimitedNatural_UML_Interaction_lifeline = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interaction_lifeline);
	
	uML_Interaction_message_lowerValue_LiteralInteger_UML_Interaction_message = factory->createLiteralInteger_in_Owner(uML_Interaction_message);
	
	uML_Interaction_message_upperValue_LiteralUnlimitedNatural_UML_Interaction_message = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interaction_message);
	
	uML_Interaction_not_contained_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Interaction_not_contained);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralInteger_in_Owner(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralInteger_in_Owner(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralInteger_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralInteger_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralInteger_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralInteger_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType);
	
	uML_Interface_nestedClassifier_lowerValue_LiteralInteger_UML_Interface_nestedClassifier = factory->createLiteralInteger_in_Owner(uML_Interface_nestedClassifier);
	
	uML_Interface_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Interface_nestedClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_nestedClassifier);
	
	uML_Interface_ownedAttribute_lowerValue_LiteralInteger_UML_Interface_ownedAttribute = factory->createLiteralInteger_in_Owner(uML_Interface_ownedAttribute);
	
	uML_Interface_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedAttribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_ownedAttribute);
	
	uML_Interface_ownedOperation_lowerValue_LiteralInteger_UML_Interface_ownedOperation = factory->createLiteralInteger_in_Owner(uML_Interface_ownedOperation);
	
	uML_Interface_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedOperation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_ownedOperation);
	
	uML_Interface_ownedReception_lowerValue_LiteralInteger_UML_Interface_ownedReception = factory->createLiteralInteger_in_Owner(uML_Interface_ownedReception);
	
	uML_Interface_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedReception = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_ownedReception);
	
	uML_Interface_protocol_lowerValue_LiteralInteger_UML_Interface_protocol = factory->createLiteralInteger_in_Owner(uML_Interface_protocol);
	
	uML_Interface_redefinedInterface_lowerValue_LiteralInteger_UML_Interface_redefinedInterface = factory->createLiteralInteger_in_Owner(uML_Interface_redefinedInterface);
	
	uML_Interface_redefinedInterface_upperValue_LiteralUnlimitedNatural_UML_Interface_redefinedInterface = factory->createLiteralUnlimitedNatural_in_Owner(uML_Interface_redefinedInterface);
	
	uML_Interface_visibility_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Interface_visibility);
	
	uML_InterruptibleActivityRegion_interruptingEdge_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_interruptingEdge = factory->createLiteralInteger_in_Owner(uML_InterruptibleActivityRegion_interruptingEdge);
	
	uML_InterruptibleActivityRegion_interruptingEdge_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_interruptingEdge = factory->createLiteralUnlimitedNatural_in_Owner(uML_InterruptibleActivityRegion_interruptingEdge);
	
	uML_InterruptibleActivityRegion_interrupting_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_InterruptibleActivityRegion_interrupting_edges);
	
	uML_InterruptibleActivityRegion_node_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_node = factory->createLiteralInteger_in_Owner(uML_InterruptibleActivityRegion_node);
	
	uML_InterruptibleActivityRegion_node_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_node = factory->createLiteralUnlimitedNatural_in_Owner(uML_InterruptibleActivityRegion_node);
	
	uML_InvocationAction_argument_lowerValue_LiteralInteger_UML_InvocationAction_argument = factory->createLiteralInteger_in_Owner(uML_InvocationAction_argument);
	
	uML_InvocationAction_argument_upperValue_LiteralUnlimitedNatural_UML_InvocationAction_argument = factory->createLiteralUnlimitedNatural_in_Owner(uML_InvocationAction_argument);
	
	uML_InvocationAction_onPort_lowerValue_LiteralInteger_UML_InvocationAction_onPort = factory->createLiteralInteger_in_Owner(uML_InvocationAction_onPort);
	
	uML_JoinNode_incoming_object_flow_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_JoinNode_incoming_object_flow);
	
	uML_JoinNode_isCombineDuplicate_defaultValue_LiteralBoolean_UML_JoinNode_isCombineDuplicate = factory->createLiteralBoolean_in_Owner(uML_JoinNode_isCombineDuplicate);
	
	uML_JoinNode_joinSpec_lowerValue_LiteralInteger_UML_JoinNode_joinSpec = factory->createLiteralInteger_in_Owner(uML_JoinNode_joinSpec);
	
	uML_JoinNode_one_outgoing_edge_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_JoinNode_one_outgoing_edge);
	
	uML_Lifeline_coveredBy_lowerValue_LiteralInteger_UML_Lifeline_coveredBy = factory->createLiteralInteger_in_Owner(uML_Lifeline_coveredBy);
	
	uML_Lifeline_coveredBy_upperValue_LiteralUnlimitedNatural_UML_Lifeline_coveredBy = factory->createLiteralUnlimitedNatural_in_Owner(uML_Lifeline_coveredBy);
	
	uML_Lifeline_decomposedAs_lowerValue_LiteralInteger_UML_Lifeline_decomposedAs = factory->createLiteralInteger_in_Owner(uML_Lifeline_decomposedAs);
	
	uML_Lifeline_interaction_uses_share_lifeline_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Lifeline_interaction_uses_share_lifeline);
	
	uML_Lifeline_represents_lowerValue_LiteralInteger_UML_Lifeline_represents = factory->createLiteralInteger_in_Owner(uML_Lifeline_represents);
	
	uML_Lifeline_same_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Lifeline_same_classifier);
	
	uML_Lifeline_selector_int_or_string_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Lifeline_selector_int_or_string);
	
	uML_Lifeline_selector_lowerValue_LiteralInteger_UML_Lifeline_selector = factory->createLiteralInteger_in_Owner(uML_Lifeline_selector);
	
	uML_Lifeline_selector_specified_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Lifeline_selector_specified);
	
	uML_LinkAction_association_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkAction_association_spec);
	
	uML_LinkAction_endData_lowerValue_LiteralInteger_UML_LinkAction_endData = factory->createLiteralInteger_in_Owner(uML_LinkAction_endData);
	
	uML_LinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_LinkAction_endData = factory->createLiteralUnlimitedNatural_in_Owner(uML_LinkAction_endData);
	
	uML_LinkAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_LinkAction_inputValue = factory->createLiteralUnlimitedNatural_in_Owner(uML_LinkAction_inputValue);
	
	uML_LinkAction_not_static_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkAction_not_static);
	
	uML_LinkAction_same_association_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkAction_same_association);
	
	uML_LinkAction_same_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkAction_same_pins);
	
	uML_LinkEndCreationData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndCreationData_allPins_result = factory->createLiteralInteger_in_Owner(uML_LinkEndCreationData_allPins_result);
	
	uML_LinkEndCreationData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndCreationData_allPins_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_LinkEndCreationData_allPins_result);
	
	uML_LinkEndCreationData_allPins_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndCreationData_allPins_spec);
	
	uML_LinkEndCreationData_insertAt_lowerValue_LiteralInteger_UML_LinkEndCreationData_insertAt = factory->createLiteralInteger_in_Owner(uML_LinkEndCreationData_insertAt);
	
	uML_LinkEndCreationData_insertAt_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndCreationData_insertAt_pin);
	
	uML_LinkEndCreationData_isReplaceAll_defaultValue_LiteralBoolean_UML_LinkEndCreationData_isReplaceAll = factory->createLiteralBoolean_in_Owner(uML_LinkEndCreationData_isReplaceAll);
	
	uML_LinkEndData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndData_allPins_result = factory->createLiteralInteger_in_Owner(uML_LinkEndData_allPins_result);
	
	uML_LinkEndData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_allPins_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_LinkEndData_allPins_result);
	
	uML_LinkEndData_allPins_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndData_allPins_spec);
	
	uML_LinkEndData_end_object_input_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndData_end_object_input_pin);
	
	uML_LinkEndData_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndData_multiplicity);
	
	uML_LinkEndData_property_is_association_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndData_property_is_association_end);
	
	uML_LinkEndData_qualifier_lowerValue_LiteralInteger_UML_LinkEndData_qualifier = factory->createLiteralInteger_in_Owner(uML_LinkEndData_qualifier);
	
	uML_LinkEndData_qualifier_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_qualifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_LinkEndData_qualifier);
	
	uML_LinkEndData_qualifiers_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndData_qualifiers);
	
	uML_LinkEndData_same_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndData_same_type);
	
	uML_LinkEndData_value_lowerValue_LiteralInteger_UML_LinkEndData_value = factory->createLiteralInteger_in_Owner(uML_LinkEndData_value);
	
	uML_LinkEndDestructionData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndDestructionData_allPins_result = factory->createLiteralInteger_in_Owner(uML_LinkEndDestructionData_allPins_result);
	
	uML_LinkEndDestructionData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndDestructionData_allPins_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_LinkEndDestructionData_allPins_result);
	
	uML_LinkEndDestructionData_allPins_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndDestructionData_allPins_spec);
	
	uML_LinkEndDestructionData_destroyAt_lowerValue_LiteralInteger_UML_LinkEndDestructionData_destroyAt = factory->createLiteralInteger_in_Owner(uML_LinkEndDestructionData_destroyAt);
	
	uML_LinkEndDestructionData_destroyAt_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LinkEndDestructionData_destroyAt_pin);
	
	uML_LinkEndDestructionData_isDestroyDuplicates_defaultValue_LiteralBoolean_UML_LinkEndDestructionData_isDestroyDuplicates = factory->createLiteralBoolean_in_Owner(uML_LinkEndDestructionData_isDestroyDuplicates);
	
	uML_LiteralBoolean_booleanValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralBoolean_booleanValue_spec);
	
	uML_LiteralBoolean_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralBoolean_isComputable_spec);
	
	uML_LiteralBoolean_value_defaultValue_LiteralBoolean_UML_LiteralBoolean_value = factory->createLiteralBoolean_in_Owner(uML_LiteralBoolean_value);
	
	uML_LiteralInteger_integerValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralInteger_integerValue_spec);
	
	uML_LiteralInteger_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralInteger_isComputable_spec);
	
	uML_LiteralInteger_value_defaultValue_LiteralInteger_UML_LiteralInteger_value = factory->createLiteralInteger_in_Owner(uML_LiteralInteger_value);
	
	uML_LiteralNull_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralNull_isComputable_spec);
	
	uML_LiteralNull_isNull_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralNull_isNull_spec);
	
	uML_LiteralReal_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralReal_isComputable_spec);
	
	uML_LiteralReal_realValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralReal_realValue_spec);
	
	uML_LiteralString_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralString_isComputable_spec);
	
	uML_LiteralString_stringValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralString_stringValue_spec);
	
	uML_LiteralString_value_lowerValue_LiteralInteger_UML_LiteralString_value = factory->createLiteralInteger_in_Owner(uML_LiteralString_value);
	
	uML_LiteralUnlimitedNatural_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralUnlimitedNatural_isComputable_spec);
	
	uML_LiteralUnlimitedNatural_unlimitedValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LiteralUnlimitedNatural_unlimitedValue_spec);
	
	uML_LiteralUnlimitedNatural_value_defaultValue_LiteralUnlimitedNatural_UML_LiteralUnlimitedNatural_value = factory->createLiteralUnlimitedNatural_in_Owner(uML_LiteralUnlimitedNatural_value);
	
	uML_LoopNode_allActions_result_lowerValue_LiteralInteger_UML_LoopNode_allActions_result = factory->createLiteralInteger_in_Owner(uML_LoopNode_allActions_result);
	
	uML_LoopNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_allActions_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_allActions_result);
	
	uML_LoopNode_allActions_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_allActions_spec);
	
	uML_LoopNode_bodyOutput_lowerValue_LiteralInteger_UML_LoopNode_bodyOutput = factory->createLiteralInteger_in_Owner(uML_LoopNode_bodyOutput);
	
	uML_LoopNode_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyOutput = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_bodyOutput);
	
	uML_LoopNode_bodyPart_lowerValue_LiteralInteger_UML_LoopNode_bodyPart = factory->createLiteralInteger_in_Owner(uML_LoopNode_bodyPart);
	
	uML_LoopNode_bodyPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyPart = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_bodyPart);
	
	uML_LoopNode_body_output_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_body_output_pins);
	
	uML_LoopNode_executable_nodes_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_executable_nodes);
	
	uML_LoopNode_input_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_input_edges);
	
	uML_LoopNode_isTestedFirst_defaultValue_LiteralBoolean_UML_LoopNode_isTestedFirst = factory->createLiteralBoolean_in_Owner(uML_LoopNode_isTestedFirst);
	
	uML_LoopNode_loopVariableInput_lowerValue_LiteralInteger_UML_LoopNode_loopVariableInput = factory->createLiteralInteger_in_Owner(uML_LoopNode_loopVariableInput);
	
	uML_LoopNode_loopVariableInput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariableInput = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_loopVariableInput);
	
	uML_LoopNode_loopVariable_lowerValue_LiteralInteger_UML_LoopNode_loopVariable = factory->createLiteralInteger_in_Owner(uML_LoopNode_loopVariable);
	
	uML_LoopNode_loopVariable_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariable = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_loopVariable);
	
	uML_LoopNode_loop_variable_outgoing_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_loop_variable_outgoing);
	
	uML_LoopNode_matching_loop_variables_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_matching_loop_variables);
	
	uML_LoopNode_matching_output_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_matching_output_pins);
	
	uML_LoopNode_matching_result_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_matching_result_pins);
	
	uML_LoopNode_result_lowerValue_LiteralInteger_UML_LoopNode_result = factory->createLiteralInteger_in_Owner(uML_LoopNode_result);
	
	uML_LoopNode_result_no_incoming_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_result_no_incoming);
	
	uML_LoopNode_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_result);
	
	uML_LoopNode_setupPart_lowerValue_LiteralInteger_UML_LoopNode_setupPart = factory->createLiteralInteger_in_Owner(uML_LoopNode_setupPart);
	
	uML_LoopNode_setupPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_setupPart = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_setupPart);
	
	uML_LoopNode_setup_test_and_body_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_setup_test_and_body);
	
	uML_LoopNode_sourceNodes_result_lowerValue_LiteralInteger_UML_LoopNode_sourceNodes_result = factory->createLiteralInteger_in_Owner(uML_LoopNode_sourceNodes_result);
	
	uML_LoopNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_sourceNodes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_sourceNodes_result);
	
	uML_LoopNode_sourceNodes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_LoopNode_sourceNodes_spec);
	
	uML_LoopNode_test_upperValue_LiteralUnlimitedNatural_UML_LoopNode_test = factory->createLiteralUnlimitedNatural_in_Owner(uML_LoopNode_test);
	
	uML_MergeNode_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MergeNode_edges);
	
	uML_MergeNode_one_outgoing_edge_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MergeNode_one_outgoing_edge);
	
	uML_MessageEnd_enclosingFragment_result_lowerValue_LiteralInteger_UML_MessageEnd_enclosingFragment_result = factory->createLiteralInteger_in_Owner(uML_MessageEnd_enclosingFragment_result);
	
	uML_MessageEnd_enclosingFragment_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_enclosingFragment_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_MessageEnd_enclosingFragment_result);
	
	uML_MessageEnd_enclosingFragment_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_enclosingFragment_spec);
	
	uML_MessageEnd_isReceive_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_isReceive_pre);
	
	uML_MessageEnd_isReceive_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_isReceive_spec);
	
	uML_MessageEnd_isSend_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_isSend_pre);
	
	uML_MessageEnd_isSend_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_isSend_spec);
	
	uML_MessageEnd_message_lowerValue_LiteralInteger_UML_MessageEnd_message = factory->createLiteralInteger_in_Owner(uML_MessageEnd_message);
	
	uML_MessageEnd_oppositeEnd_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_oppositeEnd_pre);
	
	uML_MessageEnd_oppositeEnd_result_lowerValue_LiteralInteger_UML_MessageEnd_oppositeEnd_result = factory->createLiteralInteger_in_Owner(uML_MessageEnd_oppositeEnd_result);
	
	uML_MessageEnd_oppositeEnd_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_oppositeEnd_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_MessageEnd_oppositeEnd_result);
	
	uML_MessageEnd_oppositeEnd_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MessageEnd_oppositeEnd_spec);
	
	uML_Message_argument_lowerValue_LiteralInteger_UML_Message_argument = factory->createLiteralInteger_in_Owner(uML_Message_argument);
	
	uML_Message_argument_upperValue_LiteralUnlimitedNatural_UML_Message_argument = factory->createLiteralUnlimitedNatural_in_Owner(uML_Message_argument);
	
	uML_Message_arguments_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_arguments);
	
	uML_Message_cannot_cross_boundaries_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_cannot_cross_boundaries);
	
	uML_Message_connector_lowerValue_LiteralInteger_UML_Message_connector = factory->createLiteralInteger_in_Owner(uML_Message_connector);
	
	uML_Message_isDistinguishableFrom_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_isDistinguishableFrom_spec);
	
	uML_Message_messageKind_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_Message_messageKind);
	
	uML_Message_messageKind_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_messageKind_spec);
	
	uML_Message_messageSort_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_Message_messageSort);
	
	uML_Message_occurrence_specifications_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_occurrence_specifications);
	
	uML_Message_receiveEvent_lowerValue_LiteralInteger_UML_Message_receiveEvent = factory->createLiteralInteger_in_Owner(uML_Message_receiveEvent);
	
	uML_Message_sendEvent_lowerValue_LiteralInteger_UML_Message_sendEvent = factory->createLiteralInteger_in_Owner(uML_Message_sendEvent);
	
	uML_Message_sending_receiving_message_event_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_sending_receiving_message_event);
	
	uML_Message_signature_is_operation_reply_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_signature_is_operation_reply);
	
	uML_Message_signature_is_operation_request_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_signature_is_operation_request);
	
	uML_Message_signature_is_signal_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_signature_is_signal);
	
	uML_Message_signature_lowerValue_LiteralInteger_UML_Message_signature = factory->createLiteralInteger_in_Owner(uML_Message_signature);
	
	uML_Message_signature_refer_to_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Message_signature_refer_to);
	
	uML_Model_viewpoint_lowerValue_LiteralInteger_UML_Model_viewpoint = factory->createLiteralInteger_in_Owner(uML_Model_viewpoint);
	
	uML_MultiplicityElement_compatibleWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_compatibleWith_spec);
	
	uML_MultiplicityElement_includesMultiplicity_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_includesMultiplicity_pre);
	
	uML_MultiplicityElement_includesMultiplicity_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_includesMultiplicity_spec);
	
	uML_MultiplicityElement_isMultivalued_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_isMultivalued_pre);
	
	uML_MultiplicityElement_isMultivalued_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_isMultivalued_spec);
	
	uML_MultiplicityElement_isOrdered_defaultValue_LiteralBoolean_UML_MultiplicityElement_isOrdered = factory->createLiteralBoolean_in_Owner(uML_MultiplicityElement_isOrdered);
	
	uML_MultiplicityElement_isUnique_defaultValue_LiteralBoolean_UML_MultiplicityElement_isUnique = factory->createLiteralBoolean_in_Owner(uML_MultiplicityElement_isUnique);
	
	uML_MultiplicityElement_is_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_is_spec);
	
	uML_MultiplicityElement_lowerBound_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_lowerBound_spec);
	
	uML_MultiplicityElement_lowerValue_lowerValue_LiteralInteger_UML_MultiplicityElement_lowerValue = factory->createLiteralInteger_in_Owner(uML_MultiplicityElement_lowerValue);
	
	uML_MultiplicityElement_lower_defaultValue_LiteralInteger_UML_MultiplicityElement_lower = factory->createLiteralInteger_in_Owner(uML_MultiplicityElement_lower);
	
	uML_MultiplicityElement_lower_ge_0_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_lower_ge_0);
	
	uML_MultiplicityElement_lower_is_integer_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_lower_is_integer);
	
	uML_MultiplicityElement_lower_result_lowerValue_LiteralInteger_UML_MultiplicityElement_lower_result = factory->createLiteralInteger_in_Owner(uML_MultiplicityElement_lower_result);
	
	uML_MultiplicityElement_lower_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_lower_spec);
	
	uML_MultiplicityElement_upperBound_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_upperBound_spec);
	
	uML_MultiplicityElement_upperValue_lowerValue_LiteralInteger_UML_MultiplicityElement_upperValue = factory->createLiteralInteger_in_Owner(uML_MultiplicityElement_upperValue);
	
	uML_MultiplicityElement_upper_defaultValue_LiteralUnlimitedNatural_UML_MultiplicityElement_upper = factory->createLiteralUnlimitedNatural_in_Owner(uML_MultiplicityElement_upper);
	
	uML_MultiplicityElement_upper_ge_lower_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_upper_ge_lower);
	
	uML_MultiplicityElement_upper_is_unlimitedNatural_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_upper_is_unlimitedNatural);
	
	uML_MultiplicityElement_upper_result_lowerValue_LiteralInteger_UML_MultiplicityElement_upper_result = factory->createLiteralInteger_in_Owner(uML_MultiplicityElement_upper_result);
	
	uML_MultiplicityElement_upper_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_upper_spec);
	
	uML_MultiplicityElement_value_specification_constant_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_value_specification_constant);
	
	uML_MultiplicityElement_value_specification_no_side_effects_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_MultiplicityElement_value_specification_no_side_effects);
	
	uML_NamedElement_allNamespaces_result_lowerValue_LiteralInteger_UML_NamedElement_allNamespaces_result = factory->createLiteralInteger_in_Owner(uML_NamedElement_allNamespaces_result);
	
	uML_NamedElement_allNamespaces_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allNamespaces_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_NamedElement_allNamespaces_result);
	
	uML_NamedElement_allNamespaces_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_allNamespaces_spec);
	
	uML_NamedElement_allOwningPackages_result_lowerValue_LiteralInteger_UML_NamedElement_allOwningPackages_result = factory->createLiteralInteger_in_Owner(uML_NamedElement_allOwningPackages_result);
	
	uML_NamedElement_allOwningPackages_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allOwningPackages_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_NamedElement_allOwningPackages_result);
	
	uML_NamedElement_allOwningPackages_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_allOwningPackages_spec);
	
	uML_NamedElement_clientDependency_lowerValue_LiteralInteger_UML_NamedElement_clientDependency = factory->createLiteralInteger_in_Owner(uML_NamedElement_clientDependency);
	
	uML_NamedElement_clientDependency_result_lowerValue_LiteralInteger_UML_NamedElement_clientDependency_result = factory->createLiteralInteger_in_Owner(uML_NamedElement_clientDependency_result);
	
	uML_NamedElement_clientDependency_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_NamedElement_clientDependency_result);
	
	uML_NamedElement_clientDependency_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_clientDependency_spec);
	
	uML_NamedElement_clientDependency_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency = factory->createLiteralUnlimitedNatural_in_Owner(uML_NamedElement_clientDependency);
	
	uML_NamedElement_getLabel_Boolean_Booleanreturn_lowerValue_LiteralInteger_UML_NamedElement_getLabel_Boolean_Booleanreturn = factory->createLiteralInteger_in_Owner(uML_NamedElement_getLabel_Boolean_Booleanreturn);
	
	uML_NamedElement_getLabel_Boolean_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel_Boolean_Booleanreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_NamedElement_getLabel_Boolean_Booleanreturn);
	
	uML_NamedElement_getLabel__return_lowerValue_LiteralInteger_UML_NamedElement_getLabel__return = factory->createLiteralInteger_in_Owner(uML_NamedElement_getLabel__return);
	
	uML_NamedElement_getLabel__return_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_NamedElement_getLabel__return);
	
	uML_NamedElement_has_no_qualified_name_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_has_no_qualified_name);
	
	uML_NamedElement_has_qualified_name_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_has_qualified_name);
	
	uML_NamedElement_isDistinguishableFrom_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_isDistinguishableFrom_spec);
	
	uML_NamedElement_nameExpression_lowerValue_LiteralInteger_UML_NamedElement_nameExpression = factory->createLiteralInteger_in_Owner(uML_NamedElement_nameExpression);
	
	uML_NamedElement_name_lowerValue_LiteralInteger_UML_NamedElement_name = factory->createLiteralInteger_in_Owner(uML_NamedElement_name);
	
	uML_NamedElement_namespace_lowerValue_LiteralInteger_UML_NamedElement_namespace = factory->createLiteralInteger_in_Owner(uML_NamedElement_namespace);
	
	uML_NamedElement_namespace_result_lowerValue_LiteralInteger_UML_NamedElement_namespace_result = factory->createLiteralInteger_in_Owner(uML_NamedElement_namespace_result);
	
	uML_NamedElement_qualifiedName_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName = factory->createLiteralInteger_in_Owner(uML_NamedElement_qualifiedName);
	
	uML_NamedElement_qualifiedName_result_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName_result = factory->createLiteralInteger_in_Owner(uML_NamedElement_qualifiedName_result);
	
	uML_NamedElement_qualifiedName_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_qualifiedName_spec);
	
	uML_NamedElement_separator_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_separator_spec);
	
	uML_NamedElement_visibility_lowerValue_LiteralInteger_UML_NamedElement_visibility = factory->createLiteralInteger_in_Owner(uML_NamedElement_visibility);
	
	uML_NamedElement_visibility_needs_ownership_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_NamedElement_visibility_needs_ownership);
	
	uML_Namespace_cannot_import_ownedMembers_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_cannot_import_ownedMembers);
	
	uML_Namespace_cannot_import_self_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_cannot_import_self);
	
	uML_Namespace_elementImport_lowerValue_LiteralInteger_UML_Namespace_elementImport = factory->createLiteralInteger_in_Owner(uML_Namespace_elementImport);
	
	uML_Namespace_elementImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_elementImport = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_elementImport);
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps = factory->createLiteralInteger_in_Owner(uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps);
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps);
	
	uML_Namespace_excludeCollisions_result_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_result = factory->createLiteralInteger_in_Owner(uML_Namespace_excludeCollisions_result);
	
	uML_Namespace_excludeCollisions_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_excludeCollisions_result);
	
	uML_Namespace_excludeCollisions_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_excludeCollisions_spec);
	
	uML_Namespace_getImportedElements__return_lowerValue_LiteralInteger_UML_Namespace_getImportedElements__return = factory->createLiteralInteger_in_Owner(uML_Namespace_getImportedElements__return);
	
	uML_Namespace_getImportedElements__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedElements__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_getImportedElements__return);
	
	uML_Namespace_getImportedPackages__return_lowerValue_LiteralInteger_UML_Namespace_getImportedPackages__return = factory->createLiteralInteger_in_Owner(uML_Namespace_getImportedPackages__return);
	
	uML_Namespace_getImportedPackages__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedPackages__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_getImportedPackages__return);
	
	uML_Namespace_getNamesOfMember_result_lowerValue_LiteralInteger_UML_Namespace_getNamesOfMember_result = factory->createLiteralInteger_in_Owner(uML_Namespace_getNamesOfMember_result);
	
	uML_Namespace_getNamesOfMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_getNamesOfMember_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_getNamesOfMember_result);
	
	uML_Namespace_getNamesOfMember_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_getNamesOfMember_spec);
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps_lowerValue_LiteralInteger_UML_Namespace_importMembers_PackageableElement_PackageableElement_imps = factory->createLiteralInteger_in_Owner(uML_Namespace_importMembers_PackageableElement_PackageableElement_imps);
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_PackageableElement_PackageableElement_imps = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_importMembers_PackageableElement_PackageableElement_imps);
	
	uML_Namespace_importMembers_result_lowerValue_LiteralInteger_UML_Namespace_importMembers_result = factory->createLiteralInteger_in_Owner(uML_Namespace_importMembers_result);
	
	uML_Namespace_importMembers_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_importMembers_result);
	
	uML_Namespace_importMembers_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_importMembers_spec);
	
	uML_Namespace_importedMember_lowerValue_LiteralInteger_UML_Namespace_importedMember = factory->createLiteralInteger_in_Owner(uML_Namespace_importedMember);
	
	uML_Namespace_importedMember_result_lowerValue_LiteralInteger_UML_Namespace_importedMember_result = factory->createLiteralInteger_in_Owner(uML_Namespace_importedMember_result);
	
	uML_Namespace_importedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_importedMember_result);
	
	uML_Namespace_importedMember_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_importedMember_spec);
	
	uML_Namespace_importedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_importedMember);
	
	uML_Namespace_member_lowerValue_LiteralInteger_UML_Namespace_member = factory->createLiteralInteger_in_Owner(uML_Namespace_member);
	
	uML_Namespace_member_upperValue_LiteralUnlimitedNatural_UML_Namespace_member = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_member);
	
	uML_Namespace_membersAreDistinguishable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_membersAreDistinguishable_spec);
	
	uML_Namespace_members_distinguishable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Namespace_members_distinguishable);
	
	uML_Namespace_ownedMember_lowerValue_LiteralInteger_UML_Namespace_ownedMember = factory->createLiteralInteger_in_Owner(uML_Namespace_ownedMember);
	
	uML_Namespace_ownedMember_result_lowerValue_LiteralInteger_UML_Namespace_ownedMember_result = factory->createLiteralInteger_in_Owner(uML_Namespace_ownedMember_result);
	
	uML_Namespace_ownedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_ownedMember_result);
	
	uML_Namespace_ownedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_ownedMember);
	
	uML_Namespace_ownedRule_lowerValue_LiteralInteger_UML_Namespace_ownedRule = factory->createLiteralInteger_in_Owner(uML_Namespace_ownedRule);
	
	uML_Namespace_ownedRule_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedRule = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_ownedRule);
	
	uML_Namespace_packageImport_lowerValue_LiteralInteger_UML_Namespace_packageImport = factory->createLiteralInteger_in_Owner(uML_Namespace_packageImport);
	
	uML_Namespace_packageImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_packageImport = factory->createLiteralUnlimitedNatural_in_Owner(uML_Namespace_packageImport);
	
	uML_Node_getCommunicationPaths__return_lowerValue_LiteralInteger_UML_Node_getCommunicationPaths__return = factory->createLiteralInteger_in_Owner(uML_Node_getCommunicationPaths__return);
	
	uML_Node_getCommunicationPaths__return_upperValue_LiteralUnlimitedNatural_UML_Node_getCommunicationPaths__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Node_getCommunicationPaths__return);
	
	uML_Node_internal_structure_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Node_internal_structure);
	
	uML_Node_nestedNode_lowerValue_LiteralInteger_UML_Node_nestedNode = factory->createLiteralInteger_in_Owner(uML_Node_nestedNode);
	
	uML_Node_nestedNode_upperValue_LiteralUnlimitedNatural_UML_Node_nestedNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_Node_nestedNode);
	
	uML_ObjectFlow_compatible_types_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_compatible_types);
	
	uML_ObjectFlow_input_and_output_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_input_and_output_parameter);
	
	uML_ObjectFlow_isMulticast_defaultValue_LiteralBoolean_UML_ObjectFlow_isMulticast = factory->createLiteralBoolean_in_Owner(uML_ObjectFlow_isMulticast);
	
	uML_ObjectFlow_isMultireceive_defaultValue_LiteralBoolean_UML_ObjectFlow_isMultireceive = factory->createLiteralBoolean_in_Owner(uML_ObjectFlow_isMultireceive);
	
	uML_ObjectFlow_is_multicast_or_is_multireceive_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_is_multicast_or_is_multireceive);
	
	uML_ObjectFlow_no_executable_nodes_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_no_executable_nodes);
	
	uML_ObjectFlow_same_upper_bounds_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_same_upper_bounds);
	
	uML_ObjectFlow_selection_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_selection_behavior);
	
	uML_ObjectFlow_selection_lowerValue_LiteralInteger_UML_ObjectFlow_selection = factory->createLiteralInteger_in_Owner(uML_ObjectFlow_selection);
	
	uML_ObjectFlow_target_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_target);
	
	uML_ObjectFlow_transformation_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectFlow_transformation_behavior);
	
	uML_ObjectFlow_transformation_lowerValue_LiteralInteger_UML_ObjectFlow_transformation = factory->createLiteralInteger_in_Owner(uML_ObjectFlow_transformation);
	
	uML_ObjectNode_inState_lowerValue_LiteralInteger_UML_ObjectNode_inState = factory->createLiteralInteger_in_Owner(uML_ObjectNode_inState);
	
	uML_ObjectNode_inState_upperValue_LiteralUnlimitedNatural_UML_ObjectNode_inState = factory->createLiteralUnlimitedNatural_in_Owner(uML_ObjectNode_inState);
	
	uML_ObjectNode_input_output_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectNode_input_output_parameter);
	
	uML_ObjectNode_isControlType_defaultValue_LiteralBoolean_UML_ObjectNode_isControlType = factory->createLiteralBoolean_in_Owner(uML_ObjectNode_isControlType);
	
	uML_ObjectNode_object_flow_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectNode_object_flow_edges);
	
	uML_ObjectNode_ordering_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_ObjectNode_ordering);
	
	uML_ObjectNode_selection_behavior_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ObjectNode_selection_behavior);
	
	uML_ObjectNode_selection_lowerValue_LiteralInteger_UML_ObjectNode_selection = factory->createLiteralInteger_in_Owner(uML_ObjectNode_selection);
	
	uML_ObjectNode_upperBound_lowerValue_LiteralInteger_UML_ObjectNode_upperBound = factory->createLiteralInteger_in_Owner(uML_ObjectNode_upperBound);
	
	uML_OccurrenceSpecification_getCovered__return_lowerValue_LiteralInteger_UML_OccurrenceSpecification_getCovered__return = factory->createLiteralInteger_in_Owner(uML_OccurrenceSpecification_getCovered__return);
	
	uML_OccurrenceSpecification_toAfter_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toAfter = factory->createLiteralInteger_in_Owner(uML_OccurrenceSpecification_toAfter);
	
	uML_OccurrenceSpecification_toAfter_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toAfter = factory->createLiteralUnlimitedNatural_in_Owner(uML_OccurrenceSpecification_toAfter);
	
	uML_OccurrenceSpecification_toBefore_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toBefore = factory->createLiteralInteger_in_Owner(uML_OccurrenceSpecification_toBefore);
	
	uML_OccurrenceSpecification_toBefore_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toBefore = factory->createLiteralUnlimitedNatural_in_Owner(uML_OccurrenceSpecification_toBefore);
	
	uML_OpaqueAction_body_lowerValue_LiteralInteger_UML_OpaqueAction_body = factory->createLiteralInteger_in_Owner(uML_OpaqueAction_body);
	
	uML_OpaqueAction_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_body = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueAction_body);
	
	uML_OpaqueAction_inputValue_lowerValue_LiteralInteger_UML_OpaqueAction_inputValue = factory->createLiteralInteger_in_Owner(uML_OpaqueAction_inputValue);
	
	uML_OpaqueAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_inputValue = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueAction_inputValue);
	
	uML_OpaqueAction_language_body_size_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueAction_language_body_size);
	
	uML_OpaqueAction_language_lowerValue_LiteralInteger_UML_OpaqueAction_language = factory->createLiteralInteger_in_Owner(uML_OpaqueAction_language);
	
	uML_OpaqueAction_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_language = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueAction_language);
	
	uML_OpaqueAction_outputValue_lowerValue_LiteralInteger_UML_OpaqueAction_outputValue = factory->createLiteralInteger_in_Owner(uML_OpaqueAction_outputValue);
	
	uML_OpaqueAction_outputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_outputValue = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueAction_outputValue);
	
	uML_OpaqueBehavior_body_lowerValue_LiteralInteger_UML_OpaqueBehavior_body = factory->createLiteralInteger_in_Owner(uML_OpaqueBehavior_body);
	
	uML_OpaqueBehavior_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_body = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueBehavior_body);
	
	uML_OpaqueBehavior_language_lowerValue_LiteralInteger_UML_OpaqueBehavior_language = factory->createLiteralInteger_in_Owner(uML_OpaqueBehavior_language);
	
	uML_OpaqueBehavior_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_language = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueBehavior_language);
	
	uML_OpaqueExpression_behavior_lowerValue_LiteralInteger_UML_OpaqueExpression_behavior = factory->createLiteralInteger_in_Owner(uML_OpaqueExpression_behavior);
	
	uML_OpaqueExpression_body_lowerValue_LiteralInteger_UML_OpaqueExpression_body = factory->createLiteralInteger_in_Owner(uML_OpaqueExpression_body);
	
	uML_OpaqueExpression_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_body = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueExpression_body);
	
	uML_OpaqueExpression_isIntegral_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_isIntegral_spec);
	
	uML_OpaqueExpression_isNonNegative_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_isNonNegative_pre);
	
	uML_OpaqueExpression_isNonNegative_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_isNonNegative_spec);
	
	uML_OpaqueExpression_isPositive_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_isPositive_pre);
	
	uML_OpaqueExpression_isPositive_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_isPositive_spec);
	
	uML_OpaqueExpression_language_body_size_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_language_body_size);
	
	uML_OpaqueExpression_language_lowerValue_LiteralInteger_UML_OpaqueExpression_language = factory->createLiteralInteger_in_Owner(uML_OpaqueExpression_language);
	
	uML_OpaqueExpression_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_language = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueExpression_language);
	
	uML_OpaqueExpression_one_return_result_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_one_return_result_parameter);
	
	uML_OpaqueExpression_only_return_result_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_only_return_result_parameters);
	
	uML_OpaqueExpression_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result = factory->createLiteralInteger_in_Owner(uML_OpaqueExpression_result);
	
	uML_OpaqueExpression_result_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result_result = factory->createLiteralInteger_in_Owner(uML_OpaqueExpression_result_result);
	
	uML_OpaqueExpression_result_result_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_result_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_OpaqueExpression_result_result);
	
	uML_OpaqueExpression_result_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_result_spec);
	
	uML_OpaqueExpression_value_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_value_pre);
	
	uML_OpaqueExpression_value_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OpaqueExpression_value_spec);
	
	uML_OperationTemplateParameter_match_default_signature_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OperationTemplateParameter_match_default_signature);
	
	uML_Operation_at_most_one_return_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_at_most_one_return);
	
	uML_Operation_bodyCondition_lowerValue_LiteralInteger_UML_Operation_bodyCondition = factory->createLiteralInteger_in_Owner(uML_Operation_bodyCondition);
	
	uML_Operation_class_lowerValue_LiteralInteger_UML_Operation_class = factory->createLiteralInteger_in_Owner(uML_Operation_class);
	
	uML_Operation_datatype_lowerValue_LiteralInteger_UML_Operation_datatype = factory->createLiteralInteger_in_Owner(uML_Operation_datatype);
	
	uML_Operation_getReturnResult__return_lowerValue_LiteralInteger_UML_Operation_getReturnResult__return = factory->createLiteralInteger_in_Owner(uML_Operation_getReturnResult__return);
	
	uML_Operation_getReturnResult__return_upperValue_LiteralUnlimitedNatural_UML_Operation_getReturnResult__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_getReturnResult__return);
	
	uML_Operation_interface_lowerValue_LiteralInteger_UML_Operation_interface = factory->createLiteralInteger_in_Owner(uML_Operation_interface);
	
	uML_Operation_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_isConsistentWith_pre);
	
	uML_Operation_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_isConsistentWith_spec);
	
	uML_Operation_isOrdered_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_isOrdered_spec);
	
	uML_Operation_isQuery_defaultValue_LiteralBoolean_UML_Operation_isQuery = factory->createLiteralBoolean_in_Owner(uML_Operation_isQuery);
	
	uML_Operation_isUnique_defaultValue_LiteralBoolean_UML_Operation_isUnique = factory->createLiteralBoolean_in_Owner(uML_Operation_isUnique);
	
	uML_Operation_isUnique_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_isUnique_spec);
	
	uML_Operation_lower_defaultValue_LiteralInteger_UML_Operation_lower = factory->createLiteralInteger_in_Owner(uML_Operation_lower);
	
	uML_Operation_lower_lowerValue_LiteralInteger_UML_Operation_lower = factory->createLiteralInteger_in_Owner(uML_Operation_lower);
	
	uML_Operation_lower_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_lower_spec);
	
	uML_Operation_only_body_for_query_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_only_body_for_query);
	
	uML_Operation_ownedParameter_lowerValue_LiteralInteger_UML_Operation_ownedParameter = factory->createLiteralInteger_in_Owner(uML_Operation_ownedParameter);
	
	uML_Operation_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Operation_ownedParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_ownedParameter);
	
	uML_Operation_postcondition_lowerValue_LiteralInteger_UML_Operation_postcondition = factory->createLiteralInteger_in_Owner(uML_Operation_postcondition);
	
	uML_Operation_postcondition_upperValue_LiteralUnlimitedNatural_UML_Operation_postcondition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_postcondition);
	
	uML_Operation_precondition_lowerValue_LiteralInteger_UML_Operation_precondition = factory->createLiteralInteger_in_Owner(uML_Operation_precondition);
	
	uML_Operation_precondition_upperValue_LiteralUnlimitedNatural_UML_Operation_precondition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_precondition);
	
	uML_Operation_raisedException_lowerValue_LiteralInteger_UML_Operation_raisedException = factory->createLiteralInteger_in_Owner(uML_Operation_raisedException);
	
	uML_Operation_raisedException_upperValue_LiteralUnlimitedNatural_UML_Operation_raisedException = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_raisedException);
	
	uML_Operation_redefinedOperation_lowerValue_LiteralInteger_UML_Operation_redefinedOperation = factory->createLiteralInteger_in_Owner(uML_Operation_redefinedOperation);
	
	uML_Operation_redefinedOperation_upperValue_LiteralUnlimitedNatural_UML_Operation_redefinedOperation = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_redefinedOperation);
	
	uML_Operation_returnResult_result_lowerValue_LiteralInteger_UML_Operation_returnResult_result = factory->createLiteralInteger_in_Owner(uML_Operation_returnResult_result);
	
	uML_Operation_returnResult_result_upperValue_LiteralUnlimitedNatural_UML_Operation_returnResult_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_returnResult_result);
	
	uML_Operation_returnResult_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_returnResult_spec);
	
	uML_Operation_templateParameter_lowerValue_LiteralInteger_UML_Operation_templateParameter = factory->createLiteralInteger_in_Owner(uML_Operation_templateParameter);
	
	uML_Operation_type_lowerValue_LiteralInteger_UML_Operation_type = factory->createLiteralInteger_in_Owner(uML_Operation_type);
	
	uML_Operation_type_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_type_spec);
	
	uML_Operation_upper_defaultValue_LiteralUnlimitedNatural_UML_Operation_upper = factory->createLiteralUnlimitedNatural_in_Owner(uML_Operation_upper);
	
	uML_Operation_upper_lowerValue_LiteralInteger_UML_Operation_upper = factory->createLiteralInteger_in_Owner(uML_Operation_upper);
	
	uML_Operation_upper_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Operation_upper_spec);
	
	uML_OutputPin_incoming_edges_structured_only_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_OutputPin_incoming_edges_structured_only);
	
	uML_PackageImport_public_or_private_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_PackageImport_public_or_private);
	
	uML_PackageImport_visibility_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_PackageImport_visibility);
	
	uML_Package_URI_lowerValue_LiteralInteger_UML_Package_URI = factory->createLiteralInteger_in_Owner(uML_Package_URI);
	
	uML_Package_allApplicableStereotypes_result_lowerValue_LiteralInteger_UML_Package_allApplicableStereotypes_result = factory->createLiteralInteger_in_Owner(uML_Package_allApplicableStereotypes_result);
	
	uML_Package_allApplicableStereotypes_result_upperValue_LiteralUnlimitedNatural_UML_Package_allApplicableStereotypes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_allApplicableStereotypes_result);
	
	uML_Package_allApplicableStereotypes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_allApplicableStereotypes_spec);
	
	uML_Package_applyProfile_Profile_Profilereturn_lowerValue_LiteralInteger_UML_Package_applyProfile_Profile_Profilereturn = factory->createLiteralInteger_in_Owner(uML_Package_applyProfile_Profile_Profilereturn);
	
	uML_Package_applyProfile_Profile_Profilereturn_upperValue_LiteralUnlimitedNatural_UML_Package_applyProfile_Profile_Profilereturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_applyProfile_Profile_Profilereturn);
	
	uML_Package_containingProfile_result_lowerValue_LiteralInteger_UML_Package_containingProfile_result = factory->createLiteralInteger_in_Owner(uML_Package_containingProfile_result);
	
	uML_Package_containingProfile_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_containingProfile_spec);
	
	uML_Package_elements_public_or_private_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_elements_public_or_private);
	
	uML_Package_getAllAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAllAppliedProfiles__return = factory->createLiteralInteger_in_Owner(uML_Package_getAllAppliedProfiles__return);
	
	uML_Package_getAllAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllAppliedProfiles__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getAllAppliedProfiles__return);
	
	uML_Package_getAllProfileApplications__return_lowerValue_LiteralInteger_UML_Package_getAllProfileApplications__return = factory->createLiteralInteger_in_Owner(uML_Package_getAllProfileApplications__return);
	
	uML_Package_getAllProfileApplications__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllProfileApplications__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getAllProfileApplications__return);
	
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn = factory->createLiteralInteger_in_Owner(uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn);
	
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn);
	
	uML_Package_getAppliedProfile_String_Stringreturn_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_Stringreturn = factory->createLiteralInteger_in_Owner(uML_Package_getAppliedProfile_String_Stringreturn);
	
	uML_Package_getAppliedProfile_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_Stringreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getAppliedProfile_String_Stringreturn);
	
	uML_Package_getAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAppliedProfiles__return = factory->createLiteralInteger_in_Owner(uML_Package_getAppliedProfiles__return);
	
	uML_Package_getAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfiles__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getAppliedProfiles__return);
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn = factory->createLiteralInteger_in_Owner(uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn);
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn);
	
	uML_Package_getProfileApplication_Profile_Profilereturn_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_Profilereturn = factory->createLiteralInteger_in_Owner(uML_Package_getProfileApplication_Profile_Profilereturn);
	
	uML_Package_getProfileApplication_Profile_Profilereturn_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_Profilereturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_getProfileApplication_Profile_Profilereturn);
	
	uML_Package_makesVisible_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_makesVisible_pre);
	
	uML_Package_makesVisible_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_makesVisible_spec);
	
	uML_Package_mustBeOwned_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_mustBeOwned_spec);
	
	uML_Package_nestedPackage_lowerValue_LiteralInteger_UML_Package_nestedPackage = factory->createLiteralInteger_in_Owner(uML_Package_nestedPackage);
	
	uML_Package_nestedPackage_result_lowerValue_LiteralInteger_UML_Package_nestedPackage_result = factory->createLiteralInteger_in_Owner(uML_Package_nestedPackage_result);
	
	uML_Package_nestedPackage_result_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_nestedPackage_result);
	
	uML_Package_nestedPackage_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_nestedPackage_spec);
	
	uML_Package_nestedPackage_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_nestedPackage);
	
	uML_Package_nestingPackage_lowerValue_LiteralInteger_UML_Package_nestingPackage = factory->createLiteralInteger_in_Owner(uML_Package_nestingPackage);
	
	uML_Package_ownedStereotype_lowerValue_LiteralInteger_UML_Package_ownedStereotype = factory->createLiteralInteger_in_Owner(uML_Package_ownedStereotype);
	
	uML_Package_ownedStereotype_result_lowerValue_LiteralInteger_UML_Package_ownedStereotype_result = factory->createLiteralInteger_in_Owner(uML_Package_ownedStereotype_result);
	
	uML_Package_ownedStereotype_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_ownedStereotype_result);
	
	uML_Package_ownedStereotype_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_ownedStereotype_spec);
	
	uML_Package_ownedStereotype_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_ownedStereotype);
	
	uML_Package_ownedType_lowerValue_LiteralInteger_UML_Package_ownedType = factory->createLiteralInteger_in_Owner(uML_Package_ownedType);
	
	uML_Package_ownedType_result_lowerValue_LiteralInteger_UML_Package_ownedType_result = factory->createLiteralInteger_in_Owner(uML_Package_ownedType_result);
	
	uML_Package_ownedType_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_ownedType_result);
	
	uML_Package_ownedType_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_ownedType_spec);
	
	uML_Package_ownedType_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_ownedType);
	
	uML_Package_packageMerge_lowerValue_LiteralInteger_UML_Package_packageMerge = factory->createLiteralInteger_in_Owner(uML_Package_packageMerge);
	
	uML_Package_packageMerge_upperValue_LiteralUnlimitedNatural_UML_Package_packageMerge = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_packageMerge);
	
	uML_Package_packagedElement_lowerValue_LiteralInteger_UML_Package_packagedElement = factory->createLiteralInteger_in_Owner(uML_Package_packagedElement);
	
	uML_Package_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Package_packagedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_packagedElement);
	
	uML_Package_profileApplication_lowerValue_LiteralInteger_UML_Package_profileApplication = factory->createLiteralInteger_in_Owner(uML_Package_profileApplication);
	
	uML_Package_profileApplication_upperValue_LiteralUnlimitedNatural_UML_Package_profileApplication = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_profileApplication);
	
	uML_Package_unapplyProfile_Profile_Profilereturn_lowerValue_LiteralInteger_UML_Package_unapplyProfile_Profile_Profilereturn = factory->createLiteralInteger_in_Owner(uML_Package_unapplyProfile_Profile_Profilereturn);
	
	uML_Package_unapplyProfile_Profile_Profilereturn_upperValue_LiteralUnlimitedNatural_UML_Package_unapplyProfile_Profile_Profilereturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_unapplyProfile_Profile_Profilereturn);
	
	uML_Package_visibleMembers_result_lowerValue_LiteralInteger_UML_Package_visibleMembers_result = factory->createLiteralInteger_in_Owner(uML_Package_visibleMembers_result);
	
	uML_Package_visibleMembers_result_upperValue_LiteralUnlimitedNatural_UML_Package_visibleMembers_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Package_visibleMembers_result);
	
	uML_Package_visibleMembers_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Package_visibleMembers_spec);
	
	uML_PackageableElement_namespace_needs_visibility_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_PackageableElement_namespace_needs_visibility);
	
	uML_PackageableElement_visibility_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_PackageableElement_visibility);
	
	uML_PackageableElement_visibility_lowerValue_LiteralInteger_UML_PackageableElement_visibility = factory->createLiteralInteger_in_Owner(uML_PackageableElement_visibility);
	
	uML_ParameterSet_condition_lowerValue_LiteralInteger_UML_ParameterSet_condition = factory->createLiteralInteger_in_Owner(uML_ParameterSet_condition);
	
	uML_ParameterSet_condition_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_condition = factory->createLiteralUnlimitedNatural_in_Owner(uML_ParameterSet_condition);
	
	uML_ParameterSet_input_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ParameterSet_input);
	
	uML_ParameterSet_parameter_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_parameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_ParameterSet_parameter);
	
	uML_ParameterSet_same_parameterized_entity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ParameterSet_same_parameterized_entity);
	
	uML_ParameterSet_two_parameter_sets_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ParameterSet_two_parameter_sets);
	
	uML_Parameter_connector_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_connector_end);
	
	uML_Parameter_defaultValue_lowerValue_LiteralInteger_UML_Parameter_defaultValue = factory->createLiteralInteger_in_Owner(uML_Parameter_defaultValue);
	
	uML_Parameter_default_lowerValue_LiteralInteger_UML_Parameter_default = factory->createLiteralInteger_in_Owner(uML_Parameter_default);
	
	uML_Parameter_default_result_lowerValue_LiteralInteger_UML_Parameter_default_result = factory->createLiteralInteger_in_Owner(uML_Parameter_default_result);
	
	uML_Parameter_default_result_upperValue_LiteralUnlimitedNatural_UML_Parameter_default_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Parameter_default_result);
	
	uML_Parameter_default_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_default_spec);
	
	uML_Parameter_direction_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_Parameter_direction);
	
	uML_Parameter_effect_lowerValue_LiteralInteger_UML_Parameter_effect = factory->createLiteralInteger_in_Owner(uML_Parameter_effect);
	
	uML_Parameter_in_and_out_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_in_and_out);
	
	uML_Parameter_isException_defaultValue_LiteralBoolean_UML_Parameter_isException = factory->createLiteralBoolean_in_Owner(uML_Parameter_isException);
	
	uML_Parameter_isStream_defaultValue_LiteralBoolean_UML_Parameter_isStream = factory->createLiteralBoolean_in_Owner(uML_Parameter_isStream);
	
	uML_Parameter_not_exception_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_not_exception);
	
	uML_Parameter_object_effect_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_object_effect);
	
	uML_Parameter_operation_lowerValue_LiteralInteger_UML_Parameter_operation = factory->createLiteralInteger_in_Owner(uML_Parameter_operation);
	
	uML_Parameter_parameterSet_lowerValue_LiteralInteger_UML_Parameter_parameterSet = factory->createLiteralInteger_in_Owner(uML_Parameter_parameterSet);
	
	uML_Parameter_parameterSet_upperValue_LiteralUnlimitedNatural_UML_Parameter_parameterSet = factory->createLiteralUnlimitedNatural_in_Owner(uML_Parameter_parameterSet);
	
	uML_Parameter_reentrant_behaviors_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_reentrant_behaviors);
	
	uML_Parameter_stream_and_exception_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Parameter_stream_and_exception);
	
	uML_ParameterableElement_isCompatibleWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ParameterableElement_isCompatibleWith_spec);
	
	uML_ParameterableElement_isTemplateParameter_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ParameterableElement_isTemplateParameter_spec);
	
	uML_ParameterableElement_owningTemplateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_owningTemplateParameter = factory->createLiteralInteger_in_Owner(uML_ParameterableElement_owningTemplateParameter);
	
	uML_ParameterableElement_templateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_templateParameter = factory->createLiteralInteger_in_Owner(uML_ParameterableElement_templateParameter);
	
	uML_PartDecomposition_assume_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_PartDecomposition_assume);
	
	uML_PartDecomposition_commutativity_of_decomposition_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_PartDecomposition_commutativity_of_decomposition);
	
	uML_PartDecomposition_parts_of_internal_structures_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_PartDecomposition_parts_of_internal_structures);
	
	uML_Pin_control_pins_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pin_control_pins);
	
	uML_Pin_isControl_defaultValue_LiteralBoolean_UML_Pin_isControl = factory->createLiteralBoolean_in_Owner(uML_Pin_isControl);
	
	uML_Pin_not_unique_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pin_not_unique);
	
	uML_Port_basicProvided_result_lowerValue_LiteralInteger_UML_Port_basicProvided_result = factory->createLiteralInteger_in_Owner(uML_Port_basicProvided_result);
	
	uML_Port_basicProvided_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicProvided_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_basicProvided_result);
	
	uML_Port_basicProvided_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_basicProvided_spec);
	
	uML_Port_basicRequired_result_lowerValue_LiteralInteger_UML_Port_basicRequired_result = factory->createLiteralInteger_in_Owner(uML_Port_basicRequired_result);
	
	uML_Port_basicRequired_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicRequired_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_basicRequired_result);
	
	uML_Port_basicRequired_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_basicRequired_spec);
	
	uML_Port_default_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_default_value);
	
	uML_Port_encapsulated_owner_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_encapsulated_owner);
	
	uML_Port_isBehavior_defaultValue_LiteralBoolean_UML_Port_isBehavior = factory->createLiteralBoolean_in_Owner(uML_Port_isBehavior);
	
	uML_Port_isConjugated_defaultValue_LiteralBoolean_UML_Port_isConjugated = factory->createLiteralBoolean_in_Owner(uML_Port_isConjugated);
	
	uML_Port_isService_defaultValue_LiteralBoolean_UML_Port_isService = factory->createLiteralBoolean_in_Owner(uML_Port_isService);
	
	uML_Port_port_aggregation_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_port_aggregation);
	
	uML_Port_protocol_lowerValue_LiteralInteger_UML_Port_protocol = factory->createLiteralInteger_in_Owner(uML_Port_protocol);
	
	uML_Port_provided_lowerValue_LiteralInteger_UML_Port_provided = factory->createLiteralInteger_in_Owner(uML_Port_provided);
	
	uML_Port_provided_result_lowerValue_LiteralInteger_UML_Port_provided_result = factory->createLiteralInteger_in_Owner(uML_Port_provided_result);
	
	uML_Port_provided_result_upperValue_LiteralUnlimitedNatural_UML_Port_provided_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_provided_result);
	
	uML_Port_provided_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_provided_spec);
	
	uML_Port_provided_upperValue_LiteralUnlimitedNatural_UML_Port_provided = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_provided);
	
	uML_Port_redefinedPort_lowerValue_LiteralInteger_UML_Port_redefinedPort = factory->createLiteralInteger_in_Owner(uML_Port_redefinedPort);
	
	uML_Port_redefinedPort_upperValue_LiteralUnlimitedNatural_UML_Port_redefinedPort = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_redefinedPort);
	
	uML_Port_required_lowerValue_LiteralInteger_UML_Port_required = factory->createLiteralInteger_in_Owner(uML_Port_required);
	
	uML_Port_required_result_lowerValue_LiteralInteger_UML_Port_required_result = factory->createLiteralInteger_in_Owner(uML_Port_required_result);
	
	uML_Port_required_result_upperValue_LiteralUnlimitedNatural_UML_Port_required_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_required_result);
	
	uML_Port_required_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Port_required_spec);
	
	uML_Port_required_upperValue_LiteralUnlimitedNatural_UML_Port_required = factory->createLiteralUnlimitedNatural_in_Owner(uML_Port_required);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn = factory->createLiteralInteger_in_Owner(uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn);
	
	uML_ProfileApplication_getAppliedDefinition__return_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition__return = factory->createLiteralInteger_in_Owner(uML_ProfileApplication_getAppliedDefinition__return);
	
	uML_ProfileApplication_getAppliedDefinition__return_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_ProfileApplication_getAppliedDefinition__return);
	
	uML_ProfileApplication_isStrict_defaultValue_LiteralBoolean_UML_ProfileApplication_isStrict = factory->createLiteralBoolean_in_Owner(uML_ProfileApplication_isStrict);
	
	uML_Profile_define__return_lowerValue_LiteralInteger_UML_Profile_define__return = factory->createLiteralInteger_in_Owner(uML_Profile_define__return);
	
	uML_Profile_define__return_upperValue_LiteralUnlimitedNatural_UML_Profile_define__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_define__return);
	
	uML_Profile_getDefinition_NamedElement_NamedElementreturn_lowerValue_LiteralInteger_UML_Profile_getDefinition_NamedElement_NamedElementreturn = factory->createLiteralInteger_in_Owner(uML_Profile_getDefinition_NamedElement_NamedElementreturn);
	
	uML_Profile_getDefinition_NamedElement_NamedElementreturn_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition_NamedElement_NamedElementreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_getDefinition_NamedElement_NamedElementreturn);
	
	uML_Profile_getDefinition__return_lowerValue_LiteralInteger_UML_Profile_getDefinition__return = factory->createLiteralInteger_in_Owner(uML_Profile_getDefinition__return);
	
	uML_Profile_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_getDefinition__return);
	
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn_lowerValue_LiteralInteger_UML_Profile_getOwnedExtensions_Boolean_Booleanreturn = factory->createLiteralInteger_in_Owner(uML_Profile_getOwnedExtensions_Boolean_Booleanreturn);
	
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Profile_getOwnedExtensions_Boolean_Booleanreturn = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_getOwnedExtensions_Boolean_Booleanreturn);
	
	uML_Profile_getReferencedMetaclasses__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetaclasses__return = factory->createLiteralInteger_in_Owner(uML_Profile_getReferencedMetaclasses__return);
	
	uML_Profile_getReferencedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetaclasses__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_getReferencedMetaclasses__return);
	
	uML_Profile_getReferencedMetamodels__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetamodels__return = factory->createLiteralInteger_in_Owner(uML_Profile_getReferencedMetamodels__return);
	
	uML_Profile_getReferencedMetamodels__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetamodels__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_getReferencedMetamodels__return);
	
	uML_Profile_metaclassReference_lowerValue_LiteralInteger_UML_Profile_metaclassReference = factory->createLiteralInteger_in_Owner(uML_Profile_metaclassReference);
	
	uML_Profile_metaclassReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metaclassReference = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_metaclassReference);
	
	uML_Profile_metaclass_reference_not_specialized_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Profile_metaclass_reference_not_specialized);
	
	uML_Profile_metamodelReference_lowerValue_LiteralInteger_UML_Profile_metamodelReference = factory->createLiteralInteger_in_Owner(uML_Profile_metamodelReference);
	
	uML_Profile_metamodelReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metamodelReference = factory->createLiteralUnlimitedNatural_in_Owner(uML_Profile_metamodelReference);
	
	uML_Profile_references_same_metamodel_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Profile_references_same_metamodel);
	
	uML_Property_aggregation_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_Property_aggregation);
	
	uML_Property_associationEnd_lowerValue_LiteralInteger_UML_Property_associationEnd = factory->createLiteralInteger_in_Owner(uML_Property_associationEnd);
	
	uML_Property_association_lowerValue_LiteralInteger_UML_Property_association = factory->createLiteralInteger_in_Owner(uML_Property_association);
	
	uML_Property_binding_to_attribute_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_binding_to_attribute);
	
	uML_Property_class_lowerValue_LiteralInteger_UML_Property_class = factory->createLiteralInteger_in_Owner(uML_Property_class);
	
	uML_Property_datatype_lowerValue_LiteralInteger_UML_Property_datatype = factory->createLiteralInteger_in_Owner(uML_Property_datatype);
	
	uML_Property_defaultValue_lowerValue_LiteralInteger_UML_Property_defaultValue = factory->createLiteralInteger_in_Owner(uML_Property_defaultValue);
	
	uML_Property_default_lowerValue_LiteralInteger_UML_Property_default = factory->createLiteralInteger_in_Owner(uML_Property_default);
	
	uML_Property_deployment_target_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_deployment_target);
	
	uML_Property_derived_union_is_derived_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_derived_union_is_derived);
	
	uML_Property_derived_union_is_read_only_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_derived_union_is_read_only);
	
	uML_Property_getDefault_result_lowerValue_LiteralInteger_UML_Property_getDefault_result = factory->createLiteralInteger_in_Owner(uML_Property_getDefault_result);
	
	uML_Property_getDefault_result_upperValue_LiteralUnlimitedNatural_UML_Property_getDefault_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Property_getDefault_result);
	
	uML_Property_getOtherEnd__return_lowerValue_LiteralInteger_UML_Property_getOtherEnd__return = factory->createLiteralInteger_in_Owner(uML_Property_getOtherEnd__return);
	
	uML_Property_getOtherEnd__return_upperValue_LiteralUnlimitedNatural_UML_Property_getOtherEnd__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Property_getOtherEnd__return);
	
	uML_Property_interface_lowerValue_LiteralInteger_UML_Property_interface = factory->createLiteralInteger_in_Owner(uML_Property_interface);
	
	uML_Property_isAttribute_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_isAttribute_spec);
	
	uML_Property_isCompatibleWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_isCompatibleWith_spec);
	
	uML_Property_isComposite_defaultValue_LiteralBoolean_UML_Property_isComposite = factory->createLiteralBoolean_in_Owner(uML_Property_isComposite);
	
	uML_Property_isComposite_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_isComposite_spec);
	
	uML_Property_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_isConsistentWith_pre);
	
	uML_Property_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_isConsistentWith_spec);
	
	uML_Property_isDerivedUnion_defaultValue_LiteralBoolean_UML_Property_isDerivedUnion = factory->createLiteralBoolean_in_Owner(uML_Property_isDerivedUnion);
	
	uML_Property_isDerived_defaultValue_LiteralBoolean_UML_Property_isDerived = factory->createLiteralBoolean_in_Owner(uML_Property_isDerived);
	
	uML_Property_isID_defaultValue_LiteralBoolean_UML_Property_isID = factory->createLiteralBoolean_in_Owner(uML_Property_isID);
	
	uML_Property_isNavigable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_isNavigable_spec);
	
	uML_Property_multiplicity_of_composite_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_multiplicity_of_composite);
	
	uML_Property_opposite_lowerValue_LiteralInteger_UML_Property_opposite = factory->createLiteralInteger_in_Owner(uML_Property_opposite);
	
	uML_Property_opposite_result_lowerValue_LiteralInteger_UML_Property_opposite_result = factory->createLiteralInteger_in_Owner(uML_Property_opposite_result);
	
	uML_Property_opposite_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_opposite_spec);
	
	uML_Property_owningAssociation_lowerValue_LiteralInteger_UML_Property_owningAssociation = factory->createLiteralInteger_in_Owner(uML_Property_owningAssociation);
	
	uML_Property_qualified_is_association_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_qualified_is_association_end);
	
	uML_Property_qualifier_lowerValue_LiteralInteger_UML_Property_qualifier = factory->createLiteralInteger_in_Owner(uML_Property_qualifier);
	
	uML_Property_qualifier_upperValue_LiteralUnlimitedNatural_UML_Property_qualifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_Property_qualifier);
	
	uML_Property_redefinedProperty_lowerValue_LiteralInteger_UML_Property_redefinedProperty = factory->createLiteralInteger_in_Owner(uML_Property_redefinedProperty);
	
	uML_Property_redefinedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_redefinedProperty = factory->createLiteralUnlimitedNatural_in_Owner(uML_Property_redefinedProperty);
	
	uML_Property_redefined_property_inherited_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_redefined_property_inherited);
	
	uML_Property_subsettedProperty_lowerValue_LiteralInteger_UML_Property_subsettedProperty = factory->createLiteralInteger_in_Owner(uML_Property_subsettedProperty);
	
	uML_Property_subsettedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_subsettedProperty = factory->createLiteralUnlimitedNatural_in_Owner(uML_Property_subsettedProperty);
	
	uML_Property_subsetted_property_names_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_subsetted_property_names);
	
	uML_Property_subsettingContext_result_lowerValue_LiteralInteger_UML_Property_subsettingContext_result = factory->createLiteralInteger_in_Owner(uML_Property_subsettingContext_result);
	
	uML_Property_subsettingContext_result_upperValue_LiteralUnlimitedNatural_UML_Property_subsettingContext_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Property_subsettingContext_result);
	
	uML_Property_subsettingContext_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_subsettingContext_spec);
	
	uML_Property_subsetting_context_conforms_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_subsetting_context_conforms);
	
	uML_Property_subsetting_rules_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_subsetting_rules);
	
	uML_Property_type_of_opposite_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Property_type_of_opposite_end);
	
	uML_ProtocolStateMachine_classifier_context_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine_classifier_context);
	
	uML_ProtocolStateMachine_conformance_lowerValue_LiteralInteger_UML_ProtocolStateMachine_conformance = factory->createLiteralInteger_in_Owner(uML_ProtocolStateMachine_conformance);
	
	uML_ProtocolStateMachine_conformance_upperValue_LiteralUnlimitedNatural_UML_ProtocolStateMachine_conformance = factory->createLiteralUnlimitedNatural_in_Owner(uML_ProtocolStateMachine_conformance);
	
	uML_ProtocolStateMachine_deep_or_shallow_history_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine_deep_or_shallow_history);
	
	uML_ProtocolStateMachine_entry_exit_do_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine_entry_exit_do);
	
	uML_ProtocolStateMachine_protocol_transitions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolStateMachine_protocol_transitions);
	
	uML_ProtocolTransition_associated_actions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolTransition_associated_actions);
	
	uML_ProtocolTransition_belongs_to_psm_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolTransition_belongs_to_psm);
	
	uML_ProtocolTransition_postCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_postCondition = factory->createLiteralInteger_in_Owner(uML_ProtocolTransition_postCondition);
	
	uML_ProtocolTransition_preCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_preCondition = factory->createLiteralInteger_in_Owner(uML_ProtocolTransition_preCondition);
	
	uML_ProtocolTransition_referred_lowerValue_LiteralInteger_UML_ProtocolTransition_referred = factory->createLiteralInteger_in_Owner(uML_ProtocolTransition_referred);
	
	uML_ProtocolTransition_referred_result_lowerValue_LiteralInteger_UML_ProtocolTransition_referred_result = factory->createLiteralInteger_in_Owner(uML_ProtocolTransition_referred_result);
	
	uML_ProtocolTransition_referred_result_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_ProtocolTransition_referred_result);
	
	uML_ProtocolTransition_referred_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolTransition_referred_spec);
	
	uML_ProtocolTransition_referred_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred = factory->createLiteralUnlimitedNatural_in_Owner(uML_ProtocolTransition_referred);
	
	uML_ProtocolTransition_refers_to_operation_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ProtocolTransition_refers_to_operation);
	
	uML_Pseudostate_choice_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_choice_vertex);
	
	uML_Pseudostate_fork_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_fork_vertex);
	
	uML_Pseudostate_history_vertices_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_history_vertices);
	
	uML_Pseudostate_initial_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_initial_vertex);
	
	uML_Pseudostate_join_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_join_vertex);
	
	uML_Pseudostate_junction_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_junction_vertex);
	
	uML_Pseudostate_kind_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_Pseudostate_kind);
	
	uML_Pseudostate_outgoing_from_initial_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_outgoing_from_initial);
	
	uML_Pseudostate_stateMachine_lowerValue_LiteralInteger_UML_Pseudostate_stateMachine = factory->createLiteralInteger_in_Owner(uML_Pseudostate_stateMachine);
	
	uML_Pseudostate_state_lowerValue_LiteralInteger_UML_Pseudostate_state = factory->createLiteralInteger_in_Owner(uML_Pseudostate_state);
	
	uML_Pseudostate_transitions_incoming_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_transitions_incoming);
	
	uML_Pseudostate_transitions_outgoing_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Pseudostate_transitions_outgoing);
	
	uML_QualifierValue_multiplicity_of_qualifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_QualifierValue_multiplicity_of_qualifier);
	
	uML_QualifierValue_qualifier_attribute_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_QualifierValue_qualifier_attribute);
	
	uML_QualifierValue_type_of_qualifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_QualifierValue_type_of_qualifier);
	
	uML_ReadExtentAction_multiplicity_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadExtentAction_multiplicity_of_result);
	
	uML_ReadExtentAction_type_is_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadExtentAction_type_is_classifier);
	
	uML_ReadIsClassifiedObjectAction_boolean_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction_boolean_result);
	
	uML_ReadIsClassifiedObjectAction_isDirect_defaultValue_LiteralBoolean_UML_ReadIsClassifiedObjectAction_isDirect = factory->createLiteralBoolean_in_Owner(uML_ReadIsClassifiedObjectAction_isDirect);
	
	uML_ReadIsClassifiedObjectAction_multiplicity_of_input_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction_multiplicity_of_input);
	
	uML_ReadIsClassifiedObjectAction_multiplicity_of_output_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction_multiplicity_of_output);
	
	uML_ReadIsClassifiedObjectAction_no_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadIsClassifiedObjectAction_no_type);
	
	uML_ReadLinkAction_compatible_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkAction_compatible_multiplicity);
	
	uML_ReadLinkAction_navigable_open_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkAction_navigable_open_end);
	
	uML_ReadLinkAction_one_open_end_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkAction_one_open_end);
	
	uML_ReadLinkAction_openEnd_result_lowerValue_LiteralInteger_UML_ReadLinkAction_openEnd_result = factory->createLiteralInteger_in_Owner(uML_ReadLinkAction_openEnd_result);
	
	uML_ReadLinkAction_openEnd_result_upperValue_LiteralUnlimitedNatural_UML_ReadLinkAction_openEnd_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_ReadLinkAction_openEnd_result);
	
	uML_ReadLinkAction_openEnd_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkAction_openEnd_spec);
	
	uML_ReadLinkAction_type_and_ordering_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkAction_type_and_ordering);
	
	uML_ReadLinkAction_visibility_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkAction_visibility);
	
	uML_ReadLinkObjectEndAction_association_of_association_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_association_of_association);
	
	uML_ReadLinkObjectEndAction_ends_of_association_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_ends_of_association);
	
	uML_ReadLinkObjectEndAction_multiplicity_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_multiplicity_of_object);
	
	uML_ReadLinkObjectEndAction_multiplicity_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_multiplicity_of_result);
	
	uML_ReadLinkObjectEndAction_property_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_property);
	
	uML_ReadLinkObjectEndAction_type_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_type_of_object);
	
	uML_ReadLinkObjectEndAction_type_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndAction_type_of_result);
	
	uML_ReadLinkObjectEndQualifierAction_association_of_association_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_association_of_association);
	
	uML_ReadLinkObjectEndQualifierAction_ends_of_association_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_ends_of_association);
	
	uML_ReadLinkObjectEndQualifierAction_multiplicity_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_multiplicity_of_object);
	
	uML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier);
	
	uML_ReadLinkObjectEndQualifierAction_multiplicity_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_multiplicity_of_result);
	
	uML_ReadLinkObjectEndQualifierAction_qualifier_attribute_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_qualifier_attribute);
	
	uML_ReadLinkObjectEndQualifierAction_same_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_same_type);
	
	uML_ReadLinkObjectEndQualifierAction_type_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadLinkObjectEndQualifierAction_type_of_object);
	
	uML_ReadSelfAction_contained_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadSelfAction_contained);
	
	uML_ReadSelfAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadSelfAction_multiplicity);
	
	uML_ReadSelfAction_not_static_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadSelfAction_not_static);
	
	uML_ReadSelfAction_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadSelfAction_type);
	
	uML_ReadStructuralFeatureAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadStructuralFeatureAction_multiplicity);
	
	uML_ReadStructuralFeatureAction_type_and_ordering_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadStructuralFeatureAction_type_and_ordering);
	
	uML_ReadVariableAction_compatible_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadVariableAction_compatible_multiplicity);
	
	uML_ReadVariableAction_type_and_ordering_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReadVariableAction_type_and_ordering);
	
	uML_Reception_same_name_as_signal_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Reception_same_name_as_signal);
	
	uML_Reception_same_structure_as_signal_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Reception_same_structure_as_signal);
	
	uML_ReclassifyObjectAction_classifier_not_abstract_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReclassifyObjectAction_classifier_not_abstract);
	
	uML_ReclassifyObjectAction_input_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReclassifyObjectAction_input_pin);
	
	uML_ReclassifyObjectAction_isReplaceAll_defaultValue_LiteralBoolean_UML_ReclassifyObjectAction_isReplaceAll = factory->createLiteralBoolean_in_Owner(uML_ReclassifyObjectAction_isReplaceAll);
	
	uML_ReclassifyObjectAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReclassifyObjectAction_multiplicity);
	
	uML_ReclassifyObjectAction_newClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_newClassifier = factory->createLiteralInteger_in_Owner(uML_ReclassifyObjectAction_newClassifier);
	
	uML_ReclassifyObjectAction_newClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_newClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_ReclassifyObjectAction_newClassifier);
	
	uML_ReclassifyObjectAction_oldClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_oldClassifier = factory->createLiteralInteger_in_Owner(uML_ReclassifyObjectAction_oldClassifier);
	
	uML_ReclassifyObjectAction_oldClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_oldClassifier = factory->createLiteralUnlimitedNatural_in_Owner(uML_ReclassifyObjectAction_oldClassifier);
	
	uML_RedefinableElement_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableElement_isConsistentWith_pre);
	
	uML_RedefinableElement_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableElement_isConsistentWith_spec);
	
	uML_RedefinableElement_isLeaf_defaultValue_LiteralBoolean_UML_RedefinableElement_isLeaf = factory->createLiteralBoolean_in_Owner(uML_RedefinableElement_isLeaf);
	
	uML_RedefinableElement_isRedefinitionContextValid_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableElement_isRedefinitionContextValid_spec);
	
	uML_RedefinableElement_non_leaf_redefinition_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableElement_non_leaf_redefinition);
	
	uML_RedefinableElement_redefinedElement_lowerValue_LiteralInteger_UML_RedefinableElement_redefinedElement = factory->createLiteralInteger_in_Owner(uML_RedefinableElement_redefinedElement);
	
	uML_RedefinableElement_redefinedElement_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_RedefinableElement_redefinedElement);
	
	uML_RedefinableElement_redefinitionContext_lowerValue_LiteralInteger_UML_RedefinableElement_redefinitionContext = factory->createLiteralInteger_in_Owner(uML_RedefinableElement_redefinitionContext);
	
	uML_RedefinableElement_redefinitionContext_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinitionContext = factory->createLiteralUnlimitedNatural_in_Owner(uML_RedefinableElement_redefinitionContext);
	
	uML_RedefinableElement_redefinition_consistent_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableElement_redefinition_consistent);
	
	uML_RedefinableElement_redefinition_context_valid_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableElement_redefinition_context_valid);
	
	uML_RedefinableTemplateSignature_extendedSignature_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_extendedSignature = factory->createLiteralInteger_in_Owner(uML_RedefinableTemplateSignature_extendedSignature);
	
	uML_RedefinableTemplateSignature_extendedSignature_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_extendedSignature = factory->createLiteralUnlimitedNatural_in_Owner(uML_RedefinableTemplateSignature_extendedSignature);
	
	uML_RedefinableTemplateSignature_inheritedParameter_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter = factory->createLiteralInteger_in_Owner(uML_RedefinableTemplateSignature_inheritedParameter);
	
	uML_RedefinableTemplateSignature_inheritedParameter_result_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter_result = factory->createLiteralInteger_in_Owner(uML_RedefinableTemplateSignature_inheritedParameter_result);
	
	uML_RedefinableTemplateSignature_inheritedParameter_result_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_RedefinableTemplateSignature_inheritedParameter_result);
	
	uML_RedefinableTemplateSignature_inheritedParameter_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableTemplateSignature_inheritedParameter_spec);
	
	uML_RedefinableTemplateSignature_inheritedParameter_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_RedefinableTemplateSignature_inheritedParameter);
	
	uML_RedefinableTemplateSignature_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableTemplateSignature_isConsistentWith_pre);
	
	uML_RedefinableTemplateSignature_isConsistentWith_spec_OpaqueExpression_spec = factory->createOpaqueExpression_in_Owner(uML_RedefinableTemplateSignature_isConsistentWith_spec);
	
	uML_RedefinableTemplateSignature_redefines_parents_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RedefinableTemplateSignature_redefines_parents);
	
	uML_ReduceAction_input_type_is_collection_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReduceAction_input_type_is_collection);
	
	uML_ReduceAction_isOrdered_defaultValue_LiteralBoolean_UML_ReduceAction_isOrdered = factory->createLiteralBoolean_in_Owner(uML_ReduceAction_isOrdered);
	
	uML_ReduceAction_output_types_are_compatible_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReduceAction_output_types_are_compatible);
	
	uML_ReduceAction_reducer_inputs_output_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReduceAction_reducer_inputs_output);
	
	uML_Region_belongsToPSM_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_belongsToPSM_spec);
	
	uML_Region_containingStateMachine_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_containingStateMachine_spec);
	
	uML_Region_deep_history_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_deep_history_vertex);
	
	uML_Region_extendedRegion_lowerValue_LiteralInteger_UML_Region_extendedRegion = factory->createLiteralInteger_in_Owner(uML_Region_extendedRegion);
	
	uML_Region_initial_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_initial_vertex);
	
	uML_Region_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_isConsistentWith_pre);
	
	uML_Region_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_isConsistentWith_spec);
	
	uML_Region_isRedefinitionContextValid_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_isRedefinitionContextValid_spec);
	
	uML_Region_owned_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_owned);
	
	uML_Region_redefinitionContext_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_redefinitionContext_spec);
	
	uML_Region_shallow_history_vertex_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Region_shallow_history_vertex);
	
	uML_Region_stateMachine_lowerValue_LiteralInteger_UML_Region_stateMachine = factory->createLiteralInteger_in_Owner(uML_Region_stateMachine);
	
	uML_Region_state_lowerValue_LiteralInteger_UML_Region_state = factory->createLiteralInteger_in_Owner(uML_Region_state);
	
	uML_Region_subvertex_lowerValue_LiteralInteger_UML_Region_subvertex = factory->createLiteralInteger_in_Owner(uML_Region_subvertex);
	
	uML_Region_subvertex_upperValue_LiteralUnlimitedNatural_UML_Region_subvertex = factory->createLiteralUnlimitedNatural_in_Owner(uML_Region_subvertex);
	
	uML_Region_transition_lowerValue_LiteralInteger_UML_Region_transition = factory->createLiteralInteger_in_Owner(uML_Region_transition);
	
	uML_Region_transition_upperValue_LiteralUnlimitedNatural_UML_Region_transition = factory->createLiteralUnlimitedNatural_in_Owner(uML_Region_transition);
	
	uML_Relationship_relatedElement_upperValue_LiteralUnlimitedNatural_UML_Relationship_relatedElement = factory->createLiteralUnlimitedNatural_in_Owner(uML_Relationship_relatedElement);
	
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates = factory->createLiteralBoolean_in_Owner(uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates);
	
	uML_RemoveStructuralFeatureValueAction_removeAt_and_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RemoveStructuralFeatureValueAction_removeAt_and_value);
	
	uML_RemoveStructuralFeatureValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveStructuralFeatureValueAction_removeAt = factory->createLiteralInteger_in_Owner(uML_RemoveStructuralFeatureValueAction_removeAt);
	
	uML_RemoveVariableValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveVariableValueAction_isRemoveDuplicates = factory->createLiteralBoolean_in_Owner(uML_RemoveVariableValueAction_isRemoveDuplicates);
	
	uML_RemoveVariableValueAction_removeAt_and_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_RemoveVariableValueAction_removeAt_and_value);
	
	uML_RemoveVariableValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveVariableValueAction_removeAt = factory->createLiteralInteger_in_Owner(uML_RemoveVariableValueAction_removeAt);
	
	uML_ReplyAction_event_on_reply_to_call_trigger_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReplyAction_event_on_reply_to_call_trigger);
	
	uML_ReplyAction_pins_match_parameter_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ReplyAction_pins_match_parameter);
	
	uML_ReplyAction_replyValue_lowerValue_LiteralInteger_UML_ReplyAction_replyValue = factory->createLiteralInteger_in_Owner(uML_ReplyAction_replyValue);
	
	uML_ReplyAction_replyValue_upperValue_LiteralUnlimitedNatural_UML_ReplyAction_replyValue = factory->createLiteralUnlimitedNatural_in_Owner(uML_ReplyAction_replyValue);
	
	uML_SendObjectAction_type_target_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_SendObjectAction_type_target_pin);
	
	uML_SendSignalAction_number_order_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_SendSignalAction_number_order);
	
	uML_SendSignalAction_type_ordering_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_SendSignalAction_type_ordering_multiplicity);
	
	uML_SendSignalAction_type_target_pin_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_SendSignalAction_type_target_pin);
	
	uML_SequenceNode_executableNode_lowerValue_LiteralInteger_UML_SequenceNode_executableNode = factory->createLiteralInteger_in_Owner(uML_SequenceNode_executableNode);
	
	uML_SequenceNode_executableNode_upperValue_LiteralUnlimitedNatural_UML_SequenceNode_executableNode = factory->createLiteralUnlimitedNatural_in_Owner(uML_SequenceNode_executableNode);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralInteger_in_Owner(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralInteger_in_Owner(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralUnlimitedNatural_in_Owner(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_Signal_ownedAttribute_lowerValue_LiteralInteger_UML_Signal_ownedAttribute = factory->createLiteralInteger_in_Owner(uML_Signal_ownedAttribute);
	
	uML_Signal_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Signal_ownedAttribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_Signal_ownedAttribute);
	
	uML_Slot_value_lowerValue_LiteralInteger_UML_Slot_value = factory->createLiteralInteger_in_Owner(uML_Slot_value);
	
	uML_Slot_value_upperValue_LiteralUnlimitedNatural_UML_Slot_value = factory->createLiteralUnlimitedNatural_in_Owner(uML_Slot_value);
	
	uML_StartClassifierBehaviorAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartClassifierBehaviorAction_multiplicity);
	
	uML_StartClassifierBehaviorAction_type_has_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartClassifierBehaviorAction_type_has_classifier);
	
	uML_StartObjectBehaviorAction_behavior_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_behavior_result = factory->createLiteralInteger_in_Owner(uML_StartObjectBehaviorAction_behavior_result);
	
	uML_StartObjectBehaviorAction_behavior_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction_behavior_spec);
	
	uML_StartObjectBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_inputParameters_result = factory->createLiteralInteger_in_Owner(uML_StartObjectBehaviorAction_inputParameters_result);
	
	uML_StartObjectBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_inputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StartObjectBehaviorAction_inputParameters_result);
	
	uML_StartObjectBehaviorAction_inputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction_inputParameters_spec);
	
	uML_StartObjectBehaviorAction_multiplicity_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction_multiplicity_of_object);
	
	uML_StartObjectBehaviorAction_no_onport_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction_no_onport);
	
	uML_StartObjectBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_outputParameters_result = factory->createLiteralInteger_in_Owner(uML_StartObjectBehaviorAction_outputParameters_result);
	
	uML_StartObjectBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_outputParameters_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StartObjectBehaviorAction_outputParameters_result);
	
	uML_StartObjectBehaviorAction_outputParameters_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction_outputParameters_spec);
	
	uML_StartObjectBehaviorAction_type_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StartObjectBehaviorAction_type_of_object);
	
	uML_StateMachine_LCAState_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_LCAState_spec);
	
	uML_StateMachine_LCA_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_LCA_spec);
	
	uML_StateMachine_ancestor_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_ancestor_spec);
	
	uML_StateMachine_classifier_context_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_classifier_context);
	
	uML_StateMachine_connectionPoint_lowerValue_LiteralInteger_UML_StateMachine_connectionPoint = factory->createLiteralInteger_in_Owner(uML_StateMachine_connectionPoint);
	
	uML_StateMachine_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_StateMachine_connectionPoint = factory->createLiteralUnlimitedNatural_in_Owner(uML_StateMachine_connectionPoint);
	
	uML_StateMachine_connection_points_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_connection_points);
	
	uML_StateMachine_context_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_context_classifier);
	
	uML_StateMachine_extendedStateMachine_lowerValue_LiteralInteger_UML_StateMachine_extendedStateMachine = factory->createLiteralInteger_in_Owner(uML_StateMachine_extendedStateMachine);
	
	uML_StateMachine_extendedStateMachine_upperValue_LiteralUnlimitedNatural_UML_StateMachine_extendedStateMachine = factory->createLiteralUnlimitedNatural_in_Owner(uML_StateMachine_extendedStateMachine);
	
	uML_StateMachine_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_isConsistentWith_spec);
	
	uML_StateMachine_isRedefinitionContextValid_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_isRedefinitionContextValid_spec);
	
	uML_StateMachine_method_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StateMachine_method);
	
	uML_StateMachine_region_upperValue_LiteralUnlimitedNatural_UML_StateMachine_region = factory->createLiteralUnlimitedNatural_in_Owner(uML_StateMachine_region);
	
	uML_StateMachine_submachineState_lowerValue_LiteralInteger_UML_StateMachine_submachineState = factory->createLiteralInteger_in_Owner(uML_StateMachine_submachineState);
	
	uML_StateMachine_submachineState_upperValue_LiteralUnlimitedNatural_UML_StateMachine_submachineState = factory->createLiteralUnlimitedNatural_in_Owner(uML_StateMachine_submachineState);
	
	uML_State_composite_states_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_composite_states);
	
	uML_State_connectionPoint_lowerValue_LiteralInteger_UML_State_connectionPoint = factory->createLiteralInteger_in_Owner(uML_State_connectionPoint);
	
	uML_State_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_State_connectionPoint = factory->createLiteralUnlimitedNatural_in_Owner(uML_State_connectionPoint);
	
	uML_State_connection_lowerValue_LiteralInteger_UML_State_connection = factory->createLiteralInteger_in_Owner(uML_State_connection);
	
	uML_State_connection_upperValue_LiteralUnlimitedNatural_UML_State_connection = factory->createLiteralUnlimitedNatural_in_Owner(uML_State_connection);
	
	uML_State_containingStateMachine_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_containingStateMachine_spec);
	
	uML_State_deferrableTrigger_lowerValue_LiteralInteger_UML_State_deferrableTrigger = factory->createLiteralInteger_in_Owner(uML_State_deferrableTrigger);
	
	uML_State_deferrableTrigger_upperValue_LiteralUnlimitedNatural_UML_State_deferrableTrigger = factory->createLiteralUnlimitedNatural_in_Owner(uML_State_deferrableTrigger);
	
	uML_State_destinations_or_sources_of_transitions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_destinations_or_sources_of_transitions);
	
	uML_State_doActivity_lowerValue_LiteralInteger_UML_State_doActivity = factory->createLiteralInteger_in_Owner(uML_State_doActivity);
	
	uML_State_entry_lowerValue_LiteralInteger_UML_State_entry = factory->createLiteralInteger_in_Owner(uML_State_entry);
	
	uML_State_entry_or_exit_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_entry_or_exit);
	
	uML_State_exit_lowerValue_LiteralInteger_UML_State_exit = factory->createLiteralInteger_in_Owner(uML_State_exit);
	
	uML_State_isComposite_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isComposite_spec);
	
	uML_State_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isConsistentWith_pre);
	
	uML_State_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isConsistentWith_spec);
	
	uML_State_isOrthogonal_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isOrthogonal_spec);
	
	uML_State_isRedefinitionContextValid_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isRedefinitionContextValid_spec);
	
	uML_State_isSimple_defaultValue_LiteralBoolean_UML_State_isSimple = factory->createLiteralBoolean_in_Owner(uML_State_isSimple);
	
	uML_State_isSimple_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isSimple_spec);
	
	uML_State_isSubmachineState_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_isSubmachineState_spec);
	
	uML_State_redefinedState_lowerValue_LiteralInteger_UML_State_redefinedState = factory->createLiteralInteger_in_Owner(uML_State_redefinedState);
	
	uML_State_redefinitionContext_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_redefinitionContext_spec);
	
	uML_State_region_lowerValue_LiteralInteger_UML_State_region = factory->createLiteralInteger_in_Owner(uML_State_region);
	
	uML_State_region_upperValue_LiteralUnlimitedNatural_UML_State_region = factory->createLiteralUnlimitedNatural_in_Owner(uML_State_region);
	
	uML_State_stateInvariant_lowerValue_LiteralInteger_UML_State_stateInvariant = factory->createLiteralInteger_in_Owner(uML_State_stateInvariant);
	
	uML_State_submachine_lowerValue_LiteralInteger_UML_State_submachine = factory->createLiteralInteger_in_Owner(uML_State_submachine);
	
	uML_State_submachine_or_regions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_submachine_or_regions);
	
	uML_State_submachine_states_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_State_submachine_states);
	
	uML_Stereotype_associationEndOwnership_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_associationEndOwnership);
	
	uML_Stereotype_base_property_multiplicity_multiple_extension_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_base_property_multiplicity_multiple_extension);
	
	uML_Stereotype_base_property_multiplicity_single_extension_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_base_property_multiplicity_single_extension);
	
	uML_Stereotype_base_property_upper_bound_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_base_property_upper_bound);
	
	uML_Stereotype_binaryAssociationsOnly_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_binaryAssociationsOnly);
	
	uML_Stereotype_containingProfile_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_containingProfile_spec);
	
	uML_Stereotype_generalize_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_generalize);
	
	uML_Stereotype_getAllExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getAllExtendedMetaclasses__return = factory->createLiteralInteger_in_Owner(uML_Stereotype_getAllExtendedMetaclasses__return);
	
	uML_Stereotype_getAllExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getAllExtendedMetaclasses__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Stereotype_getAllExtendedMetaclasses__return);
	
	uML_Stereotype_getDefinition__return_lowerValue_LiteralInteger_UML_Stereotype_getDefinition__return = factory->createLiteralInteger_in_Owner(uML_Stereotype_getDefinition__return);
	
	uML_Stereotype_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getDefinition__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Stereotype_getDefinition__return);
	
	uML_Stereotype_getExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getExtendedMetaclasses__return = factory->createLiteralInteger_in_Owner(uML_Stereotype_getExtendedMetaclasses__return);
	
	uML_Stereotype_getExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getExtendedMetaclasses__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Stereotype_getExtendedMetaclasses__return);
	
	uML_Stereotype_icon_lowerValue_LiteralInteger_UML_Stereotype_icon = factory->createLiteralInteger_in_Owner(uML_Stereotype_icon);
	
	uML_Stereotype_icon_upperValue_LiteralUnlimitedNatural_UML_Stereotype_icon = factory->createLiteralUnlimitedNatural_in_Owner(uML_Stereotype_icon);
	
	uML_Stereotype_name_not_clash_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_name_not_clash);
	
	uML_Stereotype_profile_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Stereotype_profile_spec);
	
	uML_StringExpression_operands_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StringExpression_operands);
	
	uML_StringExpression_owningExpression_lowerValue_LiteralInteger_UML_StringExpression_owningExpression = factory->createLiteralInteger_in_Owner(uML_StringExpression_owningExpression);
	
	uML_StringExpression_stringValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StringExpression_stringValue_spec);
	
	uML_StringExpression_subExpression_lowerValue_LiteralInteger_UML_StringExpression_subExpression = factory->createLiteralInteger_in_Owner(uML_StringExpression_subExpression);
	
	uML_StringExpression_subExpression_upperValue_LiteralUnlimitedNatural_UML_StringExpression_subExpression = factory->createLiteralUnlimitedNatural_in_Owner(uML_StringExpression_subExpression);
	
	uML_StringExpression_subexpressions_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StringExpression_subexpressions);
	
	uML_StructuralFeatureAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction_multiplicity);
	
	uML_StructuralFeatureAction_not_static_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction_not_static);
	
	uML_StructuralFeatureAction_object_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction_object_type);
	
	uML_StructuralFeatureAction_one_featuring_classifier_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction_one_featuring_classifier);
	
	uML_StructuralFeatureAction_visibility_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuralFeatureAction_visibility);
	
	uML_StructuralFeature_isReadOnly_defaultValue_LiteralBoolean_UML_StructuralFeature_isReadOnly = factory->createLiteralBoolean_in_Owner(uML_StructuralFeature_isReadOnly);
	
	uML_StructuredActivityNode_activity_lowerValue_LiteralInteger_UML_StructuredActivityNode_activity = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_activity);
	
	uML_StructuredActivityNode_allActions_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allActions_result = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_allActions_result);
	
	uML_StructuredActivityNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allActions_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_allActions_result);
	
	uML_StructuredActivityNode_allActions_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_allActions_spec);
	
	uML_StructuredActivityNode_allOwnedNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allOwnedNodes_result = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_allOwnedNodes_result);
	
	uML_StructuredActivityNode_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allOwnedNodes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_allOwnedNodes_result);
	
	uML_StructuredActivityNode_allOwnedNodes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_allOwnedNodes_spec);
	
	uML_StructuredActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_containingActivity_result = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_containingActivity_result);
	
	uML_StructuredActivityNode_containingActivity_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_containingActivity_spec);
	
	uML_StructuredActivityNode_edge_lowerValue_LiteralInteger_UML_StructuredActivityNode_edge = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_edge);
	
	uML_StructuredActivityNode_edge_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_edge = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_edge);
	
	uML_StructuredActivityNode_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_edges);
	
	uML_StructuredActivityNode_input_pin_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_input_pin_edges);
	
	uML_StructuredActivityNode_mustIsolate_defaultValue_LiteralBoolean_UML_StructuredActivityNode_mustIsolate = factory->createLiteralBoolean_in_Owner(uML_StructuredActivityNode_mustIsolate);
	
	uML_StructuredActivityNode_node_lowerValue_LiteralInteger_UML_StructuredActivityNode_node = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_node);
	
	uML_StructuredActivityNode_node_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_node = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_node);
	
	uML_StructuredActivityNode_output_pin_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_output_pin_edges);
	
	uML_StructuredActivityNode_sourceNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_sourceNodes_result = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_sourceNodes_result);
	
	uML_StructuredActivityNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_sourceNodes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_sourceNodes_result);
	
	uML_StructuredActivityNode_sourceNodes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_sourceNodes_spec);
	
	uML_StructuredActivityNode_structuredNodeInput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeInput = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_structuredNodeInput);
	
	uML_StructuredActivityNode_structuredNodeInput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeInput = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_structuredNodeInput);
	
	uML_StructuredActivityNode_structuredNodeOutput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeOutput = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_structuredNodeOutput);
	
	uML_StructuredActivityNode_structuredNodeOutput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeOutput = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_structuredNodeOutput);
	
	uML_StructuredActivityNode_targetNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_targetNodes_result = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_targetNodes_result);
	
	uML_StructuredActivityNode_targetNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_targetNodes_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_targetNodes_result);
	
	uML_StructuredActivityNode_targetNodes_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredActivityNode_targetNodes_spec);
	
	uML_StructuredActivityNode_variable_lowerValue_LiteralInteger_UML_StructuredActivityNode_variable = factory->createLiteralInteger_in_Owner(uML_StructuredActivityNode_variable);
	
	uML_StructuredActivityNode_variable_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_variable = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredActivityNode_variable);
	
	uML_StructuredClassifier_allRoles_result_lowerValue_LiteralInteger_UML_StructuredClassifier_allRoles_result = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_allRoles_result);
	
	uML_StructuredClassifier_allRoles_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_allRoles_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_allRoles_result);
	
	uML_StructuredClassifier_allRoles_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredClassifier_allRoles_spec);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type);
	
	uML_StructuredClassifier_ownedAttribute_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedAttribute = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_ownedAttribute);
	
	uML_StructuredClassifier_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedAttribute = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_ownedAttribute);
	
	uML_StructuredClassifier_ownedConnector_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedConnector = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_ownedConnector);
	
	uML_StructuredClassifier_ownedConnector_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedConnector = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_ownedConnector);
	
	uML_StructuredClassifier_part_lowerValue_LiteralInteger_UML_StructuredClassifier_part = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_part);
	
	uML_StructuredClassifier_part_result_lowerValue_LiteralInteger_UML_StructuredClassifier_part_result = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_part_result);
	
	uML_StructuredClassifier_part_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_part_result);
	
	uML_StructuredClassifier_part_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_StructuredClassifier_part_spec);
	
	uML_StructuredClassifier_part_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_part);
	
	uML_StructuredClassifier_role_lowerValue_LiteralInteger_UML_StructuredClassifier_role = factory->createLiteralInteger_in_Owner(uML_StructuredClassifier_role);
	
	uML_StructuredClassifier_role_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_role = factory->createLiteralUnlimitedNatural_in_Owner(uML_StructuredClassifier_role);
	
	uML_TemplateBinding_one_parameter_substitution_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateBinding_one_parameter_substitution);
	
	uML_TemplateBinding_parameterSubstitution_lowerValue_LiteralInteger_UML_TemplateBinding_parameterSubstitution = factory->createLiteralInteger_in_Owner(uML_TemplateBinding_parameterSubstitution);
	
	uML_TemplateBinding_parameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_TemplateBinding_parameterSubstitution = factory->createLiteralUnlimitedNatural_in_Owner(uML_TemplateBinding_parameterSubstitution);
	
	uML_TemplateBinding_parameter_substitution_formal_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateBinding_parameter_substitution_formal);
	
	uML_TemplateParameterSubstitution_must_be_compatible_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateParameterSubstitution_must_be_compatible);
	
	uML_TemplateParameterSubstitution_ownedActual_lowerValue_LiteralInteger_UML_TemplateParameterSubstitution_ownedActual = factory->createLiteralInteger_in_Owner(uML_TemplateParameterSubstitution_ownedActual);
	
	uML_TemplateParameter_default_lowerValue_LiteralInteger_UML_TemplateParameter_default = factory->createLiteralInteger_in_Owner(uML_TemplateParameter_default);
	
	uML_TemplateParameter_must_be_compatible_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateParameter_must_be_compatible);
	
	uML_TemplateParameter_ownedDefault_lowerValue_LiteralInteger_UML_TemplateParameter_ownedDefault = factory->createLiteralInteger_in_Owner(uML_TemplateParameter_ownedDefault);
	
	uML_TemplateParameter_ownedParameteredElement_lowerValue_LiteralInteger_UML_TemplateParameter_ownedParameteredElement = factory->createLiteralInteger_in_Owner(uML_TemplateParameter_ownedParameteredElement);
	
	uML_TemplateSignature_own_elements_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateSignature_own_elements);
	
	uML_TemplateSignature_ownedParameter_lowerValue_LiteralInteger_UML_TemplateSignature_ownedParameter = factory->createLiteralInteger_in_Owner(uML_TemplateSignature_ownedParameter);
	
	uML_TemplateSignature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_ownedParameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_TemplateSignature_ownedParameter);
	
	uML_TemplateSignature_parameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_parameter = factory->createLiteralUnlimitedNatural_in_Owner(uML_TemplateSignature_parameter);
	
	uML_TemplateSignature_unique_parameters_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateSignature_unique_parameters);
	
	uML_TemplateableElement_isTemplate_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateableElement_isTemplate_spec);
	
	uML_TemplateableElement_ownedTemplateSignature_lowerValue_LiteralInteger_UML_TemplateableElement_ownedTemplateSignature = factory->createLiteralInteger_in_Owner(uML_TemplateableElement_ownedTemplateSignature);
	
	uML_TemplateableElement_parameterableElements_result_lowerValue_LiteralInteger_UML_TemplateableElement_parameterableElements_result = factory->createLiteralInteger_in_Owner(uML_TemplateableElement_parameterableElements_result);
	
	uML_TemplateableElement_parameterableElements_result_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_parameterableElements_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_TemplateableElement_parameterableElements_result);
	
	uML_TemplateableElement_parameterableElements_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TemplateableElement_parameterableElements_spec);
	
	uML_TemplateableElement_templateBinding_lowerValue_LiteralInteger_UML_TemplateableElement_templateBinding = factory->createLiteralInteger_in_Owner(uML_TemplateableElement_templateBinding);
	
	uML_TemplateableElement_templateBinding_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_templateBinding = factory->createLiteralUnlimitedNatural_in_Owner(uML_TemplateableElement_templateBinding);
	
	uML_TestIdentityAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TestIdentityAction_multiplicity);
	
	uML_TestIdentityAction_no_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TestIdentityAction_no_type);
	
	uML_TestIdentityAction_result_is_boolean_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TestIdentityAction_result_is_boolean);
	
	uML_TimeConstraint_firstEvent_defaultValue_LiteralBoolean_UML_TimeConstraint_firstEvent = factory->createLiteralBoolean_in_Owner(uML_TimeConstraint_firstEvent);
	
	uML_TimeConstraint_firstEvent_lowerValue_LiteralInteger_UML_TimeConstraint_firstEvent = factory->createLiteralInteger_in_Owner(uML_TimeConstraint_firstEvent);
	
	uML_TimeConstraint_has_one_constrainedElement_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TimeConstraint_has_one_constrainedElement);
	
	uML_TimeEvent_isRelative_defaultValue_LiteralBoolean_UML_TimeEvent_isRelative = factory->createLiteralBoolean_in_Owner(uML_TimeEvent_isRelative);
	
	uML_TimeEvent_when_non_negative_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TimeEvent_when_non_negative);
	
	uML_TimeExpression_expr_lowerValue_LiteralInteger_UML_TimeExpression_expr = factory->createLiteralInteger_in_Owner(uML_TimeExpression_expr);
	
	uML_TimeExpression_no_expr_requires_observation_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_TimeExpression_no_expr_requires_observation);
	
	uML_TimeExpression_observation_lowerValue_LiteralInteger_UML_TimeExpression_observation = factory->createLiteralInteger_in_Owner(uML_TimeExpression_observation);
	
	uML_TimeExpression_observation_upperValue_LiteralUnlimitedNatural_UML_TimeExpression_observation = factory->createLiteralUnlimitedNatural_in_Owner(uML_TimeExpression_observation);
	
	uML_TimeObservation_firstEvent_defaultValue_LiteralBoolean_UML_TimeObservation_firstEvent = factory->createLiteralBoolean_in_Owner(uML_TimeObservation_firstEvent);
	
	uML_Transition_containingStateMachine_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_containingStateMachine_spec);
	
	uML_Transition_effect_lowerValue_LiteralInteger_UML_Transition_effect = factory->createLiteralInteger_in_Owner(uML_Transition_effect);
	
	uML_Transition_fork_segment_guards_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_fork_segment_guards);
	
	uML_Transition_fork_segment_state_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_fork_segment_state);
	
	uML_Transition_guard_lowerValue_LiteralInteger_UML_Transition_guard = factory->createLiteralInteger_in_Owner(uML_Transition_guard);
	
	uML_Transition_initial_transition_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_initial_transition);
	
	uML_Transition_isConsistentWith_pre_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_isConsistentWith_pre);
	
	uML_Transition_isConsistentWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_isConsistentWith_spec);
	
	uML_Transition_join_segment_guards_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_join_segment_guards);
	
	uML_Transition_join_segment_state_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_join_segment_state);
	
	uML_Transition_kind_defaultValue_InstanceValue = factory->createInstanceValue_in_Owner(uML_Transition_kind);
	
	uML_Transition_outgoing_pseudostates_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_outgoing_pseudostates);
	
	uML_Transition_redefinedTransition_lowerValue_LiteralInteger_UML_Transition_redefinedTransition = factory->createLiteralInteger_in_Owner(uML_Transition_redefinedTransition);
	
	uML_Transition_redefinitionContext_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_redefinitionContext_spec);
	
	uML_Transition_source_lowerValue_LiteralInteger_UML_Transition_source = factory->createLiteralInteger_in_Owner(uML_Transition_source);
	
	uML_Transition_source_upperValue_LiteralUnlimitedNatural_UML_Transition_source = factory->createLiteralUnlimitedNatural_in_Owner(uML_Transition_source);
	
	uML_Transition_state_is_external_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_state_is_external);
	
	uML_Transition_state_is_internal_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_state_is_internal);
	
	uML_Transition_state_is_local_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Transition_state_is_local);
	
	uML_Transition_target_lowerValue_LiteralInteger_UML_Transition_target = factory->createLiteralInteger_in_Owner(uML_Transition_target);
	
	uML_Transition_target_upperValue_LiteralUnlimitedNatural_UML_Transition_target = factory->createLiteralUnlimitedNatural_in_Owner(uML_Transition_target);
	
	uML_Transition_trigger_lowerValue_LiteralInteger_UML_Transition_trigger = factory->createLiteralInteger_in_Owner(uML_Transition_trigger);
	
	uML_Transition_trigger_upperValue_LiteralUnlimitedNatural_UML_Transition_trigger = factory->createLiteralUnlimitedNatural_in_Owner(uML_Transition_trigger);
	
	uML_Trigger_port_lowerValue_LiteralInteger_UML_Trigger_port = factory->createLiteralInteger_in_Owner(uML_Trigger_port);
	
	uML_Trigger_port_upperValue_LiteralUnlimitedNatural_UML_Trigger_port = factory->createLiteralUnlimitedNatural_in_Owner(uML_Trigger_port);
	
	uML_Trigger_trigger_with_ports_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Trigger_trigger_with_ports);
	
	uML_Type_conformsTo_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Type_conformsTo_spec);
	
	uML_Type_getAssociations__return_lowerValue_LiteralInteger_UML_Type_getAssociations__return = factory->createLiteralInteger_in_Owner(uML_Type_getAssociations__return);
	
	uML_Type_getAssociations__return_upperValue_LiteralUnlimitedNatural_UML_Type_getAssociations__return = factory->createLiteralUnlimitedNatural_in_Owner(uML_Type_getAssociations__return);
	
	uML_Type_package_lowerValue_LiteralInteger_UML_Type_package = factory->createLiteralInteger_in_Owner(uML_Type_package);
	
	uML_TypedElement_type_lowerValue_LiteralInteger_UML_TypedElement_type = factory->createLiteralInteger_in_Owner(uML_TypedElement_type);
	
	uML_UnmarshallAction_multiplicity_of_object_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UnmarshallAction_multiplicity_of_object);
	
	uML_UnmarshallAction_number_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UnmarshallAction_number_of_result);
	
	uML_UnmarshallAction_object_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UnmarshallAction_object_type);
	
	uML_UnmarshallAction_result_upperValue_LiteralUnlimitedNatural_UML_UnmarshallAction_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_UnmarshallAction_result);
	
	uML_UnmarshallAction_structural_feature_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UnmarshallAction_structural_feature);
	
	uML_UnmarshallAction_type_ordering_and_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UnmarshallAction_type_ordering_and_multiplicity);
	
	uML_UseCase_allIncludedUseCases_result_lowerValue_LiteralInteger_UML_UseCase_allIncludedUseCases_result = factory->createLiteralInteger_in_Owner(uML_UseCase_allIncludedUseCases_result);
	
	uML_UseCase_allIncludedUseCases_result_upperValue_LiteralUnlimitedNatural_UML_UseCase_allIncludedUseCases_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_UseCase_allIncludedUseCases_result);
	
	uML_UseCase_allIncludedUseCases_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UseCase_allIncludedUseCases_spec);
	
	uML_UseCase_binary_associations_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UseCase_binary_associations);
	
	uML_UseCase_cannot_include_self_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UseCase_cannot_include_self);
	
	uML_UseCase_extend_lowerValue_LiteralInteger_UML_UseCase_extend = factory->createLiteralInteger_in_Owner(uML_UseCase_extend);
	
	uML_UseCase_extend_upperValue_LiteralUnlimitedNatural_UML_UseCase_extend = factory->createLiteralUnlimitedNatural_in_Owner(uML_UseCase_extend);
	
	uML_UseCase_extensionPoint_lowerValue_LiteralInteger_UML_UseCase_extensionPoint = factory->createLiteralInteger_in_Owner(uML_UseCase_extensionPoint);
	
	uML_UseCase_extensionPoint_upperValue_LiteralUnlimitedNatural_UML_UseCase_extensionPoint = factory->createLiteralUnlimitedNatural_in_Owner(uML_UseCase_extensionPoint);
	
	uML_UseCase_include_lowerValue_LiteralInteger_UML_UseCase_include = factory->createLiteralInteger_in_Owner(uML_UseCase_include);
	
	uML_UseCase_include_upperValue_LiteralUnlimitedNatural_UML_UseCase_include = factory->createLiteralUnlimitedNatural_in_Owner(uML_UseCase_include);
	
	uML_UseCase_must_have_name_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UseCase_must_have_name);
	
	uML_UseCase_no_association_to_use_case_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_UseCase_no_association_to_use_case);
	
	uML_UseCase_subject_lowerValue_LiteralInteger_UML_UseCase_subject = factory->createLiteralInteger_in_Owner(uML_UseCase_subject);
	
	uML_UseCase_subject_upperValue_LiteralUnlimitedNatural_UML_UseCase_subject = factory->createLiteralUnlimitedNatural_in_Owner(uML_UseCase_subject);
	
	uML_ValuePin_compatible_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValuePin_compatible_type);
	
	uML_ValuePin_no_incoming_edges_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValuePin_no_incoming_edges);
	
	uML_ValueSpecificationAction_compatible_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecificationAction_compatible_type);
	
	uML_ValueSpecificationAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecificationAction_multiplicity);
	
	uML_ValueSpecification_booleanValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_booleanValue_result = factory->createLiteralInteger_in_Owner(uML_ValueSpecification_booleanValue_result);
	
	uML_ValueSpecification_booleanValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_booleanValue_spec);
	
	uML_ValueSpecification_integerValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_integerValue_result = factory->createLiteralInteger_in_Owner(uML_ValueSpecification_integerValue_result);
	
	uML_ValueSpecification_integerValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_integerValue_spec);
	
	uML_ValueSpecification_isCompatibleWith_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_isCompatibleWith_spec);
	
	uML_ValueSpecification_isComputable_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_isComputable_spec);
	
	uML_ValueSpecification_isNull_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_isNull_spec);
	
	uML_ValueSpecification_realValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_realValue_result = factory->createLiteralInteger_in_Owner(uML_ValueSpecification_realValue_result);
	
	uML_ValueSpecification_realValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_realValue_spec);
	
	uML_ValueSpecification_stringValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_stringValue_result = factory->createLiteralInteger_in_Owner(uML_ValueSpecification_stringValue_result);
	
	uML_ValueSpecification_stringValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_stringValue_spec);
	
	uML_ValueSpecification_unlimitedValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_unlimitedValue_result = factory->createLiteralInteger_in_Owner(uML_ValueSpecification_unlimitedValue_result);
	
	uML_ValueSpecification_unlimitedValue_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_ValueSpecification_unlimitedValue_spec);
	
	uML_VariableAction_scope_of_variable_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_VariableAction_scope_of_variable);
	
	uML_Variable_activityScope_lowerValue_LiteralInteger_UML_Variable_activityScope = factory->createLiteralInteger_in_Owner(uML_Variable_activityScope);
	
	uML_Variable_isAccessibleBy_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Variable_isAccessibleBy_spec);
	
	uML_Variable_scope_lowerValue_LiteralInteger_UML_Variable_scope = factory->createLiteralInteger_in_Owner(uML_Variable_scope);
	
	uML_Vertex_container_lowerValue_LiteralInteger_UML_Vertex_container = factory->createLiteralInteger_in_Owner(uML_Vertex_container);
	
	uML_Vertex_containingStateMachine_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Vertex_containingStateMachine_spec);
	
	uML_Vertex_incoming_lowerValue_LiteralInteger_UML_Vertex_incoming = factory->createLiteralInteger_in_Owner(uML_Vertex_incoming);
	
	uML_Vertex_incoming_result_lowerValue_LiteralInteger_UML_Vertex_incoming_result = factory->createLiteralInteger_in_Owner(uML_Vertex_incoming_result);
	
	uML_Vertex_incoming_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Vertex_incoming_result);
	
	uML_Vertex_incoming_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Vertex_incoming_spec);
	
	uML_Vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming = factory->createLiteralUnlimitedNatural_in_Owner(uML_Vertex_incoming);
	
	uML_Vertex_isContainedInRegion_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Vertex_isContainedInRegion_spec);
	
	uML_Vertex_isContainedInState_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Vertex_isContainedInState_spec);
	
	uML_Vertex_outgoing_lowerValue_LiteralInteger_UML_Vertex_outgoing = factory->createLiteralInteger_in_Owner(uML_Vertex_outgoing);
	
	uML_Vertex_outgoing_result_lowerValue_LiteralInteger_UML_Vertex_outgoing_result = factory->createLiteralInteger_in_Owner(uML_Vertex_outgoing_result);
	
	uML_Vertex_outgoing_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing_result = factory->createLiteralUnlimitedNatural_in_Owner(uML_Vertex_outgoing_result);
	
	uML_Vertex_outgoing_spec_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_Vertex_outgoing_spec);
	
	uML_Vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing = factory->createLiteralUnlimitedNatural_in_Owner(uML_Vertex_outgoing);
	
	uML_WriteLinkAction_allow_access_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteLinkAction_allow_access);
	
	uML_WriteStructuralFeatureAction_multiplicity_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction_multiplicity_of_result);
	
	uML_WriteStructuralFeatureAction_multiplicity_of_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction_multiplicity_of_value);
	
	uML_WriteStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_result = factory->createLiteralInteger_in_Owner(uML_WriteStructuralFeatureAction_result);
	
	uML_WriteStructuralFeatureAction_type_of_result_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction_type_of_result);
	
	uML_WriteStructuralFeatureAction_type_of_value_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteStructuralFeatureAction_type_of_value);
	
	uML_WriteStructuralFeatureAction_value_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_value = factory->createLiteralInteger_in_Owner(uML_WriteStructuralFeatureAction_value);
	
	uML_WriteVariableAction_multiplicity_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteVariableAction_multiplicity);
	
	uML_WriteVariableAction_value_lowerValue_LiteralInteger_UML_WriteVariableAction_value = factory->createLiteralInteger_in_Owner(uML_WriteVariableAction_value);
	
	uML_WriteVariableAction_value_type_specification_OpaqueExpression = factory->createOpaqueExpression_in_Owner(uML_WriteVariableAction_value_type);
	
}

void UMLPackageImpl::initializePackageContents(std::shared_ptr<uml::Package> uML)
{
	if (isInitialized)
	{
		return;
	}
	isInitialized = true;

	// Initialize package
	setName(eNAME);
	setURI(eNS_URI);

	initializePackageActivities();
	initializePackageClasses();
	initializePackageDependencies();
	initializePackageInstanceSpecifications();
	initializePackageInterfaceRealizations();
	initializePackageInterfaces();
	initializePackageStereotypes();
	initializePackageValueSpecifications();

	
}

//ActivityNodes and Edges
void UMLPackageImpl::initializePackageActivities()
{
}


void UMLPackageImpl::initializePackageClasses()
{
	std::shared_ptr<uml::Generalization> gen = nullptr;

	//	class Abstraction
	uML_Abstraction->setName("Abstraction");
	uML_Abstraction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Abstraction());
	gen->setGeneral(get_UML_Dependency());
	
    // Abstraction attributes
	uML_Abstraction_mapping->setName("mapping");
	uML_Abstraction_mapping->setType(get_UML_OpaqueExpression());
	uML_Abstraction_mapping->setLower(0);
	uML_Abstraction_mapping->setUpper(1);
	uML_Abstraction_mapping->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class AcceptCallAction
	uML_AcceptCallAction->setName("AcceptCallAction");
	uML_AcceptCallAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AcceptCallAction());
	gen->setGeneral(get_UML_AcceptEventAction());
	
    // AcceptCallAction attributes
	uML_AcceptCallAction_returnInformation->setName("returnInformation");
	uML_AcceptCallAction_returnInformation->setType(get_UML_OutputPin());
	uML_AcceptCallAction_returnInformation->setLower(1);
	uML_AcceptCallAction_returnInformation->setUpper(1);
	uML_AcceptCallAction_returnInformation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class AcceptEventAction
	uML_AcceptEventAction->setName("AcceptEventAction");
	uML_AcceptEventAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AcceptEventAction());
	gen->setGeneral(get_UML_Action());
	
    // AcceptEventAction attributes
	uML_AcceptEventAction_isUnmarshall->setName("isUnmarshall");
	uML_AcceptEventAction_isUnmarshall->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_AcceptEventAction_isUnmarshall->setLower(1);
	uML_AcceptEventAction_isUnmarshall->setUpper(1);
	uML_AcceptEventAction_isUnmarshall->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_AcceptEventAction_isUnmarshall->setDefaultValue(uML_AcceptEventAction_isUnmarshall_defaultValue_LiteralBoolean_UML_AcceptEventAction_isUnmarshall);
	
	uML_AcceptEventAction_result->setName("result");
	uML_AcceptEventAction_result->setType(get_UML_OutputPin());
	uML_AcceptEventAction_result->setLower(0);
	uML_AcceptEventAction_result->setUpper(-1);
	uML_AcceptEventAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_AcceptEventAction_trigger->setName("trigger");
	uML_AcceptEventAction_trigger->setType(get_UML_Trigger());
	uML_AcceptEventAction_trigger->setLower(1);
	uML_AcceptEventAction_trigger->setUpper(-1);
	uML_AcceptEventAction_trigger->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Action
	uML_Action->setName("Action");
	uML_Action->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Action());
	gen->setGeneral(get_UML_ExecutableNode());
	
    // Action attributes
	uML_Action_context->setName("context");
	uML_Action_context->setType(get_UML_Classifier());
	uML_Action_context->setLower(0);
	uML_Action_context->setUpper(1);
	uML_Action_context->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Action_input->setName("input");
	uML_Action_input->setType(get_UML_InputPin());
	uML_Action_input->setLower(0);
	uML_Action_input->setUpper(-1);
	uML_Action_input->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Action_isLocallyReentrant->setName("isLocallyReentrant");
	uML_Action_isLocallyReentrant->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Action_isLocallyReentrant->setLower(1);
	uML_Action_isLocallyReentrant->setUpper(1);
	uML_Action_isLocallyReentrant->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Action_isLocallyReentrant->setDefaultValue(uML_Action_isLocallyReentrant_defaultValue_LiteralBoolean_UML_Action_isLocallyReentrant);
	
	uML_Action_localPostcondition->setName("localPostcondition");
	uML_Action_localPostcondition->setType(get_UML_Constraint());
	uML_Action_localPostcondition->setLower(0);
	uML_Action_localPostcondition->setUpper(-1);
	uML_Action_localPostcondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Action_localPrecondition->setName("localPrecondition");
	uML_Action_localPrecondition->setType(get_UML_Constraint());
	uML_Action_localPrecondition->setLower(0);
	uML_Action_localPrecondition->setUpper(-1);
	uML_Action_localPrecondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Action_output->setName("output");
	uML_Action_output->setType(get_UML_OutputPin());
	uML_Action_output->setLower(0);
	uML_Action_output->setUpper(-1);
	uML_Action_output->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Action operations
	uML_Action_allActions__->setName("allActions");
	
	// parameter result
	uML_Action_allActions_result->setName("result");
	uML_Action_allActions_result->setType(get_UML_Action());
	uML_Action_allActions_result->setLower(0);
	uML_Action_allActions_result->setUpper(-1);
	uML_Action_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Action_allOwnedNodes__->setName("allOwnedNodes");
	
	// parameter result
	uML_Action_allOwnedNodes_result->setName("result");
	uML_Action_allOwnedNodes_result->setType(get_UML_ActivityNode());
	uML_Action_allOwnedNodes_result->setLower(0);
	uML_Action_allOwnedNodes_result->setUpper(-1);
	uML_Action_allOwnedNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Action_containingBehavior__->setName("containingBehavior");
	
	// parameter result
	uML_Action_containingBehavior_result->setName("result");
	uML_Action_containingBehavior_result->setType(get_UML_Behavior());
	uML_Action_containingBehavior_result->setLower(0);
	uML_Action_containingBehavior_result->setUpper(1);
	uML_Action_containingBehavior_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Action_context__->setName("context");
	
	// parameter result
	uML_Action_context_result->setName("result");
	uML_Action_context_result->setType(get_UML_Classifier());
	uML_Action_context_result->setLower(0);
	uML_Action_context_result->setUpper(1);
	uML_Action_context_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ActionExecutionSpecification
	uML_ActionExecutionSpecification->setName("ActionExecutionSpecification");
	uML_ActionExecutionSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActionExecutionSpecification());
	gen->setGeneral(get_UML_ExecutionSpecification());
	
    // ActionExecutionSpecification attributes
	uML_ActionExecutionSpecification_action->setName("action");
	uML_ActionExecutionSpecification_action->setType(get_UML_Action());
	uML_ActionExecutionSpecification_action->setLower(1);
	uML_ActionExecutionSpecification_action->setUpper(1);
	uML_ActionExecutionSpecification_action->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ActionInputPin
	uML_ActionInputPin->setName("ActionInputPin");
	uML_ActionInputPin->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActionInputPin());
	gen->setGeneral(get_UML_InputPin());
	
    // ActionInputPin attributes
	uML_ActionInputPin_fromAction->setName("fromAction");
	uML_ActionInputPin_fromAction->setType(get_UML_Action());
	uML_ActionInputPin_fromAction->setLower(1);
	uML_ActionInputPin_fromAction->setUpper(1);
	uML_ActionInputPin_fromAction->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Activity
	uML_Activity->setName("Activity");
	uML_Activity->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Activity());
	gen->setGeneral(get_UML_Behavior());
	
    // Activity attributes
	uML_Activity_edge->setName("edge");
	uML_Activity_edge->setType(get_UML_ActivityEdge());
	uML_Activity_edge->setLower(0);
	uML_Activity_edge->setUpper(-1);
	uML_Activity_edge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Activity_group->setName("group");
	uML_Activity_group->setType(get_UML_ActivityGroup());
	uML_Activity_group->setLower(0);
	uML_Activity_group->setUpper(-1);
	uML_Activity_group->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Activity_isReadOnly->setName("isReadOnly");
	uML_Activity_isReadOnly->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Activity_isReadOnly->setLower(1);
	uML_Activity_isReadOnly->setUpper(1);
	uML_Activity_isReadOnly->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Activity_isReadOnly->setDefaultValue(uML_Activity_isReadOnly_defaultValue_LiteralBoolean_UML_Activity_isReadOnly);
	
	uML_Activity_isSingleExecution->setName("isSingleExecution");
	uML_Activity_isSingleExecution->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Activity_isSingleExecution->setLower(1);
	uML_Activity_isSingleExecution->setUpper(1);
	uML_Activity_isSingleExecution->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Activity_isSingleExecution->setDefaultValue(uML_Activity_isSingleExecution_defaultValue_LiteralBoolean_UML_Activity_isSingleExecution);
	
	uML_Activity_node->setName("node");
	uML_Activity_node->setType(get_UML_ActivityNode());
	uML_Activity_node->setLower(0);
	uML_Activity_node->setUpper(-1);
	uML_Activity_node->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Activity_ownedGroup->setName("ownedGroup");
	uML_Activity_ownedGroup->setType(get_UML_ActivityGroup());
	uML_Activity_ownedGroup->setLower(0);
	uML_Activity_ownedGroup->setUpper(-1);
	uML_Activity_ownedGroup->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Activity_ownedNode->setName("ownedNode");
	uML_Activity_ownedNode->setType(get_UML_ActivityNode());
	uML_Activity_ownedNode->setLower(0);
	uML_Activity_ownedNode->setUpper(-1);
	uML_Activity_ownedNode->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Activity_partition->setName("partition");
	uML_Activity_partition->setType(get_UML_ActivityPartition());
	uML_Activity_partition->setLower(0);
	uML_Activity_partition->setUpper(-1);
	uML_Activity_partition->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Activity_structuredNode->setName("structuredNode");
	uML_Activity_structuredNode->setType(get_UML_StructuredActivityNode());
	uML_Activity_structuredNode->setLower(0);
	uML_Activity_structuredNode->setUpper(-1);
	uML_Activity_structuredNode->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Activity_variable->setName("variable");
	uML_Activity_variable->setType(get_UML_Variable());
	uML_Activity_variable->setLower(0);
	uML_Activity_variable->setUpper(-1);
	uML_Activity_variable->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ActivityEdge
	uML_ActivityEdge->setName("ActivityEdge");
	uML_ActivityEdge->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActivityEdge());
	gen->setGeneral(get_UML_RedefinableElement());
	
    // ActivityEdge attributes
	uML_ActivityEdge_activity->setName("activity");
	uML_ActivityEdge_activity->setType(get_UML_Activity());
	uML_ActivityEdge_activity->setLower(0);
	uML_ActivityEdge_activity->setUpper(1);
	uML_ActivityEdge_activity->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_guard->setName("guard");
	uML_ActivityEdge_guard->setType(get_UML_ValueSpecification());
	uML_ActivityEdge_guard->setLower(0);
	uML_ActivityEdge_guard->setUpper(1);
	uML_ActivityEdge_guard->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_inGroup->setName("inGroup");
	uML_ActivityEdge_inGroup->setType(get_UML_ActivityGroup());
	uML_ActivityEdge_inGroup->setLower(0);
	uML_ActivityEdge_inGroup->setUpper(-1);
	uML_ActivityEdge_inGroup->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_inPartition->setName("inPartition");
	uML_ActivityEdge_inPartition->setType(get_UML_ActivityPartition());
	uML_ActivityEdge_inPartition->setLower(0);
	uML_ActivityEdge_inPartition->setUpper(-1);
	uML_ActivityEdge_inPartition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_inStructuredNode->setName("inStructuredNode");
	uML_ActivityEdge_inStructuredNode->setType(get_UML_StructuredActivityNode());
	uML_ActivityEdge_inStructuredNode->setLower(0);
	uML_ActivityEdge_inStructuredNode->setUpper(1);
	uML_ActivityEdge_inStructuredNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_interrupts->setName("interrupts");
	uML_ActivityEdge_interrupts->setType(get_UML_InterruptibleActivityRegion());
	uML_ActivityEdge_interrupts->setLower(0);
	uML_ActivityEdge_interrupts->setUpper(1);
	uML_ActivityEdge_interrupts->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_redefinedEdge->setName("redefinedEdge");
	uML_ActivityEdge_redefinedEdge->setType(get_UML_ActivityEdge());
	uML_ActivityEdge_redefinedEdge->setLower(0);
	uML_ActivityEdge_redefinedEdge->setUpper(-1);
	uML_ActivityEdge_redefinedEdge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_source->setName("source");
	uML_ActivityEdge_source->setType(get_UML_ActivityNode());
	uML_ActivityEdge_source->setLower(1);
	uML_ActivityEdge_source->setUpper(1);
	uML_ActivityEdge_source->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_target->setName("target");
	uML_ActivityEdge_target->setType(get_UML_ActivityNode());
	uML_ActivityEdge_target->setLower(1);
	uML_ActivityEdge_target->setUpper(1);
	uML_ActivityEdge_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityEdge_weight->setName("weight");
	uML_ActivityEdge_weight->setType(get_UML_ValueSpecification());
	uML_ActivityEdge_weight->setLower(0);
	uML_ActivityEdge_weight->setUpper(1);
	uML_ActivityEdge_weight->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ActivityEdge operations
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_ActivityEdge_isConsistentWith_result->setName("result");
	uML_ActivityEdge_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityEdge_isConsistentWith_result->setLower(1);
	uML_ActivityEdge_isConsistentWith_result->setUpper(1);
	uML_ActivityEdge_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class ActivityFinalNode
	uML_ActivityFinalNode->setName("ActivityFinalNode");
	uML_ActivityFinalNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActivityFinalNode());
	gen->setGeneral(get_UML_FinalNode());
	

    //-------------------------------------------
	//	class ActivityGroup
	uML_ActivityGroup->setName("ActivityGroup");
	uML_ActivityGroup->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActivityGroup());
	gen->setGeneral(get_UML_NamedElement());
	
    // ActivityGroup attributes
	uML_ActivityGroup_containedEdge->setName("containedEdge");
	uML_ActivityGroup_containedEdge->setType(get_UML_ActivityEdge());
	uML_ActivityGroup_containedEdge->setLower(0);
	uML_ActivityGroup_containedEdge->setUpper(-1);
	uML_ActivityGroup_containedEdge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityGroup_containedNode->setName("containedNode");
	uML_ActivityGroup_containedNode->setType(get_UML_ActivityNode());
	uML_ActivityGroup_containedNode->setLower(0);
	uML_ActivityGroup_containedNode->setUpper(-1);
	uML_ActivityGroup_containedNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityGroup_inActivity->setName("inActivity");
	uML_ActivityGroup_inActivity->setType(get_UML_Activity());
	uML_ActivityGroup_inActivity->setLower(0);
	uML_ActivityGroup_inActivity->setUpper(1);
	uML_ActivityGroup_inActivity->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_ActivityGroup_subgroup->setName("subgroup");
	uML_ActivityGroup_subgroup->setType(get_UML_ActivityGroup());
	uML_ActivityGroup_subgroup->setLower(0);
	uML_ActivityGroup_subgroup->setUpper(-1);
	uML_ActivityGroup_subgroup->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityGroup_superGroup->setName("superGroup");
	uML_ActivityGroup_superGroup->setType(get_UML_ActivityGroup());
	uML_ActivityGroup_superGroup->setLower(0);
	uML_ActivityGroup_superGroup->setUpper(1);
	uML_ActivityGroup_superGroup->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ActivityGroup operations
	uML_ActivityGroup_containingActivity__->setName("containingActivity");
	
	// parameter result
	uML_ActivityGroup_containingActivity_result->setName("result");
	uML_ActivityGroup_containingActivity_result->setType(get_UML_Activity());
	uML_ActivityGroup_containingActivity_result->setLower(0);
	uML_ActivityGroup_containingActivity_result->setUpper(1);
	uML_ActivityGroup_containingActivity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ActivityNode
	uML_ActivityNode->setName("ActivityNode");
	uML_ActivityNode->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActivityNode());
	gen->setGeneral(get_UML_RedefinableElement());
	
    // ActivityNode attributes
	uML_ActivityNode_activity->setName("activity");
	uML_ActivityNode_activity->setType(get_UML_Activity());
	uML_ActivityNode_activity->setLower(0);
	uML_ActivityNode_activity->setUpper(1);
	uML_ActivityNode_activity->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_ActivityNode_inGroup->setName("inGroup");
	uML_ActivityNode_inGroup->setType(get_UML_ActivityGroup());
	uML_ActivityNode_inGroup->setLower(0);
	uML_ActivityNode_inGroup->setUpper(-1);
	uML_ActivityNode_inGroup->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityNode_inInterruptibleRegion->setName("inInterruptibleRegion");
	uML_ActivityNode_inInterruptibleRegion->setType(get_UML_InterruptibleActivityRegion());
	uML_ActivityNode_inInterruptibleRegion->setLower(0);
	uML_ActivityNode_inInterruptibleRegion->setUpper(-1);
	uML_ActivityNode_inInterruptibleRegion->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityNode_inPartition->setName("inPartition");
	uML_ActivityNode_inPartition->setType(get_UML_ActivityPartition());
	uML_ActivityNode_inPartition->setLower(0);
	uML_ActivityNode_inPartition->setUpper(-1);
	uML_ActivityNode_inPartition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityNode_inStructuredNode->setName("inStructuredNode");
	uML_ActivityNode_inStructuredNode->setType(get_UML_StructuredActivityNode());
	uML_ActivityNode_inStructuredNode->setLower(0);
	uML_ActivityNode_inStructuredNode->setUpper(1);
	uML_ActivityNode_inStructuredNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityNode_incoming->setName("incoming");
	uML_ActivityNode_incoming->setType(get_UML_ActivityEdge());
	uML_ActivityNode_incoming->setLower(0);
	uML_ActivityNode_incoming->setUpper(-1);
	uML_ActivityNode_incoming->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityNode_outgoing->setName("outgoing");
	uML_ActivityNode_outgoing->setType(get_UML_ActivityEdge());
	uML_ActivityNode_outgoing->setLower(0);
	uML_ActivityNode_outgoing->setUpper(-1);
	uML_ActivityNode_outgoing->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityNode_redefinedNode->setName("redefinedNode");
	uML_ActivityNode_redefinedNode->setType(get_UML_ActivityNode());
	uML_ActivityNode_redefinedNode->setLower(0);
	uML_ActivityNode_redefinedNode->setUpper(-1);
	uML_ActivityNode_redefinedNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ActivityNode operations
	uML_ActivityNode_containingActivity__->setName("containingActivity");
	
	// parameter result
	uML_ActivityNode_containingActivity_result->setName("result");
	uML_ActivityNode_containingActivity_result->setType(get_UML_Activity());
	uML_ActivityNode_containingActivity_result->setLower(0);
	uML_ActivityNode_containingActivity_result->setUpper(1);
	uML_ActivityNode_containingActivity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_ActivityNode_isConsistentWith_result->setName("result");
	uML_ActivityNode_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityNode_isConsistentWith_result->setLower(1);
	uML_ActivityNode_isConsistentWith_result->setUpper(1);
	uML_ActivityNode_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class ActivityParameterNode
	uML_ActivityParameterNode->setName("ActivityParameterNode");
	uML_ActivityParameterNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActivityParameterNode());
	gen->setGeneral(get_UML_ObjectNode());
	
    // ActivityParameterNode attributes
	uML_ActivityParameterNode_parameter->setName("parameter");
	uML_ActivityParameterNode_parameter->setType(get_UML_Parameter());
	uML_ActivityParameterNode_parameter->setLower(1);
	uML_ActivityParameterNode_parameter->setUpper(1);
	uML_ActivityParameterNode_parameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ActivityPartition
	uML_ActivityPartition->setName("ActivityPartition");
	uML_ActivityPartition->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ActivityPartition());
	gen->setGeneral(get_UML_ActivityGroup());
	
    // ActivityPartition attributes
	uML_ActivityPartition_edge->setName("edge");
	uML_ActivityPartition_edge->setType(get_UML_ActivityEdge());
	uML_ActivityPartition_edge->setLower(0);
	uML_ActivityPartition_edge->setUpper(-1);
	uML_ActivityPartition_edge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityPartition_isDimension->setName("isDimension");
	uML_ActivityPartition_isDimension->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityPartition_isDimension->setLower(1);
	uML_ActivityPartition_isDimension->setUpper(1);
	uML_ActivityPartition_isDimension->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ActivityPartition_isDimension->setDefaultValue(uML_ActivityPartition_isDimension_defaultValue_LiteralBoolean_UML_ActivityPartition_isDimension);
	
	uML_ActivityPartition_isExternal->setName("isExternal");
	uML_ActivityPartition_isExternal->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityPartition_isExternal->setLower(1);
	uML_ActivityPartition_isExternal->setUpper(1);
	uML_ActivityPartition_isExternal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ActivityPartition_isExternal->setDefaultValue(uML_ActivityPartition_isExternal_defaultValue_LiteralBoolean_UML_ActivityPartition_isExternal);
	
	uML_ActivityPartition_node->setName("node");
	uML_ActivityPartition_node->setType(get_UML_ActivityNode());
	uML_ActivityPartition_node->setLower(0);
	uML_ActivityPartition_node->setUpper(-1);
	uML_ActivityPartition_node->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityPartition_represents->setName("represents");
	uML_ActivityPartition_represents->setType(get_UML_Element());
	uML_ActivityPartition_represents->setLower(0);
	uML_ActivityPartition_represents->setUpper(1);
	uML_ActivityPartition_represents->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityPartition_subpartition->setName("subpartition");
	uML_ActivityPartition_subpartition->setType(get_UML_ActivityPartition());
	uML_ActivityPartition_subpartition->setLower(0);
	uML_ActivityPartition_subpartition->setUpper(-1);
	uML_ActivityPartition_subpartition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ActivityPartition_superPartition->setName("superPartition");
	uML_ActivityPartition_superPartition->setType(get_UML_ActivityPartition());
	uML_ActivityPartition_superPartition->setLower(0);
	uML_ActivityPartition_superPartition->setUpper(1);
	uML_ActivityPartition_superPartition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Actor
	uML_Actor->setName("Actor");
	uML_Actor->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Actor());
	gen->setGeneral(get_UML_BehavioredClassifier());
	

    //-------------------------------------------
	//	class AddStructuralFeatureValueAction
	uML_AddStructuralFeatureValueAction->setName("AddStructuralFeatureValueAction");
	uML_AddStructuralFeatureValueAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AddStructuralFeatureValueAction());
	gen->setGeneral(get_UML_WriteStructuralFeatureAction());
	
    // AddStructuralFeatureValueAction attributes
	uML_AddStructuralFeatureValueAction_insertAt->setName("insertAt");
	uML_AddStructuralFeatureValueAction_insertAt->setType(get_UML_InputPin());
	uML_AddStructuralFeatureValueAction_insertAt->setLower(0);
	uML_AddStructuralFeatureValueAction_insertAt->setUpper(1);
	uML_AddStructuralFeatureValueAction_insertAt->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_AddStructuralFeatureValueAction_isReplaceAll->setName("isReplaceAll");
	uML_AddStructuralFeatureValueAction_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_AddStructuralFeatureValueAction_isReplaceAll->setLower(1);
	uML_AddStructuralFeatureValueAction_isReplaceAll->setUpper(1);
	uML_AddStructuralFeatureValueAction_isReplaceAll->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_AddStructuralFeatureValueAction_isReplaceAll->setDefaultValue(uML_AddStructuralFeatureValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddStructuralFeatureValueAction_isReplaceAll);
	


    //-------------------------------------------
	//	class AddVariableValueAction
	uML_AddVariableValueAction->setName("AddVariableValueAction");
	uML_AddVariableValueAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AddVariableValueAction());
	gen->setGeneral(get_UML_WriteVariableAction());
	
    // AddVariableValueAction attributes
	uML_AddVariableValueAction_insertAt->setName("insertAt");
	uML_AddVariableValueAction_insertAt->setType(get_UML_InputPin());
	uML_AddVariableValueAction_insertAt->setLower(0);
	uML_AddVariableValueAction_insertAt->setUpper(1);
	uML_AddVariableValueAction_insertAt->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_AddVariableValueAction_isReplaceAll->setName("isReplaceAll");
	uML_AddVariableValueAction_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_AddVariableValueAction_isReplaceAll->setLower(1);
	uML_AddVariableValueAction_isReplaceAll->setUpper(1);
	uML_AddVariableValueAction_isReplaceAll->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_AddVariableValueAction_isReplaceAll->setDefaultValue(uML_AddVariableValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddVariableValueAction_isReplaceAll);
	


    //-------------------------------------------
	//	class AnyReceiveEvent
	uML_AnyReceiveEvent->setName("AnyReceiveEvent");
	uML_AnyReceiveEvent->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AnyReceiveEvent());
	gen->setGeneral(get_UML_MessageEvent());
	

    //-------------------------------------------
	//	class Artifact
	uML_Artifact->setName("Artifact");
	uML_Artifact->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Artifact());
	gen->setGeneral(get_UML_Classifier());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Artifact());
	gen->setGeneral(get_UML_DeployedArtifact());
	
    // Artifact attributes
	uML_Artifact_fileName->setName("fileName");
	uML_Artifact_fileName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Artifact_fileName->setLower(0);
	uML_Artifact_fileName->setUpper(1);
	uML_Artifact_fileName->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Artifact_manifestation->setName("manifestation");
	uML_Artifact_manifestation->setType(get_UML_Manifestation());
	uML_Artifact_manifestation->setLower(0);
	uML_Artifact_manifestation->setUpper(-1);
	uML_Artifact_manifestation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Artifact_nestedArtifact->setName("nestedArtifact");
	uML_Artifact_nestedArtifact->setType(get_UML_Artifact());
	uML_Artifact_nestedArtifact->setLower(0);
	uML_Artifact_nestedArtifact->setUpper(-1);
	uML_Artifact_nestedArtifact->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Artifact_ownedAttribute->setName("ownedAttribute");
	uML_Artifact_ownedAttribute->setType(get_UML_Property());
	uML_Artifact_ownedAttribute->setLower(0);
	uML_Artifact_ownedAttribute->setUpper(-1);
	uML_Artifact_ownedAttribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Artifact_ownedOperation->setName("ownedOperation");
	uML_Artifact_ownedOperation->setType(get_UML_Operation());
	uML_Artifact_ownedOperation->setLower(0);
	uML_Artifact_ownedOperation->setUpper(-1);
	uML_Artifact_ownedOperation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Artifact operations
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	
	// parameter 
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setName("");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setType(get_UML_Property());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setName("name");
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setLower(0);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setUpper(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter type
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setName("type");
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setType(get_UML_Type());
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setLower(0);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setUpper(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter lower
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setName("lower");
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setLower(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setUpper(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter upper
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setName("upper");
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setLower(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setUpper(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type->setName("createOwnedOperation");
	
	// parameter 
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setName("");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setType(get_UML_Operation());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setLower(1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setUpper(1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setName("name");
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setLower(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setUpper(1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterNames
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setName("parameterNames");
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setLower(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setUpper(-1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterTypes
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setName("parameterTypes");
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setType(get_UML_Type());
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setLower(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setUpper(-1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter returnType
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setName("returnType");
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setType(get_UML_Type());
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setLower(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setUpper(1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class Association
	uML_Association->setName("Association");
	uML_Association->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Association());
	gen->setGeneral(get_UML_Classifier());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Association());
	gen->setGeneral(get_UML_Relationship());
	
    // Association attributes
	uML_Association_endType->setName("endType");
	uML_Association_endType->setType(get_UML_Type());
	uML_Association_endType->setLower(1);
	uML_Association_endType->setUpper(-1);
	uML_Association_endType->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Association_isDerived->setName("isDerived");
	uML_Association_isDerived->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Association_isDerived->setLower(1);
	uML_Association_isDerived->setUpper(1);
	uML_Association_isDerived->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Association_isDerived->setDefaultValue(uML_Association_isDerived_defaultValue_LiteralBoolean_UML_Association_isDerived);
	
	uML_Association_memberEnd->setName("memberEnd");
	uML_Association_memberEnd->setType(get_UML_Property());
	uML_Association_memberEnd->setLower(2);
	uML_Association_memberEnd->setUpper(-1);
	uML_Association_memberEnd->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Association_navigableOwnedEnd->setName("navigableOwnedEnd");
	uML_Association_navigableOwnedEnd->setType(get_UML_Property());
	uML_Association_navigableOwnedEnd->setLower(0);
	uML_Association_navigableOwnedEnd->setUpper(-1);
	uML_Association_navigableOwnedEnd->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Association_ownedEnd->setName("ownedEnd");
	uML_Association_ownedEnd->setType(get_UML_Property());
	uML_Association_ownedEnd->setLower(0);
	uML_Association_ownedEnd->setUpper(-1);
	uML_Association_ownedEnd->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Association operations
	uML_Association_endType__->setName("endType");
	
	// parameter result
	uML_Association_endType_result->setName("result");
	uML_Association_endType_result->setType(get_UML_Type());
	uML_Association_endType_result->setLower(1);
	uML_Association_endType_result->setUpper(-1);
	uML_Association_endType_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Association_isBinary__->setName("isBinary");
	
	// parameter 
	uML_Association_isBinary__return->setName("");
	uML_Association_isBinary__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Association_isBinary__return->setLower(1);
	uML_Association_isBinary__return->setUpper(1);
	uML_Association_isBinary__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class AssociationClass
	uML_AssociationClass->setName("AssociationClass");
	uML_AssociationClass->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AssociationClass());
	gen->setGeneral(get_UML_Association());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_AssociationClass());
	gen->setGeneral(get_UML_Class());
	

    //-------------------------------------------
	//	class Behavior
	uML_Behavior->setName("Behavior");
	uML_Behavior->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Behavior());
	gen->setGeneral(get_UML_Class());
	
    // Behavior attributes
	uML_Behavior_context->setName("context");
	uML_Behavior_context->setType(get_UML_BehavioredClassifier());
	uML_Behavior_context->setLower(0);
	uML_Behavior_context->setUpper(1);
	uML_Behavior_context->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Behavior_isReentrant->setName("isReentrant");
	uML_Behavior_isReentrant->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Behavior_isReentrant->setLower(0);
	uML_Behavior_isReentrant->setUpper(1);
	uML_Behavior_isReentrant->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Behavior_isReentrant->setDefaultValue(uML_Behavior_isReentrant_defaultValue_LiteralBoolean_UML_Behavior_isReentrant);
	
	uML_Behavior_ownedParameter->setName("ownedParameter");
	uML_Behavior_ownedParameter->setType(get_UML_Parameter());
	uML_Behavior_ownedParameter->setLower(0);
	uML_Behavior_ownedParameter->setUpper(-1);
	uML_Behavior_ownedParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Behavior_ownedParameterSet->setName("ownedParameterSet");
	uML_Behavior_ownedParameterSet->setType(get_UML_ParameterSet());
	uML_Behavior_ownedParameterSet->setLower(0);
	uML_Behavior_ownedParameterSet->setUpper(-1);
	uML_Behavior_ownedParameterSet->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Behavior_postcondition->setName("postcondition");
	uML_Behavior_postcondition->setType(get_UML_Constraint());
	uML_Behavior_postcondition->setLower(0);
	uML_Behavior_postcondition->setUpper(-1);
	uML_Behavior_postcondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Behavior_precondition->setName("precondition");
	uML_Behavior_precondition->setType(get_UML_Constraint());
	uML_Behavior_precondition->setLower(0);
	uML_Behavior_precondition->setUpper(-1);
	uML_Behavior_precondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Behavior_redefinedBehavior->setName("redefinedBehavior");
	uML_Behavior_redefinedBehavior->setType(get_UML_Behavior());
	uML_Behavior_redefinedBehavior->setLower(0);
	uML_Behavior_redefinedBehavior->setUpper(-1);
	uML_Behavior_redefinedBehavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Behavior_specification->setName("specification");
	uML_Behavior_specification->setType(get_UML_BehavioralFeature());
	uML_Behavior_specification->setLower(0);
	uML_Behavior_specification->setUpper(1);
	uML_Behavior_specification->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Behavior operations
	uML_Behavior_behavioredClassifier_Element_Element->setName("behavioredClassifier");
	
	// parameter from
	uML_Behavior_behavioredClassifier_Element_Element_from->setName("from");
	uML_Behavior_behavioredClassifier_Element_Element_from->setType(get_UML_Element());
	uML_Behavior_behavioredClassifier_Element_Element_from->setLower(1);
	uML_Behavior_behavioredClassifier_Element_Element_from->setUpper(1);
	uML_Behavior_behavioredClassifier_Element_Element_from->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter result
	
	uML_Behavior_behavioredClassifier_result->setName("result");
	
	uML_Behavior_behavioredClassifier_result->setType(get_UML_BehavioredClassifier());
	
	uML_Behavior_behavioredClassifier_result->setLower(0);
	
	uML_Behavior_behavioredClassifier_result->setUpper(1);
	
	uML_Behavior_behavioredClassifier_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Behavior_context__->setName("context");
	
	// parameter result
	uML_Behavior_context_result->setName("result");
	uML_Behavior_context_result->setType(get_UML_BehavioredClassifier());
	uML_Behavior_context_result->setLower(0);
	uML_Behavior_context_result->setUpper(1);
	uML_Behavior_context_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Behavior_inputParameters__->setName("inputParameters");
	
	// parameter result
	uML_Behavior_inputParameters_result->setName("result");
	uML_Behavior_inputParameters_result->setType(get_UML_Parameter());
	uML_Behavior_inputParameters_result->setLower(0);
	uML_Behavior_inputParameters_result->setUpper(-1);
	uML_Behavior_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Behavior_outputParameters__->setName("outputParameters");
	
	// parameter result
	uML_Behavior_outputParameters_result->setName("result");
	uML_Behavior_outputParameters_result->setType(get_UML_Parameter());
	uML_Behavior_outputParameters_result->setLower(0);
	uML_Behavior_outputParameters_result->setUpper(-1);
	uML_Behavior_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class BehaviorExecutionSpecification
	uML_BehaviorExecutionSpecification->setName("BehaviorExecutionSpecification");
	uML_BehaviorExecutionSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_BehaviorExecutionSpecification());
	gen->setGeneral(get_UML_ExecutionSpecification());
	
    // BehaviorExecutionSpecification attributes
	uML_BehaviorExecutionSpecification_behavior->setName("behavior");
	uML_BehaviorExecutionSpecification_behavior->setType(get_UML_Behavior());
	uML_BehaviorExecutionSpecification_behavior->setLower(0);
	uML_BehaviorExecutionSpecification_behavior->setUpper(1);
	uML_BehaviorExecutionSpecification_behavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class BehavioralFeature
	uML_BehavioralFeature->setName("BehavioralFeature");
	uML_BehavioralFeature->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_BehavioralFeature());
	gen->setGeneral(get_UML_Feature());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_BehavioralFeature());
	gen->setGeneral(get_UML_Namespace());
	
    // BehavioralFeature attributes
	uML_BehavioralFeature_concurrency->setName("concurrency");
	uML_BehavioralFeature_concurrency->setType(get_UML_CallConcurrencyKind());
	uML_BehavioralFeature_concurrency->setLower(1);
	uML_BehavioralFeature_concurrency->setUpper(1);
	uML_BehavioralFeature_concurrency->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_BehavioralFeature_concurrency->setDefaultValue(uML_BehavioralFeature_concurrency_defaultValue_InstanceValue);
	
	uML_BehavioralFeature_isAbstract->setName("isAbstract");
	uML_BehavioralFeature_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_BehavioralFeature_isAbstract->setLower(1);
	uML_BehavioralFeature_isAbstract->setUpper(1);
	uML_BehavioralFeature_isAbstract->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_BehavioralFeature_isAbstract->setDefaultValue(uML_BehavioralFeature_isAbstract_defaultValue_LiteralBoolean_UML_BehavioralFeature_isAbstract);
	
	uML_BehavioralFeature_method->setName("method");
	uML_BehavioralFeature_method->setType(get_UML_Behavior());
	uML_BehavioralFeature_method->setLower(0);
	uML_BehavioralFeature_method->setUpper(-1);
	uML_BehavioralFeature_method->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_BehavioralFeature_ownedParameter->setName("ownedParameter");
	uML_BehavioralFeature_ownedParameter->setType(get_UML_Parameter());
	uML_BehavioralFeature_ownedParameter->setLower(0);
	uML_BehavioralFeature_ownedParameter->setUpper(-1);
	uML_BehavioralFeature_ownedParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_BehavioralFeature_ownedParameterSet->setName("ownedParameterSet");
	uML_BehavioralFeature_ownedParameterSet->setType(get_UML_ParameterSet());
	uML_BehavioralFeature_ownedParameterSet->setLower(0);
	uML_BehavioralFeature_ownedParameterSet->setUpper(-1);
	uML_BehavioralFeature_ownedParameterSet->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_BehavioralFeature_raisedException->setName("raisedException");
	uML_BehavioralFeature_raisedException->setType(get_UML_Type());
	uML_BehavioralFeature_raisedException->setLower(0);
	uML_BehavioralFeature_raisedException->setUpper(-1);
	uML_BehavioralFeature_raisedException->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // BehavioralFeature operations
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type->setName("createReturnResult");
	
	// parameter 
	uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn->setName("");
	uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn->setType(get_UML_Parameter());
	uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn->setLower(1);
	uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn->setUpper(1);
	uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setName("name");
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setLower(0);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setUpper(1);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter type
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setName("type");
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setType(get_UML_Type());
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setLower(0);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setUpper(1);
	
	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_BehavioralFeature_inputParameters__->setName("inputParameters");
	
	// parameter result
	uML_BehavioralFeature_inputParameters_result->setName("result");
	uML_BehavioralFeature_inputParameters_result->setType(get_UML_Parameter());
	uML_BehavioralFeature_inputParameters_result->setLower(0);
	uML_BehavioralFeature_inputParameters_result->setUpper(-1);
	uML_BehavioralFeature_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace->setName("isDistinguishableFrom");
	
	// parameter result
	uML_BehavioralFeature_isDistinguishableFrom_result->setName("result");
	uML_BehavioralFeature_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_BehavioralFeature_isDistinguishableFrom_result->setLower(1);
	uML_BehavioralFeature_isDistinguishableFrom_result->setUpper(1);
	uML_BehavioralFeature_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter n
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setName("n");
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setType(get_UML_NamedElement());
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setLower(1);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setUpper(1);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter ns
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setName("ns");
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setType(get_UML_Namespace());
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setLower(1);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setUpper(1);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_BehavioralFeature_outputParameters__->setName("outputParameters");
	
	// parameter result
	uML_BehavioralFeature_outputParameters_result->setName("result");
	uML_BehavioralFeature_outputParameters_result->setType(get_UML_Parameter());
	uML_BehavioralFeature_outputParameters_result->setLower(0);
	uML_BehavioralFeature_outputParameters_result->setUpper(-1);
	uML_BehavioralFeature_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class BehavioredClassifier
	uML_BehavioredClassifier->setName("BehavioredClassifier");
	uML_BehavioredClassifier->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_BehavioredClassifier());
	gen->setGeneral(get_UML_Classifier());
	
    // BehavioredClassifier attributes
	uML_BehavioredClassifier_classifierBehavior->setName("classifierBehavior");
	uML_BehavioredClassifier_classifierBehavior->setType(get_UML_Behavior());
	uML_BehavioredClassifier_classifierBehavior->setLower(0);
	uML_BehavioredClassifier_classifierBehavior->setUpper(1);
	uML_BehavioredClassifier_classifierBehavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_BehavioredClassifier_interfaceRealization->setName("interfaceRealization");
	uML_BehavioredClassifier_interfaceRealization->setType(get_UML_InterfaceRealization());
	uML_BehavioredClassifier_interfaceRealization->setLower(0);
	uML_BehavioredClassifier_interfaceRealization->setUpper(-1);
	uML_BehavioredClassifier_interfaceRealization->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_BehavioredClassifier_ownedBehavior->setName("ownedBehavior");
	uML_BehavioredClassifier_ownedBehavior->setType(get_UML_Behavior());
	uML_BehavioredClassifier_ownedBehavior->setLower(0);
	uML_BehavioredClassifier_ownedBehavior->setUpper(-1);
	uML_BehavioredClassifier_ownedBehavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // BehavioredClassifier operations
	uML_BehavioredClassifier_getAllImplementedInterfaces__->setName("getAllImplementedInterfaces");
	
	// parameter 
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setName("");
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setType(get_UML_Interface());
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setLower(0);
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setUpper(-1);
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_BehavioredClassifier_getImplementedInterfaces__->setName("getImplementedInterfaces");
	
	// parameter 
	uML_BehavioredClassifier_getImplementedInterfaces__return->setName("");
	uML_BehavioredClassifier_getImplementedInterfaces__return->setType(get_UML_Interface());
	uML_BehavioredClassifier_getImplementedInterfaces__return->setLower(0);
	uML_BehavioredClassifier_getImplementedInterfaces__return->setUpper(-1);
	uML_BehavioredClassifier_getImplementedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class BroadcastSignalAction
	uML_BroadcastSignalAction->setName("BroadcastSignalAction");
	uML_BroadcastSignalAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_BroadcastSignalAction());
	gen->setGeneral(get_UML_InvocationAction());
	
    // BroadcastSignalAction attributes
	uML_BroadcastSignalAction_signal->setName("signal");
	uML_BroadcastSignalAction_signal->setType(get_UML_Signal());
	uML_BroadcastSignalAction_signal->setLower(1);
	uML_BroadcastSignalAction_signal->setUpper(1);
	uML_BroadcastSignalAction_signal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CallAction
	uML_CallAction->setName("CallAction");
	uML_CallAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CallAction());
	gen->setGeneral(get_UML_InvocationAction());
	
    // CallAction attributes
	uML_CallAction_isSynchronous->setName("isSynchronous");
	uML_CallAction_isSynchronous->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_CallAction_isSynchronous->setLower(1);
	uML_CallAction_isSynchronous->setUpper(1);
	uML_CallAction_isSynchronous->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_CallAction_isSynchronous->setDefaultValue(uML_CallAction_isSynchronous_defaultValue_LiteralBoolean_UML_CallAction_isSynchronous);
	
	uML_CallAction_result->setName("result");
	uML_CallAction_result->setType(get_UML_OutputPin());
	uML_CallAction_result->setLower(0);
	uML_CallAction_result->setUpper(-1);
	uML_CallAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // CallAction operations
	uML_CallAction_inputParameters__->setName("inputParameters");
	
	// parameter result
	uML_CallAction_inputParameters_result->setName("result");
	uML_CallAction_inputParameters_result->setType(get_UML_Parameter());
	uML_CallAction_inputParameters_result->setLower(0);
	uML_CallAction_inputParameters_result->setUpper(-1);
	uML_CallAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_CallAction_outputParameters__->setName("outputParameters");
	
	// parameter result
	uML_CallAction_outputParameters_result->setName("result");
	uML_CallAction_outputParameters_result->setType(get_UML_Parameter());
	uML_CallAction_outputParameters_result->setLower(0);
	uML_CallAction_outputParameters_result->setUpper(-1);
	uML_CallAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class CallBehaviorAction
	uML_CallBehaviorAction->setName("CallBehaviorAction");
	uML_CallBehaviorAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CallBehaviorAction());
	gen->setGeneral(get_UML_CallAction());
	
    // CallBehaviorAction attributes
	uML_CallBehaviorAction_behavior->setName("behavior");
	uML_CallBehaviorAction_behavior->setType(get_UML_Behavior());
	uML_CallBehaviorAction_behavior->setLower(1);
	uML_CallBehaviorAction_behavior->setUpper(1);
	uML_CallBehaviorAction_behavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // CallBehaviorAction operations
	uML_CallBehaviorAction_inputParameters__->setName("inputParameters");
	
	// parameter result
	uML_CallBehaviorAction_inputParameters_result->setName("result");
	uML_CallBehaviorAction_inputParameters_result->setType(get_UML_Parameter());
	uML_CallBehaviorAction_inputParameters_result->setLower(0);
	uML_CallBehaviorAction_inputParameters_result->setUpper(-1);
	uML_CallBehaviorAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_CallBehaviorAction_outputParameters__->setName("outputParameters");
	
	// parameter result
	uML_CallBehaviorAction_outputParameters_result->setName("result");
	uML_CallBehaviorAction_outputParameters_result->setType(get_UML_Parameter());
	uML_CallBehaviorAction_outputParameters_result->setLower(0);
	uML_CallBehaviorAction_outputParameters_result->setUpper(-1);
	uML_CallBehaviorAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class CallEvent
	uML_CallEvent->setName("CallEvent");
	uML_CallEvent->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CallEvent());
	gen->setGeneral(get_UML_MessageEvent());
	
    // CallEvent attributes
	uML_CallEvent_operation->setName("operation");
	uML_CallEvent_operation->setType(get_UML_Operation());
	uML_CallEvent_operation->setLower(1);
	uML_CallEvent_operation->setUpper(1);
	uML_CallEvent_operation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CallOperationAction
	uML_CallOperationAction->setName("CallOperationAction");
	uML_CallOperationAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CallOperationAction());
	gen->setGeneral(get_UML_CallAction());
	
    // CallOperationAction attributes
	uML_CallOperationAction_operation->setName("operation");
	uML_CallOperationAction_operation->setType(get_UML_Operation());
	uML_CallOperationAction_operation->setLower(1);
	uML_CallOperationAction_operation->setUpper(1);
	uML_CallOperationAction_operation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_CallOperationAction_target->setName("target");
	uML_CallOperationAction_target->setType(get_UML_InputPin());
	uML_CallOperationAction_target->setLower(1);
	uML_CallOperationAction_target->setUpper(1);
	uML_CallOperationAction_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // CallOperationAction operations
	uML_CallOperationAction_inputParameters__->setName("inputParameters");
	
	// parameter result
	uML_CallOperationAction_inputParameters_result->setName("result");
	uML_CallOperationAction_inputParameters_result->setType(get_UML_Parameter());
	uML_CallOperationAction_inputParameters_result->setLower(0);
	uML_CallOperationAction_inputParameters_result->setUpper(-1);
	uML_CallOperationAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_CallOperationAction_outputParameters__->setName("outputParameters");
	
	// parameter result
	uML_CallOperationAction_outputParameters_result->setName("result");
	uML_CallOperationAction_outputParameters_result->setType(get_UML_Parameter());
	uML_CallOperationAction_outputParameters_result->setLower(0);
	uML_CallOperationAction_outputParameters_result->setUpper(-1);
	uML_CallOperationAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class CentralBufferNode
	uML_CentralBufferNode->setName("CentralBufferNode");
	uML_CentralBufferNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CentralBufferNode());
	gen->setGeneral(get_UML_ObjectNode());
	

    //-------------------------------------------
	//	class ChangeEvent
	uML_ChangeEvent->setName("ChangeEvent");
	uML_ChangeEvent->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ChangeEvent());
	gen->setGeneral(get_UML_Event());
	
    // ChangeEvent attributes
	uML_ChangeEvent_changeExpression->setName("changeExpression");
	uML_ChangeEvent_changeExpression->setType(get_UML_ValueSpecification());
	uML_ChangeEvent_changeExpression->setLower(1);
	uML_ChangeEvent_changeExpression->setUpper(1);
	uML_ChangeEvent_changeExpression->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Class
	uML_Class->setName("Class");
	uML_Class->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Class());
	gen->setGeneral(get_UML_BehavioredClassifier());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Class());
	gen->setGeneral(get_UML_EncapsulatedClassifier());
	
    // Class attributes
	uML_Class_extension->setName("extension");
	uML_Class_extension->setType(get_UML_Extension());
	uML_Class_extension->setLower(0);
	uML_Class_extension->setUpper(-1);
	uML_Class_extension->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Class_isAbstract->setName("isAbstract");
	uML_Class_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Class_isAbstract->setLower(1);
	uML_Class_isAbstract->setUpper(1);
	uML_Class_isAbstract->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Class_isAbstract->setDefaultValue(uML_Class_isAbstract_defaultValue_LiteralBoolean_UML_Class_isAbstract);
	
	uML_Class_isActive->setName("isActive");
	uML_Class_isActive->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Class_isActive->setLower(1);
	uML_Class_isActive->setUpper(1);
	uML_Class_isActive->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Class_isActive->setDefaultValue(uML_Class_isActive_defaultValue_LiteralBoolean_UML_Class_isActive);
	
	uML_Class_nestedClassifier->setName("nestedClassifier");
	uML_Class_nestedClassifier->setType(get_UML_Classifier());
	uML_Class_nestedClassifier->setLower(0);
	uML_Class_nestedClassifier->setUpper(-1);
	uML_Class_nestedClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Class_ownedAttribute->setName("ownedAttribute");
	uML_Class_ownedAttribute->setType(get_UML_Property());
	uML_Class_ownedAttribute->setLower(0);
	uML_Class_ownedAttribute->setUpper(-1);
	uML_Class_ownedAttribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Class_ownedOperation->setName("ownedOperation");
	uML_Class_ownedOperation->setType(get_UML_Operation());
	uML_Class_ownedOperation->setLower(0);
	uML_Class_ownedOperation->setUpper(-1);
	uML_Class_ownedOperation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Class_ownedReception->setName("ownedReception");
	uML_Class_ownedReception->setType(get_UML_Reception());
	uML_Class_ownedReception->setLower(0);
	uML_Class_ownedReception->setUpper(-1);
	uML_Class_ownedReception->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Class_superClass->setName("superClass");
	uML_Class_superClass->setType(get_UML_Class());
	uML_Class_superClass->setLower(0);
	uML_Class_superClass->setUpper(-1);
	uML_Class_superClass->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Class operations
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type->setName("createOwnedOperation");
	
	// parameter 
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setName("");
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setType(get_UML_Operation());
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setLower(1);
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setUpper(1);
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setName("name");
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setLower(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setUpper(1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterNames
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setName("parameterNames");
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setLower(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setUpper(-1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterTypes
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setName("parameterTypes");
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setType(get_UML_Type());
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setLower(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setUpper(-1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter returnType
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setName("returnType");
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setType(get_UML_Type());
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setLower(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setUpper(1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Class_extension__->setName("extension");
	
	// parameter result
	uML_Class_extension_result->setName("result");
	uML_Class_extension_result->setType(get_UML_Extension());
	uML_Class_extension_result->setLower(0);
	uML_Class_extension_result->setUpper(-1);
	uML_Class_extension_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Class_isMetaclass__->setName("isMetaclass");
	
	// parameter 
	uML_Class_isMetaclass__return->setName("");
	uML_Class_isMetaclass__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Class_isMetaclass__return->setLower(1);
	uML_Class_isMetaclass__return->setUpper(1);
	uML_Class_isMetaclass__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Class_superClass__->setName("superClass");
	
	// parameter result
	uML_Class_superClass_result->setName("result");
	uML_Class_superClass_result->setType(get_UML_Class());
	uML_Class_superClass_result->setLower(0);
	uML_Class_superClass_result->setUpper(-1);
	uML_Class_superClass_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Classifier
	uML_Classifier->setName("Classifier");
	uML_Classifier->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Classifier());
	gen->setGeneral(get_UML_Namespace());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Classifier());
	gen->setGeneral(get_UML_RedefinableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Classifier());
	gen->setGeneral(get_UML_TemplateableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Classifier());
	gen->setGeneral(get_UML_Type());
	
    // Classifier attributes
	uML_Classifier_attribute->setName("attribute");
	uML_Classifier_attribute->setType(get_UML_Property());
	uML_Classifier_attribute->setLower(0);
	uML_Classifier_attribute->setUpper(-1);
	uML_Classifier_attribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_collaborationUse->setName("collaborationUse");
	uML_Classifier_collaborationUse->setType(get_UML_CollaborationUse());
	uML_Classifier_collaborationUse->setLower(0);
	uML_Classifier_collaborationUse->setUpper(-1);
	uML_Classifier_collaborationUse->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_feature->setName("feature");
	uML_Classifier_feature->setType(get_UML_Feature());
	uML_Classifier_feature->setLower(0);
	uML_Classifier_feature->setUpper(-1);
	uML_Classifier_feature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_general->setName("general");
	uML_Classifier_general->setType(get_UML_Classifier());
	uML_Classifier_general->setLower(0);
	uML_Classifier_general->setUpper(-1);
	uML_Classifier_general->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_generalization->setName("generalization");
	uML_Classifier_generalization->setType(get_UML_Generalization());
	uML_Classifier_generalization->setLower(0);
	uML_Classifier_generalization->setUpper(-1);
	uML_Classifier_generalization->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_inheritedMember->setName("inheritedMember");
	uML_Classifier_inheritedMember->setType(get_UML_NamedElement());
	uML_Classifier_inheritedMember->setLower(0);
	uML_Classifier_inheritedMember->setUpper(-1);
	uML_Classifier_inheritedMember->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_isAbstract->setName("isAbstract");
	uML_Classifier_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isAbstract->setLower(1);
	uML_Classifier_isAbstract->setUpper(1);
	uML_Classifier_isAbstract->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Classifier_isAbstract->setDefaultValue(uML_Classifier_isAbstract_defaultValue_LiteralBoolean_UML_Classifier_isAbstract);
	
	uML_Classifier_isFinalSpecialization->setName("isFinalSpecialization");
	uML_Classifier_isFinalSpecialization->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isFinalSpecialization->setLower(1);
	uML_Classifier_isFinalSpecialization->setUpper(1);
	uML_Classifier_isFinalSpecialization->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Classifier_isFinalSpecialization->setDefaultValue(uML_Classifier_isFinalSpecialization_defaultValue_LiteralBoolean_UML_Classifier_isFinalSpecialization);
	
	uML_Classifier_ownedTemplateSignature->setName("ownedTemplateSignature");
	uML_Classifier_ownedTemplateSignature->setType(get_UML_RedefinableTemplateSignature());
	uML_Classifier_ownedTemplateSignature->setLower(0);
	uML_Classifier_ownedTemplateSignature->setUpper(1);
	uML_Classifier_ownedTemplateSignature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_ownedUseCase->setName("ownedUseCase");
	uML_Classifier_ownedUseCase->setType(get_UML_UseCase());
	uML_Classifier_ownedUseCase->setLower(0);
	uML_Classifier_ownedUseCase->setUpper(-1);
	uML_Classifier_ownedUseCase->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_powertypeExtent->setName("powertypeExtent");
	uML_Classifier_powertypeExtent->setType(get_UML_GeneralizationSet());
	uML_Classifier_powertypeExtent->setLower(0);
	uML_Classifier_powertypeExtent->setUpper(-1);
	uML_Classifier_powertypeExtent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_redefinedClassifier->setName("redefinedClassifier");
	uML_Classifier_redefinedClassifier->setType(get_UML_Classifier());
	uML_Classifier_redefinedClassifier->setLower(0);
	uML_Classifier_redefinedClassifier->setUpper(-1);
	uML_Classifier_redefinedClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_representation->setName("representation");
	uML_Classifier_representation->setType(get_UML_CollaborationUse());
	uML_Classifier_representation->setLower(0);
	uML_Classifier_representation->setUpper(1);
	uML_Classifier_representation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_substitution->setName("substitution");
	uML_Classifier_substitution->setType(get_UML_Substitution());
	uML_Classifier_substitution->setLower(0);
	uML_Classifier_substitution->setUpper(-1);
	uML_Classifier_substitution->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_templateParameter->setName("templateParameter");
	uML_Classifier_templateParameter->setType(get_UML_ClassifierTemplateParameter());
	uML_Classifier_templateParameter->setLower(0);
	uML_Classifier_templateParameter->setUpper(1);
	uML_Classifier_templateParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Classifier_useCase->setName("useCase");
	uML_Classifier_useCase->setType(get_UML_UseCase());
	uML_Classifier_useCase->setLower(0);
	uML_Classifier_useCase->setUpper(-1);
	uML_Classifier_useCase->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Classifier operations
	uML_Classifier_allAttributes__->setName("allAttributes");
	
	// parameter result
	uML_Classifier_allAttributes_result->setName("result");
	uML_Classifier_allAttributes_result->setType(get_UML_Property());
	uML_Classifier_allAttributes_result->setLower(0);
	uML_Classifier_allAttributes_result->setUpper(-1);
	uML_Classifier_allAttributes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_allFeatures__->setName("allFeatures");
	
	// parameter result
	uML_Classifier_allFeatures_result->setName("result");
	uML_Classifier_allFeatures_result->setType(get_UML_Feature());
	uML_Classifier_allFeatures_result->setLower(0);
	uML_Classifier_allFeatures_result->setUpper(-1);
	uML_Classifier_allFeatures_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_allParents__->setName("allParents");
	
	// parameter result
	uML_Classifier_allParents_result->setName("result");
	uML_Classifier_allParents_result->setType(get_UML_Classifier());
	uML_Classifier_allParents_result->setLower(0);
	uML_Classifier_allParents_result->setUpper(-1);
	uML_Classifier_allParents_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_allRealizedInterfaces__->setName("allRealizedInterfaces");
	
	// parameter result
	uML_Classifier_allRealizedInterfaces_result->setName("result");
	uML_Classifier_allRealizedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_allRealizedInterfaces_result->setLower(0);
	uML_Classifier_allRealizedInterfaces_result->setUpper(-1);
	uML_Classifier_allRealizedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_allSlottableFeatures__->setName("allSlottableFeatures");
	
	// parameter result
	uML_Classifier_allSlottableFeatures_result->setName("result");
	uML_Classifier_allSlottableFeatures_result->setType(get_UML_StructuralFeature());
	uML_Classifier_allSlottableFeatures_result->setLower(0);
	uML_Classifier_allSlottableFeatures_result->setUpper(-1);
	uML_Classifier_allSlottableFeatures_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_allUsedInterfaces__->setName("allUsedInterfaces");
	
	// parameter result
	uML_Classifier_allUsedInterfaces_result->setName("result");
	uML_Classifier_allUsedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_allUsedInterfaces_result->setLower(0);
	uML_Classifier_allUsedInterfaces_result->setUpper(-1);
	uML_Classifier_allUsedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_conformsTo_Type_Type->setName("conformsTo");
	
	// parameter result
	uML_Classifier_conformsTo_result->setName("result");
	uML_Classifier_conformsTo_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_conformsTo_result->setLower(1);
	uML_Classifier_conformsTo_result->setUpper(1);
	uML_Classifier_conformsTo_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter other
	
	uML_Classifier_conformsTo_Type_Type_other->setName("other");
	
	uML_Classifier_conformsTo_Type_Type_other->setType(get_UML_Type());
	
	uML_Classifier_conformsTo_Type_Type_other->setLower(1);
	
	uML_Classifier_conformsTo_Type_Type_other->setUpper(1);
	
	uML_Classifier_conformsTo_Type_Type_other->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_directlyRealizedInterfaces__->setName("directlyRealizedInterfaces");
	
	// parameter result
	uML_Classifier_directlyRealizedInterfaces_result->setName("result");
	uML_Classifier_directlyRealizedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_directlyRealizedInterfaces_result->setLower(0);
	uML_Classifier_directlyRealizedInterfaces_result->setUpper(-1);
	uML_Classifier_directlyRealizedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_directlyUsedInterfaces__->setName("directlyUsedInterfaces");
	
	// parameter result
	uML_Classifier_directlyUsedInterfaces_result->setName("result");
	uML_Classifier_directlyUsedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_directlyUsedInterfaces_result->setLower(0);
	uML_Classifier_directlyUsedInterfaces_result->setUpper(-1);
	uML_Classifier_directlyUsedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_general__->setName("general");
	
	// parameter result
	uML_Classifier_general_result->setName("result");
	uML_Classifier_general_result->setType(get_UML_Classifier());
	uML_Classifier_general_result->setLower(0);
	uML_Classifier_general_result->setUpper(-1);
	uML_Classifier_general_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_getAllAttributes__->setName("getAllAttributes");
	
	// parameter 
	uML_Classifier_getAllAttributes__return->setName("");
	uML_Classifier_getAllAttributes__return->setType(get_UML_Property());
	uML_Classifier_getAllAttributes__return->setLower(0);
	uML_Classifier_getAllAttributes__return->setUpper(-1);
	uML_Classifier_getAllAttributes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_getAllOperations__->setName("getAllOperations");
	
	// parameter 
	uML_Classifier_getAllOperations__return->setName("");
	uML_Classifier_getAllOperations__return->setType(get_UML_Operation());
	uML_Classifier_getAllOperations__return->setLower(0);
	uML_Classifier_getAllOperations__return->setUpper(-1);
	uML_Classifier_getAllOperations__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_getAllUsedInterfaces__->setName("getAllUsedInterfaces");
	
	// parameter 
	uML_Classifier_getAllUsedInterfaces__return->setName("");
	uML_Classifier_getAllUsedInterfaces__return->setType(get_UML_Interface());
	uML_Classifier_getAllUsedInterfaces__return->setLower(0);
	uML_Classifier_getAllUsedInterfaces__return->setUpper(-1);
	uML_Classifier_getAllUsedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_getOperation_String_String_Type_String_String_Type->setName("getOperation");
	
	// parameter 
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setName("");
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setType(get_UML_Operation());
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setLower(0);
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name->setName("name");
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name->setLower(0);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name->setUpper(1);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterNames
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setName("parameterNames");
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setLower(0);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setUpper(-1);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterTypes
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setName("parameterTypes");
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setType(get_UML_Type());
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setLower(0);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setUpper(-1);
	
	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean->setName("getOperation");
	
	// parameter 
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setName("");
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setType(get_UML_Operation());
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setLower(0);
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setName("name");
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setLower(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setUpper(1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterNames
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setName("parameterNames");
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setLower(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setUpper(-1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterTypes
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setName("parameterTypes");
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setType(get_UML_Type());
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setLower(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setUpper(-1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter ignoreCase
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase->setName("ignoreCase");
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase->setLower(1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase->setUpper(1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_getOperations__->setName("getOperations");
	
	// parameter 
	uML_Classifier_getOperations__return->setName("");
	uML_Classifier_getOperations__return->setType(get_UML_Operation());
	uML_Classifier_getOperations__return->setLower(0);
	uML_Classifier_getOperations__return->setUpper(-1);
	uML_Classifier_getOperations__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_getUsedInterfaces__->setName("getUsedInterfaces");
	
	// parameter 
	uML_Classifier_getUsedInterfaces__return->setName("");
	uML_Classifier_getUsedInterfaces__return->setType(get_UML_Interface());
	uML_Classifier_getUsedInterfaces__return->setLower(0);
	uML_Classifier_getUsedInterfaces__return->setUpper(-1);
	uML_Classifier_getUsedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement->setName("hasVisibilityOf");
	
	// parameter result
	uML_Classifier_hasVisibilityOf_result->setName("result");
	uML_Classifier_hasVisibilityOf_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_hasVisibilityOf_result->setLower(1);
	uML_Classifier_hasVisibilityOf_result->setUpper(1);
	uML_Classifier_hasVisibilityOf_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter n
	
	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n->setName("n");
	
	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n->setType(get_UML_NamedElement());
	
	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n->setLower(1);
	
	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n->setUpper(1);
	
	uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_inherit_NamedElement_NamedElement->setName("inherit");
	
	// parameter result
	uML_Classifier_inherit_result->setName("result");
	uML_Classifier_inherit_result->setType(get_UML_NamedElement());
	uML_Classifier_inherit_result->setLower(0);
	uML_Classifier_inherit_result->setUpper(-1);
	uML_Classifier_inherit_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter inhs
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs->setName("inhs");
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs->setType(get_UML_NamedElement());
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs->setLower(0);
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs->setUpper(-1);
	
	uML_Classifier_inherit_NamedElement_NamedElement_inhs->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_inheritableMembers_Classifier_Classifier->setName("inheritableMembers");
	
	// parameter result
	uML_Classifier_inheritableMembers_result->setName("result");
	uML_Classifier_inheritableMembers_result->setType(get_UML_NamedElement());
	uML_Classifier_inheritableMembers_result->setLower(0);
	uML_Classifier_inheritableMembers_result->setUpper(-1);
	uML_Classifier_inheritableMembers_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter c
	
	uML_Classifier_inheritableMembers_Classifier_Classifier_c->setName("c");
	
	uML_Classifier_inheritableMembers_Classifier_Classifier_c->setType(get_UML_Classifier());
	
	uML_Classifier_inheritableMembers_Classifier_Classifier_c->setLower(1);
	
	uML_Classifier_inheritableMembers_Classifier_Classifier_c->setUpper(1);
	
	uML_Classifier_inheritableMembers_Classifier_Classifier_c->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_inheritedMember__->setName("inheritedMember");
	
	// parameter result
	uML_Classifier_inheritedMember_result->setName("result");
	uML_Classifier_inheritedMember_result->setType(get_UML_NamedElement());
	uML_Classifier_inheritedMember_result->setLower(0);
	uML_Classifier_inheritedMember_result->setUpper(-1);
	uML_Classifier_inheritedMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_isSubstitutableFor_Classifier_Classifier->setName("isSubstitutableFor");
	
	// parameter contract
	uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract->setName("contract");
	uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract->setType(get_UML_Classifier());
	uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract->setLower(1);
	uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract->setUpper(1);
	uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter result
	
	uML_Classifier_isSubstitutableFor_result->setName("result");
	
	uML_Classifier_isSubstitutableFor_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Classifier_isSubstitutableFor_result->setLower(1);
	
	uML_Classifier_isSubstitutableFor_result->setUpper(1);
	
	uML_Classifier_isSubstitutableFor_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_isTemplate__->setName("isTemplate");
	
	// parameter result
	uML_Classifier_isTemplate_result->setName("result");
	uML_Classifier_isTemplate_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isTemplate_result->setLower(1);
	uML_Classifier_isTemplate_result->setUpper(1);
	uML_Classifier_isTemplate_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Classifier_maySpecializeType_Classifier_Classifier->setName("maySpecializeType");
	
	// parameter result
	uML_Classifier_maySpecializeType_result->setName("result");
	uML_Classifier_maySpecializeType_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_maySpecializeType_result->setLower(1);
	uML_Classifier_maySpecializeType_result->setUpper(1);
	uML_Classifier_maySpecializeType_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter c
	
	uML_Classifier_maySpecializeType_Classifier_Classifier_c->setName("c");
	
	uML_Classifier_maySpecializeType_Classifier_Classifier_c->setType(get_UML_Classifier());
	
	uML_Classifier_maySpecializeType_Classifier_Classifier_c->setLower(1);
	
	uML_Classifier_maySpecializeType_Classifier_Classifier_c->setUpper(1);
	
	uML_Classifier_maySpecializeType_Classifier_Classifier_c->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Classifier_parents__->setName("parents");
	
	// parameter result
	uML_Classifier_parents_result->setName("result");
	uML_Classifier_parents_result->setType(get_UML_Classifier());
	uML_Classifier_parents_result->setLower(0);
	uML_Classifier_parents_result->setUpper(-1);
	uML_Classifier_parents_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ClassifierTemplateParameter
	uML_ClassifierTemplateParameter->setName("ClassifierTemplateParameter");
	uML_ClassifierTemplateParameter->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ClassifierTemplateParameter());
	gen->setGeneral(get_UML_TemplateParameter());
	
    // ClassifierTemplateParameter attributes
	uML_ClassifierTemplateParameter_allowSubstitutable->setName("allowSubstitutable");
	uML_ClassifierTemplateParameter_allowSubstitutable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ClassifierTemplateParameter_allowSubstitutable->setLower(1);
	uML_ClassifierTemplateParameter_allowSubstitutable->setUpper(1);
	uML_ClassifierTemplateParameter_allowSubstitutable->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ClassifierTemplateParameter_allowSubstitutable->setDefaultValue(uML_ClassifierTemplateParameter_allowSubstitutable_defaultValue_LiteralBoolean_UML_ClassifierTemplateParameter_allowSubstitutable);
	
	uML_ClassifierTemplateParameter_constrainingClassifier->setName("constrainingClassifier");
	uML_ClassifierTemplateParameter_constrainingClassifier->setType(get_UML_Classifier());
	uML_ClassifierTemplateParameter_constrainingClassifier->setLower(0);
	uML_ClassifierTemplateParameter_constrainingClassifier->setUpper(-1);
	uML_ClassifierTemplateParameter_constrainingClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ClassifierTemplateParameter_parameteredElement->setName("parameteredElement");
	uML_ClassifierTemplateParameter_parameteredElement->setType(get_UML_Classifier());
	uML_ClassifierTemplateParameter_parameteredElement->setLower(1);
	uML_ClassifierTemplateParameter_parameteredElement->setUpper(1);
	uML_ClassifierTemplateParameter_parameteredElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Clause
	uML_Clause->setName("Clause");
	uML_Clause->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Clause());
	gen->setGeneral(get_UML_Element());
	
    // Clause attributes
	uML_Clause_body->setName("body");
	uML_Clause_body->setType(get_UML_ExecutableNode());
	uML_Clause_body->setLower(0);
	uML_Clause_body->setUpper(-1);
	uML_Clause_body->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Clause_bodyOutput->setName("bodyOutput");
	uML_Clause_bodyOutput->setType(get_UML_OutputPin());
	uML_Clause_bodyOutput->setLower(0);
	uML_Clause_bodyOutput->setUpper(-1);
	uML_Clause_bodyOutput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Clause_decider->setName("decider");
	uML_Clause_decider->setType(get_UML_OutputPin());
	uML_Clause_decider->setLower(1);
	uML_Clause_decider->setUpper(1);
	uML_Clause_decider->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Clause_predecessorClause->setName("predecessorClause");
	uML_Clause_predecessorClause->setType(get_UML_Clause());
	uML_Clause_predecessorClause->setLower(0);
	uML_Clause_predecessorClause->setUpper(-1);
	uML_Clause_predecessorClause->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Clause_successorClause->setName("successorClause");
	uML_Clause_successorClause->setType(get_UML_Clause());
	uML_Clause_successorClause->setLower(0);
	uML_Clause_successorClause->setUpper(-1);
	uML_Clause_successorClause->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Clause_test->setName("test");
	uML_Clause_test->setType(get_UML_ExecutableNode());
	uML_Clause_test->setLower(1);
	uML_Clause_test->setUpper(-1);
	uML_Clause_test->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ClearAssociationAction
	uML_ClearAssociationAction->setName("ClearAssociationAction");
	uML_ClearAssociationAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ClearAssociationAction());
	gen->setGeneral(get_UML_Action());
	
    // ClearAssociationAction attributes
	uML_ClearAssociationAction_association->setName("association");
	uML_ClearAssociationAction_association->setType(get_UML_Association());
	uML_ClearAssociationAction_association->setLower(1);
	uML_ClearAssociationAction_association->setUpper(1);
	uML_ClearAssociationAction_association->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ClearAssociationAction_object->setName("object");
	uML_ClearAssociationAction_object->setType(get_UML_InputPin());
	uML_ClearAssociationAction_object->setLower(1);
	uML_ClearAssociationAction_object->setUpper(1);
	uML_ClearAssociationAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ClearStructuralFeatureAction
	uML_ClearStructuralFeatureAction->setName("ClearStructuralFeatureAction");
	uML_ClearStructuralFeatureAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ClearStructuralFeatureAction());
	gen->setGeneral(get_UML_StructuralFeatureAction());
	
    // ClearStructuralFeatureAction attributes
	uML_ClearStructuralFeatureAction_result->setName("result");
	uML_ClearStructuralFeatureAction_result->setType(get_UML_OutputPin());
	uML_ClearStructuralFeatureAction_result->setLower(0);
	uML_ClearStructuralFeatureAction_result->setUpper(1);
	uML_ClearStructuralFeatureAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ClearVariableAction
	uML_ClearVariableAction->setName("ClearVariableAction");
	uML_ClearVariableAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ClearVariableAction());
	gen->setGeneral(get_UML_VariableAction());
	

    //-------------------------------------------
	//	class Collaboration
	uML_Collaboration->setName("Collaboration");
	uML_Collaboration->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Collaboration());
	gen->setGeneral(get_UML_BehavioredClassifier());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Collaboration());
	gen->setGeneral(get_UML_StructuredClassifier());
	
    // Collaboration attributes
	uML_Collaboration_collaborationRole->setName("collaborationRole");
	uML_Collaboration_collaborationRole->setType(get_UML_ConnectableElement());
	uML_Collaboration_collaborationRole->setLower(0);
	uML_Collaboration_collaborationRole->setUpper(-1);
	uML_Collaboration_collaborationRole->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CollaborationUse
	uML_CollaborationUse->setName("CollaborationUse");
	uML_CollaborationUse->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CollaborationUse());
	gen->setGeneral(get_UML_NamedElement());
	
    // CollaborationUse attributes
	uML_CollaborationUse_roleBinding->setName("roleBinding");
	uML_CollaborationUse_roleBinding->setType(get_UML_Dependency());
	uML_CollaborationUse_roleBinding->setLower(0);
	uML_CollaborationUse_roleBinding->setUpper(-1);
	uML_CollaborationUse_roleBinding->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_CollaborationUse_type->setName("type");
	uML_CollaborationUse_type->setType(get_UML_Collaboration());
	uML_CollaborationUse_type->setLower(1);
	uML_CollaborationUse_type->setUpper(1);
	uML_CollaborationUse_type->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CombinedFragment
	uML_CombinedFragment->setName("CombinedFragment");
	uML_CombinedFragment->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CombinedFragment());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // CombinedFragment attributes
	uML_CombinedFragment_cfragmentGate->setName("cfragmentGate");
	uML_CombinedFragment_cfragmentGate->setType(get_UML_Gate());
	uML_CombinedFragment_cfragmentGate->setLower(0);
	uML_CombinedFragment_cfragmentGate->setUpper(-1);
	uML_CombinedFragment_cfragmentGate->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_CombinedFragment_interactionOperator->setName("interactionOperator");
	uML_CombinedFragment_interactionOperator->setType(get_UML_InteractionOperatorKind());
	uML_CombinedFragment_interactionOperator->setLower(1);
	uML_CombinedFragment_interactionOperator->setUpper(1);
	uML_CombinedFragment_interactionOperator->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_CombinedFragment_interactionOperator->setDefaultValue(uML_CombinedFragment_interactionOperator_defaultValue_InstanceValue);
	
	uML_CombinedFragment_operand->setName("operand");
	uML_CombinedFragment_operand->setType(get_UML_InteractionOperand());
	uML_CombinedFragment_operand->setLower(1);
	uML_CombinedFragment_operand->setUpper(-1);
	uML_CombinedFragment_operand->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Comment
	uML_Comment->setName("Comment");
	uML_Comment->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Comment());
	gen->setGeneral(get_UML_Element());
	
    // Comment attributes
	uML_Comment_annotatedElement->setName("annotatedElement");
	uML_Comment_annotatedElement->setType(get_UML_Element());
	uML_Comment_annotatedElement->setLower(0);
	uML_Comment_annotatedElement->setUpper(-1);
	uML_Comment_annotatedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Comment_body->setName("body");
	uML_Comment_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Comment_body->setLower(0);
	uML_Comment_body->setUpper(1);
	uML_Comment_body->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CommunicationPath
	uML_CommunicationPath->setName("CommunicationPath");
	uML_CommunicationPath->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CommunicationPath());
	gen->setGeneral(get_UML_Association());
	

    //-------------------------------------------
	//	class Component
	uML_Component->setName("Component");
	uML_Component->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Component());
	gen->setGeneral(get_UML_Class());
	
    // Component attributes
	uML_Component_isIndirectlyInstantiated->setName("isIndirectlyInstantiated");
	uML_Component_isIndirectlyInstantiated->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Component_isIndirectlyInstantiated->setLower(1);
	uML_Component_isIndirectlyInstantiated->setUpper(1);
	uML_Component_isIndirectlyInstantiated->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Component_isIndirectlyInstantiated->setDefaultValue(uML_Component_isIndirectlyInstantiated_defaultValue_LiteralBoolean_UML_Component_isIndirectlyInstantiated);
	
	uML_Component_packagedElement->setName("packagedElement");
	uML_Component_packagedElement->setType(get_UML_PackageableElement());
	uML_Component_packagedElement->setLower(0);
	uML_Component_packagedElement->setUpper(-1);
	uML_Component_packagedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Component_provided->setName("provided");
	uML_Component_provided->setType(get_UML_Interface());
	uML_Component_provided->setLower(0);
	uML_Component_provided->setUpper(-1);
	uML_Component_provided->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Component_realization->setName("realization");
	uML_Component_realization->setType(get_UML_ComponentRealization());
	uML_Component_realization->setLower(0);
	uML_Component_realization->setUpper(-1);
	uML_Component_realization->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Component_required->setName("required");
	uML_Component_required->setType(get_UML_Interface());
	uML_Component_required->setLower(0);
	uML_Component_required->setUpper(-1);
	uML_Component_required->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Component operations
	uML_Component_createOwnedClass_String_Boolean_String_Boolean->setName("createOwnedClass");
	
	// parameter 
	uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn->setName("");
	uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn->setType(get_UML_Class());
	uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn->setLower(1);
	uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn->setUpper(1);
	uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_name->setName("name");
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_name->setLower(1);
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_name->setUpper(1);
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter isAbstract
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setName("isAbstract");
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setLower(1);
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setUpper(1);
	
	uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Component_createOwnedEnumeration_String_String->setName("createOwnedEnumeration");
	
	// parameter 
	uML_Component_createOwnedEnumeration_String_Stringreturn->setName("");
	uML_Component_createOwnedEnumeration_String_Stringreturn->setType(get_UML_Enumeration());
	uML_Component_createOwnedEnumeration_String_Stringreturn->setLower(1);
	uML_Component_createOwnedEnumeration_String_Stringreturn->setUpper(1);
	uML_Component_createOwnedEnumeration_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Component_createOwnedEnumeration_String_String_name->setName("name");
	
	uML_Component_createOwnedEnumeration_String_String_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Component_createOwnedEnumeration_String_String_name->setLower(1);
	
	uML_Component_createOwnedEnumeration_String_String_name->setUpper(1);
	
	uML_Component_createOwnedEnumeration_String_String_name->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Component_createOwnedInterface_String_String->setName("createOwnedInterface");
	
	// parameter 
	uML_Component_createOwnedInterface_String_Stringreturn->setName("");
	uML_Component_createOwnedInterface_String_Stringreturn->setType(get_UML_Interface());
	uML_Component_createOwnedInterface_String_Stringreturn->setLower(1);
	uML_Component_createOwnedInterface_String_Stringreturn->setUpper(1);
	uML_Component_createOwnedInterface_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Component_createOwnedInterface_String_String_name->setName("name");
	
	uML_Component_createOwnedInterface_String_String_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Component_createOwnedInterface_String_String_name->setLower(1);
	
	uML_Component_createOwnedInterface_String_String_name->setUpper(1);
	
	uML_Component_createOwnedInterface_String_String_name->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Component_createOwnedPrimitiveType_String_String->setName("createOwnedPrimitiveType");
	
	// parameter 
	uML_Component_createOwnedPrimitiveType_String_Stringreturn->setName("");
	uML_Component_createOwnedPrimitiveType_String_Stringreturn->setType(get_UML_PrimitiveType());
	uML_Component_createOwnedPrimitiveType_String_Stringreturn->setLower(1);
	uML_Component_createOwnedPrimitiveType_String_Stringreturn->setUpper(1);
	uML_Component_createOwnedPrimitiveType_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Component_createOwnedPrimitiveType_String_String_name->setName("name");
	
	uML_Component_createOwnedPrimitiveType_String_String_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Component_createOwnedPrimitiveType_String_String_name->setLower(1);
	
	uML_Component_createOwnedPrimitiveType_String_String_name->setUpper(1);
	
	uML_Component_createOwnedPrimitiveType_String_String_name->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Component_provided__->setName("provided");
	
	// parameter result
	uML_Component_provided_result->setName("result");
	uML_Component_provided_result->setType(get_UML_Interface());
	uML_Component_provided_result->setLower(0);
	uML_Component_provided_result->setUpper(-1);
	uML_Component_provided_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Component_required__->setName("required");
	
	// parameter result
	uML_Component_required_result->setName("result");
	uML_Component_required_result->setType(get_UML_Interface());
	uML_Component_required_result->setLower(0);
	uML_Component_required_result->setUpper(-1);
	uML_Component_required_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ComponentRealization
	uML_ComponentRealization->setName("ComponentRealization");
	uML_ComponentRealization->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ComponentRealization());
	gen->setGeneral(get_UML_Realization());
	
    // ComponentRealization attributes
	uML_ComponentRealization_abstraction->setName("abstraction");
	uML_ComponentRealization_abstraction->setType(get_UML_Component());
	uML_ComponentRealization_abstraction->setLower(0);
	uML_ComponentRealization_abstraction->setUpper(1);
	uML_ComponentRealization_abstraction->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ComponentRealization_realizingClassifier->setName("realizingClassifier");
	uML_ComponentRealization_realizingClassifier->setType(get_UML_Classifier());
	uML_ComponentRealization_realizingClassifier->setLower(1);
	uML_ComponentRealization_realizingClassifier->setUpper(-1);
	uML_ComponentRealization_realizingClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ConditionalNode
	uML_ConditionalNode->setName("ConditionalNode");
	uML_ConditionalNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConditionalNode());
	gen->setGeneral(get_UML_StructuredActivityNode());
	
    // ConditionalNode attributes
	uML_ConditionalNode_clause->setName("clause");
	uML_ConditionalNode_clause->setType(get_UML_Clause());
	uML_ConditionalNode_clause->setLower(1);
	uML_ConditionalNode_clause->setUpper(-1);
	uML_ConditionalNode_clause->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ConditionalNode_isAssured->setName("isAssured");
	uML_ConditionalNode_isAssured->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ConditionalNode_isAssured->setLower(1);
	uML_ConditionalNode_isAssured->setUpper(1);
	uML_ConditionalNode_isAssured->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ConditionalNode_isAssured->setDefaultValue(uML_ConditionalNode_isAssured_defaultValue_LiteralBoolean_UML_ConditionalNode_isAssured);
	
	uML_ConditionalNode_isDeterminate->setName("isDeterminate");
	uML_ConditionalNode_isDeterminate->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ConditionalNode_isDeterminate->setLower(1);
	uML_ConditionalNode_isDeterminate->setUpper(1);
	uML_ConditionalNode_isDeterminate->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ConditionalNode_isDeterminate->setDefaultValue(uML_ConditionalNode_isDeterminate_defaultValue_LiteralBoolean_UML_ConditionalNode_isDeterminate);
	
	uML_ConditionalNode_result->setName("result");
	uML_ConditionalNode_result->setType(get_UML_OutputPin());
	uML_ConditionalNode_result->setLower(0);
	uML_ConditionalNode_result->setUpper(-1);
	uML_ConditionalNode_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ConditionalNode operations
	uML_ConditionalNode_allActions__->setName("allActions");
	
	// parameter result
	uML_ConditionalNode_allActions_result->setName("result");
	uML_ConditionalNode_allActions_result->setType(get_UML_Action());
	uML_ConditionalNode_allActions_result->setLower(0);
	uML_ConditionalNode_allActions_result->setUpper(-1);
	uML_ConditionalNode_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ConnectableElement
	uML_ConnectableElement->setName("ConnectableElement");
	uML_ConnectableElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConnectableElement());
	gen->setGeneral(get_UML_ParameterableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConnectableElement());
	gen->setGeneral(get_UML_TypedElement());
	
    // ConnectableElement attributes
	uML_ConnectableElement_end->setName("end");
	uML_ConnectableElement_end->setType(get_UML_ConnectorEnd());
	uML_ConnectableElement_end->setLower(0);
	uML_ConnectableElement_end->setUpper(-1);
	uML_ConnectableElement_end->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ConnectableElement_templateParameter->setName("templateParameter");
	uML_ConnectableElement_templateParameter->setType(get_UML_ConnectableElementTemplateParameter());
	uML_ConnectableElement_templateParameter->setLower(0);
	uML_ConnectableElement_templateParameter->setUpper(1);
	uML_ConnectableElement_templateParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ConnectableElement operations
	uML_ConnectableElement_end__->setName("end");
	
	// parameter result
	uML_ConnectableElement_end_result->setName("result");
	uML_ConnectableElement_end_result->setType(get_UML_ConnectorEnd());
	uML_ConnectableElement_end_result->setLower(0);
	uML_ConnectableElement_end_result->setUpper(-1);
	uML_ConnectableElement_end_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ConnectableElementTemplateParameter
	uML_ConnectableElementTemplateParameter->setName("ConnectableElementTemplateParameter");
	uML_ConnectableElementTemplateParameter->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConnectableElementTemplateParameter());
	gen->setGeneral(get_UML_TemplateParameter());
	
    // ConnectableElementTemplateParameter attributes
	uML_ConnectableElementTemplateParameter_parameteredElement->setName("parameteredElement");
	uML_ConnectableElementTemplateParameter_parameteredElement->setType(get_UML_ConnectableElement());
	uML_ConnectableElementTemplateParameter_parameteredElement->setLower(1);
	uML_ConnectableElementTemplateParameter_parameteredElement->setUpper(1);
	uML_ConnectableElementTemplateParameter_parameteredElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ConnectionPointReference
	uML_ConnectionPointReference->setName("ConnectionPointReference");
	uML_ConnectionPointReference->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConnectionPointReference());
	gen->setGeneral(get_UML_Vertex());
	
    // ConnectionPointReference attributes
	uML_ConnectionPointReference_entry->setName("entry");
	uML_ConnectionPointReference_entry->setType(get_UML_Pseudostate());
	uML_ConnectionPointReference_entry->setLower(0);
	uML_ConnectionPointReference_entry->setUpper(-1);
	uML_ConnectionPointReference_entry->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ConnectionPointReference_exit->setName("exit");
	uML_ConnectionPointReference_exit->setType(get_UML_Pseudostate());
	uML_ConnectionPointReference_exit->setLower(0);
	uML_ConnectionPointReference_exit->setUpper(-1);
	uML_ConnectionPointReference_exit->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ConnectionPointReference_state->setName("state");
	uML_ConnectionPointReference_state->setType(get_UML_State());
	uML_ConnectionPointReference_state->setLower(0);
	uML_ConnectionPointReference_state->setUpper(1);
	uML_ConnectionPointReference_state->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Connector
	uML_Connector->setName("Connector");
	uML_Connector->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Connector());
	gen->setGeneral(get_UML_Feature());
	
    // Connector attributes
	uML_Connector_contract->setName("contract");
	uML_Connector_contract->setType(get_UML_Behavior());
	uML_Connector_contract->setLower(0);
	uML_Connector_contract->setUpper(-1);
	uML_Connector_contract->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Connector_end->setName("end");
	uML_Connector_end->setType(get_UML_ConnectorEnd());
	uML_Connector_end->setLower(2);
	uML_Connector_end->setUpper(-1);
	uML_Connector_end->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Connector_kind->setName("kind");
	uML_Connector_kind->setType(get_UML_ConnectorKind());
	uML_Connector_kind->setLower(1);
	uML_Connector_kind->setUpper(1);
	uML_Connector_kind->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Connector_redefinedConnector->setName("redefinedConnector");
	uML_Connector_redefinedConnector->setType(get_UML_Connector());
	uML_Connector_redefinedConnector->setLower(0);
	uML_Connector_redefinedConnector->setUpper(-1);
	uML_Connector_redefinedConnector->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Connector_type->setName("type");
	uML_Connector_type->setType(get_UML_Association());
	uML_Connector_type->setLower(0);
	uML_Connector_type->setUpper(1);
	uML_Connector_type->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Connector operations
	uML_Connector_kind__->setName("kind");
	
	// parameter result
	uML_Connector_kind_result->setName("result");
	uML_Connector_kind_result->setType(get_UML_ConnectorKind());
	uML_Connector_kind_result->setLower(1);
	uML_Connector_kind_result->setUpper(1);
	uML_Connector_kind_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ConnectorEnd
	uML_ConnectorEnd->setName("ConnectorEnd");
	uML_ConnectorEnd->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConnectorEnd());
	gen->setGeneral(get_UML_MultiplicityElement());
	
    // ConnectorEnd attributes
	uML_ConnectorEnd_definingEnd->setName("definingEnd");
	uML_ConnectorEnd_definingEnd->setType(get_UML_Property());
	uML_ConnectorEnd_definingEnd->setLower(0);
	uML_ConnectorEnd_definingEnd->setUpper(1);
	uML_ConnectorEnd_definingEnd->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ConnectorEnd_partWithPort->setName("partWithPort");
	uML_ConnectorEnd_partWithPort->setType(get_UML_Property());
	uML_ConnectorEnd_partWithPort->setLower(0);
	uML_ConnectorEnd_partWithPort->setUpper(1);
	uML_ConnectorEnd_partWithPort->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ConnectorEnd_role->setName("role");
	uML_ConnectorEnd_role->setType(get_UML_ConnectableElement());
	uML_ConnectorEnd_role->setLower(1);
	uML_ConnectorEnd_role->setUpper(1);
	uML_ConnectorEnd_role->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ConnectorEnd operations
	uML_ConnectorEnd_definingEnd__->setName("definingEnd");
	
	// parameter result
	uML_ConnectorEnd_definingEnd_result->setName("result");
	uML_ConnectorEnd_definingEnd_result->setType(get_UML_Property());
	uML_ConnectorEnd_definingEnd_result->setLower(0);
	uML_ConnectorEnd_definingEnd_result->setUpper(1);
	uML_ConnectorEnd_definingEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ConsiderIgnoreFragment
	uML_ConsiderIgnoreFragment->setName("ConsiderIgnoreFragment");
	uML_ConsiderIgnoreFragment->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ConsiderIgnoreFragment());
	gen->setGeneral(get_UML_CombinedFragment());
	
    // ConsiderIgnoreFragment attributes
	uML_ConsiderIgnoreFragment_message->setName("message");
	uML_ConsiderIgnoreFragment_message->setType(get_UML_NamedElement());
	uML_ConsiderIgnoreFragment_message->setLower(0);
	uML_ConsiderIgnoreFragment_message->setUpper(-1);
	uML_ConsiderIgnoreFragment_message->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Constraint
	uML_Constraint->setName("Constraint");
	uML_Constraint->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Constraint());
	gen->setGeneral(get_UML_PackageableElement());
	
    // Constraint attributes
	uML_Constraint_constrainedElement->setName("constrainedElement");
	uML_Constraint_constrainedElement->setType(get_UML_Element());
	uML_Constraint_constrainedElement->setLower(0);
	uML_Constraint_constrainedElement->setUpper(-1);
	uML_Constraint_constrainedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Constraint_context->setName("context");
	uML_Constraint_context->setType(get_UML_Namespace());
	uML_Constraint_context->setLower(0);
	uML_Constraint_context->setUpper(1);
	uML_Constraint_context->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Constraint_specification->setName("specification");
	uML_Constraint_specification->setType(get_UML_ValueSpecification());
	uML_Constraint_specification->setLower(1);
	uML_Constraint_specification->setUpper(1);
	uML_Constraint_specification->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Continuation
	uML_Continuation->setName("Continuation");
	uML_Continuation->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Continuation());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // Continuation attributes
	uML_Continuation_setting->setName("setting");
	uML_Continuation_setting->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Continuation_setting->setLower(1);
	uML_Continuation_setting->setUpper(1);
	uML_Continuation_setting->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Continuation_setting->setDefaultValue(uML_Continuation_setting_defaultValue_LiteralBoolean_UML_Continuation_setting);
	


    //-------------------------------------------
	//	class ControlFlow
	uML_ControlFlow->setName("ControlFlow");
	uML_ControlFlow->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ControlFlow());
	gen->setGeneral(get_UML_ActivityEdge());
	

    //-------------------------------------------
	//	class ControlNode
	uML_ControlNode->setName("ControlNode");
	uML_ControlNode->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ControlNode());
	gen->setGeneral(get_UML_ActivityNode());
	

    //-------------------------------------------
	//	class CreateLinkAction
	uML_CreateLinkAction->setName("CreateLinkAction");
	uML_CreateLinkAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CreateLinkAction());
	gen->setGeneral(get_UML_WriteLinkAction());
	
    // CreateLinkAction attributes
	uML_CreateLinkAction_endData->setName("endData");
	uML_CreateLinkAction_endData->setType(get_UML_LinkEndCreationData());
	uML_CreateLinkAction_endData->setLower(2);
	uML_CreateLinkAction_endData->setUpper(-1);
	uML_CreateLinkAction_endData->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CreateLinkObjectAction
	uML_CreateLinkObjectAction->setName("CreateLinkObjectAction");
	uML_CreateLinkObjectAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CreateLinkObjectAction());
	gen->setGeneral(get_UML_CreateLinkAction());
	
    // CreateLinkObjectAction attributes
	uML_CreateLinkObjectAction_result->setName("result");
	uML_CreateLinkObjectAction_result->setType(get_UML_OutputPin());
	uML_CreateLinkObjectAction_result->setLower(1);
	uML_CreateLinkObjectAction_result->setUpper(1);
	uML_CreateLinkObjectAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class CreateObjectAction
	uML_CreateObjectAction->setName("CreateObjectAction");
	uML_CreateObjectAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_CreateObjectAction());
	gen->setGeneral(get_UML_Action());
	
    // CreateObjectAction attributes
	uML_CreateObjectAction_classifier->setName("classifier");
	uML_CreateObjectAction_classifier->setType(get_UML_Classifier());
	uML_CreateObjectAction_classifier->setLower(1);
	uML_CreateObjectAction_classifier->setUpper(1);
	uML_CreateObjectAction_classifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_CreateObjectAction_result->setName("result");
	uML_CreateObjectAction_result->setType(get_UML_OutputPin());
	uML_CreateObjectAction_result->setLower(1);
	uML_CreateObjectAction_result->setUpper(1);
	uML_CreateObjectAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DataStoreNode
	uML_DataStoreNode->setName("DataStoreNode");
	uML_DataStoreNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DataStoreNode());
	gen->setGeneral(get_UML_CentralBufferNode());
	

    //-------------------------------------------
	//	class DataType
	uML_DataType->setName("DataType");
	uML_DataType->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DataType());
	gen->setGeneral(get_UML_Classifier());
	
    // DataType attributes
	uML_DataType_ownedAttribute->setName("ownedAttribute");
	uML_DataType_ownedAttribute->setType(get_UML_Property());
	uML_DataType_ownedAttribute->setLower(0);
	uML_DataType_ownedAttribute->setUpper(-1);
	uML_DataType_ownedAttribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DataType_ownedOperation->setName("ownedOperation");
	uML_DataType_ownedOperation->setType(get_UML_Operation());
	uML_DataType_ownedOperation->setLower(0);
	uML_DataType_ownedOperation->setUpper(-1);
	uML_DataType_ownedOperation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // DataType operations
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	
	// parameter 
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setName("");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setType(get_UML_Property());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setName("name");
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setLower(0);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setUpper(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter type
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setName("type");
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setType(get_UML_Type());
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setLower(0);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setUpper(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter lower
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setName("lower");
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setLower(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setUpper(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter upper
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setName("upper");
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setLower(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setUpper(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type->setName("createOwnedOperation");
	
	// parameter 
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setName("");
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setType(get_UML_Operation());
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setLower(1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setUpper(1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setName("name");
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setLower(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setUpper(1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterNames
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setName("parameterNames");
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setLower(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setUpper(-1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterTypes
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setName("parameterTypes");
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setType(get_UML_Type());
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setLower(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setUpper(-1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter returnType
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setName("returnType");
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setType(get_UML_Type());
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setLower(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setUpper(1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class DecisionNode
	uML_DecisionNode->setName("DecisionNode");
	uML_DecisionNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DecisionNode());
	gen->setGeneral(get_UML_ControlNode());
	
    // DecisionNode attributes
	uML_DecisionNode_decisionInput->setName("decisionInput");
	uML_DecisionNode_decisionInput->setType(get_UML_Behavior());
	uML_DecisionNode_decisionInput->setLower(0);
	uML_DecisionNode_decisionInput->setUpper(1);
	uML_DecisionNode_decisionInput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DecisionNode_decisionInputFlow->setName("decisionInputFlow");
	uML_DecisionNode_decisionInputFlow->setType(get_UML_ObjectFlow());
	uML_DecisionNode_decisionInputFlow->setLower(0);
	uML_DecisionNode_decisionInputFlow->setUpper(1);
	uML_DecisionNode_decisionInputFlow->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Dependency
	uML_Dependency->setName("Dependency");
	uML_Dependency->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Dependency());
	gen->setGeneral(get_UML_DirectedRelationship());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Dependency());
	gen->setGeneral(get_UML_PackageableElement());
	
    // Dependency attributes
	uML_Dependency_client->setName("client");
	uML_Dependency_client->setType(get_UML_NamedElement());
	uML_Dependency_client->setLower(1);
	uML_Dependency_client->setUpper(-1);
	uML_Dependency_client->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Dependency_supplier->setName("supplier");
	uML_Dependency_supplier->setType(get_UML_NamedElement());
	uML_Dependency_supplier->setLower(1);
	uML_Dependency_supplier->setUpper(-1);
	uML_Dependency_supplier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DeployedArtifact
	uML_DeployedArtifact->setName("DeployedArtifact");
	uML_DeployedArtifact->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DeployedArtifact());
	gen->setGeneral(get_UML_NamedElement());
	

    //-------------------------------------------
	//	class Deployment
	uML_Deployment->setName("Deployment");
	uML_Deployment->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Deployment());
	gen->setGeneral(get_UML_Dependency());
	
    // Deployment attributes
	uML_Deployment_configuration->setName("configuration");
	uML_Deployment_configuration->setType(get_UML_DeploymentSpecification());
	uML_Deployment_configuration->setLower(0);
	uML_Deployment_configuration->setUpper(-1);
	uML_Deployment_configuration->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Deployment_deployedArtifact->setName("deployedArtifact");
	uML_Deployment_deployedArtifact->setType(get_UML_DeployedArtifact());
	uML_Deployment_deployedArtifact->setLower(0);
	uML_Deployment_deployedArtifact->setUpper(-1);
	uML_Deployment_deployedArtifact->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Deployment_location->setName("location");
	uML_Deployment_location->setType(get_UML_DeploymentTarget());
	uML_Deployment_location->setLower(1);
	uML_Deployment_location->setUpper(1);
	uML_Deployment_location->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DeploymentSpecification
	uML_DeploymentSpecification->setName("DeploymentSpecification");
	uML_DeploymentSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DeploymentSpecification());
	gen->setGeneral(get_UML_Artifact());
	
    // DeploymentSpecification attributes
	uML_DeploymentSpecification_deployment->setName("deployment");
	uML_DeploymentSpecification_deployment->setType(get_UML_Deployment());
	uML_DeploymentSpecification_deployment->setLower(0);
	uML_DeploymentSpecification_deployment->setUpper(1);
	uML_DeploymentSpecification_deployment->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DeploymentSpecification_deploymentLocation->setName("deploymentLocation");
	uML_DeploymentSpecification_deploymentLocation->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DeploymentSpecification_deploymentLocation->setLower(0);
	uML_DeploymentSpecification_deploymentLocation->setUpper(1);
	uML_DeploymentSpecification_deploymentLocation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DeploymentSpecification_executionLocation->setName("executionLocation");
	uML_DeploymentSpecification_executionLocation->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DeploymentSpecification_executionLocation->setLower(0);
	uML_DeploymentSpecification_executionLocation->setUpper(1);
	uML_DeploymentSpecification_executionLocation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DeploymentTarget
	uML_DeploymentTarget->setName("DeploymentTarget");
	uML_DeploymentTarget->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DeploymentTarget());
	gen->setGeneral(get_UML_NamedElement());
	
    // DeploymentTarget attributes
	uML_DeploymentTarget_deployedElement->setName("deployedElement");
	uML_DeploymentTarget_deployedElement->setType(get_UML_PackageableElement());
	uML_DeploymentTarget_deployedElement->setLower(0);
	uML_DeploymentTarget_deployedElement->setUpper(-1);
	uML_DeploymentTarget_deployedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DeploymentTarget_deployment->setName("deployment");
	uML_DeploymentTarget_deployment->setType(get_UML_Deployment());
	uML_DeploymentTarget_deployment->setLower(0);
	uML_DeploymentTarget_deployment->setUpper(-1);
	uML_DeploymentTarget_deployment->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // DeploymentTarget operations
	uML_DeploymentTarget_deployedElement__->setName("deployedElement");
	
	// parameter result
	uML_DeploymentTarget_deployedElement_result->setName("result");
	uML_DeploymentTarget_deployedElement_result->setType(get_UML_PackageableElement());
	uML_DeploymentTarget_deployedElement_result->setLower(0);
	uML_DeploymentTarget_deployedElement_result->setUpper(-1);
	uML_DeploymentTarget_deployedElement_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class DestroyLinkAction
	uML_DestroyLinkAction->setName("DestroyLinkAction");
	uML_DestroyLinkAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DestroyLinkAction());
	gen->setGeneral(get_UML_WriteLinkAction());
	
    // DestroyLinkAction attributes
	uML_DestroyLinkAction_endData->setName("endData");
	uML_DestroyLinkAction_endData->setType(get_UML_LinkEndDestructionData());
	uML_DestroyLinkAction_endData->setLower(2);
	uML_DestroyLinkAction_endData->setUpper(-1);
	uML_DestroyLinkAction_endData->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DestroyObjectAction
	uML_DestroyObjectAction->setName("DestroyObjectAction");
	uML_DestroyObjectAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DestroyObjectAction());
	gen->setGeneral(get_UML_Action());
	
    // DestroyObjectAction attributes
	uML_DestroyObjectAction_isDestroyLinks->setName("isDestroyLinks");
	uML_DestroyObjectAction_isDestroyLinks->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DestroyObjectAction_isDestroyLinks->setLower(1);
	uML_DestroyObjectAction_isDestroyLinks->setUpper(1);
	uML_DestroyObjectAction_isDestroyLinks->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_DestroyObjectAction_isDestroyLinks->setDefaultValue(uML_DestroyObjectAction_isDestroyLinks_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyLinks);
	
	uML_DestroyObjectAction_isDestroyOwnedObjects->setName("isDestroyOwnedObjects");
	uML_DestroyObjectAction_isDestroyOwnedObjects->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DestroyObjectAction_isDestroyOwnedObjects->setLower(1);
	uML_DestroyObjectAction_isDestroyOwnedObjects->setUpper(1);
	uML_DestroyObjectAction_isDestroyOwnedObjects->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_DestroyObjectAction_isDestroyOwnedObjects->setDefaultValue(uML_DestroyObjectAction_isDestroyOwnedObjects_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyOwnedObjects);
	
	uML_DestroyObjectAction_target->setName("target");
	uML_DestroyObjectAction_target->setType(get_UML_InputPin());
	uML_DestroyObjectAction_target->setLower(1);
	uML_DestroyObjectAction_target->setUpper(1);
	uML_DestroyObjectAction_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DestructionOccurrenceSpecification
	uML_DestructionOccurrenceSpecification->setName("DestructionOccurrenceSpecification");
	uML_DestructionOccurrenceSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DestructionOccurrenceSpecification());
	gen->setGeneral(get_UML_MessageOccurrenceSpecification());
	

    //-------------------------------------------
	//	class Device
	uML_Device->setName("Device");
	uML_Device->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Device());
	gen->setGeneral(get_UML_Node());
	

    //-------------------------------------------
	//	class DirectedRelationship
	uML_DirectedRelationship->setName("DirectedRelationship");
	uML_DirectedRelationship->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DirectedRelationship());
	gen->setGeneral(get_UML_Relationship());
	
    // DirectedRelationship attributes
	uML_DirectedRelationship_source->setName("source");
	uML_DirectedRelationship_source->setType(get_UML_Element());
	uML_DirectedRelationship_source->setLower(1);
	uML_DirectedRelationship_source->setUpper(-1);
	uML_DirectedRelationship_source->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DirectedRelationship_target->setName("target");
	uML_DirectedRelationship_target->setType(get_UML_Element());
	uML_DirectedRelationship_target->setLower(1);
	uML_DirectedRelationship_target->setUpper(-1);
	uML_DirectedRelationship_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Duration
	uML_Duration->setName("Duration");
	uML_Duration->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Duration());
	gen->setGeneral(get_UML_ValueSpecification());
	
    // Duration attributes
	uML_Duration_expr->setName("expr");
	uML_Duration_expr->setType(get_UML_ValueSpecification());
	uML_Duration_expr->setLower(0);
	uML_Duration_expr->setUpper(1);
	uML_Duration_expr->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Duration_observation->setName("observation");
	uML_Duration_observation->setType(get_UML_Observation());
	uML_Duration_observation->setLower(0);
	uML_Duration_observation->setUpper(-1);
	uML_Duration_observation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Duration operations
	uML_Duration_stringValue__->setName("stringValue");
	
	// parameter 
	uML_Duration_stringValue__return->setName("");
	uML_Duration_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Duration_stringValue__return->setLower(1);
	uML_Duration_stringValue__return->setUpper(1);
	uML_Duration_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class DurationConstraint
	uML_DurationConstraint->setName("DurationConstraint");
	uML_DurationConstraint->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DurationConstraint());
	gen->setGeneral(get_UML_IntervalConstraint());
	
    // DurationConstraint attributes
	uML_DurationConstraint_firstEvent->setName("firstEvent");
	uML_DurationConstraint_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DurationConstraint_firstEvent->setLower(0);
	uML_DurationConstraint_firstEvent->setUpper(2);
	uML_DurationConstraint_firstEvent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DurationConstraint_specification->setName("specification");
	uML_DurationConstraint_specification->setType(get_UML_DurationInterval());
	uML_DurationConstraint_specification->setLower(1);
	uML_DurationConstraint_specification->setUpper(1);
	uML_DurationConstraint_specification->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DurationInterval
	uML_DurationInterval->setName("DurationInterval");
	uML_DurationInterval->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DurationInterval());
	gen->setGeneral(get_UML_Interval());
	
    // DurationInterval attributes
	uML_DurationInterval_max->setName("max");
	uML_DurationInterval_max->setType(get_UML_Duration());
	uML_DurationInterval_max->setLower(1);
	uML_DurationInterval_max->setUpper(1);
	uML_DurationInterval_max->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DurationInterval_min->setName("min");
	uML_DurationInterval_min->setType(get_UML_Duration());
	uML_DurationInterval_min->setLower(1);
	uML_DurationInterval_min->setUpper(1);
	uML_DurationInterval_min->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class DurationObservation
	uML_DurationObservation->setName("DurationObservation");
	uML_DurationObservation->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_DurationObservation());
	gen->setGeneral(get_UML_Observation());
	
    // DurationObservation attributes
	uML_DurationObservation_event->setName("event");
	uML_DurationObservation_event->setType(get_UML_NamedElement());
	uML_DurationObservation_event->setLower(1);
	uML_DurationObservation_event->setUpper(2);
	uML_DurationObservation_event->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_DurationObservation_firstEvent->setName("firstEvent");
	uML_DurationObservation_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DurationObservation_firstEvent->setLower(0);
	uML_DurationObservation_firstEvent->setUpper(2);
	uML_DurationObservation_firstEvent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Element
	uML_Element->setName("Element");
	uML_Element->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Element());
	gen->setGeneral(Ecore::EcorePackage::eInstance()->get_Ecore_EModelElement());
	
    // Element attributes
	uML_Element_ownedComment->setName("ownedComment");
	uML_Element_ownedComment->setType(get_UML_Comment());
	uML_Element_ownedComment->setLower(0);
	uML_Element_ownedComment->setUpper(-1);
	uML_Element_ownedComment->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Element_ownedElement->setName("ownedElement");
	uML_Element_ownedElement->setType(get_UML_Element());
	uML_Element_ownedElement->setLower(0);
	uML_Element_ownedElement->setUpper(-1);
	uML_Element_ownedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Element_owner->setName("owner");
	uML_Element_owner->setType(get_UML_Element());
	uML_Element_owner->setLower(0);
	uML_Element_owner->setUpper(1);
	uML_Element_owner->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Element operations
	uML_Element_addKeyword_String_String->setName("addKeyword");
	
	// parameter 
	uML_Element_addKeyword_String_Stringreturn->setName("");
	uML_Element_addKeyword_String_Stringreturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_addKeyword_String_Stringreturn->setLower(1);
	uML_Element_addKeyword_String_Stringreturn->setUpper(1);
	uML_Element_addKeyword_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter keyword
	
	uML_Element_addKeyword_String_String_keyword->setName("keyword");
	
	uML_Element_addKeyword_String_String_keyword->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_addKeyword_String_String_keyword->setLower(1);
	
	uML_Element_addKeyword_String_String_keyword->setUpper(1);
	
	uML_Element_addKeyword_String_String_keyword->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_allOwnedElements__->setName("allOwnedElements");
	
	// parameter result
	uML_Element_allOwnedElements_result->setName("result");
	uML_Element_allOwnedElements_result->setType(get_UML_Element());
	uML_Element_allOwnedElements_result->setLower(0);
	uML_Element_allOwnedElements_result->setUpper(-1);
	uML_Element_allOwnedElements_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_applyStereotype_Stereotype_Stereotype->setName("applyStereotype");
	
	// parameter 
	uML_Element_applyStereotype_Stereotype_Stereotypereturn->setName("");
	uML_Element_applyStereotype_Stereotype_Stereotypereturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_applyStereotype_Stereotype_Stereotypereturn->setLower(1);
	uML_Element_applyStereotype_Stereotype_Stereotypereturn->setUpper(1);
	uML_Element_applyStereotype_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_applyStereotype_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_applyStereotype_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_applyStereotype_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_applyStereotype_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_applyStereotype_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_createEAnnotation_String_String->setName("createEAnnotation");
	
	// parameter 
	uML_Element_createEAnnotation_String_Stringreturn->setName("");
	uML_Element_createEAnnotation_String_Stringreturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EAnnotation());
	uML_Element_createEAnnotation_String_Stringreturn->setLower(1);
	uML_Element_createEAnnotation_String_Stringreturn->setUpper(1);
	uML_Element_createEAnnotation_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter source
	
	uML_Element_createEAnnotation_String_String_source->setName("source");
	
	uML_Element_createEAnnotation_String_String_source->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_createEAnnotation_String_String_source->setLower(1);
	
	uML_Element_createEAnnotation_String_String_source->setUpper(1);
	
	uML_Element_createEAnnotation_String_String_source->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_destroy__->setName("destroy");
	
	
	

	uML_Element_getApplicableStereotype_String_String->setName("getApplicableStereotype");
	
	// parameter 
	uML_Element_getApplicableStereotype_String_Stringreturn->setName("");
	uML_Element_getApplicableStereotype_String_Stringreturn->setType(get_UML_Stereotype());
	uML_Element_getApplicableStereotype_String_Stringreturn->setLower(0);
	uML_Element_getApplicableStereotype_String_Stringreturn->setUpper(1);
	uML_Element_getApplicableStereotype_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter qualifiedName
	
	uML_Element_getApplicableStereotype_String_String_qualifiedName->setName("qualifiedName");
	
	uML_Element_getApplicableStereotype_String_String_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_getApplicableStereotype_String_String_qualifiedName->setLower(1);
	
	uML_Element_getApplicableStereotype_String_String_qualifiedName->setUpper(1);
	
	uML_Element_getApplicableStereotype_String_String_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getApplicableStereotypes__->setName("getApplicableStereotypes");
	
	// parameter 
	uML_Element_getApplicableStereotypes__return->setName("");
	uML_Element_getApplicableStereotypes__return->setType(get_UML_Stereotype());
	uML_Element_getApplicableStereotypes__return->setLower(0);
	uML_Element_getApplicableStereotypes__return->setUpper(-1);
	uML_Element_getApplicableStereotypes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getAppliedStereotype_String_String->setName("getAppliedStereotype");
	
	// parameter 
	uML_Element_getAppliedStereotype_String_Stringreturn->setName("");
	uML_Element_getAppliedStereotype_String_Stringreturn->setType(get_UML_Stereotype());
	uML_Element_getAppliedStereotype_String_Stringreturn->setLower(0);
	uML_Element_getAppliedStereotype_String_Stringreturn->setUpper(1);
	uML_Element_getAppliedStereotype_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter qualifiedName
	
	uML_Element_getAppliedStereotype_String_String_qualifiedName->setName("qualifiedName");
	
	uML_Element_getAppliedStereotype_String_String_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_getAppliedStereotype_String_String_qualifiedName->setLower(1);
	
	uML_Element_getAppliedStereotype_String_String_qualifiedName->setUpper(1);
	
	uML_Element_getAppliedStereotype_String_String_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getAppliedStereotypes__->setName("getAppliedStereotypes");
	
	// parameter 
	uML_Element_getAppliedStereotypes__return->setName("");
	uML_Element_getAppliedStereotypes__return->setType(get_UML_Stereotype());
	uML_Element_getAppliedStereotypes__return->setLower(0);
	uML_Element_getAppliedStereotypes__return->setUpper(-1);
	uML_Element_getAppliedStereotypes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String->setName("getAppliedSubstereotype");
	
	// parameter 
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setName("");
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setType(get_UML_Stereotype());
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setLower(0);
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setUpper(1);
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype->setName("stereotype");
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype->setLower(1);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype->setUpper(1);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter qualifiedName
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName->setName("qualifiedName");
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName->setLower(1);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName->setUpper(1);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype->setName("getAppliedSubstereotypes");
	
	// parameter 
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setName("");
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setType(get_UML_Stereotype());
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setLower(0);
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setUpper(-1);
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getKeywords__->setName("getKeywords");
	
	// parameter 
	uML_Element_getKeywords__return->setName("");
	uML_Element_getKeywords__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getKeywords__return->setLower(0);
	uML_Element_getKeywords__return->setUpper(-1);
	uML_Element_getKeywords__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getModel__->setName("getModel");
	
	// parameter 
	uML_Element_getModel__return->setName("");
	uML_Element_getModel__return->setType(get_UML_Model());
	uML_Element_getModel__return->setLower(0);
	uML_Element_getModel__return->setUpper(1);
	uML_Element_getModel__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getNearestPackage__->setName("getNearestPackage");
	
	// parameter 
	uML_Element_getNearestPackage__return->setName("");
	uML_Element_getNearestPackage__return->setType(get_UML_Package());
	uML_Element_getNearestPackage__return->setLower(0);
	uML_Element_getNearestPackage__return->setUpper(1);
	uML_Element_getNearestPackage__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getRelationships__->setName("getRelationships");
	
	// parameter 
	uML_Element_getRelationships__return->setName("");
	uML_Element_getRelationships__return->setType(get_UML_Relationship());
	uML_Element_getRelationships__return->setLower(0);
	uML_Element_getRelationships__return->setUpper(-1);
	uML_Element_getRelationships__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getRelationships_EClass_EClass->setName("getRelationships");
	
	// parameter 
	uML_Element_getRelationships_EClass_EClassreturn->setName("");
	uML_Element_getRelationships_EClass_EClassreturn->setType(get_UML_Relationship());
	uML_Element_getRelationships_EClass_EClassreturn->setLower(0);
	uML_Element_getRelationships_EClass_EClassreturn->setUpper(-1);
	uML_Element_getRelationships_EClass_EClassreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter eClass
	
	uML_Element_getRelationships_EClass_EClass_eClass->setName("eClass");
	
	uML_Element_getRelationships_EClass_EClass_eClass->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	
	uML_Element_getRelationships_EClass_EClass_eClass->setLower(1);
	
	uML_Element_getRelationships_EClass_EClass_eClass->setUpper(1);
	
	uML_Element_getRelationships_EClass_EClass_eClass->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getRequiredStereotype_String_String->setName("getRequiredStereotype");
	
	// parameter 
	uML_Element_getRequiredStereotype_String_Stringreturn->setName("");
	uML_Element_getRequiredStereotype_String_Stringreturn->setType(get_UML_Stereotype());
	uML_Element_getRequiredStereotype_String_Stringreturn->setLower(0);
	uML_Element_getRequiredStereotype_String_Stringreturn->setUpper(1);
	uML_Element_getRequiredStereotype_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter qualifiedName
	
	uML_Element_getRequiredStereotype_String_String_qualifiedName->setName("qualifiedName");
	
	uML_Element_getRequiredStereotype_String_String_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_getRequiredStereotype_String_String_qualifiedName->setLower(1);
	
	uML_Element_getRequiredStereotype_String_String_qualifiedName->setUpper(1);
	
	uML_Element_getRequiredStereotype_String_String_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getRequiredStereotypes__->setName("getRequiredStereotypes");
	
	// parameter 
	uML_Element_getRequiredStereotypes__return->setName("");
	uML_Element_getRequiredStereotypes__return->setType(get_UML_Stereotype());
	uML_Element_getRequiredStereotypes__return->setLower(0);
	uML_Element_getRequiredStereotypes__return->setUpper(-1);
	uML_Element_getRequiredStereotypes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getSourceDirectedRelationships__->setName("getSourceDirectedRelationships");
	
	// parameter 
	uML_Element_getSourceDirectedRelationships__return->setName("");
	uML_Element_getSourceDirectedRelationships__return->setType(get_UML_DirectedRelationship());
	uML_Element_getSourceDirectedRelationships__return->setLower(0);
	uML_Element_getSourceDirectedRelationships__return->setUpper(-1);
	uML_Element_getSourceDirectedRelationships__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getSourceDirectedRelationships_EClass_EClass->setName("getSourceDirectedRelationships");
	
	// parameter 
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setName("");
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setType(get_UML_DirectedRelationship());
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setLower(0);
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setUpper(-1);
	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter eClass
	
	uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass->setName("eClass");
	
	uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	
	uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass->setLower(1);
	
	uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass->setUpper(1);
	
	uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getStereotypeApplication_Stereotype_Stereotype->setName("getStereotypeApplication");
	
	// parameter 
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setName("");
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setLower(0);
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setUpper(1);
	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getStereotypeApplications__->setName("getStereotypeApplications");
	
	// parameter 
	uML_Element_getStereotypeApplications__return->setName("");
	uML_Element_getStereotypeApplications__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_getStereotypeApplications__return->setLower(0);
	uML_Element_getStereotypeApplications__return->setUpper(-1);
	uML_Element_getStereotypeApplications__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getTargetDirectedRelationships__->setName("getTargetDirectedRelationships");
	
	// parameter 
	uML_Element_getTargetDirectedRelationships__return->setName("");
	uML_Element_getTargetDirectedRelationships__return->setType(get_UML_DirectedRelationship());
	uML_Element_getTargetDirectedRelationships__return->setLower(0);
	uML_Element_getTargetDirectedRelationships__return->setUpper(-1);
	uML_Element_getTargetDirectedRelationships__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_getTargetDirectedRelationships_EClass_EClass->setName("getTargetDirectedRelationships");
	
	// parameter 
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setName("");
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setType(get_UML_DirectedRelationship());
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setLower(0);
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setUpper(-1);
	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter eClass
	
	uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass->setName("eClass");
	
	uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	
	uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass->setLower(1);
	
	uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass->setUpper(1);
	
	uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_getValue_Stereotype_String_Stereotype_String->setName("getValue");
	
	// parameter 
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setName("");
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EJavaObject());
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setLower(0);
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setUpper(1);
	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype->setName("stereotype");
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype->setLower(1);
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype->setUpper(1);
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter propertyName
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName->setName("propertyName");
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName->setLower(1);
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName->setUpper(1);
	
	uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_hasKeyword_String_String->setName("hasKeyword");
	
	// parameter 
	uML_Element_hasKeyword_String_Stringreturn->setName("");
	uML_Element_hasKeyword_String_Stringreturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_hasKeyword_String_Stringreturn->setLower(1);
	uML_Element_hasKeyword_String_Stringreturn->setUpper(1);
	uML_Element_hasKeyword_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter keyword
	
	uML_Element_hasKeyword_String_String_keyword->setName("keyword");
	
	uML_Element_hasKeyword_String_String_keyword->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_hasKeyword_String_String_keyword->setLower(1);
	
	uML_Element_hasKeyword_String_String_keyword->setUpper(1);
	
	uML_Element_hasKeyword_String_String_keyword->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_hasValue_Stereotype_String_Stereotype_String->setName("hasValue");
	
	// parameter 
	uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn->setName("");
	uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn->setLower(1);
	uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn->setUpper(1);
	uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype->setName("stereotype");
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype->setLower(1);
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype->setUpper(1);
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter propertyName
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName->setName("propertyName");
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName->setLower(1);
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName->setUpper(1);
	
	uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_isStereotypeApplicable_Stereotype_Stereotype->setName("isStereotypeApplicable");
	
	// parameter 
	uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn->setName("");
	uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn->setLower(1);
	uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn->setUpper(1);
	uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_isStereotypeApplied_Stereotype_Stereotype->setName("isStereotypeApplied");
	
	// parameter 
	uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn->setName("");
	uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn->setLower(1);
	uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn->setUpper(1);
	uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_isStereotypeRequired_Stereotype_Stereotype->setName("isStereotypeRequired");
	
	// parameter 
	uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn->setName("");
	uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn->setLower(1);
	uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn->setUpper(1);
	uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_mustBeOwned__->setName("mustBeOwned");
	
	// parameter result
	uML_Element_mustBeOwned_result->setName("result");
	uML_Element_mustBeOwned_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_mustBeOwned_result->setLower(1);
	uML_Element_mustBeOwned_result->setUpper(1);
	uML_Element_mustBeOwned_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Element_removeKeyword_String_String->setName("removeKeyword");
	
	// parameter 
	uML_Element_removeKeyword_String_Stringreturn->setName("");
	uML_Element_removeKeyword_String_Stringreturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_removeKeyword_String_Stringreturn->setLower(1);
	uML_Element_removeKeyword_String_Stringreturn->setUpper(1);
	uML_Element_removeKeyword_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter keyword
	
	uML_Element_removeKeyword_String_String_keyword->setName("keyword");
	
	uML_Element_removeKeyword_String_String_keyword->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_removeKeyword_String_String_keyword->setLower(1);
	
	uML_Element_removeKeyword_String_String_keyword->setUpper(1);
	
	uML_Element_removeKeyword_String_String_keyword->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject->setName("setValue");
	
	// parameter stereotype
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype->setName("stereotype");
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype->setType(get_UML_Stereotype());
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype->setLower(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype->setUpper(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter propertyName
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName->setName("propertyName");
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName->setLower(1);
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName->setUpper(1);
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter newValue
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue->setName("newValue");
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EJavaObject());
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue->setLower(1);
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue->setUpper(1);
	
	uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Element_unapplyStereotype_Stereotype_Stereotype->setName("unapplyStereotype");
	
	// parameter 
	uML_Element_unapplyStereotype_Stereotype_Stereotypereturn->setName("");
	uML_Element_unapplyStereotype_Stereotype_Stereotypereturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_unapplyStereotype_Stereotype_Stereotypereturn->setLower(1);
	uML_Element_unapplyStereotype_Stereotype_Stereotypereturn->setUpper(1);
	uML_Element_unapplyStereotype_Stereotype_Stereotypereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter stereotype
	
	uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype->setName("stereotype");
	
	uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype->setType(get_UML_Stereotype());
	
	uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype->setLower(1);
	
	uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype->setUpper(1);
	
	uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class ElementImport
	uML_ElementImport->setName("ElementImport");
	uML_ElementImport->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ElementImport());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // ElementImport attributes
	uML_ElementImport_alias->setName("alias");
	uML_ElementImport_alias->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_ElementImport_alias->setLower(0);
	uML_ElementImport_alias->setUpper(1);
	uML_ElementImport_alias->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ElementImport_importedElement->setName("importedElement");
	uML_ElementImport_importedElement->setType(get_UML_PackageableElement());
	uML_ElementImport_importedElement->setLower(1);
	uML_ElementImport_importedElement->setUpper(1);
	uML_ElementImport_importedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ElementImport_importingNamespace->setName("importingNamespace");
	uML_ElementImport_importingNamespace->setType(get_UML_Namespace());
	uML_ElementImport_importingNamespace->setLower(1);
	uML_ElementImport_importingNamespace->setUpper(1);
	uML_ElementImport_importingNamespace->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ElementImport_visibility->setName("visibility");
	uML_ElementImport_visibility->setType(get_UML_VisibilityKind());
	uML_ElementImport_visibility->setLower(1);
	uML_ElementImport_visibility->setUpper(1);
	uML_ElementImport_visibility->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ElementImport_visibility->setDefaultValue(uML_ElementImport_visibility_defaultValue_InstanceValue);
	

    // ElementImport operations
	uML_ElementImport_getName__->setName("getName");
	
	// parameter result
	uML_ElementImport_getName_result->setName("result");
	uML_ElementImport_getName_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_ElementImport_getName_result->setLower(1);
	uML_ElementImport_getName_result->setUpper(1);
	uML_ElementImport_getName_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class EncapsulatedClassifier
	uML_EncapsulatedClassifier->setName("EncapsulatedClassifier");
	uML_EncapsulatedClassifier->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_EncapsulatedClassifier());
	gen->setGeneral(get_UML_StructuredClassifier());
	
    // EncapsulatedClassifier attributes
	uML_EncapsulatedClassifier_ownedPort->setName("ownedPort");
	uML_EncapsulatedClassifier_ownedPort->setType(get_UML_Port());
	uML_EncapsulatedClassifier_ownedPort->setLower(0);
	uML_EncapsulatedClassifier_ownedPort->setUpper(-1);
	uML_EncapsulatedClassifier_ownedPort->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // EncapsulatedClassifier operations
	uML_EncapsulatedClassifier_ownedPort__->setName("ownedPort");
	
	// parameter result
	uML_EncapsulatedClassifier_ownedPort_result->setName("result");
	uML_EncapsulatedClassifier_ownedPort_result->setType(get_UML_Port());
	uML_EncapsulatedClassifier_ownedPort_result->setLower(0);
	uML_EncapsulatedClassifier_ownedPort_result->setUpper(-1);
	uML_EncapsulatedClassifier_ownedPort_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Enumeration
	uML_Enumeration->setName("Enumeration");
	uML_Enumeration->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Enumeration());
	gen->setGeneral(get_UML_DataType());
	
    // Enumeration attributes
	uML_Enumeration_ownedLiteral->setName("ownedLiteral");
	uML_Enumeration_ownedLiteral->setType(get_UML_EnumerationLiteral());
	uML_Enumeration_ownedLiteral->setLower(0);
	uML_Enumeration_ownedLiteral->setUpper(-1);
	uML_Enumeration_ownedLiteral->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class EnumerationLiteral
	uML_EnumerationLiteral->setName("EnumerationLiteral");
	uML_EnumerationLiteral->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_EnumerationLiteral());
	gen->setGeneral(get_UML_InstanceSpecification());
	
    // EnumerationLiteral attributes
	uML_EnumerationLiteral_classifier->setName("classifier");
	uML_EnumerationLiteral_classifier->setType(get_UML_Enumeration());
	uML_EnumerationLiteral_classifier->setLower(1);
	uML_EnumerationLiteral_classifier->setUpper(1);
	uML_EnumerationLiteral_classifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_EnumerationLiteral_enumeration->setName("enumeration");
	uML_EnumerationLiteral_enumeration->setType(get_UML_Enumeration());
	uML_EnumerationLiteral_enumeration->setLower(1);
	uML_EnumerationLiteral_enumeration->setUpper(1);
	uML_EnumerationLiteral_enumeration->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // EnumerationLiteral operations
	uML_EnumerationLiteral_classifier__->setName("classifier");
	
	// parameter result
	uML_EnumerationLiteral_classifier_result->setName("result");
	uML_EnumerationLiteral_classifier_result->setType(get_UML_Enumeration());
	uML_EnumerationLiteral_classifier_result->setLower(1);
	uML_EnumerationLiteral_classifier_result->setUpper(1);
	uML_EnumerationLiteral_classifier_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_EnumerationLiteral_getClassifiers__->setName("getClassifiers");
	
	// parameter 
	uML_EnumerationLiteral_getClassifiers__return->setName("");
	uML_EnumerationLiteral_getClassifiers__return->setType(get_UML_Classifier());
	uML_EnumerationLiteral_getClassifiers__return->setLower(0);
	uML_EnumerationLiteral_getClassifiers__return->setUpper(-1);
	uML_EnumerationLiteral_getClassifiers__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Event
	uML_Event->setName("Event");
	uML_Event->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Event());
	gen->setGeneral(get_UML_PackageableElement());
	

    //-------------------------------------------
	//	class ExceptionHandler
	uML_ExceptionHandler->setName("ExceptionHandler");
	uML_ExceptionHandler->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExceptionHandler());
	gen->setGeneral(get_UML_Element());
	
    // ExceptionHandler attributes
	uML_ExceptionHandler_exceptionInput->setName("exceptionInput");
	uML_ExceptionHandler_exceptionInput->setType(get_UML_ObjectNode());
	uML_ExceptionHandler_exceptionInput->setLower(1);
	uML_ExceptionHandler_exceptionInput->setUpper(1);
	uML_ExceptionHandler_exceptionInput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExceptionHandler_exceptionType->setName("exceptionType");
	uML_ExceptionHandler_exceptionType->setType(get_UML_Classifier());
	uML_ExceptionHandler_exceptionType->setLower(1);
	uML_ExceptionHandler_exceptionType->setUpper(-1);
	uML_ExceptionHandler_exceptionType->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExceptionHandler_handlerBody->setName("handlerBody");
	uML_ExceptionHandler_handlerBody->setType(get_UML_ExecutableNode());
	uML_ExceptionHandler_handlerBody->setLower(1);
	uML_ExceptionHandler_handlerBody->setUpper(1);
	uML_ExceptionHandler_handlerBody->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExceptionHandler_protectedNode->setName("protectedNode");
	uML_ExceptionHandler_protectedNode->setType(get_UML_ExecutableNode());
	uML_ExceptionHandler_protectedNode->setLower(1);
	uML_ExceptionHandler_protectedNode->setUpper(1);
	uML_ExceptionHandler_protectedNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ExecutableNode
	uML_ExecutableNode->setName("ExecutableNode");
	uML_ExecutableNode->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExecutableNode());
	gen->setGeneral(get_UML_ActivityNode());
	
    // ExecutableNode attributes
	uML_ExecutableNode_handler->setName("handler");
	uML_ExecutableNode_handler->setType(get_UML_ExceptionHandler());
	uML_ExecutableNode_handler->setLower(0);
	uML_ExecutableNode_handler->setUpper(-1);
	uML_ExecutableNode_handler->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ExecutionEnvironment
	uML_ExecutionEnvironment->setName("ExecutionEnvironment");
	uML_ExecutionEnvironment->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExecutionEnvironment());
	gen->setGeneral(get_UML_Node());
	

    //-------------------------------------------
	//	class ExecutionOccurrenceSpecification
	uML_ExecutionOccurrenceSpecification->setName("ExecutionOccurrenceSpecification");
	uML_ExecutionOccurrenceSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExecutionOccurrenceSpecification());
	gen->setGeneral(get_UML_OccurrenceSpecification());
	
    // ExecutionOccurrenceSpecification attributes
	uML_ExecutionOccurrenceSpecification_execution->setName("execution");
	uML_ExecutionOccurrenceSpecification_execution->setType(get_UML_ExecutionSpecification());
	uML_ExecutionOccurrenceSpecification_execution->setLower(1);
	uML_ExecutionOccurrenceSpecification_execution->setUpper(1);
	uML_ExecutionOccurrenceSpecification_execution->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ExecutionSpecification
	uML_ExecutionSpecification->setName("ExecutionSpecification");
	uML_ExecutionSpecification->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExecutionSpecification());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // ExecutionSpecification attributes
	uML_ExecutionSpecification_finish->setName("finish");
	uML_ExecutionSpecification_finish->setType(get_UML_OccurrenceSpecification());
	uML_ExecutionSpecification_finish->setLower(1);
	uML_ExecutionSpecification_finish->setUpper(1);
	uML_ExecutionSpecification_finish->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExecutionSpecification_start->setName("start");
	uML_ExecutionSpecification_start->setType(get_UML_OccurrenceSpecification());
	uML_ExecutionSpecification_start->setLower(1);
	uML_ExecutionSpecification_start->setUpper(1);
	uML_ExecutionSpecification_start->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ExpansionNode
	uML_ExpansionNode->setName("ExpansionNode");
	uML_ExpansionNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExpansionNode());
	gen->setGeneral(get_UML_ObjectNode());
	
    // ExpansionNode attributes
	uML_ExpansionNode_regionAsInput->setName("regionAsInput");
	uML_ExpansionNode_regionAsInput->setType(get_UML_ExpansionRegion());
	uML_ExpansionNode_regionAsInput->setLower(0);
	uML_ExpansionNode_regionAsInput->setUpper(1);
	uML_ExpansionNode_regionAsInput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExpansionNode_regionAsOutput->setName("regionAsOutput");
	uML_ExpansionNode_regionAsOutput->setType(get_UML_ExpansionRegion());
	uML_ExpansionNode_regionAsOutput->setLower(0);
	uML_ExpansionNode_regionAsOutput->setUpper(1);
	uML_ExpansionNode_regionAsOutput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ExpansionRegion
	uML_ExpansionRegion->setName("ExpansionRegion");
	uML_ExpansionRegion->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExpansionRegion());
	gen->setGeneral(get_UML_StructuredActivityNode());
	
    // ExpansionRegion attributes
	uML_ExpansionRegion_inputElement->setName("inputElement");
	uML_ExpansionRegion_inputElement->setType(get_UML_ExpansionNode());
	uML_ExpansionRegion_inputElement->setLower(1);
	uML_ExpansionRegion_inputElement->setUpper(-1);
	uML_ExpansionRegion_inputElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExpansionRegion_mode->setName("mode");
	uML_ExpansionRegion_mode->setType(get_UML_ExpansionKind());
	uML_ExpansionRegion_mode->setLower(1);
	uML_ExpansionRegion_mode->setUpper(1);
	uML_ExpansionRegion_mode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ExpansionRegion_mode->setDefaultValue(uML_ExpansionRegion_mode_defaultValue_InstanceValue);
	
	uML_ExpansionRegion_outputElement->setName("outputElement");
	uML_ExpansionRegion_outputElement->setType(get_UML_ExpansionNode());
	uML_ExpansionRegion_outputElement->setLower(0);
	uML_ExpansionRegion_outputElement->setUpper(-1);
	uML_ExpansionRegion_outputElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Expression
	uML_Expression->setName("Expression");
	uML_Expression->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Expression());
	gen->setGeneral(get_UML_ValueSpecification());
	
    // Expression attributes
	uML_Expression_operand->setName("operand");
	uML_Expression_operand->setType(get_UML_ValueSpecification());
	uML_Expression_operand->setLower(0);
	uML_Expression_operand->setUpper(-1);
	uML_Expression_operand->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Expression_symbol->setName("symbol");
	uML_Expression_symbol->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Expression_symbol->setLower(0);
	uML_Expression_symbol->setUpper(1);
	uML_Expression_symbol->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Extend
	uML_Extend->setName("Extend");
	uML_Extend->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Extend());
	gen->setGeneral(get_UML_DirectedRelationship());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Extend());
	gen->setGeneral(get_UML_NamedElement());
	
    // Extend attributes
	uML_Extend_condition->setName("condition");
	uML_Extend_condition->setType(get_UML_Constraint());
	uML_Extend_condition->setLower(0);
	uML_Extend_condition->setUpper(1);
	uML_Extend_condition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Extend_extendedCase->setName("extendedCase");
	uML_Extend_extendedCase->setType(get_UML_UseCase());
	uML_Extend_extendedCase->setLower(1);
	uML_Extend_extendedCase->setUpper(1);
	uML_Extend_extendedCase->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Extend_extension->setName("extension");
	uML_Extend_extension->setType(get_UML_UseCase());
	uML_Extend_extension->setLower(1);
	uML_Extend_extension->setUpper(1);
	uML_Extend_extension->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Extend_extensionLocation->setName("extensionLocation");
	uML_Extend_extensionLocation->setType(get_UML_ExtensionPoint());
	uML_Extend_extensionLocation->setLower(1);
	uML_Extend_extensionLocation->setUpper(-1);
	uML_Extend_extensionLocation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Extension
	uML_Extension->setName("Extension");
	uML_Extension->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Extension());
	gen->setGeneral(get_UML_Association());
	
    // Extension attributes
	uML_Extension_isRequired->setName("isRequired");
	uML_Extension_isRequired->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Extension_isRequired->setLower(1);
	uML_Extension_isRequired->setUpper(1);
	uML_Extension_isRequired->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Extension_metaclass->setName("metaclass");
	uML_Extension_metaclass->setType(get_UML_Class());
	uML_Extension_metaclass->setLower(1);
	uML_Extension_metaclass->setUpper(1);
	uML_Extension_metaclass->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Extension_ownedEnd->setName("ownedEnd");
	uML_Extension_ownedEnd->setType(get_UML_ExtensionEnd());
	uML_Extension_ownedEnd->setLower(1);
	uML_Extension_ownedEnd->setUpper(1);
	uML_Extension_ownedEnd->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Extension operations
	uML_Extension_getStereotype__->setName("getStereotype");
	
	// parameter 
	uML_Extension_getStereotype__return->setName("");
	uML_Extension_getStereotype__return->setType(get_UML_Stereotype());
	uML_Extension_getStereotype__return->setLower(0);
	uML_Extension_getStereotype__return->setUpper(1);
	uML_Extension_getStereotype__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Extension_getStereotypeEnd__->setName("getStereotypeEnd");
	
	// parameter 
	uML_Extension_getStereotypeEnd__return->setName("");
	uML_Extension_getStereotypeEnd__return->setType(get_UML_Property());
	uML_Extension_getStereotypeEnd__return->setLower(0);
	uML_Extension_getStereotypeEnd__return->setUpper(1);
	uML_Extension_getStereotypeEnd__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Extension_isRequired__->setName("isRequired");
	
	// parameter result
	uML_Extension_isRequired_result->setName("result");
	uML_Extension_isRequired_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Extension_isRequired_result->setLower(1);
	uML_Extension_isRequired_result->setUpper(1);
	uML_Extension_isRequired_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Extension_metaclass__->setName("metaclass");
	
	// parameter result
	uML_Extension_metaclass_result->setName("result");
	uML_Extension_metaclass_result->setType(get_UML_Class());
	uML_Extension_metaclass_result->setLower(1);
	uML_Extension_metaclass_result->setUpper(1);
	uML_Extension_metaclass_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Extension_metaclassEnd__->setName("metaclassEnd");
	
	// parameter result
	uML_Extension_metaclassEnd_result->setName("result");
	uML_Extension_metaclassEnd_result->setType(get_UML_Property());
	uML_Extension_metaclassEnd_result->setLower(1);
	uML_Extension_metaclassEnd_result->setUpper(1);
	uML_Extension_metaclassEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ExtensionEnd
	uML_ExtensionEnd->setName("ExtensionEnd");
	uML_ExtensionEnd->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExtensionEnd());
	gen->setGeneral(get_UML_Property());
	
    // ExtensionEnd attributes
	uML_ExtensionEnd_lower->setName("lower");
	uML_ExtensionEnd_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_lower->setLower(0);
	uML_ExtensionEnd_lower->setUpper(1);
	uML_ExtensionEnd_lower->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ExtensionEnd_type->setName("type");
	uML_ExtensionEnd_type->setType(get_UML_Stereotype());
	uML_ExtensionEnd_type->setLower(1);
	uML_ExtensionEnd_type->setUpper(1);
	uML_ExtensionEnd_type->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ExtensionEnd operations
	uML_ExtensionEnd_getLower__->setName("getLower");
	
	// parameter 
	uML_ExtensionEnd_getLower__return->setName("");
	uML_ExtensionEnd_getLower__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_getLower__return->setLower(1);
	uML_ExtensionEnd_getLower__return->setUpper(1);
	uML_ExtensionEnd_getLower__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ExtensionEnd_lowerBound__->setName("lowerBound");
	
	// parameter result
	uML_ExtensionEnd_lowerBound_result->setName("result");
	uML_ExtensionEnd_lowerBound_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_lowerBound_result->setLower(0);
	uML_ExtensionEnd_lowerBound_result->setUpper(1);
	uML_ExtensionEnd_lowerBound_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ExtensionEnd_setLower_Integer_Integer->setName("setLower");
	
	// parameter newLower
	uML_ExtensionEnd_setLower_Integer_Integer_newLower->setName("newLower");
	uML_ExtensionEnd_setLower_Integer_Integer_newLower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_setLower_Integer_Integer_newLower->setLower(1);
	uML_ExtensionEnd_setLower_Integer_Integer_newLower->setUpper(1);
	uML_ExtensionEnd_setLower_Integer_Integer_newLower->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class ExtensionPoint
	uML_ExtensionPoint->setName("ExtensionPoint");
	uML_ExtensionPoint->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ExtensionPoint());
	gen->setGeneral(get_UML_RedefinableElement());
	
    // ExtensionPoint attributes
	uML_ExtensionPoint_useCase->setName("useCase");
	uML_ExtensionPoint_useCase->setType(get_UML_UseCase());
	uML_ExtensionPoint_useCase->setLower(1);
	uML_ExtensionPoint_useCase->setUpper(1);
	uML_ExtensionPoint_useCase->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Feature
	uML_Feature->setName("Feature");
	uML_Feature->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Feature());
	gen->setGeneral(get_UML_RedefinableElement());
	
    // Feature attributes
	uML_Feature_featuringClassifier->setName("featuringClassifier");
	uML_Feature_featuringClassifier->setType(get_UML_Classifier());
	uML_Feature_featuringClassifier->setLower(0);
	uML_Feature_featuringClassifier->setUpper(-1);
	uML_Feature_featuringClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Feature_isStatic->setName("isStatic");
	uML_Feature_isStatic->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Feature_isStatic->setLower(1);
	uML_Feature_isStatic->setUpper(1);
	uML_Feature_isStatic->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Feature_isStatic->setDefaultValue(uML_Feature_isStatic_defaultValue_LiteralBoolean_UML_Feature_isStatic);
	


    //-------------------------------------------
	//	class FinalNode
	uML_FinalNode->setName("FinalNode");
	uML_FinalNode->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_FinalNode());
	gen->setGeneral(get_UML_ControlNode());
	

    //-------------------------------------------
	//	class FinalState
	uML_FinalState->setName("FinalState");
	uML_FinalState->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_FinalState());
	gen->setGeneral(get_UML_State());
	

    //-------------------------------------------
	//	class FlowFinalNode
	uML_FlowFinalNode->setName("FlowFinalNode");
	uML_FlowFinalNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_FlowFinalNode());
	gen->setGeneral(get_UML_FinalNode());
	

    //-------------------------------------------
	//	class ForkNode
	uML_ForkNode->setName("ForkNode");
	uML_ForkNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ForkNode());
	gen->setGeneral(get_UML_ControlNode());
	

    //-------------------------------------------
	//	class FunctionBehavior
	uML_FunctionBehavior->setName("FunctionBehavior");
	uML_FunctionBehavior->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_FunctionBehavior());
	gen->setGeneral(get_UML_OpaqueBehavior());
	
    // FunctionBehavior operations
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType->setName("hasAllDataTypeAttributes");
	
	// parameter result
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setName("result");
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setLower(1);
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setUpper(1);
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter d
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d->setName("d");
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d->setType(get_UML_DataType());
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d->setLower(1);
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d->setUpper(1);
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class Gate
	uML_Gate->setName("Gate");
	uML_Gate->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Gate());
	gen->setGeneral(get_UML_MessageEnd());
	
    // Gate operations
	uML_Gate_getName__->setName("getName");
	
	// parameter result
	uML_Gate_getName_result->setName("result");
	uML_Gate_getName_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Gate_getName_result->setLower(1);
	uML_Gate_getName_result->setUpper(1);
	uML_Gate_getName_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Gate_getOperand__->setName("getOperand");
	
	// parameter result
	uML_Gate_getOperand_result->setName("result");
	uML_Gate_getOperand_result->setType(get_UML_InteractionOperand());
	uML_Gate_getOperand_result->setLower(1);
	uML_Gate_getOperand_result->setUpper(1);
	uML_Gate_getOperand_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Gate_isActual__->setName("isActual");
	
	// parameter result
	uML_Gate_isActual_result->setName("result");
	uML_Gate_isActual_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isActual_result->setLower(1);
	uML_Gate_isActual_result->setUpper(1);
	uML_Gate_isActual_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace->setName("isDistinguishableFrom");
	
	// parameter result
	uML_Gate_isDistinguishableFrom_result->setName("result");
	uML_Gate_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isDistinguishableFrom_result->setLower(1);
	uML_Gate_isDistinguishableFrom_result->setUpper(1);
	uML_Gate_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter n
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setName("n");
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setType(get_UML_NamedElement());
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setLower(1);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setUpper(1);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter ns
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setName("ns");
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setType(get_UML_Namespace());
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setLower(1);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setUpper(1);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Gate_isFormal__->setName("isFormal");
	
	// parameter result
	uML_Gate_isFormal_result->setName("result");
	uML_Gate_isFormal_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isFormal_result->setLower(1);
	uML_Gate_isFormal_result->setUpper(1);
	uML_Gate_isFormal_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Gate_isInsideCF__->setName("isInsideCF");
	
	// parameter result
	uML_Gate_isInsideCF_result->setName("result");
	uML_Gate_isInsideCF_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isInsideCF_result->setLower(1);
	uML_Gate_isInsideCF_result->setUpper(1);
	uML_Gate_isInsideCF_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Gate_isOutsideCF__->setName("isOutsideCF");
	
	// parameter result
	uML_Gate_isOutsideCF_result->setName("result");
	uML_Gate_isOutsideCF_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isOutsideCF_result->setLower(1);
	uML_Gate_isOutsideCF_result->setUpper(1);
	uML_Gate_isOutsideCF_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Gate_matches_Gate_Gate->setName("matches");
	
	// parameter result
	uML_Gate_matches_result->setName("result");
	uML_Gate_matches_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_matches_result->setLower(1);
	uML_Gate_matches_result->setUpper(1);
	uML_Gate_matches_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter gateToMatch
	
	uML_Gate_matches_Gate_Gate_gateToMatch->setName("gateToMatch");
	
	uML_Gate_matches_Gate_Gate_gateToMatch->setType(get_UML_Gate());
	
	uML_Gate_matches_Gate_Gate_gateToMatch->setLower(1);
	
	uML_Gate_matches_Gate_Gate_gateToMatch->setUpper(1);
	
	uML_Gate_matches_Gate_Gate_gateToMatch->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class GeneralOrdering
	uML_GeneralOrdering->setName("GeneralOrdering");
	uML_GeneralOrdering->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_GeneralOrdering());
	gen->setGeneral(get_UML_NamedElement());
	
    // GeneralOrdering attributes
	uML_GeneralOrdering_after->setName("after");
	uML_GeneralOrdering_after->setType(get_UML_OccurrenceSpecification());
	uML_GeneralOrdering_after->setLower(1);
	uML_GeneralOrdering_after->setUpper(1);
	uML_GeneralOrdering_after->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_GeneralOrdering_before->setName("before");
	uML_GeneralOrdering_before->setType(get_UML_OccurrenceSpecification());
	uML_GeneralOrdering_before->setLower(1);
	uML_GeneralOrdering_before->setUpper(1);
	uML_GeneralOrdering_before->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Generalization
	uML_Generalization->setName("Generalization");
	uML_Generalization->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Generalization());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // Generalization attributes
	uML_Generalization_general->setName("general");
	uML_Generalization_general->setType(get_UML_Classifier());
	uML_Generalization_general->setLower(1);
	uML_Generalization_general->setUpper(1);
	uML_Generalization_general->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Generalization_generalizationSet->setName("generalizationSet");
	uML_Generalization_generalizationSet->setType(get_UML_GeneralizationSet());
	uML_Generalization_generalizationSet->setLower(0);
	uML_Generalization_generalizationSet->setUpper(-1);
	uML_Generalization_generalizationSet->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Generalization_isSubstitutable->setName("isSubstitutable");
	uML_Generalization_isSubstitutable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Generalization_isSubstitutable->setLower(0);
	uML_Generalization_isSubstitutable->setUpper(1);
	uML_Generalization_isSubstitutable->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Generalization_isSubstitutable->setDefaultValue(uML_Generalization_isSubstitutable_defaultValue_LiteralBoolean_UML_Generalization_isSubstitutable);
	
	uML_Generalization_specific->setName("specific");
	uML_Generalization_specific->setType(get_UML_Classifier());
	uML_Generalization_specific->setLower(1);
	uML_Generalization_specific->setUpper(1);
	uML_Generalization_specific->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class GeneralizationSet
	uML_GeneralizationSet->setName("GeneralizationSet");
	uML_GeneralizationSet->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_GeneralizationSet());
	gen->setGeneral(get_UML_PackageableElement());
	
    // GeneralizationSet attributes
	uML_GeneralizationSet_generalization->setName("generalization");
	uML_GeneralizationSet_generalization->setType(get_UML_Generalization());
	uML_GeneralizationSet_generalization->setLower(0);
	uML_GeneralizationSet_generalization->setUpper(-1);
	uML_GeneralizationSet_generalization->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_GeneralizationSet_isCovering->setName("isCovering");
	uML_GeneralizationSet_isCovering->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_GeneralizationSet_isCovering->setLower(1);
	uML_GeneralizationSet_isCovering->setUpper(1);
	uML_GeneralizationSet_isCovering->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_GeneralizationSet_isCovering->setDefaultValue(uML_GeneralizationSet_isCovering_defaultValue_LiteralBoolean_UML_GeneralizationSet_isCovering);
	
	uML_GeneralizationSet_isDisjoint->setName("isDisjoint");
	uML_GeneralizationSet_isDisjoint->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_GeneralizationSet_isDisjoint->setLower(1);
	uML_GeneralizationSet_isDisjoint->setUpper(1);
	uML_GeneralizationSet_isDisjoint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_GeneralizationSet_isDisjoint->setDefaultValue(uML_GeneralizationSet_isDisjoint_defaultValue_LiteralBoolean_UML_GeneralizationSet_isDisjoint);
	
	uML_GeneralizationSet_powertype->setName("powertype");
	uML_GeneralizationSet_powertype->setType(get_UML_Classifier());
	uML_GeneralizationSet_powertype->setLower(0);
	uML_GeneralizationSet_powertype->setUpper(1);
	uML_GeneralizationSet_powertype->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Image
	uML_Image->setName("Image");
	uML_Image->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Image());
	gen->setGeneral(get_UML_Element());
	
    // Image attributes
	uML_Image_content->setName("content");
	uML_Image_content->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Image_content->setLower(0);
	uML_Image_content->setUpper(1);
	uML_Image_content->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Image_format->setName("format");
	uML_Image_format->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Image_format->setLower(0);
	uML_Image_format->setUpper(1);
	uML_Image_format->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Image_location->setName("location");
	uML_Image_location->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Image_location->setLower(0);
	uML_Image_location->setUpper(1);
	uML_Image_location->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Include
	uML_Include->setName("Include");
	uML_Include->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Include());
	gen->setGeneral(get_UML_DirectedRelationship());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Include());
	gen->setGeneral(get_UML_NamedElement());
	
    // Include attributes
	uML_Include_addition->setName("addition");
	uML_Include_addition->setType(get_UML_UseCase());
	uML_Include_addition->setLower(1);
	uML_Include_addition->setUpper(1);
	uML_Include_addition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Include_includingCase->setName("includingCase");
	uML_Include_includingCase->setType(get_UML_UseCase());
	uML_Include_includingCase->setLower(1);
	uML_Include_includingCase->setUpper(1);
	uML_Include_includingCase->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InformationFlow
	uML_InformationFlow->setName("InformationFlow");
	uML_InformationFlow->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InformationFlow());
	gen->setGeneral(get_UML_DirectedRelationship());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InformationFlow());
	gen->setGeneral(get_UML_PackageableElement());
	
    // InformationFlow attributes
	uML_InformationFlow_conveyed->setName("conveyed");
	uML_InformationFlow_conveyed->setType(get_UML_Classifier());
	uML_InformationFlow_conveyed->setLower(1);
	uML_InformationFlow_conveyed->setUpper(-1);
	uML_InformationFlow_conveyed->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InformationFlow_informationSource->setName("informationSource");
	uML_InformationFlow_informationSource->setType(get_UML_NamedElement());
	uML_InformationFlow_informationSource->setLower(1);
	uML_InformationFlow_informationSource->setUpper(-1);
	uML_InformationFlow_informationSource->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InformationFlow_informationTarget->setName("informationTarget");
	uML_InformationFlow_informationTarget->setType(get_UML_NamedElement());
	uML_InformationFlow_informationTarget->setLower(1);
	uML_InformationFlow_informationTarget->setUpper(-1);
	uML_InformationFlow_informationTarget->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InformationFlow_realization->setName("realization");
	uML_InformationFlow_realization->setType(get_UML_Relationship());
	uML_InformationFlow_realization->setLower(0);
	uML_InformationFlow_realization->setUpper(-1);
	uML_InformationFlow_realization->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InformationFlow_realizingActivityEdge->setName("realizingActivityEdge");
	uML_InformationFlow_realizingActivityEdge->setType(get_UML_ActivityEdge());
	uML_InformationFlow_realizingActivityEdge->setLower(0);
	uML_InformationFlow_realizingActivityEdge->setUpper(-1);
	uML_InformationFlow_realizingActivityEdge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InformationFlow_realizingConnector->setName("realizingConnector");
	uML_InformationFlow_realizingConnector->setType(get_UML_Connector());
	uML_InformationFlow_realizingConnector->setLower(0);
	uML_InformationFlow_realizingConnector->setUpper(-1);
	uML_InformationFlow_realizingConnector->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InformationFlow_realizingMessage->setName("realizingMessage");
	uML_InformationFlow_realizingMessage->setType(get_UML_Message());
	uML_InformationFlow_realizingMessage->setLower(0);
	uML_InformationFlow_realizingMessage->setUpper(-1);
	uML_InformationFlow_realizingMessage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InformationItem
	uML_InformationItem->setName("InformationItem");
	uML_InformationItem->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InformationItem());
	gen->setGeneral(get_UML_Classifier());
	
    // InformationItem attributes
	uML_InformationItem_represented->setName("represented");
	uML_InformationItem_represented->setType(get_UML_Classifier());
	uML_InformationItem_represented->setLower(0);
	uML_InformationItem_represented->setUpper(-1);
	uML_InformationItem_represented->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InitialNode
	uML_InitialNode->setName("InitialNode");
	uML_InitialNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InitialNode());
	gen->setGeneral(get_UML_ControlNode());
	

    //-------------------------------------------
	//	class InputPin
	uML_InputPin->setName("InputPin");
	uML_InputPin->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InputPin());
	gen->setGeneral(get_UML_Pin());
	

    //-------------------------------------------
	//	class InstanceSpecification
	uML_InstanceSpecification->setName("InstanceSpecification");
	uML_InstanceSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InstanceSpecification());
	gen->setGeneral(get_UML_DeployedArtifact());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InstanceSpecification());
	gen->setGeneral(get_UML_DeploymentTarget());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InstanceSpecification());
	gen->setGeneral(get_UML_PackageableElement());
	
    // InstanceSpecification attributes
	uML_InstanceSpecification_classifier->setName("classifier");
	uML_InstanceSpecification_classifier->setType(get_UML_Classifier());
	uML_InstanceSpecification_classifier->setLower(0);
	uML_InstanceSpecification_classifier->setUpper(-1);
	uML_InstanceSpecification_classifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InstanceSpecification_slot->setName("slot");
	uML_InstanceSpecification_slot->setType(get_UML_Slot());
	uML_InstanceSpecification_slot->setLower(0);
	uML_InstanceSpecification_slot->setUpper(-1);
	uML_InstanceSpecification_slot->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InstanceSpecification_specification->setName("specification");
	uML_InstanceSpecification_specification->setType(get_UML_ValueSpecification());
	uML_InstanceSpecification_specification->setLower(0);
	uML_InstanceSpecification_specification->setUpper(1);
	uML_InstanceSpecification_specification->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InstanceValue
	uML_InstanceValue->setName("InstanceValue");
	uML_InstanceValue->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InstanceValue());
	gen->setGeneral(get_UML_ValueSpecification());
	
    // InstanceValue attributes
	uML_InstanceValue_instance->setName("instance");
	uML_InstanceValue_instance->setType(get_UML_InstanceSpecification());
	uML_InstanceValue_instance->setLower(1);
	uML_InstanceValue_instance->setUpper(1);
	uML_InstanceValue_instance->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // InstanceValue operations
	uML_InstanceValue_stringValue__->setName("stringValue");
	
	// parameter 
	uML_InstanceValue_stringValue__return->setName("");
	uML_InstanceValue_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_InstanceValue_stringValue__return->setLower(1);
	uML_InstanceValue_stringValue__return->setUpper(1);
	uML_InstanceValue_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Interaction
	uML_Interaction->setName("Interaction");
	uML_Interaction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Interaction());
	gen->setGeneral(get_UML_Behavior());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Interaction());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // Interaction attributes
	uML_Interaction_action->setName("action");
	uML_Interaction_action->setType(get_UML_Action());
	uML_Interaction_action->setLower(0);
	uML_Interaction_action->setUpper(-1);
	uML_Interaction_action->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interaction_formalGate->setName("formalGate");
	uML_Interaction_formalGate->setType(get_UML_Gate());
	uML_Interaction_formalGate->setLower(0);
	uML_Interaction_formalGate->setUpper(-1);
	uML_Interaction_formalGate->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interaction_fragment->setName("fragment");
	uML_Interaction_fragment->setType(get_UML_InteractionFragment());
	uML_Interaction_fragment->setLower(0);
	uML_Interaction_fragment->setUpper(-1);
	uML_Interaction_fragment->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interaction_lifeline->setName("lifeline");
	uML_Interaction_lifeline->setType(get_UML_Lifeline());
	uML_Interaction_lifeline->setLower(0);
	uML_Interaction_lifeline->setUpper(-1);
	uML_Interaction_lifeline->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interaction_message->setName("message");
	uML_Interaction_message->setType(get_UML_Message());
	uML_Interaction_message->setLower(0);
	uML_Interaction_message->setUpper(-1);
	uML_Interaction_message->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InteractionConstraint
	uML_InteractionConstraint->setName("InteractionConstraint");
	uML_InteractionConstraint->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InteractionConstraint());
	gen->setGeneral(get_UML_Constraint());
	
    // InteractionConstraint attributes
	uML_InteractionConstraint_maxint->setName("maxint");
	uML_InteractionConstraint_maxint->setType(get_UML_ValueSpecification());
	uML_InteractionConstraint_maxint->setLower(0);
	uML_InteractionConstraint_maxint->setUpper(1);
	uML_InteractionConstraint_maxint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionConstraint_minint->setName("minint");
	uML_InteractionConstraint_minint->setType(get_UML_ValueSpecification());
	uML_InteractionConstraint_minint->setLower(0);
	uML_InteractionConstraint_minint->setUpper(1);
	uML_InteractionConstraint_minint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InteractionFragment
	uML_InteractionFragment->setName("InteractionFragment");
	uML_InteractionFragment->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InteractionFragment());
	gen->setGeneral(get_UML_NamedElement());
	
    // InteractionFragment attributes
	uML_InteractionFragment_covered->setName("covered");
	uML_InteractionFragment_covered->setType(get_UML_Lifeline());
	uML_InteractionFragment_covered->setLower(0);
	uML_InteractionFragment_covered->setUpper(-1);
	uML_InteractionFragment_covered->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionFragment_enclosingInteraction->setName("enclosingInteraction");
	uML_InteractionFragment_enclosingInteraction->setType(get_UML_Interaction());
	uML_InteractionFragment_enclosingInteraction->setLower(0);
	uML_InteractionFragment_enclosingInteraction->setUpper(1);
	uML_InteractionFragment_enclosingInteraction->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionFragment_enclosingOperand->setName("enclosingOperand");
	uML_InteractionFragment_enclosingOperand->setType(get_UML_InteractionOperand());
	uML_InteractionFragment_enclosingOperand->setLower(0);
	uML_InteractionFragment_enclosingOperand->setUpper(1);
	uML_InteractionFragment_enclosingOperand->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionFragment_generalOrdering->setName("generalOrdering");
	uML_InteractionFragment_generalOrdering->setType(get_UML_GeneralOrdering());
	uML_InteractionFragment_generalOrdering->setLower(0);
	uML_InteractionFragment_generalOrdering->setUpper(-1);
	uML_InteractionFragment_generalOrdering->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InteractionOperand
	uML_InteractionOperand->setName("InteractionOperand");
	uML_InteractionOperand->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InteractionOperand());
	gen->setGeneral(get_UML_InteractionFragment());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InteractionOperand());
	gen->setGeneral(get_UML_Namespace());
	
    // InteractionOperand attributes
	uML_InteractionOperand_fragment->setName("fragment");
	uML_InteractionOperand_fragment->setType(get_UML_InteractionFragment());
	uML_InteractionOperand_fragment->setLower(0);
	uML_InteractionOperand_fragment->setUpper(-1);
	uML_InteractionOperand_fragment->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionOperand_guard->setName("guard");
	uML_InteractionOperand_guard->setType(get_UML_InteractionConstraint());
	uML_InteractionOperand_guard->setLower(0);
	uML_InteractionOperand_guard->setUpper(1);
	uML_InteractionOperand_guard->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InteractionUse
	uML_InteractionUse->setName("InteractionUse");
	uML_InteractionUse->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InteractionUse());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // InteractionUse attributes
	uML_InteractionUse_actualGate->setName("actualGate");
	uML_InteractionUse_actualGate->setType(get_UML_Gate());
	uML_InteractionUse_actualGate->setLower(0);
	uML_InteractionUse_actualGate->setUpper(-1);
	uML_InteractionUse_actualGate->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionUse_argument->setName("argument");
	uML_InteractionUse_argument->setType(get_UML_ValueSpecification());
	uML_InteractionUse_argument->setLower(0);
	uML_InteractionUse_argument->setUpper(-1);
	uML_InteractionUse_argument->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionUse_refersTo->setName("refersTo");
	uML_InteractionUse_refersTo->setType(get_UML_Interaction());
	uML_InteractionUse_refersTo->setLower(1);
	uML_InteractionUse_refersTo->setUpper(1);
	uML_InteractionUse_refersTo->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionUse_returnValue->setName("returnValue");
	uML_InteractionUse_returnValue->setType(get_UML_ValueSpecification());
	uML_InteractionUse_returnValue->setLower(0);
	uML_InteractionUse_returnValue->setUpper(1);
	uML_InteractionUse_returnValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InteractionUse_returnValueRecipient->setName("returnValueRecipient");
	uML_InteractionUse_returnValueRecipient->setType(get_UML_Property());
	uML_InteractionUse_returnValueRecipient->setLower(0);
	uML_InteractionUse_returnValueRecipient->setUpper(1);
	uML_InteractionUse_returnValueRecipient->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Interface
	uML_Interface->setName("Interface");
	uML_Interface->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Interface());
	gen->setGeneral(get_UML_Classifier());
	
    // Interface attributes
	uML_Interface_nestedClassifier->setName("nestedClassifier");
	uML_Interface_nestedClassifier->setType(get_UML_Classifier());
	uML_Interface_nestedClassifier->setLower(0);
	uML_Interface_nestedClassifier->setUpper(-1);
	uML_Interface_nestedClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interface_ownedAttribute->setName("ownedAttribute");
	uML_Interface_ownedAttribute->setType(get_UML_Property());
	uML_Interface_ownedAttribute->setLower(0);
	uML_Interface_ownedAttribute->setUpper(-1);
	uML_Interface_ownedAttribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interface_ownedOperation->setName("ownedOperation");
	uML_Interface_ownedOperation->setType(get_UML_Operation());
	uML_Interface_ownedOperation->setLower(0);
	uML_Interface_ownedOperation->setUpper(-1);
	uML_Interface_ownedOperation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interface_ownedReception->setName("ownedReception");
	uML_Interface_ownedReception->setType(get_UML_Reception());
	uML_Interface_ownedReception->setLower(0);
	uML_Interface_ownedReception->setUpper(-1);
	uML_Interface_ownedReception->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interface_protocol->setName("protocol");
	uML_Interface_protocol->setType(get_UML_ProtocolStateMachine());
	uML_Interface_protocol->setLower(0);
	uML_Interface_protocol->setUpper(1);
	uML_Interface_protocol->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interface_redefinedInterface->setName("redefinedInterface");
	uML_Interface_redefinedInterface->setType(get_UML_Interface());
	uML_Interface_redefinedInterface->setLower(0);
	uML_Interface_redefinedInterface->setUpper(-1);
	uML_Interface_redefinedInterface->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Interface operations
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	
	// parameter 
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setName("");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setType(get_UML_Property());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setName("name");
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setLower(0);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setUpper(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter type
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setName("type");
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setType(get_UML_Type());
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setLower(0);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setUpper(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter lower
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setName("lower");
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setLower(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setUpper(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter upper
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setName("upper");
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setLower(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setUpper(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type->setName("createOwnedOperation");
	
	// parameter 
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setName("");
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setType(get_UML_Operation());
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setLower(1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setUpper(1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setName("name");
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setLower(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setUpper(1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterNames
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setName("parameterNames");
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setLower(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setUpper(-1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter parameterTypes
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setName("parameterTypes");
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setType(get_UML_Type());
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setLower(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setUpper(-1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter returnType
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setName("returnType");
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setType(get_UML_Type());
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setLower(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setUpper(1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class InterfaceRealization
	uML_InterfaceRealization->setName("InterfaceRealization");
	uML_InterfaceRealization->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InterfaceRealization());
	gen->setGeneral(get_UML_Realization());
	
    // InterfaceRealization attributes
	uML_InterfaceRealization_contract->setName("contract");
	uML_InterfaceRealization_contract->setType(get_UML_Interface());
	uML_InterfaceRealization_contract->setLower(1);
	uML_InterfaceRealization_contract->setUpper(1);
	uML_InterfaceRealization_contract->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InterfaceRealization_implementingClassifier->setName("implementingClassifier");
	uML_InterfaceRealization_implementingClassifier->setType(get_UML_BehavioredClassifier());
	uML_InterfaceRealization_implementingClassifier->setLower(1);
	uML_InterfaceRealization_implementingClassifier->setUpper(1);
	uML_InterfaceRealization_implementingClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InterruptibleActivityRegion
	uML_InterruptibleActivityRegion->setName("InterruptibleActivityRegion");
	uML_InterruptibleActivityRegion->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InterruptibleActivityRegion());
	gen->setGeneral(get_UML_ActivityGroup());
	
    // InterruptibleActivityRegion attributes
	uML_InterruptibleActivityRegion_interruptingEdge->setName("interruptingEdge");
	uML_InterruptibleActivityRegion_interruptingEdge->setType(get_UML_ActivityEdge());
	uML_InterruptibleActivityRegion_interruptingEdge->setLower(0);
	uML_InterruptibleActivityRegion_interruptingEdge->setUpper(-1);
	uML_InterruptibleActivityRegion_interruptingEdge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InterruptibleActivityRegion_node->setName("node");
	uML_InterruptibleActivityRegion_node->setType(get_UML_ActivityNode());
	uML_InterruptibleActivityRegion_node->setLower(0);
	uML_InterruptibleActivityRegion_node->setUpper(-1);
	uML_InterruptibleActivityRegion_node->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Interval
	uML_Interval->setName("Interval");
	uML_Interval->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Interval());
	gen->setGeneral(get_UML_ValueSpecification());
	
    // Interval attributes
	uML_Interval_max->setName("max");
	uML_Interval_max->setType(get_UML_ValueSpecification());
	uML_Interval_max->setLower(1);
	uML_Interval_max->setUpper(1);
	uML_Interval_max->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Interval_min->setName("min");
	uML_Interval_min->setType(get_UML_ValueSpecification());
	uML_Interval_min->setLower(1);
	uML_Interval_min->setUpper(1);
	uML_Interval_min->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class IntervalConstraint
	uML_IntervalConstraint->setName("IntervalConstraint");
	uML_IntervalConstraint->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_IntervalConstraint());
	gen->setGeneral(get_UML_Constraint());
	
    // IntervalConstraint attributes
	uML_IntervalConstraint_specification->setName("specification");
	uML_IntervalConstraint_specification->setType(get_UML_Interval());
	uML_IntervalConstraint_specification->setLower(1);
	uML_IntervalConstraint_specification->setUpper(1);
	uML_IntervalConstraint_specification->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class InvocationAction
	uML_InvocationAction->setName("InvocationAction");
	uML_InvocationAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_InvocationAction());
	gen->setGeneral(get_UML_Action());
	
    // InvocationAction attributes
	uML_InvocationAction_argument->setName("argument");
	uML_InvocationAction_argument->setType(get_UML_InputPin());
	uML_InvocationAction_argument->setLower(0);
	uML_InvocationAction_argument->setUpper(-1);
	uML_InvocationAction_argument->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_InvocationAction_onPort->setName("onPort");
	uML_InvocationAction_onPort->setType(get_UML_Port());
	uML_InvocationAction_onPort->setLower(0);
	uML_InvocationAction_onPort->setUpper(1);
	uML_InvocationAction_onPort->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class JoinNode
	uML_JoinNode->setName("JoinNode");
	uML_JoinNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_JoinNode());
	gen->setGeneral(get_UML_ControlNode());
	
    // JoinNode attributes
	uML_JoinNode_isCombineDuplicate->setName("isCombineDuplicate");
	uML_JoinNode_isCombineDuplicate->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_JoinNode_isCombineDuplicate->setLower(1);
	uML_JoinNode_isCombineDuplicate->setUpper(1);
	uML_JoinNode_isCombineDuplicate->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_JoinNode_isCombineDuplicate->setDefaultValue(uML_JoinNode_isCombineDuplicate_defaultValue_LiteralBoolean_UML_JoinNode_isCombineDuplicate);
	
	uML_JoinNode_joinSpec->setName("joinSpec");
	uML_JoinNode_joinSpec->setType(get_UML_ValueSpecification());
	uML_JoinNode_joinSpec->setLower(0);
	uML_JoinNode_joinSpec->setUpper(1);
	uML_JoinNode_joinSpec->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Lifeline
	uML_Lifeline->setName("Lifeline");
	uML_Lifeline->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Lifeline());
	gen->setGeneral(get_UML_NamedElement());
	
    // Lifeline attributes
	uML_Lifeline_coveredBy->setName("coveredBy");
	uML_Lifeline_coveredBy->setType(get_UML_InteractionFragment());
	uML_Lifeline_coveredBy->setLower(0);
	uML_Lifeline_coveredBy->setUpper(-1);
	uML_Lifeline_coveredBy->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Lifeline_decomposedAs->setName("decomposedAs");
	uML_Lifeline_decomposedAs->setType(get_UML_PartDecomposition());
	uML_Lifeline_decomposedAs->setLower(0);
	uML_Lifeline_decomposedAs->setUpper(1);
	uML_Lifeline_decomposedAs->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Lifeline_interaction->setName("interaction");
	uML_Lifeline_interaction->setType(get_UML_Interaction());
	uML_Lifeline_interaction->setLower(1);
	uML_Lifeline_interaction->setUpper(1);
	uML_Lifeline_interaction->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Lifeline_represents->setName("represents");
	uML_Lifeline_represents->setType(get_UML_ConnectableElement());
	uML_Lifeline_represents->setLower(0);
	uML_Lifeline_represents->setUpper(1);
	uML_Lifeline_represents->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Lifeline_selector->setName("selector");
	uML_Lifeline_selector->setType(get_UML_ValueSpecification());
	uML_Lifeline_selector->setLower(0);
	uML_Lifeline_selector->setUpper(1);
	uML_Lifeline_selector->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class LinkAction
	uML_LinkAction->setName("LinkAction");
	uML_LinkAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LinkAction());
	gen->setGeneral(get_UML_Action());
	
    // LinkAction attributes
	uML_LinkAction_endData->setName("endData");
	uML_LinkAction_endData->setType(get_UML_LinkEndData());
	uML_LinkAction_endData->setLower(2);
	uML_LinkAction_endData->setUpper(-1);
	uML_LinkAction_endData->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LinkAction_inputValue->setName("inputValue");
	uML_LinkAction_inputValue->setType(get_UML_InputPin());
	uML_LinkAction_inputValue->setLower(1);
	uML_LinkAction_inputValue->setUpper(-1);
	uML_LinkAction_inputValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // LinkAction operations
	uML_LinkAction_association__->setName("association");
	
	// parameter result
	uML_LinkAction_association_result->setName("result");
	uML_LinkAction_association_result->setType(get_UML_Association());
	uML_LinkAction_association_result->setLower(1);
	uML_LinkAction_association_result->setUpper(1);
	uML_LinkAction_association_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LinkEndCreationData
	uML_LinkEndCreationData->setName("LinkEndCreationData");
	uML_LinkEndCreationData->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LinkEndCreationData());
	gen->setGeneral(get_UML_LinkEndData());
	
    // LinkEndCreationData attributes
	uML_LinkEndCreationData_insertAt->setName("insertAt");
	uML_LinkEndCreationData_insertAt->setType(get_UML_InputPin());
	uML_LinkEndCreationData_insertAt->setLower(0);
	uML_LinkEndCreationData_insertAt->setUpper(1);
	uML_LinkEndCreationData_insertAt->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LinkEndCreationData_isReplaceAll->setName("isReplaceAll");
	uML_LinkEndCreationData_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LinkEndCreationData_isReplaceAll->setLower(1);
	uML_LinkEndCreationData_isReplaceAll->setUpper(1);
	uML_LinkEndCreationData_isReplaceAll->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_LinkEndCreationData_isReplaceAll->setDefaultValue(uML_LinkEndCreationData_isReplaceAll_defaultValue_LiteralBoolean_UML_LinkEndCreationData_isReplaceAll);
	

    // LinkEndCreationData operations
	uML_LinkEndCreationData_allPins__->setName("allPins");
	
	// parameter result
	uML_LinkEndCreationData_allPins_result->setName("result");
	uML_LinkEndCreationData_allPins_result->setType(get_UML_InputPin());
	uML_LinkEndCreationData_allPins_result->setLower(0);
	uML_LinkEndCreationData_allPins_result->setUpper(-1);
	uML_LinkEndCreationData_allPins_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LinkEndData
	uML_LinkEndData->setName("LinkEndData");
	uML_LinkEndData->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LinkEndData());
	gen->setGeneral(get_UML_Element());
	
    // LinkEndData attributes
	uML_LinkEndData_end->setName("end");
	uML_LinkEndData_end->setType(get_UML_Property());
	uML_LinkEndData_end->setLower(1);
	uML_LinkEndData_end->setUpper(1);
	uML_LinkEndData_end->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LinkEndData_qualifier->setName("qualifier");
	uML_LinkEndData_qualifier->setType(get_UML_QualifierValue());
	uML_LinkEndData_qualifier->setLower(0);
	uML_LinkEndData_qualifier->setUpper(-1);
	uML_LinkEndData_qualifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LinkEndData_value->setName("value");
	uML_LinkEndData_value->setType(get_UML_InputPin());
	uML_LinkEndData_value->setLower(0);
	uML_LinkEndData_value->setUpper(1);
	uML_LinkEndData_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // LinkEndData operations
	uML_LinkEndData_allPins__->setName("allPins");
	
	// parameter result
	uML_LinkEndData_allPins_result->setName("result");
	uML_LinkEndData_allPins_result->setType(get_UML_InputPin());
	uML_LinkEndData_allPins_result->setLower(0);
	uML_LinkEndData_allPins_result->setUpper(-1);
	uML_LinkEndData_allPins_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LinkEndDestructionData
	uML_LinkEndDestructionData->setName("LinkEndDestructionData");
	uML_LinkEndDestructionData->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LinkEndDestructionData());
	gen->setGeneral(get_UML_LinkEndData());
	
    // LinkEndDestructionData attributes
	uML_LinkEndDestructionData_destroyAt->setName("destroyAt");
	uML_LinkEndDestructionData_destroyAt->setType(get_UML_InputPin());
	uML_LinkEndDestructionData_destroyAt->setLower(0);
	uML_LinkEndDestructionData_destroyAt->setUpper(1);
	uML_LinkEndDestructionData_destroyAt->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LinkEndDestructionData_isDestroyDuplicates->setName("isDestroyDuplicates");
	uML_LinkEndDestructionData_isDestroyDuplicates->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LinkEndDestructionData_isDestroyDuplicates->setLower(1);
	uML_LinkEndDestructionData_isDestroyDuplicates->setUpper(1);
	uML_LinkEndDestructionData_isDestroyDuplicates->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_LinkEndDestructionData_isDestroyDuplicates->setDefaultValue(uML_LinkEndDestructionData_isDestroyDuplicates_defaultValue_LiteralBoolean_UML_LinkEndDestructionData_isDestroyDuplicates);
	

    // LinkEndDestructionData operations
	uML_LinkEndDestructionData_allPins__->setName("allPins");
	
	// parameter result
	uML_LinkEndDestructionData_allPins_result->setName("result");
	uML_LinkEndDestructionData_allPins_result->setType(get_UML_InputPin());
	uML_LinkEndDestructionData_allPins_result->setLower(0);
	uML_LinkEndDestructionData_allPins_result->setUpper(-1);
	uML_LinkEndDestructionData_allPins_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LiteralBoolean
	uML_LiteralBoolean->setName("LiteralBoolean");
	uML_LiteralBoolean->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralBoolean());
	gen->setGeneral(get_UML_LiteralSpecification());
	
    // LiteralBoolean attributes
	uML_LiteralBoolean_value->setName("value");
	uML_LiteralBoolean_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralBoolean_value->setLower(1);
	uML_LiteralBoolean_value->setUpper(1);
	uML_LiteralBoolean_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_LiteralBoolean_value->setDefaultValue(uML_LiteralBoolean_value_defaultValue_LiteralBoolean_UML_LiteralBoolean_value);
	

    // LiteralBoolean operations
	uML_LiteralBoolean_booleanValue__->setName("booleanValue");
	
	// parameter result
	uML_LiteralBoolean_booleanValue_result->setName("result");
	uML_LiteralBoolean_booleanValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralBoolean_booleanValue_result->setLower(1);
	uML_LiteralBoolean_booleanValue_result->setUpper(1);
	uML_LiteralBoolean_booleanValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralBoolean_isComputable__->setName("isComputable");
	
	// parameter result
	uML_LiteralBoolean_isComputable_result->setName("result");
	uML_LiteralBoolean_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralBoolean_isComputable_result->setLower(1);
	uML_LiteralBoolean_isComputable_result->setUpper(1);
	uML_LiteralBoolean_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralBoolean_stringValue__->setName("stringValue");
	
	// parameter 
	uML_LiteralBoolean_stringValue__return->setName("");
	uML_LiteralBoolean_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralBoolean_stringValue__return->setLower(1);
	uML_LiteralBoolean_stringValue__return->setUpper(1);
	uML_LiteralBoolean_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LiteralInteger
	uML_LiteralInteger->setName("LiteralInteger");
	uML_LiteralInteger->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralInteger());
	gen->setGeneral(get_UML_LiteralSpecification());
	
    // LiteralInteger attributes
	uML_LiteralInteger_value->setName("value");
	uML_LiteralInteger_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_LiteralInteger_value->setLower(1);
	uML_LiteralInteger_value->setUpper(1);
	uML_LiteralInteger_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_LiteralInteger_value->setDefaultValue(uML_LiteralInteger_value_defaultValue_LiteralInteger_UML_LiteralInteger_value);
	

    // LiteralInteger operations
	uML_LiteralInteger_integerValue__->setName("integerValue");
	
	// parameter result
	uML_LiteralInteger_integerValue_result->setName("result");
	uML_LiteralInteger_integerValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_LiteralInteger_integerValue_result->setLower(1);
	uML_LiteralInteger_integerValue_result->setUpper(1);
	uML_LiteralInteger_integerValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralInteger_isComputable__->setName("isComputable");
	
	// parameter result
	uML_LiteralInteger_isComputable_result->setName("result");
	uML_LiteralInteger_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralInteger_isComputable_result->setLower(1);
	uML_LiteralInteger_isComputable_result->setUpper(1);
	uML_LiteralInteger_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralInteger_stringValue__->setName("stringValue");
	
	// parameter 
	uML_LiteralInteger_stringValue__return->setName("");
	uML_LiteralInteger_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralInteger_stringValue__return->setLower(1);
	uML_LiteralInteger_stringValue__return->setUpper(1);
	uML_LiteralInteger_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LiteralNull
	uML_LiteralNull->setName("LiteralNull");
	uML_LiteralNull->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralNull());
	gen->setGeneral(get_UML_LiteralSpecification());
	
    // LiteralNull operations
	uML_LiteralNull_isComputable__->setName("isComputable");
	
	// parameter result
	uML_LiteralNull_isComputable_result->setName("result");
	uML_LiteralNull_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralNull_isComputable_result->setLower(1);
	uML_LiteralNull_isComputable_result->setUpper(1);
	uML_LiteralNull_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralNull_isNull__->setName("isNull");
	
	// parameter result
	uML_LiteralNull_isNull_result->setName("result");
	uML_LiteralNull_isNull_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralNull_isNull_result->setLower(1);
	uML_LiteralNull_isNull_result->setUpper(1);
	uML_LiteralNull_isNull_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LiteralReal
	uML_LiteralReal->setName("LiteralReal");
	uML_LiteralReal->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralReal());
	gen->setGeneral(get_UML_LiteralSpecification());
	
    // LiteralReal attributes
	uML_LiteralReal_value->setName("value");
	uML_LiteralReal_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_LiteralReal_value->setLower(1);
	uML_LiteralReal_value->setUpper(1);
	uML_LiteralReal_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // LiteralReal operations
	uML_LiteralReal_isComputable__->setName("isComputable");
	
	// parameter result
	uML_LiteralReal_isComputable_result->setName("result");
	uML_LiteralReal_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralReal_isComputable_result->setLower(1);
	uML_LiteralReal_isComputable_result->setUpper(1);
	uML_LiteralReal_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralReal_realValue__->setName("realValue");
	
	// parameter result
	uML_LiteralReal_realValue_result->setName("result");
	uML_LiteralReal_realValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_LiteralReal_realValue_result->setLower(1);
	uML_LiteralReal_realValue_result->setUpper(1);
	uML_LiteralReal_realValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralReal_stringValue__->setName("stringValue");
	
	// parameter 
	uML_LiteralReal_stringValue__return->setName("");
	uML_LiteralReal_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralReal_stringValue__return->setLower(1);
	uML_LiteralReal_stringValue__return->setUpper(1);
	uML_LiteralReal_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LiteralSpecification
	uML_LiteralSpecification->setName("LiteralSpecification");
	uML_LiteralSpecification->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralSpecification());
	gen->setGeneral(get_UML_ValueSpecification());
	

    //-------------------------------------------
	//	class LiteralString
	uML_LiteralString->setName("LiteralString");
	uML_LiteralString->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralString());
	gen->setGeneral(get_UML_LiteralSpecification());
	
    // LiteralString attributes
	uML_LiteralString_value->setName("value");
	uML_LiteralString_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralString_value->setLower(0);
	uML_LiteralString_value->setUpper(1);
	uML_LiteralString_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // LiteralString operations
	uML_LiteralString_integerValue__->setName("integerValue");
	
	// parameter 
	uML_LiteralString_integerValue__return->setName("");
	uML_LiteralString_integerValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_LiteralString_integerValue__return->setLower(1);
	uML_LiteralString_integerValue__return->setUpper(1);
	uML_LiteralString_integerValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralString_isComputable__->setName("isComputable");
	
	// parameter result
	uML_LiteralString_isComputable_result->setName("result");
	uML_LiteralString_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralString_isComputable_result->setLower(1);
	uML_LiteralString_isComputable_result->setUpper(1);
	uML_LiteralString_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralString_stringValue__->setName("stringValue");
	
	// parameter result
	uML_LiteralString_stringValue_result->setName("result");
	uML_LiteralString_stringValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralString_stringValue_result->setLower(1);
	uML_LiteralString_stringValue_result->setUpper(1);
	uML_LiteralString_stringValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralString_unlimitedValue__->setName("unlimitedValue");
	
	// parameter 
	uML_LiteralString_unlimitedValue__return->setName("");
	uML_LiteralString_unlimitedValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_LiteralString_unlimitedValue__return->setLower(1);
	uML_LiteralString_unlimitedValue__return->setUpper(1);
	uML_LiteralString_unlimitedValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LiteralUnlimitedNatural
	uML_LiteralUnlimitedNatural->setName("LiteralUnlimitedNatural");
	uML_LiteralUnlimitedNatural->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LiteralUnlimitedNatural());
	gen->setGeneral(get_UML_LiteralSpecification());
	
    // LiteralUnlimitedNatural attributes
	uML_LiteralUnlimitedNatural_value->setName("value");
	uML_LiteralUnlimitedNatural_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_LiteralUnlimitedNatural_value->setLower(1);
	uML_LiteralUnlimitedNatural_value->setUpper(1);
	uML_LiteralUnlimitedNatural_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_LiteralUnlimitedNatural_value->setDefaultValue(uML_LiteralUnlimitedNatural_value_defaultValue_LiteralUnlimitedNatural_UML_LiteralUnlimitedNatural_value);
	

    // LiteralUnlimitedNatural operations
	uML_LiteralUnlimitedNatural_isComputable__->setName("isComputable");
	
	// parameter result
	uML_LiteralUnlimitedNatural_isComputable_result->setName("result");
	uML_LiteralUnlimitedNatural_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralUnlimitedNatural_isComputable_result->setLower(1);
	uML_LiteralUnlimitedNatural_isComputable_result->setUpper(1);
	uML_LiteralUnlimitedNatural_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralUnlimitedNatural_stringValue__->setName("stringValue");
	
	// parameter 
	uML_LiteralUnlimitedNatural_stringValue__return->setName("");
	uML_LiteralUnlimitedNatural_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralUnlimitedNatural_stringValue__return->setLower(1);
	uML_LiteralUnlimitedNatural_stringValue__return->setUpper(1);
	uML_LiteralUnlimitedNatural_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LiteralUnlimitedNatural_unlimitedValue__->setName("unlimitedValue");
	
	// parameter result
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setName("result");
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setLower(1);
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setUpper(1);
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class LoopNode
	uML_LoopNode->setName("LoopNode");
	uML_LoopNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_LoopNode());
	gen->setGeneral(get_UML_StructuredActivityNode());
	
    // LoopNode attributes
	uML_LoopNode_bodyOutput->setName("bodyOutput");
	uML_LoopNode_bodyOutput->setType(get_UML_OutputPin());
	uML_LoopNode_bodyOutput->setLower(0);
	uML_LoopNode_bodyOutput->setUpper(-1);
	uML_LoopNode_bodyOutput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_bodyPart->setName("bodyPart");
	uML_LoopNode_bodyPart->setType(get_UML_ExecutableNode());
	uML_LoopNode_bodyPart->setLower(0);
	uML_LoopNode_bodyPart->setUpper(-1);
	uML_LoopNode_bodyPart->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_decider->setName("decider");
	uML_LoopNode_decider->setType(get_UML_OutputPin());
	uML_LoopNode_decider->setLower(1);
	uML_LoopNode_decider->setUpper(1);
	uML_LoopNode_decider->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_isTestedFirst->setName("isTestedFirst");
	uML_LoopNode_isTestedFirst->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LoopNode_isTestedFirst->setLower(1);
	uML_LoopNode_isTestedFirst->setUpper(1);
	uML_LoopNode_isTestedFirst->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_LoopNode_isTestedFirst->setDefaultValue(uML_LoopNode_isTestedFirst_defaultValue_LiteralBoolean_UML_LoopNode_isTestedFirst);
	
	uML_LoopNode_loopVariable->setName("loopVariable");
	uML_LoopNode_loopVariable->setType(get_UML_OutputPin());
	uML_LoopNode_loopVariable->setLower(0);
	uML_LoopNode_loopVariable->setUpper(-1);
	uML_LoopNode_loopVariable->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_loopVariableInput->setName("loopVariableInput");
	uML_LoopNode_loopVariableInput->setType(get_UML_InputPin());
	uML_LoopNode_loopVariableInput->setLower(0);
	uML_LoopNode_loopVariableInput->setUpper(-1);
	uML_LoopNode_loopVariableInput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_result->setName("result");
	uML_LoopNode_result->setType(get_UML_OutputPin());
	uML_LoopNode_result->setLower(0);
	uML_LoopNode_result->setUpper(-1);
	uML_LoopNode_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_setupPart->setName("setupPart");
	uML_LoopNode_setupPart->setType(get_UML_ExecutableNode());
	uML_LoopNode_setupPart->setLower(0);
	uML_LoopNode_setupPart->setUpper(-1);
	uML_LoopNode_setupPart->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_LoopNode_test->setName("test");
	uML_LoopNode_test->setType(get_UML_ExecutableNode());
	uML_LoopNode_test->setLower(1);
	uML_LoopNode_test->setUpper(-1);
	uML_LoopNode_test->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // LoopNode operations
	uML_LoopNode_allActions__->setName("allActions");
	
	// parameter result
	uML_LoopNode_allActions_result->setName("result");
	uML_LoopNode_allActions_result->setType(get_UML_Action());
	uML_LoopNode_allActions_result->setLower(0);
	uML_LoopNode_allActions_result->setUpper(-1);
	uML_LoopNode_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_LoopNode_sourceNodes__->setName("sourceNodes");
	
	// parameter result
	uML_LoopNode_sourceNodes_result->setName("result");
	uML_LoopNode_sourceNodes_result->setType(get_UML_ActivityNode());
	uML_LoopNode_sourceNodes_result->setLower(0);
	uML_LoopNode_sourceNodes_result->setUpper(-1);
	uML_LoopNode_sourceNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Manifestation
	uML_Manifestation->setName("Manifestation");
	uML_Manifestation->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Manifestation());
	gen->setGeneral(get_UML_Abstraction());
	
    // Manifestation attributes
	uML_Manifestation_utilizedElement->setName("utilizedElement");
	uML_Manifestation_utilizedElement->setType(get_UML_PackageableElement());
	uML_Manifestation_utilizedElement->setLower(1);
	uML_Manifestation_utilizedElement->setUpper(1);
	uML_Manifestation_utilizedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class MergeNode
	uML_MergeNode->setName("MergeNode");
	uML_MergeNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_MergeNode());
	gen->setGeneral(get_UML_ControlNode());
	

    //-------------------------------------------
	//	class Message
	uML_Message->setName("Message");
	uML_Message->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Message());
	gen->setGeneral(get_UML_NamedElement());
	
    // Message attributes
	uML_Message_argument->setName("argument");
	uML_Message_argument->setType(get_UML_ValueSpecification());
	uML_Message_argument->setLower(0);
	uML_Message_argument->setUpper(-1);
	uML_Message_argument->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Message_connector->setName("connector");
	uML_Message_connector->setType(get_UML_Connector());
	uML_Message_connector->setLower(0);
	uML_Message_connector->setUpper(1);
	uML_Message_connector->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Message_interaction->setName("interaction");
	uML_Message_interaction->setType(get_UML_Interaction());
	uML_Message_interaction->setLower(1);
	uML_Message_interaction->setUpper(1);
	uML_Message_interaction->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Message_messageKind->setName("messageKind");
	uML_Message_messageKind->setType(get_UML_MessageKind());
	uML_Message_messageKind->setLower(1);
	uML_Message_messageKind->setUpper(1);
	uML_Message_messageKind->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Message_messageKind->setDefaultValue(uML_Message_messageKind_defaultValue_InstanceValue);
	
	uML_Message_messageSort->setName("messageSort");
	uML_Message_messageSort->setType(get_UML_MessageSort());
	uML_Message_messageSort->setLower(1);
	uML_Message_messageSort->setUpper(1);
	uML_Message_messageSort->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Message_messageSort->setDefaultValue(uML_Message_messageSort_defaultValue_InstanceValue);
	
	uML_Message_receiveEvent->setName("receiveEvent");
	uML_Message_receiveEvent->setType(get_UML_MessageEnd());
	uML_Message_receiveEvent->setLower(0);
	uML_Message_receiveEvent->setUpper(1);
	uML_Message_receiveEvent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Message_sendEvent->setName("sendEvent");
	uML_Message_sendEvent->setType(get_UML_MessageEnd());
	uML_Message_sendEvent->setLower(0);
	uML_Message_sendEvent->setUpper(1);
	uML_Message_sendEvent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Message_signature->setName("signature");
	uML_Message_signature->setType(get_UML_NamedElement());
	uML_Message_signature->setLower(0);
	uML_Message_signature->setUpper(1);
	uML_Message_signature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Message operations
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace->setName("isDistinguishableFrom");
	
	// parameter result
	uML_Message_isDistinguishableFrom_result->setName("result");
	uML_Message_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Message_isDistinguishableFrom_result->setLower(1);
	uML_Message_isDistinguishableFrom_result->setUpper(1);
	uML_Message_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter n
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setName("n");
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setType(get_UML_NamedElement());
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setLower(1);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setUpper(1);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter ns
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setName("ns");
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setType(get_UML_Namespace());
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setLower(1);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setUpper(1);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Message_messageKind__->setName("messageKind");
	
	// parameter result
	uML_Message_messageKind_result->setName("result");
	uML_Message_messageKind_result->setType(get_UML_MessageKind());
	uML_Message_messageKind_result->setLower(1);
	uML_Message_messageKind_result->setUpper(1);
	uML_Message_messageKind_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class MessageEnd
	uML_MessageEnd->setName("MessageEnd");
	uML_MessageEnd->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_MessageEnd());
	gen->setGeneral(get_UML_NamedElement());
	
    // MessageEnd attributes
	uML_MessageEnd_message->setName("message");
	uML_MessageEnd_message->setType(get_UML_Message());
	uML_MessageEnd_message->setLower(0);
	uML_MessageEnd_message->setUpper(1);
	uML_MessageEnd_message->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // MessageEnd operations
	uML_MessageEnd_enclosingFragment__->setName("enclosingFragment");
	
	// parameter result
	uML_MessageEnd_enclosingFragment_result->setName("result");
	uML_MessageEnd_enclosingFragment_result->setType(get_UML_InteractionFragment());
	uML_MessageEnd_enclosingFragment_result->setLower(0);
	uML_MessageEnd_enclosingFragment_result->setUpper(-1);
	uML_MessageEnd_enclosingFragment_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MessageEnd_isReceive__->setName("isReceive");
	
	// parameter result
	uML_MessageEnd_isReceive_result->setName("result");
	uML_MessageEnd_isReceive_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MessageEnd_isReceive_result->setLower(1);
	uML_MessageEnd_isReceive_result->setUpper(1);
	uML_MessageEnd_isReceive_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MessageEnd_isSend__->setName("isSend");
	
	// parameter result
	uML_MessageEnd_isSend_result->setName("result");
	uML_MessageEnd_isSend_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MessageEnd_isSend_result->setLower(1);
	uML_MessageEnd_isSend_result->setUpper(1);
	uML_MessageEnd_isSend_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MessageEnd_oppositeEnd__->setName("oppositeEnd");
	
	// parameter result
	uML_MessageEnd_oppositeEnd_result->setName("result");
	uML_MessageEnd_oppositeEnd_result->setType(get_UML_MessageEnd());
	uML_MessageEnd_oppositeEnd_result->setLower(0);
	uML_MessageEnd_oppositeEnd_result->setUpper(-1);
	uML_MessageEnd_oppositeEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class MessageEvent
	uML_MessageEvent->setName("MessageEvent");
	uML_MessageEvent->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_MessageEvent());
	gen->setGeneral(get_UML_Event());
	

    //-------------------------------------------
	//	class MessageOccurrenceSpecification
	uML_MessageOccurrenceSpecification->setName("MessageOccurrenceSpecification");
	uML_MessageOccurrenceSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_MessageOccurrenceSpecification());
	gen->setGeneral(get_UML_MessageEnd());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_MessageOccurrenceSpecification());
	gen->setGeneral(get_UML_OccurrenceSpecification());
	

    //-------------------------------------------
	//	class Model
	uML_Model->setName("Model");
	uML_Model->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Model());
	gen->setGeneral(get_UML_Package());
	
    // Model attributes
	uML_Model_viewpoint->setName("viewpoint");
	uML_Model_viewpoint->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Model_viewpoint->setLower(0);
	uML_Model_viewpoint->setUpper(1);
	uML_Model_viewpoint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Model operations
	uML_Model_isMetamodel__->setName("isMetamodel");
	
	// parameter 
	uML_Model_isMetamodel__return->setName("");
	uML_Model_isMetamodel__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Model_isMetamodel__return->setLower(1);
	uML_Model_isMetamodel__return->setUpper(1);
	uML_Model_isMetamodel__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class MultiplicityElement
	uML_MultiplicityElement->setName("MultiplicityElement");
	uML_MultiplicityElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_MultiplicityElement());
	gen->setGeneral(get_UML_Element());
	
    // MultiplicityElement attributes
	uML_MultiplicityElement_isOrdered->setName("isOrdered");
	uML_MultiplicityElement_isOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_isOrdered->setLower(1);
	uML_MultiplicityElement_isOrdered->setUpper(1);
	uML_MultiplicityElement_isOrdered->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_MultiplicityElement_isOrdered->setDefaultValue(uML_MultiplicityElement_isOrdered_defaultValue_LiteralBoolean_UML_MultiplicityElement_isOrdered);
	
	uML_MultiplicityElement_isUnique->setName("isUnique");
	uML_MultiplicityElement_isUnique->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_isUnique->setLower(1);
	uML_MultiplicityElement_isUnique->setUpper(1);
	uML_MultiplicityElement_isUnique->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_MultiplicityElement_isUnique->setDefaultValue(uML_MultiplicityElement_isUnique_defaultValue_LiteralBoolean_UML_MultiplicityElement_isUnique);
	
	uML_MultiplicityElement_lower->setName("lower");
	uML_MultiplicityElement_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_lower->setLower(1);
	uML_MultiplicityElement_lower->setUpper(1);
	uML_MultiplicityElement_lower->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_MultiplicityElement_lower->setDefaultValue(uML_MultiplicityElement_lower_defaultValue_LiteralInteger_UML_MultiplicityElement_lower);
	
	uML_MultiplicityElement_lowerValue->setName("lowerValue");
	uML_MultiplicityElement_lowerValue->setType(get_UML_ValueSpecification());
	uML_MultiplicityElement_lowerValue->setLower(0);
	uML_MultiplicityElement_lowerValue->setUpper(1);
	uML_MultiplicityElement_lowerValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_MultiplicityElement_upper->setName("upper");
	uML_MultiplicityElement_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_upper->setLower(1);
	uML_MultiplicityElement_upper->setUpper(1);
	uML_MultiplicityElement_upper->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_MultiplicityElement_upper->setDefaultValue(uML_MultiplicityElement_upper_defaultValue_LiteralUnlimitedNatural_UML_MultiplicityElement_upper);
	
	uML_MultiplicityElement_upperValue->setName("upperValue");
	uML_MultiplicityElement_upperValue->setType(get_UML_ValueSpecification());
	uML_MultiplicityElement_upperValue->setLower(0);
	uML_MultiplicityElement_upperValue->setUpper(1);
	uML_MultiplicityElement_upperValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // MultiplicityElement operations
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement->setName("compatibleWith");
	
	// parameter result
	uML_MultiplicityElement_compatibleWith_result->setName("result");
	uML_MultiplicityElement_compatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_compatibleWith_result->setLower(1);
	uML_MultiplicityElement_compatibleWith_result->setUpper(1);
	uML_MultiplicityElement_compatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter other
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other->setName("other");
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other->setType(get_UML_MultiplicityElement());
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other->setLower(1);
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other->setUpper(1);
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement->setName("includesMultiplicity");
	
	// parameter result
	uML_MultiplicityElement_includesMultiplicity_result->setName("result");
	uML_MultiplicityElement_includesMultiplicity_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_includesMultiplicity_result->setLower(1);
	uML_MultiplicityElement_includesMultiplicity_result->setUpper(1);
	uML_MultiplicityElement_includesMultiplicity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter M
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M->setName("M");
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M->setType(get_UML_MultiplicityElement());
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M->setLower(1);
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M->setUpper(1);
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural->setName("is");
	
	// parameter result
	uML_MultiplicityElement_is_result->setName("result");
	uML_MultiplicityElement_is_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_is_result->setLower(1);
	uML_MultiplicityElement_is_result->setUpper(1);
	uML_MultiplicityElement_is_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter lowerbound
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound->setName("lowerbound");
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound->setLower(1);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound->setUpper(1);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter upperbound
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound->setName("upperbound");
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound->setLower(1);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound->setUpper(1);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_MultiplicityElement_isMultivalued__->setName("isMultivalued");
	
	// parameter result
	uML_MultiplicityElement_isMultivalued_result->setName("result");
	uML_MultiplicityElement_isMultivalued_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_isMultivalued_result->setLower(1);
	uML_MultiplicityElement_isMultivalued_result->setUpper(1);
	uML_MultiplicityElement_isMultivalued_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MultiplicityElement_lower__->setName("lower");
	
	// parameter result
	uML_MultiplicityElement_lower_result->setName("result");
	uML_MultiplicityElement_lower_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_lower_result->setLower(0);
	uML_MultiplicityElement_lower_result->setUpper(1);
	uML_MultiplicityElement_lower_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MultiplicityElement_lowerBound__->setName("lowerBound");
	
	// parameter result
	uML_MultiplicityElement_lowerBound_result->setName("result");
	uML_MultiplicityElement_lowerBound_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_lowerBound_result->setLower(1);
	uML_MultiplicityElement_lowerBound_result->setUpper(1);
	uML_MultiplicityElement_lowerBound_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MultiplicityElement_setLower_Integer_Integer->setName("setLower");
	
	// parameter newLower
	uML_MultiplicityElement_setLower_Integer_Integer_newLower->setName("newLower");
	uML_MultiplicityElement_setLower_Integer_Integer_newLower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_setLower_Integer_Integer_newLower->setLower(1);
	uML_MultiplicityElement_setLower_Integer_Integer_newLower->setUpper(1);
	uML_MultiplicityElement_setLower_Integer_Integer_newLower->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural->setName("setUpper");
	
	// parameter newUpper
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setName("newUpper");
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setLower(1);
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setUpper(1);
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_MultiplicityElement_upper__->setName("upper");
	
	// parameter result
	uML_MultiplicityElement_upper_result->setName("result");
	uML_MultiplicityElement_upper_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_upper_result->setLower(0);
	uML_MultiplicityElement_upper_result->setUpper(1);
	uML_MultiplicityElement_upper_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_MultiplicityElement_upperBound__->setName("upperBound");
	
	// parameter result
	uML_MultiplicityElement_upperBound_result->setName("result");
	uML_MultiplicityElement_upperBound_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_upperBound_result->setLower(1);
	uML_MultiplicityElement_upperBound_result->setUpper(1);
	uML_MultiplicityElement_upperBound_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class NamedElement
	uML_NamedElement->setName("NamedElement");
	uML_NamedElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_NamedElement());
	gen->setGeneral(get_UML_Element());
	
    // NamedElement attributes
	uML_NamedElement_clientDependency->setName("clientDependency");
	uML_NamedElement_clientDependency->setType(get_UML_Dependency());
	uML_NamedElement_clientDependency->setLower(0);
	uML_NamedElement_clientDependency->setUpper(-1);
	uML_NamedElement_clientDependency->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_NamedElement_name->setName("name");
	uML_NamedElement_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_name->setLower(0);
	uML_NamedElement_name->setUpper(1);
	uML_NamedElement_name->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_NamedElement_nameExpression->setName("nameExpression");
	uML_NamedElement_nameExpression->setType(get_UML_StringExpression());
	uML_NamedElement_nameExpression->setLower(0);
	uML_NamedElement_nameExpression->setUpper(1);
	uML_NamedElement_nameExpression->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_NamedElement_namespace->setName("namespace");
	uML_NamedElement_namespace->setType(get_UML_Namespace());
	uML_NamedElement_namespace->setLower(0);
	uML_NamedElement_namespace->setUpper(1);
	uML_NamedElement_namespace->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_NamedElement_qualifiedName->setName("qualifiedName");
	uML_NamedElement_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_qualifiedName->setLower(0);
	uML_NamedElement_qualifiedName->setUpper(1);
	uML_NamedElement_qualifiedName->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_NamedElement_visibility->setName("visibility");
	uML_NamedElement_visibility->setType(get_UML_VisibilityKind());
	uML_NamedElement_visibility->setLower(0);
	uML_NamedElement_visibility->setUpper(1);
	uML_NamedElement_visibility->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // NamedElement operations
	uML_NamedElement_allNamespaces__->setName("allNamespaces");
	
	// parameter result
	uML_NamedElement_allNamespaces_result->setName("result");
	uML_NamedElement_allNamespaces_result->setType(get_UML_Namespace());
	uML_NamedElement_allNamespaces_result->setLower(0);
	uML_NamedElement_allNamespaces_result->setUpper(-1);
	uML_NamedElement_allNamespaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_NamedElement_allOwningPackages__->setName("allOwningPackages");
	
	// parameter result
	uML_NamedElement_allOwningPackages_result->setName("result");
	uML_NamedElement_allOwningPackages_result->setType(get_UML_Package());
	uML_NamedElement_allOwningPackages_result->setLower(0);
	uML_NamedElement_allOwningPackages_result->setUpper(-1);
	uML_NamedElement_allOwningPackages_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_NamedElement_clientDependency__->setName("clientDependency");
	
	// parameter result
	uML_NamedElement_clientDependency_result->setName("result");
	uML_NamedElement_clientDependency_result->setType(get_UML_Dependency());
	uML_NamedElement_clientDependency_result->setLower(0);
	uML_NamedElement_clientDependency_result->setUpper(-1);
	uML_NamedElement_clientDependency_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_NamedElement_createDependency_NamedElement_NamedElement->setName("createDependency");
	
	// parameter 
	uML_NamedElement_createDependency_NamedElement_NamedElementreturn->setName("");
	uML_NamedElement_createDependency_NamedElement_NamedElementreturn->setType(get_UML_Dependency());
	uML_NamedElement_createDependency_NamedElement_NamedElementreturn->setLower(1);
	uML_NamedElement_createDependency_NamedElement_NamedElementreturn->setUpper(1);
	uML_NamedElement_createDependency_NamedElement_NamedElementreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter supplier
	
	uML_NamedElement_createDependency_NamedElement_NamedElement_supplier->setName("supplier");
	
	uML_NamedElement_createDependency_NamedElement_NamedElement_supplier->setType(get_UML_NamedElement());
	
	uML_NamedElement_createDependency_NamedElement_NamedElement_supplier->setLower(1);
	
	uML_NamedElement_createDependency_NamedElement_NamedElement_supplier->setUpper(1);
	
	uML_NamedElement_createDependency_NamedElement_NamedElement_supplier->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_NamedElement_createUsage_NamedElement_NamedElement->setName("createUsage");
	
	// parameter 
	uML_NamedElement_createUsage_NamedElement_NamedElementreturn->setName("");
	uML_NamedElement_createUsage_NamedElement_NamedElementreturn->setType(get_UML_Usage());
	uML_NamedElement_createUsage_NamedElement_NamedElementreturn->setLower(1);
	uML_NamedElement_createUsage_NamedElement_NamedElementreturn->setUpper(1);
	uML_NamedElement_createUsage_NamedElement_NamedElementreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter supplier
	
	uML_NamedElement_createUsage_NamedElement_NamedElement_supplier->setName("supplier");
	
	uML_NamedElement_createUsage_NamedElement_NamedElement_supplier->setType(get_UML_NamedElement());
	
	uML_NamedElement_createUsage_NamedElement_NamedElement_supplier->setLower(1);
	
	uML_NamedElement_createUsage_NamedElement_NamedElement_supplier->setUpper(1);
	
	uML_NamedElement_createUsage_NamedElement_NamedElement_supplier->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_NamedElement_getLabel__->setName("getLabel");
	
	// parameter 
	uML_NamedElement_getLabel__return->setName("");
	uML_NamedElement_getLabel__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_getLabel__return->setLower(0);
	uML_NamedElement_getLabel__return->setUpper(1);
	uML_NamedElement_getLabel__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_NamedElement_getLabel_Boolean_Boolean->setName("getLabel");
	
	// parameter 
	uML_NamedElement_getLabel_Boolean_Booleanreturn->setName("");
	uML_NamedElement_getLabel_Boolean_Booleanreturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_getLabel_Boolean_Booleanreturn->setLower(0);
	uML_NamedElement_getLabel_Boolean_Booleanreturn->setUpper(1);
	uML_NamedElement_getLabel_Boolean_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter localize
	
	uML_NamedElement_getLabel_Boolean_Boolean_localize->setName("localize");
	
	uML_NamedElement_getLabel_Boolean_Boolean_localize->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_NamedElement_getLabel_Boolean_Boolean_localize->setLower(1);
	
	uML_NamedElement_getLabel_Boolean_Boolean_localize->setUpper(1);
	
	uML_NamedElement_getLabel_Boolean_Boolean_localize->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace->setName("isDistinguishableFrom");
	
	// parameter result
	uML_NamedElement_isDistinguishableFrom_result->setName("result");
	uML_NamedElement_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_NamedElement_isDistinguishableFrom_result->setLower(1);
	uML_NamedElement_isDistinguishableFrom_result->setUpper(1);
	uML_NamedElement_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter n
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setName("n");
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setType(get_UML_NamedElement());
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setLower(1);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setUpper(1);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter ns
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setName("ns");
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setType(get_UML_Namespace());
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setLower(1);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setUpper(1);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_NamedElement_namespace__->setName("namespace");
	
	// parameter result
	uML_NamedElement_namespace_result->setName("result");
	uML_NamedElement_namespace_result->setType(get_UML_Namespace());
	uML_NamedElement_namespace_result->setLower(0);
	uML_NamedElement_namespace_result->setUpper(1);
	uML_NamedElement_namespace_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_NamedElement_qualifiedName__->setName("qualifiedName");
	
	// parameter result
	uML_NamedElement_qualifiedName_result->setName("result");
	uML_NamedElement_qualifiedName_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_qualifiedName_result->setLower(0);
	uML_NamedElement_qualifiedName_result->setUpper(1);
	uML_NamedElement_qualifiedName_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_NamedElement_separator__->setName("separator");
	
	// parameter result
	uML_NamedElement_separator_result->setName("result");
	uML_NamedElement_separator_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_separator_result->setLower(1);
	uML_NamedElement_separator_result->setUpper(1);
	uML_NamedElement_separator_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Namespace
	uML_Namespace->setName("Namespace");
	uML_Namespace->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Namespace());
	gen->setGeneral(get_UML_NamedElement());
	
    // Namespace attributes
	uML_Namespace_elementImport->setName("elementImport");
	uML_Namespace_elementImport->setType(get_UML_ElementImport());
	uML_Namespace_elementImport->setLower(0);
	uML_Namespace_elementImport->setUpper(-1);
	uML_Namespace_elementImport->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Namespace_importedMember->setName("importedMember");
	uML_Namespace_importedMember->setType(get_UML_PackageableElement());
	uML_Namespace_importedMember->setLower(0);
	uML_Namespace_importedMember->setUpper(-1);
	uML_Namespace_importedMember->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Namespace_member->setName("member");
	uML_Namespace_member->setType(get_UML_NamedElement());
	uML_Namespace_member->setLower(0);
	uML_Namespace_member->setUpper(-1);
	uML_Namespace_member->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Namespace_ownedMember->setName("ownedMember");
	uML_Namespace_ownedMember->setType(get_UML_NamedElement());
	uML_Namespace_ownedMember->setLower(0);
	uML_Namespace_ownedMember->setUpper(-1);
	uML_Namespace_ownedMember->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Namespace_ownedRule->setName("ownedRule");
	uML_Namespace_ownedRule->setType(get_UML_Constraint());
	uML_Namespace_ownedRule->setLower(0);
	uML_Namespace_ownedRule->setUpper(-1);
	uML_Namespace_ownedRule->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Namespace_packageImport->setName("packageImport");
	uML_Namespace_packageImport->setType(get_UML_PackageImport());
	uML_Namespace_packageImport->setLower(0);
	uML_Namespace_packageImport->setUpper(-1);
	uML_Namespace_packageImport->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Namespace operations
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind->setName("createElementImport");
	
	// parameter 
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn->setName("");
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn->setType(get_UML_ElementImport());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn->setLower(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn->setUpper(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter element
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element->setName("element");
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element->setType(get_UML_PackageableElement());
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element->setLower(1);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element->setUpper(1);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter visibility
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility->setName("visibility");
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility->setType(get_UML_VisibilityKind());
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility->setLower(1);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility->setUpper(1);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind->setName("createPackageImport");
	
	// parameter 
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn->setName("");
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn->setType(get_UML_PackageImport());
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn->setLower(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn->setUpper(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter package_
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_->setName("package_");
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_->setType(get_UML_Package());
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_->setLower(1);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_->setUpper(1);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter visibility
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility->setName("visibility");
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility->setType(get_UML_VisibilityKind());
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility->setLower(1);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility->setUpper(1);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement->setName("excludeCollisions");
	
	// parameter result
	uML_Namespace_excludeCollisions_result->setName("result");
	uML_Namespace_excludeCollisions_result->setType(get_UML_PackageableElement());
	uML_Namespace_excludeCollisions_result->setLower(0);
	uML_Namespace_excludeCollisions_result->setUpper(-1);
	uML_Namespace_excludeCollisions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter imps
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setName("imps");
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setType(get_UML_PackageableElement());
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setLower(0);
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setUpper(-1);
	
	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Namespace_getImportedElements__->setName("getImportedElements");
	
	// parameter 
	uML_Namespace_getImportedElements__return->setName("");
	uML_Namespace_getImportedElements__return->setType(get_UML_PackageableElement());
	uML_Namespace_getImportedElements__return->setLower(0);
	uML_Namespace_getImportedElements__return->setUpper(-1);
	uML_Namespace_getImportedElements__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Namespace_getImportedPackages__->setName("getImportedPackages");
	
	// parameter 
	uML_Namespace_getImportedPackages__return->setName("");
	uML_Namespace_getImportedPackages__return->setType(get_UML_Package());
	uML_Namespace_getImportedPackages__return->setLower(0);
	uML_Namespace_getImportedPackages__return->setUpper(-1);
	uML_Namespace_getImportedPackages__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Namespace_getNamesOfMember_NamedElement_NamedElement->setName("getNamesOfMember");
	
	// parameter result
	uML_Namespace_getNamesOfMember_result->setName("result");
	uML_Namespace_getNamesOfMember_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Namespace_getNamesOfMember_result->setLower(0);
	uML_Namespace_getNamesOfMember_result->setUpper(-1);
	uML_Namespace_getNamesOfMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter element
	
	uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element->setName("element");
	
	uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element->setType(get_UML_NamedElement());
	
	uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element->setLower(1);
	
	uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element->setUpper(1);
	
	uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Namespace_importMembers_PackageableElement_PackageableElement->setName("importMembers");
	
	// parameter result
	uML_Namespace_importMembers_result->setName("result");
	uML_Namespace_importMembers_result->setType(get_UML_PackageableElement());
	uML_Namespace_importMembers_result->setLower(0);
	uML_Namespace_importMembers_result->setUpper(-1);
	uML_Namespace_importMembers_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter imps
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setName("imps");
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setType(get_UML_PackageableElement());
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setLower(0);
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setUpper(-1);
	
	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Namespace_importedMember__->setName("importedMember");
	
	// parameter result
	uML_Namespace_importedMember_result->setName("result");
	uML_Namespace_importedMember_result->setType(get_UML_PackageableElement());
	uML_Namespace_importedMember_result->setLower(0);
	uML_Namespace_importedMember_result->setUpper(-1);
	uML_Namespace_importedMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Namespace_membersAreDistinguishable__->setName("membersAreDistinguishable");
	
	// parameter result
	uML_Namespace_membersAreDistinguishable_result->setName("result");
	uML_Namespace_membersAreDistinguishable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Namespace_membersAreDistinguishable_result->setLower(1);
	uML_Namespace_membersAreDistinguishable_result->setUpper(1);
	uML_Namespace_membersAreDistinguishable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Namespace_ownedMember__->setName("ownedMember");
	
	// parameter result
	uML_Namespace_ownedMember_result->setName("result");
	uML_Namespace_ownedMember_result->setType(get_UML_NamedElement());
	uML_Namespace_ownedMember_result->setLower(0);
	uML_Namespace_ownedMember_result->setUpper(-1);
	uML_Namespace_ownedMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Node
	uML_Node->setName("Node");
	uML_Node->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Node());
	gen->setGeneral(get_UML_Class());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Node());
	gen->setGeneral(get_UML_DeploymentTarget());
	
    // Node attributes
	uML_Node_nestedNode->setName("nestedNode");
	uML_Node_nestedNode->setType(get_UML_Node());
	uML_Node_nestedNode->setLower(0);
	uML_Node_nestedNode->setUpper(-1);
	uML_Node_nestedNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Node operations
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->setName("createCommunicationPath");
	
	// parameter 
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setName("");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setType(get_UML_CommunicationPath());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter end1IsNavigable
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setName("end1IsNavigable");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Aggregation
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setName("end1Aggregation");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setType(get_UML_AggregationKind());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Name
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setName("end1Name");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Lower
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setName("end1Lower");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Upper
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setName("end1Upper");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Node
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node->setName("end1Node");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node->setType(get_UML_Node());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2IsNavigable
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setName("end2IsNavigable");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Aggregation
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setName("end2Aggregation");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setType(get_UML_AggregationKind());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Name
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setName("end2Name");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Lower
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setName("end2Lower");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Upper
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setName("end2Upper");
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setLower(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setUpper(1);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Node_getCommunicationPaths__->setName("getCommunicationPaths");
	
	// parameter 
	uML_Node_getCommunicationPaths__return->setName("");
	uML_Node_getCommunicationPaths__return->setType(get_UML_CommunicationPath());
	uML_Node_getCommunicationPaths__return->setLower(0);
	uML_Node_getCommunicationPaths__return->setUpper(-1);
	uML_Node_getCommunicationPaths__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ObjectFlow
	uML_ObjectFlow->setName("ObjectFlow");
	uML_ObjectFlow->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ObjectFlow());
	gen->setGeneral(get_UML_ActivityEdge());
	
    // ObjectFlow attributes
	uML_ObjectFlow_isMulticast->setName("isMulticast");
	uML_ObjectFlow_isMulticast->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ObjectFlow_isMulticast->setLower(1);
	uML_ObjectFlow_isMulticast->setUpper(1);
	uML_ObjectFlow_isMulticast->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ObjectFlow_isMulticast->setDefaultValue(uML_ObjectFlow_isMulticast_defaultValue_LiteralBoolean_UML_ObjectFlow_isMulticast);
	
	uML_ObjectFlow_isMultireceive->setName("isMultireceive");
	uML_ObjectFlow_isMultireceive->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ObjectFlow_isMultireceive->setLower(1);
	uML_ObjectFlow_isMultireceive->setUpper(1);
	uML_ObjectFlow_isMultireceive->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ObjectFlow_isMultireceive->setDefaultValue(uML_ObjectFlow_isMultireceive_defaultValue_LiteralBoolean_UML_ObjectFlow_isMultireceive);
	
	uML_ObjectFlow_selection->setName("selection");
	uML_ObjectFlow_selection->setType(get_UML_Behavior());
	uML_ObjectFlow_selection->setLower(0);
	uML_ObjectFlow_selection->setUpper(1);
	uML_ObjectFlow_selection->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ObjectFlow_transformation->setName("transformation");
	uML_ObjectFlow_transformation->setType(get_UML_Behavior());
	uML_ObjectFlow_transformation->setLower(0);
	uML_ObjectFlow_transformation->setUpper(1);
	uML_ObjectFlow_transformation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ObjectNode
	uML_ObjectNode->setName("ObjectNode");
	uML_ObjectNode->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ObjectNode());
	gen->setGeneral(get_UML_ActivityNode());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ObjectNode());
	gen->setGeneral(get_UML_TypedElement());
	
    // ObjectNode attributes
	uML_ObjectNode_inState->setName("inState");
	uML_ObjectNode_inState->setType(get_UML_State());
	uML_ObjectNode_inState->setLower(0);
	uML_ObjectNode_inState->setUpper(-1);
	uML_ObjectNode_inState->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ObjectNode_isControlType->setName("isControlType");
	uML_ObjectNode_isControlType->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ObjectNode_isControlType->setLower(1);
	uML_ObjectNode_isControlType->setUpper(1);
	uML_ObjectNode_isControlType->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ObjectNode_isControlType->setDefaultValue(uML_ObjectNode_isControlType_defaultValue_LiteralBoolean_UML_ObjectNode_isControlType);
	
	uML_ObjectNode_ordering->setName("ordering");
	uML_ObjectNode_ordering->setType(get_UML_ObjectNodeOrderingKind());
	uML_ObjectNode_ordering->setLower(1);
	uML_ObjectNode_ordering->setUpper(1);
	uML_ObjectNode_ordering->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ObjectNode_ordering->setDefaultValue(uML_ObjectNode_ordering_defaultValue_InstanceValue);
	
	uML_ObjectNode_selection->setName("selection");
	uML_ObjectNode_selection->setType(get_UML_Behavior());
	uML_ObjectNode_selection->setLower(0);
	uML_ObjectNode_selection->setUpper(1);
	uML_ObjectNode_selection->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ObjectNode_upperBound->setName("upperBound");
	uML_ObjectNode_upperBound->setType(get_UML_ValueSpecification());
	uML_ObjectNode_upperBound->setLower(0);
	uML_ObjectNode_upperBound->setUpper(1);
	uML_ObjectNode_upperBound->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Observation
	uML_Observation->setName("Observation");
	uML_Observation->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Observation());
	gen->setGeneral(get_UML_PackageableElement());
	

    //-------------------------------------------
	//	class OccurrenceSpecification
	uML_OccurrenceSpecification->setName("OccurrenceSpecification");
	uML_OccurrenceSpecification->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_OccurrenceSpecification());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // OccurrenceSpecification attributes
	uML_OccurrenceSpecification_covered->setName("covered");
	uML_OccurrenceSpecification_covered->setType(get_UML_Lifeline());
	uML_OccurrenceSpecification_covered->setLower(1);
	uML_OccurrenceSpecification_covered->setUpper(1);
	uML_OccurrenceSpecification_covered->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OccurrenceSpecification_toAfter->setName("toAfter");
	uML_OccurrenceSpecification_toAfter->setType(get_UML_GeneralOrdering());
	uML_OccurrenceSpecification_toAfter->setLower(0);
	uML_OccurrenceSpecification_toAfter->setUpper(-1);
	uML_OccurrenceSpecification_toAfter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OccurrenceSpecification_toBefore->setName("toBefore");
	uML_OccurrenceSpecification_toBefore->setType(get_UML_GeneralOrdering());
	uML_OccurrenceSpecification_toBefore->setLower(0);
	uML_OccurrenceSpecification_toBefore->setUpper(-1);
	uML_OccurrenceSpecification_toBefore->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // OccurrenceSpecification operations
	uML_OccurrenceSpecification_getCovered__->setName("getCovered");
	
	// parameter 
	uML_OccurrenceSpecification_getCovered__return->setName("");
	uML_OccurrenceSpecification_getCovered__return->setType(get_UML_Lifeline());
	uML_OccurrenceSpecification_getCovered__return->setLower(0);
	uML_OccurrenceSpecification_getCovered__return->setUpper(1);
	uML_OccurrenceSpecification_getCovered__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline->setName("setCovered");
	
	// parameter value
	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value->setName("value");
	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value->setType(get_UML_Lifeline());
	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value->setLower(1);
	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value->setUpper(1);
	uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class OpaqueAction
	uML_OpaqueAction->setName("OpaqueAction");
	uML_OpaqueAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_OpaqueAction());
	gen->setGeneral(get_UML_Action());
	
    // OpaqueAction attributes
	uML_OpaqueAction_body->setName("body");
	uML_OpaqueAction_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueAction_body->setLower(0);
	uML_OpaqueAction_body->setUpper(-1);
	uML_OpaqueAction_body->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueAction_inputValue->setName("inputValue");
	uML_OpaqueAction_inputValue->setType(get_UML_InputPin());
	uML_OpaqueAction_inputValue->setLower(0);
	uML_OpaqueAction_inputValue->setUpper(-1);
	uML_OpaqueAction_inputValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueAction_language->setName("language");
	uML_OpaqueAction_language->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueAction_language->setLower(0);
	uML_OpaqueAction_language->setUpper(-1);
	uML_OpaqueAction_language->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueAction_outputValue->setName("outputValue");
	uML_OpaqueAction_outputValue->setType(get_UML_OutputPin());
	uML_OpaqueAction_outputValue->setLower(0);
	uML_OpaqueAction_outputValue->setUpper(-1);
	uML_OpaqueAction_outputValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class OpaqueBehavior
	uML_OpaqueBehavior->setName("OpaqueBehavior");
	uML_OpaqueBehavior->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_OpaqueBehavior());
	gen->setGeneral(get_UML_Behavior());
	
    // OpaqueBehavior attributes
	uML_OpaqueBehavior_body->setName("body");
	uML_OpaqueBehavior_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueBehavior_body->setLower(0);
	uML_OpaqueBehavior_body->setUpper(-1);
	uML_OpaqueBehavior_body->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueBehavior_language->setName("language");
	uML_OpaqueBehavior_language->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueBehavior_language->setLower(0);
	uML_OpaqueBehavior_language->setUpper(-1);
	uML_OpaqueBehavior_language->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class OpaqueExpression
	uML_OpaqueExpression->setName("OpaqueExpression");
	uML_OpaqueExpression->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_OpaqueExpression());
	gen->setGeneral(get_UML_ValueSpecification());
	
    // OpaqueExpression attributes
	uML_OpaqueExpression_behavior->setName("behavior");
	uML_OpaqueExpression_behavior->setType(get_UML_Behavior());
	uML_OpaqueExpression_behavior->setLower(0);
	uML_OpaqueExpression_behavior->setUpper(1);
	uML_OpaqueExpression_behavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueExpression_body->setName("body");
	uML_OpaqueExpression_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueExpression_body->setLower(0);
	uML_OpaqueExpression_body->setUpper(-1);
	uML_OpaqueExpression_body->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueExpression_language->setName("language");
	uML_OpaqueExpression_language->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueExpression_language->setLower(0);
	uML_OpaqueExpression_language->setUpper(-1);
	uML_OpaqueExpression_language->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_OpaqueExpression_result->setName("result");
	uML_OpaqueExpression_result->setType(get_UML_Parameter());
	uML_OpaqueExpression_result->setLower(0);
	uML_OpaqueExpression_result->setUpper(1);
	uML_OpaqueExpression_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // OpaqueExpression operations
	uML_OpaqueExpression_isIntegral__->setName("isIntegral");
	
	// parameter result
	uML_OpaqueExpression_isIntegral_result->setName("result");
	uML_OpaqueExpression_isIntegral_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_OpaqueExpression_isIntegral_result->setLower(1);
	uML_OpaqueExpression_isIntegral_result->setUpper(1);
	uML_OpaqueExpression_isIntegral_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_OpaqueExpression_isNonNegative__->setName("isNonNegative");
	
	// parameter result
	uML_OpaqueExpression_isNonNegative_result->setName("result");
	uML_OpaqueExpression_isNonNegative_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_OpaqueExpression_isNonNegative_result->setLower(1);
	uML_OpaqueExpression_isNonNegative_result->setUpper(1);
	uML_OpaqueExpression_isNonNegative_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_OpaqueExpression_isPositive__->setName("isPositive");
	
	// parameter result
	uML_OpaqueExpression_isPositive_result->setName("result");
	uML_OpaqueExpression_isPositive_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_OpaqueExpression_isPositive_result->setLower(1);
	uML_OpaqueExpression_isPositive_result->setUpper(1);
	uML_OpaqueExpression_isPositive_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_OpaqueExpression_result__->setName("result");
	
	// parameter result
	uML_OpaqueExpression_result_result->setName("result");
	uML_OpaqueExpression_result_result->setType(get_UML_Parameter());
	uML_OpaqueExpression_result_result->setLower(0);
	uML_OpaqueExpression_result_result->setUpper(1);
	uML_OpaqueExpression_result_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_OpaqueExpression_stringValue__->setName("stringValue");
	
	// parameter 
	uML_OpaqueExpression_stringValue__return->setName("");
	uML_OpaqueExpression_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueExpression_stringValue__return->setLower(1);
	uML_OpaqueExpression_stringValue__return->setUpper(1);
	uML_OpaqueExpression_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_OpaqueExpression_value__->setName("value");
	
	// parameter result
	uML_OpaqueExpression_value_result->setName("result");
	uML_OpaqueExpression_value_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_OpaqueExpression_value_result->setLower(1);
	uML_OpaqueExpression_value_result->setUpper(1);
	uML_OpaqueExpression_value_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Operation
	uML_Operation->setName("Operation");
	uML_Operation->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Operation());
	gen->setGeneral(get_UML_BehavioralFeature());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Operation());
	gen->setGeneral(get_UML_ParameterableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Operation());
	gen->setGeneral(get_UML_TemplateableElement());
	
    // Operation attributes
	uML_Operation_bodyCondition->setName("bodyCondition");
	uML_Operation_bodyCondition->setType(get_UML_Constraint());
	uML_Operation_bodyCondition->setLower(0);
	uML_Operation_bodyCondition->setUpper(1);
	uML_Operation_bodyCondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_class->setName("class");
	uML_Operation_class->setType(get_UML_Class());
	uML_Operation_class->setLower(0);
	uML_Operation_class->setUpper(1);
	uML_Operation_class->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_datatype->setName("datatype");
	uML_Operation_datatype->setType(get_UML_DataType());
	uML_Operation_datatype->setLower(0);
	uML_Operation_datatype->setUpper(1);
	uML_Operation_datatype->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_interface->setName("interface");
	uML_Operation_interface->setType(get_UML_Interface());
	uML_Operation_interface->setLower(0);
	uML_Operation_interface->setUpper(1);
	uML_Operation_interface->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_isOrdered->setName("isOrdered");
	uML_Operation_isOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isOrdered->setLower(1);
	uML_Operation_isOrdered->setUpper(1);
	uML_Operation_isOrdered->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_isQuery->setName("isQuery");
	uML_Operation_isQuery->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isQuery->setLower(1);
	uML_Operation_isQuery->setUpper(1);
	uML_Operation_isQuery->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Operation_isQuery->setDefaultValue(uML_Operation_isQuery_defaultValue_LiteralBoolean_UML_Operation_isQuery);
	
	uML_Operation_isUnique->setName("isUnique");
	uML_Operation_isUnique->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isUnique->setLower(1);
	uML_Operation_isUnique->setUpper(1);
	uML_Operation_isUnique->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Operation_isUnique->setDefaultValue(uML_Operation_isUnique_defaultValue_LiteralBoolean_UML_Operation_isUnique);
	
	uML_Operation_lower->setName("lower");
	uML_Operation_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Operation_lower->setLower(0);
	uML_Operation_lower->setUpper(1);
	uML_Operation_lower->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Operation_lower->setDefaultValue(uML_Operation_lower_defaultValue_LiteralInteger_UML_Operation_lower);
	
	uML_Operation_ownedParameter->setName("ownedParameter");
	uML_Operation_ownedParameter->setType(get_UML_Parameter());
	uML_Operation_ownedParameter->setLower(0);
	uML_Operation_ownedParameter->setUpper(-1);
	uML_Operation_ownedParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_postcondition->setName("postcondition");
	uML_Operation_postcondition->setType(get_UML_Constraint());
	uML_Operation_postcondition->setLower(0);
	uML_Operation_postcondition->setUpper(-1);
	uML_Operation_postcondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_precondition->setName("precondition");
	uML_Operation_precondition->setType(get_UML_Constraint());
	uML_Operation_precondition->setLower(0);
	uML_Operation_precondition->setUpper(-1);
	uML_Operation_precondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_raisedException->setName("raisedException");
	uML_Operation_raisedException->setType(get_UML_Type());
	uML_Operation_raisedException->setLower(0);
	uML_Operation_raisedException->setUpper(-1);
	uML_Operation_raisedException->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_redefinedOperation->setName("redefinedOperation");
	uML_Operation_redefinedOperation->setType(get_UML_Operation());
	uML_Operation_redefinedOperation->setLower(0);
	uML_Operation_redefinedOperation->setUpper(-1);
	uML_Operation_redefinedOperation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_templateParameter->setName("templateParameter");
	uML_Operation_templateParameter->setType(get_UML_OperationTemplateParameter());
	uML_Operation_templateParameter->setLower(0);
	uML_Operation_templateParameter->setUpper(1);
	uML_Operation_templateParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_type->setName("type");
	uML_Operation_type->setType(get_UML_Type());
	uML_Operation_type->setLower(0);
	uML_Operation_type->setUpper(1);
	uML_Operation_type->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Operation_upper->setName("upper");
	uML_Operation_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Operation_upper->setLower(0);
	uML_Operation_upper->setUpper(1);
	uML_Operation_upper->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Operation_upper->setDefaultValue(uML_Operation_upper_defaultValue_LiteralUnlimitedNatural_UML_Operation_upper);
	

    // Operation operations
	uML_Operation_getReturnResult__->setName("getReturnResult");
	
	// parameter 
	uML_Operation_getReturnResult__return->setName("");
	uML_Operation_getReturnResult__return->setType(get_UML_Parameter());
	uML_Operation_getReturnResult__return->setLower(0);
	uML_Operation_getReturnResult__return->setUpper(1);
	uML_Operation_getReturnResult__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_Operation_isConsistentWith_result->setName("result");
	uML_Operation_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isConsistentWith_result->setLower(1);
	uML_Operation_isConsistentWith_result->setUpper(1);
	uML_Operation_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Operation_isOrdered__->setName("isOrdered");
	
	// parameter result
	uML_Operation_isOrdered_result->setName("result");
	uML_Operation_isOrdered_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isOrdered_result->setLower(1);
	uML_Operation_isOrdered_result->setUpper(1);
	uML_Operation_isOrdered_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Operation_isUnique__->setName("isUnique");
	
	// parameter result
	uML_Operation_isUnique_result->setName("result");
	uML_Operation_isUnique_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isUnique_result->setLower(1);
	uML_Operation_isUnique_result->setUpper(1);
	uML_Operation_isUnique_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Operation_lower__->setName("lower");
	
	// parameter result
	uML_Operation_lower_result->setName("result");
	uML_Operation_lower_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Operation_lower_result->setLower(1);
	uML_Operation_lower_result->setUpper(1);
	uML_Operation_lower_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Operation_returnResult__->setName("returnResult");
	
	// parameter result
	uML_Operation_returnResult_result->setName("result");
	uML_Operation_returnResult_result->setType(get_UML_Parameter());
	uML_Operation_returnResult_result->setLower(0);
	uML_Operation_returnResult_result->setUpper(-1);
	uML_Operation_returnResult_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Operation_setIsOrdered_Boolean_Boolean->setName("setIsOrdered");
	
	// parameter newIsOrdered
	uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered->setName("newIsOrdered");
	uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered->setLower(1);
	uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered->setUpper(1);
	uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Operation_setIsUnique_Boolean_Boolean->setName("setIsUnique");
	
	// parameter newIsUnique
	uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique->setName("newIsUnique");
	uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique->setLower(1);
	uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique->setUpper(1);
	uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Operation_setLower_Integer_Integer->setName("setLower");
	
	// parameter newLower
	uML_Operation_setLower_Integer_Integer_newLower->setName("newLower");
	uML_Operation_setLower_Integer_Integer_newLower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Operation_setLower_Integer_Integer_newLower->setLower(1);
	uML_Operation_setLower_Integer_Integer_newLower->setUpper(1);
	uML_Operation_setLower_Integer_Integer_newLower->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Operation_setType_Type_Type->setName("setType");
	
	// parameter newType
	uML_Operation_setType_Type_Type_newType->setName("newType");
	uML_Operation_setType_Type_Type_newType->setType(get_UML_Type());
	uML_Operation_setType_Type_Type_newType->setLower(1);
	uML_Operation_setType_Type_Type_newType->setUpper(1);
	uML_Operation_setType_Type_Type_newType->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural->setName("setUpper");
	
	// parameter newUpper
	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setName("newUpper");
	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setLower(1);
	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setUpper(1);
	uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Operation_type__->setName("type");
	
	// parameter result
	uML_Operation_type_result->setName("result");
	uML_Operation_type_result->setType(get_UML_Type());
	uML_Operation_type_result->setLower(1);
	uML_Operation_type_result->setUpper(1);
	uML_Operation_type_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Operation_upper__->setName("upper");
	
	// parameter result
	uML_Operation_upper_result->setName("result");
	uML_Operation_upper_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Operation_upper_result->setLower(1);
	uML_Operation_upper_result->setUpper(1);
	uML_Operation_upper_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class OperationTemplateParameter
	uML_OperationTemplateParameter->setName("OperationTemplateParameter");
	uML_OperationTemplateParameter->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_OperationTemplateParameter());
	gen->setGeneral(get_UML_TemplateParameter());
	
    // OperationTemplateParameter attributes
	uML_OperationTemplateParameter_parameteredElement->setName("parameteredElement");
	uML_OperationTemplateParameter_parameteredElement->setType(get_UML_Operation());
	uML_OperationTemplateParameter_parameteredElement->setLower(1);
	uML_OperationTemplateParameter_parameteredElement->setUpper(1);
	uML_OperationTemplateParameter_parameteredElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class OutputPin
	uML_OutputPin->setName("OutputPin");
	uML_OutputPin->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_OutputPin());
	gen->setGeneral(get_UML_Pin());
	

    //-------------------------------------------
	//	class Package
	uML_Package->setName("Package");
	uML_Package->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Package());
	gen->setGeneral(get_UML_Namespace());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Package());
	gen->setGeneral(get_UML_PackageableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Package());
	gen->setGeneral(get_UML_TemplateableElement());
	
    // Package attributes
	uML_Package_URI->setName("URI");
	uML_Package_URI->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_URI->setLower(0);
	uML_Package_URI->setUpper(1);
	uML_Package_URI->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_nestedPackage->setName("nestedPackage");
	uML_Package_nestedPackage->setType(get_UML_Package());
	uML_Package_nestedPackage->setLower(0);
	uML_Package_nestedPackage->setUpper(-1);
	uML_Package_nestedPackage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_nestingPackage->setName("nestingPackage");
	uML_Package_nestingPackage->setType(get_UML_Package());
	uML_Package_nestingPackage->setLower(0);
	uML_Package_nestingPackage->setUpper(1);
	uML_Package_nestingPackage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_ownedStereotype->setName("ownedStereotype");
	uML_Package_ownedStereotype->setType(get_UML_Stereotype());
	uML_Package_ownedStereotype->setLower(0);
	uML_Package_ownedStereotype->setUpper(-1);
	uML_Package_ownedStereotype->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_ownedType->setName("ownedType");
	uML_Package_ownedType->setType(get_UML_Type());
	uML_Package_ownedType->setLower(0);
	uML_Package_ownedType->setUpper(-1);
	uML_Package_ownedType->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_packageMerge->setName("packageMerge");
	uML_Package_packageMerge->setType(get_UML_PackageMerge());
	uML_Package_packageMerge->setLower(0);
	uML_Package_packageMerge->setUpper(-1);
	uML_Package_packageMerge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_packagedElement->setName("packagedElement");
	uML_Package_packagedElement->setType(get_UML_PackageableElement());
	uML_Package_packagedElement->setLower(0);
	uML_Package_packagedElement->setUpper(-1);
	uML_Package_packagedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Package_profileApplication->setName("profileApplication");
	uML_Package_profileApplication->setType(get_UML_ProfileApplication());
	uML_Package_profileApplication->setLower(0);
	uML_Package_profileApplication->setUpper(-1);
	uML_Package_profileApplication->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Package operations
	uML_Package_allApplicableStereotypes__->setName("allApplicableStereotypes");
	
	// parameter result
	uML_Package_allApplicableStereotypes_result->setName("result");
	uML_Package_allApplicableStereotypes_result->setType(get_UML_Stereotype());
	uML_Package_allApplicableStereotypes_result->setLower(0);
	uML_Package_allApplicableStereotypes_result->setUpper(-1);
	uML_Package_allApplicableStereotypes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_applyProfile_Profile_Profile->setName("applyProfile");
	
	// parameter 
	uML_Package_applyProfile_Profile_Profilereturn->setName("");
	uML_Package_applyProfile_Profile_Profilereturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Package_applyProfile_Profile_Profilereturn->setLower(0);
	uML_Package_applyProfile_Profile_Profilereturn->setUpper(-1);
	uML_Package_applyProfile_Profile_Profilereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter profile
	
	uML_Package_applyProfile_Profile_Profile_profile->setName("profile");
	
	uML_Package_applyProfile_Profile_Profile_profile->setType(get_UML_Profile());
	
	uML_Package_applyProfile_Profile_Profile_profile->setLower(1);
	
	uML_Package_applyProfile_Profile_Profile_profile->setUpper(1);
	
	uML_Package_applyProfile_Profile_Profile_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_containingProfile__->setName("containingProfile");
	
	// parameter result
	uML_Package_containingProfile_result->setName("result");
	uML_Package_containingProfile_result->setType(get_UML_Profile());
	uML_Package_containingProfile_result->setLower(0);
	uML_Package_containingProfile_result->setUpper(1);
	uML_Package_containingProfile_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_createOwnedClass_String_Boolean_String_Boolean->setName("createOwnedClass");
	
	// parameter 
	uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn->setName("");
	uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn->setType(get_UML_Class());
	uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn->setLower(1);
	uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn->setUpper(1);
	uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_name->setName("name");
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_name->setLower(1);
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_name->setUpper(1);
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter isAbstract
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setName("isAbstract");
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setLower(1);
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setUpper(1);
	
	uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_createOwnedEnumeration_String_String->setName("createOwnedEnumeration");
	
	// parameter 
	uML_Package_createOwnedEnumeration_String_Stringreturn->setName("");
	uML_Package_createOwnedEnumeration_String_Stringreturn->setType(get_UML_Enumeration());
	uML_Package_createOwnedEnumeration_String_Stringreturn->setLower(1);
	uML_Package_createOwnedEnumeration_String_Stringreturn->setUpper(1);
	uML_Package_createOwnedEnumeration_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Package_createOwnedEnumeration_String_String_name->setName("name");
	
	uML_Package_createOwnedEnumeration_String_String_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_createOwnedEnumeration_String_String_name->setLower(1);
	
	uML_Package_createOwnedEnumeration_String_String_name->setUpper(1);
	
	uML_Package_createOwnedEnumeration_String_String_name->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_createOwnedInterface_String_String->setName("createOwnedInterface");
	
	// parameter 
	uML_Package_createOwnedInterface_String_Stringreturn->setName("");
	uML_Package_createOwnedInterface_String_Stringreturn->setType(get_UML_Interface());
	uML_Package_createOwnedInterface_String_Stringreturn->setLower(1);
	uML_Package_createOwnedInterface_String_Stringreturn->setUpper(1);
	uML_Package_createOwnedInterface_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Package_createOwnedInterface_String_String_name->setName("name");
	
	uML_Package_createOwnedInterface_String_String_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_createOwnedInterface_String_String_name->setLower(1);
	
	uML_Package_createOwnedInterface_String_String_name->setUpper(1);
	
	uML_Package_createOwnedInterface_String_String_name->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_createOwnedPrimitiveType_String_String->setName("createOwnedPrimitiveType");
	
	// parameter 
	uML_Package_createOwnedPrimitiveType_String_Stringreturn->setName("");
	uML_Package_createOwnedPrimitiveType_String_Stringreturn->setType(get_UML_PrimitiveType());
	uML_Package_createOwnedPrimitiveType_String_Stringreturn->setLower(1);
	uML_Package_createOwnedPrimitiveType_String_Stringreturn->setUpper(1);
	uML_Package_createOwnedPrimitiveType_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Package_createOwnedPrimitiveType_String_String_name->setName("name");
	
	uML_Package_createOwnedPrimitiveType_String_String_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_createOwnedPrimitiveType_String_String_name->setLower(1);
	
	uML_Package_createOwnedPrimitiveType_String_String_name->setUpper(1);
	
	uML_Package_createOwnedPrimitiveType_String_String_name->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean->setName("createOwnedStereotype");
	
	// parameter 
	uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn->setName("");
	uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn->setType(get_UML_Stereotype());
	uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn->setLower(1);
	uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn->setUpper(1);
	uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name->setName("name");
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name->setLower(1);
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name->setUpper(1);
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter isAbstract
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract->setName("isAbstract");
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract->setLower(1);
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract->setUpper(1);
	
	uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_getAllAppliedProfiles__->setName("getAllAppliedProfiles");
	
	// parameter 
	uML_Package_getAllAppliedProfiles__return->setName("");
	uML_Package_getAllAppliedProfiles__return->setType(get_UML_Profile());
	uML_Package_getAllAppliedProfiles__return->setLower(0);
	uML_Package_getAllAppliedProfiles__return->setUpper(-1);
	uML_Package_getAllAppliedProfiles__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_getAllProfileApplications__->setName("getAllProfileApplications");
	
	// parameter 
	uML_Package_getAllProfileApplications__return->setName("");
	uML_Package_getAllProfileApplications__return->setType(get_UML_ProfileApplication());
	uML_Package_getAllProfileApplications__return->setLower(0);
	uML_Package_getAllProfileApplications__return->setUpper(-1);
	uML_Package_getAllProfileApplications__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_getAppliedProfile_String_String->setName("getAppliedProfile");
	
	// parameter 
	uML_Package_getAppliedProfile_String_Stringreturn->setName("");
	uML_Package_getAppliedProfile_String_Stringreturn->setType(get_UML_Profile());
	uML_Package_getAppliedProfile_String_Stringreturn->setLower(0);
	uML_Package_getAppliedProfile_String_Stringreturn->setUpper(1);
	uML_Package_getAppliedProfile_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter qualifiedName
	
	uML_Package_getAppliedProfile_String_String_qualifiedName->setName("qualifiedName");
	
	uML_Package_getAppliedProfile_String_String_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_getAppliedProfile_String_String_qualifiedName->setLower(1);
	
	uML_Package_getAppliedProfile_String_String_qualifiedName->setUpper(1);
	
	uML_Package_getAppliedProfile_String_String_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_getAppliedProfile_String_Boolean_String_Boolean->setName("getAppliedProfile");
	
	// parameter 
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setName("");
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setType(get_UML_Profile());
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setLower(0);
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setUpper(1);
	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter qualifiedName
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName->setName("qualifiedName");
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName->setLower(1);
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName->setUpper(1);
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter recurse
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse->setName("recurse");
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse->setLower(1);
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse->setUpper(1);
	
	uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_getAppliedProfiles__->setName("getAppliedProfiles");
	
	// parameter 
	uML_Package_getAppliedProfiles__return->setName("");
	uML_Package_getAppliedProfiles__return->setType(get_UML_Profile());
	uML_Package_getAppliedProfiles__return->setLower(0);
	uML_Package_getAppliedProfiles__return->setUpper(-1);
	uML_Package_getAppliedProfiles__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_getProfileApplication_Profile_Profile->setName("getProfileApplication");
	
	// parameter 
	uML_Package_getProfileApplication_Profile_Profilereturn->setName("");
	uML_Package_getProfileApplication_Profile_Profilereturn->setType(get_UML_ProfileApplication());
	uML_Package_getProfileApplication_Profile_Profilereturn->setLower(0);
	uML_Package_getProfileApplication_Profile_Profilereturn->setUpper(1);
	uML_Package_getProfileApplication_Profile_Profilereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter profile
	
	uML_Package_getProfileApplication_Profile_Profile_profile->setName("profile");
	
	uML_Package_getProfileApplication_Profile_Profile_profile->setType(get_UML_Profile());
	
	uML_Package_getProfileApplication_Profile_Profile_profile->setLower(1);
	
	uML_Package_getProfileApplication_Profile_Profile_profile->setUpper(1);
	
	uML_Package_getProfileApplication_Profile_Profile_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean->setName("getProfileApplication");
	
	// parameter 
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setName("");
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setType(get_UML_ProfileApplication());
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setLower(0);
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setUpper(1);
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter profile
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile->setName("profile");
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile->setType(get_UML_Profile());
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile->setLower(1);
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile->setUpper(1);
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter recurse
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse->setName("recurse");
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse->setLower(1);
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse->setUpper(1);
	
	uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_isModelLibrary__->setName("isModelLibrary");
	
	// parameter 
	uML_Package_isModelLibrary__return->setName("");
	uML_Package_isModelLibrary__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_isModelLibrary__return->setLower(1);
	uML_Package_isModelLibrary__return->setUpper(1);
	uML_Package_isModelLibrary__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_isProfileApplied_Profile_Profile->setName("isProfileApplied");
	
	// parameter 
	uML_Package_isProfileApplied_Profile_Profilereturn->setName("");
	uML_Package_isProfileApplied_Profile_Profilereturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_isProfileApplied_Profile_Profilereturn->setLower(1);
	uML_Package_isProfileApplied_Profile_Profilereturn->setUpper(1);
	uML_Package_isProfileApplied_Profile_Profilereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter profile
	
	uML_Package_isProfileApplied_Profile_Profile_profile->setName("profile");
	
	uML_Package_isProfileApplied_Profile_Profile_profile->setType(get_UML_Profile());
	
	uML_Package_isProfileApplied_Profile_Profile_profile->setLower(1);
	
	uML_Package_isProfileApplied_Profile_Profile_profile->setUpper(1);
	
	uML_Package_isProfileApplied_Profile_Profile_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_makesVisible_NamedElement_NamedElement->setName("makesVisible");
	
	// parameter result
	uML_Package_makesVisible_result->setName("result");
	uML_Package_makesVisible_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_makesVisible_result->setLower(1);
	uML_Package_makesVisible_result->setUpper(1);
	uML_Package_makesVisible_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter el
	
	uML_Package_makesVisible_NamedElement_NamedElement_el->setName("el");
	
	uML_Package_makesVisible_NamedElement_NamedElement_el->setType(get_UML_NamedElement());
	
	uML_Package_makesVisible_NamedElement_NamedElement_el->setLower(1);
	
	uML_Package_makesVisible_NamedElement_NamedElement_el->setUpper(1);
	
	uML_Package_makesVisible_NamedElement_NamedElement_el->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_mustBeOwned__->setName("mustBeOwned");
	
	// parameter result
	uML_Package_mustBeOwned_result->setName("result");
	uML_Package_mustBeOwned_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_mustBeOwned_result->setLower(1);
	uML_Package_mustBeOwned_result->setUpper(1);
	uML_Package_mustBeOwned_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_nestedPackage__->setName("nestedPackage");
	
	// parameter result
	uML_Package_nestedPackage_result->setName("result");
	uML_Package_nestedPackage_result->setType(get_UML_Package());
	uML_Package_nestedPackage_result->setLower(0);
	uML_Package_nestedPackage_result->setUpper(-1);
	uML_Package_nestedPackage_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_ownedStereotype__->setName("ownedStereotype");
	
	// parameter result
	uML_Package_ownedStereotype_result->setName("result");
	uML_Package_ownedStereotype_result->setType(get_UML_Stereotype());
	uML_Package_ownedStereotype_result->setLower(0);
	uML_Package_ownedStereotype_result->setUpper(-1);
	uML_Package_ownedStereotype_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_ownedType__->setName("ownedType");
	
	// parameter result
	uML_Package_ownedType_result->setName("result");
	uML_Package_ownedType_result->setType(get_UML_Type());
	uML_Package_ownedType_result->setLower(0);
	uML_Package_ownedType_result->setUpper(-1);
	uML_Package_ownedType_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Package_unapplyProfile_Profile_Profile->setName("unapplyProfile");
	
	// parameter 
	uML_Package_unapplyProfile_Profile_Profilereturn->setName("");
	uML_Package_unapplyProfile_Profile_Profilereturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Package_unapplyProfile_Profile_Profilereturn->setLower(0);
	uML_Package_unapplyProfile_Profile_Profilereturn->setUpper(-1);
	uML_Package_unapplyProfile_Profile_Profilereturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter profile
	
	uML_Package_unapplyProfile_Profile_Profile_profile->setName("profile");
	
	uML_Package_unapplyProfile_Profile_Profile_profile->setType(get_UML_Profile());
	
	uML_Package_unapplyProfile_Profile_Profile_profile->setLower(1);
	
	uML_Package_unapplyProfile_Profile_Profile_profile->setUpper(1);
	
	uML_Package_unapplyProfile_Profile_Profile_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Package_visibleMembers__->setName("visibleMembers");
	
	// parameter result
	uML_Package_visibleMembers_result->setName("result");
	uML_Package_visibleMembers_result->setType(get_UML_PackageableElement());
	uML_Package_visibleMembers_result->setLower(0);
	uML_Package_visibleMembers_result->setUpper(-1);
	uML_Package_visibleMembers_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class PackageImport
	uML_PackageImport->setName("PackageImport");
	uML_PackageImport->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_PackageImport());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // PackageImport attributes
	uML_PackageImport_importedPackage->setName("importedPackage");
	uML_PackageImport_importedPackage->setType(get_UML_Package());
	uML_PackageImport_importedPackage->setLower(1);
	uML_PackageImport_importedPackage->setUpper(1);
	uML_PackageImport_importedPackage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_PackageImport_importingNamespace->setName("importingNamespace");
	uML_PackageImport_importingNamespace->setType(get_UML_Namespace());
	uML_PackageImport_importingNamespace->setLower(1);
	uML_PackageImport_importingNamespace->setUpper(1);
	uML_PackageImport_importingNamespace->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_PackageImport_visibility->setName("visibility");
	uML_PackageImport_visibility->setType(get_UML_VisibilityKind());
	uML_PackageImport_visibility->setLower(1);
	uML_PackageImport_visibility->setUpper(1);
	uML_PackageImport_visibility->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_PackageImport_visibility->setDefaultValue(uML_PackageImport_visibility_defaultValue_InstanceValue);
	


    //-------------------------------------------
	//	class PackageMerge
	uML_PackageMerge->setName("PackageMerge");
	uML_PackageMerge->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_PackageMerge());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // PackageMerge attributes
	uML_PackageMerge_mergedPackage->setName("mergedPackage");
	uML_PackageMerge_mergedPackage->setType(get_UML_Package());
	uML_PackageMerge_mergedPackage->setLower(1);
	uML_PackageMerge_mergedPackage->setUpper(1);
	uML_PackageMerge_mergedPackage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_PackageMerge_receivingPackage->setName("receivingPackage");
	uML_PackageMerge_receivingPackage->setType(get_UML_Package());
	uML_PackageMerge_receivingPackage->setLower(1);
	uML_PackageMerge_receivingPackage->setUpper(1);
	uML_PackageMerge_receivingPackage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class PackageableElement
	uML_PackageableElement->setName("PackageableElement");
	uML_PackageableElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_PackageableElement());
	gen->setGeneral(get_UML_NamedElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_PackageableElement());
	gen->setGeneral(get_UML_ParameterableElement());
	
    // PackageableElement attributes
	uML_PackageableElement_visibility->setName("visibility");
	uML_PackageableElement_visibility->setType(get_UML_VisibilityKind());
	uML_PackageableElement_visibility->setLower(0);
	uML_PackageableElement_visibility->setUpper(1);
	uML_PackageableElement_visibility->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_PackageableElement_visibility->setDefaultValue(uML_PackageableElement_visibility_defaultValue_InstanceValue);
	


    //-------------------------------------------
	//	class Parameter
	uML_Parameter->setName("Parameter");
	uML_Parameter->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Parameter());
	gen->setGeneral(get_UML_ConnectableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Parameter());
	gen->setGeneral(get_UML_MultiplicityElement());
	
    // Parameter attributes
	uML_Parameter_default->setName("default");
	uML_Parameter_default->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_default->setLower(0);
	uML_Parameter_default->setUpper(1);
	uML_Parameter_default->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Parameter_defaultValue->setName("defaultValue");
	uML_Parameter_defaultValue->setType(get_UML_ValueSpecification());
	uML_Parameter_defaultValue->setLower(0);
	uML_Parameter_defaultValue->setUpper(1);
	uML_Parameter_defaultValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Parameter_direction->setName("direction");
	uML_Parameter_direction->setType(get_UML_ParameterDirectionKind());
	uML_Parameter_direction->setLower(1);
	uML_Parameter_direction->setUpper(1);
	uML_Parameter_direction->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Parameter_direction->setDefaultValue(uML_Parameter_direction_defaultValue_InstanceValue);
	
	uML_Parameter_effect->setName("effect");
	uML_Parameter_effect->setType(get_UML_ParameterEffectKind());
	uML_Parameter_effect->setLower(0);
	uML_Parameter_effect->setUpper(1);
	uML_Parameter_effect->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Parameter_isException->setName("isException");
	uML_Parameter_isException->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_isException->setLower(1);
	uML_Parameter_isException->setUpper(1);
	uML_Parameter_isException->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Parameter_isException->setDefaultValue(uML_Parameter_isException_defaultValue_LiteralBoolean_UML_Parameter_isException);
	
	uML_Parameter_isStream->setName("isStream");
	uML_Parameter_isStream->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_isStream->setLower(1);
	uML_Parameter_isStream->setUpper(1);
	uML_Parameter_isStream->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Parameter_isStream->setDefaultValue(uML_Parameter_isStream_defaultValue_LiteralBoolean_UML_Parameter_isStream);
	
	uML_Parameter_operation->setName("operation");
	uML_Parameter_operation->setType(get_UML_Operation());
	uML_Parameter_operation->setLower(0);
	uML_Parameter_operation->setUpper(1);
	uML_Parameter_operation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Parameter_parameterSet->setName("parameterSet");
	uML_Parameter_parameterSet->setType(get_UML_ParameterSet());
	uML_Parameter_parameterSet->setLower(0);
	uML_Parameter_parameterSet->setUpper(-1);
	uML_Parameter_parameterSet->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Parameter operations
	uML_Parameter_default__->setName("default");
	
	// parameter result
	uML_Parameter_default_result->setName("result");
	uML_Parameter_default_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_default_result->setLower(0);
	uML_Parameter_default_result->setUpper(1);
	uML_Parameter_default_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Parameter_isSetDefault__->setName("isSetDefault");
	
	// parameter 
	uML_Parameter_isSetDefault__return->setName("");
	uML_Parameter_isSetDefault__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_isSetDefault__return->setLower(1);
	uML_Parameter_isSetDefault__return->setUpper(1);
	uML_Parameter_isSetDefault__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean->setName("setBooleanDefaultValue");
	
	// parameter value
	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value->setName("value");
	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value->setLower(1);
	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value->setUpper(1);
	uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Parameter_setDefault_String_String->setName("setDefault");
	
	// parameter newDefault
	uML_Parameter_setDefault_String_String_newDefault->setName("newDefault");
	uML_Parameter_setDefault_String_String_newDefault->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_setDefault_String_String_newDefault->setLower(1);
	uML_Parameter_setDefault_String_String_newDefault->setUpper(1);
	uML_Parameter_setDefault_String_String_newDefault->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Parameter_setIntegerDefaultValue_Integer_Integer->setName("setIntegerDefaultValue");
	
	// parameter value
	uML_Parameter_setIntegerDefaultValue_Integer_Integer_value->setName("value");
	uML_Parameter_setIntegerDefaultValue_Integer_Integer_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Parameter_setIntegerDefaultValue_Integer_Integer_value->setLower(1);
	uML_Parameter_setIntegerDefaultValue_Integer_Integer_value->setUpper(1);
	uML_Parameter_setIntegerDefaultValue_Integer_Integer_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Parameter_setNullDefaultValue__->setName("setNullDefaultValue");
	
	
	

	uML_Parameter_setRealDefaultValue_Real_Real->setName("setRealDefaultValue");
	
	// parameter value
	uML_Parameter_setRealDefaultValue_Real_Real_value->setName("value");
	uML_Parameter_setRealDefaultValue_Real_Real_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_Parameter_setRealDefaultValue_Real_Real_value->setLower(1);
	uML_Parameter_setRealDefaultValue_Real_Real_value->setUpper(1);
	uML_Parameter_setRealDefaultValue_Real_Real_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Parameter_setStringDefaultValue_String_String->setName("setStringDefaultValue");
	
	// parameter value
	uML_Parameter_setStringDefaultValue_String_String_value->setName("value");
	uML_Parameter_setStringDefaultValue_String_String_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_setStringDefaultValue_String_String_value->setLower(1);
	uML_Parameter_setStringDefaultValue_String_String_value->setUpper(1);
	uML_Parameter_setStringDefaultValue_String_String_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural->setName("setUnlimitedNaturalDefaultValue");
	
	// parameter value
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setName("value");
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setLower(1);
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setUpper(1);
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Parameter_unsetDefault__->setName("unsetDefault");
	
	
	


    //-------------------------------------------
	//	class ParameterSet
	uML_ParameterSet->setName("ParameterSet");
	uML_ParameterSet->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ParameterSet());
	gen->setGeneral(get_UML_NamedElement());
	
    // ParameterSet attributes
	uML_ParameterSet_condition->setName("condition");
	uML_ParameterSet_condition->setType(get_UML_Constraint());
	uML_ParameterSet_condition->setLower(0);
	uML_ParameterSet_condition->setUpper(-1);
	uML_ParameterSet_condition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ParameterSet_parameter->setName("parameter");
	uML_ParameterSet_parameter->setType(get_UML_Parameter());
	uML_ParameterSet_parameter->setLower(1);
	uML_ParameterSet_parameter->setUpper(-1);
	uML_ParameterSet_parameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ParameterableElement
	uML_ParameterableElement->setName("ParameterableElement");
	uML_ParameterableElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ParameterableElement());
	gen->setGeneral(get_UML_Element());
	
    // ParameterableElement attributes
	uML_ParameterableElement_owningTemplateParameter->setName("owningTemplateParameter");
	uML_ParameterableElement_owningTemplateParameter->setType(get_UML_TemplateParameter());
	uML_ParameterableElement_owningTemplateParameter->setLower(0);
	uML_ParameterableElement_owningTemplateParameter->setUpper(1);
	uML_ParameterableElement_owningTemplateParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ParameterableElement_templateParameter->setName("templateParameter");
	uML_ParameterableElement_templateParameter->setType(get_UML_TemplateParameter());
	uML_ParameterableElement_templateParameter->setLower(0);
	uML_ParameterableElement_templateParameter->setUpper(1);
	uML_ParameterableElement_templateParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ParameterableElement operations
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement->setName("isCompatibleWith");
	
	// parameter result
	uML_ParameterableElement_isCompatibleWith_result->setName("result");
	uML_ParameterableElement_isCompatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ParameterableElement_isCompatibleWith_result->setLower(1);
	uML_ParameterableElement_isCompatibleWith_result->setUpper(1);
	uML_ParameterableElement_isCompatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter p
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p->setName("p");
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p->setType(get_UML_ParameterableElement());
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p->setLower(1);
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p->setUpper(1);
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_ParameterableElement_isTemplateParameter__->setName("isTemplateParameter");
	
	// parameter result
	uML_ParameterableElement_isTemplateParameter_result->setName("result");
	uML_ParameterableElement_isTemplateParameter_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ParameterableElement_isTemplateParameter_result->setLower(1);
	uML_ParameterableElement_isTemplateParameter_result->setUpper(1);
	uML_ParameterableElement_isTemplateParameter_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class PartDecomposition
	uML_PartDecomposition->setName("PartDecomposition");
	uML_PartDecomposition->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_PartDecomposition());
	gen->setGeneral(get_UML_InteractionUse());
	

    //-------------------------------------------
	//	class Pin
	uML_Pin->setName("Pin");
	uML_Pin->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Pin());
	gen->setGeneral(get_UML_MultiplicityElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Pin());
	gen->setGeneral(get_UML_ObjectNode());
	
    // Pin attributes
	uML_Pin_isControl->setName("isControl");
	uML_Pin_isControl->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Pin_isControl->setLower(1);
	uML_Pin_isControl->setUpper(1);
	uML_Pin_isControl->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Pin_isControl->setDefaultValue(uML_Pin_isControl_defaultValue_LiteralBoolean_UML_Pin_isControl);
	


    //-------------------------------------------
	//	class Port
	uML_Port->setName("Port");
	uML_Port->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Port());
	gen->setGeneral(get_UML_Property());
	
    // Port attributes
	uML_Port_isBehavior->setName("isBehavior");
	uML_Port_isBehavior->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Port_isBehavior->setLower(1);
	uML_Port_isBehavior->setUpper(1);
	uML_Port_isBehavior->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Port_isBehavior->setDefaultValue(uML_Port_isBehavior_defaultValue_LiteralBoolean_UML_Port_isBehavior);
	
	uML_Port_isConjugated->setName("isConjugated");
	uML_Port_isConjugated->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Port_isConjugated->setLower(1);
	uML_Port_isConjugated->setUpper(1);
	uML_Port_isConjugated->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Port_isConjugated->setDefaultValue(uML_Port_isConjugated_defaultValue_LiteralBoolean_UML_Port_isConjugated);
	
	uML_Port_isService->setName("isService");
	uML_Port_isService->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Port_isService->setLower(1);
	uML_Port_isService->setUpper(1);
	uML_Port_isService->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Port_isService->setDefaultValue(uML_Port_isService_defaultValue_LiteralBoolean_UML_Port_isService);
	
	uML_Port_protocol->setName("protocol");
	uML_Port_protocol->setType(get_UML_ProtocolStateMachine());
	uML_Port_protocol->setLower(0);
	uML_Port_protocol->setUpper(1);
	uML_Port_protocol->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Port_provided->setName("provided");
	uML_Port_provided->setType(get_UML_Interface());
	uML_Port_provided->setLower(0);
	uML_Port_provided->setUpper(-1);
	uML_Port_provided->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Port_redefinedPort->setName("redefinedPort");
	uML_Port_redefinedPort->setType(get_UML_Port());
	uML_Port_redefinedPort->setLower(0);
	uML_Port_redefinedPort->setUpper(-1);
	uML_Port_redefinedPort->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Port_required->setName("required");
	uML_Port_required->setType(get_UML_Interface());
	uML_Port_required->setLower(0);
	uML_Port_required->setUpper(-1);
	uML_Port_required->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Port operations
	uML_Port_basicProvided__->setName("basicProvided");
	
	// parameter result
	uML_Port_basicProvided_result->setName("result");
	uML_Port_basicProvided_result->setType(get_UML_Interface());
	uML_Port_basicProvided_result->setLower(0);
	uML_Port_basicProvided_result->setUpper(-1);
	uML_Port_basicProvided_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Port_basicRequired__->setName("basicRequired");
	
	// parameter result
	uML_Port_basicRequired_result->setName("result");
	uML_Port_basicRequired_result->setType(get_UML_Interface());
	uML_Port_basicRequired_result->setLower(0);
	uML_Port_basicRequired_result->setUpper(-1);
	uML_Port_basicRequired_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Port_provided__->setName("provided");
	
	// parameter result
	uML_Port_provided_result->setName("result");
	uML_Port_provided_result->setType(get_UML_Interface());
	uML_Port_provided_result->setLower(0);
	uML_Port_provided_result->setUpper(-1);
	uML_Port_provided_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Port_required__->setName("required");
	
	// parameter result
	uML_Port_required_result->setName("result");
	uML_Port_required_result->setType(get_UML_Interface());
	uML_Port_required_result->setLower(0);
	uML_Port_required_result->setUpper(-1);
	uML_Port_required_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class PrimitiveType
	uML_PrimitiveType->setName("PrimitiveType");
	uML_PrimitiveType->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_PrimitiveType());
	gen->setGeneral(get_UML_DataType());
	

    //-------------------------------------------
	//	class Profile
	uML_Profile->setName("Profile");
	uML_Profile->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Profile());
	gen->setGeneral(get_UML_Package());
	
    // Profile attributes
	uML_Profile_metaclassReference->setName("metaclassReference");
	uML_Profile_metaclassReference->setType(get_UML_ElementImport());
	uML_Profile_metaclassReference->setLower(0);
	uML_Profile_metaclassReference->setUpper(-1);
	uML_Profile_metaclassReference->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Profile_metamodelReference->setName("metamodelReference");
	uML_Profile_metamodelReference->setType(get_UML_PackageImport());
	uML_Profile_metamodelReference->setLower(0);
	uML_Profile_metamodelReference->setUpper(-1);
	uML_Profile_metamodelReference->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Profile operations
	uML_Profile_create_Classifier_Classifier->setName("create");
	
	// parameter 
	uML_Profile_create_Classifier_Classifierreturn->setName("");
	uML_Profile_create_Classifier_Classifierreturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Profile_create_Classifier_Classifierreturn->setLower(1);
	uML_Profile_create_Classifier_Classifierreturn->setUpper(1);
	uML_Profile_create_Classifier_Classifierreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter classifier
	
	uML_Profile_create_Classifier_Classifier_classifier->setName("classifier");
	
	uML_Profile_create_Classifier_Classifier_classifier->setType(get_UML_Classifier());
	
	uML_Profile_create_Classifier_Classifier_classifier->setLower(1);
	
	uML_Profile_create_Classifier_Classifier_classifier->setUpper(1);
	
	uML_Profile_create_Classifier_Classifier_classifier->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Profile_define__->setName("define");
	
	// parameter 
	uML_Profile_define__return->setName("");
	uML_Profile_define__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EPackage());
	uML_Profile_define__return->setLower(0);
	uML_Profile_define__return->setUpper(1);
	uML_Profile_define__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Profile_getDefinition__->setName("getDefinition");
	
	// parameter 
	uML_Profile_getDefinition__return->setName("");
	uML_Profile_getDefinition__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EPackage());
	uML_Profile_getDefinition__return->setLower(0);
	uML_Profile_getDefinition__return->setUpper(1);
	uML_Profile_getDefinition__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Profile_getDefinition_NamedElement_NamedElement->setName("getDefinition");
	
	// parameter 
	uML_Profile_getDefinition_NamedElement_NamedElementreturn->setName("");
	uML_Profile_getDefinition_NamedElement_NamedElementreturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_ENamedElement());
	uML_Profile_getDefinition_NamedElement_NamedElementreturn->setLower(0);
	uML_Profile_getDefinition_NamedElement_NamedElementreturn->setUpper(1);
	uML_Profile_getDefinition_NamedElement_NamedElementreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter namedElement
	
	uML_Profile_getDefinition_NamedElement_NamedElement_namedElement->setName("namedElement");
	
	uML_Profile_getDefinition_NamedElement_NamedElement_namedElement->setType(get_UML_NamedElement());
	
	uML_Profile_getDefinition_NamedElement_NamedElement_namedElement->setLower(1);
	
	uML_Profile_getDefinition_NamedElement_NamedElement_namedElement->setUpper(1);
	
	uML_Profile_getDefinition_NamedElement_NamedElement_namedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Profile_getOwnedExtensions_Boolean_Boolean->setName("getOwnedExtensions");
	
	// parameter 
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setName("");
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setType(get_UML_Extension());
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setLower(0);
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setUpper(-1);
	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter requiredOnly
	
	uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly->setName("requiredOnly");
	
	uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly->setLower(1);
	
	uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly->setUpper(1);
	
	uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Profile_getReferencedMetaclasses__->setName("getReferencedMetaclasses");
	
	// parameter 
	uML_Profile_getReferencedMetaclasses__return->setName("");
	uML_Profile_getReferencedMetaclasses__return->setType(get_UML_Class());
	uML_Profile_getReferencedMetaclasses__return->setLower(0);
	uML_Profile_getReferencedMetaclasses__return->setUpper(-1);
	uML_Profile_getReferencedMetaclasses__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Profile_getReferencedMetamodels__->setName("getReferencedMetamodels");
	
	// parameter 
	uML_Profile_getReferencedMetamodels__return->setName("");
	uML_Profile_getReferencedMetamodels__return->setType(get_UML_Model());
	uML_Profile_getReferencedMetamodels__return->setLower(0);
	uML_Profile_getReferencedMetamodels__return->setUpper(-1);
	uML_Profile_getReferencedMetamodels__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Profile_isDefined__->setName("isDefined");
	
	// parameter 
	uML_Profile_isDefined__return->setName("");
	uML_Profile_isDefined__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Profile_isDefined__return->setLower(1);
	uML_Profile_isDefined__return->setUpper(1);
	uML_Profile_isDefined__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ProfileApplication
	uML_ProfileApplication->setName("ProfileApplication");
	uML_ProfileApplication->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ProfileApplication());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // ProfileApplication attributes
	uML_ProfileApplication_appliedProfile->setName("appliedProfile");
	uML_ProfileApplication_appliedProfile->setType(get_UML_Profile());
	uML_ProfileApplication_appliedProfile->setLower(1);
	uML_ProfileApplication_appliedProfile->setUpper(1);
	uML_ProfileApplication_appliedProfile->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ProfileApplication_applyingPackage->setName("applyingPackage");
	uML_ProfileApplication_applyingPackage->setType(get_UML_Package());
	uML_ProfileApplication_applyingPackage->setLower(1);
	uML_ProfileApplication_applyingPackage->setUpper(1);
	uML_ProfileApplication_applyingPackage->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ProfileApplication_isStrict->setName("isStrict");
	uML_ProfileApplication_isStrict->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ProfileApplication_isStrict->setLower(1);
	uML_ProfileApplication_isStrict->setUpper(1);
	uML_ProfileApplication_isStrict->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ProfileApplication_isStrict->setDefaultValue(uML_ProfileApplication_isStrict_defaultValue_LiteralBoolean_UML_ProfileApplication_isStrict);
	

    // ProfileApplication operations
	uML_ProfileApplication_getAppliedDefinition__->setName("getAppliedDefinition");
	
	// parameter 
	uML_ProfileApplication_getAppliedDefinition__return->setName("");
	uML_ProfileApplication_getAppliedDefinition__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EPackage());
	uML_ProfileApplication_getAppliedDefinition__return->setLower(0);
	uML_ProfileApplication_getAppliedDefinition__return->setUpper(1);
	uML_ProfileApplication_getAppliedDefinition__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement->setName("getAppliedDefinition");
	
	// parameter 
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setName("");
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setType(Ecore::EcorePackage::eInstance()->get_Ecore_ENamedElement());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setLower(0);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setUpper(1);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter namedElement
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement->setName("namedElement");
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement->setType(get_UML_NamedElement());
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement->setLower(1);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement->setUpper(1);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class Property
	uML_Property->setName("Property");
	uML_Property->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Property());
	gen->setGeneral(get_UML_ConnectableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Property());
	gen->setGeneral(get_UML_DeploymentTarget());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Property());
	gen->setGeneral(get_UML_StructuralFeature());
	
    // Property attributes
	uML_Property_aggregation->setName("aggregation");
	uML_Property_aggregation->setType(get_UML_AggregationKind());
	uML_Property_aggregation->setLower(1);
	uML_Property_aggregation->setUpper(1);
	uML_Property_aggregation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Property_aggregation->setDefaultValue(uML_Property_aggregation_defaultValue_InstanceValue);
	
	uML_Property_association->setName("association");
	uML_Property_association->setType(get_UML_Association());
	uML_Property_association->setLower(0);
	uML_Property_association->setUpper(1);
	uML_Property_association->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_associationEnd->setName("associationEnd");
	uML_Property_associationEnd->setType(get_UML_Property());
	uML_Property_associationEnd->setLower(0);
	uML_Property_associationEnd->setUpper(1);
	uML_Property_associationEnd->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_class->setName("class");
	uML_Property_class->setType(get_UML_Class());
	uML_Property_class->setLower(0);
	uML_Property_class->setUpper(1);
	uML_Property_class->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_datatype->setName("datatype");
	uML_Property_datatype->setType(get_UML_DataType());
	uML_Property_datatype->setLower(0);
	uML_Property_datatype->setUpper(1);
	uML_Property_datatype->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_default->setName("default");
	uML_Property_default->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_default->setLower(0);
	uML_Property_default->setUpper(1);
	uML_Property_default->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_Property_defaultValue->setName("defaultValue");
	uML_Property_defaultValue->setType(get_UML_ValueSpecification());
	uML_Property_defaultValue->setLower(0);
	uML_Property_defaultValue->setUpper(1);
	uML_Property_defaultValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_interface->setName("interface");
	uML_Property_interface->setType(get_UML_Interface());
	uML_Property_interface->setLower(0);
	uML_Property_interface->setUpper(1);
	uML_Property_interface->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_isComposite->setName("isComposite");
	uML_Property_isComposite->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isComposite->setLower(1);
	uML_Property_isComposite->setUpper(1);
	uML_Property_isComposite->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Property_isComposite->setDefaultValue(uML_Property_isComposite_defaultValue_LiteralBoolean_UML_Property_isComposite);
	
	uML_Property_isDerived->setName("isDerived");
	uML_Property_isDerived->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isDerived->setLower(1);
	uML_Property_isDerived->setUpper(1);
	uML_Property_isDerived->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Property_isDerived->setDefaultValue(uML_Property_isDerived_defaultValue_LiteralBoolean_UML_Property_isDerived);
	
	uML_Property_isDerivedUnion->setName("isDerivedUnion");
	uML_Property_isDerivedUnion->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isDerivedUnion->setLower(1);
	uML_Property_isDerivedUnion->setUpper(1);
	uML_Property_isDerivedUnion->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Property_isDerivedUnion->setDefaultValue(uML_Property_isDerivedUnion_defaultValue_LiteralBoolean_UML_Property_isDerivedUnion);
	
	uML_Property_isID->setName("isID");
	uML_Property_isID->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isID->setLower(1);
	uML_Property_isID->setUpper(1);
	uML_Property_isID->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Property_isID->setDefaultValue(uML_Property_isID_defaultValue_LiteralBoolean_UML_Property_isID);
	
	uML_Property_opposite->setName("opposite");
	uML_Property_opposite->setType(get_UML_Property());
	uML_Property_opposite->setLower(0);
	uML_Property_opposite->setUpper(1);
	uML_Property_opposite->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_owningAssociation->setName("owningAssociation");
	uML_Property_owningAssociation->setType(get_UML_Association());
	uML_Property_owningAssociation->setLower(0);
	uML_Property_owningAssociation->setUpper(1);
	uML_Property_owningAssociation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_qualifier->setName("qualifier");
	uML_Property_qualifier->setType(get_UML_Property());
	uML_Property_qualifier->setLower(0);
	uML_Property_qualifier->setUpper(-1);
	uML_Property_qualifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_redefinedProperty->setName("redefinedProperty");
	uML_Property_redefinedProperty->setType(get_UML_Property());
	uML_Property_redefinedProperty->setLower(0);
	uML_Property_redefinedProperty->setUpper(-1);
	uML_Property_redefinedProperty->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Property_subsettedProperty->setName("subsettedProperty");
	uML_Property_subsettedProperty->setType(get_UML_Property());
	uML_Property_subsettedProperty->setLower(0);
	uML_Property_subsettedProperty->setUpper(-1);
	uML_Property_subsettedProperty->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Property operations
	uML_Property_getDefault__->setName("getDefault");
	
	// parameter result
	uML_Property_getDefault_result->setName("result");
	uML_Property_getDefault_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_getDefault_result->setLower(0);
	uML_Property_getDefault_result->setUpper(1);
	uML_Property_getDefault_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_getOtherEnd__->setName("getOtherEnd");
	
	// parameter 
	uML_Property_getOtherEnd__return->setName("");
	uML_Property_getOtherEnd__return->setType(get_UML_Property());
	uML_Property_getOtherEnd__return->setLower(0);
	uML_Property_getOtherEnd__return->setUpper(1);
	uML_Property_getOtherEnd__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_isAttribute__->setName("isAttribute");
	
	// parameter result
	uML_Property_isAttribute_result->setName("result");
	uML_Property_isAttribute_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isAttribute_result->setLower(1);
	uML_Property_isAttribute_result->setUpper(1);
	uML_Property_isAttribute_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement->setName("isCompatibleWith");
	
	// parameter result
	uML_Property_isCompatibleWith_result->setName("result");
	uML_Property_isCompatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isCompatibleWith_result->setLower(1);
	uML_Property_isCompatibleWith_result->setUpper(1);
	uML_Property_isCompatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter p
	
	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p->setName("p");
	
	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p->setType(get_UML_ParameterableElement());
	
	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p->setLower(1);
	
	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p->setUpper(1);
	
	uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_isComposite__->setName("isComposite");
	
	// parameter result
	uML_Property_isComposite_result->setName("result");
	uML_Property_isComposite_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isComposite_result->setLower(1);
	uML_Property_isComposite_result->setUpper(1);
	uML_Property_isComposite_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_Property_isConsistentWith_result->setName("result");
	uML_Property_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isConsistentWith_result->setLower(1);
	uML_Property_isConsistentWith_result->setUpper(1);
	uML_Property_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_isNavigable__->setName("isNavigable");
	
	// parameter result
	uML_Property_isNavigable_result->setName("result");
	uML_Property_isNavigable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isNavigable_result->setLower(1);
	uML_Property_isNavigable_result->setUpper(1);
	uML_Property_isNavigable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_isSetDefault__->setName("isSetDefault");
	
	// parameter 
	uML_Property_isSetDefault__return->setName("");
	uML_Property_isSetDefault__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isSetDefault__return->setLower(1);
	uML_Property_isSetDefault__return->setUpper(1);
	uML_Property_isSetDefault__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_opposite__->setName("opposite");
	
	// parameter result
	uML_Property_opposite_result->setName("result");
	uML_Property_opposite_result->setType(get_UML_Property());
	uML_Property_opposite_result->setLower(0);
	uML_Property_opposite_result->setUpper(1);
	uML_Property_opposite_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_setBooleanDefaultValue_Boolean_Boolean->setName("setBooleanDefaultValue");
	
	// parameter value
	uML_Property_setBooleanDefaultValue_Boolean_Boolean_value->setName("value");
	uML_Property_setBooleanDefaultValue_Boolean_Boolean_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_setBooleanDefaultValue_Boolean_Boolean_value->setLower(1);
	uML_Property_setBooleanDefaultValue_Boolean_Boolean_value->setUpper(1);
	uML_Property_setBooleanDefaultValue_Boolean_Boolean_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setDefault_String_String->setName("setDefault");
	
	// parameter newDefault
	uML_Property_setDefault_String_String_newDefault->setName("newDefault");
	uML_Property_setDefault_String_String_newDefault->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_setDefault_String_String_newDefault->setLower(1);
	uML_Property_setDefault_String_String_newDefault->setUpper(1);
	uML_Property_setDefault_String_String_newDefault->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setIntegerDefaultValue_Integer_Integer->setName("setIntegerDefaultValue");
	
	// parameter value
	uML_Property_setIntegerDefaultValue_Integer_Integer_value->setName("value");
	uML_Property_setIntegerDefaultValue_Integer_Integer_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Property_setIntegerDefaultValue_Integer_Integer_value->setLower(1);
	uML_Property_setIntegerDefaultValue_Integer_Integer_value->setUpper(1);
	uML_Property_setIntegerDefaultValue_Integer_Integer_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setIsComposite_Boolean_Boolean->setName("setIsComposite");
	
	// parameter newIsComposite
	uML_Property_setIsComposite_Boolean_Boolean_newIsComposite->setName("newIsComposite");
	uML_Property_setIsComposite_Boolean_Boolean_newIsComposite->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_setIsComposite_Boolean_Boolean_newIsComposite->setLower(1);
	uML_Property_setIsComposite_Boolean_Boolean_newIsComposite->setUpper(1);
	uML_Property_setIsComposite_Boolean_Boolean_newIsComposite->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setIsNavigable_Boolean_Boolean->setName("setIsNavigable");
	
	// parameter isNavigable
	uML_Property_setIsNavigable_Boolean_Boolean_isNavigable->setName("isNavigable");
	uML_Property_setIsNavigable_Boolean_Boolean_isNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_setIsNavigable_Boolean_Boolean_isNavigable->setLower(1);
	uML_Property_setIsNavigable_Boolean_Boolean_isNavigable->setUpper(1);
	uML_Property_setIsNavigable_Boolean_Boolean_isNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setNullDefaultValue__->setName("setNullDefaultValue");
	
	
	

	uML_Property_setOpposite_Property_Property->setName("setOpposite");
	
	// parameter newOpposite
	uML_Property_setOpposite_Property_Property_newOpposite->setName("newOpposite");
	uML_Property_setOpposite_Property_Property_newOpposite->setType(get_UML_Property());
	uML_Property_setOpposite_Property_Property_newOpposite->setLower(1);
	uML_Property_setOpposite_Property_Property_newOpposite->setUpper(1);
	uML_Property_setOpposite_Property_Property_newOpposite->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setRealDefaultValue_Real_Real->setName("setRealDefaultValue");
	
	// parameter value
	uML_Property_setRealDefaultValue_Real_Real_value->setName("value");
	uML_Property_setRealDefaultValue_Real_Real_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_Property_setRealDefaultValue_Real_Real_value->setLower(1);
	uML_Property_setRealDefaultValue_Real_Real_value->setUpper(1);
	uML_Property_setRealDefaultValue_Real_Real_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setStringDefaultValue_String_String->setName("setStringDefaultValue");
	
	// parameter value
	uML_Property_setStringDefaultValue_String_String_value->setName("value");
	uML_Property_setStringDefaultValue_String_String_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_setStringDefaultValue_String_String_value->setLower(1);
	uML_Property_setStringDefaultValue_String_String_value->setUpper(1);
	uML_Property_setStringDefaultValue_String_String_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural->setName("setUnlimitedNaturalDefaultValue");
	
	// parameter value
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setName("value");
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setLower(1);
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setUpper(1);
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Property_subsettingContext__->setName("subsettingContext");
	
	// parameter result
	uML_Property_subsettingContext_result->setName("result");
	uML_Property_subsettingContext_result->setType(get_UML_Type());
	uML_Property_subsettingContext_result->setLower(0);
	uML_Property_subsettingContext_result->setUpper(-1);
	uML_Property_subsettingContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Property_unsetDefault__->setName("unsetDefault");
	
	
	


    //-------------------------------------------
	//	class ProtocolConformance
	uML_ProtocolConformance->setName("ProtocolConformance");
	uML_ProtocolConformance->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ProtocolConformance());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // ProtocolConformance attributes
	uML_ProtocolConformance_generalMachine->setName("generalMachine");
	uML_ProtocolConformance_generalMachine->setType(get_UML_ProtocolStateMachine());
	uML_ProtocolConformance_generalMachine->setLower(1);
	uML_ProtocolConformance_generalMachine->setUpper(1);
	uML_ProtocolConformance_generalMachine->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ProtocolConformance_specificMachine->setName("specificMachine");
	uML_ProtocolConformance_specificMachine->setType(get_UML_ProtocolStateMachine());
	uML_ProtocolConformance_specificMachine->setLower(1);
	uML_ProtocolConformance_specificMachine->setUpper(1);
	uML_ProtocolConformance_specificMachine->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ProtocolStateMachine
	uML_ProtocolStateMachine->setName("ProtocolStateMachine");
	uML_ProtocolStateMachine->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ProtocolStateMachine());
	gen->setGeneral(get_UML_StateMachine());
	
    // ProtocolStateMachine attributes
	uML_ProtocolStateMachine_conformance->setName("conformance");
	uML_ProtocolStateMachine_conformance->setType(get_UML_ProtocolConformance());
	uML_ProtocolStateMachine_conformance->setLower(0);
	uML_ProtocolStateMachine_conformance->setUpper(-1);
	uML_ProtocolStateMachine_conformance->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ProtocolTransition
	uML_ProtocolTransition->setName("ProtocolTransition");
	uML_ProtocolTransition->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ProtocolTransition());
	gen->setGeneral(get_UML_Transition());
	
    // ProtocolTransition attributes
	uML_ProtocolTransition_postCondition->setName("postCondition");
	uML_ProtocolTransition_postCondition->setType(get_UML_Constraint());
	uML_ProtocolTransition_postCondition->setLower(0);
	uML_ProtocolTransition_postCondition->setUpper(1);
	uML_ProtocolTransition_postCondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ProtocolTransition_preCondition->setName("preCondition");
	uML_ProtocolTransition_preCondition->setType(get_UML_Constraint());
	uML_ProtocolTransition_preCondition->setLower(0);
	uML_ProtocolTransition_preCondition->setUpper(1);
	uML_ProtocolTransition_preCondition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ProtocolTransition_referred->setName("referred");
	uML_ProtocolTransition_referred->setType(get_UML_Operation());
	uML_ProtocolTransition_referred->setLower(0);
	uML_ProtocolTransition_referred->setUpper(-1);
	uML_ProtocolTransition_referred->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ProtocolTransition operations
	uML_ProtocolTransition_referred__->setName("referred");
	
	// parameter result
	uML_ProtocolTransition_referred_result->setName("result");
	uML_ProtocolTransition_referred_result->setType(get_UML_Operation());
	uML_ProtocolTransition_referred_result->setLower(0);
	uML_ProtocolTransition_referred_result->setUpper(-1);
	uML_ProtocolTransition_referred_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Pseudostate
	uML_Pseudostate->setName("Pseudostate");
	uML_Pseudostate->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Pseudostate());
	gen->setGeneral(get_UML_Vertex());
	
    // Pseudostate attributes
	uML_Pseudostate_kind->setName("kind");
	uML_Pseudostate_kind->setType(get_UML_PseudostateKind());
	uML_Pseudostate_kind->setLower(1);
	uML_Pseudostate_kind->setUpper(1);
	uML_Pseudostate_kind->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Pseudostate_kind->setDefaultValue(uML_Pseudostate_kind_defaultValue_InstanceValue);
	
	uML_Pseudostate_state->setName("state");
	uML_Pseudostate_state->setType(get_UML_State());
	uML_Pseudostate_state->setLower(0);
	uML_Pseudostate_state->setUpper(1);
	uML_Pseudostate_state->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Pseudostate_stateMachine->setName("stateMachine");
	uML_Pseudostate_stateMachine->setType(get_UML_StateMachine());
	uML_Pseudostate_stateMachine->setLower(0);
	uML_Pseudostate_stateMachine->setUpper(1);
	uML_Pseudostate_stateMachine->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class QualifierValue
	uML_QualifierValue->setName("QualifierValue");
	uML_QualifierValue->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_QualifierValue());
	gen->setGeneral(get_UML_Element());
	
    // QualifierValue attributes
	uML_QualifierValue_qualifier->setName("qualifier");
	uML_QualifierValue_qualifier->setType(get_UML_Property());
	uML_QualifierValue_qualifier->setLower(1);
	uML_QualifierValue_qualifier->setUpper(1);
	uML_QualifierValue_qualifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_QualifierValue_value->setName("value");
	uML_QualifierValue_value->setType(get_UML_InputPin());
	uML_QualifierValue_value->setLower(1);
	uML_QualifierValue_value->setUpper(1);
	uML_QualifierValue_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class RaiseExceptionAction
	uML_RaiseExceptionAction->setName("RaiseExceptionAction");
	uML_RaiseExceptionAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_RaiseExceptionAction());
	gen->setGeneral(get_UML_Action());
	
    // RaiseExceptionAction attributes
	uML_RaiseExceptionAction_exception->setName("exception");
	uML_RaiseExceptionAction_exception->setType(get_UML_InputPin());
	uML_RaiseExceptionAction_exception->setLower(1);
	uML_RaiseExceptionAction_exception->setUpper(1);
	uML_RaiseExceptionAction_exception->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadExtentAction
	uML_ReadExtentAction->setName("ReadExtentAction");
	uML_ReadExtentAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadExtentAction());
	gen->setGeneral(get_UML_Action());
	
    // ReadExtentAction attributes
	uML_ReadExtentAction_classifier->setName("classifier");
	uML_ReadExtentAction_classifier->setType(get_UML_Classifier());
	uML_ReadExtentAction_classifier->setLower(1);
	uML_ReadExtentAction_classifier->setUpper(1);
	uML_ReadExtentAction_classifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadExtentAction_result->setName("result");
	uML_ReadExtentAction_result->setType(get_UML_OutputPin());
	uML_ReadExtentAction_result->setLower(1);
	uML_ReadExtentAction_result->setUpper(1);
	uML_ReadExtentAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadIsClassifiedObjectAction
	uML_ReadIsClassifiedObjectAction->setName("ReadIsClassifiedObjectAction");
	uML_ReadIsClassifiedObjectAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadIsClassifiedObjectAction());
	gen->setGeneral(get_UML_Action());
	
    // ReadIsClassifiedObjectAction attributes
	uML_ReadIsClassifiedObjectAction_classifier->setName("classifier");
	uML_ReadIsClassifiedObjectAction_classifier->setType(get_UML_Classifier());
	uML_ReadIsClassifiedObjectAction_classifier->setLower(1);
	uML_ReadIsClassifiedObjectAction_classifier->setUpper(1);
	uML_ReadIsClassifiedObjectAction_classifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadIsClassifiedObjectAction_isDirect->setName("isDirect");
	uML_ReadIsClassifiedObjectAction_isDirect->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ReadIsClassifiedObjectAction_isDirect->setLower(1);
	uML_ReadIsClassifiedObjectAction_isDirect->setUpper(1);
	uML_ReadIsClassifiedObjectAction_isDirect->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ReadIsClassifiedObjectAction_isDirect->setDefaultValue(uML_ReadIsClassifiedObjectAction_isDirect_defaultValue_LiteralBoolean_UML_ReadIsClassifiedObjectAction_isDirect);
	
	uML_ReadIsClassifiedObjectAction_object->setName("object");
	uML_ReadIsClassifiedObjectAction_object->setType(get_UML_InputPin());
	uML_ReadIsClassifiedObjectAction_object->setLower(1);
	uML_ReadIsClassifiedObjectAction_object->setUpper(1);
	uML_ReadIsClassifiedObjectAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadIsClassifiedObjectAction_result->setName("result");
	uML_ReadIsClassifiedObjectAction_result->setType(get_UML_OutputPin());
	uML_ReadIsClassifiedObjectAction_result->setLower(1);
	uML_ReadIsClassifiedObjectAction_result->setUpper(1);
	uML_ReadIsClassifiedObjectAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadLinkAction
	uML_ReadLinkAction->setName("ReadLinkAction");
	uML_ReadLinkAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadLinkAction());
	gen->setGeneral(get_UML_LinkAction());
	
    // ReadLinkAction attributes
	uML_ReadLinkAction_result->setName("result");
	uML_ReadLinkAction_result->setType(get_UML_OutputPin());
	uML_ReadLinkAction_result->setLower(1);
	uML_ReadLinkAction_result->setUpper(1);
	uML_ReadLinkAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // ReadLinkAction operations
	uML_ReadLinkAction_openEnd__->setName("openEnd");
	
	// parameter result
	uML_ReadLinkAction_openEnd_result->setName("result");
	uML_ReadLinkAction_openEnd_result->setType(get_UML_Property());
	uML_ReadLinkAction_openEnd_result->setLower(0);
	uML_ReadLinkAction_openEnd_result->setUpper(-1);
	uML_ReadLinkAction_openEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ReadLinkObjectEndAction
	uML_ReadLinkObjectEndAction->setName("ReadLinkObjectEndAction");
	uML_ReadLinkObjectEndAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadLinkObjectEndAction());
	gen->setGeneral(get_UML_Action());
	
    // ReadLinkObjectEndAction attributes
	uML_ReadLinkObjectEndAction_end->setName("end");
	uML_ReadLinkObjectEndAction_end->setType(get_UML_Property());
	uML_ReadLinkObjectEndAction_end->setLower(1);
	uML_ReadLinkObjectEndAction_end->setUpper(1);
	uML_ReadLinkObjectEndAction_end->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadLinkObjectEndAction_object->setName("object");
	uML_ReadLinkObjectEndAction_object->setType(get_UML_InputPin());
	uML_ReadLinkObjectEndAction_object->setLower(1);
	uML_ReadLinkObjectEndAction_object->setUpper(1);
	uML_ReadLinkObjectEndAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadLinkObjectEndAction_result->setName("result");
	uML_ReadLinkObjectEndAction_result->setType(get_UML_OutputPin());
	uML_ReadLinkObjectEndAction_result->setLower(1);
	uML_ReadLinkObjectEndAction_result->setUpper(1);
	uML_ReadLinkObjectEndAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadLinkObjectEndQualifierAction
	uML_ReadLinkObjectEndQualifierAction->setName("ReadLinkObjectEndQualifierAction");
	uML_ReadLinkObjectEndQualifierAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadLinkObjectEndQualifierAction());
	gen->setGeneral(get_UML_Action());
	
    // ReadLinkObjectEndQualifierAction attributes
	uML_ReadLinkObjectEndQualifierAction_object->setName("object");
	uML_ReadLinkObjectEndQualifierAction_object->setType(get_UML_InputPin());
	uML_ReadLinkObjectEndQualifierAction_object->setLower(1);
	uML_ReadLinkObjectEndQualifierAction_object->setUpper(1);
	uML_ReadLinkObjectEndQualifierAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadLinkObjectEndQualifierAction_qualifier->setName("qualifier");
	uML_ReadLinkObjectEndQualifierAction_qualifier->setType(get_UML_Property());
	uML_ReadLinkObjectEndQualifierAction_qualifier->setLower(1);
	uML_ReadLinkObjectEndQualifierAction_qualifier->setUpper(1);
	uML_ReadLinkObjectEndQualifierAction_qualifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReadLinkObjectEndQualifierAction_result->setName("result");
	uML_ReadLinkObjectEndQualifierAction_result->setType(get_UML_OutputPin());
	uML_ReadLinkObjectEndQualifierAction_result->setLower(1);
	uML_ReadLinkObjectEndQualifierAction_result->setUpper(1);
	uML_ReadLinkObjectEndQualifierAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadSelfAction
	uML_ReadSelfAction->setName("ReadSelfAction");
	uML_ReadSelfAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadSelfAction());
	gen->setGeneral(get_UML_Action());
	
    // ReadSelfAction attributes
	uML_ReadSelfAction_result->setName("result");
	uML_ReadSelfAction_result->setType(get_UML_OutputPin());
	uML_ReadSelfAction_result->setLower(1);
	uML_ReadSelfAction_result->setUpper(1);
	uML_ReadSelfAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadStructuralFeatureAction
	uML_ReadStructuralFeatureAction->setName("ReadStructuralFeatureAction");
	uML_ReadStructuralFeatureAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadStructuralFeatureAction());
	gen->setGeneral(get_UML_StructuralFeatureAction());
	
    // ReadStructuralFeatureAction attributes
	uML_ReadStructuralFeatureAction_result->setName("result");
	uML_ReadStructuralFeatureAction_result->setType(get_UML_OutputPin());
	uML_ReadStructuralFeatureAction_result->setLower(1);
	uML_ReadStructuralFeatureAction_result->setUpper(1);
	uML_ReadStructuralFeatureAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReadVariableAction
	uML_ReadVariableAction->setName("ReadVariableAction");
	uML_ReadVariableAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReadVariableAction());
	gen->setGeneral(get_UML_VariableAction());
	
    // ReadVariableAction attributes
	uML_ReadVariableAction_result->setName("result");
	uML_ReadVariableAction_result->setType(get_UML_OutputPin());
	uML_ReadVariableAction_result->setLower(1);
	uML_ReadVariableAction_result->setUpper(1);
	uML_ReadVariableAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Realization
	uML_Realization->setName("Realization");
	uML_Realization->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Realization());
	gen->setGeneral(get_UML_Abstraction());
	

    //-------------------------------------------
	//	class Reception
	uML_Reception->setName("Reception");
	uML_Reception->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Reception());
	gen->setGeneral(get_UML_BehavioralFeature());
	
    // Reception attributes
	uML_Reception_signal->setName("signal");
	uML_Reception_signal->setType(get_UML_Signal());
	uML_Reception_signal->setLower(1);
	uML_Reception_signal->setUpper(1);
	uML_Reception_signal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReclassifyObjectAction
	uML_ReclassifyObjectAction->setName("ReclassifyObjectAction");
	uML_ReclassifyObjectAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReclassifyObjectAction());
	gen->setGeneral(get_UML_Action());
	
    // ReclassifyObjectAction attributes
	uML_ReclassifyObjectAction_isReplaceAll->setName("isReplaceAll");
	uML_ReclassifyObjectAction_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ReclassifyObjectAction_isReplaceAll->setLower(1);
	uML_ReclassifyObjectAction_isReplaceAll->setUpper(1);
	uML_ReclassifyObjectAction_isReplaceAll->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ReclassifyObjectAction_isReplaceAll->setDefaultValue(uML_ReclassifyObjectAction_isReplaceAll_defaultValue_LiteralBoolean_UML_ReclassifyObjectAction_isReplaceAll);
	
	uML_ReclassifyObjectAction_newClassifier->setName("newClassifier");
	uML_ReclassifyObjectAction_newClassifier->setType(get_UML_Classifier());
	uML_ReclassifyObjectAction_newClassifier->setLower(0);
	uML_ReclassifyObjectAction_newClassifier->setUpper(-1);
	uML_ReclassifyObjectAction_newClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReclassifyObjectAction_object->setName("object");
	uML_ReclassifyObjectAction_object->setType(get_UML_InputPin());
	uML_ReclassifyObjectAction_object->setLower(1);
	uML_ReclassifyObjectAction_object->setUpper(1);
	uML_ReclassifyObjectAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReclassifyObjectAction_oldClassifier->setName("oldClassifier");
	uML_ReclassifyObjectAction_oldClassifier->setType(get_UML_Classifier());
	uML_ReclassifyObjectAction_oldClassifier->setLower(0);
	uML_ReclassifyObjectAction_oldClassifier->setUpper(-1);
	uML_ReclassifyObjectAction_oldClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class RedefinableElement
	uML_RedefinableElement->setName("RedefinableElement");
	uML_RedefinableElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_RedefinableElement());
	gen->setGeneral(get_UML_NamedElement());
	
    // RedefinableElement attributes
	uML_RedefinableElement_isLeaf->setName("isLeaf");
	uML_RedefinableElement_isLeaf->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableElement_isLeaf->setLower(1);
	uML_RedefinableElement_isLeaf->setUpper(1);
	uML_RedefinableElement_isLeaf->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_RedefinableElement_isLeaf->setDefaultValue(uML_RedefinableElement_isLeaf_defaultValue_LiteralBoolean_UML_RedefinableElement_isLeaf);
	
	uML_RedefinableElement_redefinedElement->setName("redefinedElement");
	uML_RedefinableElement_redefinedElement->setType(get_UML_RedefinableElement());
	uML_RedefinableElement_redefinedElement->setLower(0);
	uML_RedefinableElement_redefinedElement->setUpper(-1);
	uML_RedefinableElement_redefinedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_RedefinableElement_redefinitionContext->setName("redefinitionContext");
	uML_RedefinableElement_redefinitionContext->setType(get_UML_Classifier());
	uML_RedefinableElement_redefinitionContext->setLower(0);
	uML_RedefinableElement_redefinitionContext->setUpper(-1);
	uML_RedefinableElement_redefinitionContext->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // RedefinableElement operations
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_RedefinableElement_isConsistentWith_result->setName("result");
	uML_RedefinableElement_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableElement_isConsistentWith_result->setLower(1);
	uML_RedefinableElement_isConsistentWith_result->setUpper(1);
	uML_RedefinableElement_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement->setName("isRedefinitionContextValid");
	
	// parameter result
	uML_RedefinableElement_isRedefinitionContextValid_result->setName("result");
	uML_RedefinableElement_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableElement_isRedefinitionContextValid_result->setLower(1);
	uML_RedefinableElement_isRedefinitionContextValid_result->setUpper(1);
	uML_RedefinableElement_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefinedElement
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setName("redefinedElement");
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setType(get_UML_RedefinableElement());
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setLower(1);
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setUpper(1);
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class RedefinableTemplateSignature
	uML_RedefinableTemplateSignature->setName("RedefinableTemplateSignature");
	uML_RedefinableTemplateSignature->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_RedefinableTemplateSignature());
	gen->setGeneral(get_UML_RedefinableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_RedefinableTemplateSignature());
	gen->setGeneral(get_UML_TemplateSignature());
	
    // RedefinableTemplateSignature attributes
	uML_RedefinableTemplateSignature_classifier->setName("classifier");
	uML_RedefinableTemplateSignature_classifier->setType(get_UML_Classifier());
	uML_RedefinableTemplateSignature_classifier->setLower(1);
	uML_RedefinableTemplateSignature_classifier->setUpper(1);
	uML_RedefinableTemplateSignature_classifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_RedefinableTemplateSignature_extendedSignature->setName("extendedSignature");
	uML_RedefinableTemplateSignature_extendedSignature->setType(get_UML_RedefinableTemplateSignature());
	uML_RedefinableTemplateSignature_extendedSignature->setLower(0);
	uML_RedefinableTemplateSignature_extendedSignature->setUpper(-1);
	uML_RedefinableTemplateSignature_extendedSignature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_RedefinableTemplateSignature_inheritedParameter->setName("inheritedParameter");
	uML_RedefinableTemplateSignature_inheritedParameter->setType(get_UML_TemplateParameter());
	uML_RedefinableTemplateSignature_inheritedParameter->setLower(0);
	uML_RedefinableTemplateSignature_inheritedParameter->setUpper(-1);
	uML_RedefinableTemplateSignature_inheritedParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // RedefinableTemplateSignature operations
	uML_RedefinableTemplateSignature_inheritedParameter__->setName("inheritedParameter");
	
	// parameter result
	uML_RedefinableTemplateSignature_inheritedParameter_result->setName("result");
	uML_RedefinableTemplateSignature_inheritedParameter_result->setType(get_UML_TemplateParameter());
	uML_RedefinableTemplateSignature_inheritedParameter_result->setLower(0);
	uML_RedefinableTemplateSignature_inheritedParameter_result->setUpper(-1);
	uML_RedefinableTemplateSignature_inheritedParameter_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_RedefinableTemplateSignature_isConsistentWith_result->setName("result");
	uML_RedefinableTemplateSignature_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableTemplateSignature_isConsistentWith_result->setLower(1);
	uML_RedefinableTemplateSignature_isConsistentWith_result->setUpper(1);
	uML_RedefinableTemplateSignature_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class ReduceAction
	uML_ReduceAction->setName("ReduceAction");
	uML_ReduceAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReduceAction());
	gen->setGeneral(get_UML_Action());
	
    // ReduceAction attributes
	uML_ReduceAction_collection->setName("collection");
	uML_ReduceAction_collection->setType(get_UML_InputPin());
	uML_ReduceAction_collection->setLower(1);
	uML_ReduceAction_collection->setUpper(1);
	uML_ReduceAction_collection->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReduceAction_isOrdered->setName("isOrdered");
	uML_ReduceAction_isOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ReduceAction_isOrdered->setLower(1);
	uML_ReduceAction_isOrdered->setUpper(1);
	uML_ReduceAction_isOrdered->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_ReduceAction_isOrdered->setDefaultValue(uML_ReduceAction_isOrdered_defaultValue_LiteralBoolean_UML_ReduceAction_isOrdered);
	
	uML_ReduceAction_reducer->setName("reducer");
	uML_ReduceAction_reducer->setType(get_UML_Behavior());
	uML_ReduceAction_reducer->setLower(1);
	uML_ReduceAction_reducer->setUpper(1);
	uML_ReduceAction_reducer->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReduceAction_result->setName("result");
	uML_ReduceAction_result->setType(get_UML_OutputPin());
	uML_ReduceAction_result->setLower(1);
	uML_ReduceAction_result->setUpper(1);
	uML_ReduceAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Region
	uML_Region->setName("Region");
	uML_Region->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Region());
	gen->setGeneral(get_UML_Namespace());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Region());
	gen->setGeneral(get_UML_RedefinableElement());
	
    // Region attributes
	uML_Region_extendedRegion->setName("extendedRegion");
	uML_Region_extendedRegion->setType(get_UML_Region());
	uML_Region_extendedRegion->setLower(0);
	uML_Region_extendedRegion->setUpper(1);
	uML_Region_extendedRegion->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Region_redefinitionContext->setName("redefinitionContext");
	uML_Region_redefinitionContext->setType(get_UML_Classifier());
	uML_Region_redefinitionContext->setLower(1);
	uML_Region_redefinitionContext->setUpper(1);
	uML_Region_redefinitionContext->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Region_state->setName("state");
	uML_Region_state->setType(get_UML_State());
	uML_Region_state->setLower(0);
	uML_Region_state->setUpper(1);
	uML_Region_state->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Region_stateMachine->setName("stateMachine");
	uML_Region_stateMachine->setType(get_UML_StateMachine());
	uML_Region_stateMachine->setLower(0);
	uML_Region_stateMachine->setUpper(1);
	uML_Region_stateMachine->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Region_subvertex->setName("subvertex");
	uML_Region_subvertex->setType(get_UML_Vertex());
	uML_Region_subvertex->setLower(0);
	uML_Region_subvertex->setUpper(-1);
	uML_Region_subvertex->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Region_transition->setName("transition");
	uML_Region_transition->setType(get_UML_Transition());
	uML_Region_transition->setLower(0);
	uML_Region_transition->setUpper(-1);
	uML_Region_transition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Region operations
	uML_Region_belongsToPSM__->setName("belongsToPSM");
	
	// parameter result
	uML_Region_belongsToPSM_result->setName("result");
	uML_Region_belongsToPSM_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Region_belongsToPSM_result->setLower(1);
	uML_Region_belongsToPSM_result->setUpper(1);
	uML_Region_belongsToPSM_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Region_containingStateMachine__->setName("containingStateMachine");
	
	// parameter result
	uML_Region_containingStateMachine_result->setName("result");
	uML_Region_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_Region_containingStateMachine_result->setLower(1);
	uML_Region_containingStateMachine_result->setUpper(1);
	uML_Region_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_Region_isConsistentWith_result->setName("result");
	uML_Region_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Region_isConsistentWith_result->setLower(1);
	uML_Region_isConsistentWith_result->setUpper(1);
	uML_Region_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement->setName("isRedefinitionContextValid");
	
	// parameter result
	uML_Region_isRedefinitionContextValid_result->setName("result");
	uML_Region_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Region_isRedefinitionContextValid_result->setLower(1);
	uML_Region_isRedefinitionContextValid_result->setUpper(1);
	uML_Region_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefinedElement
	
	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setName("redefinedElement");
	
	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setType(get_UML_RedefinableElement());
	
	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setLower(1);
	
	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setUpper(1);
	
	uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Region_redefinitionContext__->setName("redefinitionContext");
	
	// parameter result
	uML_Region_redefinitionContext_result->setName("result");
	uML_Region_redefinitionContext_result->setType(get_UML_Classifier());
	uML_Region_redefinitionContext_result->setLower(1);
	uML_Region_redefinitionContext_result->setUpper(1);
	uML_Region_redefinitionContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Relationship
	uML_Relationship->setName("Relationship");
	uML_Relationship->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Relationship());
	gen->setGeneral(get_UML_Element());
	
    // Relationship attributes
	uML_Relationship_relatedElement->setName("relatedElement");
	uML_Relationship_relatedElement->setType(get_UML_Element());
	uML_Relationship_relatedElement->setLower(1);
	uML_Relationship_relatedElement->setUpper(-1);
	uML_Relationship_relatedElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class RemoveStructuralFeatureValueAction
	uML_RemoveStructuralFeatureValueAction->setName("RemoveStructuralFeatureValueAction");
	uML_RemoveStructuralFeatureValueAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_RemoveStructuralFeatureValueAction());
	gen->setGeneral(get_UML_WriteStructuralFeatureAction());
	
    // RemoveStructuralFeatureValueAction attributes
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setName("isRemoveDuplicates");
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setLower(1);
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setUpper(1);
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setDefaultValue(uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates);
	
	uML_RemoveStructuralFeatureValueAction_removeAt->setName("removeAt");
	uML_RemoveStructuralFeatureValueAction_removeAt->setType(get_UML_InputPin());
	uML_RemoveStructuralFeatureValueAction_removeAt->setLower(0);
	uML_RemoveStructuralFeatureValueAction_removeAt->setUpper(1);
	uML_RemoveStructuralFeatureValueAction_removeAt->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class RemoveVariableValueAction
	uML_RemoveVariableValueAction->setName("RemoveVariableValueAction");
	uML_RemoveVariableValueAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_RemoveVariableValueAction());
	gen->setGeneral(get_UML_WriteVariableAction());
	
    // RemoveVariableValueAction attributes
	uML_RemoveVariableValueAction_isRemoveDuplicates->setName("isRemoveDuplicates");
	uML_RemoveVariableValueAction_isRemoveDuplicates->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RemoveVariableValueAction_isRemoveDuplicates->setLower(1);
	uML_RemoveVariableValueAction_isRemoveDuplicates->setUpper(1);
	uML_RemoveVariableValueAction_isRemoveDuplicates->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_RemoveVariableValueAction_isRemoveDuplicates->setDefaultValue(uML_RemoveVariableValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveVariableValueAction_isRemoveDuplicates);
	
	uML_RemoveVariableValueAction_removeAt->setName("removeAt");
	uML_RemoveVariableValueAction_removeAt->setType(get_UML_InputPin());
	uML_RemoveVariableValueAction_removeAt->setLower(0);
	uML_RemoveVariableValueAction_removeAt->setUpper(1);
	uML_RemoveVariableValueAction_removeAt->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ReplyAction
	uML_ReplyAction->setName("ReplyAction");
	uML_ReplyAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ReplyAction());
	gen->setGeneral(get_UML_Action());
	
    // ReplyAction attributes
	uML_ReplyAction_replyToCall->setName("replyToCall");
	uML_ReplyAction_replyToCall->setType(get_UML_Trigger());
	uML_ReplyAction_replyToCall->setLower(1);
	uML_ReplyAction_replyToCall->setUpper(1);
	uML_ReplyAction_replyToCall->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReplyAction_replyValue->setName("replyValue");
	uML_ReplyAction_replyValue->setType(get_UML_InputPin());
	uML_ReplyAction_replyValue->setLower(0);
	uML_ReplyAction_replyValue->setUpper(-1);
	uML_ReplyAction_replyValue->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ReplyAction_returnInformation->setName("returnInformation");
	uML_ReplyAction_returnInformation->setType(get_UML_InputPin());
	uML_ReplyAction_returnInformation->setLower(1);
	uML_ReplyAction_returnInformation->setUpper(1);
	uML_ReplyAction_returnInformation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class SendObjectAction
	uML_SendObjectAction->setName("SendObjectAction");
	uML_SendObjectAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_SendObjectAction());
	gen->setGeneral(get_UML_InvocationAction());
	
    // SendObjectAction attributes
	uML_SendObjectAction_request->setName("request");
	uML_SendObjectAction_request->setType(get_UML_InputPin());
	uML_SendObjectAction_request->setLower(1);
	uML_SendObjectAction_request->setUpper(1);
	uML_SendObjectAction_request->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_SendObjectAction_target->setName("target");
	uML_SendObjectAction_target->setType(get_UML_InputPin());
	uML_SendObjectAction_target->setLower(1);
	uML_SendObjectAction_target->setUpper(1);
	uML_SendObjectAction_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class SendSignalAction
	uML_SendSignalAction->setName("SendSignalAction");
	uML_SendSignalAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_SendSignalAction());
	gen->setGeneral(get_UML_InvocationAction());
	
    // SendSignalAction attributes
	uML_SendSignalAction_signal->setName("signal");
	uML_SendSignalAction_signal->setType(get_UML_Signal());
	uML_SendSignalAction_signal->setLower(1);
	uML_SendSignalAction_signal->setUpper(1);
	uML_SendSignalAction_signal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_SendSignalAction_target->setName("target");
	uML_SendSignalAction_target->setType(get_UML_InputPin());
	uML_SendSignalAction_target->setLower(1);
	uML_SendSignalAction_target->setUpper(1);
	uML_SendSignalAction_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class SequenceNode
	uML_SequenceNode->setName("SequenceNode");
	uML_SequenceNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_SequenceNode());
	gen->setGeneral(get_UML_StructuredActivityNode());
	
    // SequenceNode attributes
	uML_SequenceNode_executableNode->setName("executableNode");
	uML_SequenceNode_executableNode->setType(get_UML_ExecutableNode());
	uML_SequenceNode_executableNode->setLower(0);
	uML_SequenceNode_executableNode->setUpper(-1);
	uML_SequenceNode_executableNode->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Signal
	uML_Signal->setName("Signal");
	uML_Signal->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Signal());
	gen->setGeneral(get_UML_Classifier());
	
    // Signal attributes
	uML_Signal_ownedAttribute->setName("ownedAttribute");
	uML_Signal_ownedAttribute->setType(get_UML_Property());
	uML_Signal_ownedAttribute->setLower(0);
	uML_Signal_ownedAttribute->setUpper(-1);
	uML_Signal_ownedAttribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Signal operations
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	
	// parameter 
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setName("");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setType(get_UML_Property());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setName("name");
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setLower(0);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setUpper(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter type
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setName("type");
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setType(get_UML_Type());
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setLower(0);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setUpper(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter lower
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setName("lower");
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setLower(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setUpper(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter upper
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setName("upper");
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setLower(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setUpper(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class SignalEvent
	uML_SignalEvent->setName("SignalEvent");
	uML_SignalEvent->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_SignalEvent());
	gen->setGeneral(get_UML_MessageEvent());
	
    // SignalEvent attributes
	uML_SignalEvent_signal->setName("signal");
	uML_SignalEvent_signal->setType(get_UML_Signal());
	uML_SignalEvent_signal->setLower(1);
	uML_SignalEvent_signal->setUpper(1);
	uML_SignalEvent_signal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Slot
	uML_Slot->setName("Slot");
	uML_Slot->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Slot());
	gen->setGeneral(get_UML_Element());
	
    // Slot attributes
	uML_Slot_definingFeature->setName("definingFeature");
	uML_Slot_definingFeature->setType(get_UML_StructuralFeature());
	uML_Slot_definingFeature->setLower(1);
	uML_Slot_definingFeature->setUpper(1);
	uML_Slot_definingFeature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Slot_owningInstance->setName("owningInstance");
	uML_Slot_owningInstance->setType(get_UML_InstanceSpecification());
	uML_Slot_owningInstance->setLower(1);
	uML_Slot_owningInstance->setUpper(1);
	uML_Slot_owningInstance->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Slot_value->setName("value");
	uML_Slot_value->setType(get_UML_ValueSpecification());
	uML_Slot_value->setLower(0);
	uML_Slot_value->setUpper(-1);
	uML_Slot_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class StartClassifierBehaviorAction
	uML_StartClassifierBehaviorAction->setName("StartClassifierBehaviorAction");
	uML_StartClassifierBehaviorAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StartClassifierBehaviorAction());
	gen->setGeneral(get_UML_Action());
	
    // StartClassifierBehaviorAction attributes
	uML_StartClassifierBehaviorAction_object->setName("object");
	uML_StartClassifierBehaviorAction_object->setType(get_UML_InputPin());
	uML_StartClassifierBehaviorAction_object->setLower(1);
	uML_StartClassifierBehaviorAction_object->setUpper(1);
	uML_StartClassifierBehaviorAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class StartObjectBehaviorAction
	uML_StartObjectBehaviorAction->setName("StartObjectBehaviorAction");
	uML_StartObjectBehaviorAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StartObjectBehaviorAction());
	gen->setGeneral(get_UML_CallAction());
	
    // StartObjectBehaviorAction attributes
	uML_StartObjectBehaviorAction_object->setName("object");
	uML_StartObjectBehaviorAction_object->setType(get_UML_InputPin());
	uML_StartObjectBehaviorAction_object->setLower(1);
	uML_StartObjectBehaviorAction_object->setUpper(1);
	uML_StartObjectBehaviorAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // StartObjectBehaviorAction operations
	uML_StartObjectBehaviorAction_behavior__->setName("behavior");
	
	// parameter result
	uML_StartObjectBehaviorAction_behavior_result->setName("result");
	uML_StartObjectBehaviorAction_behavior_result->setType(get_UML_Behavior());
	uML_StartObjectBehaviorAction_behavior_result->setLower(0);
	uML_StartObjectBehaviorAction_behavior_result->setUpper(1);
	uML_StartObjectBehaviorAction_behavior_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StartObjectBehaviorAction_inputParameters__->setName("inputParameters");
	
	// parameter result
	uML_StartObjectBehaviorAction_inputParameters_result->setName("result");
	uML_StartObjectBehaviorAction_inputParameters_result->setType(get_UML_Parameter());
	uML_StartObjectBehaviorAction_inputParameters_result->setLower(0);
	uML_StartObjectBehaviorAction_inputParameters_result->setUpper(-1);
	uML_StartObjectBehaviorAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StartObjectBehaviorAction_outputParameters__->setName("outputParameters");
	
	// parameter result
	uML_StartObjectBehaviorAction_outputParameters_result->setName("result");
	uML_StartObjectBehaviorAction_outputParameters_result->setType(get_UML_Parameter());
	uML_StartObjectBehaviorAction_outputParameters_result->setLower(0);
	uML_StartObjectBehaviorAction_outputParameters_result->setUpper(-1);
	uML_StartObjectBehaviorAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class State
	uML_State->setName("State");
	uML_State->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_State());
	gen->setGeneral(get_UML_Namespace());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_State());
	gen->setGeneral(get_UML_RedefinableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_State());
	gen->setGeneral(get_UML_Vertex());
	
    // State attributes
	uML_State_connection->setName("connection");
	uML_State_connection->setType(get_UML_ConnectionPointReference());
	uML_State_connection->setLower(0);
	uML_State_connection->setUpper(-1);
	uML_State_connection->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_connectionPoint->setName("connectionPoint");
	uML_State_connectionPoint->setType(get_UML_Pseudostate());
	uML_State_connectionPoint->setLower(0);
	uML_State_connectionPoint->setUpper(-1);
	uML_State_connectionPoint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_deferrableTrigger->setName("deferrableTrigger");
	uML_State_deferrableTrigger->setType(get_UML_Trigger());
	uML_State_deferrableTrigger->setLower(0);
	uML_State_deferrableTrigger->setUpper(-1);
	uML_State_deferrableTrigger->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_doActivity->setName("doActivity");
	uML_State_doActivity->setType(get_UML_Behavior());
	uML_State_doActivity->setLower(0);
	uML_State_doActivity->setUpper(1);
	uML_State_doActivity->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_entry->setName("entry");
	uML_State_entry->setType(get_UML_Behavior());
	uML_State_entry->setLower(0);
	uML_State_entry->setUpper(1);
	uML_State_entry->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_exit->setName("exit");
	uML_State_exit->setType(get_UML_Behavior());
	uML_State_exit->setLower(0);
	uML_State_exit->setUpper(1);
	uML_State_exit->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_isComposite->setName("isComposite");
	uML_State_isComposite->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isComposite->setLower(1);
	uML_State_isComposite->setUpper(1);
	uML_State_isComposite->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_isOrthogonal->setName("isOrthogonal");
	uML_State_isOrthogonal->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isOrthogonal->setLower(1);
	uML_State_isOrthogonal->setUpper(1);
	uML_State_isOrthogonal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_isSimple->setName("isSimple");
	uML_State_isSimple->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSimple->setLower(1);
	uML_State_isSimple->setUpper(1);
	uML_State_isSimple->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_State_isSimple->setDefaultValue(uML_State_isSimple_defaultValue_LiteralBoolean_UML_State_isSimple);
	
	uML_State_isSubmachineState->setName("isSubmachineState");
	uML_State_isSubmachineState->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSubmachineState->setLower(1);
	uML_State_isSubmachineState->setUpper(1);
	uML_State_isSubmachineState->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_redefinedState->setName("redefinedState");
	uML_State_redefinedState->setType(get_UML_State());
	uML_State_redefinedState->setLower(0);
	uML_State_redefinedState->setUpper(1);
	uML_State_redefinedState->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_redefinitionContext->setName("redefinitionContext");
	uML_State_redefinitionContext->setType(get_UML_Classifier());
	uML_State_redefinitionContext->setLower(1);
	uML_State_redefinitionContext->setUpper(1);
	uML_State_redefinitionContext->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_region->setName("region");
	uML_State_region->setType(get_UML_Region());
	uML_State_region->setLower(0);
	uML_State_region->setUpper(-1);
	uML_State_region->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_stateInvariant->setName("stateInvariant");
	uML_State_stateInvariant->setType(get_UML_Constraint());
	uML_State_stateInvariant->setLower(0);
	uML_State_stateInvariant->setUpper(1);
	uML_State_stateInvariant->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_State_submachine->setName("submachine");
	uML_State_submachine->setType(get_UML_StateMachine());
	uML_State_submachine->setLower(0);
	uML_State_submachine->setUpper(1);
	uML_State_submachine->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // State operations
	uML_State_containingStateMachine__->setName("containingStateMachine");
	
	// parameter result
	uML_State_containingStateMachine_result->setName("result");
	uML_State_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_State_containingStateMachine_result->setLower(1);
	uML_State_containingStateMachine_result->setUpper(1);
	uML_State_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_State_isComposite__->setName("isComposite");
	
	// parameter result
	uML_State_isComposite_result->setName("result");
	uML_State_isComposite_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isComposite_result->setLower(1);
	uML_State_isComposite_result->setUpper(1);
	uML_State_isComposite_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_State_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_State_isConsistentWith_result->setName("result");
	uML_State_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isConsistentWith_result->setLower(1);
	uML_State_isConsistentWith_result->setUpper(1);
	uML_State_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_State_isOrthogonal__->setName("isOrthogonal");
	
	// parameter result
	uML_State_isOrthogonal_result->setName("result");
	uML_State_isOrthogonal_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isOrthogonal_result->setLower(1);
	uML_State_isOrthogonal_result->setUpper(1);
	uML_State_isOrthogonal_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement->setName("isRedefinitionContextValid");
	
	// parameter result
	uML_State_isRedefinitionContextValid_result->setName("result");
	uML_State_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isRedefinitionContextValid_result->setLower(1);
	uML_State_isRedefinitionContextValid_result->setUpper(1);
	uML_State_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefinedElement
	
	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setName("redefinedElement");
	
	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setType(get_UML_RedefinableElement());
	
	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setLower(1);
	
	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setUpper(1);
	
	uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_State_isSimple__->setName("isSimple");
	
	// parameter result
	uML_State_isSimple_result->setName("result");
	uML_State_isSimple_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSimple_result->setLower(1);
	uML_State_isSimple_result->setUpper(1);
	uML_State_isSimple_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_State_isSubmachineState__->setName("isSubmachineState");
	
	// parameter result
	uML_State_isSubmachineState_result->setName("result");
	uML_State_isSubmachineState_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSubmachineState_result->setLower(1);
	uML_State_isSubmachineState_result->setUpper(1);
	uML_State_isSubmachineState_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_State_redefinitionContext__->setName("redefinitionContext");
	
	// parameter result
	uML_State_redefinitionContext_result->setName("result");
	uML_State_redefinitionContext_result->setType(get_UML_Classifier());
	uML_State_redefinitionContext_result->setLower(1);
	uML_State_redefinitionContext_result->setUpper(1);
	uML_State_redefinitionContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class StateInvariant
	uML_StateInvariant->setName("StateInvariant");
	uML_StateInvariant->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StateInvariant());
	gen->setGeneral(get_UML_InteractionFragment());
	
    // StateInvariant attributes
	uML_StateInvariant_covered->setName("covered");
	uML_StateInvariant_covered->setType(get_UML_Lifeline());
	uML_StateInvariant_covered->setLower(1);
	uML_StateInvariant_covered->setUpper(1);
	uML_StateInvariant_covered->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StateInvariant_invariant->setName("invariant");
	uML_StateInvariant_invariant->setType(get_UML_Constraint());
	uML_StateInvariant_invariant->setLower(1);
	uML_StateInvariant_invariant->setUpper(1);
	uML_StateInvariant_invariant->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class StateMachine
	uML_StateMachine->setName("StateMachine");
	uML_StateMachine->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StateMachine());
	gen->setGeneral(get_UML_Behavior());
	
    // StateMachine attributes
	uML_StateMachine_connectionPoint->setName("connectionPoint");
	uML_StateMachine_connectionPoint->setType(get_UML_Pseudostate());
	uML_StateMachine_connectionPoint->setLower(0);
	uML_StateMachine_connectionPoint->setUpper(-1);
	uML_StateMachine_connectionPoint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StateMachine_extendedStateMachine->setName("extendedStateMachine");
	uML_StateMachine_extendedStateMachine->setType(get_UML_StateMachine());
	uML_StateMachine_extendedStateMachine->setLower(0);
	uML_StateMachine_extendedStateMachine->setUpper(-1);
	uML_StateMachine_extendedStateMachine->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StateMachine_region->setName("region");
	uML_StateMachine_region->setType(get_UML_Region());
	uML_StateMachine_region->setLower(1);
	uML_StateMachine_region->setUpper(-1);
	uML_StateMachine_region->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StateMachine_submachineState->setName("submachineState");
	uML_StateMachine_submachineState->setType(get_UML_State());
	uML_StateMachine_submachineState->setLower(0);
	uML_StateMachine_submachineState->setUpper(-1);
	uML_StateMachine_submachineState->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // StateMachine operations
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex->setName("LCA");
	
	// parameter result
	uML_StateMachine_LCA_result->setName("result");
	uML_StateMachine_LCA_result->setType(get_UML_Region());
	uML_StateMachine_LCA_result->setLower(1);
	uML_StateMachine_LCA_result->setUpper(1);
	uML_StateMachine_LCA_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter s1
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1->setName("s1");
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1->setType(get_UML_Vertex());
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1->setLower(1);
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1->setUpper(1);
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter s2
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2->setName("s2");
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2->setType(get_UML_Vertex());
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2->setLower(1);
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2->setUpper(1);
	
	uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex->setName("LCAState");
	
	// parameter result
	uML_StateMachine_LCAState_result->setName("result");
	uML_StateMachine_LCAState_result->setType(get_UML_State());
	uML_StateMachine_LCAState_result->setLower(1);
	uML_StateMachine_LCAState_result->setUpper(1);
	uML_StateMachine_LCAState_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter v1
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1->setName("v1");
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1->setType(get_UML_Vertex());
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1->setLower(1);
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1->setUpper(1);
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter v2
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2->setName("v2");
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2->setType(get_UML_Vertex());
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2->setLower(1);
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2->setUpper(1);
	
	uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex->setName("ancestor");
	
	// parameter result
	uML_StateMachine_ancestor_result->setName("result");
	uML_StateMachine_ancestor_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StateMachine_ancestor_result->setLower(1);
	uML_StateMachine_ancestor_result->setUpper(1);
	uML_StateMachine_ancestor_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter s1
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1->setName("s1");
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1->setType(get_UML_Vertex());
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1->setLower(1);
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1->setUpper(1);
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter s2
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2->setName("s2");
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2->setType(get_UML_Vertex());
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2->setLower(1);
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2->setUpper(1);
	
	uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_StateMachine_isConsistentWith_result->setName("result");
	uML_StateMachine_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StateMachine_isConsistentWith_result->setLower(1);
	uML_StateMachine_isConsistentWith_result->setUpper(1);
	uML_StateMachine_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement->setName("isRedefinitionContextValid");
	
	// parameter result
	uML_StateMachine_isRedefinitionContextValid_result->setName("result");
	uML_StateMachine_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StateMachine_isRedefinitionContextValid_result->setLower(1);
	uML_StateMachine_isRedefinitionContextValid_result->setUpper(1);
	uML_StateMachine_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefinedElement
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setName("redefinedElement");
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setType(get_UML_RedefinableElement());
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setLower(1);
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setUpper(1);
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class Stereotype
	uML_Stereotype->setName("Stereotype");
	uML_Stereotype->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Stereotype());
	gen->setGeneral(get_UML_Class());
	
    // Stereotype attributes
	uML_Stereotype_icon->setName("icon");
	uML_Stereotype_icon->setType(get_UML_Image());
	uML_Stereotype_icon->setLower(0);
	uML_Stereotype_icon->setUpper(-1);
	uML_Stereotype_icon->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Stereotype_profile->setName("profile");
	uML_Stereotype_profile->setType(get_UML_Profile());
	uML_Stereotype_profile->setLower(1);
	uML_Stereotype_profile->setUpper(1);
	uML_Stereotype_profile->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Stereotype operations
	uML_Stereotype_containingProfile__->setName("containingProfile");
	
	// parameter result
	uML_Stereotype_containingProfile_result->setName("result");
	uML_Stereotype_containingProfile_result->setType(get_UML_Profile());
	uML_Stereotype_containingProfile_result->setLower(1);
	uML_Stereotype_containingProfile_result->setUpper(1);
	uML_Stereotype_containingProfile_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean->setName("createExtension");
	
	// parameter 
	uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn->setName("");
	uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn->setType(get_UML_Extension());
	uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn->setLower(1);
	uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn->setUpper(1);
	uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter metaclass
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass->setName("metaclass");
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass->setType(get_UML_Class());
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass->setLower(1);
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass->setUpper(1);
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter isRequired
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired->setName("isRequired");
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired->setLower(1);
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired->setUpper(1);
	
	uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Stereotype_createIcon_String_String->setName("createIcon");
	
	// parameter 
	uML_Stereotype_createIcon_String_Stringreturn->setName("");
	uML_Stereotype_createIcon_String_Stringreturn->setType(get_UML_Image());
	uML_Stereotype_createIcon_String_Stringreturn->setLower(1);
	uML_Stereotype_createIcon_String_Stringreturn->setUpper(1);
	uML_Stereotype_createIcon_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter location
	
	uML_Stereotype_createIcon_String_String_location->setName("location");
	
	uML_Stereotype_createIcon_String_String_location->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Stereotype_createIcon_String_String_location->setLower(1);
	
	uML_Stereotype_createIcon_String_String_location->setUpper(1);
	
	uML_Stereotype_createIcon_String_String_location->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Stereotype_createIcon_String_String_String_String->setName("createIcon");
	
	// parameter 
	uML_Stereotype_createIcon_String_String_String_Stringreturn->setName("");
	uML_Stereotype_createIcon_String_String_String_Stringreturn->setType(get_UML_Image());
	uML_Stereotype_createIcon_String_String_String_Stringreturn->setLower(1);
	uML_Stereotype_createIcon_String_String_String_Stringreturn->setUpper(1);
	uML_Stereotype_createIcon_String_String_String_Stringreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter format
	
	uML_Stereotype_createIcon_String_String_String_String_format->setName("format");
	
	uML_Stereotype_createIcon_String_String_String_String_format->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Stereotype_createIcon_String_String_String_String_format->setLower(1);
	
	uML_Stereotype_createIcon_String_String_String_String_format->setUpper(1);
	
	uML_Stereotype_createIcon_String_String_String_String_format->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter content
	
	uML_Stereotype_createIcon_String_String_String_String_content->setName("content");
	
	uML_Stereotype_createIcon_String_String_String_String_content->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Stereotype_createIcon_String_String_String_String_content->setLower(1);
	
	uML_Stereotype_createIcon_String_String_String_String_content->setUpper(1);
	
	uML_Stereotype_createIcon_String_String_String_String_content->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Stereotype_getAllExtendedMetaclasses__->setName("getAllExtendedMetaclasses");
	
	// parameter 
	uML_Stereotype_getAllExtendedMetaclasses__return->setName("");
	uML_Stereotype_getAllExtendedMetaclasses__return->setType(get_UML_Class());
	uML_Stereotype_getAllExtendedMetaclasses__return->setLower(0);
	uML_Stereotype_getAllExtendedMetaclasses__return->setUpper(-1);
	uML_Stereotype_getAllExtendedMetaclasses__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Stereotype_getDefinition__->setName("getDefinition");
	
	// parameter 
	uML_Stereotype_getDefinition__return->setName("");
	uML_Stereotype_getDefinition__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	uML_Stereotype_getDefinition__return->setLower(0);
	uML_Stereotype_getDefinition__return->setUpper(1);
	uML_Stereotype_getDefinition__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Stereotype_getExtendedMetaclasses__->setName("getExtendedMetaclasses");
	
	// parameter 
	uML_Stereotype_getExtendedMetaclasses__return->setName("");
	uML_Stereotype_getExtendedMetaclasses__return->setType(get_UML_Class());
	uML_Stereotype_getExtendedMetaclasses__return->setLower(0);
	uML_Stereotype_getExtendedMetaclasses__return->setUpper(-1);
	uML_Stereotype_getExtendedMetaclasses__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Stereotype_getKeyword__->setName("getKeyword");
	
	// parameter 
	uML_Stereotype_getKeyword__return->setName("");
	uML_Stereotype_getKeyword__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_getKeyword__return->setLower(1);
	uML_Stereotype_getKeyword__return->setUpper(1);
	uML_Stereotype_getKeyword__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Stereotype_getKeyword_Boolean_Boolean->setName("getKeyword");
	
	// parameter 
	uML_Stereotype_getKeyword_Boolean_Booleanreturn->setName("");
	uML_Stereotype_getKeyword_Boolean_Booleanreturn->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_getKeyword_Boolean_Booleanreturn->setLower(1);
	uML_Stereotype_getKeyword_Boolean_Booleanreturn->setUpper(1);
	uML_Stereotype_getKeyword_Boolean_Booleanreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter localize
	
	uML_Stereotype_getKeyword_Boolean_Boolean_localize->setName("localize");
	
	uML_Stereotype_getKeyword_Boolean_Boolean_localize->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Stereotype_getKeyword_Boolean_Boolean_localize->setLower(1);
	
	uML_Stereotype_getKeyword_Boolean_Boolean_localize->setUpper(1);
	
	uML_Stereotype_getKeyword_Boolean_Boolean_localize->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Stereotype_profile__->setName("profile");
	
	// parameter result
	uML_Stereotype_profile_result->setName("result");
	uML_Stereotype_profile_result->setType(get_UML_Profile());
	uML_Stereotype_profile_result->setLower(1);
	uML_Stereotype_profile_result->setUpper(1);
	uML_Stereotype_profile_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class StringExpression
	uML_StringExpression->setName("StringExpression");
	uML_StringExpression->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StringExpression());
	gen->setGeneral(get_UML_Expression());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StringExpression());
	gen->setGeneral(get_UML_TemplateableElement());
	
    // StringExpression attributes
	uML_StringExpression_owningExpression->setName("owningExpression");
	uML_StringExpression_owningExpression->setType(get_UML_StringExpression());
	uML_StringExpression_owningExpression->setLower(0);
	uML_StringExpression_owningExpression->setUpper(1);
	uML_StringExpression_owningExpression->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StringExpression_subExpression->setName("subExpression");
	uML_StringExpression_subExpression->setType(get_UML_StringExpression());
	uML_StringExpression_subExpression->setLower(0);
	uML_StringExpression_subExpression->setUpper(-1);
	uML_StringExpression_subExpression->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // StringExpression operations
	uML_StringExpression_stringValue__->setName("stringValue");
	
	// parameter result
	uML_StringExpression_stringValue_result->setName("result");
	uML_StringExpression_stringValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_StringExpression_stringValue_result->setLower(1);
	uML_StringExpression_stringValue_result->setUpper(1);
	uML_StringExpression_stringValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class StructuralFeature
	uML_StructuralFeature->setName("StructuralFeature");
	uML_StructuralFeature->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuralFeature());
	gen->setGeneral(get_UML_Feature());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuralFeature());
	gen->setGeneral(get_UML_MultiplicityElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuralFeature());
	gen->setGeneral(get_UML_TypedElement());
	
    // StructuralFeature attributes
	uML_StructuralFeature_isReadOnly->setName("isReadOnly");
	uML_StructuralFeature_isReadOnly->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StructuralFeature_isReadOnly->setLower(1);
	uML_StructuralFeature_isReadOnly->setUpper(1);
	uML_StructuralFeature_isReadOnly->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_StructuralFeature_isReadOnly->setDefaultValue(uML_StructuralFeature_isReadOnly_defaultValue_LiteralBoolean_UML_StructuralFeature_isReadOnly);
	


    //-------------------------------------------
	//	class StructuralFeatureAction
	uML_StructuralFeatureAction->setName("StructuralFeatureAction");
	uML_StructuralFeatureAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuralFeatureAction());
	gen->setGeneral(get_UML_Action());
	
    // StructuralFeatureAction attributes
	uML_StructuralFeatureAction_object->setName("object");
	uML_StructuralFeatureAction_object->setType(get_UML_InputPin());
	uML_StructuralFeatureAction_object->setLower(1);
	uML_StructuralFeatureAction_object->setUpper(1);
	uML_StructuralFeatureAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuralFeatureAction_structuralFeature->setName("structuralFeature");
	uML_StructuralFeatureAction_structuralFeature->setType(get_UML_StructuralFeature());
	uML_StructuralFeatureAction_structuralFeature->setLower(1);
	uML_StructuralFeatureAction_structuralFeature->setUpper(1);
	uML_StructuralFeatureAction_structuralFeature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class StructuredActivityNode
	uML_StructuredActivityNode->setName("StructuredActivityNode");
	uML_StructuredActivityNode->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuredActivityNode());
	gen->setGeneral(get_UML_Action());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuredActivityNode());
	gen->setGeneral(get_UML_ActivityGroup());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuredActivityNode());
	gen->setGeneral(get_UML_Namespace());
	
    // StructuredActivityNode attributes
	uML_StructuredActivityNode_activity->setName("activity");
	uML_StructuredActivityNode_activity->setType(get_UML_Activity());
	uML_StructuredActivityNode_activity->setLower(0);
	uML_StructuredActivityNode_activity->setUpper(1);
	uML_StructuredActivityNode_activity->setVisibility(uml::VisibilityKind::PROTECTED);
	
	
	
	uML_StructuredActivityNode_edge->setName("edge");
	uML_StructuredActivityNode_edge->setType(get_UML_ActivityEdge());
	uML_StructuredActivityNode_edge->setLower(0);
	uML_StructuredActivityNode_edge->setUpper(-1);
	uML_StructuredActivityNode_edge->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredActivityNode_mustIsolate->setName("mustIsolate");
	uML_StructuredActivityNode_mustIsolate->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StructuredActivityNode_mustIsolate->setLower(1);
	uML_StructuredActivityNode_mustIsolate->setUpper(1);
	uML_StructuredActivityNode_mustIsolate->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_StructuredActivityNode_mustIsolate->setDefaultValue(uML_StructuredActivityNode_mustIsolate_defaultValue_LiteralBoolean_UML_StructuredActivityNode_mustIsolate);
	
	uML_StructuredActivityNode_node->setName("node");
	uML_StructuredActivityNode_node->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_node->setLower(0);
	uML_StructuredActivityNode_node->setUpper(-1);
	uML_StructuredActivityNode_node->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredActivityNode_structuredNodeInput->setName("structuredNodeInput");
	uML_StructuredActivityNode_structuredNodeInput->setType(get_UML_InputPin());
	uML_StructuredActivityNode_structuredNodeInput->setLower(0);
	uML_StructuredActivityNode_structuredNodeInput->setUpper(-1);
	uML_StructuredActivityNode_structuredNodeInput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredActivityNode_structuredNodeOutput->setName("structuredNodeOutput");
	uML_StructuredActivityNode_structuredNodeOutput->setType(get_UML_OutputPin());
	uML_StructuredActivityNode_structuredNodeOutput->setLower(0);
	uML_StructuredActivityNode_structuredNodeOutput->setUpper(-1);
	uML_StructuredActivityNode_structuredNodeOutput->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredActivityNode_variable->setName("variable");
	uML_StructuredActivityNode_variable->setType(get_UML_Variable());
	uML_StructuredActivityNode_variable->setLower(0);
	uML_StructuredActivityNode_variable->setUpper(-1);
	uML_StructuredActivityNode_variable->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // StructuredActivityNode operations
	uML_StructuredActivityNode_allActions__->setName("allActions");
	
	// parameter result
	uML_StructuredActivityNode_allActions_result->setName("result");
	uML_StructuredActivityNode_allActions_result->setType(get_UML_Action());
	uML_StructuredActivityNode_allActions_result->setLower(0);
	uML_StructuredActivityNode_allActions_result->setUpper(-1);
	uML_StructuredActivityNode_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StructuredActivityNode_allOwnedNodes__->setName("allOwnedNodes");
	
	// parameter result
	uML_StructuredActivityNode_allOwnedNodes_result->setName("result");
	uML_StructuredActivityNode_allOwnedNodes_result->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_allOwnedNodes_result->setLower(0);
	uML_StructuredActivityNode_allOwnedNodes_result->setUpper(-1);
	uML_StructuredActivityNode_allOwnedNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StructuredActivityNode_containingActivity__->setName("containingActivity");
	
	// parameter result
	uML_StructuredActivityNode_containingActivity_result->setName("result");
	uML_StructuredActivityNode_containingActivity_result->setType(get_UML_Activity());
	uML_StructuredActivityNode_containingActivity_result->setLower(0);
	uML_StructuredActivityNode_containingActivity_result->setUpper(1);
	uML_StructuredActivityNode_containingActivity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StructuredActivityNode_sourceNodes__->setName("sourceNodes");
	
	// parameter result
	uML_StructuredActivityNode_sourceNodes_result->setName("result");
	uML_StructuredActivityNode_sourceNodes_result->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_sourceNodes_result->setLower(0);
	uML_StructuredActivityNode_sourceNodes_result->setUpper(-1);
	uML_StructuredActivityNode_sourceNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StructuredActivityNode_targetNodes__->setName("targetNodes");
	
	// parameter result
	uML_StructuredActivityNode_targetNodes_result->setName("result");
	uML_StructuredActivityNode_targetNodes_result->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_targetNodes_result->setLower(0);
	uML_StructuredActivityNode_targetNodes_result->setUpper(-1);
	uML_StructuredActivityNode_targetNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class StructuredClassifier
	uML_StructuredClassifier->setName("StructuredClassifier");
	uML_StructuredClassifier->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_StructuredClassifier());
	gen->setGeneral(get_UML_Classifier());
	
    // StructuredClassifier attributes
	uML_StructuredClassifier_ownedAttribute->setName("ownedAttribute");
	uML_StructuredClassifier_ownedAttribute->setType(get_UML_Property());
	uML_StructuredClassifier_ownedAttribute->setLower(0);
	uML_StructuredClassifier_ownedAttribute->setUpper(-1);
	uML_StructuredClassifier_ownedAttribute->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredClassifier_ownedConnector->setName("ownedConnector");
	uML_StructuredClassifier_ownedConnector->setType(get_UML_Connector());
	uML_StructuredClassifier_ownedConnector->setLower(0);
	uML_StructuredClassifier_ownedConnector->setUpper(-1);
	uML_StructuredClassifier_ownedConnector->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredClassifier_part->setName("part");
	uML_StructuredClassifier_part->setType(get_UML_Property());
	uML_StructuredClassifier_part->setLower(0);
	uML_StructuredClassifier_part->setUpper(-1);
	uML_StructuredClassifier_part->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_StructuredClassifier_role->setName("role");
	uML_StructuredClassifier_role->setType(get_UML_ConnectableElement());
	uML_StructuredClassifier_role->setLower(0);
	uML_StructuredClassifier_role->setUpper(-1);
	uML_StructuredClassifier_role->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // StructuredClassifier operations
	uML_StructuredClassifier_allRoles__->setName("allRoles");
	
	// parameter result
	uML_StructuredClassifier_allRoles_result->setName("result");
	uML_StructuredClassifier_allRoles_result->setType(get_UML_ConnectableElement());
	uML_StructuredClassifier_allRoles_result->setLower(0);
	uML_StructuredClassifier_allRoles_result->setUpper(-1);
	uML_StructuredClassifier_allRoles_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	
	// parameter 
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setName("");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setType(get_UML_Property());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter name
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setName("name");
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setLower(0);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setUpper(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter type
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setName("type");
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setType(get_UML_Type());
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setLower(0);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setUpper(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter lower
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setName("lower");
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setLower(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setUpper(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter upper
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setName("upper");
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setLower(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setUpper(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_StructuredClassifier_part__->setName("part");
	
	// parameter result
	uML_StructuredClassifier_part_result->setName("result");
	uML_StructuredClassifier_part_result->setType(get_UML_Property());
	uML_StructuredClassifier_part_result->setLower(0);
	uML_StructuredClassifier_part_result->setUpper(-1);
	uML_StructuredClassifier_part_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Substitution
	uML_Substitution->setName("Substitution");
	uML_Substitution->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Substitution());
	gen->setGeneral(get_UML_Realization());
	
    // Substitution attributes
	uML_Substitution_contract->setName("contract");
	uML_Substitution_contract->setType(get_UML_Classifier());
	uML_Substitution_contract->setLower(1);
	uML_Substitution_contract->setUpper(1);
	uML_Substitution_contract->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Substitution_substitutingClassifier->setName("substitutingClassifier");
	uML_Substitution_substitutingClassifier->setType(get_UML_Classifier());
	uML_Substitution_substitutingClassifier->setLower(1);
	uML_Substitution_substitutingClassifier->setUpper(1);
	uML_Substitution_substitutingClassifier->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TemplateBinding
	uML_TemplateBinding->setName("TemplateBinding");
	uML_TemplateBinding->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TemplateBinding());
	gen->setGeneral(get_UML_DirectedRelationship());
	
    // TemplateBinding attributes
	uML_TemplateBinding_boundElement->setName("boundElement");
	uML_TemplateBinding_boundElement->setType(get_UML_TemplateableElement());
	uML_TemplateBinding_boundElement->setLower(1);
	uML_TemplateBinding_boundElement->setUpper(1);
	uML_TemplateBinding_boundElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateBinding_parameterSubstitution->setName("parameterSubstitution");
	uML_TemplateBinding_parameterSubstitution->setType(get_UML_TemplateParameterSubstitution());
	uML_TemplateBinding_parameterSubstitution->setLower(0);
	uML_TemplateBinding_parameterSubstitution->setUpper(-1);
	uML_TemplateBinding_parameterSubstitution->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateBinding_signature->setName("signature");
	uML_TemplateBinding_signature->setType(get_UML_TemplateSignature());
	uML_TemplateBinding_signature->setLower(1);
	uML_TemplateBinding_signature->setUpper(1);
	uML_TemplateBinding_signature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TemplateParameter
	uML_TemplateParameter->setName("TemplateParameter");
	uML_TemplateParameter->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TemplateParameter());
	gen->setGeneral(get_UML_Element());
	
    // TemplateParameter attributes
	uML_TemplateParameter_default->setName("default");
	uML_TemplateParameter_default->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_default->setLower(0);
	uML_TemplateParameter_default->setUpper(1);
	uML_TemplateParameter_default->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameter_ownedDefault->setName("ownedDefault");
	uML_TemplateParameter_ownedDefault->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_ownedDefault->setLower(0);
	uML_TemplateParameter_ownedDefault->setUpper(1);
	uML_TemplateParameter_ownedDefault->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameter_ownedParameteredElement->setName("ownedParameteredElement");
	uML_TemplateParameter_ownedParameteredElement->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_ownedParameteredElement->setLower(0);
	uML_TemplateParameter_ownedParameteredElement->setUpper(1);
	uML_TemplateParameter_ownedParameteredElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameter_parameteredElement->setName("parameteredElement");
	uML_TemplateParameter_parameteredElement->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_parameteredElement->setLower(1);
	uML_TemplateParameter_parameteredElement->setUpper(1);
	uML_TemplateParameter_parameteredElement->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameter_signature->setName("signature");
	uML_TemplateParameter_signature->setType(get_UML_TemplateSignature());
	uML_TemplateParameter_signature->setLower(1);
	uML_TemplateParameter_signature->setUpper(1);
	uML_TemplateParameter_signature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TemplateParameterSubstitution
	uML_TemplateParameterSubstitution->setName("TemplateParameterSubstitution");
	uML_TemplateParameterSubstitution->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TemplateParameterSubstitution());
	gen->setGeneral(get_UML_Element());
	
    // TemplateParameterSubstitution attributes
	uML_TemplateParameterSubstitution_actual->setName("actual");
	uML_TemplateParameterSubstitution_actual->setType(get_UML_ParameterableElement());
	uML_TemplateParameterSubstitution_actual->setLower(1);
	uML_TemplateParameterSubstitution_actual->setUpper(1);
	uML_TemplateParameterSubstitution_actual->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameterSubstitution_formal->setName("formal");
	uML_TemplateParameterSubstitution_formal->setType(get_UML_TemplateParameter());
	uML_TemplateParameterSubstitution_formal->setLower(1);
	uML_TemplateParameterSubstitution_formal->setUpper(1);
	uML_TemplateParameterSubstitution_formal->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameterSubstitution_ownedActual->setName("ownedActual");
	uML_TemplateParameterSubstitution_ownedActual->setType(get_UML_ParameterableElement());
	uML_TemplateParameterSubstitution_ownedActual->setLower(0);
	uML_TemplateParameterSubstitution_ownedActual->setUpper(1);
	uML_TemplateParameterSubstitution_ownedActual->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateParameterSubstitution_templateBinding->setName("templateBinding");
	uML_TemplateParameterSubstitution_templateBinding->setType(get_UML_TemplateBinding());
	uML_TemplateParameterSubstitution_templateBinding->setLower(1);
	uML_TemplateParameterSubstitution_templateBinding->setUpper(1);
	uML_TemplateParameterSubstitution_templateBinding->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TemplateSignature
	uML_TemplateSignature->setName("TemplateSignature");
	uML_TemplateSignature->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TemplateSignature());
	gen->setGeneral(get_UML_Element());
	
    // TemplateSignature attributes
	uML_TemplateSignature_ownedParameter->setName("ownedParameter");
	uML_TemplateSignature_ownedParameter->setType(get_UML_TemplateParameter());
	uML_TemplateSignature_ownedParameter->setLower(0);
	uML_TemplateSignature_ownedParameter->setUpper(-1);
	uML_TemplateSignature_ownedParameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateSignature_parameter->setName("parameter");
	uML_TemplateSignature_parameter->setType(get_UML_TemplateParameter());
	uML_TemplateSignature_parameter->setLower(1);
	uML_TemplateSignature_parameter->setUpper(-1);
	uML_TemplateSignature_parameter->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateSignature_template->setName("template");
	uML_TemplateSignature_template->setType(get_UML_TemplateableElement());
	uML_TemplateSignature_template->setLower(1);
	uML_TemplateSignature_template->setUpper(1);
	uML_TemplateSignature_template->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TemplateableElement
	uML_TemplateableElement->setName("TemplateableElement");
	uML_TemplateableElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TemplateableElement());
	gen->setGeneral(get_UML_Element());
	
    // TemplateableElement attributes
	uML_TemplateableElement_ownedTemplateSignature->setName("ownedTemplateSignature");
	uML_TemplateableElement_ownedTemplateSignature->setType(get_UML_TemplateSignature());
	uML_TemplateableElement_ownedTemplateSignature->setLower(0);
	uML_TemplateableElement_ownedTemplateSignature->setUpper(1);
	uML_TemplateableElement_ownedTemplateSignature->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TemplateableElement_templateBinding->setName("templateBinding");
	uML_TemplateableElement_templateBinding->setType(get_UML_TemplateBinding());
	uML_TemplateableElement_templateBinding->setLower(0);
	uML_TemplateableElement_templateBinding->setUpper(-1);
	uML_TemplateableElement_templateBinding->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // TemplateableElement operations
	uML_TemplateableElement_isTemplate__->setName("isTemplate");
	
	// parameter result
	uML_TemplateableElement_isTemplate_result->setName("result");
	uML_TemplateableElement_isTemplate_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TemplateableElement_isTemplate_result->setLower(1);
	uML_TemplateableElement_isTemplate_result->setUpper(1);
	uML_TemplateableElement_isTemplate_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_TemplateableElement_parameterableElements__->setName("parameterableElements");
	
	// parameter result
	uML_TemplateableElement_parameterableElements_result->setName("result");
	uML_TemplateableElement_parameterableElements_result->setType(get_UML_ParameterableElement());
	uML_TemplateableElement_parameterableElements_result->setLower(0);
	uML_TemplateableElement_parameterableElements_result->setUpper(-1);
	uML_TemplateableElement_parameterableElements_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class TestIdentityAction
	uML_TestIdentityAction->setName("TestIdentityAction");
	uML_TestIdentityAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TestIdentityAction());
	gen->setGeneral(get_UML_Action());
	
    // TestIdentityAction attributes
	uML_TestIdentityAction_first->setName("first");
	uML_TestIdentityAction_first->setType(get_UML_InputPin());
	uML_TestIdentityAction_first->setLower(1);
	uML_TestIdentityAction_first->setUpper(1);
	uML_TestIdentityAction_first->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TestIdentityAction_result->setName("result");
	uML_TestIdentityAction_result->setType(get_UML_OutputPin());
	uML_TestIdentityAction_result->setLower(1);
	uML_TestIdentityAction_result->setUpper(1);
	uML_TestIdentityAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TestIdentityAction_second->setName("second");
	uML_TestIdentityAction_second->setType(get_UML_InputPin());
	uML_TestIdentityAction_second->setLower(1);
	uML_TestIdentityAction_second->setUpper(1);
	uML_TestIdentityAction_second->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TimeConstraint
	uML_TimeConstraint->setName("TimeConstraint");
	uML_TimeConstraint->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TimeConstraint());
	gen->setGeneral(get_UML_IntervalConstraint());
	
    // TimeConstraint attributes
	uML_TimeConstraint_firstEvent->setName("firstEvent");
	uML_TimeConstraint_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TimeConstraint_firstEvent->setLower(0);
	uML_TimeConstraint_firstEvent->setUpper(1);
	uML_TimeConstraint_firstEvent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_TimeConstraint_firstEvent->setDefaultValue(uML_TimeConstraint_firstEvent_defaultValue_LiteralBoolean_UML_TimeConstraint_firstEvent);
	
	uML_TimeConstraint_specification->setName("specification");
	uML_TimeConstraint_specification->setType(get_UML_TimeInterval());
	uML_TimeConstraint_specification->setLower(1);
	uML_TimeConstraint_specification->setUpper(1);
	uML_TimeConstraint_specification->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TimeEvent
	uML_TimeEvent->setName("TimeEvent");
	uML_TimeEvent->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TimeEvent());
	gen->setGeneral(get_UML_Event());
	
    // TimeEvent attributes
	uML_TimeEvent_isRelative->setName("isRelative");
	uML_TimeEvent_isRelative->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TimeEvent_isRelative->setLower(1);
	uML_TimeEvent_isRelative->setUpper(1);
	uML_TimeEvent_isRelative->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_TimeEvent_isRelative->setDefaultValue(uML_TimeEvent_isRelative_defaultValue_LiteralBoolean_UML_TimeEvent_isRelative);
	
	uML_TimeEvent_when->setName("when");
	uML_TimeEvent_when->setType(get_UML_TimeExpression());
	uML_TimeEvent_when->setLower(1);
	uML_TimeEvent_when->setUpper(1);
	uML_TimeEvent_when->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TimeExpression
	uML_TimeExpression->setName("TimeExpression");
	uML_TimeExpression->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TimeExpression());
	gen->setGeneral(get_UML_ValueSpecification());
	
    // TimeExpression attributes
	uML_TimeExpression_expr->setName("expr");
	uML_TimeExpression_expr->setType(get_UML_ValueSpecification());
	uML_TimeExpression_expr->setLower(0);
	uML_TimeExpression_expr->setUpper(1);
	uML_TimeExpression_expr->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TimeExpression_observation->setName("observation");
	uML_TimeExpression_observation->setType(get_UML_Observation());
	uML_TimeExpression_observation->setLower(0);
	uML_TimeExpression_observation->setUpper(-1);
	uML_TimeExpression_observation->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // TimeExpression operations
	uML_TimeExpression_stringValue__->setName("stringValue");
	
	// parameter 
	uML_TimeExpression_stringValue__return->setName("");
	uML_TimeExpression_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_TimeExpression_stringValue__return->setLower(1);
	uML_TimeExpression_stringValue__return->setUpper(1);
	uML_TimeExpression_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class TimeInterval
	uML_TimeInterval->setName("TimeInterval");
	uML_TimeInterval->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TimeInterval());
	gen->setGeneral(get_UML_Interval());
	
    // TimeInterval attributes
	uML_TimeInterval_max->setName("max");
	uML_TimeInterval_max->setType(get_UML_TimeExpression());
	uML_TimeInterval_max->setLower(1);
	uML_TimeInterval_max->setUpper(1);
	uML_TimeInterval_max->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TimeInterval_min->setName("min");
	uML_TimeInterval_min->setType(get_UML_TimeExpression());
	uML_TimeInterval_min->setLower(1);
	uML_TimeInterval_min->setUpper(1);
	uML_TimeInterval_min->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class TimeObservation
	uML_TimeObservation->setName("TimeObservation");
	uML_TimeObservation->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TimeObservation());
	gen->setGeneral(get_UML_Observation());
	
    // TimeObservation attributes
	uML_TimeObservation_event->setName("event");
	uML_TimeObservation_event->setType(get_UML_NamedElement());
	uML_TimeObservation_event->setLower(1);
	uML_TimeObservation_event->setUpper(1);
	uML_TimeObservation_event->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_TimeObservation_firstEvent->setName("firstEvent");
	uML_TimeObservation_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TimeObservation_firstEvent->setLower(1);
	uML_TimeObservation_firstEvent->setUpper(1);
	uML_TimeObservation_firstEvent->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_TimeObservation_firstEvent->setDefaultValue(uML_TimeObservation_firstEvent_defaultValue_LiteralBoolean_UML_TimeObservation_firstEvent);
	


    //-------------------------------------------
	//	class Transition
	uML_Transition->setName("Transition");
	uML_Transition->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Transition());
	gen->setGeneral(get_UML_Namespace());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Transition());
	gen->setGeneral(get_UML_RedefinableElement());
	
    // Transition attributes
	uML_Transition_container->setName("container");
	uML_Transition_container->setType(get_UML_Region());
	uML_Transition_container->setLower(1);
	uML_Transition_container->setUpper(1);
	uML_Transition_container->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_effect->setName("effect");
	uML_Transition_effect->setType(get_UML_Behavior());
	uML_Transition_effect->setLower(0);
	uML_Transition_effect->setUpper(1);
	uML_Transition_effect->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_guard->setName("guard");
	uML_Transition_guard->setType(get_UML_Constraint());
	uML_Transition_guard->setLower(0);
	uML_Transition_guard->setUpper(1);
	uML_Transition_guard->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_kind->setName("kind");
	uML_Transition_kind->setType(get_UML_TransitionKind());
	uML_Transition_kind->setLower(1);
	uML_Transition_kind->setUpper(1);
	uML_Transition_kind->setVisibility(uml::VisibilityKind::PUBLIC);
	
	uML_Transition_kind->setDefaultValue(uML_Transition_kind_defaultValue_InstanceValue);
	
	uML_Transition_redefinedTransition->setName("redefinedTransition");
	uML_Transition_redefinedTransition->setType(get_UML_Transition());
	uML_Transition_redefinedTransition->setLower(0);
	uML_Transition_redefinedTransition->setUpper(1);
	uML_Transition_redefinedTransition->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_redefinitionContext->setName("redefinitionContext");
	uML_Transition_redefinitionContext->setType(get_UML_Classifier());
	uML_Transition_redefinitionContext->setLower(1);
	uML_Transition_redefinitionContext->setUpper(1);
	uML_Transition_redefinitionContext->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_source->setName("source");
	uML_Transition_source->setType(get_UML_Vertex());
	uML_Transition_source->setLower(1);
	uML_Transition_source->setUpper(1);
	uML_Transition_source->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_target->setName("target");
	uML_Transition_target->setType(get_UML_Vertex());
	uML_Transition_target->setLower(1);
	uML_Transition_target->setUpper(1);
	uML_Transition_target->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Transition_trigger->setName("trigger");
	uML_Transition_trigger->setType(get_UML_Trigger());
	uML_Transition_trigger->setLower(0);
	uML_Transition_trigger->setUpper(-1);
	uML_Transition_trigger->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Transition operations
	uML_Transition_containingStateMachine__->setName("containingStateMachine");
	
	// parameter result
	uML_Transition_containingStateMachine_result->setName("result");
	uML_Transition_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_Transition_containingStateMachine_result->setLower(1);
	uML_Transition_containingStateMachine_result->setUpper(1);
	uML_Transition_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement->setName("isConsistentWith");
	
	// parameter result
	uML_Transition_isConsistentWith_result->setName("result");
	uML_Transition_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Transition_isConsistentWith_result->setLower(1);
	uML_Transition_isConsistentWith_result->setUpper(1);
	uML_Transition_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter redefiningElement
	
	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setName("redefiningElement");
	
	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setType(get_UML_RedefinableElement());
	
	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setLower(1);
	
	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setUpper(1);
	
	uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Transition_redefinitionContext__->setName("redefinitionContext");
	
	// parameter result
	uML_Transition_redefinitionContext_result->setName("result");
	uML_Transition_redefinitionContext_result->setType(get_UML_Classifier());
	uML_Transition_redefinitionContext_result->setLower(1);
	uML_Transition_redefinitionContext_result->setUpper(1);
	uML_Transition_redefinitionContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class Trigger
	uML_Trigger->setName("Trigger");
	uML_Trigger->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Trigger());
	gen->setGeneral(get_UML_NamedElement());
	
    // Trigger attributes
	uML_Trigger_event->setName("event");
	uML_Trigger_event->setType(get_UML_Event());
	uML_Trigger_event->setLower(1);
	uML_Trigger_event->setUpper(1);
	uML_Trigger_event->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Trigger_port->setName("port");
	uML_Trigger_port->setType(get_UML_Port());
	uML_Trigger_port->setLower(0);
	uML_Trigger_port->setUpper(-1);
	uML_Trigger_port->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Type
	uML_Type->setName("Type");
	uML_Type->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Type());
	gen->setGeneral(get_UML_PackageableElement());
	
    // Type attributes
	uML_Type_package->setName("package");
	uML_Type_package->setType(get_UML_Package());
	uML_Type_package->setLower(0);
	uML_Type_package->setUpper(1);
	uML_Type_package->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Type operations
	uML_Type_conformsTo_Type_Type->setName("conformsTo");
	
	// parameter result
	uML_Type_conformsTo_result->setName("result");
	uML_Type_conformsTo_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Type_conformsTo_result->setLower(1);
	uML_Type_conformsTo_result->setUpper(1);
	uML_Type_conformsTo_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter other
	
	uML_Type_conformsTo_Type_Type_other->setName("other");
	
	uML_Type_conformsTo_Type_Type_other->setType(get_UML_Type());
	
	uML_Type_conformsTo_Type_Type_other->setLower(1);
	
	uML_Type_conformsTo_Type_Type_other->setUpper(1);
	
	uML_Type_conformsTo_Type_Type_other->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->setName("createAssociation");
	
	// parameter 
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setName("");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setType(get_UML_Association());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter end1IsNavigable
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setName("end1IsNavigable");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Aggregation
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setName("end1Aggregation");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setType(get_UML_AggregationKind());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Name
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setName("end1Name");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Lower
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setName("end1Lower");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Upper
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setName("end1Upper");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end1Type
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type->setName("end1Type");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type->setType(get_UML_Type());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2IsNavigable
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setName("end2IsNavigable");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Aggregation
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setName("end2Aggregation");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setType(get_UML_AggregationKind());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Name
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setName("end2Name");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Lower
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setName("end2Lower");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	// parameter end2Upper
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setName("end2Upper");
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setLower(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setUpper(1);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Type_getAssociations__->setName("getAssociations");
	
	// parameter 
	uML_Type_getAssociations__return->setName("");
	uML_Type_getAssociations__return->setType(get_UML_Association());
	uML_Type_getAssociations__return->setLower(0);
	uML_Type_getAssociations__return->setUpper(-1);
	uML_Type_getAssociations__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class TypedElement
	uML_TypedElement->setName("TypedElement");
	uML_TypedElement->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_TypedElement());
	gen->setGeneral(get_UML_NamedElement());
	
    // TypedElement attributes
	uML_TypedElement_type->setName("type");
	uML_TypedElement_type->setType(get_UML_Type());
	uML_TypedElement_type->setLower(0);
	uML_TypedElement_type->setUpper(1);
	uML_TypedElement_type->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class UnmarshallAction
	uML_UnmarshallAction->setName("UnmarshallAction");
	uML_UnmarshallAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_UnmarshallAction());
	gen->setGeneral(get_UML_Action());
	
    // UnmarshallAction attributes
	uML_UnmarshallAction_object->setName("object");
	uML_UnmarshallAction_object->setType(get_UML_InputPin());
	uML_UnmarshallAction_object->setLower(1);
	uML_UnmarshallAction_object->setUpper(1);
	uML_UnmarshallAction_object->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_UnmarshallAction_result->setName("result");
	uML_UnmarshallAction_result->setType(get_UML_OutputPin());
	uML_UnmarshallAction_result->setLower(1);
	uML_UnmarshallAction_result->setUpper(-1);
	uML_UnmarshallAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_UnmarshallAction_unmarshallType->setName("unmarshallType");
	uML_UnmarshallAction_unmarshallType->setType(get_UML_Classifier());
	uML_UnmarshallAction_unmarshallType->setLower(1);
	uML_UnmarshallAction_unmarshallType->setUpper(1);
	uML_UnmarshallAction_unmarshallType->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Usage
	uML_Usage->setName("Usage");
	uML_Usage->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Usage());
	gen->setGeneral(get_UML_Dependency());
	

    //-------------------------------------------
	//	class UseCase
	uML_UseCase->setName("UseCase");
	uML_UseCase->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_UseCase());
	gen->setGeneral(get_UML_BehavioredClassifier());
	
    // UseCase attributes
	uML_UseCase_extend->setName("extend");
	uML_UseCase_extend->setType(get_UML_Extend());
	uML_UseCase_extend->setLower(0);
	uML_UseCase_extend->setUpper(-1);
	uML_UseCase_extend->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_UseCase_extensionPoint->setName("extensionPoint");
	uML_UseCase_extensionPoint->setType(get_UML_ExtensionPoint());
	uML_UseCase_extensionPoint->setLower(0);
	uML_UseCase_extensionPoint->setUpper(-1);
	uML_UseCase_extensionPoint->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_UseCase_include->setName("include");
	uML_UseCase_include->setType(get_UML_Include());
	uML_UseCase_include->setLower(0);
	uML_UseCase_include->setUpper(-1);
	uML_UseCase_include->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_UseCase_subject->setName("subject");
	uML_UseCase_subject->setType(get_UML_Classifier());
	uML_UseCase_subject->setLower(0);
	uML_UseCase_subject->setUpper(-1);
	uML_UseCase_subject->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // UseCase operations
	uML_UseCase_allIncludedUseCases__->setName("allIncludedUseCases");
	
	// parameter result
	uML_UseCase_allIncludedUseCases_result->setName("result");
	uML_UseCase_allIncludedUseCases_result->setType(get_UML_UseCase());
	uML_UseCase_allIncludedUseCases_result->setLower(0);
	uML_UseCase_allIncludedUseCases_result->setUpper(-1);
	uML_UseCase_allIncludedUseCases_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ValuePin
	uML_ValuePin->setName("ValuePin");
	uML_ValuePin->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ValuePin());
	gen->setGeneral(get_UML_InputPin());
	
    // ValuePin attributes
	uML_ValuePin_value->setName("value");
	uML_ValuePin_value->setType(get_UML_ValueSpecification());
	uML_ValuePin_value->setLower(1);
	uML_ValuePin_value->setUpper(1);
	uML_ValuePin_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class ValueSpecification
	uML_ValueSpecification->setName("ValueSpecification");
	uML_ValueSpecification->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ValueSpecification());
	gen->setGeneral(get_UML_PackageableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ValueSpecification());
	gen->setGeneral(get_UML_TypedElement());
	
    // ValueSpecification operations
	uML_ValueSpecification_booleanValue__->setName("booleanValue");
	
	// parameter result
	uML_ValueSpecification_booleanValue_result->setName("result");
	uML_ValueSpecification_booleanValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_booleanValue_result->setLower(0);
	uML_ValueSpecification_booleanValue_result->setUpper(1);
	uML_ValueSpecification_booleanValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ValueSpecification_integerValue__->setName("integerValue");
	
	// parameter result
	uML_ValueSpecification_integerValue_result->setName("result");
	uML_ValueSpecification_integerValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ValueSpecification_integerValue_result->setLower(0);
	uML_ValueSpecification_integerValue_result->setUpper(1);
	uML_ValueSpecification_integerValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement->setName("isCompatibleWith");
	
	// parameter result
	uML_ValueSpecification_isCompatibleWith_result->setName("result");
	uML_ValueSpecification_isCompatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_isCompatibleWith_result->setLower(1);
	uML_ValueSpecification_isCompatibleWith_result->setUpper(1);
	uML_ValueSpecification_isCompatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter p
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p->setName("p");
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p->setType(get_UML_ParameterableElement());
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p->setLower(1);
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p->setUpper(1);
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_ValueSpecification_isComputable__->setName("isComputable");
	
	// parameter result
	uML_ValueSpecification_isComputable_result->setName("result");
	uML_ValueSpecification_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_isComputable_result->setLower(1);
	uML_ValueSpecification_isComputable_result->setUpper(1);
	uML_ValueSpecification_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ValueSpecification_isNull__->setName("isNull");
	
	// parameter result
	uML_ValueSpecification_isNull_result->setName("result");
	uML_ValueSpecification_isNull_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_isNull_result->setLower(1);
	uML_ValueSpecification_isNull_result->setUpper(1);
	uML_ValueSpecification_isNull_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ValueSpecification_realValue__->setName("realValue");
	
	// parameter result
	uML_ValueSpecification_realValue_result->setName("result");
	uML_ValueSpecification_realValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_ValueSpecification_realValue_result->setLower(0);
	uML_ValueSpecification_realValue_result->setUpper(1);
	uML_ValueSpecification_realValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ValueSpecification_stringValue__->setName("stringValue");
	
	// parameter result
	uML_ValueSpecification_stringValue_result->setName("result");
	uML_ValueSpecification_stringValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_ValueSpecification_stringValue_result->setLower(0);
	uML_ValueSpecification_stringValue_result->setUpper(1);
	uML_ValueSpecification_stringValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_ValueSpecification_unlimitedValue__->setName("unlimitedValue");
	
	// parameter result
	uML_ValueSpecification_unlimitedValue_result->setName("result");
	uML_ValueSpecification_unlimitedValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_ValueSpecification_unlimitedValue_result->setLower(0);
	uML_ValueSpecification_unlimitedValue_result->setUpper(1);
	uML_ValueSpecification_unlimitedValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class ValueSpecificationAction
	uML_ValueSpecificationAction->setName("ValueSpecificationAction");
	uML_ValueSpecificationAction->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_ValueSpecificationAction());
	gen->setGeneral(get_UML_Action());
	
    // ValueSpecificationAction attributes
	uML_ValueSpecificationAction_result->setName("result");
	uML_ValueSpecificationAction_result->setType(get_UML_OutputPin());
	uML_ValueSpecificationAction_result->setLower(1);
	uML_ValueSpecificationAction_result->setUpper(1);
	uML_ValueSpecificationAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_ValueSpecificationAction_value->setName("value");
	uML_ValueSpecificationAction_value->setType(get_UML_ValueSpecification());
	uML_ValueSpecificationAction_value->setLower(1);
	uML_ValueSpecificationAction_value->setUpper(1);
	uML_ValueSpecificationAction_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Variable
	uML_Variable->setName("Variable");
	uML_Variable->setIsAbstract(false);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Variable());
	gen->setGeneral(get_UML_ConnectableElement());
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Variable());
	gen->setGeneral(get_UML_MultiplicityElement());
	
    // Variable attributes
	uML_Variable_activityScope->setName("activityScope");
	uML_Variable_activityScope->setType(get_UML_Activity());
	uML_Variable_activityScope->setLower(0);
	uML_Variable_activityScope->setUpper(1);
	uML_Variable_activityScope->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Variable_scope->setName("scope");
	uML_Variable_scope->setType(get_UML_StructuredActivityNode());
	uML_Variable_scope->setLower(0);
	uML_Variable_scope->setUpper(1);
	uML_Variable_scope->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Variable operations
	uML_Variable_isAccessibleBy_Action_Action->setName("isAccessibleBy");
	
	// parameter result
	uML_Variable_isAccessibleBy_result->setName("result");
	uML_Variable_isAccessibleBy_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Variable_isAccessibleBy_result->setLower(1);
	uML_Variable_isAccessibleBy_result->setUpper(1);
	uML_Variable_isAccessibleBy_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter a
	
	uML_Variable_isAccessibleBy_Action_Action_a->setName("a");
	
	uML_Variable_isAccessibleBy_Action_Action_a->setType(get_UML_Action());
	
	uML_Variable_isAccessibleBy_Action_Action_a->setLower(1);
	
	uML_Variable_isAccessibleBy_Action_Action_a->setUpper(1);
	
	uML_Variable_isAccessibleBy_Action_Action_a->setDirection(uml::ParameterDirectionKind::IN);
	
	


    //-------------------------------------------
	//	class VariableAction
	uML_VariableAction->setName("VariableAction");
	uML_VariableAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_VariableAction());
	gen->setGeneral(get_UML_Action());
	
    // VariableAction attributes
	uML_VariableAction_variable->setName("variable");
	uML_VariableAction_variable->setType(get_UML_Variable());
	uML_VariableAction_variable->setLower(1);
	uML_VariableAction_variable->setUpper(1);
	uML_VariableAction_variable->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class Vertex
	uML_Vertex->setName("Vertex");
	uML_Vertex->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_Vertex());
	gen->setGeneral(get_UML_NamedElement());
	
    // Vertex attributes
	uML_Vertex_container->setName("container");
	uML_Vertex_container->setType(get_UML_Region());
	uML_Vertex_container->setLower(0);
	uML_Vertex_container->setUpper(1);
	uML_Vertex_container->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Vertex_incoming->setName("incoming");
	uML_Vertex_incoming->setType(get_UML_Transition());
	uML_Vertex_incoming->setLower(0);
	uML_Vertex_incoming->setUpper(-1);
	uML_Vertex_incoming->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_Vertex_outgoing->setName("outgoing");
	uML_Vertex_outgoing->setType(get_UML_Transition());
	uML_Vertex_outgoing->setLower(0);
	uML_Vertex_outgoing->setUpper(-1);
	uML_Vertex_outgoing->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

    // Vertex operations
	uML_Vertex_containingStateMachine__->setName("containingStateMachine");
	
	// parameter result
	uML_Vertex_containingStateMachine_result->setName("result");
	uML_Vertex_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_Vertex_containingStateMachine_result->setLower(1);
	uML_Vertex_containingStateMachine_result->setUpper(1);
	uML_Vertex_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Vertex_incoming__->setName("incoming");
	
	// parameter result
	uML_Vertex_incoming_result->setName("result");
	uML_Vertex_incoming_result->setType(get_UML_Transition());
	uML_Vertex_incoming_result->setLower(0);
	uML_Vertex_incoming_result->setUpper(-1);
	uML_Vertex_incoming_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	

	uML_Vertex_isContainedInRegion_Region_Region->setName("isContainedInRegion");
	
	// parameter result
	uML_Vertex_isContainedInRegion_result->setName("result");
	uML_Vertex_isContainedInRegion_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Vertex_isContainedInRegion_result->setLower(1);
	uML_Vertex_isContainedInRegion_result->setUpper(1);
	uML_Vertex_isContainedInRegion_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter r
	
	uML_Vertex_isContainedInRegion_Region_Region_r->setName("r");
	
	uML_Vertex_isContainedInRegion_Region_Region_r->setType(get_UML_Region());
	
	uML_Vertex_isContainedInRegion_Region_Region_r->setLower(1);
	
	uML_Vertex_isContainedInRegion_Region_Region_r->setUpper(1);
	
	uML_Vertex_isContainedInRegion_Region_Region_r->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Vertex_isContainedInState_State_State->setName("isContainedInState");
	
	// parameter result
	uML_Vertex_isContainedInState_result->setName("result");
	uML_Vertex_isContainedInState_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Vertex_isContainedInState_result->setLower(1);
	uML_Vertex_isContainedInState_result->setUpper(1);
	uML_Vertex_isContainedInState_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	// parameter s
	
	uML_Vertex_isContainedInState_State_State_s->setName("s");
	
	uML_Vertex_isContainedInState_State_State_s->setType(get_UML_State());
	
	uML_Vertex_isContainedInState_State_State_s->setLower(1);
	
	uML_Vertex_isContainedInState_State_State_s->setUpper(1);
	
	uML_Vertex_isContainedInState_State_State_s->setDirection(uml::ParameterDirectionKind::IN);
	
	

	uML_Vertex_outgoing__->setName("outgoing");
	
	// parameter result
	uML_Vertex_outgoing_result->setName("result");
	uML_Vertex_outgoing_result->setType(get_UML_Transition());
	uML_Vertex_outgoing_result->setLower(0);
	uML_Vertex_outgoing_result->setUpper(-1);
	uML_Vertex_outgoing_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	


    //-------------------------------------------
	//	class WriteLinkAction
	uML_WriteLinkAction->setName("WriteLinkAction");
	uML_WriteLinkAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_WriteLinkAction());
	gen->setGeneral(get_UML_LinkAction());
	

    //-------------------------------------------
	//	class WriteStructuralFeatureAction
	uML_WriteStructuralFeatureAction->setName("WriteStructuralFeatureAction");
	uML_WriteStructuralFeatureAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_WriteStructuralFeatureAction());
	gen->setGeneral(get_UML_StructuralFeatureAction());
	
    // WriteStructuralFeatureAction attributes
	uML_WriteStructuralFeatureAction_result->setName("result");
	uML_WriteStructuralFeatureAction_result->setType(get_UML_OutputPin());
	uML_WriteStructuralFeatureAction_result->setLower(0);
	uML_WriteStructuralFeatureAction_result->setUpper(1);
	uML_WriteStructuralFeatureAction_result->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	
	uML_WriteStructuralFeatureAction_value->setName("value");
	uML_WriteStructuralFeatureAction_value->setType(get_UML_InputPin());
	uML_WriteStructuralFeatureAction_value->setLower(0);
	uML_WriteStructuralFeatureAction_value->setUpper(1);
	uML_WriteStructuralFeatureAction_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	


    //-------------------------------------------
	//	class WriteVariableAction
	uML_WriteVariableAction->setName("WriteVariableAction");
	uML_WriteVariableAction->setIsAbstract(true);
	
	gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific(get_UML_WriteVariableAction());
	gen->setGeneral(get_UML_VariableAction());
	
    // WriteVariableAction attributes
	uML_WriteVariableAction_value->setName("value");
	uML_WriteVariableAction_value->setType(get_UML_InputPin());
	uML_WriteVariableAction_value->setLower(0);
	uML_WriteVariableAction_value->setUpper(1);
	uML_WriteVariableAction_value->setVisibility(uml::VisibilityKind::PUBLIC);
	
	
	

}

void UMLPackageImpl::initializePackageDependencies()
{
}

void UMLPackageImpl::initializePackageInstanceSpecifications()
{
}


void UMLPackageImpl::initializePackageInterfaceRealizations()
{
}

void UMLPackageImpl::initializePackageInterfaces()
{
}

void UMLPackageImpl::initializePackageStereotypes()
{
}

void UMLPackageImpl::initializePackageValueSpecifications()
{
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_lowerValue_LiteralInteger_UML_A_action_actionExecutionSpecification_actionExecutionSpecification->setValue(0);

	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_action_actionExecutionSpecification_actionExecutionSpecification->setValue(-1);

	uML_A_action_interaction_interaction_lowerValue_LiteralInteger_UML_A_action_interaction_interaction->setValue(0);

	uML_A_actualGate_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_actualGate_interactionUse_interactionUse->setValue(0);

	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution->setValue(0);

	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution->setValue(-1);

	uML_A_addition_include_include_lowerValue_LiteralInteger_UML_A_addition_include_include->setValue(0);

	uML_A_addition_include_include_upperValue_LiteralUnlimitedNatural_UML_A_addition_include_include->setValue(-1);

	uML_A_annotatedElement_comment_comment_lowerValue_LiteralInteger_UML_A_annotatedElement_comment_comment->setValue(0);

	uML_A_annotatedElement_comment_comment_upperValue_LiteralUnlimitedNatural_UML_A_annotatedElement_comment_comment->setValue(-1);

	uML_A_appliedProfile_profileApplication_profileApplication_lowerValue_LiteralInteger_UML_A_appliedProfile_profileApplication_profileApplication->setValue(0);

	uML_A_appliedProfile_profileApplication_profileApplication_upperValue_LiteralUnlimitedNatural_UML_A_appliedProfile_profileApplication_profileApplication->setValue(-1);

	uML_A_argument_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_argument_interactionUse_interactionUse->setValue(0);

	uML_A_argument_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_argument_invocationAction_invocationAction->setValue(0);

	uML_A_argument_message_message_lowerValue_LiteralInteger_UML_A_argument_message_message->setValue(0);

	uML_A_association_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_association_clearAssociationAction_clearAssociationAction->setValue(0);

	uML_A_attribute_classifier_classifier_lowerValue_LiteralInteger_UML_A_attribute_classifier_classifier->setValue(0);

	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_lowerValue_LiteralInteger_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification->setValue(0);

	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification->setValue(-1);

	uML_A_behavior_callBehaviorAction_callBehaviorAction_lowerValue_LiteralInteger_UML_A_behavior_callBehaviorAction_callBehaviorAction->setValue(0);

	uML_A_behavior_callBehaviorAction_callBehaviorAction_upperValue_LiteralUnlimitedNatural_UML_A_behavior_callBehaviorAction_callBehaviorAction->setValue(-1);

	uML_A_behavior_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_behavior_opaqueExpression_opaqueExpression->setValue(0);

	uML_A_behavior_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_behavior_opaqueExpression_opaqueExpression->setValue(-1);

	uML_A_bodyCondition_bodyContext_bodyContext_lowerValue_LiteralInteger_UML_A_bodyCondition_bodyContext_bodyContext->setValue(0);

	uML_A_bodyOutput_clause_clause_lowerValue_LiteralInteger_UML_A_bodyOutput_clause_clause->setValue(0);

	uML_A_bodyOutput_clause_clause_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_clause_clause->setValue(-1);

	uML_A_bodyOutput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyOutput_loopNode_loopNode->setValue(0);

	uML_A_bodyOutput_loopNode_loopNode_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_loopNode_loopNode->setValue(-1);

	uML_A_bodyPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyPart_loopNode_loopNode->setValue(0);

	uML_A_body_clause_clause_lowerValue_LiteralInteger_UML_A_body_clause_clause->setValue(0);

	uML_A_cfragmentGate_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_cfragmentGate_combinedFragment_combinedFragment->setValue(0);

	uML_A_changeExpression_changeEvent_changeEvent_lowerValue_LiteralInteger_UML_A_changeExpression_changeEvent_changeEvent->setValue(0);

	uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_classifierBehavior_behavioredClassifier_behavioredClassifier->setValue(0);

	uML_A_classifier_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_classifier_createObjectAction_createObjectAction->setValue(0);

	uML_A_classifier_createObjectAction_createObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_createObjectAction_createObjectAction->setValue(-1);

	uML_A_classifier_enumerationLiteral_enumerationLiteral_lowerValue_LiteralInteger_UML_A_classifier_enumerationLiteral_enumerationLiteral->setValue(0);

	uML_A_classifier_enumerationLiteral_enumerationLiteral_upperValue_LiteralUnlimitedNatural_UML_A_classifier_enumerationLiteral_enumerationLiteral->setValue(-1);

	uML_A_classifier_instanceSpecification_instanceSpecification_lowerValue_LiteralInteger_UML_A_classifier_instanceSpecification_instanceSpecification->setValue(0);

	uML_A_classifier_instanceSpecification_instanceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_classifier_instanceSpecification_instanceSpecification->setValue(-1);

	uML_A_classifier_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_classifier_readExtentAction_readExtentAction->setValue(0);

	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(0);

	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(-1);

	uML_A_clientDependency_client_dependency_lowerValue_LiteralInteger_UML_A_clientDependency_client_dependency->setValue(0);

	uML_A_clientDependency_client_dependency_upperValue_LiteralUnlimitedNatural_UML_A_clientDependency_client_dependency->setValue(-1);

	uML_A_collaborationRole_collaboration_collaboration_lowerValue_LiteralInteger_UML_A_collaborationRole_collaboration_collaboration->setValue(0);

	uML_A_collaborationRole_collaboration_collaboration_upperValue_LiteralUnlimitedNatural_UML_A_collaborationRole_collaboration_collaboration->setValue(-1);

	uML_A_collaborationUse_classifier_classifier_lowerValue_LiteralInteger_UML_A_collaborationUse_classifier_classifier->setValue(0);

	uML_A_collection_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_collection_reduceAction_reduceAction->setValue(0);

	uML_A_condition_extend_extend_lowerValue_LiteralInteger_UML_A_condition_extend_extend->setValue(0);

	uML_A_condition_parameterSet_parameterSet_lowerValue_LiteralInteger_UML_A_condition_parameterSet_parameterSet->setValue(0);

	uML_A_connector_message_message_lowerValue_LiteralInteger_UML_A_connector_message_message->setValue(0);

	uML_A_connector_message_message_upperValue_LiteralUnlimitedNatural_UML_A_connector_message_message->setValue(-1);

	uML_A_constrainedElement_constraint_constraint_lowerValue_LiteralInteger_UML_A_constrainedElement_constraint_constraint->setValue(0);

	uML_A_constrainedElement_constraint_constraint_upperValue_LiteralUnlimitedNatural_UML_A_constrainedElement_constraint_constraint->setValue(-1);

	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_lowerValue_LiteralInteger_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter->setValue(0);

	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_upperValue_LiteralUnlimitedNatural_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter->setValue(-1);

	uML_A_context_action_action_lowerValue_LiteralInteger_UML_A_context_action_action->setValue(0);

	uML_A_context_action_action_upperValue_LiteralUnlimitedNatural_UML_A_context_action_action->setValue(-1);

	uML_A_context_behavior_behavior_lowerValue_LiteralInteger_UML_A_context_behavior_behavior->setValue(0);

	uML_A_context_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_context_behavior_behavior->setValue(-1);

	uML_A_contract_connector_connector_lowerValue_LiteralInteger_UML_A_contract_connector_connector->setValue(0);

	uML_A_contract_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_contract_connector_connector->setValue(-1);

	uML_A_contract_interfaceRealization_interfaceRealization_lowerValue_LiteralInteger_UML_A_contract_interfaceRealization_interfaceRealization->setValue(0);

	uML_A_contract_interfaceRealization_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_A_contract_interfaceRealization_interfaceRealization->setValue(-1);

	uML_A_contract_substitution_substitution_lowerValue_LiteralInteger_UML_A_contract_substitution_substitution->setValue(0);

	uML_A_contract_substitution_substitution_upperValue_LiteralUnlimitedNatural_UML_A_contract_substitution_substitution->setValue(-1);

	uML_A_conveyed_conveyingFlow_conveyingFlow_lowerValue_LiteralInteger_UML_A_conveyed_conveyingFlow_conveyingFlow->setValue(0);

	uML_A_conveyed_conveyingFlow_conveyingFlow_upperValue_LiteralUnlimitedNatural_UML_A_conveyed_conveyingFlow_conveyingFlow->setValue(-1);

	uML_A_covered_events_events_lowerValue_LiteralInteger_UML_A_covered_events_events->setValue(0);

	uML_A_covered_events_events_upperValue_LiteralUnlimitedNatural_UML_A_covered_events_events->setValue(-1);

	uML_A_covered_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_covered_stateInvariant_stateInvariant->setValue(0);

	uML_A_covered_stateInvariant_stateInvariant_upperValue_LiteralUnlimitedNatural_UML_A_covered_stateInvariant_stateInvariant->setValue(-1);

	uML_A_decider_clause_clause_lowerValue_LiteralInteger_UML_A_decider_clause_clause->setValue(0);

	uML_A_decider_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_decider_loopNode_loopNode->setValue(0);

	uML_A_decisionInputFlow_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInputFlow_decisionNode_decisionNode->setValue(0);

	uML_A_decisionInput_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInput_decisionNode_decisionNode->setValue(0);

	uML_A_decisionInput_decisionNode_decisionNode_upperValue_LiteralUnlimitedNatural_UML_A_decisionInput_decisionNode_decisionNode->setValue(-1);

	uML_A_defaultValue_owningParameter_owningParameter_lowerValue_LiteralInteger_UML_A_defaultValue_owningParameter_owningParameter->setValue(0);

	uML_A_defaultValue_owningProperty_owningProperty_lowerValue_LiteralInteger_UML_A_defaultValue_owningProperty_owningProperty->setValue(0);

	uML_A_default_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_default_templateParameter_templateParameter->setValue(0);

	uML_A_default_templateParameter_templateParameter_upperValue_LiteralUnlimitedNatural_UML_A_default_templateParameter_templateParameter->setValue(-1);

	uML_A_deferrableTrigger_state_state_lowerValue_LiteralInteger_UML_A_deferrableTrigger_state_state->setValue(0);

	uML_A_definingEnd_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_definingEnd_connectorEnd_connectorEnd->setValue(0);

	uML_A_definingEnd_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_definingEnd_connectorEnd_connectorEnd->setValue(-1);

	uML_A_definingFeature_slot_slot_lowerValue_LiteralInteger_UML_A_definingFeature_slot_slot->setValue(0);

	uML_A_definingFeature_slot_slot_upperValue_LiteralUnlimitedNatural_UML_A_definingFeature_slot_slot->setValue(-1);

	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_lowerValue_LiteralInteger_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact->setValue(0);

	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_upperValue_LiteralUnlimitedNatural_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact->setValue(-1);

	uML_A_deployedElement_deploymentTarget_deploymentTarget_lowerValue_LiteralInteger_UML_A_deployedElement_deploymentTarget_deploymentTarget->setValue(0);

	uML_A_deployedElement_deploymentTarget_deploymentTarget_upperValue_LiteralUnlimitedNatural_UML_A_deployedElement_deploymentTarget_deploymentTarget->setValue(-1);

	uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData_lowerValue_LiteralInteger_UML_A_destroyAt_linkEndDestructionData_linkEndDestructionData->setValue(0);

	uML_A_doActivity_state_state_lowerValue_LiteralInteger_UML_A_doActivity_state_state->setValue(0);

	uML_A_effect_transition_transition_lowerValue_LiteralInteger_UML_A_effect_transition_transition->setValue(0);

	uML_A_endType_association_association_lowerValue_LiteralInteger_UML_A_endType_association_association->setValue(0);

	uML_A_endType_association_association_upperValue_LiteralUnlimitedNatural_UML_A_endType_association_association->setValue(-1);

	uML_A_end_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_end_linkEndData_linkEndData->setValue(0);

	uML_A_end_linkEndData_linkEndData_upperValue_LiteralUnlimitedNatural_UML_A_end_linkEndData_linkEndData->setValue(-1);

	uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_end_readLinkObjectEndAction_readLinkObjectEndAction->setValue(0);

	uML_A_end_role_end_lowerValue_LiteralInteger_UML_A_end_role_end->setValue(0);

	uML_A_end_role_end_upperValue_LiteralUnlimitedNatural_UML_A_end_role_end->setValue(-1);

	uML_A_entry_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_entry_connectionPointReference_connectionPointReference->setValue(0);

	uML_A_entry_state_state_lowerValue_LiteralInteger_UML_A_entry_state_state->setValue(0);

	uML_A_event_durationObservation_durationObservation_lowerValue_LiteralInteger_UML_A_event_durationObservation_durationObservation->setValue(0);

	uML_A_event_durationObservation_durationObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_durationObservation_durationObservation->setValue(-1);

	uML_A_event_timeObservation_timeObservation_lowerValue_LiteralInteger_UML_A_event_timeObservation_timeObservation->setValue(0);

	uML_A_event_timeObservation_timeObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_timeObservation_timeObservation->setValue(-1);

	uML_A_event_trigger_trigger_lowerValue_LiteralInteger_UML_A_event_trigger_trigger->setValue(0);

	uML_A_event_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_event_trigger_trigger->setValue(-1);

	uML_A_exceptionInput_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionInput_exceptionHandler_exceptionHandler->setValue(0);

	uML_A_exceptionInput_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionInput_exceptionHandler_exceptionHandler->setValue(-1);

	uML_A_exceptionType_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionType_exceptionHandler_exceptionHandler->setValue(0);

	uML_A_exceptionType_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionType_exceptionHandler_exceptionHandler->setValue(-1);

	uML_A_exception_raiseExceptionAction_raiseExceptionAction_lowerValue_LiteralInteger_UML_A_exception_raiseExceptionAction_raiseExceptionAction->setValue(0);

	uML_A_executableNode_sequenceNode_sequenceNode_lowerValue_LiteralInteger_UML_A_executableNode_sequenceNode_sequenceNode->setValue(0);

	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_lowerValue_LiteralInteger_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification->setValue(0);

	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification->setValue(2);

	uML_A_exit_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_exit_connectionPointReference_connectionPointReference->setValue(0);

	uML_A_exit_state_state_lowerValue_LiteralInteger_UML_A_exit_state_state->setValue(0);

	uML_A_expr_duration_duration_lowerValue_LiteralInteger_UML_A_expr_duration_duration->setValue(0);

	uML_A_expr_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_expr_timeExpression_timeExpression->setValue(0);

	uML_A_extendedCase_extend_extend_lowerValue_LiteralInteger_UML_A_extendedCase_extend_extend->setValue(0);

	uML_A_extendedCase_extend_extend_upperValue_LiteralUnlimitedNatural_UML_A_extendedCase_extend_extend->setValue(-1);

	uML_A_extendedRegion_region_region_lowerValue_LiteralInteger_UML_A_extendedRegion_region_region->setValue(0);

	uML_A_extendedRegion_region_region_upperValue_LiteralUnlimitedNatural_UML_A_extendedRegion_region_region->setValue(-1);

	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature->setValue(0);

	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature->setValue(-1);

	uML_A_extendedStateMachine_stateMachine_stateMachine_lowerValue_LiteralInteger_UML_A_extendedStateMachine_stateMachine_stateMachine->setValue(0);

	uML_A_extendedStateMachine_stateMachine_stateMachine_upperValue_LiteralUnlimitedNatural_UML_A_extendedStateMachine_stateMachine_stateMachine->setValue(-1);

	uML_A_extensionLocation_extension_extension_lowerValue_LiteralInteger_UML_A_extensionLocation_extension_extension->setValue(0);

	uML_A_extensionLocation_extension_extension_upperValue_LiteralUnlimitedNatural_UML_A_extensionLocation_extension_extension->setValue(-1);

	uML_A_finish_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_finish_executionSpecification_executionSpecification->setValue(0);

	uML_A_finish_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_finish_executionSpecification_executionSpecification->setValue(-1);

	uML_A_first_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_first_testIdentityAction_testIdentityAction->setValue(0);

	uML_A_formalGate_interaction_interaction_lowerValue_LiteralInteger_UML_A_formalGate_interaction_interaction->setValue(0);

	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution->setValue(0);

	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution->setValue(-1);

	uML_A_fromAction_actionInputPin_actionInputPin_lowerValue_LiteralInteger_UML_A_fromAction_actionInputPin_actionInputPin->setValue(0);

	uML_A_generalMachine_protocolConformance_protocolConformance_lowerValue_LiteralInteger_UML_A_generalMachine_protocolConformance_protocolConformance->setValue(0);

	uML_A_generalMachine_protocolConformance_protocolConformance_upperValue_LiteralUnlimitedNatural_UML_A_generalMachine_protocolConformance_protocolConformance->setValue(-1);

	uML_A_generalOrdering_interactionFragment_interactionFragment_lowerValue_LiteralInteger_UML_A_generalOrdering_interactionFragment_interactionFragment->setValue(0);

	uML_A_general_classifier_classifier_lowerValue_LiteralInteger_UML_A_general_classifier_classifier->setValue(0);

	uML_A_general_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_general_classifier_classifier->setValue(-1);

	uML_A_general_generalization_generalization_lowerValue_LiteralInteger_UML_A_general_generalization_generalization->setValue(0);

	uML_A_general_generalization_generalization_upperValue_LiteralUnlimitedNatural_UML_A_general_generalization_generalization->setValue(-1);

	uML_A_guard_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_guard_activityEdge_activityEdge->setValue(0);

	uML_A_guard_transition_transition_lowerValue_LiteralInteger_UML_A_guard_transition_transition->setValue(0);

	uML_A_handlerBody_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_handlerBody_exceptionHandler_exceptionHandler->setValue(0);

	uML_A_handlerBody_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_handlerBody_exceptionHandler_exceptionHandler->setValue(-1);

	uML_A_icon_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_icon_stereotype_stereotype->setValue(0);

	uML_A_importedElement_import_import_lowerValue_LiteralInteger_UML_A_importedElement_import_import->setValue(0);

	uML_A_importedElement_import_import_upperValue_LiteralUnlimitedNatural_UML_A_importedElement_import_import->setValue(-1);

	uML_A_importedMember_namespace_namespace_lowerValue_LiteralInteger_UML_A_importedMember_namespace_namespace->setValue(0);

	uML_A_importedMember_namespace_namespace_upperValue_LiteralUnlimitedNatural_UML_A_importedMember_namespace_namespace->setValue(-1);

	uML_A_importedPackage_packageImport_packageImport_lowerValue_LiteralInteger_UML_A_importedPackage_packageImport_packageImport->setValue(0);

	uML_A_importedPackage_packageImport_packageImport_upperValue_LiteralUnlimitedNatural_UML_A_importedPackage_packageImport_packageImport->setValue(-1);

	uML_A_inState_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_inState_objectNode_objectNode->setValue(0);

	uML_A_inState_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_inState_objectNode_objectNode->setValue(-1);

	uML_A_incoming_target_vertex_incoming_lowerValue_LiteralInteger_UML_A_incoming_target_vertex_incoming->setValue(0);

	uML_A_incoming_target_vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_A_incoming_target_vertex_incoming->setValue(-1);

	uML_A_informationSource_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationSource_informationFlow_informationFlow->setValue(0);

	uML_A_informationSource_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationSource_informationFlow_informationFlow->setValue(-1);

	uML_A_informationTarget_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationTarget_informationFlow_informationFlow->setValue(0);

	uML_A_informationTarget_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationTarget_informationFlow_informationFlow->setValue(-1);

	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_lowerValue_LiteralInteger_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier->setValue(0);

	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_upperValue_LiteralUnlimitedNatural_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier->setValue(-1);

	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature->setValue(0);

	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature->setValue(-1);

	uML_A_inputValue_linkAction_linkAction_lowerValue_LiteralInteger_UML_A_inputValue_linkAction_linkAction->setValue(0);

	uML_A_inputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_inputValue_opaqueAction_opaqueAction->setValue(0);

	uML_A_input_action_action_lowerValue_LiteralInteger_UML_A_input_action_action->setValue(0);

	uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction->setValue(0);

	uML_A_insertAt_addVariableValueAction_addVariableValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addVariableValueAction_addVariableValueAction->setValue(0);

	uML_A_insertAt_linkEndCreationData_linkEndCreationData_lowerValue_LiteralInteger_UML_A_insertAt_linkEndCreationData_linkEndCreationData->setValue(0);

	uML_A_instance_instanceValue_instanceValue_lowerValue_LiteralInteger_UML_A_instance_instanceValue_instanceValue->setValue(0);

	uML_A_instance_instanceValue_instanceValue_upperValue_LiteralUnlimitedNatural_UML_A_instance_instanceValue_instanceValue->setValue(-1);

	uML_A_invariant_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_invariant_stateInvariant_stateInvariant->setValue(0);

	uML_A_joinSpec_joinNode_joinNode_lowerValue_LiteralInteger_UML_A_joinSpec_joinNode_joinNode->setValue(0);

	uML_A_localPostcondition_action_action_lowerValue_LiteralInteger_UML_A_localPostcondition_action_action->setValue(0);

	uML_A_localPrecondition_action_action_lowerValue_LiteralInteger_UML_A_localPrecondition_action_action->setValue(0);

	uML_A_loopVariableInput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariableInput_loopNode_loopNode->setValue(0);

	uML_A_loopVariable_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariable_loopNode_loopNode->setValue(0);

	uML_A_lowerValue_owningLower_owningLower_lowerValue_LiteralInteger_UML_A_lowerValue_owningLower_owningLower->setValue(0);

	uML_A_mapping_abstraction_abstraction_lowerValue_LiteralInteger_UML_A_mapping_abstraction_abstraction->setValue(0);

	uML_A_max_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_max_durationInterval_durationInterval->setValue(0);

	uML_A_max_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_durationInterval_durationInterval->setValue(-1);

	uML_A_max_interval_interval_lowerValue_LiteralInteger_UML_A_max_interval_interval->setValue(0);

	uML_A_max_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_max_interval_interval->setValue(-1);

	uML_A_max_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_max_timeInterval_timeInterval->setValue(0);

	uML_A_max_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_timeInterval_timeInterval->setValue(-1);

	uML_A_maxint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_maxint_interactionConstraint_interactionConstraint->setValue(0);

	uML_A_member_memberNamespace_memberNamespace_lowerValue_LiteralInteger_UML_A_member_memberNamespace_memberNamespace->setValue(0);

	uML_A_member_memberNamespace_memberNamespace_upperValue_LiteralUnlimitedNatural_UML_A_member_memberNamespace_memberNamespace->setValue(-1);

	uML_A_mergedPackage_packageMerge_packageMerge_lowerValue_LiteralInteger_UML_A_mergedPackage_packageMerge_packageMerge->setValue(0);

	uML_A_mergedPackage_packageMerge_packageMerge_upperValue_LiteralUnlimitedNatural_UML_A_mergedPackage_packageMerge_packageMerge->setValue(-1);

	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_lowerValue_LiteralInteger_UML_A_message_considerIgnoreFragment_considerIgnoreFragment->setValue(0);

	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_upperValue_LiteralUnlimitedNatural_UML_A_message_considerIgnoreFragment_considerIgnoreFragment->setValue(-1);

	uML_A_message_messageEnd_messageEnd_lowerValue_LiteralInteger_UML_A_message_messageEnd_messageEnd->setValue(0);

	uML_A_message_messageEnd_messageEnd_upperValue_LiteralUnlimitedNatural_UML_A_message_messageEnd_messageEnd->setValue(2);

	uML_A_metaclassReference_profile_profile_lowerValue_LiteralInteger_UML_A_metaclassReference_profile_profile->setValue(0);

	uML_A_metamodelReference_profile_profile_lowerValue_LiteralInteger_UML_A_metamodelReference_profile_profile->setValue(0);

	uML_A_min_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_min_durationInterval_durationInterval->setValue(0);

	uML_A_min_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_durationInterval_durationInterval->setValue(-1);

	uML_A_min_interval_interval_lowerValue_LiteralInteger_UML_A_min_interval_interval->setValue(0);

	uML_A_min_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_min_interval_interval->setValue(-1);

	uML_A_min_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_min_timeInterval_timeInterval->setValue(0);

	uML_A_min_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_timeInterval_timeInterval->setValue(-1);

	uML_A_minint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_minint_interactionConstraint_interactionConstraint->setValue(0);

	uML_A_nameExpression_namedElement_namedElement_lowerValue_LiteralInteger_UML_A_nameExpression_namedElement_namedElement->setValue(0);

	uML_A_navigableOwnedEnd_association_association_lowerValue_LiteralInteger_UML_A_navigableOwnedEnd_association_association->setValue(0);

	uML_A_nestedArtifact_artifact_artifact_lowerValue_LiteralInteger_UML_A_nestedArtifact_artifact_artifact->setValue(0);

	uML_A_nestedClassifier_interface_interface_lowerValue_LiteralInteger_UML_A_nestedClassifier_interface_interface->setValue(0);

	uML_A_nestedClassifier_nestingClass_nestingClass_lowerValue_LiteralInteger_UML_A_nestedClassifier_nestingClass_nestingClass->setValue(0);

	uML_A_nestedNode_node_node_lowerValue_LiteralInteger_UML_A_nestedNode_node_node->setValue(0);

	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(0);

	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(-1);

	uML_A_object_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_object_clearAssociationAction_clearAssociationAction->setValue(0);

	uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(0);

	uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndAction_readLinkObjectEndAction->setValue(0);

	uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction->setValue(0);

	uML_A_object_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_object_reclassifyObjectAction_reclassifyObjectAction->setValue(0);

	uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction->setValue(0);

	uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startObjectBehaviorAction_startObjectBehaviorAction->setValue(0);

	uML_A_object_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_object_structuralFeatureAction_structuralFeatureAction->setValue(0);

	uML_A_object_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_object_unmarshallAction_unmarshallAction->setValue(0);

	uML_A_observation_duration_duration_lowerValue_LiteralInteger_UML_A_observation_duration_duration->setValue(0);

	uML_A_observation_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_observation_timeExpression_timeExpression->setValue(0);

	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(0);

	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(-1);

	uML_A_onPort_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_onPort_invocationAction_invocationAction->setValue(0);

	uML_A_onPort_invocationAction_invocationAction_upperValue_LiteralUnlimitedNatural_UML_A_onPort_invocationAction_invocationAction->setValue(-1);

	uML_A_operand_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_operand_combinedFragment_combinedFragment->setValue(0);

	uML_A_operand_expression_expression_lowerValue_LiteralInteger_UML_A_operand_expression_expression->setValue(0);

	uML_A_operation_callEvent_callEvent_lowerValue_LiteralInteger_UML_A_operation_callEvent_callEvent->setValue(0);

	uML_A_operation_callEvent_callEvent_upperValue_LiteralUnlimitedNatural_UML_A_operation_callEvent_callEvent->setValue(-1);

	uML_A_operation_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_operation_callOperationAction_callOperationAction->setValue(0);

	uML_A_operation_callOperationAction_callOperationAction_upperValue_LiteralUnlimitedNatural_UML_A_operation_callOperationAction_callOperationAction->setValue(-1);

	uML_A_opposite_property_property_lowerValue_LiteralInteger_UML_A_opposite_property_property->setValue(0);

	uML_A_outgoing_source_vertex_outgoing_lowerValue_LiteralInteger_UML_A_outgoing_source_vertex_outgoing->setValue(0);

	uML_A_outgoing_source_vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_A_outgoing_source_vertex_outgoing->setValue(-1);

	uML_A_outputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_outputValue_opaqueAction_opaqueAction->setValue(0);

	uML_A_output_action_action_lowerValue_LiteralInteger_UML_A_output_action_action->setValue(0);

	uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution_lowerValue_LiteralInteger_UML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution->setValue(0);

	uML_A_ownedAttribute_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedAttribute_artifact_artifact->setValue(0);

	uML_A_ownedAttribute_owningSignal_owningSignal_lowerValue_LiteralInteger_UML_A_ownedAttribute_owningSignal_owningSignal->setValue(0);

	uML_A_ownedAttribute_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedAttribute_structuredClassifier_structuredClassifier->setValue(0);

	uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_ownedBehavior_behavioredClassifier_behavioredClassifier->setValue(0);

	uML_A_ownedComment_owningElement_owningElement_lowerValue_LiteralInteger_UML_A_ownedComment_owningElement_owningElement->setValue(0);

	uML_A_ownedConnector_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedConnector_structuredClassifier_structuredClassifier->setValue(0);

	uML_A_ownedDefault_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_ownedDefault_templateParameter_templateParameter->setValue(0);

	uML_A_ownedOperation_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedOperation_artifact_artifact->setValue(0);

	uML_A_ownedParameterSet_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavior_behavior->setValue(0);

	uML_A_ownedParameterSet_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavioralFeature_behavioralFeature->setValue(0);

	uML_A_ownedParameter_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameter_behavior_behavior->setValue(0);

	uML_A_ownedParameter_ownerFormalParam_ownerFormalParam_lowerValue_LiteralInteger_UML_A_ownedParameter_ownerFormalParam_ownerFormalParam->setValue(0);

	uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier_lowerValue_LiteralInteger_UML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier->setValue(0);

	uML_A_ownedReception_class_class_lowerValue_LiteralInteger_UML_A_ownedReception_class_class->setValue(0);

	uML_A_ownedReception_interface_interface_lowerValue_LiteralInteger_UML_A_ownedReception_interface_interface->setValue(0);

	uML_A_ownedUseCase_classifier_classifier_lowerValue_LiteralInteger_UML_A_ownedUseCase_classifier_classifier->setValue(0);

	uML_A_packagedElement_component_component_lowerValue_LiteralInteger_UML_A_packagedElement_component_component->setValue(0);

	uML_A_packagedElement_owningPackage_owningPackage_lowerValue_LiteralInteger_UML_A_packagedElement_owningPackage_owningPackage->setValue(0);

	uML_A_parameter_activityParameterNode_activityParameterNode_lowerValue_LiteralInteger_UML_A_parameter_activityParameterNode_activityParameterNode->setValue(0);

	uML_A_parameter_activityParameterNode_activityParameterNode_upperValue_LiteralUnlimitedNatural_UML_A_parameter_activityParameterNode_activityParameterNode->setValue(-1);

	uML_A_parameter_templateSignature_templateSignature_lowerValue_LiteralInteger_UML_A_parameter_templateSignature_templateSignature->setValue(0);

	uML_A_parameter_templateSignature_templateSignature_upperValue_LiteralUnlimitedNatural_UML_A_parameter_templateSignature_templateSignature->setValue(-1);

	uML_A_partWithPort_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_partWithPort_connectorEnd_connectorEnd->setValue(0);

	uML_A_partWithPort_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_partWithPort_connectorEnd_connectorEnd->setValue(-1);

	uML_A_part_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_part_structuredClassifier_structuredClassifier->setValue(0);

	uML_A_partition_activity_activity_lowerValue_LiteralInteger_UML_A_partition_activity_activity->setValue(0);

	uML_A_port_trigger_trigger_lowerValue_LiteralInteger_UML_A_port_trigger_trigger->setValue(0);

	uML_A_port_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_port_trigger_trigger->setValue(-1);

	uML_A_postCondition_owningTransition_owningTransition_lowerValue_LiteralInteger_UML_A_postCondition_owningTransition_owningTransition->setValue(0);

	uML_A_postcondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_postcondition_behavior_behavior->setValue(0);

	uML_A_postcondition_postContext_postContext_lowerValue_LiteralInteger_UML_A_postcondition_postContext_postContext->setValue(0);

	uML_A_preCondition_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_preCondition_protocolTransition_protocolTransition->setValue(0);

	uML_A_precondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_precondition_behavior_behavior->setValue(0);

	uML_A_precondition_preContext_preContext_lowerValue_LiteralInteger_UML_A_precondition_preContext_preContext->setValue(0);

	uML_A_profile_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_profile_stereotype_stereotype->setValue(0);

	uML_A_profile_stereotype_stereotype_upperValue_LiteralUnlimitedNatural_UML_A_profile_stereotype_stereotype->setValue(-1);

	uML_A_protocol_interface_interface_lowerValue_LiteralInteger_UML_A_protocol_interface_interface->setValue(0);

	uML_A_protocol_port_port_lowerValue_LiteralInteger_UML_A_protocol_port_port->setValue(0);

	uML_A_protocol_port_port_upperValue_LiteralUnlimitedNatural_UML_A_protocol_port_port->setValue(-1);

	uML_A_provided_component_component_lowerValue_LiteralInteger_UML_A_provided_component_component->setValue(0);

	uML_A_provided_component_component_upperValue_LiteralUnlimitedNatural_UML_A_provided_component_component->setValue(-1);

	uML_A_provided_port_port_lowerValue_LiteralInteger_UML_A_provided_port_port->setValue(0);

	uML_A_provided_port_port_upperValue_LiteralUnlimitedNatural_UML_A_provided_port_port->setValue(-1);

	uML_A_qualifier_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_qualifier_qualifierValue_qualifierValue->setValue(0);

	uML_A_qualifier_qualifierValue_qualifierValue_upperValue_LiteralUnlimitedNatural_UML_A_qualifier_qualifierValue_qualifierValue->setValue(-1);

	uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction->setValue(0);

	uML_A_raisedException_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_raisedException_behavioralFeature_behavioralFeature->setValue(0);

	uML_A_raisedException_behavioralFeature_behavioralFeature_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_behavioralFeature_behavioralFeature->setValue(-1);

	uML_A_raisedException_operation_operation_lowerValue_LiteralInteger_UML_A_raisedException_operation_operation->setValue(0);

	uML_A_raisedException_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_operation_operation->setValue(-1);

	uML_A_realization_abstraction_flow_abstraction_lowerValue_LiteralInteger_UML_A_realization_abstraction_flow_abstraction->setValue(0);

	uML_A_realization_abstraction_flow_abstraction_upperValue_LiteralUnlimitedNatural_UML_A_realization_abstraction_flow_abstraction->setValue(-1);

	uML_A_realizingActivityEdge_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingActivityEdge_informationFlow_informationFlow->setValue(0);

	uML_A_realizingActivityEdge_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingActivityEdge_informationFlow_informationFlow->setValue(-1);

	uML_A_realizingClassifier_componentRealization_componentRealization_lowerValue_LiteralInteger_UML_A_realizingClassifier_componentRealization_componentRealization->setValue(0);

	uML_A_realizingClassifier_componentRealization_componentRealization_upperValue_LiteralUnlimitedNatural_UML_A_realizingClassifier_componentRealization_componentRealization->setValue(-1);

	uML_A_realizingConnector_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingConnector_informationFlow_informationFlow->setValue(0);

	uML_A_realizingConnector_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingConnector_informationFlow_informationFlow->setValue(-1);

	uML_A_realizingMessage_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingMessage_informationFlow_informationFlow->setValue(0);

	uML_A_realizingMessage_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingMessage_informationFlow_informationFlow->setValue(-1);

	uML_A_receiveEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_receiveEvent_endMessage_endMessage->setValue(0);

	uML_A_redefinedBehavior_behavior_behavior_lowerValue_LiteralInteger_UML_A_redefinedBehavior_behavior_behavior->setValue(0);

	uML_A_redefinedBehavior_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_redefinedBehavior_behavior_behavior->setValue(-1);

	uML_A_redefinedClassifier_classifier_classifier_lowerValue_LiteralInteger_UML_A_redefinedClassifier_classifier_classifier->setValue(0);

	uML_A_redefinedClassifier_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_redefinedClassifier_classifier_classifier->setValue(-1);

	uML_A_redefinedConnector_connector_connector_lowerValue_LiteralInteger_UML_A_redefinedConnector_connector_connector->setValue(0);

	uML_A_redefinedConnector_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_redefinedConnector_connector_connector->setValue(-1);

	uML_A_redefinedEdge_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_redefinedEdge_activityEdge_activityEdge->setValue(0);

	uML_A_redefinedEdge_activityEdge_activityEdge_upperValue_LiteralUnlimitedNatural_UML_A_redefinedEdge_activityEdge_activityEdge->setValue(-1);

	uML_A_redefinedElement_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinedElement_redefinableElement_redefinableElement->setValue(0);

	uML_A_redefinedElement_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinedElement_redefinableElement_redefinableElement->setValue(-1);

	uML_A_redefinedInterface_interface_interface_lowerValue_LiteralInteger_UML_A_redefinedInterface_interface_interface->setValue(0);

	uML_A_redefinedInterface_interface_interface_upperValue_LiteralUnlimitedNatural_UML_A_redefinedInterface_interface_interface->setValue(-1);

	uML_A_redefinedNode_activityNode_activityNode_lowerValue_LiteralInteger_UML_A_redefinedNode_activityNode_activityNode->setValue(0);

	uML_A_redefinedNode_activityNode_activityNode_upperValue_LiteralUnlimitedNatural_UML_A_redefinedNode_activityNode_activityNode->setValue(-1);

	uML_A_redefinedOperation_operation_operation_lowerValue_LiteralInteger_UML_A_redefinedOperation_operation_operation->setValue(0);

	uML_A_redefinedOperation_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_redefinedOperation_operation_operation->setValue(-1);

	uML_A_redefinedPort_port_port_lowerValue_LiteralInteger_UML_A_redefinedPort_port_port->setValue(0);

	uML_A_redefinedPort_port_port_upperValue_LiteralUnlimitedNatural_UML_A_redefinedPort_port_port->setValue(-1);

	uML_A_redefinedProperty_property_property_lowerValue_LiteralInteger_UML_A_redefinedProperty_property_property->setValue(0);

	uML_A_redefinedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_redefinedProperty_property_property->setValue(-1);

	uML_A_redefinedState_state_state_lowerValue_LiteralInteger_UML_A_redefinedState_state_state->setValue(0);

	uML_A_redefinedState_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinedState_state_state->setValue(-1);

	uML_A_redefinedTransition_transition_transition_lowerValue_LiteralInteger_UML_A_redefinedTransition_transition_transition->setValue(0);

	uML_A_redefinedTransition_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinedTransition_transition_transition->setValue(-1);

	uML_A_redefinitionContext_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinitionContext_redefinableElement_redefinableElement->setValue(0);

	uML_A_redefinitionContext_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_redefinableElement_redefinableElement->setValue(-1);

	uML_A_redefinitionContext_region_region_lowerValue_LiteralInteger_UML_A_redefinitionContext_region_region->setValue(0);

	uML_A_redefinitionContext_region_region_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_region_region->setValue(-1);

	uML_A_redefinitionContext_state_state_lowerValue_LiteralInteger_UML_A_redefinitionContext_state_state->setValue(0);

	uML_A_redefinitionContext_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_state_state->setValue(-1);

	uML_A_redefinitionContext_transition_transition_lowerValue_LiteralInteger_UML_A_redefinitionContext_transition_transition->setValue(0);

	uML_A_redefinitionContext_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_transition_transition->setValue(-1);

	uML_A_reducer_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_reducer_reduceAction_reduceAction->setValue(0);

	uML_A_reducer_reduceAction_reduceAction_upperValue_LiteralUnlimitedNatural_UML_A_reducer_reduceAction_reduceAction->setValue(-1);

	uML_A_referred_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_referred_protocolTransition_protocolTransition->setValue(0);

	uML_A_referred_protocolTransition_protocolTransition_upperValue_LiteralUnlimitedNatural_UML_A_referred_protocolTransition_protocolTransition->setValue(-1);

	uML_A_refersTo_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_refersTo_interactionUse_interactionUse->setValue(0);

	uML_A_refersTo_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_refersTo_interactionUse_interactionUse->setValue(-1);

	uML_A_relatedElement_relationship_relationship_lowerValue_LiteralInteger_UML_A_relatedElement_relationship_relationship->setValue(0);

	uML_A_relatedElement_relationship_relationship_upperValue_LiteralUnlimitedNatural_UML_A_relatedElement_relationship_relationship->setValue(-1);

	uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction->setValue(0);

	uML_A_removeAt_removeVariableValueAction_removeVariableValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeVariableValueAction_removeVariableValueAction->setValue(0);

	uML_A_replyToCall_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyToCall_replyAction_replyAction->setValue(0);

	uML_A_replyValue_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyValue_replyAction_replyAction->setValue(0);

	uML_A_representation_classifier_classifier_lowerValue_LiteralInteger_UML_A_representation_classifier_classifier->setValue(0);

	uML_A_represented_representation_representation_lowerValue_LiteralInteger_UML_A_represented_representation_representation->setValue(0);

	uML_A_represented_representation_representation_upperValue_LiteralUnlimitedNatural_UML_A_represented_representation_representation->setValue(-1);

	uML_A_represents_activityPartition_activityPartition_lowerValue_LiteralInteger_UML_A_represents_activityPartition_activityPartition->setValue(0);

	uML_A_represents_activityPartition_activityPartition_upperValue_LiteralUnlimitedNatural_UML_A_represents_activityPartition_activityPartition->setValue(-1);

	uML_A_represents_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_represents_lifeline_lifeline->setValue(0);

	uML_A_represents_lifeline_lifeline_upperValue_LiteralUnlimitedNatural_UML_A_represents_lifeline_lifeline->setValue(-1);

	uML_A_request_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_request_sendObjectAction_sendObjectAction->setValue(0);

	uML_A_required_component_component_lowerValue_LiteralInteger_UML_A_required_component_component->setValue(0);

	uML_A_required_component_component_upperValue_LiteralUnlimitedNatural_UML_A_required_component_component->setValue(-1);

	uML_A_required_port_port_lowerValue_LiteralInteger_UML_A_required_port_port->setValue(0);

	uML_A_required_port_port_upperValue_LiteralUnlimitedNatural_UML_A_required_port_port->setValue(-1);

	uML_A_result_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_result_acceptEventAction_acceptEventAction->setValue(0);

	uML_A_result_callAction_callAction_lowerValue_LiteralInteger_UML_A_result_callAction_callAction->setValue(0);

	uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction->setValue(0);

	uML_A_result_conditionalNode_conditionalNode_lowerValue_LiteralInteger_UML_A_result_conditionalNode_conditionalNode->setValue(0);

	uML_A_result_createLinkObjectAction_createLinkObjectAction_lowerValue_LiteralInteger_UML_A_result_createLinkObjectAction_createLinkObjectAction->setValue(0);

	uML_A_result_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_result_createObjectAction_createObjectAction->setValue(0);

	uML_A_result_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_result_loopNode_loopNode->setValue(0);

	uML_A_result_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_result_opaqueExpression_opaqueExpression->setValue(0);

	uML_A_result_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_result_opaqueExpression_opaqueExpression->setValue(-1);

	uML_A_result_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_result_readExtentAction_readExtentAction->setValue(0);

	uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(0);

	uML_A_result_readLinkAction_readLinkAction_lowerValue_LiteralInteger_UML_A_result_readLinkAction_readLinkAction->setValue(0);

	uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndAction_readLinkObjectEndAction->setValue(0);

	uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction->setValue(0);

	uML_A_result_readSelfAction_readSelfAction_lowerValue_LiteralInteger_UML_A_result_readSelfAction_readSelfAction->setValue(0);

	uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_readStructuralFeatureAction_readStructuralFeatureAction->setValue(0);

	uML_A_result_readVariableAction_readVariableAction_lowerValue_LiteralInteger_UML_A_result_readVariableAction_readVariableAction->setValue(0);

	uML_A_result_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_result_reduceAction_reduceAction->setValue(0);

	uML_A_result_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_result_testIdentityAction_testIdentityAction->setValue(0);

	uML_A_result_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_result_unmarshallAction_unmarshallAction->setValue(0);

	uML_A_result_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_result_valueSpecificationAction_valueSpecificationAction->setValue(0);

	uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction->setValue(0);

	uML_A_returnInformation_acceptCallAction_acceptCallAction_lowerValue_LiteralInteger_UML_A_returnInformation_acceptCallAction_acceptCallAction->setValue(0);

	uML_A_returnInformation_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_returnInformation_replyAction_replyAction->setValue(0);

	uML_A_returnValueRecipient_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValueRecipient_interactionUse_interactionUse->setValue(0);

	uML_A_returnValueRecipient_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_returnValueRecipient_interactionUse_interactionUse->setValue(-1);

	uML_A_returnValue_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValue_interactionUse_interactionUse->setValue(0);

	uML_A_roleBinding_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_roleBinding_collaborationUse_collaborationUse->setValue(0);

	uML_A_role_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_role_structuredClassifier_structuredClassifier->setValue(0);

	uML_A_role_structuredClassifier_structuredClassifier_upperValue_LiteralUnlimitedNatural_UML_A_role_structuredClassifier_structuredClassifier->setValue(-1);

	uML_A_second_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_second_testIdentityAction_testIdentityAction->setValue(0);

	uML_A_selection_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_selection_objectFlow_objectFlow->setValue(0);

	uML_A_selection_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectFlow_objectFlow->setValue(-1);

	uML_A_selection_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_selection_objectNode_objectNode->setValue(0);

	uML_A_selection_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectNode_objectNode->setValue(-1);

	uML_A_selector_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_selector_lifeline_lifeline->setValue(0);

	uML_A_sendEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_sendEvent_endMessage_endMessage->setValue(0);

	uML_A_setupPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_setupPart_loopNode_loopNode->setValue(0);

	uML_A_signal_broadcastSignalAction_broadcastSignalAction_lowerValue_LiteralInteger_UML_A_signal_broadcastSignalAction_broadcastSignalAction->setValue(0);

	uML_A_signal_broadcastSignalAction_broadcastSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_broadcastSignalAction_broadcastSignalAction->setValue(-1);

	uML_A_signal_reception_reception_lowerValue_LiteralInteger_UML_A_signal_reception_reception->setValue(0);

	uML_A_signal_reception_reception_upperValue_LiteralUnlimitedNatural_UML_A_signal_reception_reception->setValue(-1);

	uML_A_signal_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_signal_sendSignalAction_sendSignalAction->setValue(0);

	uML_A_signal_sendSignalAction_sendSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_sendSignalAction_sendSignalAction->setValue(-1);

	uML_A_signal_signalEvent_signalEvent_lowerValue_LiteralInteger_UML_A_signal_signalEvent_signalEvent->setValue(0);

	uML_A_signal_signalEvent_signalEvent_upperValue_LiteralUnlimitedNatural_UML_A_signal_signalEvent_signalEvent->setValue(-1);

	uML_A_signature_message_message_lowerValue_LiteralInteger_UML_A_signature_message_message->setValue(0);

	uML_A_signature_message_message_upperValue_LiteralUnlimitedNatural_UML_A_signature_message_message->setValue(-1);

	uML_A_signature_templateBinding_templateBinding_lowerValue_LiteralInteger_UML_A_signature_templateBinding_templateBinding->setValue(0);

	uML_A_signature_templateBinding_templateBinding_upperValue_LiteralUnlimitedNatural_UML_A_signature_templateBinding_templateBinding->setValue(-1);

	uML_A_source_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_source_directedRelationship_directedRelationship->setValue(0);

	uML_A_source_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_source_directedRelationship_directedRelationship->setValue(-1);

	uML_A_specification_durationConstraint_durationConstraint_lowerValue_LiteralInteger_UML_A_specification_durationConstraint_durationConstraint->setValue(0);

	uML_A_specification_intervalConstraint_intervalConstraint_lowerValue_LiteralInteger_UML_A_specification_intervalConstraint_intervalConstraint->setValue(0);

	uML_A_specification_owningConstraint_owningConstraint_lowerValue_LiteralInteger_UML_A_specification_owningConstraint_owningConstraint->setValue(0);

	uML_A_specification_owningInstanceSpec_owningInstanceSpec_lowerValue_LiteralInteger_UML_A_specification_owningInstanceSpec_owningInstanceSpec->setValue(0);

	uML_A_specification_timeConstraint_timeConstraint_lowerValue_LiteralInteger_UML_A_specification_timeConstraint_timeConstraint->setValue(0);

	uML_A_start_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_start_executionSpecification_executionSpecification->setValue(0);

	uML_A_start_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_start_executionSpecification_executionSpecification->setValue(-1);

	uML_A_stateInvariant_owningState_owningState_lowerValue_LiteralInteger_UML_A_stateInvariant_owningState_owningState->setValue(0);

	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction->setValue(0);

	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_upperValue_LiteralUnlimitedNatural_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction->setValue(-1);

	uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode->setValue(0);

	uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode->setValue(0);

	uML_A_structuredNode_activity_activity_lowerValue_LiteralInteger_UML_A_structuredNode_activity_activity->setValue(0);

	uML_A_subsettedProperty_property_property_lowerValue_LiteralInteger_UML_A_subsettedProperty_property_property->setValue(0);

	uML_A_subsettedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_subsettedProperty_property_property->setValue(-1);

	uML_A_superClass_class_class_lowerValue_LiteralInteger_UML_A_superClass_class_class->setValue(0);

	uML_A_superClass_class_class_upperValue_LiteralUnlimitedNatural_UML_A_superClass_class_class->setValue(-1);

	uML_A_supplier_supplierDependency_supplierDependency_lowerValue_LiteralInteger_UML_A_supplier_supplierDependency_supplierDependency->setValue(0);

	uML_A_supplier_supplierDependency_supplierDependency_upperValue_LiteralUnlimitedNatural_UML_A_supplier_supplierDependency_supplierDependency->setValue(-1);

	uML_A_target_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_target_callOperationAction_callOperationAction->setValue(0);

	uML_A_target_destroyObjectAction_destroyObjectAction_lowerValue_LiteralInteger_UML_A_target_destroyObjectAction_destroyObjectAction->setValue(0);

	uML_A_target_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_target_directedRelationship_directedRelationship->setValue(0);

	uML_A_target_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_target_directedRelationship_directedRelationship->setValue(-1);

	uML_A_target_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_target_sendObjectAction_sendObjectAction->setValue(0);

	uML_A_target_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_target_sendSignalAction_sendSignalAction->setValue(0);

	uML_A_test_clause_clause_lowerValue_LiteralInteger_UML_A_test_clause_clause->setValue(0);

	uML_A_test_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_test_loopNode_loopNode->setValue(0);

	uML_A_transformation_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_transformation_objectFlow_objectFlow->setValue(0);

	uML_A_transformation_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_transformation_objectFlow_objectFlow->setValue(-1);

	uML_A_trigger_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_trigger_acceptEventAction_acceptEventAction->setValue(0);

	uML_A_trigger_transition_transition_lowerValue_LiteralInteger_UML_A_trigger_transition_transition->setValue(0);

	uML_A_type_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_type_collaborationUse_collaborationUse->setValue(0);

	uML_A_type_collaborationUse_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_A_type_collaborationUse_collaborationUse->setValue(-1);

	uML_A_type_connector_connector_lowerValue_LiteralInteger_UML_A_type_connector_connector->setValue(0);

	uML_A_type_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_type_connector_connector->setValue(-1);

	uML_A_type_extensionEnd_extensionEnd_lowerValue_LiteralInteger_UML_A_type_extensionEnd_extensionEnd->setValue(0);

	uML_A_type_extensionEnd_extensionEnd_upperValue_LiteralUnlimitedNatural_UML_A_type_extensionEnd_extensionEnd->setValue(-1);

	uML_A_type_operation_operation_lowerValue_LiteralInteger_UML_A_type_operation_operation->setValue(0);

	uML_A_type_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_type_operation_operation->setValue(-1);

	uML_A_type_typedElement_typedElement_lowerValue_LiteralInteger_UML_A_type_typedElement_typedElement->setValue(0);

	uML_A_type_typedElement_typedElement_upperValue_LiteralUnlimitedNatural_UML_A_type_typedElement_typedElement->setValue(-1);

	uML_A_unmarshallType_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_unmarshallType_unmarshallAction_unmarshallAction->setValue(0);

	uML_A_unmarshallType_unmarshallAction_unmarshallAction_upperValue_LiteralUnlimitedNatural_UML_A_unmarshallType_unmarshallAction_unmarshallAction->setValue(-1);

	uML_A_upperBound_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_upperBound_objectNode_objectNode->setValue(0);

	uML_A_upperValue_owningUpper_owningUpper_lowerValue_LiteralInteger_UML_A_upperValue_owningUpper_owningUpper->setValue(0);

	uML_A_utilizedElement_manifestation_manifestation_lowerValue_LiteralInteger_UML_A_utilizedElement_manifestation_manifestation->setValue(0);

	uML_A_utilizedElement_manifestation_manifestation_upperValue_LiteralUnlimitedNatural_UML_A_utilizedElement_manifestation_manifestation->setValue(-1);

	uML_A_value_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_value_linkEndData_linkEndData->setValue(0);

	uML_A_value_owningSlot_owningSlot_lowerValue_LiteralInteger_UML_A_value_owningSlot_owningSlot->setValue(0);

	uML_A_value_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_value_qualifierValue_qualifierValue->setValue(0);

	uML_A_value_valuePin_valuePin_lowerValue_LiteralInteger_UML_A_value_valuePin_valuePin->setValue(0);

	uML_A_value_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_value_valueSpecificationAction_valueSpecificationAction->setValue(0);

	uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction->setValue(0);

	uML_A_value_writeVariableAction_writeVariableAction_lowerValue_LiteralInteger_UML_A_value_writeVariableAction_writeVariableAction->setValue(0);

	uML_A_variable_variableAction_variableAction_lowerValue_LiteralInteger_UML_A_variable_variableAction_variableAction->setValue(0);

	uML_A_variable_variableAction_variableAction_upperValue_LiteralUnlimitedNatural_UML_A_variable_variableAction_variableAction->setValue(-1);

	uML_A_weight_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_weight_activityEdge_activityEdge->setValue(0);

	uML_A_when_timeEvent_timeEvent_lowerValue_LiteralInteger_UML_A_when_timeEvent_timeEvent->setValue(0);

	uML_Abstraction_mapping_lowerValue_LiteralInteger_UML_Abstraction_mapping->setValue(0);

	

	

	

	

	uML_AcceptEventAction_isUnmarshall_defaultValue_LiteralBoolean_UML_AcceptEventAction_isUnmarshall->setValue(false);

	

	

	

	uML_AcceptEventAction_result_lowerValue_LiteralInteger_UML_AcceptEventAction_result->setValue(0);

	uML_AcceptEventAction_result_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_result->setValue(-1);

	uML_AcceptEventAction_trigger_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_trigger->setValue(-1);

	

	

	

	

	

	uML_Action_allActions_result_lowerValue_LiteralInteger_UML_Action_allActions_result->setValue(0);

	uML_Action_allActions_result_upperValue_LiteralUnlimitedNatural_UML_Action_allActions_result->setValue(-1);

	

	uML_Action_allOwnedNodes_result_lowerValue_LiteralInteger_UML_Action_allOwnedNodes_result->setValue(0);

	uML_Action_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_Action_allOwnedNodes_result->setValue(-1);

	

	uML_Action_containingBehavior_result_lowerValue_LiteralInteger_UML_Action_containingBehavior_result->setValue(0);

	

	uML_Action_context_lowerValue_LiteralInteger_UML_Action_context->setValue(0);

	uML_Action_context_result_lowerValue_LiteralInteger_UML_Action_context_result->setValue(0);

	

	uML_Action_input_lowerValue_LiteralInteger_UML_Action_input->setValue(0);

	uML_Action_input_upperValue_LiteralUnlimitedNatural_UML_Action_input->setValue(-1);

	uML_Action_isLocallyReentrant_defaultValue_LiteralBoolean_UML_Action_isLocallyReentrant->setValue(false);

	uML_Action_localPostcondition_lowerValue_LiteralInteger_UML_Action_localPostcondition->setValue(0);

	uML_Action_localPostcondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPostcondition->setValue(-1);

	uML_Action_localPrecondition_lowerValue_LiteralInteger_UML_Action_localPrecondition->setValue(0);

	uML_Action_localPrecondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPrecondition->setValue(-1);

	uML_Action_output_lowerValue_LiteralInteger_UML_Action_output->setValue(0);

	uML_Action_output_upperValue_LiteralUnlimitedNatural_UML_Action_output->setValue(-1);

	uML_ActivityContent_containingActivity_containingActivity_lowerValue_LiteralInteger_UML_ActivityContent_containingActivity_containingActivity->setValue(0);

	uML_ActivityEdge_activity_lowerValue_LiteralInteger_UML_ActivityEdge_activity->setValue(0);

	uML_ActivityEdge_guard_lowerValue_LiteralInteger_UML_ActivityEdge_guard->setValue(0);

	uML_ActivityEdge_inGroup_lowerValue_LiteralInteger_UML_ActivityEdge_inGroup->setValue(0);

	uML_ActivityEdge_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inGroup->setValue(-1);

	uML_ActivityEdge_inPartition_lowerValue_LiteralInteger_UML_ActivityEdge_inPartition->setValue(0);

	uML_ActivityEdge_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inPartition->setValue(-1);

	uML_ActivityEdge_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityEdge_inStructuredNode->setValue(0);

	uML_ActivityEdge_interrupts_lowerValue_LiteralInteger_UML_ActivityEdge_interrupts->setValue(0);

	

	uML_ActivityEdge_redefinedEdge_lowerValue_LiteralInteger_UML_ActivityEdge_redefinedEdge->setValue(0);

	uML_ActivityEdge_redefinedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_redefinedEdge->setValue(-1);

	

	uML_ActivityEdge_weight_lowerValue_LiteralInteger_UML_ActivityEdge_weight->setValue(0);

	uML_ActivityGroup_containedEdge_lowerValue_LiteralInteger_UML_ActivityGroup_containedEdge->setValue(0);

	uML_ActivityGroup_containedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedEdge->setValue(-1);

	uML_ActivityGroup_containedNode_lowerValue_LiteralInteger_UML_ActivityGroup_containedNode->setValue(0);

	uML_ActivityGroup_containedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedNode->setValue(-1);

	uML_ActivityGroup_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityGroup_containingActivity_result->setValue(0);

	

	uML_ActivityGroup_inActivity_lowerValue_LiteralInteger_UML_ActivityGroup_inActivity->setValue(0);

	

	

	uML_ActivityGroup_subgroup_lowerValue_LiteralInteger_UML_ActivityGroup_subgroup->setValue(0);

	uML_ActivityGroup_subgroup_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_subgroup->setValue(-1);

	uML_ActivityGroup_superGroup_lowerValue_LiteralInteger_UML_ActivityGroup_superGroup->setValue(0);

	uML_ActivityNode_activity_lowerValue_LiteralInteger_UML_ActivityNode_activity->setValue(0);

	uML_ActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityNode_containingActivity_result->setValue(0);

	

	uML_ActivityNode_inGroup_lowerValue_LiteralInteger_UML_ActivityNode_inGroup->setValue(0);

	uML_ActivityNode_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inGroup->setValue(-1);

	uML_ActivityNode_inInterruptibleRegion_lowerValue_LiteralInteger_UML_ActivityNode_inInterruptibleRegion->setValue(0);

	uML_ActivityNode_inInterruptibleRegion_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inInterruptibleRegion->setValue(-1);

	uML_ActivityNode_inPartition_lowerValue_LiteralInteger_UML_ActivityNode_inPartition->setValue(0);

	uML_ActivityNode_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inPartition->setValue(-1);

	uML_ActivityNode_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityNode_inStructuredNode->setValue(0);

	uML_ActivityNode_incoming_lowerValue_LiteralInteger_UML_ActivityNode_incoming->setValue(0);

	uML_ActivityNode_incoming_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_incoming->setValue(-1);

	

	uML_ActivityNode_outgoing_lowerValue_LiteralInteger_UML_ActivityNode_outgoing->setValue(0);

	uML_ActivityNode_outgoing_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_outgoing->setValue(-1);

	uML_ActivityNode_redefinedNode_lowerValue_LiteralInteger_UML_ActivityNode_redefinedNode->setValue(0);

	uML_ActivityNode_redefinedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_redefinedNode->setValue(-1);

	

	

	

	

	

	

	uML_ActivityPartition_edge_lowerValue_LiteralInteger_UML_ActivityPartition_edge->setValue(0);

	uML_ActivityPartition_edge_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_edge->setValue(-1);

	uML_ActivityPartition_isDimension_defaultValue_LiteralBoolean_UML_ActivityPartition_isDimension->setValue(false);

	uML_ActivityPartition_isExternal_defaultValue_LiteralBoolean_UML_ActivityPartition_isExternal->setValue(false);

	uML_ActivityPartition_node_lowerValue_LiteralInteger_UML_ActivityPartition_node->setValue(0);

	uML_ActivityPartition_node_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_node->setValue(-1);

	

	uML_ActivityPartition_represents_lowerValue_LiteralInteger_UML_ActivityPartition_represents->setValue(0);

	

	

	uML_ActivityPartition_subpartition_lowerValue_LiteralInteger_UML_ActivityPartition_subpartition->setValue(0);

	uML_ActivityPartition_subpartition_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_subpartition->setValue(-1);

	uML_ActivityPartition_superPartition_lowerValue_LiteralInteger_UML_ActivityPartition_superPartition->setValue(0);

	uML_Activity_edge_lowerValue_LiteralInteger_UML_Activity_edge->setValue(0);

	uML_Activity_edge_upperValue_LiteralUnlimitedNatural_UML_Activity_edge->setValue(-1);

	uML_Activity_group_lowerValue_LiteralInteger_UML_Activity_group->setValue(0);

	uML_Activity_group_upperValue_LiteralUnlimitedNatural_UML_Activity_group->setValue(-1);

	uML_Activity_isReadOnly_defaultValue_LiteralBoolean_UML_Activity_isReadOnly->setValue(false);

	uML_Activity_isSingleExecution_defaultValue_LiteralBoolean_UML_Activity_isSingleExecution->setValue(false);

	

	

	uML_Activity_node_lowerValue_LiteralInteger_UML_Activity_node->setValue(0);

	uML_Activity_node_upperValue_LiteralUnlimitedNatural_UML_Activity_node->setValue(-1);

	uML_Activity_ownedGroup_lowerValue_LiteralInteger_UML_Activity_ownedGroup->setValue(0);

	uML_Activity_ownedGroup_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedGroup->setValue(-1);

	uML_Activity_ownedNode_lowerValue_LiteralInteger_UML_Activity_ownedNode->setValue(0);

	uML_Activity_ownedNode_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedNode->setValue(-1);

	uML_Activity_partition_lowerValue_LiteralInteger_UML_Activity_partition->setValue(0);

	uML_Activity_partition_upperValue_LiteralUnlimitedNatural_UML_Activity_partition->setValue(-1);

	uML_Activity_structuredNode_lowerValue_LiteralInteger_UML_Activity_structuredNode->setValue(0);

	uML_Activity_structuredNode_upperValue_LiteralUnlimitedNatural_UML_Activity_structuredNode->setValue(-1);

	uML_Activity_variable_lowerValue_LiteralInteger_UML_Activity_variable->setValue(0);

	uML_Activity_variable_upperValue_LiteralUnlimitedNatural_UML_Activity_variable->setValue(-1);

	

	

	uML_AddStructuralFeatureValueAction_insertAt_lowerValue_LiteralInteger_UML_AddStructuralFeatureValueAction_insertAt->setValue(0);

	

	uML_AddStructuralFeatureValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddStructuralFeatureValueAction_isReplaceAll->setValue(false);

	

	uML_AddVariableValueAction_insertAt_lowerValue_LiteralInteger_UML_AddVariableValueAction_insertAt->setValue(0);

	

	uML_AddVariableValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddVariableValueAction_isReplaceAll->setValue(false);

	

	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(0);

	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(1);

	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(0);

	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(1);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(0);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(1);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(0);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(-1);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(0);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(-1);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(0);

	uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(1);

	uML_Artifact_fileName_lowerValue_LiteralInteger_UML_Artifact_fileName->setValue(0);

	uML_Artifact_manifestation_lowerValue_LiteralInteger_UML_Artifact_manifestation->setValue(0);

	uML_Artifact_manifestation_upperValue_LiteralUnlimitedNatural_UML_Artifact_manifestation->setValue(-1);

	uML_Artifact_nestedArtifact_lowerValue_LiteralInteger_UML_Artifact_nestedArtifact->setValue(0);

	uML_Artifact_nestedArtifact_upperValue_LiteralUnlimitedNatural_UML_Artifact_nestedArtifact->setValue(-1);

	uML_Artifact_ownedAttribute_lowerValue_LiteralInteger_UML_Artifact_ownedAttribute->setValue(0);

	uML_Artifact_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedAttribute->setValue(-1);

	uML_Artifact_ownedOperation_lowerValue_LiteralInteger_UML_Artifact_ownedOperation->setValue(0);

	uML_Artifact_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedOperation->setValue(-1);

	

	

	

	

	uML_Association_endType_result_upperValue_LiteralUnlimitedNatural_UML_Association_endType_result->setValue(-1);

	

	uML_Association_endType_upperValue_LiteralUnlimitedNatural_UML_Association_endType->setValue(-1);

	

	uML_Association_isDerived_defaultValue_LiteralBoolean_UML_Association_isDerived->setValue(false);

	uML_Association_memberEnd_lowerValue_LiteralInteger_UML_Association_memberEnd->setValue(2);

	uML_Association_memberEnd_upperValue_LiteralUnlimitedNatural_UML_Association_memberEnd->setValue(-1);

	uML_Association_navigableOwnedEnd_lowerValue_LiteralInteger_UML_Association_navigableOwnedEnd->setValue(0);

	uML_Association_navigableOwnedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_navigableOwnedEnd->setValue(-1);

	uML_Association_ownedEnd_lowerValue_LiteralInteger_UML_Association_ownedEnd->setValue(0);

	uML_Association_ownedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_ownedEnd->setValue(-1);

	

	

	uML_BehaviorExecutionSpecification_behavior_lowerValue_LiteralInteger_UML_BehaviorExecutionSpecification_behavior->setValue(0);

	uML_Behavior_behavioredClassifier_result_lowerValue_LiteralInteger_UML_Behavior_behavioredClassifier_result->setValue(0);

	

	uML_Behavior_context_lowerValue_LiteralInteger_UML_Behavior_context->setValue(0);

	uML_Behavior_context_result_lowerValue_LiteralInteger_UML_Behavior_context_result->setValue(0);

	uML_Behavior_context_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_context_result->setValue(1);

	

	

	uML_Behavior_inputParameters_result_lowerValue_LiteralInteger_UML_Behavior_inputParameters_result->setValue(0);

	uML_Behavior_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_inputParameters_result->setValue(-1);

	

	uML_Behavior_isReentrant_defaultValue_LiteralBoolean_UML_Behavior_isReentrant->setValue(true);

	uML_Behavior_isReentrant_lowerValue_LiteralInteger_UML_Behavior_isReentrant->setValue(0);

	

	uML_Behavior_outputParameters_result_lowerValue_LiteralInteger_UML_Behavior_outputParameters_result->setValue(0);

	uML_Behavior_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_outputParameters_result->setValue(-1);

	

	uML_Behavior_ownedParameterSet_lowerValue_LiteralInteger_UML_Behavior_ownedParameterSet->setValue(0);

	uML_Behavior_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameterSet->setValue(-1);

	uML_Behavior_ownedParameter_lowerValue_LiteralInteger_UML_Behavior_ownedParameter->setValue(0);

	uML_Behavior_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameter->setValue(-1);

	

	uML_Behavior_postcondition_lowerValue_LiteralInteger_UML_Behavior_postcondition->setValue(0);

	uML_Behavior_postcondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_postcondition->setValue(-1);

	uML_Behavior_precondition_lowerValue_LiteralInteger_UML_Behavior_precondition->setValue(0);

	uML_Behavior_precondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_precondition->setValue(-1);

	uML_Behavior_redefinedBehavior_lowerValue_LiteralInteger_UML_Behavior_redefinedBehavior->setValue(0);

	uML_Behavior_redefinedBehavior_upperValue_LiteralUnlimitedNatural_UML_Behavior_redefinedBehavior->setValue(-1);

	uML_Behavior_specification_lowerValue_LiteralInteger_UML_Behavior_specification->setValue(0);

	

	uML_BehavioralFeature_concurrency_defaultValue_InstanceValue->setInstance(get_UML_CallConcurrencyKind_sequential());
	uML_BehavioralFeature_concurrency_defaultValue_InstanceValue->setType(get_UML_CallConcurrencyKind());

	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setValue(0);

	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_name->setValue(1);

	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setValue(0);

	uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_type->setValue(1);

	uML_BehavioralFeature_inputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_inputParameters_result->setValue(0);

	uML_BehavioralFeature_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_inputParameters_result->setValue(-1);

	

	uML_BehavioralFeature_isAbstract_defaultValue_LiteralBoolean_UML_BehavioralFeature_isAbstract->setValue(false);

	

	uML_BehavioralFeature_method_lowerValue_LiteralInteger_UML_BehavioralFeature_method->setValue(0);

	uML_BehavioralFeature_method_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_method->setValue(-1);

	uML_BehavioralFeature_outputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_outputParameters_result->setValue(0);

	uML_BehavioralFeature_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_outputParameters_result->setValue(-1);

	

	uML_BehavioralFeature_ownedParameterSet_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameterSet->setValue(0);

	uML_BehavioralFeature_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameterSet->setValue(-1);

	uML_BehavioralFeature_ownedParameter_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameter->setValue(0);

	uML_BehavioralFeature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameter->setValue(-1);

	uML_BehavioralFeature_raisedException_lowerValue_LiteralInteger_UML_BehavioralFeature_raisedException->setValue(0);

	uML_BehavioralFeature_raisedException_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_raisedException->setValue(-1);

	

	uML_BehavioredClassifier_classifierBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_classifierBehavior->setValue(0);

	uML_BehavioredClassifier_getAllImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getAllImplementedInterfaces__return->setValue(0);

	uML_BehavioredClassifier_getAllImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getAllImplementedInterfaces__return->setValue(-1);

	uML_BehavioredClassifier_getImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getImplementedInterfaces__return->setValue(0);

	uML_BehavioredClassifier_getImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getImplementedInterfaces__return->setValue(-1);

	uML_BehavioredClassifier_interfaceRealization_lowerValue_LiteralInteger_UML_BehavioredClassifier_interfaceRealization->setValue(0);

	uML_BehavioredClassifier_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_interfaceRealization->setValue(-1);

	uML_BehavioredClassifier_ownedBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_ownedBehavior->setValue(0);

	uML_BehavioredClassifier_ownedBehavior_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_ownedBehavior->setValue(-1);

	

	

	

	

	uML_CallAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallAction_inputParameters_result->setValue(0);

	uML_CallAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_inputParameters_result->setValue(-1);

	uML_CallAction_isSynchronous_defaultValue_LiteralBoolean_UML_CallAction_isSynchronous->setValue(true);

	uML_CallAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallAction_outputParameters_result->setValue(0);

	uML_CallAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_outputParameters_result->setValue(-1);

	uML_CallAction_result_lowerValue_LiteralInteger_UML_CallAction_result->setValue(0);

	

	uML_CallAction_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_result->setValue(-1);

	

	uML_CallBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_inputParameters_result->setValue(0);

	uML_CallBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_inputParameters_result->setValue(-1);

	

	

	uML_CallBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_outputParameters_result->setValue(0);

	uML_CallBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_outputParameters_result->setValue(-1);

	

	uML_CallOperationAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_inputParameters_result->setValue(0);

	uML_CallOperationAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_inputParameters_result->setValue(-1);

	

	uML_CallOperationAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_outputParameters_result->setValue(0);

	uML_CallOperationAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_outputParameters_result->setValue(-1);

	

	

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(0);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(1);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(0);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(-1);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(0);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(-1);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(0);

	uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(1);

	uML_Class_extension_lowerValue_LiteralInteger_UML_Class_extension->setValue(0);

	uML_Class_extension_result_lowerValue_LiteralInteger_UML_Class_extension_result->setValue(0);

	uML_Class_extension_result_upperValue_LiteralUnlimitedNatural_UML_Class_extension_result->setValue(-1);

	

	uML_Class_extension_upperValue_LiteralUnlimitedNatural_UML_Class_extension->setValue(-1);

	uML_Class_isAbstract_defaultValue_LiteralBoolean_UML_Class_isAbstract->setValue(false);

	uML_Class_isActive_defaultValue_LiteralBoolean_UML_Class_isActive->setValue(false);

	uML_Class_nestedClassifier_lowerValue_LiteralInteger_UML_Class_nestedClassifier->setValue(0);

	uML_Class_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Class_nestedClassifier->setValue(-1);

	uML_Class_ownedAttribute_lowerValue_LiteralInteger_UML_Class_ownedAttribute->setValue(0);

	uML_Class_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Class_ownedAttribute->setValue(-1);

	uML_Class_ownedOperation_lowerValue_LiteralInteger_UML_Class_ownedOperation->setValue(0);

	uML_Class_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Class_ownedOperation->setValue(-1);

	uML_Class_ownedReception_lowerValue_LiteralInteger_UML_Class_ownedReception->setValue(0);

	uML_Class_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Class_ownedReception->setValue(-1);

	

	uML_Class_superClass_lowerValue_LiteralInteger_UML_Class_superClass->setValue(0);

	uML_Class_superClass_result_lowerValue_LiteralInteger_UML_Class_superClass_result->setValue(0);

	uML_Class_superClass_result_upperValue_LiteralUnlimitedNatural_UML_Class_superClass_result->setValue(-1);

	

	uML_Class_superClass_upperValue_LiteralUnlimitedNatural_UML_Class_superClass->setValue(-1);

	

	uML_ClassifierTemplateParameter_allowSubstitutable_defaultValue_LiteralBoolean_UML_ClassifierTemplateParameter_allowSubstitutable->setValue(true);

	uML_ClassifierTemplateParameter_constrainingClassifier_lowerValue_LiteralInteger_UML_ClassifierTemplateParameter_constrainingClassifier->setValue(0);

	uML_ClassifierTemplateParameter_constrainingClassifier_upperValue_LiteralUnlimitedNatural_UML_ClassifierTemplateParameter_constrainingClassifier->setValue(-1);

	

	

	

	

	

	uML_Classifier_allAttributes_result_lowerValue_LiteralInteger_UML_Classifier_allAttributes_result->setValue(0);

	uML_Classifier_allAttributes_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allAttributes_result->setValue(-1);

	

	uML_Classifier_allFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allFeatures_result->setValue(0);

	uML_Classifier_allFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allFeatures_result->setValue(-1);

	

	uML_Classifier_allParents_result_lowerValue_LiteralInteger_UML_Classifier_allParents_result->setValue(0);

	uML_Classifier_allParents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allParents_result->setValue(-1);

	

	uML_Classifier_allRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allRealizedInterfaces_result->setValue(0);

	uML_Classifier_allRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allRealizedInterfaces_result->setValue(-1);

	

	uML_Classifier_allSlottableFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allSlottableFeatures_result->setValue(0);

	uML_Classifier_allSlottableFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allSlottableFeatures_result->setValue(-1);

	

	uML_Classifier_allUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allUsedInterfaces_result->setValue(0);

	uML_Classifier_allUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allUsedInterfaces_result->setValue(-1);

	

	uML_Classifier_attribute_lowerValue_LiteralInteger_UML_Classifier_attribute->setValue(0);

	uML_Classifier_attribute_upperValue_LiteralUnlimitedNatural_UML_Classifier_attribute->setValue(-1);

	uML_Classifier_collaborationUse_lowerValue_LiteralInteger_UML_Classifier_collaborationUse->setValue(0);

	uML_Classifier_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_Classifier_collaborationUse->setValue(-1);

	

	uML_Classifier_directlyRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyRealizedInterfaces_result->setValue(0);

	uML_Classifier_directlyRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyRealizedInterfaces_result->setValue(-1);

	

	uML_Classifier_directlyUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyUsedInterfaces_result->setValue(0);

	uML_Classifier_directlyUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyUsedInterfaces_result->setValue(-1);

	

	uML_Classifier_feature_lowerValue_LiteralInteger_UML_Classifier_feature->setValue(0);

	uML_Classifier_feature_upperValue_LiteralUnlimitedNatural_UML_Classifier_feature->setValue(-1);

	uML_Classifier_general_lowerValue_LiteralInteger_UML_Classifier_general->setValue(0);

	uML_Classifier_general_result_lowerValue_LiteralInteger_UML_Classifier_general_result->setValue(0);

	uML_Classifier_general_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_general_result->setValue(-1);

	

	uML_Classifier_general_upperValue_LiteralUnlimitedNatural_UML_Classifier_general->setValue(-1);

	uML_Classifier_generalization_lowerValue_LiteralInteger_UML_Classifier_generalization->setValue(0);

	uML_Classifier_generalization_upperValue_LiteralUnlimitedNatural_UML_Classifier_generalization->setValue(-1);

	uML_Classifier_getAllAttributes__return_lowerValue_LiteralInteger_UML_Classifier_getAllAttributes__return->setValue(0);

	uML_Classifier_getAllAttributes__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllAttributes__return->setValue(-1);

	uML_Classifier_getAllOperations__return_lowerValue_LiteralInteger_UML_Classifier_getAllOperations__return->setValue(0);

	uML_Classifier_getAllOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllOperations__return->setValue(-1);

	uML_Classifier_getAllUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getAllUsedInterfaces__return->setValue(0);

	uML_Classifier_getAllUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllUsedInterfaces__return->setValue(-1);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setValue(0);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name->setValue(1);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setValue(0);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames->setValue(-1);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setValue(0);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes->setValue(-1);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setValue(0);

	uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn->setValue(1);

	uML_Classifier_getOperation_String_String_Type_String_String_Type_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Type_name->setValue(0);

	uML_Classifier_getOperation_String_String_Type_String_String_Type_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Type_name->setValue(1);

	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setValue(0);

	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames->setValue(-1);

	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setValue(0);

	uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes->setValue(-1);

	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setValue(0);

	uML_Classifier_getOperation_String_String_Type_String_String_Typereturn_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_String_String_Typereturn->setValue(1);

	uML_Classifier_getOperations__return_lowerValue_LiteralInteger_UML_Classifier_getOperations__return->setValue(0);

	uML_Classifier_getOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperations__return->setValue(-1);

	uML_Classifier_getUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getUsedInterfaces__return->setValue(0);

	uML_Classifier_getUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getUsedInterfaces__return->setValue(-1);

	

	

	uML_Classifier_inherit_NamedElement_NamedElement_inhs_lowerValue_LiteralInteger_UML_Classifier_inherit_NamedElement_NamedElement_inhs->setValue(0);

	uML_Classifier_inherit_NamedElement_NamedElement_inhs_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_NamedElement_NamedElement_inhs->setValue(-1);

	uML_Classifier_inherit_result_lowerValue_LiteralInteger_UML_Classifier_inherit_result->setValue(0);

	uML_Classifier_inherit_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_result->setValue(-1);

	

	

	uML_Classifier_inheritableMembers_result_lowerValue_LiteralInteger_UML_Classifier_inheritableMembers_result->setValue(0);

	uML_Classifier_inheritableMembers_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritableMembers_result->setValue(-1);

	

	uML_Classifier_inheritedMember_lowerValue_LiteralInteger_UML_Classifier_inheritedMember->setValue(0);

	uML_Classifier_inheritedMember_result_lowerValue_LiteralInteger_UML_Classifier_inheritedMember_result->setValue(0);

	uML_Classifier_inheritedMember_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember_result->setValue(-1);

	

	uML_Classifier_inheritedMember_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember->setValue(-1);

	uML_Classifier_isAbstract_defaultValue_LiteralBoolean_UML_Classifier_isAbstract->setValue(false);

	uML_Classifier_isFinalSpecialization_defaultValue_LiteralBoolean_UML_Classifier_isFinalSpecialization->setValue(false);

	

	

	

	

	

	

	uML_Classifier_ownedTemplateSignature_lowerValue_LiteralInteger_UML_Classifier_ownedTemplateSignature->setValue(0);

	uML_Classifier_ownedUseCase_lowerValue_LiteralInteger_UML_Classifier_ownedUseCase->setValue(0);

	uML_Classifier_ownedUseCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_ownedUseCase->setValue(-1);

	uML_Classifier_parents_result_lowerValue_LiteralInteger_UML_Classifier_parents_result->setValue(0);

	uML_Classifier_parents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_parents_result->setValue(-1);

	

	uML_Classifier_powertypeExtent_lowerValue_LiteralInteger_UML_Classifier_powertypeExtent->setValue(0);

	uML_Classifier_powertypeExtent_upperValue_LiteralUnlimitedNatural_UML_Classifier_powertypeExtent->setValue(-1);

	uML_Classifier_redefinedClassifier_lowerValue_LiteralInteger_UML_Classifier_redefinedClassifier->setValue(0);

	uML_Classifier_redefinedClassifier_upperValue_LiteralUnlimitedNatural_UML_Classifier_redefinedClassifier->setValue(-1);

	uML_Classifier_representation_lowerValue_LiteralInteger_UML_Classifier_representation->setValue(0);

	

	uML_Classifier_substitution_lowerValue_LiteralInteger_UML_Classifier_substitution->setValue(0);

	uML_Classifier_substitution_upperValue_LiteralUnlimitedNatural_UML_Classifier_substitution->setValue(-1);

	uML_Classifier_templateParameter_lowerValue_LiteralInteger_UML_Classifier_templateParameter->setValue(0);

	uML_Classifier_useCase_lowerValue_LiteralInteger_UML_Classifier_useCase->setValue(0);

	uML_Classifier_useCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_useCase->setValue(-1);

	uML_Clause_bodyOutput_lowerValue_LiteralInteger_UML_Clause_bodyOutput->setValue(0);

	uML_Clause_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_Clause_bodyOutput->setValue(-1);

	uML_Clause_body_lowerValue_LiteralInteger_UML_Clause_body->setValue(0);

	

	uML_Clause_body_upperValue_LiteralUnlimitedNatural_UML_Clause_body->setValue(-1);

	

	uML_Clause_predecessorClause_lowerValue_LiteralInteger_UML_Clause_predecessorClause->setValue(0);

	uML_Clause_predecessorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_predecessorClause->setValue(-1);

	uML_Clause_successorClause_lowerValue_LiteralInteger_UML_Clause_successorClause->setValue(0);

	uML_Clause_successorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_successorClause->setValue(-1);

	

	uML_Clause_test_upperValue_LiteralUnlimitedNatural_UML_Clause_test->setValue(-1);

	

	

	

	uML_ClearStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_ClearStructuralFeatureAction_result->setValue(0);

	

	

	

	

	uML_CollaborationUse_roleBinding_lowerValue_LiteralInteger_UML_CollaborationUse_roleBinding->setValue(0);

	uML_CollaborationUse_roleBinding_upperValue_LiteralUnlimitedNatural_UML_CollaborationUse_roleBinding->setValue(-1);

	uML_Collaboration_collaborationRole_lowerValue_LiteralInteger_UML_Collaboration_collaborationRole->setValue(0);

	uML_Collaboration_collaborationRole_upperValue_LiteralUnlimitedNatural_UML_Collaboration_collaborationRole->setValue(-1);

	

	uML_CombinedFragment_cfragmentGate_lowerValue_LiteralInteger_UML_CombinedFragment_cfragmentGate->setValue(0);

	uML_CombinedFragment_cfragmentGate_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_cfragmentGate->setValue(-1);

	

	uML_CombinedFragment_interactionOperator_defaultValue_InstanceValue->setInstance(get_UML_InteractionOperatorKind_seq());
	uML_CombinedFragment_interactionOperator_defaultValue_InstanceValue->setType(get_UML_InteractionOperatorKind());

	uML_CombinedFragment_operand_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_operand->setValue(-1);

	

	uML_Comment_annotatedElement_lowerValue_LiteralInteger_UML_Comment_annotatedElement->setValue(0);

	uML_Comment_annotatedElement_upperValue_LiteralUnlimitedNatural_UML_Comment_annotatedElement->setValue(-1);

	uML_Comment_body_lowerValue_LiteralInteger_UML_Comment_body->setValue(0);

	

	uML_ComponentRealization_abstraction_lowerValue_LiteralInteger_UML_ComponentRealization_abstraction->setValue(0);

	uML_ComponentRealization_realizingClassifier_upperValue_LiteralUnlimitedNatural_UML_ComponentRealization_realizingClassifier->setValue(-1);

	uML_Component_isIndirectlyInstantiated_defaultValue_LiteralBoolean_UML_Component_isIndirectlyInstantiated->setValue(true);

	

	

	uML_Component_packagedElement_lowerValue_LiteralInteger_UML_Component_packagedElement->setValue(0);

	uML_Component_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Component_packagedElement->setValue(-1);

	uML_Component_provided_lowerValue_LiteralInteger_UML_Component_provided->setValue(0);

	uML_Component_provided_result_lowerValue_LiteralInteger_UML_Component_provided_result->setValue(0);

	uML_Component_provided_result_upperValue_LiteralUnlimitedNatural_UML_Component_provided_result->setValue(-1);

	

	uML_Component_provided_upperValue_LiteralUnlimitedNatural_UML_Component_provided->setValue(-1);

	uML_Component_realization_lowerValue_LiteralInteger_UML_Component_realization->setValue(0);

	uML_Component_realization_upperValue_LiteralUnlimitedNatural_UML_Component_realization->setValue(-1);

	uML_Component_required_lowerValue_LiteralInteger_UML_Component_required->setValue(0);

	uML_Component_required_result_lowerValue_LiteralInteger_UML_Component_required_result->setValue(0);

	uML_Component_required_result_upperValue_LiteralUnlimitedNatural_UML_Component_required_result->setValue(-1);

	

	uML_Component_required_upperValue_LiteralUnlimitedNatural_UML_Component_required->setValue(-1);

	uML_ConditionalNode_allActions_result_lowerValue_LiteralInteger_UML_ConditionalNode_allActions_result->setValue(0);

	uML_ConditionalNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_allActions_result->setValue(-1);

	

	

	uML_ConditionalNode_clause_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_clause->setValue(-1);

	

	uML_ConditionalNode_isAssured_defaultValue_LiteralBoolean_UML_ConditionalNode_isAssured->setValue(false);

	uML_ConditionalNode_isDeterminate_defaultValue_LiteralBoolean_UML_ConditionalNode_isDeterminate->setValue(false);

	

	

	

	uML_ConditionalNode_result_lowerValue_LiteralInteger_UML_ConditionalNode_result->setValue(0);

	

	uML_ConditionalNode_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_result->setValue(-1);

	uML_ConnectableElement_end_lowerValue_LiteralInteger_UML_ConnectableElement_end->setValue(0);

	uML_ConnectableElement_end_result_lowerValue_LiteralInteger_UML_ConnectableElement_end_result->setValue(0);

	uML_ConnectableElement_end_result_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end_result->setValue(-1);

	

	uML_ConnectableElement_end_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end->setValue(-1);

	uML_ConnectableElement_templateParameter_lowerValue_LiteralInteger_UML_ConnectableElement_templateParameter->setValue(0);

	uML_ConnectionPointReference_entry_lowerValue_LiteralInteger_UML_ConnectionPointReference_entry->setValue(0);

	

	uML_ConnectionPointReference_entry_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_entry->setValue(-1);

	uML_ConnectionPointReference_exit_lowerValue_LiteralInteger_UML_ConnectionPointReference_exit->setValue(0);

	

	uML_ConnectionPointReference_exit_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_exit->setValue(-1);

	uML_ConnectionPointReference_state_lowerValue_LiteralInteger_UML_ConnectionPointReference_state->setValue(0);

	uML_ConnectorEnd_definingEnd_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd->setValue(0);

	uML_ConnectorEnd_definingEnd_result_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd_result->setValue(0);

	

	

	uML_ConnectorEnd_partWithPort_lowerValue_LiteralInteger_UML_ConnectorEnd_partWithPort->setValue(0);

	

	

	uML_ConnectorEnd_role_lowerValue_LiteralInteger_UML_ConnectorEnd_role->setValue(1);

	uML_ConnectorEnd_role_upperValue_LiteralUnlimitedNatural_UML_ConnectorEnd_role->setValue(1);

	

	uML_Connector_contract_lowerValue_LiteralInteger_UML_Connector_contract->setValue(0);

	uML_Connector_contract_upperValue_LiteralUnlimitedNatural_UML_Connector_contract->setValue(-1);

	uML_Connector_end_lowerValue_LiteralInteger_UML_Connector_end->setValue(2);

	uML_Connector_end_upperValue_LiteralUnlimitedNatural_UML_Connector_end->setValue(-1);

	

	uML_Connector_redefinedConnector_lowerValue_LiteralInteger_UML_Connector_redefinedConnector->setValue(0);

	uML_Connector_redefinedConnector_upperValue_LiteralUnlimitedNatural_UML_Connector_redefinedConnector->setValue(-1);

	

	uML_Connector_type_lowerValue_LiteralInteger_UML_Connector_type->setValue(0);

	

	

	uML_ConsiderIgnoreFragment_message_lowerValue_LiteralInteger_UML_ConsiderIgnoreFragment_message->setValue(0);

	uML_ConsiderIgnoreFragment_message_upperValue_LiteralUnlimitedNatural_UML_ConsiderIgnoreFragment_message->setValue(-1);

	

	

	uML_Constraint_constrainedElement_lowerValue_LiteralInteger_UML_Constraint_constrainedElement->setValue(0);

	uML_Constraint_constrainedElement_upperValue_LiteralUnlimitedNatural_UML_Constraint_constrainedElement->setValue(-1);

	uML_Constraint_context_lowerValue_LiteralInteger_UML_Constraint_context->setValue(0);

	

	

	

	

	

	uML_Continuation_setting_defaultValue_LiteralBoolean_UML_Continuation_setting->setValue(true);

	

	

	uML_CreateLinkAction_endData_lowerValue_LiteralInteger_UML_CreateLinkAction_endData->setValue(2);

	uML_CreateLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_CreateLinkAction_endData->setValue(-1);

	

	

	

	

	

	

	

	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(0);

	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(1);

	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(0);

	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(1);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(0);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(1);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(0);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(-1);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(0);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(-1);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(0);

	uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(1);

	uML_DataType_ownedAttribute_lowerValue_LiteralInteger_UML_DataType_ownedAttribute->setValue(0);

	uML_DataType_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedAttribute->setValue(-1);

	uML_DataType_ownedOperation_lowerValue_LiteralInteger_UML_DataType_ownedOperation->setValue(0);

	uML_DataType_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedOperation->setValue(-1);

	uML_DecisionNode_decisionInputFlow_lowerValue_LiteralInteger_UML_DecisionNode_decisionInputFlow->setValue(0);

	uML_DecisionNode_decisionInput_lowerValue_LiteralInteger_UML_DecisionNode_decisionInput->setValue(0);

	

	

	

	

	

	

	

	

	uML_Dependency_client_upperValue_LiteralUnlimitedNatural_UML_Dependency_client->setValue(-1);

	uML_Dependency_supplier_upperValue_LiteralUnlimitedNatural_UML_Dependency_supplier->setValue(-1);

	

	uML_DeploymentSpecification_deploymentLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_deploymentLocation->setValue(0);

	uML_DeploymentSpecification_deployment_lowerValue_LiteralInteger_UML_DeploymentSpecification_deployment->setValue(0);

	

	uML_DeploymentSpecification_executionLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_executionLocation->setValue(0);

	uML_DeploymentTarget_deployedElement_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement->setValue(0);

	uML_DeploymentTarget_deployedElement_result_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement_result->setValue(0);

	uML_DeploymentTarget_deployedElement_result_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement_result->setValue(-1);

	

	uML_DeploymentTarget_deployedElement_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement->setValue(-1);

	uML_DeploymentTarget_deployment_lowerValue_LiteralInteger_UML_DeploymentTarget_deployment->setValue(0);

	uML_DeploymentTarget_deployment_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployment->setValue(-1);

	uML_Deployment_configuration_lowerValue_LiteralInteger_UML_Deployment_configuration->setValue(0);

	uML_Deployment_configuration_upperValue_LiteralUnlimitedNatural_UML_Deployment_configuration->setValue(-1);

	uML_Deployment_deployedArtifact_lowerValue_LiteralInteger_UML_Deployment_deployedArtifact->setValue(0);

	uML_Deployment_deployedArtifact_upperValue_LiteralUnlimitedNatural_UML_Deployment_deployedArtifact->setValue(-1);

	uML_DestroyLinkAction_endData_lowerValue_LiteralInteger_UML_DestroyLinkAction_endData->setValue(2);

	uML_DestroyLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_DestroyLinkAction_endData->setValue(-1);

	uML_DestroyObjectAction_isDestroyLinks_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyLinks->setValue(false);

	uML_DestroyObjectAction_isDestroyOwnedObjects_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyOwnedObjects->setValue(false);

	

	

	

	uML_DirectedRelationship_source_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_source->setValue(-1);

	uML_DirectedRelationship_target_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_target->setValue(-1);

	uML_DurationConstraint_firstEvent_lowerValue_LiteralInteger_UML_DurationConstraint_firstEvent->setValue(0);

	uML_DurationConstraint_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationConstraint_firstEvent->setValue(2);

	

	

	uML_DurationObservation_event_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_event->setValue(2);

	uML_DurationObservation_firstEvent_lowerValue_LiteralInteger_UML_DurationObservation_firstEvent->setValue(0);

	uML_DurationObservation_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_firstEvent->setValue(2);

	

	uML_Duration_expr_lowerValue_LiteralInteger_UML_Duration_expr->setValue(0);

	

	uML_Duration_observation_lowerValue_LiteralInteger_UML_Duration_observation->setValue(0);

	uML_Duration_observation_upperValue_LiteralUnlimitedNatural_UML_Duration_observation->setValue(-1);

	uML_ElementImport_alias_lowerValue_LiteralInteger_UML_ElementImport_alias->setValue(0);

	

	

	uML_ElementImport_visibility_defaultValue_InstanceValue->setInstance(get_UML_VisibilityKind_public());
	uML_ElementImport_visibility_defaultValue_InstanceValue->setType(get_UML_VisibilityKind());

	

	uML_Element_allOwnedElements_result_lowerValue_LiteralInteger_UML_Element_allOwnedElements_result->setValue(0);

	uML_Element_allOwnedElements_result_upperValue_LiteralUnlimitedNatural_UML_Element_allOwnedElements_result->setValue(-1);

	

	uML_Element_getApplicableStereotype_String_Stringreturn_lowerValue_LiteralInteger_UML_Element_getApplicableStereotype_String_Stringreturn->setValue(0);

	uML_Element_getApplicableStereotype_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotype_String_Stringreturn->setValue(1);

	uML_Element_getApplicableStereotypes__return_lowerValue_LiteralInteger_UML_Element_getApplicableStereotypes__return->setValue(0);

	uML_Element_getApplicableStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotypes__return->setValue(-1);

	uML_Element_getAppliedStereotype_String_Stringreturn_lowerValue_LiteralInteger_UML_Element_getAppliedStereotype_String_Stringreturn->setValue(0);

	uML_Element_getAppliedStereotype_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotype_String_Stringreturn->setValue(1);

	uML_Element_getAppliedStereotypes__return_lowerValue_LiteralInteger_UML_Element_getAppliedStereotypes__return->setValue(0);

	uML_Element_getAppliedStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotypes__return->setValue(-1);

	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setValue(0);

	uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn->setValue(1);

	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setValue(0);

	uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn->setValue(-1);

	uML_Element_getKeywords__return_lowerValue_LiteralInteger_UML_Element_getKeywords__return->setValue(0);

	uML_Element_getKeywords__return_upperValue_LiteralUnlimitedNatural_UML_Element_getKeywords__return->setValue(-1);

	uML_Element_getModel__return_lowerValue_LiteralInteger_UML_Element_getModel__return->setValue(0);

	uML_Element_getModel__return_upperValue_LiteralUnlimitedNatural_UML_Element_getModel__return->setValue(1);

	uML_Element_getNearestPackage__return_lowerValue_LiteralInteger_UML_Element_getNearestPackage__return->setValue(0);

	uML_Element_getNearestPackage__return_upperValue_LiteralUnlimitedNatural_UML_Element_getNearestPackage__return->setValue(1);

	uML_Element_getRelationships_EClass_EClassreturn_lowerValue_LiteralInteger_UML_Element_getRelationships_EClass_EClassreturn->setValue(0);

	uML_Element_getRelationships_EClass_EClassreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships_EClass_EClassreturn->setValue(-1);

	uML_Element_getRelationships__return_lowerValue_LiteralInteger_UML_Element_getRelationships__return->setValue(0);

	uML_Element_getRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships__return->setValue(-1);

	uML_Element_getRequiredStereotype_String_Stringreturn_lowerValue_LiteralInteger_UML_Element_getRequiredStereotype_String_Stringreturn->setValue(0);

	uML_Element_getRequiredStereotype_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotype_String_Stringreturn->setValue(1);

	uML_Element_getRequiredStereotypes__return_lowerValue_LiteralInteger_UML_Element_getRequiredStereotypes__return->setValue(0);

	uML_Element_getRequiredStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotypes__return->setValue(-1);

	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setValue(0);

	uML_Element_getSourceDirectedRelationships_EClass_EClassreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships_EClass_EClassreturn->setValue(-1);

	uML_Element_getSourceDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships__return->setValue(0);

	uML_Element_getSourceDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships__return->setValue(-1);

	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn_lowerValue_LiteralInteger_UML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setValue(0);

	uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplication_Stereotype_Stereotypereturn->setValue(1);

	uML_Element_getStereotypeApplications__return_lowerValue_LiteralInteger_UML_Element_getStereotypeApplications__return->setValue(0);

	uML_Element_getStereotypeApplications__return_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplications__return->setValue(-1);

	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setValue(0);

	uML_Element_getTargetDirectedRelationships_EClass_EClassreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships_EClass_EClassreturn->setValue(-1);

	uML_Element_getTargetDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships__return->setValue(0);

	uML_Element_getTargetDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships__return->setValue(-1);

	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn_lowerValue_LiteralInteger_UML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setValue(0);

	uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Element_getValue_Stereotype_String_Stereotype_Stringreturn->setValue(1);

	

	

	

	uML_Element_ownedComment_lowerValue_LiteralInteger_UML_Element_ownedComment->setValue(0);

	uML_Element_ownedComment_upperValue_LiteralUnlimitedNatural_UML_Element_ownedComment->setValue(-1);

	uML_Element_ownedElement_lowerValue_LiteralInteger_UML_Element_ownedElement->setValue(0);

	uML_Element_ownedElement_upperValue_LiteralUnlimitedNatural_UML_Element_ownedElement->setValue(-1);

	uML_Element_owner_lowerValue_LiteralInteger_UML_Element_owner->setValue(0);

	uML_EncapsulatedClassifier_ownedPort_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort->setValue(0);

	uML_EncapsulatedClassifier_ownedPort_result_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort_result->setValue(0);

	uML_EncapsulatedClassifier_ownedPort_result_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort_result->setValue(-1);

	

	uML_EncapsulatedClassifier_ownedPort_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort->setValue(-1);

	

	uML_EnumerationLiteral_getClassifiers__return_lowerValue_LiteralInteger_UML_EnumerationLiteral_getClassifiers__return->setValue(0);

	uML_EnumerationLiteral_getClassifiers__return_upperValue_LiteralUnlimitedNatural_UML_EnumerationLiteral_getClassifiers__return->setValue(-1);

	

	uML_Enumeration_ownedLiteral_lowerValue_LiteralInteger_UML_Enumeration_ownedLiteral->setValue(0);

	uML_Enumeration_ownedLiteral_upperValue_LiteralUnlimitedNatural_UML_Enumeration_ownedLiteral->setValue(-1);

	

	uML_ExceptionHandler_exceptionType_upperValue_LiteralUnlimitedNatural_UML_ExceptionHandler_exceptionType->setValue(-1);

	

	

	

	

	

	uML_ExecutableNode_handler_lowerValue_LiteralInteger_UML_ExecutableNode_handler->setValue(0);

	uML_ExecutableNode_handler_upperValue_LiteralUnlimitedNatural_UML_ExecutableNode_handler->setValue(-1);

	

	uML_ExpansionNode_regionAsInput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsInput->setValue(0);

	uML_ExpansionNode_regionAsOutput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsOutput->setValue(0);

	

	uML_ExpansionRegion_inputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_inputElement->setValue(-1);

	uML_ExpansionRegion_mode_defaultValue_InstanceValue->setInstance(get_UML_ExpansionKind_iterative());
	uML_ExpansionRegion_mode_defaultValue_InstanceValue->setType(get_UML_ExpansionKind());

	uML_ExpansionRegion_outputElement_lowerValue_LiteralInteger_UML_ExpansionRegion_outputElement->setValue(0);

	uML_ExpansionRegion_outputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_outputElement->setValue(-1);

	uML_Expression_operand_lowerValue_LiteralInteger_UML_Expression_operand->setValue(0);

	uML_Expression_operand_upperValue_LiteralUnlimitedNatural_UML_Expression_operand->setValue(-1);

	uML_Expression_symbol_lowerValue_LiteralInteger_UML_Expression_symbol->setValue(0);

	uML_Extend_condition_lowerValue_LiteralInteger_UML_Extend_condition->setValue(0);

	uML_Extend_extensionLocation_upperValue_LiteralUnlimitedNatural_UML_Extend_extensionLocation->setValue(-1);

	

	

	uML_ExtensionEnd_lowerBound_result_lowerValue_LiteralInteger_UML_ExtensionEnd_lowerBound_result->setValue(0);

	

	uML_ExtensionEnd_lower_lowerValue_LiteralInteger_UML_ExtensionEnd_lower->setValue(0);

	

	

	uML_Extension_getStereotypeEnd__return_lowerValue_LiteralInteger_UML_Extension_getStereotypeEnd__return->setValue(0);

	uML_Extension_getStereotypeEnd__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotypeEnd__return->setValue(1);

	uML_Extension_getStereotype__return_lowerValue_LiteralInteger_UML_Extension_getStereotype__return->setValue(0);

	uML_Extension_getStereotype__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotype__return->setValue(1);

	

	

	

	

	

	uML_Feature_featuringClassifier_lowerValue_LiteralInteger_UML_Feature_featuringClassifier->setValue(0);

	uML_Feature_featuringClassifier_upperValue_LiteralUnlimitedNatural_UML_Feature_featuringClassifier->setValue(-1);

	uML_Feature_isStatic_defaultValue_LiteralBoolean_UML_Feature_isStatic->setValue(false);

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	uML_GeneralizationSet_generalization_lowerValue_LiteralInteger_UML_GeneralizationSet_generalization->setValue(0);

	

	uML_GeneralizationSet_generalization_upperValue_LiteralUnlimitedNatural_UML_GeneralizationSet_generalization->setValue(-1);

	uML_GeneralizationSet_isCovering_defaultValue_LiteralBoolean_UML_GeneralizationSet_isCovering->setValue(false);

	uML_GeneralizationSet_isDisjoint_defaultValue_LiteralBoolean_UML_GeneralizationSet_isDisjoint->setValue(false);

	

	uML_GeneralizationSet_powertype_lowerValue_LiteralInteger_UML_GeneralizationSet_powertype->setValue(0);

	uML_Generalization_generalizationSet_lowerValue_LiteralInteger_UML_Generalization_generalizationSet->setValue(0);

	uML_Generalization_generalizationSet_upperValue_LiteralUnlimitedNatural_UML_Generalization_generalizationSet->setValue(-1);

	uML_Generalization_isSubstitutable_defaultValue_LiteralBoolean_UML_Generalization_isSubstitutable->setValue(true);

	uML_Generalization_isSubstitutable_lowerValue_LiteralInteger_UML_Generalization_isSubstitutable->setValue(0);

	uML_Image_content_lowerValue_LiteralInteger_UML_Image_content->setValue(0);

	uML_Image_format_lowerValue_LiteralInteger_UML_Image_format->setValue(0);

	uML_Image_location_lowerValue_LiteralInteger_UML_Image_location->setValue(0);

	

	uML_InformationFlow_conveyed_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_conveyed->setValue(-1);

	uML_InformationFlow_informationSource_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationSource->setValue(-1);

	uML_InformationFlow_informationTarget_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationTarget->setValue(-1);

	

	uML_InformationFlow_realization_lowerValue_LiteralInteger_UML_InformationFlow_realization->setValue(0);

	uML_InformationFlow_realization_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realization->setValue(-1);

	uML_InformationFlow_realizingActivityEdge_lowerValue_LiteralInteger_UML_InformationFlow_realizingActivityEdge->setValue(0);

	uML_InformationFlow_realizingActivityEdge_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingActivityEdge->setValue(-1);

	uML_InformationFlow_realizingConnector_lowerValue_LiteralInteger_UML_InformationFlow_realizingConnector->setValue(0);

	uML_InformationFlow_realizingConnector_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingConnector->setValue(-1);

	uML_InformationFlow_realizingMessage_lowerValue_LiteralInteger_UML_InformationFlow_realizingMessage->setValue(0);

	uML_InformationFlow_realizingMessage_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingMessage->setValue(-1);

	

	

	

	uML_InformationItem_represented_lowerValue_LiteralInteger_UML_InformationItem_represented->setValue(0);

	uML_InformationItem_represented_upperValue_LiteralUnlimitedNatural_UML_InformationItem_represented->setValue(-1);

	

	

	

	

	uML_InstanceSpecification_classifier_lowerValue_LiteralInteger_UML_InstanceSpecification_classifier->setValue(0);

	uML_InstanceSpecification_classifier_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_classifier->setValue(-1);

	

	

	

	uML_InstanceSpecification_slot_lowerValue_LiteralInteger_UML_InstanceSpecification_slot->setValue(0);

	uML_InstanceSpecification_slot_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_slot->setValue(-1);

	uML_InstanceSpecification_specification_lowerValue_LiteralInteger_UML_InstanceSpecification_specification->setValue(0);

	

	

	

	

	uML_InteractionConstraint_maxint_lowerValue_LiteralInteger_UML_InteractionConstraint_maxint->setValue(0);

	

	uML_InteractionConstraint_minint_lowerValue_LiteralInteger_UML_InteractionConstraint_minint->setValue(0);

	

	

	uML_InteractionFragment_covered_lowerValue_LiteralInteger_UML_InteractionFragment_covered->setValue(0);

	uML_InteractionFragment_covered_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_covered->setValue(-1);

	uML_InteractionFragment_enclosingInteraction_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingInteraction->setValue(0);

	uML_InteractionFragment_enclosingOperand_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingOperand->setValue(0);

	uML_InteractionFragment_generalOrdering_lowerValue_LiteralInteger_UML_InteractionFragment_generalOrdering->setValue(0);

	uML_InteractionFragment_generalOrdering_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_generalOrdering->setValue(-1);

	uML_InteractionOperand_fragment_lowerValue_LiteralInteger_UML_InteractionOperand_fragment->setValue(0);

	uML_InteractionOperand_fragment_upperValue_LiteralUnlimitedNatural_UML_InteractionOperand_fragment->setValue(-1);

	

	

	uML_InteractionOperand_guard_lowerValue_LiteralInteger_UML_InteractionOperand_guard->setValue(0);

	uML_InteractionUse_actualGate_lowerValue_LiteralInteger_UML_InteractionUse_actualGate->setValue(0);

	uML_InteractionUse_actualGate_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_actualGate->setValue(-1);

	

	uML_InteractionUse_argument_lowerValue_LiteralInteger_UML_InteractionUse_argument->setValue(0);

	uML_InteractionUse_argument_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_argument->setValue(-1);

	

	

	

	

	uML_InteractionUse_returnValueRecipient_lowerValue_LiteralInteger_UML_InteractionUse_returnValueRecipient->setValue(0);

	uML_InteractionUse_returnValue_lowerValue_LiteralInteger_UML_InteractionUse_returnValue->setValue(0);

	

	uML_Interaction_action_lowerValue_LiteralInteger_UML_Interaction_action->setValue(0);

	uML_Interaction_action_upperValue_LiteralUnlimitedNatural_UML_Interaction_action->setValue(-1);

	uML_Interaction_formalGate_lowerValue_LiteralInteger_UML_Interaction_formalGate->setValue(0);

	uML_Interaction_formalGate_upperValue_LiteralUnlimitedNatural_UML_Interaction_formalGate->setValue(-1);

	uML_Interaction_fragment_lowerValue_LiteralInteger_UML_Interaction_fragment->setValue(0);

	uML_Interaction_fragment_upperValue_LiteralUnlimitedNatural_UML_Interaction_fragment->setValue(-1);

	uML_Interaction_lifeline_lowerValue_LiteralInteger_UML_Interaction_lifeline->setValue(0);

	uML_Interaction_lifeline_upperValue_LiteralUnlimitedNatural_UML_Interaction_lifeline->setValue(-1);

	uML_Interaction_message_lowerValue_LiteralInteger_UML_Interaction_message->setValue(0);

	uML_Interaction_message_upperValue_LiteralUnlimitedNatural_UML_Interaction_message->setValue(-1);

	

	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(0);

	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(1);

	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(0);

	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(1);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(0);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name->setValue(1);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(0);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames->setValue(-1);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(0);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes->setValue(-1);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(0);

	uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType->setValue(1);

	uML_Interface_nestedClassifier_lowerValue_LiteralInteger_UML_Interface_nestedClassifier->setValue(0);

	uML_Interface_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Interface_nestedClassifier->setValue(-1);

	uML_Interface_ownedAttribute_lowerValue_LiteralInteger_UML_Interface_ownedAttribute->setValue(0);

	uML_Interface_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedAttribute->setValue(-1);

	uML_Interface_ownedOperation_lowerValue_LiteralInteger_UML_Interface_ownedOperation->setValue(0);

	uML_Interface_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedOperation->setValue(-1);

	uML_Interface_ownedReception_lowerValue_LiteralInteger_UML_Interface_ownedReception->setValue(0);

	uML_Interface_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedReception->setValue(-1);

	uML_Interface_protocol_lowerValue_LiteralInteger_UML_Interface_protocol->setValue(0);

	uML_Interface_redefinedInterface_lowerValue_LiteralInteger_UML_Interface_redefinedInterface->setValue(0);

	uML_Interface_redefinedInterface_upperValue_LiteralUnlimitedNatural_UML_Interface_redefinedInterface->setValue(-1);

	

	uML_InterruptibleActivityRegion_interruptingEdge_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_interruptingEdge->setValue(0);

	uML_InterruptibleActivityRegion_interruptingEdge_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_interruptingEdge->setValue(-1);

	

	uML_InterruptibleActivityRegion_node_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_node->setValue(0);

	uML_InterruptibleActivityRegion_node_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_node->setValue(-1);

	uML_InvocationAction_argument_lowerValue_LiteralInteger_UML_InvocationAction_argument->setValue(0);

	uML_InvocationAction_argument_upperValue_LiteralUnlimitedNatural_UML_InvocationAction_argument->setValue(-1);

	uML_InvocationAction_onPort_lowerValue_LiteralInteger_UML_InvocationAction_onPort->setValue(0);

	

	uML_JoinNode_isCombineDuplicate_defaultValue_LiteralBoolean_UML_JoinNode_isCombineDuplicate->setValue(true);

	uML_JoinNode_joinSpec_lowerValue_LiteralInteger_UML_JoinNode_joinSpec->setValue(0);

	

	uML_Lifeline_coveredBy_lowerValue_LiteralInteger_UML_Lifeline_coveredBy->setValue(0);

	uML_Lifeline_coveredBy_upperValue_LiteralUnlimitedNatural_UML_Lifeline_coveredBy->setValue(-1);

	uML_Lifeline_decomposedAs_lowerValue_LiteralInteger_UML_Lifeline_decomposedAs->setValue(0);

	

	uML_Lifeline_represents_lowerValue_LiteralInteger_UML_Lifeline_represents->setValue(0);

	

	

	uML_Lifeline_selector_lowerValue_LiteralInteger_UML_Lifeline_selector->setValue(0);

	

	

	uML_LinkAction_endData_lowerValue_LiteralInteger_UML_LinkAction_endData->setValue(2);

	uML_LinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_LinkAction_endData->setValue(-1);

	uML_LinkAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_LinkAction_inputValue->setValue(-1);

	

	

	

	uML_LinkEndCreationData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndCreationData_allPins_result->setValue(0);

	uML_LinkEndCreationData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndCreationData_allPins_result->setValue(-1);

	

	uML_LinkEndCreationData_insertAt_lowerValue_LiteralInteger_UML_LinkEndCreationData_insertAt->setValue(0);

	

	uML_LinkEndCreationData_isReplaceAll_defaultValue_LiteralBoolean_UML_LinkEndCreationData_isReplaceAll->setValue(false);

	uML_LinkEndData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndData_allPins_result->setValue(0);

	uML_LinkEndData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_allPins_result->setValue(-1);

	

	

	

	

	uML_LinkEndData_qualifier_lowerValue_LiteralInteger_UML_LinkEndData_qualifier->setValue(0);

	uML_LinkEndData_qualifier_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_qualifier->setValue(-1);

	

	

	uML_LinkEndData_value_lowerValue_LiteralInteger_UML_LinkEndData_value->setValue(0);

	uML_LinkEndDestructionData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndDestructionData_allPins_result->setValue(0);

	uML_LinkEndDestructionData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndDestructionData_allPins_result->setValue(-1);

	

	uML_LinkEndDestructionData_destroyAt_lowerValue_LiteralInteger_UML_LinkEndDestructionData_destroyAt->setValue(0);

	

	uML_LinkEndDestructionData_isDestroyDuplicates_defaultValue_LiteralBoolean_UML_LinkEndDestructionData_isDestroyDuplicates->setValue(false);

	

	

	uML_LiteralBoolean_value_defaultValue_LiteralBoolean_UML_LiteralBoolean_value->setValue(false);

	

	

	uML_LiteralInteger_value_defaultValue_LiteralInteger_UML_LiteralInteger_value->setValue(0);

	

	

	

	

	

	

	uML_LiteralString_value_lowerValue_LiteralInteger_UML_LiteralString_value->setValue(0);

	

	

	uML_LiteralUnlimitedNatural_value_defaultValue_LiteralUnlimitedNatural_UML_LiteralUnlimitedNatural_value->setValue(0);

	uML_LoopNode_allActions_result_lowerValue_LiteralInteger_UML_LoopNode_allActions_result->setValue(0);

	uML_LoopNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_allActions_result->setValue(-1);

	

	uML_LoopNode_bodyOutput_lowerValue_LiteralInteger_UML_LoopNode_bodyOutput->setValue(0);

	uML_LoopNode_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyOutput->setValue(-1);

	uML_LoopNode_bodyPart_lowerValue_LiteralInteger_UML_LoopNode_bodyPart->setValue(0);

	uML_LoopNode_bodyPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyPart->setValue(-1);

	

	

	

	uML_LoopNode_isTestedFirst_defaultValue_LiteralBoolean_UML_LoopNode_isTestedFirst->setValue(false);

	uML_LoopNode_loopVariableInput_lowerValue_LiteralInteger_UML_LoopNode_loopVariableInput->setValue(0);

	uML_LoopNode_loopVariableInput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariableInput->setValue(-1);

	uML_LoopNode_loopVariable_lowerValue_LiteralInteger_UML_LoopNode_loopVariable->setValue(0);

	uML_LoopNode_loopVariable_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariable->setValue(-1);

	

	

	

	

	uML_LoopNode_result_lowerValue_LiteralInteger_UML_LoopNode_result->setValue(0);

	

	uML_LoopNode_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_result->setValue(-1);

	uML_LoopNode_setupPart_lowerValue_LiteralInteger_UML_LoopNode_setupPart->setValue(0);

	uML_LoopNode_setupPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_setupPart->setValue(-1);

	

	uML_LoopNode_sourceNodes_result_lowerValue_LiteralInteger_UML_LoopNode_sourceNodes_result->setValue(0);

	uML_LoopNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_sourceNodes_result->setValue(-1);

	

	uML_LoopNode_test_upperValue_LiteralUnlimitedNatural_UML_LoopNode_test->setValue(-1);

	

	

	uML_MessageEnd_enclosingFragment_result_lowerValue_LiteralInteger_UML_MessageEnd_enclosingFragment_result->setValue(0);

	uML_MessageEnd_enclosingFragment_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_enclosingFragment_result->setValue(-1);

	

	

	

	

	

	uML_MessageEnd_message_lowerValue_LiteralInteger_UML_MessageEnd_message->setValue(0);

	

	uML_MessageEnd_oppositeEnd_result_lowerValue_LiteralInteger_UML_MessageEnd_oppositeEnd_result->setValue(0);

	uML_MessageEnd_oppositeEnd_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_oppositeEnd_result->setValue(-1);

	

	uML_Message_argument_lowerValue_LiteralInteger_UML_Message_argument->setValue(0);

	uML_Message_argument_upperValue_LiteralUnlimitedNatural_UML_Message_argument->setValue(-1);

	

	

	uML_Message_connector_lowerValue_LiteralInteger_UML_Message_connector->setValue(0);

	

	uML_Message_messageKind_defaultValue_InstanceValue->setInstance(get_UML_MessageKind_unknown());
	uML_Message_messageKind_defaultValue_InstanceValue->setType(nullptr);

	

	uML_Message_messageSort_defaultValue_InstanceValue->setInstance(get_UML_MessageSort_synchCall());
	uML_Message_messageSort_defaultValue_InstanceValue->setType(get_UML_MessageSort());

	

	uML_Message_receiveEvent_lowerValue_LiteralInteger_UML_Message_receiveEvent->setValue(0);

	uML_Message_sendEvent_lowerValue_LiteralInteger_UML_Message_sendEvent->setValue(0);

	

	

	

	

	uML_Message_signature_lowerValue_LiteralInteger_UML_Message_signature->setValue(0);

	

	uML_Model_viewpoint_lowerValue_LiteralInteger_UML_Model_viewpoint->setValue(0);

	

	

	

	

	

	uML_MultiplicityElement_isOrdered_defaultValue_LiteralBoolean_UML_MultiplicityElement_isOrdered->setValue(false);

	uML_MultiplicityElement_isUnique_defaultValue_LiteralBoolean_UML_MultiplicityElement_isUnique->setValue(true);

	

	

	uML_MultiplicityElement_lowerValue_lowerValue_LiteralInteger_UML_MultiplicityElement_lowerValue->setValue(0);

	uML_MultiplicityElement_lower_defaultValue_LiteralInteger_UML_MultiplicityElement_lower->setValue(1);

	

	

	uML_MultiplicityElement_lower_result_lowerValue_LiteralInteger_UML_MultiplicityElement_lower_result->setValue(0);

	

	

	uML_MultiplicityElement_upperValue_lowerValue_LiteralInteger_UML_MultiplicityElement_upperValue->setValue(0);

	uML_MultiplicityElement_upper_defaultValue_LiteralUnlimitedNatural_UML_MultiplicityElement_upper->setValue(1);

	

	

	uML_MultiplicityElement_upper_result_lowerValue_LiteralInteger_UML_MultiplicityElement_upper_result->setValue(0);

	

	

	

	uML_NamedElement_allNamespaces_result_lowerValue_LiteralInteger_UML_NamedElement_allNamespaces_result->setValue(0);

	uML_NamedElement_allNamespaces_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allNamespaces_result->setValue(-1);

	

	uML_NamedElement_allOwningPackages_result_lowerValue_LiteralInteger_UML_NamedElement_allOwningPackages_result->setValue(0);

	uML_NamedElement_allOwningPackages_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allOwningPackages_result->setValue(-1);

	

	uML_NamedElement_clientDependency_lowerValue_LiteralInteger_UML_NamedElement_clientDependency->setValue(0);

	uML_NamedElement_clientDependency_result_lowerValue_LiteralInteger_UML_NamedElement_clientDependency_result->setValue(0);

	uML_NamedElement_clientDependency_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency_result->setValue(-1);

	

	uML_NamedElement_clientDependency_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency->setValue(-1);

	uML_NamedElement_getLabel_Boolean_Booleanreturn_lowerValue_LiteralInteger_UML_NamedElement_getLabel_Boolean_Booleanreturn->setValue(0);

	uML_NamedElement_getLabel_Boolean_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel_Boolean_Booleanreturn->setValue(1);

	uML_NamedElement_getLabel__return_lowerValue_LiteralInteger_UML_NamedElement_getLabel__return->setValue(0);

	uML_NamedElement_getLabel__return_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel__return->setValue(1);

	

	

	

	uML_NamedElement_nameExpression_lowerValue_LiteralInteger_UML_NamedElement_nameExpression->setValue(0);

	uML_NamedElement_name_lowerValue_LiteralInteger_UML_NamedElement_name->setValue(0);

	uML_NamedElement_namespace_lowerValue_LiteralInteger_UML_NamedElement_namespace->setValue(0);

	uML_NamedElement_namespace_result_lowerValue_LiteralInteger_UML_NamedElement_namespace_result->setValue(0);

	uML_NamedElement_qualifiedName_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName->setValue(0);

	uML_NamedElement_qualifiedName_result_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName_result->setValue(0);

	

	

	uML_NamedElement_visibility_lowerValue_LiteralInteger_UML_NamedElement_visibility->setValue(0);

	

	

	

	uML_Namespace_elementImport_lowerValue_LiteralInteger_UML_Namespace_elementImport->setValue(0);

	uML_Namespace_elementImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_elementImport->setValue(-1);

	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setValue(0);

	uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps->setValue(-1);

	uML_Namespace_excludeCollisions_result_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_result->setValue(0);

	uML_Namespace_excludeCollisions_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_result->setValue(-1);

	

	uML_Namespace_getImportedElements__return_lowerValue_LiteralInteger_UML_Namespace_getImportedElements__return->setValue(0);

	uML_Namespace_getImportedElements__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedElements__return->setValue(-1);

	uML_Namespace_getImportedPackages__return_lowerValue_LiteralInteger_UML_Namespace_getImportedPackages__return->setValue(0);

	uML_Namespace_getImportedPackages__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedPackages__return->setValue(-1);

	uML_Namespace_getNamesOfMember_result_lowerValue_LiteralInteger_UML_Namespace_getNamesOfMember_result->setValue(0);

	uML_Namespace_getNamesOfMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_getNamesOfMember_result->setValue(-1);

	

	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps_lowerValue_LiteralInteger_UML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setValue(0);

	uML_Namespace_importMembers_PackageableElement_PackageableElement_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_PackageableElement_PackageableElement_imps->setValue(-1);

	uML_Namespace_importMembers_result_lowerValue_LiteralInteger_UML_Namespace_importMembers_result->setValue(0);

	uML_Namespace_importMembers_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_result->setValue(-1);

	

	uML_Namespace_importedMember_lowerValue_LiteralInteger_UML_Namespace_importedMember->setValue(0);

	uML_Namespace_importedMember_result_lowerValue_LiteralInteger_UML_Namespace_importedMember_result->setValue(0);

	uML_Namespace_importedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember_result->setValue(-1);

	

	uML_Namespace_importedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember->setValue(-1);

	uML_Namespace_member_lowerValue_LiteralInteger_UML_Namespace_member->setValue(0);

	uML_Namespace_member_upperValue_LiteralUnlimitedNatural_UML_Namespace_member->setValue(-1);

	

	

	uML_Namespace_ownedMember_lowerValue_LiteralInteger_UML_Namespace_ownedMember->setValue(0);

	uML_Namespace_ownedMember_result_lowerValue_LiteralInteger_UML_Namespace_ownedMember_result->setValue(0);

	uML_Namespace_ownedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember_result->setValue(-1);

	uML_Namespace_ownedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember->setValue(-1);

	uML_Namespace_ownedRule_lowerValue_LiteralInteger_UML_Namespace_ownedRule->setValue(0);

	uML_Namespace_ownedRule_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedRule->setValue(-1);

	uML_Namespace_packageImport_lowerValue_LiteralInteger_UML_Namespace_packageImport->setValue(0);

	uML_Namespace_packageImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_packageImport->setValue(-1);

	uML_Node_getCommunicationPaths__return_lowerValue_LiteralInteger_UML_Node_getCommunicationPaths__return->setValue(0);

	uML_Node_getCommunicationPaths__return_upperValue_LiteralUnlimitedNatural_UML_Node_getCommunicationPaths__return->setValue(-1);

	

	uML_Node_nestedNode_lowerValue_LiteralInteger_UML_Node_nestedNode->setValue(0);

	uML_Node_nestedNode_upperValue_LiteralUnlimitedNatural_UML_Node_nestedNode->setValue(-1);

	

	

	uML_ObjectFlow_isMulticast_defaultValue_LiteralBoolean_UML_ObjectFlow_isMulticast->setValue(false);

	uML_ObjectFlow_isMultireceive_defaultValue_LiteralBoolean_UML_ObjectFlow_isMultireceive->setValue(false);

	

	

	

	

	uML_ObjectFlow_selection_lowerValue_LiteralInteger_UML_ObjectFlow_selection->setValue(0);

	

	

	uML_ObjectFlow_transformation_lowerValue_LiteralInteger_UML_ObjectFlow_transformation->setValue(0);

	uML_ObjectNode_inState_lowerValue_LiteralInteger_UML_ObjectNode_inState->setValue(0);

	uML_ObjectNode_inState_upperValue_LiteralUnlimitedNatural_UML_ObjectNode_inState->setValue(-1);

	

	uML_ObjectNode_isControlType_defaultValue_LiteralBoolean_UML_ObjectNode_isControlType->setValue(false);

	

	uML_ObjectNode_ordering_defaultValue_InstanceValue->setInstance(get_UML_ObjectNodeOrderingKind_FIFO());
	uML_ObjectNode_ordering_defaultValue_InstanceValue->setType(get_UML_ObjectNodeOrderingKind());

	

	uML_ObjectNode_selection_lowerValue_LiteralInteger_UML_ObjectNode_selection->setValue(0);

	uML_ObjectNode_upperBound_lowerValue_LiteralInteger_UML_ObjectNode_upperBound->setValue(0);

	uML_OccurrenceSpecification_getCovered__return_lowerValue_LiteralInteger_UML_OccurrenceSpecification_getCovered__return->setValue(0);

	uML_OccurrenceSpecification_toAfter_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toAfter->setValue(0);

	uML_OccurrenceSpecification_toAfter_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toAfter->setValue(-1);

	uML_OccurrenceSpecification_toBefore_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toBefore->setValue(0);

	uML_OccurrenceSpecification_toBefore_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toBefore->setValue(-1);

	uML_OpaqueAction_body_lowerValue_LiteralInteger_UML_OpaqueAction_body->setValue(0);

	uML_OpaqueAction_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_body->setValue(-1);

	uML_OpaqueAction_inputValue_lowerValue_LiteralInteger_UML_OpaqueAction_inputValue->setValue(0);

	uML_OpaqueAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_inputValue->setValue(-1);

	

	uML_OpaqueAction_language_lowerValue_LiteralInteger_UML_OpaqueAction_language->setValue(0);

	uML_OpaqueAction_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_language->setValue(-1);

	uML_OpaqueAction_outputValue_lowerValue_LiteralInteger_UML_OpaqueAction_outputValue->setValue(0);

	uML_OpaqueAction_outputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_outputValue->setValue(-1);

	uML_OpaqueBehavior_body_lowerValue_LiteralInteger_UML_OpaqueBehavior_body->setValue(0);

	uML_OpaqueBehavior_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_body->setValue(-1);

	uML_OpaqueBehavior_language_lowerValue_LiteralInteger_UML_OpaqueBehavior_language->setValue(0);

	uML_OpaqueBehavior_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_language->setValue(-1);

	uML_OpaqueExpression_behavior_lowerValue_LiteralInteger_UML_OpaqueExpression_behavior->setValue(0);

	uML_OpaqueExpression_body_lowerValue_LiteralInteger_UML_OpaqueExpression_body->setValue(0);

	uML_OpaqueExpression_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_body->setValue(-1);

	

	

	

	

	

	

	uML_OpaqueExpression_language_lowerValue_LiteralInteger_UML_OpaqueExpression_language->setValue(0);

	uML_OpaqueExpression_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_language->setValue(-1);

	

	

	uML_OpaqueExpression_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result->setValue(0);

	uML_OpaqueExpression_result_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result_result->setValue(0);

	uML_OpaqueExpression_result_result_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_result_result->setValue(1);

	

	

	

	

	

	uML_Operation_bodyCondition_lowerValue_LiteralInteger_UML_Operation_bodyCondition->setValue(0);

	uML_Operation_class_lowerValue_LiteralInteger_UML_Operation_class->setValue(0);

	uML_Operation_datatype_lowerValue_LiteralInteger_UML_Operation_datatype->setValue(0);

	uML_Operation_getReturnResult__return_lowerValue_LiteralInteger_UML_Operation_getReturnResult__return->setValue(0);

	uML_Operation_getReturnResult__return_upperValue_LiteralUnlimitedNatural_UML_Operation_getReturnResult__return->setValue(1);

	uML_Operation_interface_lowerValue_LiteralInteger_UML_Operation_interface->setValue(0);

	

	

	

	uML_Operation_isQuery_defaultValue_LiteralBoolean_UML_Operation_isQuery->setValue(false);

	uML_Operation_isUnique_defaultValue_LiteralBoolean_UML_Operation_isUnique->setValue(true);

	

	uML_Operation_lower_defaultValue_LiteralInteger_UML_Operation_lower->setValue(1);

	uML_Operation_lower_lowerValue_LiteralInteger_UML_Operation_lower->setValue(0);

	

	

	uML_Operation_ownedParameter_lowerValue_LiteralInteger_UML_Operation_ownedParameter->setValue(0);

	uML_Operation_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Operation_ownedParameter->setValue(-1);

	uML_Operation_postcondition_lowerValue_LiteralInteger_UML_Operation_postcondition->setValue(0);

	uML_Operation_postcondition_upperValue_LiteralUnlimitedNatural_UML_Operation_postcondition->setValue(-1);

	uML_Operation_precondition_lowerValue_LiteralInteger_UML_Operation_precondition->setValue(0);

	uML_Operation_precondition_upperValue_LiteralUnlimitedNatural_UML_Operation_precondition->setValue(-1);

	uML_Operation_raisedException_lowerValue_LiteralInteger_UML_Operation_raisedException->setValue(0);

	uML_Operation_raisedException_upperValue_LiteralUnlimitedNatural_UML_Operation_raisedException->setValue(-1);

	uML_Operation_redefinedOperation_lowerValue_LiteralInteger_UML_Operation_redefinedOperation->setValue(0);

	uML_Operation_redefinedOperation_upperValue_LiteralUnlimitedNatural_UML_Operation_redefinedOperation->setValue(-1);

	uML_Operation_returnResult_result_lowerValue_LiteralInteger_UML_Operation_returnResult_result->setValue(0);

	uML_Operation_returnResult_result_upperValue_LiteralUnlimitedNatural_UML_Operation_returnResult_result->setValue(-1);

	

	uML_Operation_templateParameter_lowerValue_LiteralInteger_UML_Operation_templateParameter->setValue(0);

	uML_Operation_type_lowerValue_LiteralInteger_UML_Operation_type->setValue(0);

	

	uML_Operation_upper_defaultValue_LiteralUnlimitedNatural_UML_Operation_upper->setValue(1);

	uML_Operation_upper_lowerValue_LiteralInteger_UML_Operation_upper->setValue(0);

	

	

	

	uML_PackageImport_visibility_defaultValue_InstanceValue->setInstance(get_UML_VisibilityKind_public());
	uML_PackageImport_visibility_defaultValue_InstanceValue->setType(get_UML_VisibilityKind());

	uML_Package_URI_lowerValue_LiteralInteger_UML_Package_URI->setValue(0);

	uML_Package_allApplicableStereotypes_result_lowerValue_LiteralInteger_UML_Package_allApplicableStereotypes_result->setValue(0);

	uML_Package_allApplicableStereotypes_result_upperValue_LiteralUnlimitedNatural_UML_Package_allApplicableStereotypes_result->setValue(-1);

	

	uML_Package_applyProfile_Profile_Profilereturn_lowerValue_LiteralInteger_UML_Package_applyProfile_Profile_Profilereturn->setValue(0);

	uML_Package_applyProfile_Profile_Profilereturn_upperValue_LiteralUnlimitedNatural_UML_Package_applyProfile_Profile_Profilereturn->setValue(-1);

	uML_Package_containingProfile_result_lowerValue_LiteralInteger_UML_Package_containingProfile_result->setValue(0);

	

	

	uML_Package_getAllAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAllAppliedProfiles__return->setValue(0);

	uML_Package_getAllAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllAppliedProfiles__return->setValue(-1);

	uML_Package_getAllProfileApplications__return_lowerValue_LiteralInteger_UML_Package_getAllProfileApplications__return->setValue(0);

	uML_Package_getAllProfileApplications__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllProfileApplications__return->setValue(-1);

	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setValue(0);

	uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn->setValue(1);

	uML_Package_getAppliedProfile_String_Stringreturn_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_Stringreturn->setValue(0);

	uML_Package_getAppliedProfile_String_Stringreturn_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_Stringreturn->setValue(1);

	uML_Package_getAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAppliedProfiles__return->setValue(0);

	uML_Package_getAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfiles__return->setValue(-1);

	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setValue(0);

	uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn->setValue(1);

	uML_Package_getProfileApplication_Profile_Profilereturn_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_Profilereturn->setValue(0);

	uML_Package_getProfileApplication_Profile_Profilereturn_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_Profilereturn->setValue(1);

	

	

	

	uML_Package_nestedPackage_lowerValue_LiteralInteger_UML_Package_nestedPackage->setValue(0);

	uML_Package_nestedPackage_result_lowerValue_LiteralInteger_UML_Package_nestedPackage_result->setValue(0);

	uML_Package_nestedPackage_result_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage_result->setValue(-1);

	

	uML_Package_nestedPackage_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage->setValue(-1);

	uML_Package_nestingPackage_lowerValue_LiteralInteger_UML_Package_nestingPackage->setValue(0);

	uML_Package_ownedStereotype_lowerValue_LiteralInteger_UML_Package_ownedStereotype->setValue(0);

	uML_Package_ownedStereotype_result_lowerValue_LiteralInteger_UML_Package_ownedStereotype_result->setValue(0);

	uML_Package_ownedStereotype_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype_result->setValue(-1);

	

	uML_Package_ownedStereotype_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype->setValue(-1);

	uML_Package_ownedType_lowerValue_LiteralInteger_UML_Package_ownedType->setValue(0);

	uML_Package_ownedType_result_lowerValue_LiteralInteger_UML_Package_ownedType_result->setValue(0);

	uML_Package_ownedType_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType_result->setValue(-1);

	

	uML_Package_ownedType_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType->setValue(-1);

	uML_Package_packageMerge_lowerValue_LiteralInteger_UML_Package_packageMerge->setValue(0);

	uML_Package_packageMerge_upperValue_LiteralUnlimitedNatural_UML_Package_packageMerge->setValue(-1);

	uML_Package_packagedElement_lowerValue_LiteralInteger_UML_Package_packagedElement->setValue(0);

	uML_Package_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Package_packagedElement->setValue(-1);

	uML_Package_profileApplication_lowerValue_LiteralInteger_UML_Package_profileApplication->setValue(0);

	uML_Package_profileApplication_upperValue_LiteralUnlimitedNatural_UML_Package_profileApplication->setValue(-1);

	uML_Package_unapplyProfile_Profile_Profilereturn_lowerValue_LiteralInteger_UML_Package_unapplyProfile_Profile_Profilereturn->setValue(0);

	uML_Package_unapplyProfile_Profile_Profilereturn_upperValue_LiteralUnlimitedNatural_UML_Package_unapplyProfile_Profile_Profilereturn->setValue(-1);

	uML_Package_visibleMembers_result_lowerValue_LiteralInteger_UML_Package_visibleMembers_result->setValue(0);

	uML_Package_visibleMembers_result_upperValue_LiteralUnlimitedNatural_UML_Package_visibleMembers_result->setValue(-1);

	

	

	uML_PackageableElement_visibility_defaultValue_InstanceValue->setInstance(get_UML_VisibilityKind_public());
	uML_PackageableElement_visibility_defaultValue_InstanceValue->setType(get_UML_VisibilityKind());

	uML_PackageableElement_visibility_lowerValue_LiteralInteger_UML_PackageableElement_visibility->setValue(0);

	uML_ParameterSet_condition_lowerValue_LiteralInteger_UML_ParameterSet_condition->setValue(0);

	uML_ParameterSet_condition_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_condition->setValue(-1);

	

	uML_ParameterSet_parameter_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_parameter->setValue(-1);

	

	

	

	uML_Parameter_defaultValue_lowerValue_LiteralInteger_UML_Parameter_defaultValue->setValue(0);

	uML_Parameter_default_lowerValue_LiteralInteger_UML_Parameter_default->setValue(0);

	uML_Parameter_default_result_lowerValue_LiteralInteger_UML_Parameter_default_result->setValue(0);

	uML_Parameter_default_result_upperValue_LiteralUnlimitedNatural_UML_Parameter_default_result->setValue(1);

	

	uML_Parameter_direction_defaultValue_InstanceValue->setInstance(get_UML_ParameterDirectionKind_in());
	uML_Parameter_direction_defaultValue_InstanceValue->setType(get_UML_ParameterDirectionKind());

	uML_Parameter_effect_lowerValue_LiteralInteger_UML_Parameter_effect->setValue(0);

	

	uML_Parameter_isException_defaultValue_LiteralBoolean_UML_Parameter_isException->setValue(false);

	uML_Parameter_isStream_defaultValue_LiteralBoolean_UML_Parameter_isStream->setValue(false);

	

	

	uML_Parameter_operation_lowerValue_LiteralInteger_UML_Parameter_operation->setValue(0);

	uML_Parameter_parameterSet_lowerValue_LiteralInteger_UML_Parameter_parameterSet->setValue(0);

	uML_Parameter_parameterSet_upperValue_LiteralUnlimitedNatural_UML_Parameter_parameterSet->setValue(-1);

	

	

	

	

	uML_ParameterableElement_owningTemplateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_owningTemplateParameter->setValue(0);

	uML_ParameterableElement_templateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_templateParameter->setValue(0);

	

	

	

	

	uML_Pin_isControl_defaultValue_LiteralBoolean_UML_Pin_isControl->setValue(false);

	

	uML_Port_basicProvided_result_lowerValue_LiteralInteger_UML_Port_basicProvided_result->setValue(0);

	uML_Port_basicProvided_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicProvided_result->setValue(-1);

	

	uML_Port_basicRequired_result_lowerValue_LiteralInteger_UML_Port_basicRequired_result->setValue(0);

	uML_Port_basicRequired_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicRequired_result->setValue(-1);

	

	

	

	uML_Port_isBehavior_defaultValue_LiteralBoolean_UML_Port_isBehavior->setValue(false);

	uML_Port_isConjugated_defaultValue_LiteralBoolean_UML_Port_isConjugated->setValue(false);

	uML_Port_isService_defaultValue_LiteralBoolean_UML_Port_isService->setValue(true);

	

	uML_Port_protocol_lowerValue_LiteralInteger_UML_Port_protocol->setValue(0);

	uML_Port_provided_lowerValue_LiteralInteger_UML_Port_provided->setValue(0);

	uML_Port_provided_result_lowerValue_LiteralInteger_UML_Port_provided_result->setValue(0);

	uML_Port_provided_result_upperValue_LiteralUnlimitedNatural_UML_Port_provided_result->setValue(-1);

	

	uML_Port_provided_upperValue_LiteralUnlimitedNatural_UML_Port_provided->setValue(-1);

	uML_Port_redefinedPort_lowerValue_LiteralInteger_UML_Port_redefinedPort->setValue(0);

	uML_Port_redefinedPort_upperValue_LiteralUnlimitedNatural_UML_Port_redefinedPort->setValue(-1);

	uML_Port_required_lowerValue_LiteralInteger_UML_Port_required->setValue(0);

	uML_Port_required_result_lowerValue_LiteralInteger_UML_Port_required_result->setValue(0);

	uML_Port_required_result_upperValue_LiteralUnlimitedNatural_UML_Port_required_result->setValue(-1);

	

	uML_Port_required_upperValue_LiteralUnlimitedNatural_UML_Port_required->setValue(-1);

	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setValue(0);

	uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn->setValue(1);

	uML_ProfileApplication_getAppliedDefinition__return_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition__return->setValue(0);

	uML_ProfileApplication_getAppliedDefinition__return_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition__return->setValue(1);

	uML_ProfileApplication_isStrict_defaultValue_LiteralBoolean_UML_ProfileApplication_isStrict->setValue(false);

	uML_Profile_define__return_lowerValue_LiteralInteger_UML_Profile_define__return->setValue(0);

	uML_Profile_define__return_upperValue_LiteralUnlimitedNatural_UML_Profile_define__return->setValue(1);

	uML_Profile_getDefinition_NamedElement_NamedElementreturn_lowerValue_LiteralInteger_UML_Profile_getDefinition_NamedElement_NamedElementreturn->setValue(0);

	uML_Profile_getDefinition_NamedElement_NamedElementreturn_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition_NamedElement_NamedElementreturn->setValue(1);

	uML_Profile_getDefinition__return_lowerValue_LiteralInteger_UML_Profile_getDefinition__return->setValue(0);

	uML_Profile_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition__return->setValue(1);

	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn_lowerValue_LiteralInteger_UML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setValue(0);

	uML_Profile_getOwnedExtensions_Boolean_Booleanreturn_upperValue_LiteralUnlimitedNatural_UML_Profile_getOwnedExtensions_Boolean_Booleanreturn->setValue(-1);

	uML_Profile_getReferencedMetaclasses__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetaclasses__return->setValue(0);

	uML_Profile_getReferencedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetaclasses__return->setValue(-1);

	uML_Profile_getReferencedMetamodels__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetamodels__return->setValue(0);

	uML_Profile_getReferencedMetamodels__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetamodels__return->setValue(-1);

	uML_Profile_metaclassReference_lowerValue_LiteralInteger_UML_Profile_metaclassReference->setValue(0);

	uML_Profile_metaclassReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metaclassReference->setValue(-1);

	

	uML_Profile_metamodelReference_lowerValue_LiteralInteger_UML_Profile_metamodelReference->setValue(0);

	uML_Profile_metamodelReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metamodelReference->setValue(-1);

	

	uML_Property_aggregation_defaultValue_InstanceValue->setInstance(get_UML_AggregationKind_none());
	uML_Property_aggregation_defaultValue_InstanceValue->setType(get_UML_AggregationKind());

	uML_Property_associationEnd_lowerValue_LiteralInteger_UML_Property_associationEnd->setValue(0);

	uML_Property_association_lowerValue_LiteralInteger_UML_Property_association->setValue(0);

	

	uML_Property_class_lowerValue_LiteralInteger_UML_Property_class->setValue(0);

	uML_Property_datatype_lowerValue_LiteralInteger_UML_Property_datatype->setValue(0);

	uML_Property_defaultValue_lowerValue_LiteralInteger_UML_Property_defaultValue->setValue(0);

	uML_Property_default_lowerValue_LiteralInteger_UML_Property_default->setValue(0);

	

	

	

	uML_Property_getDefault_result_lowerValue_LiteralInteger_UML_Property_getDefault_result->setValue(0);

	uML_Property_getDefault_result_upperValue_LiteralUnlimitedNatural_UML_Property_getDefault_result->setValue(1);

	uML_Property_getOtherEnd__return_lowerValue_LiteralInteger_UML_Property_getOtherEnd__return->setValue(0);

	uML_Property_getOtherEnd__return_upperValue_LiteralUnlimitedNatural_UML_Property_getOtherEnd__return->setValue(1);

	uML_Property_interface_lowerValue_LiteralInteger_UML_Property_interface->setValue(0);

	

	

	uML_Property_isComposite_defaultValue_LiteralBoolean_UML_Property_isComposite->setValue(false);

	

	

	

	uML_Property_isDerivedUnion_defaultValue_LiteralBoolean_UML_Property_isDerivedUnion->setValue(false);

	uML_Property_isDerived_defaultValue_LiteralBoolean_UML_Property_isDerived->setValue(false);

	uML_Property_isID_defaultValue_LiteralBoolean_UML_Property_isID->setValue(false);

	

	

	uML_Property_opposite_lowerValue_LiteralInteger_UML_Property_opposite->setValue(0);

	uML_Property_opposite_result_lowerValue_LiteralInteger_UML_Property_opposite_result->setValue(0);

	

	uML_Property_owningAssociation_lowerValue_LiteralInteger_UML_Property_owningAssociation->setValue(0);

	

	uML_Property_qualifier_lowerValue_LiteralInteger_UML_Property_qualifier->setValue(0);

	uML_Property_qualifier_upperValue_LiteralUnlimitedNatural_UML_Property_qualifier->setValue(-1);

	uML_Property_redefinedProperty_lowerValue_LiteralInteger_UML_Property_redefinedProperty->setValue(0);

	uML_Property_redefinedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_redefinedProperty->setValue(-1);

	

	uML_Property_subsettedProperty_lowerValue_LiteralInteger_UML_Property_subsettedProperty->setValue(0);

	uML_Property_subsettedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_subsettedProperty->setValue(-1);

	

	uML_Property_subsettingContext_result_lowerValue_LiteralInteger_UML_Property_subsettingContext_result->setValue(0);

	uML_Property_subsettingContext_result_upperValue_LiteralUnlimitedNatural_UML_Property_subsettingContext_result->setValue(-1);

	

	

	

	

	

	uML_ProtocolStateMachine_conformance_lowerValue_LiteralInteger_UML_ProtocolStateMachine_conformance->setValue(0);

	uML_ProtocolStateMachine_conformance_upperValue_LiteralUnlimitedNatural_UML_ProtocolStateMachine_conformance->setValue(-1);

	

	

	

	

	

	uML_ProtocolTransition_postCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_postCondition->setValue(0);

	uML_ProtocolTransition_preCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_preCondition->setValue(0);

	uML_ProtocolTransition_referred_lowerValue_LiteralInteger_UML_ProtocolTransition_referred->setValue(0);

	uML_ProtocolTransition_referred_result_lowerValue_LiteralInteger_UML_ProtocolTransition_referred_result->setValue(0);

	uML_ProtocolTransition_referred_result_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred_result->setValue(-1);

	

	uML_ProtocolTransition_referred_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred->setValue(-1);

	

	

	

	

	

	

	

	uML_Pseudostate_kind_defaultValue_InstanceValue->setInstance(get_UML_PseudostateKind_initial());
	uML_Pseudostate_kind_defaultValue_InstanceValue->setType(get_UML_PseudostateKind());

	

	uML_Pseudostate_stateMachine_lowerValue_LiteralInteger_UML_Pseudostate_stateMachine->setValue(0);

	uML_Pseudostate_state_lowerValue_LiteralInteger_UML_Pseudostate_state->setValue(0);

	

	

	

	

	

	

	

	

	uML_ReadIsClassifiedObjectAction_isDirect_defaultValue_LiteralBoolean_UML_ReadIsClassifiedObjectAction_isDirect->setValue(false);

	

	

	

	

	

	

	uML_ReadLinkAction_openEnd_result_lowerValue_LiteralInteger_UML_ReadLinkAction_openEnd_result->setValue(0);

	uML_ReadLinkAction_openEnd_result_upperValue_LiteralUnlimitedNatural_UML_ReadLinkAction_openEnd_result->setValue(-1);

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	

	uML_ReclassifyObjectAction_isReplaceAll_defaultValue_LiteralBoolean_UML_ReclassifyObjectAction_isReplaceAll->setValue(false);

	

	uML_ReclassifyObjectAction_newClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_newClassifier->setValue(0);

	uML_ReclassifyObjectAction_newClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_newClassifier->setValue(-1);

	uML_ReclassifyObjectAction_oldClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_oldClassifier->setValue(0);

	uML_ReclassifyObjectAction_oldClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_oldClassifier->setValue(-1);

	

	

	uML_RedefinableElement_isLeaf_defaultValue_LiteralBoolean_UML_RedefinableElement_isLeaf->setValue(false);

	

	

	uML_RedefinableElement_redefinedElement_lowerValue_LiteralInteger_UML_RedefinableElement_redefinedElement->setValue(0);

	uML_RedefinableElement_redefinedElement_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinedElement->setValue(-1);

	uML_RedefinableElement_redefinitionContext_lowerValue_LiteralInteger_UML_RedefinableElement_redefinitionContext->setValue(0);

	uML_RedefinableElement_redefinitionContext_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinitionContext->setValue(-1);

	

	

	uML_RedefinableTemplateSignature_extendedSignature_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_extendedSignature->setValue(0);

	uML_RedefinableTemplateSignature_extendedSignature_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_extendedSignature->setValue(-1);

	uML_RedefinableTemplateSignature_inheritedParameter_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter->setValue(0);

	uML_RedefinableTemplateSignature_inheritedParameter_result_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter_result->setValue(0);

	uML_RedefinableTemplateSignature_inheritedParameter_result_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter_result->setValue(-1);

	

	uML_RedefinableTemplateSignature_inheritedParameter_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter->setValue(-1);

	

	

	

	

	uML_ReduceAction_isOrdered_defaultValue_LiteralBoolean_UML_ReduceAction_isOrdered->setValue(false);

	

	

	

	

	

	uML_Region_extendedRegion_lowerValue_LiteralInteger_UML_Region_extendedRegion->setValue(0);

	

	

	

	

	

	

	

	uML_Region_stateMachine_lowerValue_LiteralInteger_UML_Region_stateMachine->setValue(0);

	uML_Region_state_lowerValue_LiteralInteger_UML_Region_state->setValue(0);

	uML_Region_subvertex_lowerValue_LiteralInteger_UML_Region_subvertex->setValue(0);

	uML_Region_subvertex_upperValue_LiteralUnlimitedNatural_UML_Region_subvertex->setValue(-1);

	uML_Region_transition_lowerValue_LiteralInteger_UML_Region_transition->setValue(0);

	uML_Region_transition_upperValue_LiteralUnlimitedNatural_UML_Region_transition->setValue(-1);

	uML_Relationship_relatedElement_upperValue_LiteralUnlimitedNatural_UML_Relationship_relatedElement->setValue(-1);

	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setValue(false);

	

	uML_RemoveStructuralFeatureValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveStructuralFeatureValueAction_removeAt->setValue(0);

	uML_RemoveVariableValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveVariableValueAction_isRemoveDuplicates->setValue(false);

	

	uML_RemoveVariableValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveVariableValueAction_removeAt->setValue(0);

	

	

	uML_ReplyAction_replyValue_lowerValue_LiteralInteger_UML_ReplyAction_replyValue->setValue(0);

	uML_ReplyAction_replyValue_upperValue_LiteralUnlimitedNatural_UML_ReplyAction_replyValue->setValue(-1);

	

	

	

	

	uML_SequenceNode_executableNode_lowerValue_LiteralInteger_UML_SequenceNode_executableNode->setValue(0);

	uML_SequenceNode_executableNode_upperValue_LiteralUnlimitedNatural_UML_SequenceNode_executableNode->setValue(-1);

	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(0);

	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(1);

	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(0);

	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(1);

	uML_Signal_ownedAttribute_lowerValue_LiteralInteger_UML_Signal_ownedAttribute->setValue(0);

	uML_Signal_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Signal_ownedAttribute->setValue(-1);

	uML_Slot_value_lowerValue_LiteralInteger_UML_Slot_value->setValue(0);

	uML_Slot_value_upperValue_LiteralUnlimitedNatural_UML_Slot_value->setValue(-1);

	

	

	uML_StartObjectBehaviorAction_behavior_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_behavior_result->setValue(0);

	

	uML_StartObjectBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_inputParameters_result->setValue(0);

	uML_StartObjectBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_inputParameters_result->setValue(-1);

	

	

	

	uML_StartObjectBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_outputParameters_result->setValue(0);

	uML_StartObjectBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_outputParameters_result->setValue(-1);

	

	

	

	

	

	

	uML_StateMachine_connectionPoint_lowerValue_LiteralInteger_UML_StateMachine_connectionPoint->setValue(0);

	uML_StateMachine_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_StateMachine_connectionPoint->setValue(-1);

	

	

	uML_StateMachine_extendedStateMachine_lowerValue_LiteralInteger_UML_StateMachine_extendedStateMachine->setValue(0);

	uML_StateMachine_extendedStateMachine_upperValue_LiteralUnlimitedNatural_UML_StateMachine_extendedStateMachine->setValue(-1);

	

	

	

	uML_StateMachine_region_upperValue_LiteralUnlimitedNatural_UML_StateMachine_region->setValue(-1);

	uML_StateMachine_submachineState_lowerValue_LiteralInteger_UML_StateMachine_submachineState->setValue(0);

	uML_StateMachine_submachineState_upperValue_LiteralUnlimitedNatural_UML_StateMachine_submachineState->setValue(-1);

	

	uML_State_connectionPoint_lowerValue_LiteralInteger_UML_State_connectionPoint->setValue(0);

	uML_State_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_State_connectionPoint->setValue(-1);

	uML_State_connection_lowerValue_LiteralInteger_UML_State_connection->setValue(0);

	uML_State_connection_upperValue_LiteralUnlimitedNatural_UML_State_connection->setValue(-1);

	

	uML_State_deferrableTrigger_lowerValue_LiteralInteger_UML_State_deferrableTrigger->setValue(0);

	uML_State_deferrableTrigger_upperValue_LiteralUnlimitedNatural_UML_State_deferrableTrigger->setValue(-1);

	

	uML_State_doActivity_lowerValue_LiteralInteger_UML_State_doActivity->setValue(0);

	uML_State_entry_lowerValue_LiteralInteger_UML_State_entry->setValue(0);

	

	uML_State_exit_lowerValue_LiteralInteger_UML_State_exit->setValue(0);

	

	

	

	

	

	uML_State_isSimple_defaultValue_LiteralBoolean_UML_State_isSimple->setValue(true);

	

	

	uML_State_redefinedState_lowerValue_LiteralInteger_UML_State_redefinedState->setValue(0);

	

	uML_State_region_lowerValue_LiteralInteger_UML_State_region->setValue(0);

	uML_State_region_upperValue_LiteralUnlimitedNatural_UML_State_region->setValue(-1);

	uML_State_stateInvariant_lowerValue_LiteralInteger_UML_State_stateInvariant->setValue(0);

	uML_State_submachine_lowerValue_LiteralInteger_UML_State_submachine->setValue(0);

	

	

	

	

	

	

	

	

	

	uML_Stereotype_getAllExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getAllExtendedMetaclasses__return->setValue(0);

	uML_Stereotype_getAllExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getAllExtendedMetaclasses__return->setValue(-1);

	uML_Stereotype_getDefinition__return_lowerValue_LiteralInteger_UML_Stereotype_getDefinition__return->setValue(0);

	uML_Stereotype_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getDefinition__return->setValue(1);

	uML_Stereotype_getExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getExtendedMetaclasses__return->setValue(0);

	uML_Stereotype_getExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getExtendedMetaclasses__return->setValue(-1);

	uML_Stereotype_icon_lowerValue_LiteralInteger_UML_Stereotype_icon->setValue(0);

	uML_Stereotype_icon_upperValue_LiteralUnlimitedNatural_UML_Stereotype_icon->setValue(-1);

	

	

	

	uML_StringExpression_owningExpression_lowerValue_LiteralInteger_UML_StringExpression_owningExpression->setValue(0);

	

	uML_StringExpression_subExpression_lowerValue_LiteralInteger_UML_StringExpression_subExpression->setValue(0);

	uML_StringExpression_subExpression_upperValue_LiteralUnlimitedNatural_UML_StringExpression_subExpression->setValue(-1);

	

	

	

	

	

	

	uML_StructuralFeature_isReadOnly_defaultValue_LiteralBoolean_UML_StructuralFeature_isReadOnly->setValue(false);

	uML_StructuredActivityNode_activity_lowerValue_LiteralInteger_UML_StructuredActivityNode_activity->setValue(0);

	uML_StructuredActivityNode_allActions_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allActions_result->setValue(0);

	uML_StructuredActivityNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allActions_result->setValue(-1);

	

	uML_StructuredActivityNode_allOwnedNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allOwnedNodes_result->setValue(0);

	uML_StructuredActivityNode_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allOwnedNodes_result->setValue(-1);

	

	uML_StructuredActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_containingActivity_result->setValue(0);

	

	uML_StructuredActivityNode_edge_lowerValue_LiteralInteger_UML_StructuredActivityNode_edge->setValue(0);

	uML_StructuredActivityNode_edge_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_edge->setValue(-1);

	

	

	uML_StructuredActivityNode_mustIsolate_defaultValue_LiteralBoolean_UML_StructuredActivityNode_mustIsolate->setValue(false);

	uML_StructuredActivityNode_node_lowerValue_LiteralInteger_UML_StructuredActivityNode_node->setValue(0);

	uML_StructuredActivityNode_node_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_node->setValue(-1);

	

	uML_StructuredActivityNode_sourceNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_sourceNodes_result->setValue(0);

	uML_StructuredActivityNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_sourceNodes_result->setValue(-1);

	

	uML_StructuredActivityNode_structuredNodeInput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeInput->setValue(0);

	uML_StructuredActivityNode_structuredNodeInput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeInput->setValue(-1);

	uML_StructuredActivityNode_structuredNodeOutput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeOutput->setValue(0);

	uML_StructuredActivityNode_structuredNodeOutput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeOutput->setValue(-1);

	uML_StructuredActivityNode_targetNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_targetNodes_result->setValue(0);

	uML_StructuredActivityNode_targetNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_targetNodes_result->setValue(-1);

	

	uML_StructuredActivityNode_variable_lowerValue_LiteralInteger_UML_StructuredActivityNode_variable->setValue(0);

	uML_StructuredActivityNode_variable_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_variable->setValue(-1);

	uML_StructuredClassifier_allRoles_result_lowerValue_LiteralInteger_UML_StructuredClassifier_allRoles_result->setValue(0);

	uML_StructuredClassifier_allRoles_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_allRoles_result->setValue(-1);

	

	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(0);

	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name->setValue(1);

	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(0);

	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type->setValue(1);

	uML_StructuredClassifier_ownedAttribute_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedAttribute->setValue(0);

	uML_StructuredClassifier_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedAttribute->setValue(-1);

	uML_StructuredClassifier_ownedConnector_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedConnector->setValue(0);

	uML_StructuredClassifier_ownedConnector_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedConnector->setValue(-1);

	uML_StructuredClassifier_part_lowerValue_LiteralInteger_UML_StructuredClassifier_part->setValue(0);

	uML_StructuredClassifier_part_result_lowerValue_LiteralInteger_UML_StructuredClassifier_part_result->setValue(0);

	uML_StructuredClassifier_part_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part_result->setValue(-1);

	

	uML_StructuredClassifier_part_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part->setValue(-1);

	uML_StructuredClassifier_role_lowerValue_LiteralInteger_UML_StructuredClassifier_role->setValue(0);

	uML_StructuredClassifier_role_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_role->setValue(-1);

	

	uML_TemplateBinding_parameterSubstitution_lowerValue_LiteralInteger_UML_TemplateBinding_parameterSubstitution->setValue(0);

	uML_TemplateBinding_parameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_TemplateBinding_parameterSubstitution->setValue(-1);

	

	

	uML_TemplateParameterSubstitution_ownedActual_lowerValue_LiteralInteger_UML_TemplateParameterSubstitution_ownedActual->setValue(0);

	uML_TemplateParameter_default_lowerValue_LiteralInteger_UML_TemplateParameter_default->setValue(0);

	

	uML_TemplateParameter_ownedDefault_lowerValue_LiteralInteger_UML_TemplateParameter_ownedDefault->setValue(0);

	uML_TemplateParameter_ownedParameteredElement_lowerValue_LiteralInteger_UML_TemplateParameter_ownedParameteredElement->setValue(0);

	

	uML_TemplateSignature_ownedParameter_lowerValue_LiteralInteger_UML_TemplateSignature_ownedParameter->setValue(0);

	uML_TemplateSignature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_ownedParameter->setValue(-1);

	uML_TemplateSignature_parameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_parameter->setValue(-1);

	

	

	uML_TemplateableElement_ownedTemplateSignature_lowerValue_LiteralInteger_UML_TemplateableElement_ownedTemplateSignature->setValue(0);

	uML_TemplateableElement_parameterableElements_result_lowerValue_LiteralInteger_UML_TemplateableElement_parameterableElements_result->setValue(0);

	uML_TemplateableElement_parameterableElements_result_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_parameterableElements_result->setValue(-1);

	

	uML_TemplateableElement_templateBinding_lowerValue_LiteralInteger_UML_TemplateableElement_templateBinding->setValue(0);

	uML_TemplateableElement_templateBinding_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_templateBinding->setValue(-1);

	

	

	

	uML_TimeConstraint_firstEvent_defaultValue_LiteralBoolean_UML_TimeConstraint_firstEvent->setValue(true);

	uML_TimeConstraint_firstEvent_lowerValue_LiteralInteger_UML_TimeConstraint_firstEvent->setValue(0);

	

	uML_TimeEvent_isRelative_defaultValue_LiteralBoolean_UML_TimeEvent_isRelative->setValue(false);

	

	uML_TimeExpression_expr_lowerValue_LiteralInteger_UML_TimeExpression_expr->setValue(0);

	

	uML_TimeExpression_observation_lowerValue_LiteralInteger_UML_TimeExpression_observation->setValue(0);

	uML_TimeExpression_observation_upperValue_LiteralUnlimitedNatural_UML_TimeExpression_observation->setValue(-1);

	uML_TimeObservation_firstEvent_defaultValue_LiteralBoolean_UML_TimeObservation_firstEvent->setValue(true);

	

	uML_Transition_effect_lowerValue_LiteralInteger_UML_Transition_effect->setValue(0);

	

	

	uML_Transition_guard_lowerValue_LiteralInteger_UML_Transition_guard->setValue(0);

	

	

	

	

	

	uML_Transition_kind_defaultValue_InstanceValue->setInstance(get_UML_TransitionKind_external());
	uML_Transition_kind_defaultValue_InstanceValue->setType(get_UML_TransitionKind());

	

	uML_Transition_redefinedTransition_lowerValue_LiteralInteger_UML_Transition_redefinedTransition->setValue(0);

	

	uML_Transition_source_lowerValue_LiteralInteger_UML_Transition_source->setValue(1);

	uML_Transition_source_upperValue_LiteralUnlimitedNatural_UML_Transition_source->setValue(1);

	

	

	

	uML_Transition_target_lowerValue_LiteralInteger_UML_Transition_target->setValue(1);

	uML_Transition_target_upperValue_LiteralUnlimitedNatural_UML_Transition_target->setValue(1);

	uML_Transition_trigger_lowerValue_LiteralInteger_UML_Transition_trigger->setValue(0);

	uML_Transition_trigger_upperValue_LiteralUnlimitedNatural_UML_Transition_trigger->setValue(-1);

	uML_Trigger_port_lowerValue_LiteralInteger_UML_Trigger_port->setValue(0);

	uML_Trigger_port_upperValue_LiteralUnlimitedNatural_UML_Trigger_port->setValue(-1);

	

	

	uML_Type_getAssociations__return_lowerValue_LiteralInteger_UML_Type_getAssociations__return->setValue(0);

	uML_Type_getAssociations__return_upperValue_LiteralUnlimitedNatural_UML_Type_getAssociations__return->setValue(-1);

	uML_Type_package_lowerValue_LiteralInteger_UML_Type_package->setValue(0);

	uML_TypedElement_type_lowerValue_LiteralInteger_UML_TypedElement_type->setValue(0);

	

	

	

	uML_UnmarshallAction_result_upperValue_LiteralUnlimitedNatural_UML_UnmarshallAction_result->setValue(-1);

	

	

	uML_UseCase_allIncludedUseCases_result_lowerValue_LiteralInteger_UML_UseCase_allIncludedUseCases_result->setValue(0);

	uML_UseCase_allIncludedUseCases_result_upperValue_LiteralUnlimitedNatural_UML_UseCase_allIncludedUseCases_result->setValue(-1);

	

	

	

	uML_UseCase_extend_lowerValue_LiteralInteger_UML_UseCase_extend->setValue(0);

	uML_UseCase_extend_upperValue_LiteralUnlimitedNatural_UML_UseCase_extend->setValue(-1);

	uML_UseCase_extensionPoint_lowerValue_LiteralInteger_UML_UseCase_extensionPoint->setValue(0);

	uML_UseCase_extensionPoint_upperValue_LiteralUnlimitedNatural_UML_UseCase_extensionPoint->setValue(-1);

	uML_UseCase_include_lowerValue_LiteralInteger_UML_UseCase_include->setValue(0);

	uML_UseCase_include_upperValue_LiteralUnlimitedNatural_UML_UseCase_include->setValue(-1);

	

	

	uML_UseCase_subject_lowerValue_LiteralInteger_UML_UseCase_subject->setValue(0);

	uML_UseCase_subject_upperValue_LiteralUnlimitedNatural_UML_UseCase_subject->setValue(-1);

	

	

	

	

	uML_ValueSpecification_booleanValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_booleanValue_result->setValue(0);

	

	uML_ValueSpecification_integerValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_integerValue_result->setValue(0);

	

	

	

	

	uML_ValueSpecification_realValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_realValue_result->setValue(0);

	

	uML_ValueSpecification_stringValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_stringValue_result->setValue(0);

	

	uML_ValueSpecification_unlimitedValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_unlimitedValue_result->setValue(0);

	

	

	uML_Variable_activityScope_lowerValue_LiteralInteger_UML_Variable_activityScope->setValue(0);

	

	uML_Variable_scope_lowerValue_LiteralInteger_UML_Variable_scope->setValue(0);

	uML_Vertex_container_lowerValue_LiteralInteger_UML_Vertex_container->setValue(0);

	

	uML_Vertex_incoming_lowerValue_LiteralInteger_UML_Vertex_incoming->setValue(0);

	uML_Vertex_incoming_result_lowerValue_LiteralInteger_UML_Vertex_incoming_result->setValue(0);

	uML_Vertex_incoming_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming_result->setValue(-1);

	

	uML_Vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming->setValue(-1);

	

	

	uML_Vertex_outgoing_lowerValue_LiteralInteger_UML_Vertex_outgoing->setValue(0);

	uML_Vertex_outgoing_result_lowerValue_LiteralInteger_UML_Vertex_outgoing_result->setValue(0);

	uML_Vertex_outgoing_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing_result->setValue(-1);

	

	uML_Vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing->setValue(-1);

	

	

	

	uML_WriteStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_result->setValue(0);

	

	

	uML_WriteStructuralFeatureAction_value_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_value->setValue(0);

	

	uML_WriteVariableAction_value_lowerValue_LiteralInteger_UML_WriteVariableAction_value->setValue(0);

	
}

std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_action_actionExecutionSpecification()
{
	return uML_A_action_actionExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_action_actionExecutionSpecification_actionExecutionSpecification()
{
	return uML_A_action_actionExecutionSpecification_actionExecutionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_action_interaction()
{
	return uML_A_action_interaction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_action_interaction_interaction()
{
	return uML_A_action_interaction_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_actualGate_interactionUse()
{
	return uML_A_actualGate_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_actualGate_interactionUse_interactionUse()
{
	return uML_A_actualGate_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_actual_templateParameterSubstitution()
{
	return uML_A_actual_templateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution()
{
	return uML_A_actual_templateParameterSubstitution_templateParameterSubstitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_addition_include()
{
	return uML_A_addition_include;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_addition_include_include()
{
	return uML_A_addition_include_include;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_annotatedElement_comment()
{
	return uML_A_annotatedElement_comment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_annotatedElement_comment_comment()
{
	return uML_A_annotatedElement_comment_comment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_appliedProfile_profileApplication()
{
	return uML_A_appliedProfile_profileApplication;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_appliedProfile_profileApplication_profileApplication()
{
	return uML_A_appliedProfile_profileApplication_profileApplication;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_argument_interactionUse()
{
	return uML_A_argument_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_argument_interactionUse_interactionUse()
{
	return uML_A_argument_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_argument_invocationAction()
{
	return uML_A_argument_invocationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_argument_invocationAction_invocationAction()
{
	return uML_A_argument_invocationAction_invocationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_argument_message()
{
	return uML_A_argument_message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_argument_message_message()
{
	return uML_A_argument_message_message;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_association_clearAssociationAction()
{
	return uML_A_association_clearAssociationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_association_clearAssociationAction_clearAssociationAction()
{
	return uML_A_association_clearAssociationAction_clearAssociationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_attribute_classifier()
{
	return uML_A_attribute_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_attribute_classifier_classifier()
{
	return uML_A_attribute_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_before_toAfter()
{
	return uML_A_before_toAfter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_behavior_behaviorExecutionSpecification()
{
	return uML_A_behavior_behaviorExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification()
{
	return uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_behavior_callBehaviorAction()
{
	return uML_A_behavior_callBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_behavior_callBehaviorAction_callBehaviorAction()
{
	return uML_A_behavior_callBehaviorAction_callBehaviorAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_behavior_opaqueExpression()
{
	return uML_A_behavior_opaqueExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_behavior_opaqueExpression_opaqueExpression()
{
	return uML_A_behavior_opaqueExpression_opaqueExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyCondition_bodyContext()
{
	return uML_A_bodyCondition_bodyContext;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyCondition_bodyContext_bodyContext()
{
	return uML_A_bodyCondition_bodyContext_bodyContext;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyOutput_clause()
{
	return uML_A_bodyOutput_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyOutput_clause_clause()
{
	return uML_A_bodyOutput_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyOutput_loopNode()
{
	return uML_A_bodyOutput_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyOutput_loopNode_loopNode()
{
	return uML_A_bodyOutput_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyPart_loopNode()
{
	return uML_A_bodyPart_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyPart_loopNode_loopNode()
{
	return uML_A_bodyPart_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_body_clause()
{
	return uML_A_body_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_body_clause_clause()
{
	return uML_A_body_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_cfragmentGate_combinedFragment()
{
	return uML_A_cfragmentGate_combinedFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_cfragmentGate_combinedFragment_combinedFragment()
{
	return uML_A_cfragmentGate_combinedFragment_combinedFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_changeExpression_changeEvent()
{
	return uML_A_changeExpression_changeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_changeExpression_changeEvent_changeEvent()
{
	return uML_A_changeExpression_changeEvent_changeEvent;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifierBehavior_behavioredClassifier()
{
	return uML_A_classifierBehavior_behavioredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifierBehavior_behavioredClassifier_behavioredClassifier()
{
	return uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_createObjectAction()
{
	return uML_A_classifier_createObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_createObjectAction_createObjectAction()
{
	return uML_A_classifier_createObjectAction_createObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_enumerationLiteral()
{
	return uML_A_classifier_enumerationLiteral;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_enumerationLiteral_enumerationLiteral()
{
	return uML_A_classifier_enumerationLiteral_enumerationLiteral;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_instanceSpecification()
{
	return uML_A_classifier_instanceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_instanceSpecification_instanceSpecification()
{
	return uML_A_classifier_instanceSpecification_instanceSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_readExtentAction()
{
	return uML_A_classifier_readExtentAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_readExtentAction_readExtentAction()
{
	return uML_A_classifier_readExtentAction_readExtentAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_readIsClassifiedObjectAction()
{
	return uML_A_classifier_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction()
{
	return uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_templateParameter_parameteredElement()
{
	return uML_A_classifier_templateParameter_parameteredElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_clause_conditionalNode()
{
	return uML_A_clause_conditionalNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_clause_conditionalNode_conditionalNode()
{
	return uML_A_clause_conditionalNode_conditionalNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_clientDependency_client()
{
	return uML_A_clientDependency_client;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_clientDependency_client_dependency()
{
	return uML_A_clientDependency_client_dependency;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_collaborationRole_collaboration()
{
	return uML_A_collaborationRole_collaboration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_collaborationRole_collaboration_collaboration()
{
	return uML_A_collaborationRole_collaboration_collaboration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_collaborationUse_classifier()
{
	return uML_A_collaborationUse_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_collaborationUse_classifier_classifier()
{
	return uML_A_collaborationUse_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_collection_reduceAction()
{
	return uML_A_collection_reduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_collection_reduceAction_reduceAction()
{
	return uML_A_collection_reduceAction_reduceAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_condition_extend()
{
	return uML_A_condition_extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_condition_extend_extend()
{
	return uML_A_condition_extend_extend;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_condition_parameterSet()
{
	return uML_A_condition_parameterSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_condition_parameterSet_parameterSet()
{
	return uML_A_condition_parameterSet_parameterSet;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_configuration_deployment()
{
	return uML_A_configuration_deployment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_conformance_specificMachine()
{
	return uML_A_conformance_specificMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connectableElement_templateParameter_parameteredElement()
{
	return uML_A_connectableElement_templateParameter_parameteredElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connectionPoint_state()
{
	return uML_A_connectionPoint_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connectionPoint_stateMachine()
{
	return uML_A_connectionPoint_stateMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connection_state()
{
	return uML_A_connection_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connector_message()
{
	return uML_A_connector_message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_connector_message_message()
{
	return uML_A_connector_message_message;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_constrainedElement_constraint()
{
	return uML_A_constrainedElement_constraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_constrainedElement_constraint_constraint()
{
	return uML_A_constrainedElement_constraint_constraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_constrainingClassifier_classifierTemplateParameter()
{
	return uML_A_constrainingClassifier_classifierTemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter()
{
	return uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_containedEdge_inGroup()
{
	return uML_A_containedEdge_inGroup;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_containedNode_inGroup()
{
	return uML_A_containedNode_inGroup;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_context_action()
{
	return uML_A_context_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_context_action_action()
{
	return uML_A_context_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_context_behavior()
{
	return uML_A_context_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_context_behavior_behavior()
{
	return uML_A_context_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_contract_connector()
{
	return uML_A_contract_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_contract_connector_connector()
{
	return uML_A_contract_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_contract_interfaceRealization()
{
	return uML_A_contract_interfaceRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_contract_interfaceRealization_interfaceRealization()
{
	return uML_A_contract_interfaceRealization_interfaceRealization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_contract_substitution()
{
	return uML_A_contract_substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_contract_substitution_substitution()
{
	return uML_A_contract_substitution_substitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_conveyed_conveyingFlow()
{
	return uML_A_conveyed_conveyingFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_conveyed_conveyingFlow_conveyingFlow()
{
	return uML_A_conveyed_conveyingFlow_conveyingFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_covered_coveredBy()
{
	return uML_A_covered_coveredBy;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_covered_events()
{
	return uML_A_covered_events;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_covered_events_events()
{
	return uML_A_covered_events_events;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_covered_stateInvariant()
{
	return uML_A_covered_stateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_covered_stateInvariant_stateInvariant()
{
	return uML_A_covered_stateInvariant_stateInvariant;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decider_clause()
{
	return uML_A_decider_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decider_clause_clause()
{
	return uML_A_decider_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decider_loopNode()
{
	return uML_A_decider_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decider_loopNode_loopNode()
{
	return uML_A_decider_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decisionInputFlow_decisionNode()
{
	return uML_A_decisionInputFlow_decisionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decisionInputFlow_decisionNode_decisionNode()
{
	return uML_A_decisionInputFlow_decisionNode_decisionNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decisionInput_decisionNode()
{
	return uML_A_decisionInput_decisionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decisionInput_decisionNode_decisionNode()
{
	return uML_A_decisionInput_decisionNode_decisionNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decomposedAs_lifeline()
{
	return uML_A_decomposedAs_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decomposedAs_lifeline_lifeline()
{
	return uML_A_decomposedAs_lifeline_lifeline;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_defaultValue_owningParameter()
{
	return uML_A_defaultValue_owningParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_defaultValue_owningParameter_owningParameter()
{
	return uML_A_defaultValue_owningParameter_owningParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_defaultValue_owningProperty()
{
	return uML_A_defaultValue_owningProperty;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_defaultValue_owningProperty_owningProperty()
{
	return uML_A_defaultValue_owningProperty_owningProperty;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_default_templateParameter()
{
	return uML_A_default_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_default_templateParameter_templateParameter()
{
	return uML_A_default_templateParameter_templateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deferrableTrigger_state()
{
	return uML_A_deferrableTrigger_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_deferrableTrigger_state_state()
{
	return uML_A_deferrableTrigger_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_definingEnd_connectorEnd()
{
	return uML_A_definingEnd_connectorEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_definingEnd_connectorEnd_connectorEnd()
{
	return uML_A_definingEnd_connectorEnd_connectorEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_definingFeature_slot()
{
	return uML_A_definingFeature_slot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_definingFeature_slot_slot()
{
	return uML_A_definingFeature_slot_slot;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deployedArtifact_deploymentForArtifact()
{
	return uML_A_deployedArtifact_deploymentForArtifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact()
{
	return uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deployedElement_deploymentTarget()
{
	return uML_A_deployedElement_deploymentTarget;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_deployedElement_deploymentTarget_deploymentTarget()
{
	return uML_A_deployedElement_deploymentTarget_deploymentTarget;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deployment_location()
{
	return uML_A_deployment_location;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_destroyAt_linkEndDestructionData()
{
	return uML_A_destroyAt_linkEndDestructionData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_destroyAt_linkEndDestructionData_linkEndDestructionData()
{
	return uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_doActivity_state()
{
	return uML_A_doActivity_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_doActivity_state_state()
{
	return uML_A_doActivity_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_edge_activity()
{
	return uML_A_edge_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_edge_inPartition()
{
	return uML_A_edge_inPartition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_edge_inStructuredNode()
{
	return uML_A_edge_inStructuredNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_effect_transition()
{
	return uML_A_effect_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_effect_transition_transition()
{
	return uML_A_effect_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_elementImport_importingNamespace()
{
	return uML_A_elementImport_importingNamespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endData_createLinkAction()
{
	return uML_A_endData_createLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endData_createLinkAction_createLinkAction()
{
	return uML_A_endData_createLinkAction_createLinkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endData_destroyLinkAction()
{
	return uML_A_endData_destroyLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endData_destroyLinkAction_destroyLinkAction()
{
	return uML_A_endData_destroyLinkAction_destroyLinkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endData_linkAction()
{
	return uML_A_endData_linkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endData_linkAction_linkAction()
{
	return uML_A_endData_linkAction_linkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endType_association()
{
	return uML_A_endType_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endType_association_association()
{
	return uML_A_endType_association_association;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_connector()
{
	return uML_A_end_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_connector_connector()
{
	return uML_A_end_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_linkEndData()
{
	return uML_A_end_linkEndData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_linkEndData_linkEndData()
{
	return uML_A_end_linkEndData_linkEndData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_readLinkObjectEndAction()
{
	return uML_A_end_readLinkObjectEndAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_readLinkObjectEndAction_readLinkObjectEndAction()
{
	return uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_role()
{
	return uML_A_end_role;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_role_end()
{
	return uML_A_end_role_end;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_entry_connectionPointReference()
{
	return uML_A_entry_connectionPointReference;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_entry_connectionPointReference_connectionPointReference()
{
	return uML_A_entry_connectionPointReference_connectionPointReference;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_entry_state()
{
	return uML_A_entry_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_entry_state_state()
{
	return uML_A_entry_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_event_durationObservation()
{
	return uML_A_event_durationObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_event_durationObservation_durationObservation()
{
	return uML_A_event_durationObservation_durationObservation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_event_timeObservation()
{
	return uML_A_event_timeObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_event_timeObservation_timeObservation()
{
	return uML_A_event_timeObservation_timeObservation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_event_trigger()
{
	return uML_A_event_trigger;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_event_trigger_trigger()
{
	return uML_A_event_trigger_trigger;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exceptionInput_exceptionHandler()
{
	return uML_A_exceptionInput_exceptionHandler;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exceptionInput_exceptionHandler_exceptionHandler()
{
	return uML_A_exceptionInput_exceptionHandler_exceptionHandler;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exceptionType_exceptionHandler()
{
	return uML_A_exceptionType_exceptionHandler;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exceptionType_exceptionHandler_exceptionHandler()
{
	return uML_A_exceptionType_exceptionHandler_exceptionHandler;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exception_raiseExceptionAction()
{
	return uML_A_exception_raiseExceptionAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exception_raiseExceptionAction_raiseExceptionAction()
{
	return uML_A_exception_raiseExceptionAction_raiseExceptionAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_executableNode_sequenceNode()
{
	return uML_A_executableNode_sequenceNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_executableNode_sequenceNode_sequenceNode()
{
	return uML_A_executableNode_sequenceNode_sequenceNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_execution_executionOccurrenceSpecification()
{
	return uML_A_execution_executionOccurrenceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification()
{
	return uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exit_connectionPointReference()
{
	return uML_A_exit_connectionPointReference;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exit_connectionPointReference_connectionPointReference()
{
	return uML_A_exit_connectionPointReference_connectionPointReference;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exit_state()
{
	return uML_A_exit_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exit_state_state()
{
	return uML_A_exit_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_expr_duration()
{
	return uML_A_expr_duration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_expr_duration_duration()
{
	return uML_A_expr_duration_duration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_expr_timeExpression()
{
	return uML_A_expr_timeExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_expr_timeExpression_timeExpression()
{
	return uML_A_expr_timeExpression_timeExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extend_extension()
{
	return uML_A_extend_extension;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedCase_extend()
{
	return uML_A_extendedCase_extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedCase_extend_extend()
{
	return uML_A_extendedCase_extend_extend;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedRegion_region()
{
	return uML_A_extendedRegion_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedRegion_region_region()
{
	return uML_A_extendedRegion_region_region;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedSignature_redefinableTemplateSignature()
{
	return uML_A_extendedSignature_redefinableTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature()
{
	return uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedStateMachine_stateMachine()
{
	return uML_A_extendedStateMachine_stateMachine;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedStateMachine_stateMachine_stateMachine()
{
	return uML_A_extendedStateMachine_stateMachine_stateMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extensionLocation_extension()
{
	return uML_A_extensionLocation_extension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extensionLocation_extension_extension()
{
	return uML_A_extensionLocation_extension_extension;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extensionPoint_useCase()
{
	return uML_A_extensionPoint_useCase;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extension_metaclass()
{
	return uML_A_extension_metaclass;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_feature_featuringClassifier()
{
	return uML_A_feature_featuringClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_finish_executionSpecification()
{
	return uML_A_finish_executionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_finish_executionSpecification_executionSpecification()
{
	return uML_A_finish_executionSpecification_executionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_first_testIdentityAction()
{
	return uML_A_first_testIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_first_testIdentityAction_testIdentityAction()
{
	return uML_A_first_testIdentityAction_testIdentityAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_formalGate_interaction()
{
	return uML_A_formalGate_interaction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_formalGate_interaction_interaction()
{
	return uML_A_formalGate_interaction_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_formal_templateParameterSubstitution()
{
	return uML_A_formal_templateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution()
{
	return uML_A_formal_templateParameterSubstitution_templateParameterSubstitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_fragment_enclosingInteraction()
{
	return uML_A_fragment_enclosingInteraction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_fragment_enclosingOperand()
{
	return uML_A_fragment_enclosingOperand;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_fromAction_actionInputPin()
{
	return uML_A_fromAction_actionInputPin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_fromAction_actionInputPin_actionInputPin()
{
	return uML_A_fromAction_actionInputPin_actionInputPin;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalMachine_protocolConformance()
{
	return uML_A_generalMachine_protocolConformance;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_generalMachine_protocolConformance_protocolConformance()
{
	return uML_A_generalMachine_protocolConformance_protocolConformance;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalOrdering_interactionFragment()
{
	return uML_A_generalOrdering_interactionFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_generalOrdering_interactionFragment_interactionFragment()
{
	return uML_A_generalOrdering_interactionFragment_interactionFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_general_classifier()
{
	return uML_A_general_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_general_classifier_classifier()
{
	return uML_A_general_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_general_generalization()
{
	return uML_A_general_generalization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_general_generalization_generalization()
{
	return uML_A_general_generalization_generalization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalizationSet_generalization()
{
	return uML_A_generalizationSet_generalization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalization_specific()
{
	return uML_A_generalization_specific;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_group_inActivity()
{
	return uML_A_group_inActivity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_guard_activityEdge()
{
	return uML_A_guard_activityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_guard_activityEdge_activityEdge()
{
	return uML_A_guard_activityEdge_activityEdge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_guard_interactionOperand()
{
	return uML_A_guard_interactionOperand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_guard_interactionOperand_interactionOperand()
{
	return uML_A_guard_interactionOperand_interactionOperand;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_guard_transition()
{
	return uML_A_guard_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_guard_transition_transition()
{
	return uML_A_guard_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_handlerBody_exceptionHandler()
{
	return uML_A_handlerBody_exceptionHandler;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_handlerBody_exceptionHandler_exceptionHandler()
{
	return uML_A_handlerBody_exceptionHandler_exceptionHandler;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_handler_protectedNode()
{
	return uML_A_handler_protectedNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_icon_stereotype()
{
	return uML_A_icon_stereotype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_icon_stereotype_stereotype()
{
	return uML_A_icon_stereotype_stereotype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_importedElement_import()
{
	return uML_A_importedElement_import;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_importedElement_import_import()
{
	return uML_A_importedElement_import_import;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_importedMember_namespace()
{
	return uML_A_importedMember_namespace;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_importedMember_namespace_namespace()
{
	return uML_A_importedMember_namespace_namespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_importedPackage_packageImport()
{
	return uML_A_importedPackage_packageImport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_importedPackage_packageImport_packageImport()
{
	return uML_A_importedPackage_packageImport_packageImport;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inInterruptibleRegion_node()
{
	return uML_A_inInterruptibleRegion_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inPartition_node()
{
	return uML_A_inPartition_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inState_objectNode()
{
	return uML_A_inState_objectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inState_objectNode_objectNode()
{
	return uML_A_inState_objectNode_objectNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_include_includingCase()
{
	return uML_A_include_includingCase;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_incoming_target_node()
{
	return uML_A_incoming_target_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_incoming_target_vertex()
{
	return uML_A_incoming_target_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_incoming_target_vertex_incoming()
{
	return uML_A_incoming_target_vertex_incoming;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_informationSource_informationFlow()
{
	return uML_A_informationSource_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_informationSource_informationFlow_informationFlow()
{
	return uML_A_informationSource_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_informationTarget_informationFlow()
{
	return uML_A_informationTarget_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_informationTarget_informationFlow_informationFlow()
{
	return uML_A_informationTarget_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inheritedMember_inheritingClassifier()
{
	return uML_A_inheritedMember_inheritingClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier()
{
	return uML_A_inheritedMember_inheritingClassifier_inheritingClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inheritedParameter_redefinableTemplateSignature()
{
	return uML_A_inheritedParameter_redefinableTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature()
{
	return uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inputElement_regionAsInput()
{
	return uML_A_inputElement_regionAsInput;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inputValue_linkAction()
{
	return uML_A_inputValue_linkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inputValue_linkAction_linkAction()
{
	return uML_A_inputValue_linkAction_linkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inputValue_opaqueAction()
{
	return uML_A_inputValue_opaqueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inputValue_opaqueAction_opaqueAction()
{
	return uML_A_inputValue_opaqueAction_opaqueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_input_action()
{
	return uML_A_input_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_input_action_action()
{
	return uML_A_input_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_insertAt_addStructuralFeatureValueAction()
{
	return uML_A_insertAt_addStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction()
{
	return uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_insertAt_addVariableValueAction()
{
	return uML_A_insertAt_addVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_insertAt_addVariableValueAction_addVariableValueAction()
{
	return uML_A_insertAt_addVariableValueAction_addVariableValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_insertAt_linkEndCreationData()
{
	return uML_A_insertAt_linkEndCreationData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_insertAt_linkEndCreationData_linkEndCreationData()
{
	return uML_A_insertAt_linkEndCreationData_linkEndCreationData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_instance_instanceValue()
{
	return uML_A_instance_instanceValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_instance_instanceValue_instanceValue()
{
	return uML_A_instance_instanceValue_instanceValue;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_interfaceRealization_implementingClassifier()
{
	return uML_A_interfaceRealization_implementingClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_interruptingEdge_interrupts()
{
	return uML_A_interruptingEdge_interrupts;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_invariant_stateInvariant()
{
	return uML_A_invariant_stateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_invariant_stateInvariant_stateInvariant()
{
	return uML_A_invariant_stateInvariant_stateInvariant;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_joinSpec_joinNode()
{
	return uML_A_joinSpec_joinNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_joinSpec_joinNode_joinNode()
{
	return uML_A_joinSpec_joinNode_joinNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_lifeline_interaction()
{
	return uML_A_lifeline_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_localPostcondition_action()
{
	return uML_A_localPostcondition_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_localPostcondition_action_action()
{
	return uML_A_localPostcondition_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_localPrecondition_action()
{
	return uML_A_localPrecondition_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_localPrecondition_action_action()
{
	return uML_A_localPrecondition_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_loopVariableInput_loopNode()
{
	return uML_A_loopVariableInput_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_loopVariableInput_loopNode_loopNode()
{
	return uML_A_loopVariableInput_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_loopVariable_loopNode()
{
	return uML_A_loopVariable_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_loopVariable_loopNode_loopNode()
{
	return uML_A_loopVariable_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_lowerValue_owningLower()
{
	return uML_A_lowerValue_owningLower;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_lowerValue_owningLower_owningLower()
{
	return uML_A_lowerValue_owningLower_owningLower;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_manifestation_artifact()
{
	return uML_A_manifestation_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_manifestation_artifact_artifact()
{
	return uML_A_manifestation_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_mapping_abstraction()
{
	return uML_A_mapping_abstraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_mapping_abstraction_abstraction()
{
	return uML_A_mapping_abstraction_abstraction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_max_durationInterval()
{
	return uML_A_max_durationInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_max_durationInterval_durationInterval()
{
	return uML_A_max_durationInterval_durationInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_max_interval()
{
	return uML_A_max_interval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_max_interval_interval()
{
	return uML_A_max_interval_interval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_max_timeInterval()
{
	return uML_A_max_timeInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_max_timeInterval_timeInterval()
{
	return uML_A_max_timeInterval_timeInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_maxint_interactionConstraint()
{
	return uML_A_maxint_interactionConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_maxint_interactionConstraint_interactionConstraint()
{
	return uML_A_maxint_interactionConstraint_interactionConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_memberEnd_association()
{
	return uML_A_memberEnd_association;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_member_memberNamespace()
{
	return uML_A_member_memberNamespace;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_member_memberNamespace_memberNamespace()
{
	return uML_A_member_memberNamespace_memberNamespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_mergedPackage_packageMerge()
{
	return uML_A_mergedPackage_packageMerge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_mergedPackage_packageMerge_packageMerge()
{
	return uML_A_mergedPackage_packageMerge_packageMerge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_message_considerIgnoreFragment()
{
	return uML_A_message_considerIgnoreFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_message_considerIgnoreFragment_considerIgnoreFragment()
{
	return uML_A_message_considerIgnoreFragment_considerIgnoreFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_message_interaction()
{
	return uML_A_message_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_message_messageEnd()
{
	return uML_A_message_messageEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_message_messageEnd_messageEnd()
{
	return uML_A_message_messageEnd_messageEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_metaclassReference_profile()
{
	return uML_A_metaclassReference_profile;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_metaclassReference_profile_profile()
{
	return uML_A_metaclassReference_profile_profile;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_metamodelReference_profile()
{
	return uML_A_metamodelReference_profile;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_metamodelReference_profile_profile()
{
	return uML_A_metamodelReference_profile_profile;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_method_specification()
{
	return uML_A_method_specification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_min_durationInterval()
{
	return uML_A_min_durationInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_min_durationInterval_durationInterval()
{
	return uML_A_min_durationInterval_durationInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_min_interval()
{
	return uML_A_min_interval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_min_interval_interval()
{
	return uML_A_min_interval_interval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_min_timeInterval()
{
	return uML_A_min_timeInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_min_timeInterval_timeInterval()
{
	return uML_A_min_timeInterval_timeInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_minint_interactionConstraint()
{
	return uML_A_minint_interactionConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_minint_interactionConstraint_interactionConstraint()
{
	return uML_A_minint_interactionConstraint_interactionConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nameExpression_namedElement()
{
	return uML_A_nameExpression_namedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nameExpression_namedElement_namedElement()
{
	return uML_A_nameExpression_namedElement_namedElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_navigableOwnedEnd_association()
{
	return uML_A_navigableOwnedEnd_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_navigableOwnedEnd_association_association()
{
	return uML_A_navigableOwnedEnd_association_association;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedArtifact_artifact()
{
	return uML_A_nestedArtifact_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedArtifact_artifact_artifact()
{
	return uML_A_nestedArtifact_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedClassifier_interface()
{
	return uML_A_nestedClassifier_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedClassifier_interface_interface()
{
	return uML_A_nestedClassifier_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedClassifier_nestingClass()
{
	return uML_A_nestedClassifier_nestingClass;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedClassifier_nestingClass_nestingClass()
{
	return uML_A_nestedClassifier_nestingClass_nestingClass;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedNode_node()
{
	return uML_A_nestedNode_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedNode_node_node()
{
	return uML_A_nestedNode_node_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedPackage_nestingPackage()
{
	return uML_A_nestedPackage_nestingPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_newClassifier_reclassifyObjectAction()
{
	return uML_A_newClassifier_reclassifyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction()
{
	return uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_node_activity()
{
	return uML_A_node_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_node_inStructuredNode()
{
	return uML_A_node_inStructuredNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_clearAssociationAction()
{
	return uML_A_object_clearAssociationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_clearAssociationAction_clearAssociationAction()
{
	return uML_A_object_clearAssociationAction_clearAssociationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_readIsClassifiedObjectAction()
{
	return uML_A_object_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction()
{
	return uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_readLinkObjectEndAction()
{
	return uML_A_object_readLinkObjectEndAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_readLinkObjectEndAction_readLinkObjectEndAction()
{
	return uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_readLinkObjectEndQualifierAction()
{
	return uML_A_object_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction()
{
	return uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_reclassifyObjectAction()
{
	return uML_A_object_reclassifyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_reclassifyObjectAction_reclassifyObjectAction()
{
	return uML_A_object_reclassifyObjectAction_reclassifyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_startClassifierBehaviorAction()
{
	return uML_A_object_startClassifierBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction()
{
	return uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_startObjectBehaviorAction()
{
	return uML_A_object_startObjectBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_startObjectBehaviorAction_startObjectBehaviorAction()
{
	return uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_structuralFeatureAction()
{
	return uML_A_object_structuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_structuralFeatureAction_structuralFeatureAction()
{
	return uML_A_object_structuralFeatureAction_structuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_unmarshallAction()
{
	return uML_A_object_unmarshallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_unmarshallAction_unmarshallAction()
{
	return uML_A_object_unmarshallAction_unmarshallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_observation_duration()
{
	return uML_A_observation_duration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_observation_duration_duration()
{
	return uML_A_observation_duration_duration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_observation_timeExpression()
{
	return uML_A_observation_timeExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_observation_timeExpression_timeExpression()
{
	return uML_A_observation_timeExpression_timeExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_oldClassifier_reclassifyObjectAction()
{
	return uML_A_oldClassifier_reclassifyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction()
{
	return uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_onPort_invocationAction()
{
	return uML_A_onPort_invocationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_onPort_invocationAction_invocationAction()
{
	return uML_A_onPort_invocationAction_invocationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operand_combinedFragment()
{
	return uML_A_operand_combinedFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operand_combinedFragment_combinedFragment()
{
	return uML_A_operand_combinedFragment_combinedFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operand_expression()
{
	return uML_A_operand_expression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operand_expression_expression()
{
	return uML_A_operand_expression_expression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operation_callEvent()
{
	return uML_A_operation_callEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operation_callEvent_callEvent()
{
	return uML_A_operation_callEvent_callEvent;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operation_callOperationAction()
{
	return uML_A_operation_callOperationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operation_callOperationAction_callOperationAction()
{
	return uML_A_operation_callOperationAction_callOperationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operation_templateParameter_parameteredElement()
{
	return uML_A_operation_templateParameter_parameteredElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_opposite_property()
{
	return uML_A_opposite_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_opposite_property_property()
{
	return uML_A_opposite_property_property;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outgoing_source_node()
{
	return uML_A_outgoing_source_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outgoing_source_vertex()
{
	return uML_A_outgoing_source_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_outgoing_source_vertex_outgoing()
{
	return uML_A_outgoing_source_vertex_outgoing;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outputElement_regionAsOutput()
{
	return uML_A_outputElement_regionAsOutput;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outputValue_opaqueAction()
{
	return uML_A_outputValue_opaqueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_outputValue_opaqueAction_opaqueAction()
{
	return uML_A_outputValue_opaqueAction_opaqueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_output_action()
{
	return uML_A_output_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_output_action_action()
{
	return uML_A_output_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedActual_owningTemplateParameterSubstitution()
{
	return uML_A_ownedActual_owningTemplateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution()
{
	return uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_artifact()
{
	return uML_A_ownedAttribute_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedAttribute_artifact_artifact()
{
	return uML_A_ownedAttribute_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_class()
{
	return uML_A_ownedAttribute_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_datatype()
{
	return uML_A_ownedAttribute_datatype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_interface()
{
	return uML_A_ownedAttribute_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_owningSignal()
{
	return uML_A_ownedAttribute_owningSignal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedAttribute_owningSignal_owningSignal()
{
	return uML_A_ownedAttribute_owningSignal_owningSignal;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_structuredClassifier()
{
	return uML_A_ownedAttribute_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedAttribute_structuredClassifier_structuredClassifier()
{
	return uML_A_ownedAttribute_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedBehavior_behavioredClassifier()
{
	return uML_A_ownedBehavior_behavioredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedBehavior_behavioredClassifier_behavioredClassifier()
{
	return uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedComment_owningElement()
{
	return uML_A_ownedComment_owningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedComment_owningElement_owningElement()
{
	return uML_A_ownedComment_owningElement_owningElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedConnector_structuredClassifier()
{
	return uML_A_ownedConnector_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedConnector_structuredClassifier_structuredClassifier()
{
	return uML_A_ownedConnector_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedDefault_templateParameter()
{
	return uML_A_ownedDefault_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedDefault_templateParameter_templateParameter()
{
	return uML_A_ownedDefault_templateParameter_templateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedElement_owner()
{
	return uML_A_ownedElement_owner;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedEnd_extension()
{
	return uML_A_ownedEnd_extension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedEnd_extension_extension()
{
	return uML_A_ownedEnd_extension_extension;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedEnd_owningAssociation()
{
	return uML_A_ownedEnd_owningAssociation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedLiteral_enumeration()
{
	return uML_A_ownedLiteral_enumeration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedMember_namespace()
{
	return uML_A_ownedMember_namespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_artifact()
{
	return uML_A_ownedOperation_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedOperation_artifact_artifact()
{
	return uML_A_ownedOperation_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_class()
{
	return uML_A_ownedOperation_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_datatype()
{
	return uML_A_ownedOperation_datatype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_interface()
{
	return uML_A_ownedOperation_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameterSet_behavior()
{
	return uML_A_ownedParameterSet_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameterSet_behavior_behavior()
{
	return uML_A_ownedParameterSet_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameterSet_behavioralFeature()
{
	return uML_A_ownedParameterSet_behavioralFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameterSet_behavioralFeature_behavioralFeature()
{
	return uML_A_ownedParameterSet_behavioralFeature_behavioralFeature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_behavior()
{
	return uML_A_ownedParameter_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameter_behavior_behavior()
{
	return uML_A_ownedParameter_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_operation()
{
	return uML_A_ownedParameter_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_ownerFormalParam()
{
	return uML_A_ownedParameter_ownerFormalParam;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameter_ownerFormalParam_ownerFormalParam()
{
	return uML_A_ownedParameter_ownerFormalParam_ownerFormalParam;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_signature()
{
	return uML_A_ownedParameter_signature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameteredElement_owningTemplateParameter()
{
	return uML_A_ownedParameteredElement_owningTemplateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedPort_encapsulatedClassifier()
{
	return uML_A_ownedPort_encapsulatedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier()
{
	return uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedReception_class()
{
	return uML_A_ownedReception_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedReception_class_class()
{
	return uML_A_ownedReception_class_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedReception_interface()
{
	return uML_A_ownedReception_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedReception_interface_interface()
{
	return uML_A_ownedReception_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedRule_context()
{
	return uML_A_ownedRule_context;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedStereotype_owningPackage()
{
	return uML_A_ownedStereotype_owningPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedStereotype_owningPackage_owningPackage()
{
	return uML_A_ownedStereotype_owningPackage_owningPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedTemplateSignature_classifier()
{
	return uML_A_ownedTemplateSignature_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedTemplateSignature_template()
{
	return uML_A_ownedTemplateSignature_template;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedType_package()
{
	return uML_A_ownedType_package;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedUseCase_classifier()
{
	return uML_A_ownedUseCase_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedUseCase_classifier_classifier()
{
	return uML_A_ownedUseCase_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packageImport_importingNamespace()
{
	return uML_A_packageImport_importingNamespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packageMerge_receivingPackage()
{
	return uML_A_packageMerge_receivingPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packagedElement_component()
{
	return uML_A_packagedElement_component;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_packagedElement_component_component()
{
	return uML_A_packagedElement_component_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packagedElement_owningPackage()
{
	return uML_A_packagedElement_owningPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_packagedElement_owningPackage_owningPackage()
{
	return uML_A_packagedElement_owningPackage_owningPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameterSet_parameter()
{
	return uML_A_parameterSet_parameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameterSubstitution_templateBinding()
{
	return uML_A_parameterSubstitution_templateBinding;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameter_activityParameterNode()
{
	return uML_A_parameter_activityParameterNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_parameter_activityParameterNode_activityParameterNode()
{
	return uML_A_parameter_activityParameterNode_activityParameterNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameter_templateSignature()
{
	return uML_A_parameter_templateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_parameter_templateSignature_templateSignature()
{
	return uML_A_parameter_templateSignature_templateSignature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameteredElement_templateParameter()
{
	return uML_A_parameteredElement_templateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_partWithPort_connectorEnd()
{
	return uML_A_partWithPort_connectorEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_partWithPort_connectorEnd_connectorEnd()
{
	return uML_A_partWithPort_connectorEnd_connectorEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_part_structuredClassifier()
{
	return uML_A_part_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_part_structuredClassifier_structuredClassifier()
{
	return uML_A_part_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_partition_activity()
{
	return uML_A_partition_activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_partition_activity_activity()
{
	return uML_A_partition_activity_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_port_trigger()
{
	return uML_A_port_trigger;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_port_trigger_trigger()
{
	return uML_A_port_trigger_trigger;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_postCondition_owningTransition()
{
	return uML_A_postCondition_owningTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_postCondition_owningTransition_owningTransition()
{
	return uML_A_postCondition_owningTransition_owningTransition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_postcondition_behavior()
{
	return uML_A_postcondition_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_postcondition_behavior_behavior()
{
	return uML_A_postcondition_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_postcondition_postContext()
{
	return uML_A_postcondition_postContext;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_postcondition_postContext_postContext()
{
	return uML_A_postcondition_postContext_postContext;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_powertypeExtent_powertype()
{
	return uML_A_powertypeExtent_powertype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_preCondition_protocolTransition()
{
	return uML_A_preCondition_protocolTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_preCondition_protocolTransition_protocolTransition()
{
	return uML_A_preCondition_protocolTransition_protocolTransition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_precondition_behavior()
{
	return uML_A_precondition_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_precondition_behavior_behavior()
{
	return uML_A_precondition_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_precondition_preContext()
{
	return uML_A_precondition_preContext;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_precondition_preContext_preContext()
{
	return uML_A_precondition_preContext_preContext;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_predecessorClause_successorClause()
{
	return uML_A_predecessorClause_successorClause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_profileApplication_applyingPackage()
{
	return uML_A_profileApplication_applyingPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_profile_stereotype()
{
	return uML_A_profile_stereotype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_profile_stereotype_stereotype()
{
	return uML_A_profile_stereotype_stereotype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_protocol_interface()
{
	return uML_A_protocol_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_protocol_interface_interface()
{
	return uML_A_protocol_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_protocol_port()
{
	return uML_A_protocol_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_protocol_port_port()
{
	return uML_A_protocol_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_provided_component()
{
	return uML_A_provided_component;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_provided_component_component()
{
	return uML_A_provided_component_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_provided_port()
{
	return uML_A_provided_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_provided_port_port()
{
	return uML_A_provided_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_associationEnd()
{
	return uML_A_qualifier_associationEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_linkEndData()
{
	return uML_A_qualifier_linkEndData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_qualifier_linkEndData_linkEndData()
{
	return uML_A_qualifier_linkEndData_linkEndData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_qualifierValue()
{
	return uML_A_qualifier_qualifierValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_qualifier_qualifierValue_qualifierValue()
{
	return uML_A_qualifier_qualifierValue_qualifierValue;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_readLinkObjectEndQualifierAction()
{
	return uML_A_qualifier_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction()
{
	return uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_raisedException_behavioralFeature()
{
	return uML_A_raisedException_behavioralFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_raisedException_behavioralFeature_behavioralFeature()
{
	return uML_A_raisedException_behavioralFeature_behavioralFeature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_raisedException_operation()
{
	return uML_A_raisedException_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_raisedException_operation_operation()
{
	return uML_A_raisedException_operation_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realization_abstraction_component()
{
	return uML_A_realization_abstraction_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realization_abstraction_flow()
{
	return uML_A_realization_abstraction_flow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realization_abstraction_flow_abstraction()
{
	return uML_A_realization_abstraction_flow_abstraction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingActivityEdge_informationFlow()
{
	return uML_A_realizingActivityEdge_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingActivityEdge_informationFlow_informationFlow()
{
	return uML_A_realizingActivityEdge_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingClassifier_componentRealization()
{
	return uML_A_realizingClassifier_componentRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingClassifier_componentRealization_componentRealization()
{
	return uML_A_realizingClassifier_componentRealization_componentRealization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingConnector_informationFlow()
{
	return uML_A_realizingConnector_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingConnector_informationFlow_informationFlow()
{
	return uML_A_realizingConnector_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingMessage_informationFlow()
{
	return uML_A_realizingMessage_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingMessage_informationFlow_informationFlow()
{
	return uML_A_realizingMessage_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_receiveEvent_endMessage()
{
	return uML_A_receiveEvent_endMessage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_receiveEvent_endMessage_endMessage()
{
	return uML_A_receiveEvent_endMessage_endMessage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedBehavior_behavior()
{
	return uML_A_redefinedBehavior_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedBehavior_behavior_behavior()
{
	return uML_A_redefinedBehavior_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedClassifier_classifier()
{
	return uML_A_redefinedClassifier_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedClassifier_classifier_classifier()
{
	return uML_A_redefinedClassifier_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedConnector_connector()
{
	return uML_A_redefinedConnector_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedConnector_connector_connector()
{
	return uML_A_redefinedConnector_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedEdge_activityEdge()
{
	return uML_A_redefinedEdge_activityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedEdge_activityEdge_activityEdge()
{
	return uML_A_redefinedEdge_activityEdge_activityEdge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedElement_redefinableElement()
{
	return uML_A_redefinedElement_redefinableElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedElement_redefinableElement_redefinableElement()
{
	return uML_A_redefinedElement_redefinableElement_redefinableElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedInterface_interface()
{
	return uML_A_redefinedInterface_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedInterface_interface_interface()
{
	return uML_A_redefinedInterface_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedNode_activityNode()
{
	return uML_A_redefinedNode_activityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedNode_activityNode_activityNode()
{
	return uML_A_redefinedNode_activityNode_activityNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedOperation_operation()
{
	return uML_A_redefinedOperation_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedOperation_operation_operation()
{
	return uML_A_redefinedOperation_operation_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedPort_port()
{
	return uML_A_redefinedPort_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedPort_port_port()
{
	return uML_A_redefinedPort_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedProperty_property()
{
	return uML_A_redefinedProperty_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedProperty_property_property()
{
	return uML_A_redefinedProperty_property_property;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedState_state()
{
	return uML_A_redefinedState_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedState_state_state()
{
	return uML_A_redefinedState_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedTransition_transition()
{
	return uML_A_redefinedTransition_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedTransition_transition_transition()
{
	return uML_A_redefinedTransition_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_redefinableElement()
{
	return uML_A_redefinitionContext_redefinableElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_redefinableElement_redefinableElement()
{
	return uML_A_redefinitionContext_redefinableElement_redefinableElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_region()
{
	return uML_A_redefinitionContext_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_region_region()
{
	return uML_A_redefinitionContext_region_region;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_state()
{
	return uML_A_redefinitionContext_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_state_state()
{
	return uML_A_redefinitionContext_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_transition()
{
	return uML_A_redefinitionContext_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_transition_transition()
{
	return uML_A_redefinitionContext_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_reducer_reduceAction()
{
	return uML_A_reducer_reduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_reducer_reduceAction_reduceAction()
{
	return uML_A_reducer_reduceAction_reduceAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_referred_protocolTransition()
{
	return uML_A_referred_protocolTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_referred_protocolTransition_protocolTransition()
{
	return uML_A_referred_protocolTransition_protocolTransition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_refersTo_interactionUse()
{
	return uML_A_refersTo_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_refersTo_interactionUse_interactionUse()
{
	return uML_A_refersTo_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_region_state()
{
	return uML_A_region_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_region_stateMachine()
{
	return uML_A_region_stateMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_relatedElement_relationship()
{
	return uML_A_relatedElement_relationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_relatedElement_relationship_relationship()
{
	return uML_A_relatedElement_relationship_relationship;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_removeAt_removeStructuralFeatureValueAction()
{
	return uML_A_removeAt_removeStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction()
{
	return uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_removeAt_removeVariableValueAction()
{
	return uML_A_removeAt_removeVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_removeAt_removeVariableValueAction_removeVariableValueAction()
{
	return uML_A_removeAt_removeVariableValueAction_removeVariableValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_replyToCall_replyAction()
{
	return uML_A_replyToCall_replyAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_replyToCall_replyAction_replyAction()
{
	return uML_A_replyToCall_replyAction_replyAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_replyValue_replyAction()
{
	return uML_A_replyValue_replyAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_replyValue_replyAction_replyAction()
{
	return uML_A_replyValue_replyAction_replyAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_representation_classifier()
{
	return uML_A_representation_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_representation_classifier_classifier()
{
	return uML_A_representation_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_represented_representation()
{
	return uML_A_represented_representation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_represented_representation_representation()
{
	return uML_A_represented_representation_representation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_represents_activityPartition()
{
	return uML_A_represents_activityPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_represents_activityPartition_activityPartition()
{
	return uML_A_represents_activityPartition_activityPartition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_represents_lifeline()
{
	return uML_A_represents_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_represents_lifeline_lifeline()
{
	return uML_A_represents_lifeline_lifeline;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_request_sendObjectAction()
{
	return uML_A_request_sendObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_request_sendObjectAction_sendObjectAction()
{
	return uML_A_request_sendObjectAction_sendObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_required_component()
{
	return uML_A_required_component;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_required_component_component()
{
	return uML_A_required_component_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_required_port()
{
	return uML_A_required_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_required_port_port()
{
	return uML_A_required_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_acceptEventAction()
{
	return uML_A_result_acceptEventAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_acceptEventAction_acceptEventAction()
{
	return uML_A_result_acceptEventAction_acceptEventAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_callAction()
{
	return uML_A_result_callAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_callAction_callAction()
{
	return uML_A_result_callAction_callAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_clearStructuralFeatureAction()
{
	return uML_A_result_clearStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction()
{
	return uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_conditionalNode()
{
	return uML_A_result_conditionalNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_conditionalNode_conditionalNode()
{
	return uML_A_result_conditionalNode_conditionalNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_createLinkObjectAction()
{
	return uML_A_result_createLinkObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_createLinkObjectAction_createLinkObjectAction()
{
	return uML_A_result_createLinkObjectAction_createLinkObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_createObjectAction()
{
	return uML_A_result_createObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_createObjectAction_createObjectAction()
{
	return uML_A_result_createObjectAction_createObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_loopNode()
{
	return uML_A_result_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_loopNode_loopNode()
{
	return uML_A_result_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_opaqueExpression()
{
	return uML_A_result_opaqueExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_opaqueExpression_opaqueExpression()
{
	return uML_A_result_opaqueExpression_opaqueExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readExtentAction()
{
	return uML_A_result_readExtentAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readExtentAction_readExtentAction()
{
	return uML_A_result_readExtentAction_readExtentAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readIsClassifiedObjectAction()
{
	return uML_A_result_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction()
{
	return uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readLinkAction()
{
	return uML_A_result_readLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readLinkAction_readLinkAction()
{
	return uML_A_result_readLinkAction_readLinkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readLinkObjectEndAction()
{
	return uML_A_result_readLinkObjectEndAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readLinkObjectEndAction_readLinkObjectEndAction()
{
	return uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readLinkObjectEndQualifierAction()
{
	return uML_A_result_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction()
{
	return uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readSelfAction()
{
	return uML_A_result_readSelfAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readSelfAction_readSelfAction()
{
	return uML_A_result_readSelfAction_readSelfAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readStructuralFeatureAction()
{
	return uML_A_result_readStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readStructuralFeatureAction_readStructuralFeatureAction()
{
	return uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readVariableAction()
{
	return uML_A_result_readVariableAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readVariableAction_readVariableAction()
{
	return uML_A_result_readVariableAction_readVariableAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_reduceAction()
{
	return uML_A_result_reduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_reduceAction_reduceAction()
{
	return uML_A_result_reduceAction_reduceAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_testIdentityAction()
{
	return uML_A_result_testIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_testIdentityAction_testIdentityAction()
{
	return uML_A_result_testIdentityAction_testIdentityAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_unmarshallAction()
{
	return uML_A_result_unmarshallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_unmarshallAction_unmarshallAction()
{
	return uML_A_result_unmarshallAction_unmarshallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_valueSpecificationAction()
{
	return uML_A_result_valueSpecificationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_valueSpecificationAction_valueSpecificationAction()
{
	return uML_A_result_valueSpecificationAction_valueSpecificationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_writeStructuralFeatureAction()
{
	return uML_A_result_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction()
{
	return uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnInformation_acceptCallAction()
{
	return uML_A_returnInformation_acceptCallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnInformation_acceptCallAction_acceptCallAction()
{
	return uML_A_returnInformation_acceptCallAction_acceptCallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnInformation_replyAction()
{
	return uML_A_returnInformation_replyAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnInformation_replyAction_replyAction()
{
	return uML_A_returnInformation_replyAction_replyAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnValueRecipient_interactionUse()
{
	return uML_A_returnValueRecipient_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnValueRecipient_interactionUse_interactionUse()
{
	return uML_A_returnValueRecipient_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnValue_interactionUse()
{
	return uML_A_returnValue_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnValue_interactionUse_interactionUse()
{
	return uML_A_returnValue_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_roleBinding_collaborationUse()
{
	return uML_A_roleBinding_collaborationUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_roleBinding_collaborationUse_collaborationUse()
{
	return uML_A_roleBinding_collaborationUse_collaborationUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_role_structuredClassifier()
{
	return uML_A_role_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_role_structuredClassifier_structuredClassifier()
{
	return uML_A_role_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_second_testIdentityAction()
{
	return uML_A_second_testIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_second_testIdentityAction_testIdentityAction()
{
	return uML_A_second_testIdentityAction_testIdentityAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_selection_objectFlow()
{
	return uML_A_selection_objectFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_selection_objectFlow_objectFlow()
{
	return uML_A_selection_objectFlow_objectFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_selection_objectNode()
{
	return uML_A_selection_objectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_selection_objectNode_objectNode()
{
	return uML_A_selection_objectNode_objectNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_selector_lifeline()
{
	return uML_A_selector_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_selector_lifeline_lifeline()
{
	return uML_A_selector_lifeline_lifeline;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_sendEvent_endMessage()
{
	return uML_A_sendEvent_endMessage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_sendEvent_endMessage_endMessage()
{
	return uML_A_sendEvent_endMessage_endMessage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_setupPart_loopNode()
{
	return uML_A_setupPart_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_setupPart_loopNode_loopNode()
{
	return uML_A_setupPart_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_broadcastSignalAction()
{
	return uML_A_signal_broadcastSignalAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_broadcastSignalAction_broadcastSignalAction()
{
	return uML_A_signal_broadcastSignalAction_broadcastSignalAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_reception()
{
	return uML_A_signal_reception;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_reception_reception()
{
	return uML_A_signal_reception_reception;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_sendSignalAction()
{
	return uML_A_signal_sendSignalAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_sendSignalAction_sendSignalAction()
{
	return uML_A_signal_sendSignalAction_sendSignalAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_signalEvent()
{
	return uML_A_signal_signalEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_signalEvent_signalEvent()
{
	return uML_A_signal_signalEvent_signalEvent;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signature_message()
{
	return uML_A_signature_message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signature_message_message()
{
	return uML_A_signature_message_message;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signature_templateBinding()
{
	return uML_A_signature_templateBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signature_templateBinding_templateBinding()
{
	return uML_A_signature_templateBinding_templateBinding;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_slot_owningInstance()
{
	return uML_A_slot_owningInstance;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_source_directedRelationship()
{
	return uML_A_source_directedRelationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_source_directedRelationship_directedRelationship()
{
	return uML_A_source_directedRelationship_directedRelationship;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_durationConstraint()
{
	return uML_A_specification_durationConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_durationConstraint_durationConstraint()
{
	return uML_A_specification_durationConstraint_durationConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_intervalConstraint()
{
	return uML_A_specification_intervalConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_intervalConstraint_intervalConstraint()
{
	return uML_A_specification_intervalConstraint_intervalConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_owningConstraint()
{
	return uML_A_specification_owningConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_owningConstraint_owningConstraint()
{
	return uML_A_specification_owningConstraint_owningConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_owningInstanceSpec()
{
	return uML_A_specification_owningInstanceSpec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_owningInstanceSpec_owningInstanceSpec()
{
	return uML_A_specification_owningInstanceSpec_owningInstanceSpec;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_timeConstraint()
{
	return uML_A_specification_timeConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_timeConstraint_timeConstraint()
{
	return uML_A_specification_timeConstraint_timeConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_start_executionSpecification()
{
	return uML_A_start_executionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_start_executionSpecification_executionSpecification()
{
	return uML_A_start_executionSpecification_executionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_stateInvariant_owningState()
{
	return uML_A_stateInvariant_owningState;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_stateInvariant_owningState_owningState()
{
	return uML_A_stateInvariant_owningState_owningState;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuralFeature_structuralFeatureAction()
{
	return uML_A_structuralFeature_structuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction()
{
	return uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuredNodeInput_structuredActivityNode()
{
	return uML_A_structuredNodeInput_structuredActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode()
{
	return uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuredNodeOutput_structuredActivityNode()
{
	return uML_A_structuredNodeOutput_structuredActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode()
{
	return uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuredNode_activity()
{
	return uML_A_structuredNode_activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuredNode_activity_activity()
{
	return uML_A_structuredNode_activity_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subExpression_owningExpression()
{
	return uML_A_subExpression_owningExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subgroup_superGroup()
{
	return uML_A_subgroup_superGroup;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subject_useCase()
{
	return uML_A_subject_useCase;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_submachineState_submachine()
{
	return uML_A_submachineState_submachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subpartition_superPartition()
{
	return uML_A_subpartition_superPartition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subsettedProperty_property()
{
	return uML_A_subsettedProperty_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_subsettedProperty_property_property()
{
	return uML_A_subsettedProperty_property_property;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_substitution_substitutingClassifier()
{
	return uML_A_substitution_substitutingClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subvertex_container()
{
	return uML_A_subvertex_container;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_superClass_class()
{
	return uML_A_superClass_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_superClass_class_class()
{
	return uML_A_superClass_class_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_supplier_supplierDependency()
{
	return uML_A_supplier_supplierDependency;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_supplier_supplierDependency_supplierDependency()
{
	return uML_A_supplier_supplierDependency_supplierDependency;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_callOperationAction()
{
	return uML_A_target_callOperationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_callOperationAction_callOperationAction()
{
	return uML_A_target_callOperationAction_callOperationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_destroyObjectAction()
{
	return uML_A_target_destroyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_destroyObjectAction_destroyObjectAction()
{
	return uML_A_target_destroyObjectAction_destroyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_directedRelationship()
{
	return uML_A_target_directedRelationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_directedRelationship_directedRelationship()
{
	return uML_A_target_directedRelationship_directedRelationship;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_sendObjectAction()
{
	return uML_A_target_sendObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_sendObjectAction_sendObjectAction()
{
	return uML_A_target_sendObjectAction_sendObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_sendSignalAction()
{
	return uML_A_target_sendSignalAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_sendSignalAction_sendSignalAction()
{
	return uML_A_target_sendSignalAction_sendSignalAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_templateBinding_boundElement()
{
	return uML_A_templateBinding_boundElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_test_clause()
{
	return uML_A_test_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_test_clause_clause()
{
	return uML_A_test_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_test_loopNode()
{
	return uML_A_test_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_test_loopNode_loopNode()
{
	return uML_A_test_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_toBefore_after()
{
	return uML_A_toBefore_after;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_transformation_objectFlow()
{
	return uML_A_transformation_objectFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_transformation_objectFlow_objectFlow()
{
	return uML_A_transformation_objectFlow_objectFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_transition_container()
{
	return uML_A_transition_container;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_trigger_acceptEventAction()
{
	return uML_A_trigger_acceptEventAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_trigger_acceptEventAction_acceptEventAction()
{
	return uML_A_trigger_acceptEventAction_acceptEventAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_trigger_transition()
{
	return uML_A_trigger_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_trigger_transition_transition()
{
	return uML_A_trigger_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_collaborationUse()
{
	return uML_A_type_collaborationUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_collaborationUse_collaborationUse()
{
	return uML_A_type_collaborationUse_collaborationUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_connector()
{
	return uML_A_type_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_connector_connector()
{
	return uML_A_type_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_extensionEnd()
{
	return uML_A_type_extensionEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_extensionEnd_extensionEnd()
{
	return uML_A_type_extensionEnd_extensionEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_operation()
{
	return uML_A_type_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_operation_operation()
{
	return uML_A_type_operation_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_typedElement()
{
	return uML_A_type_typedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_typedElement_typedElement()
{
	return uML_A_type_typedElement_typedElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_unmarshallType_unmarshallAction()
{
	return uML_A_unmarshallType_unmarshallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_unmarshallType_unmarshallAction_unmarshallAction()
{
	return uML_A_unmarshallType_unmarshallAction_unmarshallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_upperBound_objectNode()
{
	return uML_A_upperBound_objectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_upperBound_objectNode_objectNode()
{
	return uML_A_upperBound_objectNode_objectNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_upperValue_owningUpper()
{
	return uML_A_upperValue_owningUpper;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_upperValue_owningUpper_owningUpper()
{
	return uML_A_upperValue_owningUpper_owningUpper;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_utilizedElement_manifestation()
{
	return uML_A_utilizedElement_manifestation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_utilizedElement_manifestation_manifestation()
{
	return uML_A_utilizedElement_manifestation_manifestation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_linkEndData()
{
	return uML_A_value_linkEndData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_linkEndData_linkEndData()
{
	return uML_A_value_linkEndData_linkEndData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_owningSlot()
{
	return uML_A_value_owningSlot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_owningSlot_owningSlot()
{
	return uML_A_value_owningSlot_owningSlot;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_qualifierValue()
{
	return uML_A_value_qualifierValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_qualifierValue_qualifierValue()
{
	return uML_A_value_qualifierValue_qualifierValue;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_valuePin()
{
	return uML_A_value_valuePin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_valuePin_valuePin()
{
	return uML_A_value_valuePin_valuePin;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_valueSpecificationAction()
{
	return uML_A_value_valueSpecificationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_valueSpecificationAction_valueSpecificationAction()
{
	return uML_A_value_valueSpecificationAction_valueSpecificationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_writeStructuralFeatureAction()
{
	return uML_A_value_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction()
{
	return uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_writeVariableAction()
{
	return uML_A_value_writeVariableAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_writeVariableAction_writeVariableAction()
{
	return uML_A_value_writeVariableAction_writeVariableAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_variable_activityScope()
{
	return uML_A_variable_activityScope;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_variable_scope()
{
	return uML_A_variable_scope;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_variable_variableAction()
{
	return uML_A_variable_variableAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_variable_variableAction_variableAction()
{
	return uML_A_variable_variableAction_variableAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_weight_activityEdge()
{
	return uML_A_weight_activityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_weight_activityEdge_activityEdge()
{
	return uML_A_weight_activityEdge_activityEdge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_when_timeEvent()
{
	return uML_A_when_timeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_when_timeEvent_timeEvent()
{
	return uML_A_when_timeEvent_timeEvent;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Abstraction()
{
	return uML_Abstraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Abstraction_mapping()
{
	return uML_Abstraction_mapping;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AcceptCallAction()
{
	return uML_AcceptCallAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptCallAction_result_pins()
{
	return uML_AcceptCallAction_result_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptCallAction_returnInformation()
{
	return uML_AcceptCallAction_returnInformation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptCallAction_trigger_call_event()
{
	return uML_AcceptCallAction_trigger_call_event;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptCallAction_unmarshall()
{
	return uML_AcceptCallAction_unmarshall;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AcceptEventAction()
{
	return uML_AcceptEventAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_conforming_type()
{
	return uML_AcceptEventAction_conforming_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptEventAction_isUnmarshall()
{
	return uML_AcceptEventAction_isUnmarshall;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_no_input_pins()
{
	return uML_AcceptEventAction_no_input_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_no_output_pins()
{
	return uML_AcceptEventAction_no_output_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_one_output_pin()
{
	return uML_AcceptEventAction_one_output_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptEventAction_result()
{
	return uML_AcceptEventAction_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptEventAction_trigger()
{
	return uML_AcceptEventAction_trigger;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_unmarshall_signal_events()
{
	return uML_AcceptEventAction_unmarshall_signal_events;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Action()
{
	return uML_Action;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActionExecutionSpecification()
{
	return uML_ActionExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActionExecutionSpecification_action()
{
	return uML_ActionExecutionSpecification_action;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionExecutionSpecification_action_referenced()
{
	return uML_ActionExecutionSpecification_action_referenced;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActionInputPin()
{
	return uML_ActionInputPin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActionInputPin_fromAction()
{
	return uML_ActionInputPin_fromAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionInputPin_input_pin()
{
	return uML_ActionInputPin_input_pin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionInputPin_no_control_or_object_flow()
{
	return uML_ActionInputPin_no_control_or_object_flow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionInputPin_one_output_pin()
{
	return uML_ActionInputPin_one_output_pin;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_allActions__()
{
	return uML_Action_allActions__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_allActions_result()
{
	return uML_Action_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_allActions_spec()
{
	return uML_Action_allActions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_allOwnedNodes__()
{
	return uML_Action_allOwnedNodes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_allOwnedNodes_result()
{
	return uML_Action_allOwnedNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_allOwnedNodes_spec()
{
	return uML_Action_allOwnedNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_containingBehavior__()
{
	return uML_Action_containingBehavior__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_containingBehavior_result()
{
	return uML_Action_containingBehavior_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_containingBehavior_spec()
{
	return uML_Action_containingBehavior_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_context()
{
	return uML_Action_context;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_context__()
{
	return uML_Action_context__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_context_result()
{
	return uML_Action_context_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_context_spec()
{
	return uML_Action_context_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_input()
{
	return uML_Action_input;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_isLocallyReentrant()
{
	return uML_Action_isLocallyReentrant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_localPostcondition()
{
	return uML_Action_localPostcondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_localPrecondition()
{
	return uML_Action_localPrecondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_output()
{
	return uML_Action_output;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Activity()
{
	return uML_Activity;
}
std::shared_ptr<uml::Interface> UMLPackageImpl::get_UML_ActivityContent()
{
	return uML_ActivityContent;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityContent_containingActivity__()
{
	return uML_ActivityContent_containingActivity__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityContent_containingActivity_containingActivity()
{
	return uML_ActivityContent_containingActivity_containingActivity;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityEdge()
{
	return uML_ActivityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_activity()
{
	return uML_ActivityEdge_activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_guard()
{
	return uML_ActivityEdge_guard;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_inGroup()
{
	return uML_ActivityEdge_inGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_inPartition()
{
	return uML_ActivityEdge_inPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_inStructuredNode()
{
	return uML_ActivityEdge_inStructuredNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_interrupts()
{
	return uML_ActivityEdge_interrupts;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_ActivityEdge_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_result()
{
	return uML_ActivityEdge_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_spec()
{
	return uML_ActivityEdge_isConsistentWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_redefinedEdge()
{
	return uML_ActivityEdge_redefinedEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_source()
{
	return uML_ActivityEdge_source;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityEdge_source_and_target()
{
	return uML_ActivityEdge_source_and_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_target()
{
	return uML_ActivityEdge_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_weight()
{
	return uML_ActivityEdge_weight;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityFinalNode()
{
	return uML_ActivityFinalNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityGroup()
{
	return uML_ActivityGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_containedEdge()
{
	return uML_ActivityGroup_containedEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_containedNode()
{
	return uML_ActivityGroup_containedNode;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityGroup_containingActivity__()
{
	return uML_ActivityGroup_containingActivity__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityGroup_containingActivity_result()
{
	return uML_ActivityGroup_containingActivity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityGroup_containingActivity_spec()
{
	return uML_ActivityGroup_containingActivity_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_inActivity()
{
	return uML_ActivityGroup_inActivity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityGroup_nodes_and_edges()
{
	return uML_ActivityGroup_nodes_and_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityGroup_not_contained()
{
	return uML_ActivityGroup_not_contained;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_subgroup()
{
	return uML_ActivityGroup_subgroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_superGroup()
{
	return uML_ActivityGroup_superGroup;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityNode()
{
	return uML_ActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_activity()
{
	return uML_ActivityNode_activity;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityNode_containingActivity__()
{
	return uML_ActivityNode_containingActivity__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityNode_containingActivity_result()
{
	return uML_ActivityNode_containingActivity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityNode_containingActivity_spec()
{
	return uML_ActivityNode_containingActivity_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inGroup()
{
	return uML_ActivityNode_inGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inInterruptibleRegion()
{
	return uML_ActivityNode_inInterruptibleRegion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inPartition()
{
	return uML_ActivityNode_inPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inStructuredNode()
{
	return uML_ActivityNode_inStructuredNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_incoming()
{
	return uML_ActivityNode_incoming;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_ActivityNode_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_result()
{
	return uML_ActivityNode_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_spec()
{
	return uML_ActivityNode_isConsistentWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_outgoing()
{
	return uML_ActivityNode_outgoing;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_redefinedNode()
{
	return uML_ActivityNode_redefinedNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityParameterNode()
{
	return uML_ActivityParameterNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_has_parameters()
{
	return uML_ActivityParameterNode_has_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_no_edges()
{
	return uML_ActivityParameterNode_no_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_no_incoming_edges()
{
	return uML_ActivityParameterNode_no_incoming_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_no_outgoing_edges()
{
	return uML_ActivityParameterNode_no_outgoing_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityParameterNode_parameter()
{
	return uML_ActivityParameterNode_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_same_type()
{
	return uML_ActivityParameterNode_same_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityPartition()
{
	return uML_ActivityPartition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_dimension_not_contained()
{
	return uML_ActivityPartition_dimension_not_contained;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_edge()
{
	return uML_ActivityPartition_edge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_isDimension()
{
	return uML_ActivityPartition_isDimension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_isExternal()
{
	return uML_ActivityPartition_isExternal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_node()
{
	return uML_ActivityPartition_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_represents()
{
	return uML_ActivityPartition_represents;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_represents_classifier()
{
	return uML_ActivityPartition_represents_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_represents_property()
{
	return uML_ActivityPartition_represents_property;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_represents_property_and_is_contained()
{
	return uML_ActivityPartition_represents_property_and_is_contained;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_subpartition()
{
	return uML_ActivityPartition_subpartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_superPartition()
{
	return uML_ActivityPartition_superPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_edge()
{
	return uML_Activity_edge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_group()
{
	return uML_Activity_group;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_isReadOnly()
{
	return uML_Activity_isReadOnly;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_isSingleExecution()
{
	return uML_Activity_isSingleExecution;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Activity_maximum_one_parameter_node()
{
	return uML_Activity_maximum_one_parameter_node;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Activity_maximum_two_parameter_nodes()
{
	return uML_Activity_maximum_two_parameter_nodes;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_node()
{
	return uML_Activity_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_ownedGroup()
{
	return uML_Activity_ownedGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_ownedNode()
{
	return uML_Activity_ownedNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_partition()
{
	return uML_Activity_partition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_structuredNode()
{
	return uML_Activity_structuredNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_variable()
{
	return uML_Activity_variable;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Actor()
{
	return uML_Actor;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Actor_associations()
{
	return uML_Actor_associations;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Actor_must_have_name()
{
	return uML_Actor_must_have_name;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction()
{
	return uML_AddStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_insertAt()
{
	return uML_AddStructuralFeatureValueAction_insertAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_insertAt_pin()
{
	return uML_AddStructuralFeatureValueAction_insertAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_isReplaceAll()
{
	return uML_AddStructuralFeatureValueAction_isReplaceAll;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_required_value()
{
	return uML_AddStructuralFeatureValueAction_required_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AddVariableValueAction()
{
	return uML_AddVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddVariableValueAction_insertAt()
{
	return uML_AddVariableValueAction_insertAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddVariableValueAction_insertAt_pin()
{
	return uML_AddVariableValueAction_insertAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddVariableValueAction_isReplaceAll()
{
	return uML_AddVariableValueAction_isReplaceAll;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddVariableValueAction_required_value()
{
	return uML_AddVariableValueAction_required_value;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_AggregationKind()
{
	return uML_AggregationKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_AggregationKind_composite()
{
	return uML_AggregationKind_composite;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_AggregationKind_none()
{
	return uML_AggregationKind_none;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_AggregationKind_shared()
{
	return uML_AggregationKind_shared;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AnyReceiveEvent()
{
	return uML_AnyReceiveEvent;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Artifact()
{
	return uML_Artifact;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_fileName()
{
	return uML_Artifact_fileName;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_manifestation()
{
	return uML_Artifact_manifestation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_nestedArtifact()
{
	return uML_Artifact_nestedArtifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_ownedAttribute()
{
	return uML_Artifact_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_ownedOperation()
{
	return uML_Artifact_ownedOperation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Association()
{
	return uML_Association;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AssociationClass()
{
	return uML_AssociationClass;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AssociationClass_cannot_be_defined()
{
	return uML_AssociationClass_cannot_be_defined;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AssociationClass_disjoint_attributes_ends()
{
	return uML_AssociationClass_disjoint_attributes_ends;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_association_ends()
{
	return uML_Association_association_ends;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_binary_associations()
{
	return uML_Association_binary_associations;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_endType()
{
	return uML_Association_endType;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Association_endType__()
{
	return uML_Association_endType__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Association_endType_result()
{
	return uML_Association_endType_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_endType_spec()
{
	return uML_Association_endType_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_ends_must_be_typed()
{
	return uML_Association_ends_must_be_typed;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Association_isBinary__()
{
	return uML_Association_isBinary__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Association_isBinary__return()
{
	return uML_Association_isBinary__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_isDerived()
{
	return uML_Association_isDerived;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_memberEnd()
{
	return uML_Association_memberEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_navigableOwnedEnd()
{
	return uML_Association_navigableOwnedEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_ownedEnd()
{
	return uML_Association_ownedEnd;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_specialized_end_number()
{
	return uML_Association_specialized_end_number;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_specialized_end_types()
{
	return uML_Association_specialized_end_types;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Behavior()
{
	return uML_Behavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BehaviorExecutionSpecification()
{
	return uML_BehaviorExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehaviorExecutionSpecification_behavior()
{
	return uML_BehaviorExecutionSpecification_behavior;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_Element_Element()
{
	return uML_Behavior_behavioredClassifier_Element_Element;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_Element_Element_from()
{
	return uML_Behavior_behavioredClassifier_Element_Element_from;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_result()
{
	return uML_Behavior_behavioredClassifier_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_spec()
{
	return uML_Behavior_behavioredClassifier_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_context()
{
	return uML_Behavior_context;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_context__()
{
	return uML_Behavior_context__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_context_result()
{
	return uML_Behavior_context_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_context_spec()
{
	return uML_Behavior_context_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_feature_of_context_classifier()
{
	return uML_Behavior_feature_of_context_classifier;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_inputParameters__()
{
	return uML_Behavior_inputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_inputParameters_result()
{
	return uML_Behavior_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_inputParameters_spec()
{
	return uML_Behavior_inputParameters_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_isReentrant()
{
	return uML_Behavior_isReentrant;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_most_one_behavior()
{
	return uML_Behavior_most_one_behavior;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_outputParameters__()
{
	return uML_Behavior_outputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_outputParameters_result()
{
	return uML_Behavior_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_outputParameters_spec()
{
	return uML_Behavior_outputParameters_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_ownedParameter()
{
	return uML_Behavior_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_ownedParameterSet()
{
	return uML_Behavior_ownedParameterSet;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_parameters_match()
{
	return uML_Behavior_parameters_match;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_postcondition()
{
	return uML_Behavior_postcondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_precondition()
{
	return uML_Behavior_precondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_redefinedBehavior()
{
	return uML_Behavior_redefinedBehavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_specification()
{
	return uML_Behavior_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BehavioralFeature()
{
	return uML_BehavioralFeature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_abstract_no_method()
{
	return uML_BehavioralFeature_abstract_no_method;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_concurrency()
{
	return uML_BehavioralFeature_concurrency;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_String_Type()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_String_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_name()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_String_Type_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_String_Type_type()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_String_Type_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_String_Typereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_inputParameters__()
{
	return uML_BehavioralFeature_inputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_inputParameters_result()
{
	return uML_BehavioralFeature_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_inputParameters_spec()
{
	return uML_BehavioralFeature_inputParameters_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_isAbstract()
{
	return uML_BehavioralFeature_isAbstract;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace()
{
	return uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n()
{
	return uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns()
{
	return uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_result()
{
	return uML_BehavioralFeature_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_spec()
{
	return uML_BehavioralFeature_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_method()
{
	return uML_BehavioralFeature_method;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_outputParameters__()
{
	return uML_BehavioralFeature_outputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_outputParameters_result()
{
	return uML_BehavioralFeature_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_outputParameters_spec()
{
	return uML_BehavioralFeature_outputParameters_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_ownedParameter()
{
	return uML_BehavioralFeature_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_ownedParameterSet()
{
	return uML_BehavioralFeature_ownedParameterSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_raisedException()
{
	return uML_BehavioralFeature_raisedException;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BehavioredClassifier()
{
	return uML_BehavioredClassifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioredClassifier_class_behavior()
{
	return uML_BehavioredClassifier_class_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioredClassifier_classifierBehavior()
{
	return uML_BehavioredClassifier_classifierBehavior;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioredClassifier_getAllImplementedInterfaces__()
{
	return uML_BehavioredClassifier_getAllImplementedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioredClassifier_getAllImplementedInterfaces__return()
{
	return uML_BehavioredClassifier_getAllImplementedInterfaces__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioredClassifier_getImplementedInterfaces__()
{
	return uML_BehavioredClassifier_getImplementedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioredClassifier_getImplementedInterfaces__return()
{
	return uML_BehavioredClassifier_getImplementedInterfaces__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioredClassifier_interfaceRealization()
{
	return uML_BehavioredClassifier_interfaceRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioredClassifier_ownedBehavior()
{
	return uML_BehavioredClassifier_ownedBehavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BroadcastSignalAction()
{
	return uML_BroadcastSignalAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BroadcastSignalAction_no_onport()
{
	return uML_BroadcastSignalAction_no_onport;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BroadcastSignalAction_number_of_arguments()
{
	return uML_BroadcastSignalAction_number_of_arguments;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BroadcastSignalAction_signal()
{
	return uML_BroadcastSignalAction_signal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BroadcastSignalAction_type_ordering_multiplicity()
{
	return uML_BroadcastSignalAction_type_ordering_multiplicity;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallAction()
{
	return uML_CallAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallAction_argument_pins()
{
	return uML_CallAction_argument_pins;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallAction_inputParameters__()
{
	return uML_CallAction_inputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallAction_inputParameters_result()
{
	return uML_CallAction_inputParameters_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallAction_isSynchronous()
{
	return uML_CallAction_isSynchronous;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallAction_outputParameters__()
{
	return uML_CallAction_outputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallAction_outputParameters_result()
{
	return uML_CallAction_outputParameters_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallAction_result()
{
	return uML_CallAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallAction_result_pins()
{
	return uML_CallAction_result_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallAction_synchronous_call()
{
	return uML_CallAction_synchronous_call;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallBehaviorAction()
{
	return uML_CallBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallBehaviorAction_behavior()
{
	return uML_CallBehaviorAction_behavior;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallBehaviorAction_inputParameters__()
{
	return uML_CallBehaviorAction_inputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallBehaviorAction_inputParameters_result()
{
	return uML_CallBehaviorAction_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallBehaviorAction_inputParameters_spec()
{
	return uML_CallBehaviorAction_inputParameters_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallBehaviorAction_no_onport()
{
	return uML_CallBehaviorAction_no_onport;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallBehaviorAction_outputParameters__()
{
	return uML_CallBehaviorAction_outputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallBehaviorAction_outputParameters_result()
{
	return uML_CallBehaviorAction_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallBehaviorAction_outputParameters_spec()
{
	return uML_CallBehaviorAction_outputParameters_spec;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_CallConcurrencyKind()
{
	return uML_CallConcurrencyKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_CallConcurrencyKind_concurrent()
{
	return uML_CallConcurrencyKind_concurrent;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_CallConcurrencyKind_guarded()
{
	return uML_CallConcurrencyKind_guarded;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_CallConcurrencyKind_sequential()
{
	return uML_CallConcurrencyKind_sequential;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallEvent()
{
	return uML_CallEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallEvent_operation()
{
	return uML_CallEvent_operation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallOperationAction()
{
	return uML_CallOperationAction;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallOperationAction_inputParameters__()
{
	return uML_CallOperationAction_inputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallOperationAction_inputParameters_result()
{
	return uML_CallOperationAction_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallOperationAction_inputParameters_spec()
{
	return uML_CallOperationAction_inputParameters_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallOperationAction_operation()
{
	return uML_CallOperationAction_operation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallOperationAction_outputParameters__()
{
	return uML_CallOperationAction_outputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallOperationAction_outputParameters_result()
{
	return uML_CallOperationAction_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallOperationAction_outputParameters_spec()
{
	return uML_CallOperationAction_outputParameters_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallOperationAction_target()
{
	return uML_CallOperationAction_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallOperationAction_type_target_pin()
{
	return uML_CallOperationAction_type_target_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CentralBufferNode()
{
	return uML_CentralBufferNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ChangeEvent()
{
	return uML_ChangeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ChangeEvent_changeExpression()
{
	return uML_ChangeEvent_changeExpression;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Class()
{
	return uML_Class;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_extension()
{
	return uML_Class_extension;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_extension__()
{
	return uML_Class_extension__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_extension_result()
{
	return uML_Class_extension_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Class_extension_spec()
{
	return uML_Class_extension_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_isAbstract()
{
	return uML_Class_isAbstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_isActive()
{
	return uML_Class_isActive;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_isMetaclass__()
{
	return uML_Class_isMetaclass__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_isMetaclass__return()
{
	return uML_Class_isMetaclass__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_nestedClassifier()
{
	return uML_Class_nestedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_ownedAttribute()
{
	return uML_Class_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_ownedOperation()
{
	return uML_Class_ownedOperation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_ownedReception()
{
	return uML_Class_ownedReception;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Class_passive_class()
{
	return uML_Class_passive_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_superClass()
{
	return uML_Class_superClass;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_superClass__()
{
	return uML_Class_superClass__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_superClass_result()
{
	return uML_Class_superClass_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Class_superClass_spec()
{
	return uML_Class_superClass_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Classifier()
{
	return uML_Classifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClassifierTemplateParameter()
{
	return uML_ClassifierTemplateParameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_actual_is_classifier()
{
	return uML_ClassifierTemplateParameter_actual_is_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClassifierTemplateParameter_allowSubstitutable()
{
	return uML_ClassifierTemplateParameter_allowSubstitutable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClassifierTemplateParameter_constrainingClassifier()
{
	return uML_ClassifierTemplateParameter_constrainingClassifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_constraining_classifiers_constrain_args()
{
	return uML_ClassifierTemplateParameter_constraining_classifiers_constrain_args;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element()
{
	return uML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_has_constraining_classifier()
{
	return uML_ClassifierTemplateParameter_has_constraining_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_matching_abstract()
{
	return uML_ClassifierTemplateParameter_matching_abstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClassifierTemplateParameter_parameteredElement()
{
	return uML_ClassifierTemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_parametered_element_no_features()
{
	return uML_ClassifierTemplateParameter_parametered_element_no_features;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allAttributes__()
{
	return uML_Classifier_allAttributes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allAttributes_result()
{
	return uML_Classifier_allAttributes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allAttributes_spec()
{
	return uML_Classifier_allAttributes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allFeatures__()
{
	return uML_Classifier_allFeatures__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allFeatures_result()
{
	return uML_Classifier_allFeatures_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allFeatures_spec()
{
	return uML_Classifier_allFeatures_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allParents__()
{
	return uML_Classifier_allParents__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allParents_result()
{
	return uML_Classifier_allParents_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allParents_spec()
{
	return uML_Classifier_allParents_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allRealizedInterfaces__()
{
	return uML_Classifier_allRealizedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allRealizedInterfaces_result()
{
	return uML_Classifier_allRealizedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allRealizedInterfaces_spec()
{
	return uML_Classifier_allRealizedInterfaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allSlottableFeatures__()
{
	return uML_Classifier_allSlottableFeatures__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allSlottableFeatures_result()
{
	return uML_Classifier_allSlottableFeatures_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allSlottableFeatures_spec()
{
	return uML_Classifier_allSlottableFeatures_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allUsedInterfaces__()
{
	return uML_Classifier_allUsedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allUsedInterfaces_result()
{
	return uML_Classifier_allUsedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allUsedInterfaces_spec()
{
	return uML_Classifier_allUsedInterfaces_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_attribute()
{
	return uML_Classifier_attribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_collaborationUse()
{
	return uML_Classifier_collaborationUse;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_conformsTo_Type_Type()
{
	return uML_Classifier_conformsTo_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_conformsTo_Type_Type_other()
{
	return uML_Classifier_conformsTo_Type_Type_other;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_conformsTo_result()
{
	return uML_Classifier_conformsTo_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_conformsTo_spec()
{
	return uML_Classifier_conformsTo_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_directlyRealizedInterfaces__()
{
	return uML_Classifier_directlyRealizedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_directlyRealizedInterfaces_result()
{
	return uML_Classifier_directlyRealizedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_directlyRealizedInterfaces_spec()
{
	return uML_Classifier_directlyRealizedInterfaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_directlyUsedInterfaces__()
{
	return uML_Classifier_directlyUsedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_directlyUsedInterfaces_result()
{
	return uML_Classifier_directlyUsedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_directlyUsedInterfaces_spec()
{
	return uML_Classifier_directlyUsedInterfaces_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_feature()
{
	return uML_Classifier_feature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_general()
{
	return uML_Classifier_general;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_general__()
{
	return uML_Classifier_general__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_general_result()
{
	return uML_Classifier_general_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_general_spec()
{
	return uML_Classifier_general_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_generalization()
{
	return uML_Classifier_generalization;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getAllAttributes__()
{
	return uML_Classifier_getAllAttributes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getAllAttributes__return()
{
	return uML_Classifier_getAllAttributes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getAllOperations__()
{
	return uML_Classifier_getAllOperations__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getAllOperations__return()
{
	return uML_Classifier_getAllOperations__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getAllUsedInterfaces__()
{
	return uML_Classifier_getAllUsedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getAllUsedInterfaces__return()
{
	return uML_Classifier_getAllUsedInterfaces__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_ignoreCase;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Boolean_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_String_String_Type_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_String_String_Type()
{
	return uML_Classifier_getOperation_String_String_Type_String_String_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_String_String_Type_name()
{
	return uML_Classifier_getOperation_String_String_Type_String_String_Type_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames()
{
	return uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes()
{
	return uML_Classifier_getOperation_String_String_Type_String_String_Type_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_String_String_Typereturn()
{
	return uML_Classifier_getOperation_String_String_Type_String_String_Typereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getOperations__()
{
	return uML_Classifier_getOperations__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperations__return()
{
	return uML_Classifier_getOperations__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getUsedInterfaces__()
{
	return uML_Classifier_getUsedInterfaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getUsedInterfaces__return()
{
	return uML_Classifier_getUsedInterfaces__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_NamedElement_NamedElement()
{
	return uML_Classifier_hasVisibilityOf_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n()
{
	return uML_Classifier_hasVisibilityOf_NamedElement_NamedElement_n;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_pre()
{
	return uML_Classifier_hasVisibilityOf_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_result()
{
	return uML_Classifier_hasVisibilityOf_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_spec()
{
	return uML_Classifier_hasVisibilityOf_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_inherit_NamedElement_NamedElement()
{
	return uML_Classifier_inherit_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inherit_NamedElement_NamedElement_inhs()
{
	return uML_Classifier_inherit_NamedElement_NamedElement_inhs;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inherit_result()
{
	return uML_Classifier_inherit_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inherit_spec()
{
	return uML_Classifier_inherit_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_inheritableMembers_Classifier_Classifier()
{
	return uML_Classifier_inheritableMembers_Classifier_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inheritableMembers_Classifier_Classifier_c()
{
	return uML_Classifier_inheritableMembers_Classifier_Classifier_c;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inheritableMembers_pre()
{
	return uML_Classifier_inheritableMembers_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inheritableMembers_result()
{
	return uML_Classifier_inheritableMembers_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inheritableMembers_spec()
{
	return uML_Classifier_inheritableMembers_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_inheritedMember()
{
	return uML_Classifier_inheritedMember;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_inheritedMember__()
{
	return uML_Classifier_inheritedMember__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inheritedMember_result()
{
	return uML_Classifier_inheritedMember_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inheritedMember_spec()
{
	return uML_Classifier_inheritedMember_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_isAbstract()
{
	return uML_Classifier_isAbstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_isFinalSpecialization()
{
	return uML_Classifier_isFinalSpecialization;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_Classifier_Classifier()
{
	return uML_Classifier_isSubstitutableFor_Classifier_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_Classifier_Classifier_contract()
{
	return uML_Classifier_isSubstitutableFor_Classifier_Classifier_contract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_result()
{
	return uML_Classifier_isSubstitutableFor_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_spec()
{
	return uML_Classifier_isSubstitutableFor_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_isTemplate__()
{
	return uML_Classifier_isTemplate__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_isTemplate_result()
{
	return uML_Classifier_isTemplate_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_isTemplate_spec()
{
	return uML_Classifier_isTemplate_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_maps_to_generalization_set()
{
	return uML_Classifier_maps_to_generalization_set;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_maySpecializeType_Classifier_Classifier()
{
	return uML_Classifier_maySpecializeType_Classifier_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_maySpecializeType_Classifier_Classifier_c()
{
	return uML_Classifier_maySpecializeType_Classifier_Classifier_c;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_maySpecializeType_result()
{
	return uML_Classifier_maySpecializeType_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_maySpecializeType_spec()
{
	return uML_Classifier_maySpecializeType_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_no_cycles_in_generalization()
{
	return uML_Classifier_no_cycles_in_generalization;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_non_final_parents()
{
	return uML_Classifier_non_final_parents;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_ownedTemplateSignature()
{
	return uML_Classifier_ownedTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_ownedUseCase()
{
	return uML_Classifier_ownedUseCase;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_parents__()
{
	return uML_Classifier_parents__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_parents_result()
{
	return uML_Classifier_parents_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_parents_spec()
{
	return uML_Classifier_parents_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_powertypeExtent()
{
	return uML_Classifier_powertypeExtent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_redefinedClassifier()
{
	return uML_Classifier_redefinedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_representation()
{
	return uML_Classifier_representation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_specialize_type()
{
	return uML_Classifier_specialize_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_substitution()
{
	return uML_Classifier_substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_templateParameter()
{
	return uML_Classifier_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_useCase()
{
	return uML_Classifier_useCase;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Clause()
{
	return uML_Clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_body()
{
	return uML_Clause_body;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_bodyOutput()
{
	return uML_Clause_bodyOutput;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Clause_body_output_pins()
{
	return uML_Clause_body_output_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_decider()
{
	return uML_Clause_decider;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Clause_decider_output()
{
	return uML_Clause_decider_output;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_predecessorClause()
{
	return uML_Clause_predecessorClause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_successorClause()
{
	return uML_Clause_successorClause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_test()
{
	return uML_Clause_test;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Clause_test_and_body()
{
	return uML_Clause_test_and_body;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClearAssociationAction()
{
	return uML_ClearAssociationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClearAssociationAction_association()
{
	return uML_ClearAssociationAction_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearAssociationAction_multiplicity()
{
	return uML_ClearAssociationAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClearAssociationAction_object()
{
	return uML_ClearAssociationAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearAssociationAction_same_type()
{
	return uML_ClearAssociationAction_same_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClearStructuralFeatureAction()
{
	return uML_ClearStructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearStructuralFeatureAction_multiplicity_of_result()
{
	return uML_ClearStructuralFeatureAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClearStructuralFeatureAction_result()
{
	return uML_ClearStructuralFeatureAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearStructuralFeatureAction_type_of_result()
{
	return uML_ClearStructuralFeatureAction_type_of_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClearVariableAction()
{
	return uML_ClearVariableAction;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Collaboration()
{
	return uML_Collaboration;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CollaborationUse()
{
	return uML_CollaborationUse;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CollaborationUse_client_elements()
{
	return uML_CollaborationUse_client_elements;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CollaborationUse_connectors()
{
	return uML_CollaborationUse_connectors;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CollaborationUse_every_role()
{
	return uML_CollaborationUse_every_role;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CollaborationUse_roleBinding()
{
	return uML_CollaborationUse_roleBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CollaborationUse_type()
{
	return uML_CollaborationUse_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Collaboration_collaborationRole()
{
	return uML_Collaboration_collaborationRole;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CombinedFragment()
{
	return uML_CombinedFragment;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CombinedFragment_break()
{
	return uML_CombinedFragment_break;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CombinedFragment_cfragmentGate()
{
	return uML_CombinedFragment_cfragmentGate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CombinedFragment_consider_and_ignore()
{
	return uML_CombinedFragment_consider_and_ignore;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CombinedFragment_interactionOperator()
{
	return uML_CombinedFragment_interactionOperator;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CombinedFragment_operand()
{
	return uML_CombinedFragment_operand;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CombinedFragment_opt_loop_break_neg()
{
	return uML_CombinedFragment_opt_loop_break_neg;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Comment()
{
	return uML_Comment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Comment_annotatedElement()
{
	return uML_Comment_annotatedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Comment_body()
{
	return uML_Comment_body;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CommunicationPath()
{
	return uML_CommunicationPath;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CommunicationPath_association_ends()
{
	return uML_CommunicationPath_association_ends;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Component()
{
	return uML_Component;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ComponentRealization()
{
	return uML_ComponentRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ComponentRealization_abstraction()
{
	return uML_ComponentRealization_abstraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ComponentRealization_realizingClassifier()
{
	return uML_ComponentRealization_realizingClassifier;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_String_Boolean()
{
	return uML_Component_createOwnedClass_String_Boolean_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract()
{
	return uML_Component_createOwnedClass_String_Boolean_String_Boolean_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_String_Boolean_name()
{
	return uML_Component_createOwnedClass_String_Boolean_String_Boolean_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_String_Booleanreturn()
{
	return uML_Component_createOwnedClass_String_Boolean_String_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedEnumeration_String_String()
{
	return uML_Component_createOwnedEnumeration_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedEnumeration_String_String_name()
{
	return uML_Component_createOwnedEnumeration_String_String_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedEnumeration_String_Stringreturn()
{
	return uML_Component_createOwnedEnumeration_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedInterface_String_String()
{
	return uML_Component_createOwnedInterface_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedInterface_String_String_name()
{
	return uML_Component_createOwnedInterface_String_String_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedInterface_String_Stringreturn()
{
	return uML_Component_createOwnedInterface_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedPrimitiveType_String_String()
{
	return uML_Component_createOwnedPrimitiveType_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedPrimitiveType_String_String_name()
{
	return uML_Component_createOwnedPrimitiveType_String_String_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedPrimitiveType_String_Stringreturn()
{
	return uML_Component_createOwnedPrimitiveType_String_Stringreturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_isIndirectlyInstantiated()
{
	return uML_Component_isIndirectlyInstantiated;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_no_nested_classifiers()
{
	return uML_Component_no_nested_classifiers;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_no_packaged_elements()
{
	return uML_Component_no_packaged_elements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_packagedElement()
{
	return uML_Component_packagedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_provided()
{
	return uML_Component_provided;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_provided__()
{
	return uML_Component_provided__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_provided_result()
{
	return uML_Component_provided_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_provided_spec()
{
	return uML_Component_provided_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_realization()
{
	return uML_Component_realization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_required()
{
	return uML_Component_required;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_required__()
{
	return uML_Component_required__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_required_result()
{
	return uML_Component_required_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_required_spec()
{
	return uML_Component_required_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConditionalNode()
{
	return uML_ConditionalNode;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ConditionalNode_allActions__()
{
	return uML_ConditionalNode_allActions__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ConditionalNode_allActions_result()
{
	return uML_ConditionalNode_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_allActions_spec()
{
	return uML_ConditionalNode_allActions_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_clause()
{
	return uML_ConditionalNode_clause;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_clause_no_predecessor()
{
	return uML_ConditionalNode_clause_no_predecessor;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_executable_nodes()
{
	return uML_ConditionalNode_executable_nodes;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_isAssured()
{
	return uML_ConditionalNode_isAssured;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_isDeterminate()
{
	return uML_ConditionalNode_isDeterminate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_matching_output_pins()
{
	return uML_ConditionalNode_matching_output_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_no_input_pins()
{
	return uML_ConditionalNode_no_input_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_one_clause_with_executable_node()
{
	return uML_ConditionalNode_one_clause_with_executable_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_result()
{
	return uML_ConditionalNode_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_result_no_incoming()
{
	return uML_ConditionalNode_result_no_incoming;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectableElement()
{
	return uML_ConnectableElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectableElementTemplateParameter()
{
	return uML_ConnectableElementTemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectableElementTemplateParameter_parameteredElement()
{
	return uML_ConnectableElementTemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectableElement_end()
{
	return uML_ConnectableElement_end;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ConnectableElement_end__()
{
	return uML_ConnectableElement_end__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ConnectableElement_end_result()
{
	return uML_ConnectableElement_end_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectableElement_end_spec()
{
	return uML_ConnectableElement_end_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectableElement_templateParameter()
{
	return uML_ConnectableElement_templateParameter;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectionPointReference()
{
	return uML_ConnectionPointReference;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectionPointReference_entry()
{
	return uML_ConnectionPointReference_entry;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectionPointReference_entry_pseudostates()
{
	return uML_ConnectionPointReference_entry_pseudostates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectionPointReference_exit()
{
	return uML_ConnectionPointReference_exit;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectionPointReference_exit_pseudostates()
{
	return uML_ConnectionPointReference_exit_pseudostates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectionPointReference_state()
{
	return uML_ConnectionPointReference_state;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Connector()
{
	return uML_Connector;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectorEnd()
{
	return uML_ConnectorEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd()
{
	return uML_ConnectorEnd_definingEnd;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd__()
{
	return uML_ConnectorEnd_definingEnd__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd_result()
{
	return uML_ConnectorEnd_definingEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd_spec()
{
	return uML_ConnectorEnd_definingEnd_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_multiplicity()
{
	return uML_ConnectorEnd_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectorEnd_partWithPort()
{
	return uML_ConnectorEnd_partWithPort;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_part_with_port_empty()
{
	return uML_ConnectorEnd_part_with_port_empty;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectorEnd_role()
{
	return uML_ConnectorEnd_role;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_role_and_part_with_port()
{
	return uML_ConnectorEnd_role_and_part_with_port;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_self_part_with_port()
{
	return uML_ConnectorEnd_self_part_with_port;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ConnectorKind()
{
	return uML_ConnectorKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ConnectorKind_assembly()
{
	return uML_ConnectorKind_assembly;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ConnectorKind_delegation()
{
	return uML_ConnectorKind_delegation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_contract()
{
	return uML_Connector_contract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_end()
{
	return uML_Connector_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_kind()
{
	return uML_Connector_kind;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Connector_kind__()
{
	return uML_Connector_kind__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Connector_kind_result()
{
	return uML_Connector_kind_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Connector_kind_spec()
{
	return uML_Connector_kind_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_redefinedConnector()
{
	return uML_Connector_redefinedConnector;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Connector_roles()
{
	return uML_Connector_roles;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_type()
{
	return uML_Connector_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Connector_types()
{
	return uML_Connector_types;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConsiderIgnoreFragment()
{
	return uML_ConsiderIgnoreFragment;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConsiderIgnoreFragment_consider_or_ignore()
{
	return uML_ConsiderIgnoreFragment_consider_or_ignore;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConsiderIgnoreFragment_message()
{
	return uML_ConsiderIgnoreFragment_message;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConsiderIgnoreFragment_type()
{
	return uML_ConsiderIgnoreFragment_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Constraint()
{
	return uML_Constraint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Constraint_boolean_value()
{
	return uML_Constraint_boolean_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Constraint_constrainedElement()
{
	return uML_Constraint_constrainedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Constraint_context()
{
	return uML_Constraint_context;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Constraint_no_side_effects()
{
	return uML_Constraint_no_side_effects;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Constraint_not_apply_to_self()
{
	return uML_Constraint_not_apply_to_self;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Constraint_specification()
{
	return uML_Constraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Continuation()
{
	return uML_Continuation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Continuation_first_or_last_interaction_fragment()
{
	return uML_Continuation_first_or_last_interaction_fragment;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Continuation_global()
{
	return uML_Continuation_global;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Continuation_same_name()
{
	return uML_Continuation_same_name;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Continuation_setting()
{
	return uML_Continuation_setting;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ControlFlow()
{
	return uML_ControlFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ControlFlow_object_nodes()
{
	return uML_ControlFlow_object_nodes;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ControlNode()
{
	return uML_ControlNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CreateLinkAction()
{
	return uML_CreateLinkAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkAction_association_not_abstract()
{
	return uML_CreateLinkAction_association_not_abstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateLinkAction_endData()
{
	return uML_CreateLinkAction_endData;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CreateLinkObjectAction()
{
	return uML_CreateLinkObjectAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkObjectAction_association_class()
{
	return uML_CreateLinkObjectAction_association_class;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkObjectAction_multiplicity()
{
	return uML_CreateLinkObjectAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateLinkObjectAction_result()
{
	return uML_CreateLinkObjectAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkObjectAction_type_of_result()
{
	return uML_CreateLinkObjectAction_type_of_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CreateObjectAction()
{
	return uML_CreateObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateObjectAction_classifier()
{
	return uML_CreateObjectAction_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_classifier_not_abstract()
{
	return uML_CreateObjectAction_classifier_not_abstract;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_classifier_not_association_class()
{
	return uML_CreateObjectAction_classifier_not_association_class;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_multiplicity()
{
	return uML_CreateObjectAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateObjectAction_result()
{
	return uML_CreateObjectAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_same_type()
{
	return uML_CreateObjectAction_same_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DataStoreNode()
{
	return uML_DataStoreNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DataType()
{
	return uML_DataType;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DataType_ownedAttribute()
{
	return uML_DataType_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DataType_ownedOperation()
{
	return uML_DataType_ownedOperation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DecisionNode()
{
	return uML_DecisionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DecisionNode_decisionInput()
{
	return uML_DecisionNode_decisionInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DecisionNode_decisionInputFlow()
{
	return uML_DecisionNode_decisionInputFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_decision_input_flow_incoming()
{
	return uML_DecisionNode_decision_input_flow_incoming;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_edges()
{
	return uML_DecisionNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_incoming_control_one_input_parameter()
{
	return uML_DecisionNode_incoming_control_one_input_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_incoming_object_one_input_parameter()
{
	return uML_DecisionNode_incoming_object_one_input_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_incoming_outgoing_edges()
{
	return uML_DecisionNode_incoming_outgoing_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_parameters()
{
	return uML_DecisionNode_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_two_input_parameters()
{
	return uML_DecisionNode_two_input_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_zero_input_parameters()
{
	return uML_DecisionNode_zero_input_parameters;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Dependency()
{
	return uML_Dependency;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Dependency_client()
{
	return uML_Dependency_client;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Dependency_supplier()
{
	return uML_Dependency_supplier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DeployedArtifact()
{
	return uML_DeployedArtifact;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Deployment()
{
	return uML_Deployment;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DeploymentSpecification()
{
	return uML_DeploymentSpecification;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DeploymentSpecification_deployed_elements()
{
	return uML_DeploymentSpecification_deployed_elements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentSpecification_deployment()
{
	return uML_DeploymentSpecification_deployment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentSpecification_deploymentLocation()
{
	return uML_DeploymentSpecification_deploymentLocation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DeploymentSpecification_deployment_target()
{
	return uML_DeploymentSpecification_deployment_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentSpecification_executionLocation()
{
	return uML_DeploymentSpecification_executionLocation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DeploymentTarget()
{
	return uML_DeploymentTarget;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement()
{
	return uML_DeploymentTarget_deployedElement;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement__()
{
	return uML_DeploymentTarget_deployedElement__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement_result()
{
	return uML_DeploymentTarget_deployedElement_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement_spec()
{
	return uML_DeploymentTarget_deployedElement_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentTarget_deployment()
{
	return uML_DeploymentTarget_deployment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Deployment_configuration()
{
	return uML_Deployment_configuration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Deployment_deployedArtifact()
{
	return uML_Deployment_deployedArtifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Deployment_location()
{
	return uML_Deployment_location;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DestroyLinkAction()
{
	return uML_DestroyLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyLinkAction_endData()
{
	return uML_DestroyLinkAction_endData;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DestroyObjectAction()
{
	return uML_DestroyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyObjectAction_isDestroyLinks()
{
	return uML_DestroyObjectAction_isDestroyLinks;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyObjectAction_isDestroyOwnedObjects()
{
	return uML_DestroyObjectAction_isDestroyOwnedObjects;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DestroyObjectAction_multiplicity()
{
	return uML_DestroyObjectAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DestroyObjectAction_no_type()
{
	return uML_DestroyObjectAction_no_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyObjectAction_target()
{
	return uML_DestroyObjectAction_target;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DestructionOccurrenceSpecification()
{
	return uML_DestructionOccurrenceSpecification;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DestructionOccurrenceSpecification_no_occurrence_specifications_below()
{
	return uML_DestructionOccurrenceSpecification_no_occurrence_specifications_below;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Device()
{
	return uML_Device;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DirectedRelationship()
{
	return uML_DirectedRelationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DirectedRelationship_source()
{
	return uML_DirectedRelationship_source;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DirectedRelationship_target()
{
	return uML_DirectedRelationship_target;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Duration()
{
	return uML_Duration;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DurationConstraint()
{
	return uML_DurationConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationConstraint_firstEvent()
{
	return uML_DurationConstraint_firstEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DurationConstraint_first_event_multiplicity()
{
	return uML_DurationConstraint_first_event_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DurationConstraint_has_one_or_two_constrainedElements()
{
	return uML_DurationConstraint_has_one_or_two_constrainedElements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationConstraint_specification()
{
	return uML_DurationConstraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DurationInterval()
{
	return uML_DurationInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationInterval_max()
{
	return uML_DurationInterval_max;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationInterval_min()
{
	return uML_DurationInterval_min;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DurationObservation()
{
	return uML_DurationObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationObservation_event()
{
	return uML_DurationObservation_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationObservation_firstEvent()
{
	return uML_DurationObservation_firstEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DurationObservation_first_event_multiplicity()
{
	return uML_DurationObservation_first_event_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Duration_expr()
{
	return uML_Duration_expr;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Duration_no_expr_requires_observation()
{
	return uML_Duration_no_expr_requires_observation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Duration_observation()
{
	return uML_Duration_observation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Duration_stringValue__()
{
	return uML_Duration_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Duration_stringValue__return()
{
	return uML_Duration_stringValue__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Element()
{
	return uML_Element;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ElementImport()
{
	return uML_ElementImport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_alias()
{
	return uML_ElementImport_alias;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ElementImport_getName__()
{
	return uML_ElementImport_getName__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ElementImport_getName_result()
{
	return uML_ElementImport_getName_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ElementImport_getName_spec()
{
	return uML_ElementImport_getName_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_importedElement()
{
	return uML_ElementImport_importedElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ElementImport_imported_element_is_public()
{
	return uML_ElementImport_imported_element_is_public;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_importingNamespace()
{
	return uML_ElementImport_importingNamespace;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_visibility()
{
	return uML_ElementImport_visibility;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ElementImport_visibility_public_or_private()
{
	return uML_ElementImport_visibility_public_or_private;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_addKeyword_String_String()
{
	return uML_Element_addKeyword_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_addKeyword_String_String_keyword()
{
	return uML_Element_addKeyword_String_String_keyword;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_addKeyword_String_Stringreturn()
{
	return uML_Element_addKeyword_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_allOwnedElements__()
{
	return uML_Element_allOwnedElements__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_allOwnedElements_result()
{
	return uML_Element_allOwnedElements_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_allOwnedElements_spec()
{
	return uML_Element_allOwnedElements_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_applyStereotype_Stereotype_Stereotype()
{
	return uML_Element_applyStereotype_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_applyStereotype_Stereotype_Stereotype_stereotype()
{
	return uML_Element_applyStereotype_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_applyStereotype_Stereotype_Stereotypereturn()
{
	return uML_Element_applyStereotype_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_createEAnnotation_String_String()
{
	return uML_Element_createEAnnotation_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_createEAnnotation_String_String_source()
{
	return uML_Element_createEAnnotation_String_String_source;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_createEAnnotation_String_Stringreturn()
{
	return uML_Element_createEAnnotation_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_destroy__()
{
	return uML_Element_destroy__;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getApplicableStereotype_String_String()
{
	return uML_Element_getApplicableStereotype_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getApplicableStereotype_String_String_qualifiedName()
{
	return uML_Element_getApplicableStereotype_String_String_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getApplicableStereotype_String_Stringreturn()
{
	return uML_Element_getApplicableStereotype_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getApplicableStereotypes__()
{
	return uML_Element_getApplicableStereotypes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getApplicableStereotypes__return()
{
	return uML_Element_getApplicableStereotypes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedStereotype_String_String()
{
	return uML_Element_getAppliedStereotype_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedStereotype_String_String_qualifiedName()
{
	return uML_Element_getAppliedStereotype_String_String_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedStereotype_String_Stringreturn()
{
	return uML_Element_getAppliedStereotype_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedStereotypes__()
{
	return uML_Element_getAppliedStereotypes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedStereotypes__return()
{
	return uML_Element_getAppliedStereotypes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_String_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_Stereotype_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotype()
{
	return uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype()
{
	return uML_Element_getAppliedSubstereotypes_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn()
{
	return uML_Element_getAppliedSubstereotypes_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getKeywords__()
{
	return uML_Element_getKeywords__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getKeywords__return()
{
	return uML_Element_getKeywords__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getModel__()
{
	return uML_Element_getModel__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getModel__return()
{
	return uML_Element_getModel__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getNearestPackage__()
{
	return uML_Element_getNearestPackage__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getNearestPackage__return()
{
	return uML_Element_getNearestPackage__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRelationships_EClass_EClass()
{
	return uML_Element_getRelationships_EClass_EClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRelationships_EClass_EClass_eClass()
{
	return uML_Element_getRelationships_EClass_EClass_eClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRelationships_EClass_EClassreturn()
{
	return uML_Element_getRelationships_EClass_EClassreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRelationships__()
{
	return uML_Element_getRelationships__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRelationships__return()
{
	return uML_Element_getRelationships__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRequiredStereotype_String_String()
{
	return uML_Element_getRequiredStereotype_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRequiredStereotype_String_String_qualifiedName()
{
	return uML_Element_getRequiredStereotype_String_String_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRequiredStereotype_String_Stringreturn()
{
	return uML_Element_getRequiredStereotype_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRequiredStereotypes__()
{
	return uML_Element_getRequiredStereotypes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRequiredStereotypes__return()
{
	return uML_Element_getRequiredStereotypes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_EClass_EClass()
{
	return uML_Element_getSourceDirectedRelationships_EClass_EClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_EClass_EClass_eClass()
{
	return uML_Element_getSourceDirectedRelationships_EClass_EClass_eClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_EClass_EClassreturn()
{
	return uML_Element_getSourceDirectedRelationships_EClass_EClassreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships__()
{
	return uML_Element_getSourceDirectedRelationships__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships__return()
{
	return uML_Element_getSourceDirectedRelationships__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getStereotypeApplication_Stereotype_Stereotype()
{
	return uML_Element_getStereotypeApplication_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype()
{
	return uML_Element_getStereotypeApplication_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getStereotypeApplication_Stereotype_Stereotypereturn()
{
	return uML_Element_getStereotypeApplication_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getStereotypeApplications__()
{
	return uML_Element_getStereotypeApplications__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getStereotypeApplications__return()
{
	return uML_Element_getStereotypeApplications__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_EClass_EClass()
{
	return uML_Element_getTargetDirectedRelationships_EClass_EClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_EClass_EClass_eClass()
{
	return uML_Element_getTargetDirectedRelationships_EClass_EClass_eClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_EClass_EClassreturn()
{
	return uML_Element_getTargetDirectedRelationships_EClass_EClassreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships__()
{
	return uML_Element_getTargetDirectedRelationships__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships__return()
{
	return uML_Element_getTargetDirectedRelationships__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_Stereotype_String()
{
	return uML_Element_getValue_Stereotype_String_Stereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_Stereotype_String_propertyName()
{
	return uML_Element_getValue_Stereotype_String_Stereotype_String_propertyName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_Stereotype_String_stereotype()
{
	return uML_Element_getValue_Stereotype_String_Stereotype_String_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_Stereotype_Stringreturn()
{
	return uML_Element_getValue_Stereotype_String_Stereotype_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_hasKeyword_String_String()
{
	return uML_Element_hasKeyword_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasKeyword_String_String_keyword()
{
	return uML_Element_hasKeyword_String_String_keyword;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasKeyword_String_Stringreturn()
{
	return uML_Element_hasKeyword_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_Stereotype_String()
{
	return uML_Element_hasValue_Stereotype_String_Stereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName()
{
	return uML_Element_hasValue_Stereotype_String_Stereotype_String_propertyName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype()
{
	return uML_Element_hasValue_Stereotype_String_Stereotype_String_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn()
{
	return uML_Element_hasValue_Stereotype_String_Stereotype_Stringreturn;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_has_owner()
{
	return uML_Element_has_owner;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_isStereotypeApplicable_Stereotype_Stereotype()
{
	return uML_Element_isStereotypeApplicable_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype()
{
	return uML_Element_isStereotypeApplicable_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn()
{
	return uML_Element_isStereotypeApplicable_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_isStereotypeApplied_Stereotype_Stereotype()
{
	return uML_Element_isStereotypeApplied_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype()
{
	return uML_Element_isStereotypeApplied_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplied_Stereotype_Stereotypereturn()
{
	return uML_Element_isStereotypeApplied_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_isStereotypeRequired_Stereotype_Stereotype()
{
	return uML_Element_isStereotypeRequired_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype()
{
	return uML_Element_isStereotypeRequired_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeRequired_Stereotype_Stereotypereturn()
{
	return uML_Element_isStereotypeRequired_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_mustBeOwned__()
{
	return uML_Element_mustBeOwned__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_mustBeOwned_result()
{
	return uML_Element_mustBeOwned_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_mustBeOwned_spec()
{
	return uML_Element_mustBeOwned_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_not_own_self()
{
	return uML_Element_not_own_self;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Element_ownedComment()
{
	return uML_Element_ownedComment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Element_ownedElement()
{
	return uML_Element_ownedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Element_owner()
{
	return uML_Element_owner;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_removeKeyword_String_String()
{
	return uML_Element_removeKeyword_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_removeKeyword_String_String_keyword()
{
	return uML_Element_removeKeyword_String_String_keyword;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_removeKeyword_String_Stringreturn()
{
	return uML_Element_removeKeyword_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_newValue;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_propertyName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_Stereotype_String_EJavaObject_stereotype;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_unapplyStereotype_Stereotype_Stereotype()
{
	return uML_Element_unapplyStereotype_Stereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype()
{
	return uML_Element_unapplyStereotype_Stereotype_Stereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_unapplyStereotype_Stereotype_Stereotypereturn()
{
	return uML_Element_unapplyStereotype_Stereotype_Stereotypereturn;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_EncapsulatedClassifier()
{
	return uML_EncapsulatedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort()
{
	return uML_EncapsulatedClassifier_ownedPort;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort__()
{
	return uML_EncapsulatedClassifier_ownedPort__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort_result()
{
	return uML_EncapsulatedClassifier_ownedPort_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort_spec()
{
	return uML_EncapsulatedClassifier_ownedPort_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Enumeration()
{
	return uML_Enumeration;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_EnumerationLiteral()
{
	return uML_EnumerationLiteral;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_EnumerationLiteral_classifier()
{
	return uML_EnumerationLiteral_classifier;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_EnumerationLiteral_classifier__()
{
	return uML_EnumerationLiteral_classifier__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_EnumerationLiteral_classifier_result()
{
	return uML_EnumerationLiteral_classifier_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_EnumerationLiteral_classifier_spec()
{
	return uML_EnumerationLiteral_classifier_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_EnumerationLiteral_enumeration()
{
	return uML_EnumerationLiteral_enumeration;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_EnumerationLiteral_getClassifiers__()
{
	return uML_EnumerationLiteral_getClassifiers__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_EnumerationLiteral_getClassifiers__return()
{
	return uML_EnumerationLiteral_getClassifiers__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Enumeration_immutable()
{
	return uML_Enumeration_immutable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Enumeration_ownedLiteral()
{
	return uML_Enumeration_ownedLiteral;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Event()
{
	return uML_Event;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExceptionHandler()
{
	return uML_ExceptionHandler;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_edge_source_target()
{
	return uML_ExceptionHandler_edge_source_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_exceptionInput()
{
	return uML_ExceptionHandler_exceptionInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_exceptionType()
{
	return uML_ExceptionHandler_exceptionType;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_exception_input_type()
{
	return uML_ExceptionHandler_exception_input_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_handlerBody()
{
	return uML_ExceptionHandler_handlerBody;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_handler_body_edges()
{
	return uML_ExceptionHandler_handler_body_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_handler_body_owner()
{
	return uML_ExceptionHandler_handler_body_owner;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_one_input()
{
	return uML_ExceptionHandler_one_input;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_output_pins()
{
	return uML_ExceptionHandler_output_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_protectedNode()
{
	return uML_ExceptionHandler_protectedNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutableNode()
{
	return uML_ExecutableNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutableNode_handler()
{
	return uML_ExecutableNode_handler;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutionEnvironment()
{
	return uML_ExecutionEnvironment;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutionOccurrenceSpecification()
{
	return uML_ExecutionOccurrenceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutionOccurrenceSpecification_execution()
{
	return uML_ExecutionOccurrenceSpecification_execution;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutionSpecification()
{
	return uML_ExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutionSpecification_finish()
{
	return uML_ExecutionSpecification_finish;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExecutionSpecification_same_lifeline()
{
	return uML_ExecutionSpecification_same_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutionSpecification_start()
{
	return uML_ExecutionSpecification_start;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ExpansionKind()
{
	return uML_ExpansionKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ExpansionKind_iterative()
{
	return uML_ExpansionKind_iterative;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ExpansionKind_parallel()
{
	return uML_ExpansionKind_parallel;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ExpansionKind_stream()
{
	return uML_ExpansionKind_stream;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExpansionNode()
{
	return uML_ExpansionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionNode_regionAsInput()
{
	return uML_ExpansionNode_regionAsInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionNode_regionAsOutput()
{
	return uML_ExpansionNode_regionAsOutput;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExpansionNode_region_as_input_or_output()
{
	return uML_ExpansionNode_region_as_input_or_output;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExpansionRegion()
{
	return uML_ExpansionRegion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionRegion_inputElement()
{
	return uML_ExpansionRegion_inputElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionRegion_mode()
{
	return uML_ExpansionRegion_mode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionRegion_outputElement()
{
	return uML_ExpansionRegion_outputElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Expression()
{
	return uML_Expression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Expression_operand()
{
	return uML_Expression_operand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Expression_symbol()
{
	return uML_Expression_symbol;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Extend()
{
	return uML_Extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_condition()
{
	return uML_Extend_condition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_extendedCase()
{
	return uML_Extend_extendedCase;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_extension()
{
	return uML_Extend_extension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_extensionLocation()
{
	return uML_Extend_extensionLocation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extend_extension_points()
{
	return uML_Extend_extension_points;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Extension()
{
	return uML_Extension;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExtensionEnd()
{
	return uML_ExtensionEnd;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionEnd_aggregation()
{
	return uML_ExtensionEnd_aggregation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ExtensionEnd_getLower__()
{
	return uML_ExtensionEnd_getLower__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ExtensionEnd_getLower__return()
{
	return uML_ExtensionEnd_getLower__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExtensionEnd_lower()
{
	return uML_ExtensionEnd_lower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ExtensionEnd_lowerBound__()
{
	return uML_ExtensionEnd_lowerBound__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ExtensionEnd_lowerBound_result()
{
	return uML_ExtensionEnd_lowerBound_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionEnd_lowerBound_spec()
{
	return uML_ExtensionEnd_lowerBound_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionEnd_multiplicity()
{
	return uML_ExtensionEnd_multiplicity;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ExtensionEnd_setLower_Integer_Integer()
{
	return uML_ExtensionEnd_setLower_Integer_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ExtensionEnd_setLower_Integer_Integer_newLower()
{
	return uML_ExtensionEnd_setLower_Integer_Integer_newLower;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExtensionEnd_type()
{
	return uML_ExtensionEnd_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExtensionPoint()
{
	return uML_ExtensionPoint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionPoint_must_have_name()
{
	return uML_ExtensionPoint_must_have_name;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExtensionPoint_useCase()
{
	return uML_ExtensionPoint_useCase;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_getStereotypeEnd__()
{
	return uML_Extension_getStereotypeEnd__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_getStereotypeEnd__return()
{
	return uML_Extension_getStereotypeEnd__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_getStereotype__()
{
	return uML_Extension_getStereotype__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_getStereotype__return()
{
	return uML_Extension_getStereotype__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extension_isRequired()
{
	return uML_Extension_isRequired;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_isRequired__()
{
	return uML_Extension_isRequired__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_isRequired_result()
{
	return uML_Extension_isRequired_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_isRequired_spec()
{
	return uML_Extension_isRequired_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_is_binary()
{
	return uML_Extension_is_binary;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extension_metaclass()
{
	return uML_Extension_metaclass;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_metaclassEnd__()
{
	return uML_Extension_metaclassEnd__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_metaclassEnd_result()
{
	return uML_Extension_metaclassEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_metaclassEnd_spec()
{
	return uML_Extension_metaclassEnd_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_metaclass__()
{
	return uML_Extension_metaclass__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_metaclass_result()
{
	return uML_Extension_metaclass_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_metaclass_spec()
{
	return uML_Extension_metaclass_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_non_owned_end()
{
	return uML_Extension_non_owned_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extension_ownedEnd()
{
	return uML_Extension_ownedEnd;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Feature()
{
	return uML_Feature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Feature_featuringClassifier()
{
	return uML_Feature_featuringClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Feature_isStatic()
{
	return uML_Feature_isStatic;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FinalNode()
{
	return uML_FinalNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalNode_no_outgoing_edges()
{
	return uML_FinalNode_no_outgoing_edges;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FinalState()
{
	return uML_FinalState;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_cannot_reference_submachine()
{
	return uML_FinalState_cannot_reference_submachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_entry_behavior()
{
	return uML_FinalState_no_entry_behavior;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_exit_behavior()
{
	return uML_FinalState_no_exit_behavior;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_outgoing_transitions()
{
	return uML_FinalState_no_outgoing_transitions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_regions()
{
	return uML_FinalState_no_regions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_state_behavior()
{
	return uML_FinalState_no_state_behavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FlowFinalNode()
{
	return uML_FlowFinalNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ForkNode()
{
	return uML_ForkNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ForkNode_edges()
{
	return uML_ForkNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ForkNode_one_incoming_edge()
{
	return uML_ForkNode_one_incoming_edge;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FunctionBehavior()
{
	return uML_FunctionBehavior;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_DataType_d;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_result()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_spec()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FunctionBehavior_one_output_parameter()
{
	return uML_FunctionBehavior_one_output_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FunctionBehavior_types_of_parameters()
{
	return uML_FunctionBehavior_types_of_parameters;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Gate()
{
	return uML_Gate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_actual_gate_distinguishable()
{
	return uML_Gate_actual_gate_distinguishable;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_actual_gate_matched()
{
	return uML_Gate_actual_gate_matched;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_formal_gate_distinguishable()
{
	return uML_Gate_formal_gate_distinguishable;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_getName__()
{
	return uML_Gate_getName__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_getName_result()
{
	return uML_Gate_getName_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_getName_spec()
{
	return uML_Gate_getName_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_getOperand__()
{
	return uML_Gate_getOperand__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_getOperand_result()
{
	return uML_Gate_getOperand_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_getOperand_spec()
{
	return uML_Gate_getOperand_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_inside_cf_gate_distinguishable()
{
	return uML_Gate_inside_cf_gate_distinguishable;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_inside_cf_matched()
{
	return uML_Gate_inside_cf_matched;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isActual__()
{
	return uML_Gate_isActual__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isActual_result()
{
	return uML_Gate_isActual_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isActual_spec()
{
	return uML_Gate_isActual_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace()
{
	return uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n()
{
	return uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns()
{
	return uML_Gate_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_result()
{
	return uML_Gate_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_spec()
{
	return uML_Gate_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isFormal__()
{
	return uML_Gate_isFormal__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isFormal_result()
{
	return uML_Gate_isFormal_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isFormal_spec()
{
	return uML_Gate_isFormal_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isInsideCF__()
{
	return uML_Gate_isInsideCF__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isInsideCF_result()
{
	return uML_Gate_isInsideCF_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isInsideCF_spec()
{
	return uML_Gate_isInsideCF_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isOutsideCF__()
{
	return uML_Gate_isOutsideCF__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isOutsideCF_result()
{
	return uML_Gate_isOutsideCF_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isOutsideCF_spec()
{
	return uML_Gate_isOutsideCF_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_matches_Gate_Gate()
{
	return uML_Gate_matches_Gate_Gate;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_matches_Gate_Gate_gateToMatch()
{
	return uML_Gate_matches_Gate_Gate_gateToMatch;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_matches_result()
{
	return uML_Gate_matches_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_matches_spec()
{
	return uML_Gate_matches_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_outside_cf_gate_distinguishable()
{
	return uML_Gate_outside_cf_gate_distinguishable;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_outside_cf_matched()
{
	return uML_Gate_outside_cf_matched;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_GeneralOrdering()
{
	return uML_GeneralOrdering;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralOrdering_after()
{
	return uML_GeneralOrdering_after;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralOrdering_before()
{
	return uML_GeneralOrdering_before;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_GeneralOrdering_irreflexive_transitive_closure()
{
	return uML_GeneralOrdering_irreflexive_transitive_closure;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Generalization()
{
	return uML_Generalization;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_GeneralizationSet()
{
	return uML_GeneralizationSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_generalization()
{
	return uML_GeneralizationSet_generalization;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_GeneralizationSet_generalization_same_classifier()
{
	return uML_GeneralizationSet_generalization_same_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_isCovering()
{
	return uML_GeneralizationSet_isCovering;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_isDisjoint()
{
	return uML_GeneralizationSet_isDisjoint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_GeneralizationSet_maps_to_generalization_set()
{
	return uML_GeneralizationSet_maps_to_generalization_set;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_powertype()
{
	return uML_GeneralizationSet_powertype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_general()
{
	return uML_Generalization_general;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_generalizationSet()
{
	return uML_Generalization_generalizationSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_isSubstitutable()
{
	return uML_Generalization_isSubstitutable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_specific()
{
	return uML_Generalization_specific;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Image()
{
	return uML_Image;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Image_content()
{
	return uML_Image_content;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Image_format()
{
	return uML_Image_format;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Image_location()
{
	return uML_Image_location;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Include()
{
	return uML_Include;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Include_addition()
{
	return uML_Include_addition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Include_includingCase()
{
	return uML_Include_includingCase;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InformationFlow()
{
	return uML_InformationFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationFlow_convey_classifiers()
{
	return uML_InformationFlow_convey_classifiers;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_conveyed()
{
	return uML_InformationFlow_conveyed;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_informationSource()
{
	return uML_InformationFlow_informationSource;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_informationTarget()
{
	return uML_InformationFlow_informationTarget;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationFlow_must_conform()
{
	return uML_InformationFlow_must_conform;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realization()
{
	return uML_InformationFlow_realization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realizingActivityEdge()
{
	return uML_InformationFlow_realizingActivityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realizingConnector()
{
	return uML_InformationFlow_realizingConnector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realizingMessage()
{
	return uML_InformationFlow_realizingMessage;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationFlow_sources_and_targets_kind()
{
	return uML_InformationFlow_sources_and_targets_kind;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InformationItem()
{
	return uML_InformationItem;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationItem_has_no()
{
	return uML_InformationItem_has_no;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationItem_not_instantiable()
{
	return uML_InformationItem_not_instantiable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationItem_represented()
{
	return uML_InformationItem_represented;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationItem_sources_and_targets()
{
	return uML_InformationItem_sources_and_targets;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InitialNode()
{
	return uML_InitialNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InitialNode_control_edges()
{
	return uML_InitialNode_control_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InitialNode_no_incoming_edges()
{
	return uML_InitialNode_no_incoming_edges;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InputPin()
{
	return uML_InputPin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InputPin_outgoing_edges_structured_only()
{
	return uML_InputPin_outgoing_edges_structured_only;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InstanceSpecification()
{
	return uML_InstanceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceSpecification_classifier()
{
	return uML_InstanceSpecification_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_defining_feature()
{
	return uML_InstanceSpecification_defining_feature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_deployment_artifact()
{
	return uML_InstanceSpecification_deployment_artifact;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_deployment_target()
{
	return uML_InstanceSpecification_deployment_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceSpecification_slot()
{
	return uML_InstanceSpecification_slot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceSpecification_specification()
{
	return uML_InstanceSpecification_specification;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_structural_feature()
{
	return uML_InstanceSpecification_structural_feature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InstanceValue()
{
	return uML_InstanceValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceValue_instance()
{
	return uML_InstanceValue_instance;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_InstanceValue_stringValue__()
{
	return uML_InstanceValue_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_InstanceValue_stringValue__return()
{
	return uML_InstanceValue_stringValue__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Interaction()
{
	return uML_Interaction;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionConstraint()
{
	return uML_InteractionConstraint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_dynamic_variables()
{
	return uML_InteractionConstraint_dynamic_variables;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_global_data()
{
	return uML_InteractionConstraint_global_data;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionConstraint_maxint()
{
	return uML_InteractionConstraint_maxint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_maxint_greater_equal_minint()
{
	return uML_InteractionConstraint_maxint_greater_equal_minint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_maxint_positive()
{
	return uML_InteractionConstraint_maxint_positive;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionConstraint_minint()
{
	return uML_InteractionConstraint_minint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_minint_maxint()
{
	return uML_InteractionConstraint_minint_maxint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_minint_non_negative()
{
	return uML_InteractionConstraint_minint_non_negative;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionFragment()
{
	return uML_InteractionFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_covered()
{
	return uML_InteractionFragment_covered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_enclosingInteraction()
{
	return uML_InteractionFragment_enclosingInteraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_enclosingOperand()
{
	return uML_InteractionFragment_enclosingOperand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_generalOrdering()
{
	return uML_InteractionFragment_generalOrdering;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionOperand()
{
	return uML_InteractionOperand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionOperand_fragment()
{
	return uML_InteractionOperand_fragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionOperand_guard()
{
	return uML_InteractionOperand_guard;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionOperand_guard_contain_references()
{
	return uML_InteractionOperand_guard_contain_references;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionOperand_guard_directly_prior()
{
	return uML_InteractionOperand_guard_directly_prior;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_InteractionOperatorKind()
{
	return uML_InteractionOperatorKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_alt()
{
	return uML_InteractionOperatorKind_alt;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_assert()
{
	return uML_InteractionOperatorKind_assert;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_break()
{
	return uML_InteractionOperatorKind_break;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_consider()
{
	return uML_InteractionOperatorKind_consider;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_critical()
{
	return uML_InteractionOperatorKind_critical;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_ignore()
{
	return uML_InteractionOperatorKind_ignore;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_loop()
{
	return uML_InteractionOperatorKind_loop;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_neg()
{
	return uML_InteractionOperatorKind_neg;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_opt()
{
	return uML_InteractionOperatorKind_opt;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_par()
{
	return uML_InteractionOperatorKind_par;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_seq()
{
	return uML_InteractionOperatorKind_seq;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_strict()
{
	return uML_InteractionOperatorKind_strict;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionUse()
{
	return uML_InteractionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_actualGate()
{
	return uML_InteractionUse_actualGate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_all_lifelines()
{
	return uML_InteractionUse_all_lifelines;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_argument()
{
	return uML_InteractionUse_argument;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_arguments_are_constants()
{
	return uML_InteractionUse_arguments_are_constants;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_arguments_correspond_to_parameters()
{
	return uML_InteractionUse_arguments_correspond_to_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_gates_match()
{
	return uML_InteractionUse_gates_match;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_refersTo()
{
	return uML_InteractionUse_refersTo;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_returnValue()
{
	return uML_InteractionUse_returnValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_returnValueRecipient()
{
	return uML_InteractionUse_returnValueRecipient;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_returnValueRecipient_coverage()
{
	return uML_InteractionUse_returnValueRecipient_coverage;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_returnValue_type_recipient_correspondence()
{
	return uML_InteractionUse_returnValue_type_recipient_correspondence;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_action()
{
	return uML_Interaction_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_formalGate()
{
	return uML_Interaction_formalGate;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_fragment()
{
	return uML_Interaction_fragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_lifeline()
{
	return uML_Interaction_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_message()
{
	return uML_Interaction_message;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Interaction_not_contained()
{
	return uML_Interaction_not_contained;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Interface()
{
	return uML_Interface;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InterfaceRealization()
{
	return uML_InterfaceRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterfaceRealization_contract()
{
	return uML_InterfaceRealization_contract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterfaceRealization_implementingClassifier()
{
	return uML_InterfaceRealization_implementingClassifier;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Type_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_String_String_Type_Typereturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_nestedClassifier()
{
	return uML_Interface_nestedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_ownedAttribute()
{
	return uML_Interface_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_ownedOperation()
{
	return uML_Interface_ownedOperation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_ownedReception()
{
	return uML_Interface_ownedReception;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_protocol()
{
	return uML_Interface_protocol;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_redefinedInterface()
{
	return uML_Interface_redefinedInterface;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Interface_visibility()
{
	return uML_Interface_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InterruptibleActivityRegion()
{
	return uML_InterruptibleActivityRegion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterruptibleActivityRegion_interruptingEdge()
{
	return uML_InterruptibleActivityRegion_interruptingEdge;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InterruptibleActivityRegion_interrupting_edges()
{
	return uML_InterruptibleActivityRegion_interrupting_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterruptibleActivityRegion_node()
{
	return uML_InterruptibleActivityRegion_node;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Interval()
{
	return uML_Interval;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_IntervalConstraint()
{
	return uML_IntervalConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_IntervalConstraint_specification()
{
	return uML_IntervalConstraint_specification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interval_max()
{
	return uML_Interval_max;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interval_min()
{
	return uML_Interval_min;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InvocationAction()
{
	return uML_InvocationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InvocationAction_argument()
{
	return uML_InvocationAction_argument;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InvocationAction_onPort()
{
	return uML_InvocationAction_onPort;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_JoinNode()
{
	return uML_JoinNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_JoinNode_incoming_object_flow()
{
	return uML_JoinNode_incoming_object_flow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_JoinNode_isCombineDuplicate()
{
	return uML_JoinNode_isCombineDuplicate;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_JoinNode_joinSpec()
{
	return uML_JoinNode_joinSpec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_JoinNode_one_outgoing_edge()
{
	return uML_JoinNode_one_outgoing_edge;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Lifeline()
{
	return uML_Lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_coveredBy()
{
	return uML_Lifeline_coveredBy;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_decomposedAs()
{
	return uML_Lifeline_decomposedAs;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_interaction()
{
	return uML_Lifeline_interaction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_interaction_uses_share_lifeline()
{
	return uML_Lifeline_interaction_uses_share_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_represents()
{
	return uML_Lifeline_represents;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_same_classifier()
{
	return uML_Lifeline_same_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_selector()
{
	return uML_Lifeline_selector;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_selector_int_or_string()
{
	return uML_Lifeline_selector_int_or_string;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_selector_specified()
{
	return uML_Lifeline_selector_specified;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkAction()
{
	return uML_LinkAction;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkAction_association__()
{
	return uML_LinkAction_association__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkAction_association_result()
{
	return uML_LinkAction_association_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_association_spec()
{
	return uML_LinkAction_association_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkAction_endData()
{
	return uML_LinkAction_endData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkAction_inputValue()
{
	return uML_LinkAction_inputValue;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_not_static()
{
	return uML_LinkAction_not_static;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_same_association()
{
	return uML_LinkAction_same_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_same_pins()
{
	return uML_LinkAction_same_pins;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkEndCreationData()
{
	return uML_LinkEndCreationData;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkEndCreationData_allPins__()
{
	return uML_LinkEndCreationData_allPins__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkEndCreationData_allPins_result()
{
	return uML_LinkEndCreationData_allPins_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndCreationData_allPins_spec()
{
	return uML_LinkEndCreationData_allPins_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndCreationData_insertAt()
{
	return uML_LinkEndCreationData_insertAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndCreationData_insertAt_pin()
{
	return uML_LinkEndCreationData_insertAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndCreationData_isReplaceAll()
{
	return uML_LinkEndCreationData_isReplaceAll;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkEndData()
{
	return uML_LinkEndData;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkEndData_allPins__()
{
	return uML_LinkEndData_allPins__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkEndData_allPins_result()
{
	return uML_LinkEndData_allPins_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_allPins_spec()
{
	return uML_LinkEndData_allPins_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndData_end()
{
	return uML_LinkEndData_end;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_end_object_input_pin()
{
	return uML_LinkEndData_end_object_input_pin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_multiplicity()
{
	return uML_LinkEndData_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_property_is_association_end()
{
	return uML_LinkEndData_property_is_association_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndData_qualifier()
{
	return uML_LinkEndData_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_qualifiers()
{
	return uML_LinkEndData_qualifiers;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_same_type()
{
	return uML_LinkEndData_same_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndData_value()
{
	return uML_LinkEndData_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkEndDestructionData()
{
	return uML_LinkEndDestructionData;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkEndDestructionData_allPins__()
{
	return uML_LinkEndDestructionData_allPins__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkEndDestructionData_allPins_result()
{
	return uML_LinkEndDestructionData_allPins_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndDestructionData_allPins_spec()
{
	return uML_LinkEndDestructionData_allPins_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndDestructionData_destroyAt()
{
	return uML_LinkEndDestructionData_destroyAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndDestructionData_destroyAt_pin()
{
	return uML_LinkEndDestructionData_destroyAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndDestructionData_isDestroyDuplicates()
{
	return uML_LinkEndDestructionData_isDestroyDuplicates;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralBoolean()
{
	return uML_LiteralBoolean;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralBoolean_booleanValue__()
{
	return uML_LiteralBoolean_booleanValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralBoolean_booleanValue_result()
{
	return uML_LiteralBoolean_booleanValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralBoolean_booleanValue_spec()
{
	return uML_LiteralBoolean_booleanValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralBoolean_isComputable__()
{
	return uML_LiteralBoolean_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralBoolean_isComputable_result()
{
	return uML_LiteralBoolean_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralBoolean_isComputable_spec()
{
	return uML_LiteralBoolean_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralBoolean_stringValue__()
{
	return uML_LiteralBoolean_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralBoolean_stringValue__return()
{
	return uML_LiteralBoolean_stringValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralBoolean_value()
{
	return uML_LiteralBoolean_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralInteger()
{
	return uML_LiteralInteger;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralInteger_integerValue__()
{
	return uML_LiteralInteger_integerValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralInteger_integerValue_result()
{
	return uML_LiteralInteger_integerValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralInteger_integerValue_spec()
{
	return uML_LiteralInteger_integerValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralInteger_isComputable__()
{
	return uML_LiteralInteger_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralInteger_isComputable_result()
{
	return uML_LiteralInteger_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralInteger_isComputable_spec()
{
	return uML_LiteralInteger_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralInteger_stringValue__()
{
	return uML_LiteralInteger_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralInteger_stringValue__return()
{
	return uML_LiteralInteger_stringValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralInteger_value()
{
	return uML_LiteralInteger_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralNull()
{
	return uML_LiteralNull;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralNull_isComputable__()
{
	return uML_LiteralNull_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralNull_isComputable_result()
{
	return uML_LiteralNull_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralNull_isComputable_spec()
{
	return uML_LiteralNull_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralNull_isNull__()
{
	return uML_LiteralNull_isNull__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralNull_isNull_result()
{
	return uML_LiteralNull_isNull_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralNull_isNull_spec()
{
	return uML_LiteralNull_isNull_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralReal()
{
	return uML_LiteralReal;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralReal_isComputable__()
{
	return uML_LiteralReal_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralReal_isComputable_result()
{
	return uML_LiteralReal_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralReal_isComputable_spec()
{
	return uML_LiteralReal_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralReal_realValue__()
{
	return uML_LiteralReal_realValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralReal_realValue_result()
{
	return uML_LiteralReal_realValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralReal_realValue_spec()
{
	return uML_LiteralReal_realValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralReal_stringValue__()
{
	return uML_LiteralReal_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralReal_stringValue__return()
{
	return uML_LiteralReal_stringValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralReal_value()
{
	return uML_LiteralReal_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralSpecification()
{
	return uML_LiteralSpecification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralString()
{
	return uML_LiteralString;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_integerValue__()
{
	return uML_LiteralString_integerValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_integerValue__return()
{
	return uML_LiteralString_integerValue__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_isComputable__()
{
	return uML_LiteralString_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_isComputable_result()
{
	return uML_LiteralString_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralString_isComputable_spec()
{
	return uML_LiteralString_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_stringValue__()
{
	return uML_LiteralString_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_stringValue_result()
{
	return uML_LiteralString_stringValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralString_stringValue_spec()
{
	return uML_LiteralString_stringValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_unlimitedValue__()
{
	return uML_LiteralString_unlimitedValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_unlimitedValue__return()
{
	return uML_LiteralString_unlimitedValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralString_value()
{
	return uML_LiteralString_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralUnlimitedNatural()
{
	return uML_LiteralUnlimitedNatural;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_isComputable__()
{
	return uML_LiteralUnlimitedNatural_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_isComputable_result()
{
	return uML_LiteralUnlimitedNatural_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_isComputable_spec()
{
	return uML_LiteralUnlimitedNatural_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_stringValue__()
{
	return uML_LiteralUnlimitedNatural_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_stringValue__return()
{
	return uML_LiteralUnlimitedNatural_stringValue__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_unlimitedValue__()
{
	return uML_LiteralUnlimitedNatural_unlimitedValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_unlimitedValue_result()
{
	return uML_LiteralUnlimitedNatural_unlimitedValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_unlimitedValue_spec()
{
	return uML_LiteralUnlimitedNatural_unlimitedValue_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_value()
{
	return uML_LiteralUnlimitedNatural_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LoopNode()
{
	return uML_LoopNode;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LoopNode_allActions__()
{
	return uML_LoopNode_allActions__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LoopNode_allActions_result()
{
	return uML_LoopNode_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_allActions_spec()
{
	return uML_LoopNode_allActions_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_bodyOutput()
{
	return uML_LoopNode_bodyOutput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_bodyPart()
{
	return uML_LoopNode_bodyPart;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_body_output_pins()
{
	return uML_LoopNode_body_output_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_decider()
{
	return uML_LoopNode_decider;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_executable_nodes()
{
	return uML_LoopNode_executable_nodes;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_input_edges()
{
	return uML_LoopNode_input_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_isTestedFirst()
{
	return uML_LoopNode_isTestedFirst;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_loopVariable()
{
	return uML_LoopNode_loopVariable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_loopVariableInput()
{
	return uML_LoopNode_loopVariableInput;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_loop_variable_outgoing()
{
	return uML_LoopNode_loop_variable_outgoing;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_matching_loop_variables()
{
	return uML_LoopNode_matching_loop_variables;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_matching_output_pins()
{
	return uML_LoopNode_matching_output_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_matching_result_pins()
{
	return uML_LoopNode_matching_result_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_result()
{
	return uML_LoopNode_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_result_no_incoming()
{
	return uML_LoopNode_result_no_incoming;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_setupPart()
{
	return uML_LoopNode_setupPart;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_setup_test_and_body()
{
	return uML_LoopNode_setup_test_and_body;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LoopNode_sourceNodes__()
{
	return uML_LoopNode_sourceNodes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LoopNode_sourceNodes_result()
{
	return uML_LoopNode_sourceNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_sourceNodes_spec()
{
	return uML_LoopNode_sourceNodes_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_test()
{
	return uML_LoopNode_test;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Manifestation()
{
	return uML_Manifestation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Manifestation_utilizedElement()
{
	return uML_Manifestation_utilizedElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MergeNode()
{
	return uML_MergeNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MergeNode_edges()
{
	return uML_MergeNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MergeNode_one_outgoing_edge()
{
	return uML_MergeNode_one_outgoing_edge;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Message()
{
	return uML_Message;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MessageEnd()
{
	return uML_MessageEnd;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_enclosingFragment__()
{
	return uML_MessageEnd_enclosingFragment__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_enclosingFragment_result()
{
	return uML_MessageEnd_enclosingFragment_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_enclosingFragment_spec()
{
	return uML_MessageEnd_enclosingFragment_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_isReceive__()
{
	return uML_MessageEnd_isReceive__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isReceive_pre()
{
	return uML_MessageEnd_isReceive_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_isReceive_result()
{
	return uML_MessageEnd_isReceive_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isReceive_spec()
{
	return uML_MessageEnd_isReceive_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_isSend__()
{
	return uML_MessageEnd_isSend__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isSend_pre()
{
	return uML_MessageEnd_isSend_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_isSend_result()
{
	return uML_MessageEnd_isSend_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isSend_spec()
{
	return uML_MessageEnd_isSend_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MessageEnd_message()
{
	return uML_MessageEnd_message;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd__()
{
	return uML_MessageEnd_oppositeEnd__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_pre()
{
	return uML_MessageEnd_oppositeEnd_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_result()
{
	return uML_MessageEnd_oppositeEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_spec()
{
	return uML_MessageEnd_oppositeEnd_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MessageEvent()
{
	return uML_MessageEvent;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_MessageKind()
{
	return uML_MessageKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_complete()
{
	return uML_MessageKind_complete;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_found()
{
	return uML_MessageKind_found;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_lost()
{
	return uML_MessageKind_lost;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_unknown()
{
	return uML_MessageKind_unknown;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MessageOccurrenceSpecification()
{
	return uML_MessageOccurrenceSpecification;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_MessageSort()
{
	return uML_MessageSort;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_asynchCall()
{
	return uML_MessageSort_asynchCall;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_asynchSignal()
{
	return uML_MessageSort_asynchSignal;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_createMessage()
{
	return uML_MessageSort_createMessage;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_deleteMessage()
{
	return uML_MessageSort_deleteMessage;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_reply()
{
	return uML_MessageSort_reply;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_synchCall()
{
	return uML_MessageSort_synchCall;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_argument()
{
	return uML_Message_argument;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_arguments()
{
	return uML_Message_arguments;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_cannot_cross_boundaries()
{
	return uML_Message_cannot_cross_boundaries;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_connector()
{
	return uML_Message_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_interaction()
{
	return uML_Message_interaction;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace()
{
	return uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n()
{
	return uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns()
{
	return uML_Message_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_result()
{
	return uML_Message_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_spec()
{
	return uML_Message_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_messageKind()
{
	return uML_Message_messageKind;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Message_messageKind__()
{
	return uML_Message_messageKind__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_messageKind_result()
{
	return uML_Message_messageKind_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_messageKind_spec()
{
	return uML_Message_messageKind_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_messageSort()
{
	return uML_Message_messageSort;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_occurrence_specifications()
{
	return uML_Message_occurrence_specifications;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_receiveEvent()
{
	return uML_Message_receiveEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_sendEvent()
{
	return uML_Message_sendEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_sending_receiving_message_event()
{
	return uML_Message_sending_receiving_message_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_signature()
{
	return uML_Message_signature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_is_operation_reply()
{
	return uML_Message_signature_is_operation_reply;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_is_operation_request()
{
	return uML_Message_signature_is_operation_request;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_is_signal()
{
	return uML_Message_signature_is_signal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_refer_to()
{
	return uML_Message_signature_refer_to;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Model()
{
	return uML_Model;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Model_isMetamodel__()
{
	return uML_Model_isMetamodel__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Model_isMetamodel__return()
{
	return uML_Model_isMetamodel__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Model_viewpoint()
{
	return uML_Model_viewpoint;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MultiplicityElement()
{
	return uML_MultiplicityElement;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement()
{
	return uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other()
{
	return uML_MultiplicityElement_compatibleWith_MultiplicityElement_MultiplicityElement_other;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_result()
{
	return uML_MultiplicityElement_compatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_spec()
{
	return uML_MultiplicityElement_compatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement()
{
	return uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M()
{
	return uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_MultiplicityElement_M;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_pre()
{
	return uML_MultiplicityElement_includesMultiplicity_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_result()
{
	return uML_MultiplicityElement_includesMultiplicity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_spec()
{
	return uML_MultiplicityElement_includesMultiplicity_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued__()
{
	return uML_MultiplicityElement_isMultivalued__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_pre()
{
	return uML_MultiplicityElement_isMultivalued_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_result()
{
	return uML_MultiplicityElement_isMultivalued_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_spec()
{
	return uML_MultiplicityElement_isMultivalued_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_isOrdered()
{
	return uML_MultiplicityElement_isOrdered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_isUnique()
{
	return uML_MultiplicityElement_isUnique;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural()
{
	return uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound()
{
	return uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_lowerbound;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound()
{
	return uML_MultiplicityElement_is_Integer_UnlimitedNatural_Integer_UnlimitedNatural_upperbound;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_is_result()
{
	return uML_MultiplicityElement_is_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_is_spec()
{
	return uML_MultiplicityElement_is_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_lower()
{
	return uML_MultiplicityElement_lower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_lowerBound__()
{
	return uML_MultiplicityElement_lowerBound__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_lowerBound_result()
{
	return uML_MultiplicityElement_lowerBound_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lowerBound_spec()
{
	return uML_MultiplicityElement_lowerBound_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_lowerValue()
{
	return uML_MultiplicityElement_lowerValue;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_lower__()
{
	return uML_MultiplicityElement_lower__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lower_ge_0()
{
	return uML_MultiplicityElement_lower_ge_0;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lower_is_integer()
{
	return uML_MultiplicityElement_lower_is_integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_lower_result()
{
	return uML_MultiplicityElement_lower_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lower_spec()
{
	return uML_MultiplicityElement_lower_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_setLower_Integer_Integer()
{
	return uML_MultiplicityElement_setLower_Integer_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_setLower_Integer_Integer_newLower()
{
	return uML_MultiplicityElement_setLower_Integer_Integer_newLower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural()
{
	return uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper()
{
	return uML_MultiplicityElement_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_upper()
{
	return uML_MultiplicityElement_upper;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_upperBound__()
{
	return uML_MultiplicityElement_upperBound__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_upperBound_result()
{
	return uML_MultiplicityElement_upperBound_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upperBound_spec()
{
	return uML_MultiplicityElement_upperBound_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_upperValue()
{
	return uML_MultiplicityElement_upperValue;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_upper__()
{
	return uML_MultiplicityElement_upper__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upper_ge_lower()
{
	return uML_MultiplicityElement_upper_ge_lower;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upper_is_unlimitedNatural()
{
	return uML_MultiplicityElement_upper_is_unlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_upper_result()
{
	return uML_MultiplicityElement_upper_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upper_spec()
{
	return uML_MultiplicityElement_upper_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_value_specification_constant()
{
	return uML_MultiplicityElement_value_specification_constant;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_value_specification_no_side_effects()
{
	return uML_MultiplicityElement_value_specification_no_side_effects;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_NamedElement()
{
	return uML_NamedElement;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_allNamespaces__()
{
	return uML_NamedElement_allNamespaces__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_allNamespaces_result()
{
	return uML_NamedElement_allNamespaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_allNamespaces_spec()
{
	return uML_NamedElement_allNamespaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_allOwningPackages__()
{
	return uML_NamedElement_allOwningPackages__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_allOwningPackages_result()
{
	return uML_NamedElement_allOwningPackages_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_allOwningPackages_spec()
{
	return uML_NamedElement_allOwningPackages_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_clientDependency()
{
	return uML_NamedElement_clientDependency;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_clientDependency__()
{
	return uML_NamedElement_clientDependency__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_clientDependency_result()
{
	return uML_NamedElement_clientDependency_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_clientDependency_spec()
{
	return uML_NamedElement_clientDependency_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_createDependency_NamedElement_NamedElement()
{
	return uML_NamedElement_createDependency_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createDependency_NamedElement_NamedElement_supplier()
{
	return uML_NamedElement_createDependency_NamedElement_NamedElement_supplier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createDependency_NamedElement_NamedElementreturn()
{
	return uML_NamedElement_createDependency_NamedElement_NamedElementreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_createUsage_NamedElement_NamedElement()
{
	return uML_NamedElement_createUsage_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createUsage_NamedElement_NamedElement_supplier()
{
	return uML_NamedElement_createUsage_NamedElement_NamedElement_supplier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createUsage_NamedElement_NamedElementreturn()
{
	return uML_NamedElement_createUsage_NamedElement_NamedElementreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_getLabel_Boolean_Boolean()
{
	return uML_NamedElement_getLabel_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_getLabel_Boolean_Boolean_localize()
{
	return uML_NamedElement_getLabel_Boolean_Boolean_localize;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_getLabel_Boolean_Booleanreturn()
{
	return uML_NamedElement_getLabel_Boolean_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_getLabel__()
{
	return uML_NamedElement_getLabel__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_getLabel__return()
{
	return uML_NamedElement_getLabel__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_has_no_qualified_name()
{
	return uML_NamedElement_has_no_qualified_name;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_has_qualified_name()
{
	return uML_NamedElement_has_qualified_name;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace()
{
	return uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n()
{
	return uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns()
{
	return uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_NamedElement_Namespace_ns;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_result()
{
	return uML_NamedElement_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_spec()
{
	return uML_NamedElement_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_name()
{
	return uML_NamedElement_name;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_nameExpression()
{
	return uML_NamedElement_nameExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_namespace()
{
	return uML_NamedElement_namespace;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_namespace__()
{
	return uML_NamedElement_namespace__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_namespace_result()
{
	return uML_NamedElement_namespace_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_qualifiedName()
{
	return uML_NamedElement_qualifiedName;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_qualifiedName__()
{
	return uML_NamedElement_qualifiedName__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_qualifiedName_result()
{
	return uML_NamedElement_qualifiedName_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_qualifiedName_spec()
{
	return uML_NamedElement_qualifiedName_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_separator__()
{
	return uML_NamedElement_separator__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_separator_result()
{
	return uML_NamedElement_separator_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_separator_spec()
{
	return uML_NamedElement_separator_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_visibility()
{
	return uML_NamedElement_visibility;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_visibility_needs_ownership()
{
	return uML_NamedElement_visibility_needs_ownership;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Namespace()
{
	return uML_Namespace;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_cannot_import_ownedMembers()
{
	return uML_Namespace_cannot_import_ownedMembers;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_cannot_import_self()
{
	return uML_Namespace_cannot_import_self;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_element;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKind_visibility;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_PackageableElement_VisibilityKindreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_package_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKind_visibility;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_Package_VisibilityKindreturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_elementImport()
{
	return uML_Namespace_elementImport;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_excludeCollisions_PackageableElement_PackageableElement()
{
	return uML_Namespace_excludeCollisions_PackageableElement_PackageableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps()
{
	return uML_Namespace_excludeCollisions_PackageableElement_PackageableElement_imps;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_excludeCollisions_result()
{
	return uML_Namespace_excludeCollisions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_excludeCollisions_spec()
{
	return uML_Namespace_excludeCollisions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_getImportedElements__()
{
	return uML_Namespace_getImportedElements__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getImportedElements__return()
{
	return uML_Namespace_getImportedElements__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_getImportedPackages__()
{
	return uML_Namespace_getImportedPackages__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getImportedPackages__return()
{
	return uML_Namespace_getImportedPackages__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_NamedElement_NamedElement()
{
	return uML_Namespace_getNamesOfMember_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_NamedElement_NamedElement_element()
{
	return uML_Namespace_getNamesOfMember_NamedElement_NamedElement_element;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_result()
{
	return uML_Namespace_getNamesOfMember_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_spec()
{
	return uML_Namespace_getNamesOfMember_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_importMembers_PackageableElement_PackageableElement()
{
	return uML_Namespace_importMembers_PackageableElement_PackageableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_importMembers_PackageableElement_PackageableElement_imps()
{
	return uML_Namespace_importMembers_PackageableElement_PackageableElement_imps;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_importMembers_result()
{
	return uML_Namespace_importMembers_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_importMembers_spec()
{
	return uML_Namespace_importMembers_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_importedMember()
{
	return uML_Namespace_importedMember;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_importedMember__()
{
	return uML_Namespace_importedMember__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_importedMember_result()
{
	return uML_Namespace_importedMember_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_importedMember_spec()
{
	return uML_Namespace_importedMember_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_member()
{
	return uML_Namespace_member;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_membersAreDistinguishable__()
{
	return uML_Namespace_membersAreDistinguishable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_membersAreDistinguishable_result()
{
	return uML_Namespace_membersAreDistinguishable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_membersAreDistinguishable_spec()
{
	return uML_Namespace_membersAreDistinguishable_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_members_distinguishable()
{
	return uML_Namespace_members_distinguishable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_ownedMember()
{
	return uML_Namespace_ownedMember;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_ownedMember__()
{
	return uML_Namespace_ownedMember__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_ownedMember_result()
{
	return uML_Namespace_ownedMember_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_ownedRule()
{
	return uML_Namespace_ownedRule;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_packageImport()
{
	return uML_Namespace_packageImport;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Node()
{
	return uML_Node;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Node;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Node_getCommunicationPaths__()
{
	return uML_Node_getCommunicationPaths__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_getCommunicationPaths__return()
{
	return uML_Node_getCommunicationPaths__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Node_internal_structure()
{
	return uML_Node_internal_structure;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Node_nestedNode()
{
	return uML_Node_nestedNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ObjectFlow()
{
	return uML_ObjectFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_compatible_types()
{
	return uML_ObjectFlow_compatible_types;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_input_and_output_parameter()
{
	return uML_ObjectFlow_input_and_output_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_isMulticast()
{
	return uML_ObjectFlow_isMulticast;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_isMultireceive()
{
	return uML_ObjectFlow_isMultireceive;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_is_multicast_or_is_multireceive()
{
	return uML_ObjectFlow_is_multicast_or_is_multireceive;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_no_executable_nodes()
{
	return uML_ObjectFlow_no_executable_nodes;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_same_upper_bounds()
{
	return uML_ObjectFlow_same_upper_bounds;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_selection()
{
	return uML_ObjectFlow_selection;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_selection_behavior()
{
	return uML_ObjectFlow_selection_behavior;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_target()
{
	return uML_ObjectFlow_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_transformation()
{
	return uML_ObjectFlow_transformation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_transformation_behavior()
{
	return uML_ObjectFlow_transformation_behavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ObjectNode()
{
	return uML_ObjectNode;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ObjectNodeOrderingKind()
{
	return uML_ObjectNodeOrderingKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_FIFO()
{
	return uML_ObjectNodeOrderingKind_FIFO;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_LIFO()
{
	return uML_ObjectNodeOrderingKind_LIFO;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_ordered()
{
	return uML_ObjectNodeOrderingKind_ordered;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_unordered()
{
	return uML_ObjectNodeOrderingKind_unordered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_inState()
{
	return uML_ObjectNode_inState;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectNode_input_output_parameter()
{
	return uML_ObjectNode_input_output_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_isControlType()
{
	return uML_ObjectNode_isControlType;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectNode_object_flow_edges()
{
	return uML_ObjectNode_object_flow_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_ordering()
{
	return uML_ObjectNode_ordering;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_selection()
{
	return uML_ObjectNode_selection;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectNode_selection_behavior()
{
	return uML_ObjectNode_selection_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_upperBound()
{
	return uML_ObjectNode_upperBound;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Observation()
{
	return uML_Observation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OccurrenceSpecification()
{
	return uML_OccurrenceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OccurrenceSpecification_covered()
{
	return uML_OccurrenceSpecification_covered;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OccurrenceSpecification_getCovered__()
{
	return uML_OccurrenceSpecification_getCovered__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OccurrenceSpecification_getCovered__return()
{
	return uML_OccurrenceSpecification_getCovered__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OccurrenceSpecification_setCovered_Lifeline_Lifeline()
{
	return uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value()
{
	return uML_OccurrenceSpecification_setCovered_Lifeline_Lifeline_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OccurrenceSpecification_toAfter()
{
	return uML_OccurrenceSpecification_toAfter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OccurrenceSpecification_toBefore()
{
	return uML_OccurrenceSpecification_toBefore;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OpaqueAction()
{
	return uML_OpaqueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_body()
{
	return uML_OpaqueAction_body;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_inputValue()
{
	return uML_OpaqueAction_inputValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_language()
{
	return uML_OpaqueAction_language;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueAction_language_body_size()
{
	return uML_OpaqueAction_language_body_size;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_outputValue()
{
	return uML_OpaqueAction_outputValue;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OpaqueBehavior()
{
	return uML_OpaqueBehavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueBehavior_body()
{
	return uML_OpaqueBehavior_body;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueBehavior_language()
{
	return uML_OpaqueBehavior_language;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OpaqueExpression()
{
	return uML_OpaqueExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_behavior()
{
	return uML_OpaqueExpression_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_body()
{
	return uML_OpaqueExpression_body;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_isIntegral__()
{
	return uML_OpaqueExpression_isIntegral__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_isIntegral_result()
{
	return uML_OpaqueExpression_isIntegral_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isIntegral_spec()
{
	return uML_OpaqueExpression_isIntegral_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative__()
{
	return uML_OpaqueExpression_isNonNegative__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_pre()
{
	return uML_OpaqueExpression_isNonNegative_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_result()
{
	return uML_OpaqueExpression_isNonNegative_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_spec()
{
	return uML_OpaqueExpression_isNonNegative_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_isPositive__()
{
	return uML_OpaqueExpression_isPositive__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_pre()
{
	return uML_OpaqueExpression_isPositive_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_result()
{
	return uML_OpaqueExpression_isPositive_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_spec()
{
	return uML_OpaqueExpression_isPositive_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_language()
{
	return uML_OpaqueExpression_language;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_language_body_size()
{
	return uML_OpaqueExpression_language_body_size;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_one_return_result_parameter()
{
	return uML_OpaqueExpression_one_return_result_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_only_return_result_parameters()
{
	return uML_OpaqueExpression_only_return_result_parameters;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_result()
{
	return uML_OpaqueExpression_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_result__()
{
	return uML_OpaqueExpression_result__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_result_result()
{
	return uML_OpaqueExpression_result_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_result_spec()
{
	return uML_OpaqueExpression_result_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_stringValue__()
{
	return uML_OpaqueExpression_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_stringValue__return()
{
	return uML_OpaqueExpression_stringValue__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_value__()
{
	return uML_OpaqueExpression_value__;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_value_pre()
{
	return uML_OpaqueExpression_value_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_value_result()
{
	return uML_OpaqueExpression_value_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_value_spec()
{
	return uML_OpaqueExpression_value_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Operation()
{
	return uML_Operation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OperationTemplateParameter()
{
	return uML_OperationTemplateParameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OperationTemplateParameter_match_default_signature()
{
	return uML_OperationTemplateParameter_match_default_signature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OperationTemplateParameter_parameteredElement()
{
	return uML_OperationTemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_at_most_one_return()
{
	return uML_Operation_at_most_one_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_bodyCondition()
{
	return uML_Operation_bodyCondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_class()
{
	return uML_Operation_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_datatype()
{
	return uML_Operation_datatype;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_getReturnResult__()
{
	return uML_Operation_getReturnResult__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_getReturnResult__return()
{
	return uML_Operation_getReturnResult__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_interface()
{
	return uML_Operation_interface;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_Operation_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isConsistentWith_pre()
{
	return uML_Operation_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isConsistentWith_result()
{
	return uML_Operation_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isConsistentWith_spec()
{
	return uML_Operation_isConsistentWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_isOrdered()
{
	return uML_Operation_isOrdered;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_isOrdered__()
{
	return uML_Operation_isOrdered__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isOrdered_result()
{
	return uML_Operation_isOrdered_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isOrdered_spec()
{
	return uML_Operation_isOrdered_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_isQuery()
{
	return uML_Operation_isQuery;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_isUnique()
{
	return uML_Operation_isUnique;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_isUnique__()
{
	return uML_Operation_isUnique__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isUnique_result()
{
	return uML_Operation_isUnique_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isUnique_spec()
{
	return uML_Operation_isUnique_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_lower()
{
	return uML_Operation_lower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_lower__()
{
	return uML_Operation_lower__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_lower_result()
{
	return uML_Operation_lower_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_lower_spec()
{
	return uML_Operation_lower_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_only_body_for_query()
{
	return uML_Operation_only_body_for_query;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_ownedParameter()
{
	return uML_Operation_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_postcondition()
{
	return uML_Operation_postcondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_precondition()
{
	return uML_Operation_precondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_raisedException()
{
	return uML_Operation_raisedException;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_redefinedOperation()
{
	return uML_Operation_redefinedOperation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_returnResult__()
{
	return uML_Operation_returnResult__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_returnResult_result()
{
	return uML_Operation_returnResult_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_returnResult_spec()
{
	return uML_Operation_returnResult_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setIsOrdered_Boolean_Boolean()
{
	return uML_Operation_setIsOrdered_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered()
{
	return uML_Operation_setIsOrdered_Boolean_Boolean_newIsOrdered;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setIsUnique_Boolean_Boolean()
{
	return uML_Operation_setIsUnique_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setIsUnique_Boolean_Boolean_newIsUnique()
{
	return uML_Operation_setIsUnique_Boolean_Boolean_newIsUnique;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setLower_Integer_Integer()
{
	return uML_Operation_setLower_Integer_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setLower_Integer_Integer_newLower()
{
	return uML_Operation_setLower_Integer_Integer_newLower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setType_Type_Type()
{
	return uML_Operation_setType_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setType_Type_Type_newType()
{
	return uML_Operation_setType_Type_Type_newType;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural()
{
	return uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper()
{
	return uML_Operation_setUpper_UnlimitedNatural_UnlimitedNatural_newUpper;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_templateParameter()
{
	return uML_Operation_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_type()
{
	return uML_Operation_type;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_type__()
{
	return uML_Operation_type__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_type_result()
{
	return uML_Operation_type_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_type_spec()
{
	return uML_Operation_type_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_upper()
{
	return uML_Operation_upper;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_upper__()
{
	return uML_Operation_upper__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_upper_result()
{
	return uML_Operation_upper_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_upper_spec()
{
	return uML_Operation_upper_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OutputPin()
{
	return uML_OutputPin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OutputPin_incoming_edges_structured_only()
{
	return uML_OutputPin_incoming_edges_structured_only;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Package()
{
	return uML_Package;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PackageImport()
{
	return uML_PackageImport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageImport_importedPackage()
{
	return uML_PackageImport_importedPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageImport_importingNamespace()
{
	return uML_PackageImport_importingNamespace;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PackageImport_public_or_private()
{
	return uML_PackageImport_public_or_private;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageImport_visibility()
{
	return uML_PackageImport_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PackageMerge()
{
	return uML_PackageMerge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageMerge_mergedPackage()
{
	return uML_PackageMerge_mergedPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageMerge_receivingPackage()
{
	return uML_PackageMerge_receivingPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_URI()
{
	return uML_Package_URI;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_allApplicableStereotypes__()
{
	return uML_Package_allApplicableStereotypes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_allApplicableStereotypes_result()
{
	return uML_Package_allApplicableStereotypes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_allApplicableStereotypes_spec()
{
	return uML_Package_allApplicableStereotypes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_applyProfile_Profile_Profile()
{
	return uML_Package_applyProfile_Profile_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_applyProfile_Profile_Profile_profile()
{
	return uML_Package_applyProfile_Profile_Profile_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_applyProfile_Profile_Profilereturn()
{
	return uML_Package_applyProfile_Profile_Profilereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_containingProfile__()
{
	return uML_Package_containingProfile__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_containingProfile_result()
{
	return uML_Package_containingProfile_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_containingProfile_spec()
{
	return uML_Package_containingProfile_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_String_Boolean()
{
	return uML_Package_createOwnedClass_String_Boolean_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract()
{
	return uML_Package_createOwnedClass_String_Boolean_String_Boolean_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_String_Boolean_name()
{
	return uML_Package_createOwnedClass_String_Boolean_String_Boolean_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_String_Booleanreturn()
{
	return uML_Package_createOwnedClass_String_Boolean_String_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedEnumeration_String_String()
{
	return uML_Package_createOwnedEnumeration_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedEnumeration_String_String_name()
{
	return uML_Package_createOwnedEnumeration_String_String_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedEnumeration_String_Stringreturn()
{
	return uML_Package_createOwnedEnumeration_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedInterface_String_String()
{
	return uML_Package_createOwnedInterface_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedInterface_String_String_name()
{
	return uML_Package_createOwnedInterface_String_String_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedInterface_String_Stringreturn()
{
	return uML_Package_createOwnedInterface_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedPrimitiveType_String_String()
{
	return uML_Package_createOwnedPrimitiveType_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedPrimitiveType_String_String_name()
{
	return uML_Package_createOwnedPrimitiveType_String_String_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedPrimitiveType_String_Stringreturn()
{
	return uML_Package_createOwnedPrimitiveType_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_String_Boolean()
{
	return uML_Package_createOwnedStereotype_String_Boolean_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract()
{
	return uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name()
{
	return uML_Package_createOwnedStereotype_String_Boolean_String_Boolean_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn()
{
	return uML_Package_createOwnedStereotype_String_Boolean_String_Booleanreturn;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_elements_public_or_private()
{
	return uML_Package_elements_public_or_private;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAllAppliedProfiles__()
{
	return uML_Package_getAllAppliedProfiles__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAllAppliedProfiles__return()
{
	return uML_Package_getAllAppliedProfiles__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAllProfileApplications__()
{
	return uML_Package_getAllProfileApplications__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAllProfileApplications__return()
{
	return uML_Package_getAllProfileApplications__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_String_Boolean()
{
	return uML_Package_getAppliedProfile_String_Boolean_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName()
{
	return uML_Package_getAppliedProfile_String_Boolean_String_Boolean_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse()
{
	return uML_Package_getAppliedProfile_String_Boolean_String_Boolean_recurse;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn()
{
	return uML_Package_getAppliedProfile_String_Boolean_String_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_String()
{
	return uML_Package_getAppliedProfile_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_String_qualifiedName()
{
	return uML_Package_getAppliedProfile_String_String_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Stringreturn()
{
	return uML_Package_getAppliedProfile_String_Stringreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAppliedProfiles__()
{
	return uML_Package_getAppliedProfiles__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfiles__return()
{
	return uML_Package_getAppliedProfiles__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean()
{
	return uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile()
{
	return uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse()
{
	return uML_Package_getProfileApplication_Profile_Boolean_Profile_Boolean_recurse;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn()
{
	return uML_Package_getProfileApplication_Profile_Boolean_Profile_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Profile()
{
	return uML_Package_getProfileApplication_Profile_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Profile_profile()
{
	return uML_Package_getProfileApplication_Profile_Profile_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Profilereturn()
{
	return uML_Package_getProfileApplication_Profile_Profilereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_isModelLibrary__()
{
	return uML_Package_isModelLibrary__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_isModelLibrary__return()
{
	return uML_Package_isModelLibrary__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_isProfileApplied_Profile_Profile()
{
	return uML_Package_isProfileApplied_Profile_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_isProfileApplied_Profile_Profile_profile()
{
	return uML_Package_isProfileApplied_Profile_Profile_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_isProfileApplied_Profile_Profilereturn()
{
	return uML_Package_isProfileApplied_Profile_Profilereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_makesVisible_NamedElement_NamedElement()
{
	return uML_Package_makesVisible_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_makesVisible_NamedElement_NamedElement_el()
{
	return uML_Package_makesVisible_NamedElement_NamedElement_el;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_makesVisible_pre()
{
	return uML_Package_makesVisible_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_makesVisible_result()
{
	return uML_Package_makesVisible_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_makesVisible_spec()
{
	return uML_Package_makesVisible_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_mustBeOwned__()
{
	return uML_Package_mustBeOwned__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_mustBeOwned_result()
{
	return uML_Package_mustBeOwned_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_mustBeOwned_spec()
{
	return uML_Package_mustBeOwned_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_nestedPackage()
{
	return uML_Package_nestedPackage;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_nestedPackage__()
{
	return uML_Package_nestedPackage__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_nestedPackage_result()
{
	return uML_Package_nestedPackage_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_nestedPackage_spec()
{
	return uML_Package_nestedPackage_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_nestingPackage()
{
	return uML_Package_nestingPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_ownedStereotype()
{
	return uML_Package_ownedStereotype;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_ownedStereotype__()
{
	return uML_Package_ownedStereotype__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_ownedStereotype_result()
{
	return uML_Package_ownedStereotype_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_ownedStereotype_spec()
{
	return uML_Package_ownedStereotype_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_ownedType()
{
	return uML_Package_ownedType;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_ownedType__()
{
	return uML_Package_ownedType__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_ownedType_result()
{
	return uML_Package_ownedType_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_ownedType_spec()
{
	return uML_Package_ownedType_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_packageMerge()
{
	return uML_Package_packageMerge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_packagedElement()
{
	return uML_Package_packagedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_profileApplication()
{
	return uML_Package_profileApplication;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_unapplyProfile_Profile_Profile()
{
	return uML_Package_unapplyProfile_Profile_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_unapplyProfile_Profile_Profile_profile()
{
	return uML_Package_unapplyProfile_Profile_Profile_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_unapplyProfile_Profile_Profilereturn()
{
	return uML_Package_unapplyProfile_Profile_Profilereturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_visibleMembers__()
{
	return uML_Package_visibleMembers__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_visibleMembers_result()
{
	return uML_Package_visibleMembers_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_visibleMembers_spec()
{
	return uML_Package_visibleMembers_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PackageableElement()
{
	return uML_PackageableElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PackageableElement_namespace_needs_visibility()
{
	return uML_PackageableElement_namespace_needs_visibility;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageableElement_visibility()
{
	return uML_PackageableElement_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Parameter()
{
	return uML_Parameter;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ParameterDirectionKind()
{
	return uML_ParameterDirectionKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_in()
{
	return uML_ParameterDirectionKind_in;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_inout()
{
	return uML_ParameterDirectionKind_inout;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_out()
{
	return uML_ParameterDirectionKind_out;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_return()
{
	return uML_ParameterDirectionKind_return;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ParameterEffectKind()
{
	return uML_ParameterEffectKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_create()
{
	return uML_ParameterEffectKind_create;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_delete()
{
	return uML_ParameterEffectKind_delete;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_read()
{
	return uML_ParameterEffectKind_read;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_update()
{
	return uML_ParameterEffectKind_update;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ParameterSet()
{
	return uML_ParameterSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterSet_condition()
{
	return uML_ParameterSet_condition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterSet_input()
{
	return uML_ParameterSet_input;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterSet_parameter()
{
	return uML_ParameterSet_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterSet_same_parameterized_entity()
{
	return uML_ParameterSet_same_parameterized_entity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterSet_two_parameter_sets()
{
	return uML_ParameterSet_two_parameter_sets;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_connector_end()
{
	return uML_Parameter_connector_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_default()
{
	return uML_Parameter_default;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_defaultValue()
{
	return uML_Parameter_defaultValue;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_default__()
{
	return uML_Parameter_default__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_default_result()
{
	return uML_Parameter_default_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_default_spec()
{
	return uML_Parameter_default_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_direction()
{
	return uML_Parameter_direction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_effect()
{
	return uML_Parameter_effect;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_in_and_out()
{
	return uML_Parameter_in_and_out;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_isException()
{
	return uML_Parameter_isException;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_isSetDefault__()
{
	return uML_Parameter_isSetDefault__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_isSetDefault__return()
{
	return uML_Parameter_isSetDefault__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_isStream()
{
	return uML_Parameter_isStream;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_not_exception()
{
	return uML_Parameter_not_exception;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_object_effect()
{
	return uML_Parameter_object_effect;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_operation()
{
	return uML_Parameter_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_parameterSet()
{
	return uML_Parameter_parameterSet;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_reentrant_behaviors()
{
	return uML_Parameter_reentrant_behaviors;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setBooleanDefaultValue_Boolean_Boolean()
{
	return uML_Parameter_setBooleanDefaultValue_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value()
{
	return uML_Parameter_setBooleanDefaultValue_Boolean_Boolean_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setDefault_String_String()
{
	return uML_Parameter_setDefault_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setDefault_String_String_newDefault()
{
	return uML_Parameter_setDefault_String_String_newDefault;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setIntegerDefaultValue_Integer_Integer()
{
	return uML_Parameter_setIntegerDefaultValue_Integer_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setIntegerDefaultValue_Integer_Integer_value()
{
	return uML_Parameter_setIntegerDefaultValue_Integer_Integer_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setNullDefaultValue__()
{
	return uML_Parameter_setNullDefaultValue__;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setRealDefaultValue_Real_Real()
{
	return uML_Parameter_setRealDefaultValue_Real_Real;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setRealDefaultValue_Real_Real_value()
{
	return uML_Parameter_setRealDefaultValue_Real_Real_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setStringDefaultValue_String_String()
{
	return uML_Parameter_setStringDefaultValue_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setStringDefaultValue_String_String_value()
{
	return uML_Parameter_setStringDefaultValue_String_String_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural()
{
	return uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value()
{
	return uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_stream_and_exception()
{
	return uML_Parameter_stream_and_exception;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_unsetDefault__()
{
	return uML_Parameter_unsetDefault__;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ParameterableElement()
{
	return uML_ParameterableElement;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement()
{
	return uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p()
{
	return uML_ParameterableElement_isCompatibleWith_ParameterableElement_ParameterableElement_p;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_result()
{
	return uML_ParameterableElement_isCompatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_spec()
{
	return uML_ParameterableElement_isCompatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ParameterableElement_isTemplateParameter__()
{
	return uML_ParameterableElement_isTemplateParameter__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ParameterableElement_isTemplateParameter_result()
{
	return uML_ParameterableElement_isTemplateParameter_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterableElement_isTemplateParameter_spec()
{
	return uML_ParameterableElement_isTemplateParameter_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterableElement_owningTemplateParameter()
{
	return uML_ParameterableElement_owningTemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterableElement_templateParameter()
{
	return uML_ParameterableElement_templateParameter;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PartDecomposition()
{
	return uML_PartDecomposition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PartDecomposition_assume()
{
	return uML_PartDecomposition_assume;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PartDecomposition_commutativity_of_decomposition()
{
	return uML_PartDecomposition_commutativity_of_decomposition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PartDecomposition_parts_of_internal_structures()
{
	return uML_PartDecomposition_parts_of_internal_structures;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Pin()
{
	return uML_Pin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pin_control_pins()
{
	return uML_Pin_control_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pin_isControl()
{
	return uML_Pin_isControl;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pin_not_unique()
{
	return uML_Pin_not_unique;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Port()
{
	return uML_Port;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_basicProvided__()
{
	return uML_Port_basicProvided__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_basicProvided_result()
{
	return uML_Port_basicProvided_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_basicProvided_spec()
{
	return uML_Port_basicProvided_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_basicRequired__()
{
	return uML_Port_basicRequired__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_basicRequired_result()
{
	return uML_Port_basicRequired_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_basicRequired_spec()
{
	return uML_Port_basicRequired_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_default_value()
{
	return uML_Port_default_value;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_encapsulated_owner()
{
	return uML_Port_encapsulated_owner;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_isBehavior()
{
	return uML_Port_isBehavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_isConjugated()
{
	return uML_Port_isConjugated;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_isService()
{
	return uML_Port_isService;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_port_aggregation()
{
	return uML_Port_port_aggregation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_protocol()
{
	return uML_Port_protocol;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_provided()
{
	return uML_Port_provided;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_provided__()
{
	return uML_Port_provided__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_provided_result()
{
	return uML_Port_provided_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_provided_spec()
{
	return uML_Port_provided_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_redefinedPort()
{
	return uML_Port_redefinedPort;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_required()
{
	return uML_Port_required;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_required__()
{
	return uML_Port_required__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_required_result()
{
	return uML_Port_required_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_required_spec()
{
	return uML_Port_required_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PrimitiveType()
{
	return uML_PrimitiveType;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Profile()
{
	return uML_Profile;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProfileApplication()
{
	return uML_ProfileApplication;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProfileApplication_appliedProfile()
{
	return uML_ProfileApplication_appliedProfile;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProfileApplication_applyingPackage()
{
	return uML_ProfileApplication_applyingPackage;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement()
{
	return uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement()
{
	return uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElement_namedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn()
{
	return uML_ProfileApplication_getAppliedDefinition_NamedElement_NamedElementreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition__()
{
	return uML_ProfileApplication_getAppliedDefinition__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition__return()
{
	return uML_ProfileApplication_getAppliedDefinition__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProfileApplication_isStrict()
{
	return uML_ProfileApplication_isStrict;
}
std::shared_ptr<uml::PrimitiveType> UMLPackageImpl::get_UML_Profile_EMap_EJavaObject_EJavaObject()
{
	return uML_Profile_EMap_EJavaObject_EJavaObject;
}
std::shared_ptr<uml::PrimitiveType> UMLPackageImpl::get_UML_Profile_EMap_EString_EString()
{
	return uML_Profile_EMap_EString_EString;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_create_Classifier_Classifier()
{
	return uML_Profile_create_Classifier_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_create_Classifier_Classifier_classifier()
{
	return uML_Profile_create_Classifier_Classifier_classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_create_Classifier_Classifierreturn()
{
	return uML_Profile_create_Classifier_Classifierreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_define__()
{
	return uML_Profile_define__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_define__return()
{
	return uML_Profile_define__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getDefinition_NamedElement_NamedElement()
{
	return uML_Profile_getDefinition_NamedElement_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getDefinition_NamedElement_NamedElement_namedElement()
{
	return uML_Profile_getDefinition_NamedElement_NamedElement_namedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getDefinition_NamedElement_NamedElementreturn()
{
	return uML_Profile_getDefinition_NamedElement_NamedElementreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getDefinition__()
{
	return uML_Profile_getDefinition__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getDefinition__return()
{
	return uML_Profile_getDefinition__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getOwnedExtensions_Boolean_Boolean()
{
	return uML_Profile_getOwnedExtensions_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly()
{
	return uML_Profile_getOwnedExtensions_Boolean_Boolean_requiredOnly;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getOwnedExtensions_Boolean_Booleanreturn()
{
	return uML_Profile_getOwnedExtensions_Boolean_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getReferencedMetaclasses__()
{
	return uML_Profile_getReferencedMetaclasses__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getReferencedMetaclasses__return()
{
	return uML_Profile_getReferencedMetaclasses__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getReferencedMetamodels__()
{
	return uML_Profile_getReferencedMetamodels__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getReferencedMetamodels__return()
{
	return uML_Profile_getReferencedMetamodels__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_isDefined__()
{
	return uML_Profile_isDefined__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_isDefined__return()
{
	return uML_Profile_isDefined__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Profile_metaclassReference()
{
	return uML_Profile_metaclassReference;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Profile_metaclass_reference_not_specialized()
{
	return uML_Profile_metaclass_reference_not_specialized;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Profile_metamodelReference()
{
	return uML_Profile_metamodelReference;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Profile_references_same_metamodel()
{
	return uML_Profile_references_same_metamodel;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Property()
{
	return uML_Property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_aggregation()
{
	return uML_Property_aggregation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_association()
{
	return uML_Property_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_associationEnd()
{
	return uML_Property_associationEnd;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_binding_to_attribute()
{
	return uML_Property_binding_to_attribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_class()
{
	return uML_Property_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_datatype()
{
	return uML_Property_datatype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_default()
{
	return uML_Property_default;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_defaultValue()
{
	return uML_Property_defaultValue;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_deployment_target()
{
	return uML_Property_deployment_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_derived_union_is_derived()
{
	return uML_Property_derived_union_is_derived;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_derived_union_is_read_only()
{
	return uML_Property_derived_union_is_read_only;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_getDefault__()
{
	return uML_Property_getDefault__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_getDefault_result()
{
	return uML_Property_getDefault_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_getOtherEnd__()
{
	return uML_Property_getOtherEnd__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_getOtherEnd__return()
{
	return uML_Property_getOtherEnd__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_interface()
{
	return uML_Property_interface;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isAttribute__()
{
	return uML_Property_isAttribute__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isAttribute_result()
{
	return uML_Property_isAttribute_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isAttribute_spec()
{
	return uML_Property_isAttribute_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isCompatibleWith_ParameterableElement_ParameterableElement()
{
	return uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p()
{
	return uML_Property_isCompatibleWith_ParameterableElement_ParameterableElement_p;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isCompatibleWith_result()
{
	return uML_Property_isCompatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isCompatibleWith_spec()
{
	return uML_Property_isCompatibleWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isComposite()
{
	return uML_Property_isComposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isComposite__()
{
	return uML_Property_isComposite__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isComposite_result()
{
	return uML_Property_isComposite_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isComposite_spec()
{
	return uML_Property_isComposite_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_Property_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_Property_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isConsistentWith_pre()
{
	return uML_Property_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isConsistentWith_result()
{
	return uML_Property_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isConsistentWith_spec()
{
	return uML_Property_isConsistentWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isDerived()
{
	return uML_Property_isDerived;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isDerivedUnion()
{
	return uML_Property_isDerivedUnion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isID()
{
	return uML_Property_isID;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isNavigable__()
{
	return uML_Property_isNavigable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isNavigable_result()
{
	return uML_Property_isNavigable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isNavigable_spec()
{
	return uML_Property_isNavigable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isSetDefault__()
{
	return uML_Property_isSetDefault__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isSetDefault__return()
{
	return uML_Property_isSetDefault__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_multiplicity_of_composite()
{
	return uML_Property_multiplicity_of_composite;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_opposite()
{
	return uML_Property_opposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_opposite__()
{
	return uML_Property_opposite__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_opposite_result()
{
	return uML_Property_opposite_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_opposite_spec()
{
	return uML_Property_opposite_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_owningAssociation()
{
	return uML_Property_owningAssociation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_qualified_is_association_end()
{
	return uML_Property_qualified_is_association_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_qualifier()
{
	return uML_Property_qualifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_redefinedProperty()
{
	return uML_Property_redefinedProperty;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_redefined_property_inherited()
{
	return uML_Property_redefined_property_inherited;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setBooleanDefaultValue_Boolean_Boolean()
{
	return uML_Property_setBooleanDefaultValue_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setBooleanDefaultValue_Boolean_Boolean_value()
{
	return uML_Property_setBooleanDefaultValue_Boolean_Boolean_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setDefault_String_String()
{
	return uML_Property_setDefault_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setDefault_String_String_newDefault()
{
	return uML_Property_setDefault_String_String_newDefault;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setIntegerDefaultValue_Integer_Integer()
{
	return uML_Property_setIntegerDefaultValue_Integer_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setIntegerDefaultValue_Integer_Integer_value()
{
	return uML_Property_setIntegerDefaultValue_Integer_Integer_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setIsComposite_Boolean_Boolean()
{
	return uML_Property_setIsComposite_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setIsComposite_Boolean_Boolean_newIsComposite()
{
	return uML_Property_setIsComposite_Boolean_Boolean_newIsComposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setIsNavigable_Boolean_Boolean()
{
	return uML_Property_setIsNavigable_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setIsNavigable_Boolean_Boolean_isNavigable()
{
	return uML_Property_setIsNavigable_Boolean_Boolean_isNavigable;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setNullDefaultValue__()
{
	return uML_Property_setNullDefaultValue__;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setOpposite_Property_Property()
{
	return uML_Property_setOpposite_Property_Property;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setOpposite_Property_Property_newOpposite()
{
	return uML_Property_setOpposite_Property_Property_newOpposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setRealDefaultValue_Real_Real()
{
	return uML_Property_setRealDefaultValue_Real_Real;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setRealDefaultValue_Real_Real_value()
{
	return uML_Property_setRealDefaultValue_Real_Real_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setStringDefaultValue_String_String()
{
	return uML_Property_setStringDefaultValue_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setStringDefaultValue_String_String_value()
{
	return uML_Property_setStringDefaultValue_String_String_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural()
{
	return uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value()
{
	return uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UnlimitedNatural_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_subsettedProperty()
{
	return uML_Property_subsettedProperty;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsetted_property_names()
{
	return uML_Property_subsetted_property_names;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_subsettingContext__()
{
	return uML_Property_subsettingContext__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_subsettingContext_result()
{
	return uML_Property_subsettingContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsettingContext_spec()
{
	return uML_Property_subsettingContext_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsetting_context_conforms()
{
	return uML_Property_subsetting_context_conforms;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsetting_rules()
{
	return uML_Property_subsetting_rules;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_type_of_opposite_end()
{
	return uML_Property_type_of_opposite_end;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_unsetDefault__()
{
	return uML_Property_unsetDefault__;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProtocolConformance()
{
	return uML_ProtocolConformance;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolConformance_generalMachine()
{
	return uML_ProtocolConformance_generalMachine;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolConformance_specificMachine()
{
	return uML_ProtocolConformance_specificMachine;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProtocolStateMachine()
{
	return uML_ProtocolStateMachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_classifier_context()
{
	return uML_ProtocolStateMachine_classifier_context;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolStateMachine_conformance()
{
	return uML_ProtocolStateMachine_conformance;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_deep_or_shallow_history()
{
	return uML_ProtocolStateMachine_deep_or_shallow_history;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_entry_exit_do()
{
	return uML_ProtocolStateMachine_entry_exit_do;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_protocol_transitions()
{
	return uML_ProtocolStateMachine_protocol_transitions;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProtocolTransition()
{
	return uML_ProtocolTransition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_associated_actions()
{
	return uML_ProtocolTransition_associated_actions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_belongs_to_psm()
{
	return uML_ProtocolTransition_belongs_to_psm;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolTransition_postCondition()
{
	return uML_ProtocolTransition_postCondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolTransition_preCondition()
{
	return uML_ProtocolTransition_preCondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolTransition_referred()
{
	return uML_ProtocolTransition_referred;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ProtocolTransition_referred__()
{
	return uML_ProtocolTransition_referred__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProtocolTransition_referred_result()
{
	return uML_ProtocolTransition_referred_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_referred_spec()
{
	return uML_ProtocolTransition_referred_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_refers_to_operation()
{
	return uML_ProtocolTransition_refers_to_operation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Pseudostate()
{
	return uML_Pseudostate;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_PseudostateKind()
{
	return uML_PseudostateKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_choice()
{
	return uML_PseudostateKind_choice;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_deepHistory()
{
	return uML_PseudostateKind_deepHistory;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_entryPoint()
{
	return uML_PseudostateKind_entryPoint;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_exitPoint()
{
	return uML_PseudostateKind_exitPoint;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_fork()
{
	return uML_PseudostateKind_fork;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_initial()
{
	return uML_PseudostateKind_initial;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_join()
{
	return uML_PseudostateKind_join;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_junction()
{
	return uML_PseudostateKind_junction;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_shallowHistory()
{
	return uML_PseudostateKind_shallowHistory;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_terminate()
{
	return uML_PseudostateKind_terminate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_choice_vertex()
{
	return uML_Pseudostate_choice_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_fork_vertex()
{
	return uML_Pseudostate_fork_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_history_vertices()
{
	return uML_Pseudostate_history_vertices;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_initial_vertex()
{
	return uML_Pseudostate_initial_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_join_vertex()
{
	return uML_Pseudostate_join_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_junction_vertex()
{
	return uML_Pseudostate_junction_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pseudostate_kind()
{
	return uML_Pseudostate_kind;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_outgoing_from_initial()
{
	return uML_Pseudostate_outgoing_from_initial;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pseudostate_state()
{
	return uML_Pseudostate_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pseudostate_stateMachine()
{
	return uML_Pseudostate_stateMachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_transitions_incoming()
{
	return uML_Pseudostate_transitions_incoming;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_transitions_outgoing()
{
	return uML_Pseudostate_transitions_outgoing;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_QualifierValue()
{
	return uML_QualifierValue;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_QualifierValue_multiplicity_of_qualifier()
{
	return uML_QualifierValue_multiplicity_of_qualifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_QualifierValue_qualifier()
{
	return uML_QualifierValue_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_QualifierValue_qualifier_attribute()
{
	return uML_QualifierValue_qualifier_attribute;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_QualifierValue_type_of_qualifier()
{
	return uML_QualifierValue_type_of_qualifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_QualifierValue_value()
{
	return uML_QualifierValue_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RaiseExceptionAction()
{
	return uML_RaiseExceptionAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RaiseExceptionAction_exception()
{
	return uML_RaiseExceptionAction_exception;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadExtentAction()
{
	return uML_ReadExtentAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadExtentAction_classifier()
{
	return uML_ReadExtentAction_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadExtentAction_multiplicity_of_result()
{
	return uML_ReadExtentAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadExtentAction_result()
{
	return uML_ReadExtentAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadExtentAction_type_is_classifier()
{
	return uML_ReadExtentAction_type_is_classifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction()
{
	return uML_ReadIsClassifiedObjectAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_boolean_result()
{
	return uML_ReadIsClassifiedObjectAction_boolean_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_classifier()
{
	return uML_ReadIsClassifiedObjectAction_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_isDirect()
{
	return uML_ReadIsClassifiedObjectAction_isDirect;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_multiplicity_of_input()
{
	return uML_ReadIsClassifiedObjectAction_multiplicity_of_input;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_multiplicity_of_output()
{
	return uML_ReadIsClassifiedObjectAction_multiplicity_of_output;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_no_type()
{
	return uML_ReadIsClassifiedObjectAction_no_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_object()
{
	return uML_ReadIsClassifiedObjectAction_object;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_result()
{
	return uML_ReadIsClassifiedObjectAction_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadLinkAction()
{
	return uML_ReadLinkAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_compatible_multiplicity()
{
	return uML_ReadLinkAction_compatible_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_navigable_open_end()
{
	return uML_ReadLinkAction_navigable_open_end;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_one_open_end()
{
	return uML_ReadLinkAction_one_open_end;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ReadLinkAction_openEnd__()
{
	return uML_ReadLinkAction_openEnd__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ReadLinkAction_openEnd_result()
{
	return uML_ReadLinkAction_openEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_openEnd_spec()
{
	return uML_ReadLinkAction_openEnd_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkAction_result()
{
	return uML_ReadLinkAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_type_and_ordering()
{
	return uML_ReadLinkAction_type_and_ordering;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_visibility()
{
	return uML_ReadLinkAction_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadLinkObjectEndAction()
{
	return uML_ReadLinkObjectEndAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_association_of_association()
{
	return uML_ReadLinkObjectEndAction_association_of_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_end()
{
	return uML_ReadLinkObjectEndAction_end;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_ends_of_association()
{
	return uML_ReadLinkObjectEndAction_ends_of_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_multiplicity_of_object()
{
	return uML_ReadLinkObjectEndAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_multiplicity_of_result()
{
	return uML_ReadLinkObjectEndAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_object()
{
	return uML_ReadLinkObjectEndAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_property()
{
	return uML_ReadLinkObjectEndAction_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_result()
{
	return uML_ReadLinkObjectEndAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_type_of_object()
{
	return uML_ReadLinkObjectEndAction_type_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_type_of_result()
{
	return uML_ReadLinkObjectEndAction_type_of_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction()
{
	return uML_ReadLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_association_of_association()
{
	return uML_ReadLinkObjectEndQualifierAction_association_of_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_ends_of_association()
{
	return uML_ReadLinkObjectEndQualifierAction_ends_of_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_multiplicity_of_object()
{
	return uML_ReadLinkObjectEndQualifierAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier()
{
	return uML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_multiplicity_of_result()
{
	return uML_ReadLinkObjectEndQualifierAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_object()
{
	return uML_ReadLinkObjectEndQualifierAction_object;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_qualifier()
{
	return uML_ReadLinkObjectEndQualifierAction_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_qualifier_attribute()
{
	return uML_ReadLinkObjectEndQualifierAction_qualifier_attribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_result()
{
	return uML_ReadLinkObjectEndQualifierAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_same_type()
{
	return uML_ReadLinkObjectEndQualifierAction_same_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_type_of_object()
{
	return uML_ReadLinkObjectEndQualifierAction_type_of_object;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadSelfAction()
{
	return uML_ReadSelfAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_contained()
{
	return uML_ReadSelfAction_contained;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_multiplicity()
{
	return uML_ReadSelfAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_not_static()
{
	return uML_ReadSelfAction_not_static;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadSelfAction_result()
{
	return uML_ReadSelfAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_type()
{
	return uML_ReadSelfAction_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadStructuralFeatureAction()
{
	return uML_ReadStructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadStructuralFeatureAction_multiplicity()
{
	return uML_ReadStructuralFeatureAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadStructuralFeatureAction_result()
{
	return uML_ReadStructuralFeatureAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadStructuralFeatureAction_type_and_ordering()
{
	return uML_ReadStructuralFeatureAction_type_and_ordering;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadVariableAction()
{
	return uML_ReadVariableAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadVariableAction_compatible_multiplicity()
{
	return uML_ReadVariableAction_compatible_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadVariableAction_result()
{
	return uML_ReadVariableAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadVariableAction_type_and_ordering()
{
	return uML_ReadVariableAction_type_and_ordering;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Realization()
{
	return uML_Realization;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Reception()
{
	return uML_Reception;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Reception_same_name_as_signal()
{
	return uML_Reception_same_name_as_signal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Reception_same_structure_as_signal()
{
	return uML_Reception_same_structure_as_signal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Reception_signal()
{
	return uML_Reception_signal;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReclassifyObjectAction()
{
	return uML_ReclassifyObjectAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReclassifyObjectAction_classifier_not_abstract()
{
	return uML_ReclassifyObjectAction_classifier_not_abstract;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReclassifyObjectAction_input_pin()
{
	return uML_ReclassifyObjectAction_input_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_isReplaceAll()
{
	return uML_ReclassifyObjectAction_isReplaceAll;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReclassifyObjectAction_multiplicity()
{
	return uML_ReclassifyObjectAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_newClassifier()
{
	return uML_ReclassifyObjectAction_newClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_object()
{
	return uML_ReclassifyObjectAction_object;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_oldClassifier()
{
	return uML_ReclassifyObjectAction_oldClassifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RedefinableElement()
{
	return uML_RedefinableElement;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_RedefinableElement_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_pre()
{
	return uML_RedefinableElement_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_result()
{
	return uML_RedefinableElement_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_spec()
{
	return uML_RedefinableElement_isConsistentWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableElement_isLeaf()
{
	return uML_RedefinableElement_isLeaf;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement()
{
	return uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement()
{
	return uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_result()
{
	return uML_RedefinableElement_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_spec()
{
	return uML_RedefinableElement_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_non_leaf_redefinition()
{
	return uML_RedefinableElement_non_leaf_redefinition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableElement_redefinedElement()
{
	return uML_RedefinableElement_redefinedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableElement_redefinitionContext()
{
	return uML_RedefinableElement_redefinitionContext;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_redefinition_consistent()
{
	return uML_RedefinableElement_redefinition_consistent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_redefinition_context_valid()
{
	return uML_RedefinableElement_redefinition_context_valid;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RedefinableTemplateSignature()
{
	return uML_RedefinableTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableTemplateSignature_classifier()
{
	return uML_RedefinableTemplateSignature_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableTemplateSignature_extendedSignature()
{
	return uML_RedefinableTemplateSignature_extendedSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter()
{
	return uML_RedefinableTemplateSignature_inheritedParameter;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter__()
{
	return uML_RedefinableTemplateSignature_inheritedParameter__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter_result()
{
	return uML_RedefinableTemplateSignature_inheritedParameter_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter_spec()
{
	return uML_RedefinableTemplateSignature_inheritedParameter_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_pre()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_result()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_spec()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_redefines_parents()
{
	return uML_RedefinableTemplateSignature_redefines_parents;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReduceAction()
{
	return uML_ReduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_collection()
{
	return uML_ReduceAction_collection;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReduceAction_input_type_is_collection()
{
	return uML_ReduceAction_input_type_is_collection;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_isOrdered()
{
	return uML_ReduceAction_isOrdered;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReduceAction_output_types_are_compatible()
{
	return uML_ReduceAction_output_types_are_compatible;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_reducer()
{
	return uML_ReduceAction_reducer;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReduceAction_reducer_inputs_output()
{
	return uML_ReduceAction_reducer_inputs_output;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_result()
{
	return uML_ReduceAction_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Region()
{
	return uML_Region;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_belongsToPSM__()
{
	return uML_Region_belongsToPSM__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_belongsToPSM_result()
{
	return uML_Region_belongsToPSM_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_belongsToPSM_spec()
{
	return uML_Region_belongsToPSM_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_containingStateMachine__()
{
	return uML_Region_containingStateMachine__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_containingStateMachine_result()
{
	return uML_Region_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_containingStateMachine_spec()
{
	return uML_Region_containingStateMachine_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_deep_history_vertex()
{
	return uML_Region_deep_history_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_extendedRegion()
{
	return uML_Region_extendedRegion;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_initial_vertex()
{
	return uML_Region_initial_vertex;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_Region_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_Region_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_isConsistentWith_pre()
{
	return uML_Region_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isConsistentWith_result()
{
	return uML_Region_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_isConsistentWith_spec()
{
	return uML_Region_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement()
{
	return uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement()
{
	return uML_Region_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_result()
{
	return uML_Region_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_spec()
{
	return uML_Region_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_owned()
{
	return uML_Region_owned;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_redefinitionContext()
{
	return uML_Region_redefinitionContext;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_redefinitionContext__()
{
	return uML_Region_redefinitionContext__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_redefinitionContext_result()
{
	return uML_Region_redefinitionContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_redefinitionContext_spec()
{
	return uML_Region_redefinitionContext_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_shallow_history_vertex()
{
	return uML_Region_shallow_history_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_state()
{
	return uML_Region_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_stateMachine()
{
	return uML_Region_stateMachine;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_subvertex()
{
	return uML_Region_subvertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_transition()
{
	return uML_Region_transition;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Relationship()
{
	return uML_Relationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Relationship_relatedElement()
{
	return uML_Relationship_relatedElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction()
{
	return uML_RemoveStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates()
{
	return uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction_removeAt()
{
	return uML_RemoveStructuralFeatureValueAction_removeAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction_removeAt_and_value()
{
	return uML_RemoveStructuralFeatureValueAction_removeAt_and_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RemoveVariableValueAction()
{
	return uML_RemoveVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveVariableValueAction_isRemoveDuplicates()
{
	return uML_RemoveVariableValueAction_isRemoveDuplicates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveVariableValueAction_removeAt()
{
	return uML_RemoveVariableValueAction_removeAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RemoveVariableValueAction_removeAt_and_value()
{
	return uML_RemoveVariableValueAction_removeAt_and_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReplyAction()
{
	return uML_ReplyAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReplyAction_event_on_reply_to_call_trigger()
{
	return uML_ReplyAction_event_on_reply_to_call_trigger;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReplyAction_pins_match_parameter()
{
	return uML_ReplyAction_pins_match_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReplyAction_replyToCall()
{
	return uML_ReplyAction_replyToCall;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReplyAction_replyValue()
{
	return uML_ReplyAction_replyValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReplyAction_returnInformation()
{
	return uML_ReplyAction_returnInformation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SendObjectAction()
{
	return uML_SendObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendObjectAction_request()
{
	return uML_SendObjectAction_request;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendObjectAction_target()
{
	return uML_SendObjectAction_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendObjectAction_type_target_pin()
{
	return uML_SendObjectAction_type_target_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SendSignalAction()
{
	return uML_SendSignalAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendSignalAction_number_order()
{
	return uML_SendSignalAction_number_order;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendSignalAction_signal()
{
	return uML_SendSignalAction_signal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendSignalAction_target()
{
	return uML_SendSignalAction_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendSignalAction_type_ordering_multiplicity()
{
	return uML_SendSignalAction_type_ordering_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendSignalAction_type_target_pin()
{
	return uML_SendSignalAction_type_target_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SequenceNode()
{
	return uML_SequenceNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SequenceNode_executableNode()
{
	return uML_SequenceNode_executableNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Signal()
{
	return uML_Signal;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SignalEvent()
{
	return uML_SignalEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SignalEvent_signal()
{
	return uML_SignalEvent_signal;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Signal_ownedAttribute()
{
	return uML_Signal_ownedAttribute;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Slot()
{
	return uML_Slot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Slot_definingFeature()
{
	return uML_Slot_definingFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Slot_owningInstance()
{
	return uML_Slot_owningInstance;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Slot_value()
{
	return uML_Slot_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StartClassifierBehaviorAction()
{
	return uML_StartClassifierBehaviorAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartClassifierBehaviorAction_multiplicity()
{
	return uML_StartClassifierBehaviorAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StartClassifierBehaviorAction_object()
{
	return uML_StartClassifierBehaviorAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartClassifierBehaviorAction_type_has_classifier()
{
	return uML_StartClassifierBehaviorAction_type_has_classifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StartObjectBehaviorAction()
{
	return uML_StartObjectBehaviorAction;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StartObjectBehaviorAction_behavior__()
{
	return uML_StartObjectBehaviorAction_behavior__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StartObjectBehaviorAction_behavior_result()
{
	return uML_StartObjectBehaviorAction_behavior_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_behavior_spec()
{
	return uML_StartObjectBehaviorAction_behavior_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StartObjectBehaviorAction_inputParameters__()
{
	return uML_StartObjectBehaviorAction_inputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StartObjectBehaviorAction_inputParameters_result()
{
	return uML_StartObjectBehaviorAction_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_inputParameters_spec()
{
	return uML_StartObjectBehaviorAction_inputParameters_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_multiplicity_of_object()
{
	return uML_StartObjectBehaviorAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_no_onport()
{
	return uML_StartObjectBehaviorAction_no_onport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StartObjectBehaviorAction_object()
{
	return uML_StartObjectBehaviorAction_object;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StartObjectBehaviorAction_outputParameters__()
{
	return uML_StartObjectBehaviorAction_outputParameters__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StartObjectBehaviorAction_outputParameters_result()
{
	return uML_StartObjectBehaviorAction_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_outputParameters_spec()
{
	return uML_StartObjectBehaviorAction_outputParameters_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_type_of_object()
{
	return uML_StartObjectBehaviorAction_type_of_object;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_State()
{
	return uML_State;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StateInvariant()
{
	return uML_StateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateInvariant_covered()
{
	return uML_StateInvariant_covered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateInvariant_invariant()
{
	return uML_StateInvariant_invariant;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StateMachine()
{
	return uML_StateMachine;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex()
{
	return uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1()
{
	return uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v1;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2()
{
	return uML_StateMachine_LCAState_Vertex_Vertex_Vertex_Vertex_v2;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCAState_result()
{
	return uML_StateMachine_LCAState_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_LCAState_spec()
{
	return uML_StateMachine_LCAState_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex()
{
	return uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1()
{
	return uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s1;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2()
{
	return uML_StateMachine_LCA_Vertex_Vertex_Vertex_Vertex_s2;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCA_result()
{
	return uML_StateMachine_LCA_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_LCA_spec()
{
	return uML_StateMachine_LCA_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex()
{
	return uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1()
{
	return uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s1;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2()
{
	return uML_StateMachine_ancestor_Vertex_Vertex_Vertex_Vertex_s2;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_ancestor_result()
{
	return uML_StateMachine_ancestor_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_ancestor_spec()
{
	return uML_StateMachine_ancestor_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_classifier_context()
{
	return uML_StateMachine_classifier_context;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_connectionPoint()
{
	return uML_StateMachine_connectionPoint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_connection_points()
{
	return uML_StateMachine_connection_points;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_context_classifier()
{
	return uML_StateMachine_context_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_extendedStateMachine()
{
	return uML_StateMachine_extendedStateMachine;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_StateMachine_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_result()
{
	return uML_StateMachine_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_spec()
{
	return uML_StateMachine_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement()
{
	return uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement()
{
	return uML_StateMachine_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_result()
{
	return uML_StateMachine_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_spec()
{
	return uML_StateMachine_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_method()
{
	return uML_StateMachine_method;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_region()
{
	return uML_StateMachine_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_submachineState()
{
	return uML_StateMachine_submachineState;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_composite_states()
{
	return uML_State_composite_states;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_connection()
{
	return uML_State_connection;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_connectionPoint()
{
	return uML_State_connectionPoint;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_containingStateMachine__()
{
	return uML_State_containingStateMachine__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_containingStateMachine_result()
{
	return uML_State_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_containingStateMachine_spec()
{
	return uML_State_containingStateMachine_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_deferrableTrigger()
{
	return uML_State_deferrableTrigger;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_destinations_or_sources_of_transitions()
{
	return uML_State_destinations_or_sources_of_transitions;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_doActivity()
{
	return uML_State_doActivity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_entry()
{
	return uML_State_entry;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_entry_or_exit()
{
	return uML_State_entry_or_exit;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_exit()
{
	return uML_State_exit;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isComposite()
{
	return uML_State_isComposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isComposite__()
{
	return uML_State_isComposite__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isComposite_result()
{
	return uML_State_isComposite_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isComposite_spec()
{
	return uML_State_isComposite_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_State_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_State_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isConsistentWith_pre()
{
	return uML_State_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isConsistentWith_result()
{
	return uML_State_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isConsistentWith_spec()
{
	return uML_State_isConsistentWith_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isOrthogonal()
{
	return uML_State_isOrthogonal;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isOrthogonal__()
{
	return uML_State_isOrthogonal__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isOrthogonal_result()
{
	return uML_State_isOrthogonal_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isOrthogonal_spec()
{
	return uML_State_isOrthogonal_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement()
{
	return uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement()
{
	return uML_State_isRedefinitionContextValid_RedefinableElement_RedefinableElement_redefinedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_result()
{
	return uML_State_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_spec()
{
	return uML_State_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isSimple()
{
	return uML_State_isSimple;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isSimple__()
{
	return uML_State_isSimple__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isSimple_result()
{
	return uML_State_isSimple_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isSimple_spec()
{
	return uML_State_isSimple_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isSubmachineState()
{
	return uML_State_isSubmachineState;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isSubmachineState__()
{
	return uML_State_isSubmachineState__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isSubmachineState_result()
{
	return uML_State_isSubmachineState_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isSubmachineState_spec()
{
	return uML_State_isSubmachineState_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_redefinedState()
{
	return uML_State_redefinedState;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_redefinitionContext()
{
	return uML_State_redefinitionContext;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_redefinitionContext__()
{
	return uML_State_redefinitionContext__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_redefinitionContext_result()
{
	return uML_State_redefinitionContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_redefinitionContext_spec()
{
	return uML_State_redefinitionContext_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_region()
{
	return uML_State_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_stateInvariant()
{
	return uML_State_stateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_submachine()
{
	return uML_State_submachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_submachine_or_regions()
{
	return uML_State_submachine_or_regions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_submachine_states()
{
	return uML_State_submachine_states;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Stereotype()
{
	return uML_Stereotype;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_associationEndOwnership()
{
	return uML_Stereotype_associationEndOwnership;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_base_property_multiplicity_multiple_extension()
{
	return uML_Stereotype_base_property_multiplicity_multiple_extension;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_base_property_multiplicity_single_extension()
{
	return uML_Stereotype_base_property_multiplicity_single_extension;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_base_property_upper_bound()
{
	return uML_Stereotype_base_property_upper_bound;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_binaryAssociationsOnly()
{
	return uML_Stereotype_binaryAssociationsOnly;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_containingProfile__()
{
	return uML_Stereotype_containingProfile__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_containingProfile_result()
{
	return uML_Stereotype_containingProfile_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_containingProfile_spec()
{
	return uML_Stereotype_containingProfile_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_Class_Boolean()
{
	return uML_Stereotype_createExtension_Class_Boolean_Class_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired()
{
	return uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_isRequired;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass()
{
	return uML_Stereotype_createExtension_Class_Boolean_Class_Boolean_metaclass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn()
{
	return uML_Stereotype_createExtension_Class_Boolean_Class_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String()
{
	return uML_Stereotype_createIcon_String_String;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_String_String()
{
	return uML_Stereotype_createIcon_String_String_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_String_String_content()
{
	return uML_Stereotype_createIcon_String_String_String_String_content;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_String_String_format()
{
	return uML_Stereotype_createIcon_String_String_String_String_format;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_String_Stringreturn()
{
	return uML_Stereotype_createIcon_String_String_String_Stringreturn;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_location()
{
	return uML_Stereotype_createIcon_String_String_location;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_Stringreturn()
{
	return uML_Stereotype_createIcon_String_Stringreturn;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_generalize()
{
	return uML_Stereotype_generalize;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getAllExtendedMetaclasses__()
{
	return uML_Stereotype_getAllExtendedMetaclasses__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getAllExtendedMetaclasses__return()
{
	return uML_Stereotype_getAllExtendedMetaclasses__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getDefinition__()
{
	return uML_Stereotype_getDefinition__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getDefinition__return()
{
	return uML_Stereotype_getDefinition__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getExtendedMetaclasses__()
{
	return uML_Stereotype_getExtendedMetaclasses__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getExtendedMetaclasses__return()
{
	return uML_Stereotype_getExtendedMetaclasses__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getKeyword_Boolean_Boolean()
{
	return uML_Stereotype_getKeyword_Boolean_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getKeyword_Boolean_Boolean_localize()
{
	return uML_Stereotype_getKeyword_Boolean_Boolean_localize;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getKeyword_Boolean_Booleanreturn()
{
	return uML_Stereotype_getKeyword_Boolean_Booleanreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getKeyword__()
{
	return uML_Stereotype_getKeyword__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getKeyword__return()
{
	return uML_Stereotype_getKeyword__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Stereotype_icon()
{
	return uML_Stereotype_icon;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_name_not_clash()
{
	return uML_Stereotype_name_not_clash;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Stereotype_profile()
{
	return uML_Stereotype_profile;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_profile__()
{
	return uML_Stereotype_profile__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_profile_result()
{
	return uML_Stereotype_profile_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_profile_spec()
{
	return uML_Stereotype_profile_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StringExpression()
{
	return uML_StringExpression;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StringExpression_operands()
{
	return uML_StringExpression_operands;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StringExpression_owningExpression()
{
	return uML_StringExpression_owningExpression;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StringExpression_stringValue__()
{
	return uML_StringExpression_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StringExpression_stringValue_result()
{
	return uML_StringExpression_stringValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StringExpression_stringValue_spec()
{
	return uML_StringExpression_stringValue_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StringExpression_subExpression()
{
	return uML_StringExpression_subExpression;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StringExpression_subexpressions()
{
	return uML_StringExpression_subexpressions;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuralFeature()
{
	return uML_StructuralFeature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuralFeatureAction()
{
	return uML_StructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_multiplicity()
{
	return uML_StructuralFeatureAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_not_static()
{
	return uML_StructuralFeatureAction_not_static;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuralFeatureAction_object()
{
	return uML_StructuralFeatureAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_object_type()
{
	return uML_StructuralFeatureAction_object_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_one_featuring_classifier()
{
	return uML_StructuralFeatureAction_one_featuring_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuralFeatureAction_structuralFeature()
{
	return uML_StructuralFeatureAction_structuralFeature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_visibility()
{
	return uML_StructuralFeatureAction_visibility;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuralFeature_isReadOnly()
{
	return uML_StructuralFeature_isReadOnly;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuredActivityNode()
{
	return uML_StructuredActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_activity()
{
	return uML_StructuredActivityNode_activity;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_allActions__()
{
	return uML_StructuredActivityNode_allActions__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_allActions_result()
{
	return uML_StructuredActivityNode_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_allActions_spec()
{
	return uML_StructuredActivityNode_allActions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_allOwnedNodes__()
{
	return uML_StructuredActivityNode_allOwnedNodes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_allOwnedNodes_result()
{
	return uML_StructuredActivityNode_allOwnedNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_allOwnedNodes_spec()
{
	return uML_StructuredActivityNode_allOwnedNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_containingActivity__()
{
	return uML_StructuredActivityNode_containingActivity__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_containingActivity_result()
{
	return uML_StructuredActivityNode_containingActivity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_containingActivity_spec()
{
	return uML_StructuredActivityNode_containingActivity_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_edge()
{
	return uML_StructuredActivityNode_edge;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_edges()
{
	return uML_StructuredActivityNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_input_pin_edges()
{
	return uML_StructuredActivityNode_input_pin_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_mustIsolate()
{
	return uML_StructuredActivityNode_mustIsolate;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_node()
{
	return uML_StructuredActivityNode_node;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_output_pin_edges()
{
	return uML_StructuredActivityNode_output_pin_edges;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_sourceNodes__()
{
	return uML_StructuredActivityNode_sourceNodes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_sourceNodes_result()
{
	return uML_StructuredActivityNode_sourceNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_sourceNodes_spec()
{
	return uML_StructuredActivityNode_sourceNodes_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_structuredNodeInput()
{
	return uML_StructuredActivityNode_structuredNodeInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_structuredNodeOutput()
{
	return uML_StructuredActivityNode_structuredNodeOutput;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_targetNodes__()
{
	return uML_StructuredActivityNode_targetNodes__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_targetNodes_result()
{
	return uML_StructuredActivityNode_targetNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_targetNodes_spec()
{
	return uML_StructuredActivityNode_targetNodes_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_variable()
{
	return uML_StructuredActivityNode_variable;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuredClassifier()
{
	return uML_StructuredClassifier;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredClassifier_allRoles__()
{
	return uML_StructuredClassifier_allRoles__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_allRoles_result()
{
	return uML_StructuredClassifier_allRoles_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredClassifier_allRoles_spec()
{
	return uML_StructuredClassifier_allRoles_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNatural_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_String_Type_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_ownedAttribute()
{
	return uML_StructuredClassifier_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_ownedConnector()
{
	return uML_StructuredClassifier_ownedConnector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_part()
{
	return uML_StructuredClassifier_part;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredClassifier_part__()
{
	return uML_StructuredClassifier_part__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_part_result()
{
	return uML_StructuredClassifier_part_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredClassifier_part_spec()
{
	return uML_StructuredClassifier_part_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_role()
{
	return uML_StructuredClassifier_role;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Substitution()
{
	return uML_Substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Substitution_contract()
{
	return uML_Substitution_contract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Substitution_substitutingClassifier()
{
	return uML_Substitution_substitutingClassifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateBinding()
{
	return uML_TemplateBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateBinding_boundElement()
{
	return uML_TemplateBinding_boundElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateBinding_one_parameter_substitution()
{
	return uML_TemplateBinding_one_parameter_substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateBinding_parameterSubstitution()
{
	return uML_TemplateBinding_parameterSubstitution;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateBinding_parameter_substitution_formal()
{
	return uML_TemplateBinding_parameter_substitution_formal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateBinding_signature()
{
	return uML_TemplateBinding_signature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateParameter()
{
	return uML_TemplateParameter;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateParameterSubstitution()
{
	return uML_TemplateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_actual()
{
	return uML_TemplateParameterSubstitution_actual;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_formal()
{
	return uML_TemplateParameterSubstitution_formal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateParameterSubstitution_must_be_compatible()
{
	return uML_TemplateParameterSubstitution_must_be_compatible;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_ownedActual()
{
	return uML_TemplateParameterSubstitution_ownedActual;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_templateBinding()
{
	return uML_TemplateParameterSubstitution_templateBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_default()
{
	return uML_TemplateParameter_default;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateParameter_must_be_compatible()
{
	return uML_TemplateParameter_must_be_compatible;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_ownedDefault()
{
	return uML_TemplateParameter_ownedDefault;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_ownedParameteredElement()
{
	return uML_TemplateParameter_ownedParameteredElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_parameteredElement()
{
	return uML_TemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_signature()
{
	return uML_TemplateParameter_signature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateSignature()
{
	return uML_TemplateSignature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateSignature_own_elements()
{
	return uML_TemplateSignature_own_elements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateSignature_ownedParameter()
{
	return uML_TemplateSignature_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateSignature_parameter()
{
	return uML_TemplateSignature_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateSignature_template()
{
	return uML_TemplateSignature_template;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateSignature_unique_parameters()
{
	return uML_TemplateSignature_unique_parameters;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateableElement()
{
	return uML_TemplateableElement;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_TemplateableElement_isTemplate__()
{
	return uML_TemplateableElement_isTemplate__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_TemplateableElement_isTemplate_result()
{
	return uML_TemplateableElement_isTemplate_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateableElement_isTemplate_spec()
{
	return uML_TemplateableElement_isTemplate_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateableElement_ownedTemplateSignature()
{
	return uML_TemplateableElement_ownedTemplateSignature;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_TemplateableElement_parameterableElements__()
{
	return uML_TemplateableElement_parameterableElements__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_TemplateableElement_parameterableElements_result()
{
	return uML_TemplateableElement_parameterableElements_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateableElement_parameterableElements_spec()
{
	return uML_TemplateableElement_parameterableElements_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateableElement_templateBinding()
{
	return uML_TemplateableElement_templateBinding;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TestIdentityAction()
{
	return uML_TestIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TestIdentityAction_first()
{
	return uML_TestIdentityAction_first;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TestIdentityAction_multiplicity()
{
	return uML_TestIdentityAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TestIdentityAction_no_type()
{
	return uML_TestIdentityAction_no_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TestIdentityAction_result()
{
	return uML_TestIdentityAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TestIdentityAction_result_is_boolean()
{
	return uML_TestIdentityAction_result_is_boolean;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TestIdentityAction_second()
{
	return uML_TestIdentityAction_second;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeConstraint()
{
	return uML_TimeConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeConstraint_firstEvent()
{
	return uML_TimeConstraint_firstEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TimeConstraint_has_one_constrainedElement()
{
	return uML_TimeConstraint_has_one_constrainedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeConstraint_specification()
{
	return uML_TimeConstraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeEvent()
{
	return uML_TimeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeEvent_isRelative()
{
	return uML_TimeEvent_isRelative;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeEvent_when()
{
	return uML_TimeEvent_when;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TimeEvent_when_non_negative()
{
	return uML_TimeEvent_when_non_negative;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeExpression()
{
	return uML_TimeExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeExpression_expr()
{
	return uML_TimeExpression_expr;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TimeExpression_no_expr_requires_observation()
{
	return uML_TimeExpression_no_expr_requires_observation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeExpression_observation()
{
	return uML_TimeExpression_observation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_TimeExpression_stringValue__()
{
	return uML_TimeExpression_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_TimeExpression_stringValue__return()
{
	return uML_TimeExpression_stringValue__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeInterval()
{
	return uML_TimeInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeInterval_max()
{
	return uML_TimeInterval_max;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeInterval_min()
{
	return uML_TimeInterval_min;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeObservation()
{
	return uML_TimeObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeObservation_event()
{
	return uML_TimeObservation_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeObservation_firstEvent()
{
	return uML_TimeObservation_firstEvent;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Transition()
{
	return uML_Transition;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_TransitionKind()
{
	return uML_TransitionKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_TransitionKind_external()
{
	return uML_TransitionKind_external;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_TransitionKind_internal()
{
	return uML_TransitionKind_internal;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_TransitionKind_local()
{
	return uML_TransitionKind_local;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_container()
{
	return uML_Transition_container;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Transition_containingStateMachine__()
{
	return uML_Transition_containingStateMachine__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_containingStateMachine_result()
{
	return uML_Transition_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_containingStateMachine_spec()
{
	return uML_Transition_containingStateMachine_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_effect()
{
	return uML_Transition_effect;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_fork_segment_guards()
{
	return uML_Transition_fork_segment_guards;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_fork_segment_state()
{
	return uML_Transition_fork_segment_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_guard()
{
	return uML_Transition_guard;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_initial_transition()
{
	return uML_Transition_initial_transition;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Transition_isConsistentWith_RedefinableElement_RedefinableElement()
{
	return uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement()
{
	return uML_Transition_isConsistentWith_RedefinableElement_RedefinableElement_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_isConsistentWith_pre()
{
	return uML_Transition_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_isConsistentWith_result()
{
	return uML_Transition_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_isConsistentWith_spec()
{
	return uML_Transition_isConsistentWith_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_join_segment_guards()
{
	return uML_Transition_join_segment_guards;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_join_segment_state()
{
	return uML_Transition_join_segment_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_kind()
{
	return uML_Transition_kind;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_outgoing_pseudostates()
{
	return uML_Transition_outgoing_pseudostates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_redefinedTransition()
{
	return uML_Transition_redefinedTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_redefinitionContext()
{
	return uML_Transition_redefinitionContext;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Transition_redefinitionContext__()
{
	return uML_Transition_redefinitionContext__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_redefinitionContext_result()
{
	return uML_Transition_redefinitionContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_redefinitionContext_spec()
{
	return uML_Transition_redefinitionContext_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_source()
{
	return uML_Transition_source;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_state_is_external()
{
	return uML_Transition_state_is_external;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_state_is_internal()
{
	return uML_Transition_state_is_internal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_state_is_local()
{
	return uML_Transition_state_is_local;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_target()
{
	return uML_Transition_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_trigger()
{
	return uML_Transition_trigger;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Trigger()
{
	return uML_Trigger;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Trigger_event()
{
	return uML_Trigger_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Trigger_port()
{
	return uML_Trigger_port;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Trigger_trigger_with_ports()
{
	return uML_Trigger_trigger_with_ports;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Type()
{
	return uML_Type;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Type_conformsTo_Type_Type()
{
	return uML_Type_conformsTo_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_conformsTo_Type_Type_other()
{
	return uML_Type_conformsTo_Type_Type_other;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_conformsTo_result()
{
	return uML_Type_conformsTo_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Type_conformsTo_spec()
{
	return uML_Type_conformsTo_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end1Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_end2Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNaturalreturn;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Type_getAssociations__()
{
	return uML_Type_getAssociations__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_getAssociations__return()
{
	return uML_Type_getAssociations__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Type_package()
{
	return uML_Type_package;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TypedElement()
{
	return uML_TypedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TypedElement_type()
{
	return uML_TypedElement_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_UnmarshallAction()
{
	return uML_UnmarshallAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_multiplicity_of_object()
{
	return uML_UnmarshallAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_number_of_result()
{
	return uML_UnmarshallAction_number_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UnmarshallAction_object()
{
	return uML_UnmarshallAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_object_type()
{
	return uML_UnmarshallAction_object_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UnmarshallAction_result()
{
	return uML_UnmarshallAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_structural_feature()
{
	return uML_UnmarshallAction_structural_feature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_type_ordering_and_multiplicity()
{
	return uML_UnmarshallAction_type_ordering_and_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UnmarshallAction_unmarshallType()
{
	return uML_UnmarshallAction_unmarshallType;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Usage()
{
	return uML_Usage;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_UseCase()
{
	return uML_UseCase;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_UseCase_allIncludedUseCases__()
{
	return uML_UseCase_allIncludedUseCases__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_UseCase_allIncludedUseCases_result()
{
	return uML_UseCase_allIncludedUseCases_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_allIncludedUseCases_spec()
{
	return uML_UseCase_allIncludedUseCases_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_binary_associations()
{
	return uML_UseCase_binary_associations;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_cannot_include_self()
{
	return uML_UseCase_cannot_include_self;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_extend()
{
	return uML_UseCase_extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_extensionPoint()
{
	return uML_UseCase_extensionPoint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_include()
{
	return uML_UseCase_include;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_must_have_name()
{
	return uML_UseCase_must_have_name;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_no_association_to_use_case()
{
	return uML_UseCase_no_association_to_use_case;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_subject()
{
	return uML_UseCase_subject;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ValuePin()
{
	return uML_ValuePin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValuePin_compatible_type()
{
	return uML_ValuePin_compatible_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValuePin_no_incoming_edges()
{
	return uML_ValuePin_no_incoming_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ValuePin_value()
{
	return uML_ValuePin_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ValueSpecification()
{
	return uML_ValueSpecification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ValueSpecificationAction()
{
	return uML_ValueSpecificationAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecificationAction_compatible_type()
{
	return uML_ValueSpecificationAction_compatible_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecificationAction_multiplicity()
{
	return uML_ValueSpecificationAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ValueSpecificationAction_result()
{
	return uML_ValueSpecificationAction_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ValueSpecificationAction_value()
{
	return uML_ValueSpecificationAction_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_booleanValue__()
{
	return uML_ValueSpecification_booleanValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_booleanValue_result()
{
	return uML_ValueSpecification_booleanValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_booleanValue_spec()
{
	return uML_ValueSpecification_booleanValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_integerValue__()
{
	return uML_ValueSpecification_integerValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_integerValue_result()
{
	return uML_ValueSpecification_integerValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_integerValue_spec()
{
	return uML_ValueSpecification_integerValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement()
{
	return uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p()
{
	return uML_ValueSpecification_isCompatibleWith_ParameterableElement_ParameterableElement_p;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_result()
{
	return uML_ValueSpecification_isCompatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_spec()
{
	return uML_ValueSpecification_isCompatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_isComputable__()
{
	return uML_ValueSpecification_isComputable__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isComputable_result()
{
	return uML_ValueSpecification_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_isComputable_spec()
{
	return uML_ValueSpecification_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_isNull__()
{
	return uML_ValueSpecification_isNull__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isNull_result()
{
	return uML_ValueSpecification_isNull_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_isNull_spec()
{
	return uML_ValueSpecification_isNull_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_realValue__()
{
	return uML_ValueSpecification_realValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_realValue_result()
{
	return uML_ValueSpecification_realValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_realValue_spec()
{
	return uML_ValueSpecification_realValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_stringValue__()
{
	return uML_ValueSpecification_stringValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_stringValue_result()
{
	return uML_ValueSpecification_stringValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_stringValue_spec()
{
	return uML_ValueSpecification_stringValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_unlimitedValue__()
{
	return uML_ValueSpecification_unlimitedValue__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_unlimitedValue_result()
{
	return uML_ValueSpecification_unlimitedValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_unlimitedValue_spec()
{
	return uML_ValueSpecification_unlimitedValue_spec;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Variable()
{
	return uML_Variable;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_VariableAction()
{
	return uML_VariableAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_VariableAction_scope_of_variable()
{
	return uML_VariableAction_scope_of_variable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_VariableAction_variable()
{
	return uML_VariableAction_variable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Variable_activityScope()
{
	return uML_Variable_activityScope;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Variable_isAccessibleBy_Action_Action()
{
	return uML_Variable_isAccessibleBy_Action_Action;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Variable_isAccessibleBy_Action_Action_a()
{
	return uML_Variable_isAccessibleBy_Action_Action_a;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Variable_isAccessibleBy_result()
{
	return uML_Variable_isAccessibleBy_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Variable_isAccessibleBy_spec()
{
	return uML_Variable_isAccessibleBy_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Variable_scope()
{
	return uML_Variable_scope;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Vertex()
{
	return uML_Vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Vertex_container()
{
	return uML_Vertex_container;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_containingStateMachine__()
{
	return uML_Vertex_containingStateMachine__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_containingStateMachine_result()
{
	return uML_Vertex_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_containingStateMachine_spec()
{
	return uML_Vertex_containingStateMachine_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Vertex_incoming()
{
	return uML_Vertex_incoming;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_incoming__()
{
	return uML_Vertex_incoming__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_incoming_result()
{
	return uML_Vertex_incoming_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_incoming_spec()
{
	return uML_Vertex_incoming_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_Region_Region()
{
	return uML_Vertex_isContainedInRegion_Region_Region;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_Region_Region_r()
{
	return uML_Vertex_isContainedInRegion_Region_Region_r;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_result()
{
	return uML_Vertex_isContainedInRegion_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_spec()
{
	return uML_Vertex_isContainedInRegion_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_isContainedInState_State_State()
{
	return uML_Vertex_isContainedInState_State_State;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInState_State_State_s()
{
	return uML_Vertex_isContainedInState_State_State_s;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInState_result()
{
	return uML_Vertex_isContainedInState_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_isContainedInState_spec()
{
	return uML_Vertex_isContainedInState_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Vertex_outgoing()
{
	return uML_Vertex_outgoing;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_outgoing__()
{
	return uML_Vertex_outgoing__;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_outgoing_result()
{
	return uML_Vertex_outgoing_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_outgoing_spec()
{
	return uML_Vertex_outgoing_spec;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_VisibilityKind()
{
	return uML_VisibilityKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_package()
{
	return uML_VisibilityKind_package;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_private()
{
	return uML_VisibilityKind_private;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_protected()
{
	return uML_VisibilityKind_protected;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_public()
{
	return uML_VisibilityKind_public;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_WriteLinkAction()
{
	return uML_WriteLinkAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteLinkAction_allow_access()
{
	return uML_WriteLinkAction_allow_access;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_WriteStructuralFeatureAction()
{
	return uML_WriteStructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_multiplicity_of_result()
{
	return uML_WriteStructuralFeatureAction_multiplicity_of_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_multiplicity_of_value()
{
	return uML_WriteStructuralFeatureAction_multiplicity_of_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_result()
{
	return uML_WriteStructuralFeatureAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_type_of_result()
{
	return uML_WriteStructuralFeatureAction_type_of_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_type_of_value()
{
	return uML_WriteStructuralFeatureAction_type_of_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_value()
{
	return uML_WriteStructuralFeatureAction_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_WriteVariableAction()
{
	return uML_WriteVariableAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteVariableAction_multiplicity()
{
	return uML_WriteVariableAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_WriteVariableAction_value()
{
	return uML_WriteVariableAction_value;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteVariableAction_value_type()
{
	return uML_WriteVariableAction_value_type;
}



