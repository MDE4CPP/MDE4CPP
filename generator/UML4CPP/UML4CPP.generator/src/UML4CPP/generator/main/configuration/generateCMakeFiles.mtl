[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate CMakeLists.txt containing compiling configuration for CMake
 * 
 */]
[module generateCMakeFiles('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::components::generateOpaqueBehavior /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::helpers::isGeneratableHelper /]

[template public generateCMakeLists(aPackage : Package, packOnly:Boolean) { packageName : String = aPackage.getPackageName(); }]
[file (packageName.concat('/').concat('CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#																			#
#		 			CMakeList created by UML4CPP Generator					# 
#																			#
#############################################################################

# C++ project of model [packageName/].uml, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

PROJECT([packageName/])

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)
SET(CMAKE_DEBUG_POSTFIX d)

SET(CMAKE_CXX_STANDARD 17)

[comment IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang") -> not necessary after removing openmp/]
SET(CMAKE_CXX_FLAGS "-Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fmax-errors=5")
IF(APPLE)
  string(APPEND CMAKE_CXX_FLAGS " -Qunused-arguments")
ENDIF(APPLE)

[if (aPackage.name = keyUML())]
SET(CMAKE_CXX_FLAGS_DEBUG " -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -DNDEBUG")
[else]
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")
[/if]

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	# Model plugin
	impl/[aPackage.name/]PluginImpl.cpp
	[aPackage.generatePackageSourceFilesToCompile(packOnly, true)/]
	[if (not packOnly)]
	${MDE4CPP_HOME}/application/include/util/util.cpp
	[/if]
)

INCLUDE_DIRECTORIES(
	../
	${MDE4CPP_HOME}/application/include
)

# Apple specific stuff
IF(APPLE)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
  SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup")
ENDIF(APPLE)

IF(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
	[generateCMakeFindLibraryCommands('.so', 'bin')/]
ELSEIF(APPLE)
	[generateCMakeFindLibraryCommands('.dylib', 'bin')/]
ELSE()
	[generateCMakeFindLibraryCommands('', 'lib')/]
ENDIF()

ADD_LIBRARY(${PROJECT_NAME} SHARED ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PREFIX "")

IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateLibraryLinking(true)/]
ELSE()
	[generateLibraryLinking(false)/]
ENDIF()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME}
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
    LIBRARY DESTINATION ${MDE4CPP_HOME}/application/bin
    ARCHIVE DESTINATION ${MDE4CPP_HOME}/application/lib
)

INSTALL(DIRECTORY . DESTINATION ${MDE4CPP_HOME}/application/include/${PROJECT_NAME}
	FILES_MATCHING PATTERN "*.hpp"
	PATTERN ".cmake" EXCLUDE
)
[/file]
[/template]

[template private generateCMakeFindLibraryCommand(aPackage : Package, ending : String, folderName : String, debugMode : Boolean)]
[for (packName : String | aPackage.collectIncludingModelNames())]
FIND_LIBRARY([packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [packName/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[/for]
[for (aOperation : Operation | aPackage.allOwnedElements()->selectByType(Class).ownedOperation->select(method->filter(OpaqueBehavior)->notEmpty())->asOrderedSet()->sortedBy(myQualifiedName()))]
[let anOpaqueBehavior : OpaqueBehavior = aOperation.method->filter(OpaqueBehavior)->asOrderedSet()->first()]
	[if (anOpaqueBehavior.hasLanguage(keyLibrary()))]
		[for (libName : String | anOpaqueBehavior.getEntryForLanguage(keyLibrary()))]
FIND_LIBRARY([libName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [libName/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
		[/for]
	[/if]
[/let]
[/for]
[if(aPackage.eAllContents()->select(oclIsKindOf(Operation)).oclAsType(Operation).method->filter(Activity)->asSet()->notEmpty())]
FIND_LIBRARY(PLUGINFRAMEWORK_[libraryVariableNameSuffix(debugMode)/] pluginFramework[libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])[/if]
[/template]

[template private generateCMakeFindLibraryCommands(aPackage : Package, ending : String, folderName : String)]
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, true)/]
ELSE()
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, false)/]
ENDIF()
[/template]

[template private generateLibraryLinking(aPackage : Package, debugMode : Boolean)]
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
[for (packName : String | aPackage.collectIncludingModelNames())]
	[buildModeCMakeProperty(debugMode)/] ${[packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
[/for]
[for (aOperation : Operation | aPackage.allOwnedElements()->selectByType(Class).ownedOperation->select(method->filter(OpaqueBehavior)->notEmpty())->asOrderedSet()->sortedBy(myQualifiedName()))]
[let anOpaqueBehavior : OpaqueBehavior = aOperation.method->filter(OpaqueBehavior)->asOrderedSet()->first()]
	[if (anOpaqueBehavior.hasLanguage(keyLibrary()))]
		[for (libName : String | anOpaqueBehavior.getEntryForLanguage(keyLibrary()))]
	[buildModeCMakeProperty(debugMode)/] ${[libName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
		[/for]
	[/if]
[/let]
[/for]
[if(aPackage.eAllContents()->select(oclIsKindOf(Operation)).oclAsType(Operation).method->filter(Activity)->asSet()->notEmpty())]
	[buildModeCMakeProperty(debugMode)/] ${PLUGINFRAMEWORK_[libraryVariableNameSuffix(debugMode)/]}
	${CMAKE_DL_LIBS}
[/if]        
)
[/template]

[template private generatePackageSourceFilesToCompile(aPackage : Package, packOnly : Boolean, isRoot : Boolean)]
# Package of [aPackage.generateNamespace(false)/]
[if(not isRoot)][aPackage.generateNamespacePathWithoutRoot(false)/]/[/if]impl/[aPackage.name/]PackageImpl.cpp
[if (not packOnly)]
# Factory of [aPackage.generateNamespace(false)/]
[if(not isRoot)][aPackage.generateNamespacePathWithoutRoot(false)/]/[/if]impl/[aPackage.name/]FactoryImpl.cpp
[if (aPackage.collectOpaqueBehaviorsForGlobalFunctionsOfPackage()->size() > 0)]
# Global functions of [aPackage.generateNamespace(false)/]
[if(not isRoot)][aPackage.generateNamespacePathWithoutRoot(false)/]/[/if]_GlobalFunctions.cpp
[/if]
# Contents of [aPackage.generateNamespace(false)/]
[aPackage.generatePackageContents(isRoot)/]
[/if]
[for (subPackage : Package | aPackage.ownedElement->filter(Package))]
[subPackage.generatePackageSourceFilesToCompile(packOnly, false)/]
[/for]
[/template]

[template private generatePackageContents(aPackage : Package, isRoot : Boolean)]
[for (aClass : Class | aPackage.ownedElement->filter(Class)->select(isGeneratable())->sortedBy(myQualifiedName()))]
[if(not isRoot)][aPackage.generateNamespacePathWithoutRoot(false)/]/[/if]impl/[aClass.name.toUpperFirst()/]Impl.cpp
[if (aClass.isSingleton())]
[if(not isRoot)][aPackage.generateNamespacePathWithoutRoot(false)/]/[/if][aClass.name.toUpperFirst()/].cpp
[/if]
[/for]
[for (aDataType : DataType | aPackage.ownedElement->selectByType(DataType)->select(isGeneratable())->sortedBy(myQualifiedName()))]
[if(not isRoot)][aPackage.generateNamespacePathWithoutRoot(false)/]/[/if]impl/[aDataType.name.toUpperFirst()/]Impl.cpp
[/for]
[/template]

[query private buildModeCMakeProperty(debugMode : Boolean) : String = if (debugMode) then 'debug' else 'optimized' endif/]
[query private libraryVariableNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'DEBUG' else 'RELEASE' endif/]
[query private libraryNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'd' else '' endif/]