<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="libraryModel_ecore" nsURI="http://www.example.org/libraryModel_ecore"
    nsPrefix="libraryModel_ecore">
  <eAnnotations source="prepareApplication">
    <details key="sourceCodeMain" value="&#x9;// Create new Library Model instance&#xA;    std::shared_ptr&lt;LibraryModel> lm = factory->createLibraryModel();&#xA;&#xA;    std::shared_ptr&lt;Book> bookMag = factory->createBook_in_Library(lm);&#xA;    bookMag->setName(&quot;Magritte&quot;);&#xA;&#xA;    std::shared_ptr&lt;Author> author = factory->createAuthor_in_Library(lm);&#xA;    author->setName(&quot;David Sylvester&quot;);&#xA;    bookMag->getAuthors()->add(author);&#xA;&#xA;    std::shared_ptr&lt;Picture> picture = factory->createPicture_in_Book(bookMag);&#xA;    picture->setName(&quot;Der Verrat der Binder (La trahison des images), 1929: l, 60x82 cm&quot;);&#xA;    picture->setPageNumber(212);&#xA;&#xA;    lm->printLibrary();&#xA;&#xA;    std::cout &lt;&lt; &quot;--------------------------&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;build model in generic way&quot; &lt;&lt; std::endl;&#xA;&#xA;&#xA;&#x9;// can be used, if external (model independent) library can be specified inside the ecore model&#xA;&#x9;//&#x9;std::shared_ptr&lt;PluginFramework> pfw = PluginFramework::eInstance();&#xA;&#x9;//&#x9;std::shared_ptr&lt;MDE4CPPPlugin> plugin = pfw->findPluginByName(&quot;libraryModel_ecore&quot;);&#xA;&#xA;&#x9;std::shared_ptr&lt;MDE4CPPPlugin> plugin = libraryModel_ecorePlugin::eInstance();&#xA;&#xA;&#xA;&#x9;if (!plugin)&#xA;&#x9;{&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;plugin not found&quot; &lt;&lt; std::endl;&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;generic model ...&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> xlm = plugin->create(&quot;LibraryModel&quot;);&#xA;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> xbook = plugin->create(&quot;Book&quot;, xlm, package->LIBRARYMODEL_ATTRIBUTE_BOOK);&#xA;&#xA;&#x9;&#x9;std::string bookname = &quot;Magritte&quot;;&#xA;&#x9;&#x9;xbook->eSet(package->getNamedElement_Attribute_name(), eAny(bookname));&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> xauthor = plugin->create(&quot;Author&quot;, xlm, package->LIBRARYMODEL_ATTRIBUTE_AUTHORS);&#xA;&#x9;&#x9;std::string authorname = &quot;David Sylvester&quot;;&#xA;&#x9;&#x9;xauthor->eSet(package->getNamedElement_Attribute_name(), eAny(authorname));&#xA;&#xA;&#x9;&#x9;Any anyxbookauthors = xbook->eGet(package->getBook_Attribute_authors());&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ecore::EObject>> bookauthors = anyxbookauthors->get&lt;std::shared_ptr&lt;Bag&lt;ecore::EObject>>>();&#xA;&#x9;&#x9;bookauthors->add(xauthor);&#xA;&#x9;&#x9;xbook->eSet(package->getBook_Attribute_authors(), eAny(bookauthors));&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> xpicture = plugin->create(&quot;Picture&quot;, xbook, package->BOOK_ATTRIBUTE_PICTURES);&#xA;&#x9;&#x9;int xint = 212;&#xA;&#x9;&#x9;xpicture->eSet(package->getPicture_Attribute_pageNumber(), eAny(xint));&#xA;&#x9;&#x9;std::string picname = &quot;Der Verrat der Binder (La trahison des images), 1929: l, 60x82 cm&quot;;&#xA;&#x9;&#x9;xpicture->eSet(package->getNamedElement_Attribute_name(), eAny(picname));&#xA;&#xA;&#x9;&#x9;// TODO call printLibrary by using invoce&#xA;&#x9;&#x9;auto x = std::dynamic_pointer_cast&lt;LibraryModel>(xlm);&#xA;&#x9;&#x9;x->printLibrary();&#xA;&#x9;}"/>
    <details key="sourceCodeIncludes" value="#include &quot;abstractDataTypes/Any.hpp&quot;&#xA;#include &quot;ecore/EAttribute.hpp&quot;&#xA;#include &quot;ecore/EReference.hpp&quot;&#xA;//#include &quot;pluginFramework/PluginFramework.hpp&quot; // can be used, if external (model independent) library can be specified inside the ecore model&#xA;#include &quot;pluginFramework/MDE4CPPPlugin.hpp&quot;&#xA;#include &quot;libraryModel_ecore/LibraryModel_ecorePlugin.hpp&quot;&#xA;"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Book" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="authors" upperBound="-1"
        eType="#//Author"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="library" eType="#//LibraryModel"
        eOpposite="#//LibraryModel/book"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="pictures" upperBound="-1"
        eType="#//Picture" containment="true" eOpposite="#//Picture/book"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Author" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="library" eType="#//LibraryModel"
        eOpposite="#//LibraryModel/authors"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LibraryModel">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;libraryModel_ecore/Picture.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="printLibrary">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;libraryModel_ecore::Book>> books = this->getBook();&#xA;&#xA;&#x9;for(Bag&lt;libraryModel_ecore::Book>::const_iterator it=books->begin(); it!=books->end(); it++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;The book &quot; &lt;&lt; (*it)->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;\twas written by:&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt; Bag&lt;Author> > authors= (*it)->getAuthors();&#xA;&#x9;&#x9;&#x9;for(Bag&lt;Author>::const_iterator itA=authors->begin();itA!=authors->end();itA++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;\t\t- &quot; &lt;&lt; (*itA)->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;\tIndex of Figures:&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt; Bag&lt;Picture> > pictures= (*it)->getPictures();&#xA;&#x9;&#x9;&#x9;for(Bag&lt;Picture>::const_iterator itP=pictures->begin();itP!=pictures->end();itP++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;\t\t- &quot; &lt;&lt; (*itP)->getName() &lt;&lt; &quot; - Page number: &quot;&lt;&lt; (*itP)->getPageNumber() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="book" upperBound="-1" eType="#//Book"
        containment="true" eOpposite="#//Book/library"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="authors" upperBound="-1"
        eType="#//Author" containment="true" eOpposite="#//Author/library"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NamedElement">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="Name" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Picture" eSuperTypes="#//NamedElement">
    <eStructuralFeatures xsi:type="ecore:EReference" name="book" eType="#//Book" eOpposite="#//Book/pictures"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="pageNumber" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
  </eClassifiers>
</ecore:EPackage>
