[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate model package interface header file
 * 
 */]
[module generatePackageInterface('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/emf/2002/Ecore')]

[import UML4CPP::generator::main::components::generateNamedElement /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::singletonHelper /]
[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::helpers::collectionHelper /]


[template public generatePackageInterface(aPackage : Package) {packageName : String = aPackage.name.concat('Package');}]
[file (aPackage.generateNamespacePath(false).concat('/').concat(packageName).concat('.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'MetaModelPackage')/]
#include "uml/[aPackage.eClass().name/].hpp"

namespace uml 
{
[for (nE : EClass | OrderedSet{(aPackage.getElementsBelongingToPackage()->filter(NamedElement)-aPackage.getElementsBelongingToPackage()->filter(ValueSpecification)).eClass()}->flatten()->sortedBy(name))]
	class [nE.name/];
[/for]
	class ConnectorEnd;
}

[for (subPackage : Package| aPackage.ownedElement->filter(Package)->sortedBy(name)) separator ('\n')]
namespace [subPackage.generateNamespace(false)/] 
{
	class [subPackage.name/]Package;
}
[/for]

[comment namespace /]
[if (not aPackage.isIgnoreNamespace())]namespace [aPackage.generateNamespace(false)/] 
{
[/if]
	/*!
	The Metamodel Package for the [aPackage.name/] metamodel. This package is used to enable the reflection of model elements. It contains all model elements
	which were described in an ecore file.
	*/
	class [packageName/] : virtual public uml::[aPackage.eClass().name/]
	{
		//protected default construcotr
		protected:
			[packageName/](){}

		public:
			//static variables
			static const std::string eNAME;
			static const std::string eNS_URI;
			static const std::string eNS_PREFIX;

			//getter for the ownedMember
			[(aPackage.getElementsBelongingToPackage()->filter(NamedElement)-aPackage.getElementsBelongingToPackage()->filter(ValueSpecification))->asOrderedSet()->sortedBy(myQualifiedName()).generatePackageMemberGetter(false)/]
			[(aPackage.getElementsBelongingToPackage()->filter(ConnectorEnd))->asOrderedSet()->sortedBy(myQualifiedName()).generatePackageMemberGetter(false)/]

			//getter for subPackages
			[for (subPackage : Package | aPackage.nestedPackage->sortedBy(name))]
			[subPackage.generateSubPackageGetter(false)/]
			[/for]

			//Singleton Instance and Getter
			[generateSingletonDecl(packageName)/]

			[if (not isReflectionModel(aPackage))]
			//Class IDs
			[generateStaticPackageID(aPackage)/]
			[/if]
	};
[if (not aPackage.isIgnoreNamespace())]}[/if]
[endGuard(aPackage,'MetaModelPackage')/]
[/file]
[/template]