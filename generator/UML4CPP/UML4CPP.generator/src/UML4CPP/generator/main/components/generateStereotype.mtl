[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Stereotype artefacts
 * - Stereotype is a specialization of UML Class
 * - Thus, some artefacts are generated by generateClass.mtl
 * 
 */]
[module generateStereotype('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * generate creation of meta model instance for an Stereotype element
 * 
 * this includes:
 * - creation of Stereotype
 * - set name
 * - set isAbstract
*/]
[template public generateStereotypeCreation(aStereotype : Stereotype)]
[aStereotype.memberName()/] = factory->createStereotype_in_Package([aStereotype.ancestors(Package)->first().memberName()/][aStereotype.oclAsType(NamedElement).getStaticClassID_Name()/]);
[aStereotype.memberName()/]->setName("[aStereotype.name/]");
[aStereotype.memberName()/]->setIsAbstract([aStereotype.isAbstract/]);
[/template]

[**
 * generate application of stereotype to an element
*/]
[template public generateStereotypeApplication(aElement : Element) ? (aElement.getAppliedStereotypes()->notEmpty() and (not((aElement.getNearestPackage().name='Ecore') or (aElement.getNearestPackage().name = keyUML()) or (aElement.getNearestPackage().name='PrimitiveTypes'))))]
[for (stereo : Stereotype | aElement.getAppliedStereotypes()->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
{
	//apply Stereotype	[stereo.name/]
	[stereo.generateCppType(false)/] stereo([stereo.generateCreateFunction()/]);
[for (prop : Property | stereo.allAttributes())]
[if(not aElement.getValue(stereo, prop.name).oclIsUndefined())]
	[prop.generateAttributeSetting(aElement, stereo)/]
[/if]
[/for]
	[aElement.oclAsType(NamedElement).memberName()/]->applyStereotype(stereo);
}
[/for]
[/template]

[**
 * generate property settings for a stereotype created in template 'generateStereotypeApplication'
*/]
[template private generateAttributeSetting(prop : Property,aElement : Element, stereo : Stereotype)]
[if (prop.type.oclIsKindOf(NamedElement) and not prop.type.oclIsKindOf(PrimitiveType) and not(prop.upper = 1))]
[for (any : OclAny | aElement.getValue(stereo, prop.name))]
[if (any.oclIsKindOf(NamedElement))]
stereo->[prop.getterName()/]()->push_back([memberName(any.oclAsType(NamedElement))/]);
[/if]
[/for][elseif (prop.type.oclIsKindOf(PrimitiveType) and not(prop.upper = 1))]
[for (any : OclAny | aElement.getValue(stereo, prop.name))]
{
	std::shared_ptr<[prop.type.generateCppType(false)/]> value(new [prop.type.generateCppType(false)/]([any.toString()/]));
	stereo->[prop.getterName()/]()->push_back(value);
}
[/for][else]
stereo->[prop.setterName()/]([prop.generateValue(aElement,stereo)/]);[/if]
[/template]

[**
 * generate values set to stereotype properties
*/]
[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (not prop.name.startsWith('base_') and prop.type.oclIsKindOf(NamedElement) and not prop.type.oclIsKindOf(Enumeration) and not prop.type.oclIsKindOf(PrimitiveType))]
[aElement.getValue(stereo, prop.name).oclAsType(NamedElement).memberName()/]
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.name.startsWith('base_'))]
[aElement.oclAsType(NamedElement).memberName()/]
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.type.oclIsKindOf(Enumeration))]
[prop.type.qualifiedName/]::[aElement.getValue(stereo, prop.name).oclAsType(EnumerationLiteral).name.toUpper()/]
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.type.oclIsKindOf(PrimitiveType) and (prop.type.name='String'))]
"[aElement.getValue(stereo, prop.name).oclAsType(String)/]"
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.type.oclIsKindOf(PrimitiveType) and (prop.type.name='Integer') )]
[aElement.getValue(stereo, prop.name).oclAsType(Integer)/]
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.type.oclIsKindOf(PrimitiveType) and (prop.type.name='Boolean') )]
[aElement.getValue(stereo, prop.name).oclAsType(Boolean)/]
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.type.oclIsKindOf(PrimitiveType) and (prop.type.name='Real') )]
[aElement.getValue(stereo, prop.name).oclAsType(Real)/]
[/template]

[template private generateValue(prop : Property,aElement : Element, stereo : Stereotype) ? (prop.type.oclIsKindOf(PrimitiveType) and (prop.type.name='UnlimitedNatural') )]
[aElement.getValue(stereo, prop.name).oclAsType(UnlimitedNatural)/]
[/template]