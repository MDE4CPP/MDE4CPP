//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_STEREOTYPE_HPP
#define UML_STEREOTYPE_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 
namespace ecore 
{
	class EClass;
}
namespace uml 
{
	class Behavior;
	class CollaborationUse;
	class Comment;
	class ConnectableElement;
	class Connector;
	class Constraint;
	class Dependency;
	class ElementImport;
	class Extension;
	class Feature;
	class Generalization;
	class GeneralizationSet;
	class Image;
	class InterfaceRealization;
	class Operation;
	class Package;
	class PackageImport;
	class Port;
	class Profile;
	class Property;
	class Reception;
	class StringExpression;
	class Substitution;
	class TemplateBinding;
	class TemplateParameter;
	class TemplateSignature;
	class UseCase;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Class.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A stereotype defines how an existing metaclass may be extended, and enables the use of platform or domain specific terminology or notation in place of, or in addition to, the ones used for the extended metaclass.
	<p>From package UML::Packages.</p>
	*/
	
	class UML_API Stereotype : virtual public Class
	{
		public:
 			Stereotype(const Stereotype &) {}

		protected:
			Stereotype(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Stereotype() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			The query containingProfile returns the closest profile directly or indirectly containing this stereotype.
			result = (self.namespace.oclAsType(Package).containingProfile())
			<p>From package UML::Packages.</p>
			*/
			 
			virtual std::shared_ptr<uml::Profile> containingProfile() = 0;
			/*!
			Creates a(n) (required) extension of the specified metaclass with this stereotype.
			*/
			 
			virtual std::shared_ptr<uml::Extension> createExtension(std::shared_ptr<uml::Class> metaclass, bool isRequired) = 0;
			/*!
			Creates an icon with the specified location for this stereotype.
			*/
			 
			virtual std::shared_ptr<uml::Image> createIcon(std::string location) = 0;
			/*!
			Creates an icon with the specified format and content for this stereotype.
			*/
			 
			virtual std::shared_ptr<uml::Image> createIcon(std::string format, std::string content) = 0;
			/*!
			Retrieves all the metaclasses extended by this stereotype, including the metaclasses extended by its superstereotypes.
			*/
			 
			virtual std::shared_ptr<Bag<uml::Class>> getAllExtendedMetaclasses() = 0;
			/*!
			Retrieves the current definition (Ecore representation) of this stereotype.
			*/
			 
			virtual std::shared_ptr<ecore::EClass> getDefinition() = 0;
			/*!
			Retrieves the metaclasses extended by this stereotype.
			*/
			 
			virtual std::shared_ptr<Bag<uml::Class>> getExtendedMetaclasses() = 0;
			/*!
			Retrieves the localized keyword for this stereotype.
			*/
			 
			virtual std::string getKeyword() = 0;
			/*!
			Retrieves the keyword for this stereotype, localized if indicated.
			*/
			 
			virtual std::string getKeyword(bool localize) = 0;
			

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.
			<p>From package UML::Packages.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Image, uml::Element>> getIcon() const = 0;
			/*!
			The profile that directly or indirectly contains this stereotype.
			<p>From package UML::Packages.</p>
			*/
			
			virtual std::shared_ptr<uml::Profile> getProfile() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.
			<p>From package UML::Packages.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Image, uml::Element>> m_icon;
			/*!
			The profile that directly or indirectly contains this stereotype.
			<p>From package UML::Packages.</p>
			*/
			
			std::shared_ptr<uml::Profile> m_profile;
	};
}
#endif /* end of include guard: UML_STEREOTYPE_HPP */
