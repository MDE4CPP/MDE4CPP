#include "PSCS/Semantics/StructuredClassifiers/impl/StructuredClassifiersPackageImpl.hpp"

// metametamodel factory
#include "ecore/EcoreFactory.hpp"

#include <cassert>

#include "abstractDataTypes/SubsetUnion.hpp"
//metametamodel classes
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EDataType.hpp"
#include "ecore/EEnum.hpp"
#include "ecore/EEnumLiteral.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/EOperation.hpp"
#include "ecore/EParameter.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStringToStringMapEntry.hpp"

//depending model packages
#include "PSCS/PSCSPackage.hpp"
#include "ecore/EcorePackage.hpp"
#include "fUML/FUMLPackage.hpp"
#include "types/TypesPackage.hpp"
#include "uml/UmlPackage.hpp"
//include subpackages 
 
using namespace PSCS::Semantics::StructuredClassifiers;

void StructuredClassifiersPackageImpl::createPackageContents(std::shared_ptr<ecore::EPackage> package)
{
	if (isCreated) 
	{
		return;
	}
	isCreated = true;

	std::shared_ptr<ecore::EcoreFactory> factory = ecore::EcoreFactory::eInstance();

	createCS_DefaultRequestPropagationStrategyContent(package, factory);
	createCS_DispatchOperationOfInterfaceStrategyContent(package, factory);
	createCS_InteractionPointContent(package, factory);
	createCS_LinkContent(package, factory);
	createCS_NameBased_StructuralFeatureOfInterfaceAccessStrategyContent(package, factory);
	createCS_ObjectContent(package, factory);
	createCS_ReferenceContent(package, factory);
	createCS_RequestPropagationStrategyContent(package, factory);
	createCS_StructuralFeatureOfInterfaceAccessStrategyContent(package, factory);

	createPackageEDataTypes(package, factory);

}

void StructuredClassifiersPackageImpl::createCS_DefaultRequestPropagationStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_DefaultRequestPropagationStrategy_Class = factory->createEClass_in_EPackage(package, CS_DEFAULTREQUESTPROPAGATIONSTRATEGY_CLASS);
	
	
	m_cS_DefaultRequestPropagationStrategy_Operation_select_Reference_SemanticVisitor = factory->createEOperation_in_EContainingClass(m_cS_DefaultRequestPropagationStrategy_Class, CS_DEFAULTREQUESTPROPAGATIONSTRATEGY_OPERATION_SELECT_REFERENCE_SEMANTICVISITOR);
	
}

void StructuredClassifiersPackageImpl::createCS_DispatchOperationOfInterfaceStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_DispatchOperationOfInterfaceStrategy_Class = factory->createEClass_in_EPackage(package, CS_DISPATCHOPERATIONOFINTERFACESTRATEGY_CLASS);
	
	
	m_cS_DispatchOperationOfInterfaceStrategy_Operation_operationsMatch_Operation_Operation = factory->createEOperation_in_EContainingClass(m_cS_DispatchOperationOfInterfaceStrategy_Class, CS_DISPATCHOPERATIONOFINTERFACESTRATEGY_OPERATION_OPERATIONSMATCH_OPERATION_OPERATION);
	
}

void StructuredClassifiersPackageImpl::createCS_InteractionPointContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_InteractionPoint_Class = factory->createEClass_in_EPackage(package, CS_INTERACTIONPOINT_CLASS);
	
	m_cS_InteractionPoint_Attribute_definingPort = factory->createEReference_in_EContainingClass(m_cS_InteractionPoint_Class, CS_INTERACTIONPOINT_ATTRIBUTE_DEFININGPORT);
	m_cS_InteractionPoint_Attribute_owner = factory->createEReference_in_EContainingClass(m_cS_InteractionPoint_Class, CS_INTERACTIONPOINT_ATTRIBUTE_OWNER);
	
	m_cS_InteractionPoint_Operation_checkAllParents_Classifier_Classifier = factory->createEOperation_in_EContainingClass(m_cS_InteractionPoint_Class, CS_INTERACTIONPOINT_OPERATION_CHECKALLPARENTS_CLASSIFIER_CLASSIFIER);
	m_cS_InteractionPoint_Operation_dispatch_Operation = factory->createEOperation_in_EContainingClass(m_cS_InteractionPoint_Class, CS_INTERACTIONPOINT_OPERATION_DISPATCH_OPERATION);
	m_cS_InteractionPoint_Operation_send_EventOccurrence = factory->createEOperation_in_EContainingClass(m_cS_InteractionPoint_Class, CS_INTERACTIONPOINT_OPERATION_SEND_EVENTOCCURRENCE);
	m_cS_InteractionPoint_Operation_startBehavior_Class_ParameterValue = factory->createEOperation_in_EContainingClass(m_cS_InteractionPoint_Class, CS_INTERACTIONPOINT_OPERATION_STARTBEHAVIOR_CLASS_PARAMETERVALUE);
	
}

void StructuredClassifiersPackageImpl::createCS_LinkContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_Link_Class = factory->createEClass_in_EPackage(package, CS_LINK_CLASS);
	
	
	m_cS_Link_Operation_getFeature_Value = factory->createEOperation_in_EContainingClass(m_cS_Link_Class, CS_LINK_OPERATION_GETFEATURE_VALUE);
	m_cS_Link_Operation_hasValueForAFeature_Value = factory->createEOperation_in_EContainingClass(m_cS_Link_Class, CS_LINK_OPERATION_HASVALUEFORAFEATURE_VALUE);
	
}

void StructuredClassifiersPackageImpl::createCS_NameBased_StructuralFeatureOfInterfaceAccessStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_NameBased_StructuralFeatureOfInterfaceAccessStrategy_Class = factory->createEClass_in_EPackage(package, CS_NAMEBASED_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_CLASS);
	
	
	m_cS_NameBased_StructuralFeatureOfInterfaceAccessStrategy_Operation_read_CS_Object_StructuralFeature = factory->createEOperation_in_EContainingClass(m_cS_NameBased_StructuralFeatureOfInterfaceAccessStrategy_Class, CS_NAMEBASED_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_OPERATION_READ_CS_OBJECT_STRUCTURALFEATURE);
	m_cS_NameBased_StructuralFeatureOfInterfaceAccessStrategy_Operation_write_CS_Object_EInt = factory->createEOperation_in_EContainingClass(m_cS_NameBased_StructuralFeatureOfInterfaceAccessStrategy_Class, CS_NAMEBASED_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_OPERATION_WRITE_CS_OBJECT_EINT);
	
}

void StructuredClassifiersPackageImpl::createCS_ObjectContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_Object_Class = factory->createEClass_in_EPackage(package, CS_OBJECT_CLASS);
	
	
	m_cS_Object_Operation_checkAllParents_Classifier_Classifier = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_CHECKALLPARENTS_CLASSIFIER_CLASSIFIER);
	m_cS_Object_Operation_contains_Object = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_CONTAINS_OBJECT);
	m_cS_Object_Operation_directlyContains_Object = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_DIRECTLYCONTAINS_OBJECT);
	m_cS_Object_Operation_dispatchIn_Operation_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_DISPATCHIN_OPERATION_CS_INTERACTIONPOINT);
	m_cS_Object_Operation_dispatchIn_Operation_Port = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_DISPATCHIN_OPERATION_PORT);
	m_cS_Object_Operation_dispatchOut_Operation_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_DISPATCHOUT_OPERATION_CS_INTERACTIONPOINT);
	m_cS_Object_Operation_dispatchOut_Operation_Port = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_DISPATCHOUT_OPERATION_PORT);
	m_cS_Object_Operation_getDirectContainers = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_GETDIRECTCONTAINERS);
	m_cS_Object_Operation_getFeatureValue_StructuralFeature = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_GETFEATUREVALUE_STRUCTURALFEATURE);
	m_cS_Object_Operation_getLinkKind_CS_Link_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_GETLINKKIND_CS_LINK_CS_INTERACTIONPOINT);
	m_cS_Object_Operation_getLinks_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_GETLINKS_CS_INTERACTIONPOINT);
	m_cS_Object_Operation_hasValueForAFeature_Value = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_HASVALUEFORAFEATURE_VALUE);
	m_cS_Object_Operation_isDescendant_Interface_Interface = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_ISDESCENDANT_INTERFACE_INTERFACE);
	m_cS_Object_Operation_isOperationProvided_Reference_Operation = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_ISOPERATIONPROVIDED_REFERENCE_OPERATION);
	m_cS_Object_Operation_isOperationRequired_Reference_Operation = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_ISOPERATIONREQUIRED_REFERENCE_OPERATION);
	m_cS_Object_Operation_realizesInterface_Class_Interface = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_REALIZESINTERFACE_CLASS_INTERFACE);
	m_cS_Object_Operation_selectTargetsForDispatching_CS_Link_EBoolean = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SELECTTARGETSFORDISPATCHING_CS_LINK_EBOOLEAN);
	m_cS_Object_Operation_selectTargetsForSending_CS_Link_EBoolean = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SELECTTARGETSFORSENDING_CS_LINK_EBOOLEAN);
	m_cS_Object_Operation_sendIn_EventOccurrence_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SENDIN_EVENTOCCURRENCE_CS_INTERACTIONPOINT);
	m_cS_Object_Operation_sendIn_EventOccurrence_Port = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SENDIN_EVENTOCCURRENCE_PORT);
	m_cS_Object_Operation_sendOut_EventOccurrence_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SENDOUT_EVENTOCCURRENCE_CS_INTERACTIONPOINT);
	m_cS_Object_Operation_sendOut_EventOccurrence_Port = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SENDOUT_EVENTOCCURRENCE_PORT);
	m_cS_Object_Operation_setFeatureValue_StructuralFeature_EInt = factory->createEOperation_in_EContainingClass(m_cS_Object_Class, CS_OBJECT_OPERATION_SETFEATUREVALUE_STRUCTURALFEATURE_EINT);
	
}

void StructuredClassifiersPackageImpl::createCS_ReferenceContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_Reference_Class = factory->createEClass_in_EPackage(package, CS_REFERENCE_CLASS);
	
	m_cS_Reference_Attribute_compositeReferent = factory->createEReference_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_ATTRIBUTE_COMPOSITEREFERENT);
	
	m_cS_Reference_Operation_copy = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_COPY);
	m_cS_Reference_Operation_dispatchIn_Operation_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_DISPATCHIN_OPERATION_CS_INTERACTIONPOINT);
	m_cS_Reference_Operation_dispatchIn_Operation_Port = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_DISPATCHIN_OPERATION_PORT);
	m_cS_Reference_Operation_dispatchOut_Operation_Port = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_DISPATCHOUT_OPERATION_PORT);
	m_cS_Reference_Operation_dispatchOut_Operation_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_DISPATCHOUT_OPERATION_CS_INTERACTIONPOINT);
	m_cS_Reference_Operation_sendIn_EventOccurrence_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_SENDIN_EVENTOCCURRENCE_CS_INTERACTIONPOINT);
	m_cS_Reference_Operation_sendIn_EventOccurrence_Port = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_SENDIN_EVENTOCCURRENCE_PORT);
	m_cS_Reference_Operation_sendOut_EventOccurrence_Port = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_SENDOUT_EVENTOCCURRENCE_PORT);
	m_cS_Reference_Operation_sendOut_EventOccurrence_CS_InteractionPoint = factory->createEOperation_in_EContainingClass(m_cS_Reference_Class, CS_REFERENCE_OPERATION_SENDOUT_EVENTOCCURRENCE_CS_INTERACTIONPOINT);
	
}

void StructuredClassifiersPackageImpl::createCS_RequestPropagationStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_RequestPropagationStrategy_Class = factory->createEClass_in_EPackage(package, CS_REQUESTPROPAGATIONSTRATEGY_CLASS);
	
	
	m_cS_RequestPropagationStrategy_Operation_getName = factory->createEOperation_in_EContainingClass(m_cS_RequestPropagationStrategy_Class, CS_REQUESTPROPAGATIONSTRATEGY_OPERATION_GETNAME);
	m_cS_RequestPropagationStrategy_Operation_select_Reference_SemanticVisitor = factory->createEOperation_in_EContainingClass(m_cS_RequestPropagationStrategy_Class, CS_REQUESTPROPAGATIONSTRATEGY_OPERATION_SELECT_REFERENCE_SEMANTICVISITOR);
	
}

void StructuredClassifiersPackageImpl::createCS_StructuralFeatureOfInterfaceAccessStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_StructuralFeatureOfInterfaceAccessStrategy_Class = factory->createEClass_in_EPackage(package, CS_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_CLASS);
	
	
	m_cS_StructuralFeatureOfInterfaceAccessStrategy_Operation_getName = factory->createEOperation_in_EContainingClass(m_cS_StructuralFeatureOfInterfaceAccessStrategy_Class, CS_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_OPERATION_GETNAME);
	m_cS_StructuralFeatureOfInterfaceAccessStrategy_Operation_read_CS_Object_StructuralFeature = factory->createEOperation_in_EContainingClass(m_cS_StructuralFeatureOfInterfaceAccessStrategy_Class, CS_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_OPERATION_READ_CS_OBJECT_STRUCTURALFEATURE);
	m_cS_StructuralFeatureOfInterfaceAccessStrategy_Operation_write_CS_Object_Integer = factory->createEOperation_in_EContainingClass(m_cS_StructuralFeatureOfInterfaceAccessStrategy_Class, CS_STRUCTURALFEATUREOFINTERFACEACCESSSTRATEGY_OPERATION_WRITE_CS_OBJECT_INTEGER);
	
}

void StructuredClassifiersPackageImpl::createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory)
{
	m_cS_LinkKind_Class = factory->createEEnum_in_EPackage(package, CS_LINKKIND_CLASS);
	
}
