
#include "uml/impl/NodeImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Behavior.hpp"
#include "uml/Class.hpp"
#include "uml/Classifier.hpp"
#include "uml/CollaborationUse.hpp"
#include "uml/Comment.hpp"
#include "uml/CommunicationPath.hpp"
#include "uml/ConnectableElement.hpp"
#include "uml/Connector.hpp"
#include "uml/Constraint.hpp"
#include "uml/Dependency.hpp"
#include "uml/Deployment.hpp"
#include "uml/DeploymentTarget.hpp"
#include "uml/Element.hpp"
#include "uml/ElementImport.hpp"
#include "uml/Extension.hpp"
#include "uml/Feature.hpp"
#include "uml/Generalization.hpp"
#include "uml/GeneralizationSet.hpp"
#include "uml/InterfaceRealization.hpp"
#include "uml/NamedElement.hpp"
#include "uml/Namespace.hpp"
#include "uml/Node.hpp"
#include "uml/Operation.hpp"
#include "uml/Package.hpp"
#include "uml/PackageImport.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/Port.hpp"
#include "uml/Property.hpp"
#include "uml/Reception.hpp"
#include "uml/RedefinableElement.hpp"
#include "uml/StringExpression.hpp"
#include "uml/Substitution.hpp"
#include "uml/TemplateBinding.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/TemplateSignature.hpp"
#include "uml/UseCase.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
NodeImpl::NodeImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

NodeImpl::~NodeImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Node "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
NodeImpl::NodeImpl(std::weak_ptr<uml::Namespace> par_namespace)
:NodeImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
NodeImpl::NodeImpl(std::weak_ptr<uml::Element> par_owner)
:NodeImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
NodeImpl::NodeImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id)
:NodeImpl()
{
	switch(reference_id)
	{	
	case uml::umlPackage::PACKAGEABLEELEMENT_ATTRIBUTE_OWNINGPACKAGE:
		m_owningPackage = par_Package;
		m_namespace = par_Package;
		 return;
	case uml::umlPackage::TYPE_ATTRIBUTE_PACKAGE:
		m_package = par_Package;
		m_namespace = par_Package;
		 return;
	default:
	std::cerr << __PRETTY_FUNCTION__ <<" Reference not found in class with the given ID" << std::endl;
	}
   
}

//Additional constructor for the containments back reference
NodeImpl::NodeImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:NodeImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}


NodeImpl::NodeImpl(const NodeImpl & obj): NodeImpl()
{
	*this = obj;
}

NodeImpl& NodeImpl::operator=(const NodeImpl & obj)
{
	//call overloaded =Operator for each base class
	ClassImpl::operator=(obj);
	DeploymentTargetImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Node 
	 * which is generated by the compiler (as Node is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Node::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Node "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	//clone reference 'nestedNode'
	std::shared_ptr<Subset<uml::Node, uml::NamedElement>> nestedNodeList = obj.getNestedNode();
	if(nestedNodeList)
	{
		/*Subset*/
		m_nestedNode.reset(new Subset<uml::Node, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_nestedNode - Subset<uml::Node, uml::NamedElement >()" << std::endl;
		#endif
		
		/*Subset*/
		getNestedNode()->initSubset(getOwnedMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_nestedNode - Subset<uml::Node, uml::NamedElement >(getOwnedMember())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Node> nestedNodeindexElem: *nestedNodeList) 
		{
			std::shared_ptr<uml::Node> temp = std::dynamic_pointer_cast<uml::Node>((nestedNodeindexElem)->copy());
			m_nestedNode->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for nestedNode.")
	}
	/*Subset*/
	getNestedNode()->initSubset(getOwnedMember());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_nestedNode - Subset<uml::Node, uml::NamedElement >(getOwnedMember())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> NodeImpl::copy() const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	*element =(*this);
	element->setThisNodePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
std::shared_ptr<uml::CommunicationPath> NodeImpl::createCommunicationPath(bool end1IsNavigable, uml::AggregationKind end1Aggregation, std::string end1Name, int end1Lower, int end1Upper, const std::shared_ptr<uml::Node>& end1Node, bool end2IsNavigable, uml::AggregationKind end2Aggregation, std::string end2Name, int end2Lower, int end2Upper)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::CommunicationPath>> NodeImpl::getCommunicationPaths()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference nestedNode */
const std::shared_ptr<Subset<uml::Node, uml::NamedElement>>& NodeImpl::getNestedNode() const
{
	if(m_nestedNode == nullptr)
	{
		/*Subset*/
		m_nestedNode.reset(new Subset<uml::Node, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_nestedNode - Subset<uml::Node, uml::NamedElement >()" << std::endl;
		#endif
		
		/*Subset*/
		getNestedNode()->initSubset(getOwnedMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_nestedNode - Subset<uml::Node, uml::NamedElement >(getOwnedMember())" << std::endl;
		#endif
		
	}
    return m_nestedNode;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> NodeImpl::eContainer() const
{
	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_owningPackage.lock())
	{
		return wp;
	}
	if(auto wp = m_package.lock())
	{
		return wp;
	}

	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}

	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void NodeImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void NodeImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{

	ClassImpl::loadAttributes(loadHandler, attr_list);
	DeploymentTargetImpl::loadAttributes(loadHandler, attr_list);
}

void NodeImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("nestedNode") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "Node";
			}
			loadHandler->handleChildContainer<uml::Node>(this->getNestedNode());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	ClassImpl::loadNode(nodeName, loadHandler);
	DeploymentTargetImpl::loadNode(nodeName, loadHandler);
}

void NodeImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	ClassImpl::resolveReferences(featureID, references);
	DeploymentTargetImpl::resolveReferences(featureID, references);
}

void NodeImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ClassImpl::saveContent(saveHandler);
	DeploymentTargetImpl::saveContent(saveHandler);
	
	BehavioredClassifierImpl::saveContent(saveHandler);
	EncapsulatedClassifierImpl::saveContent(saveHandler);
	
	StructuredClassifierImpl::saveContent(saveHandler);
	
	ClassifierImpl::saveContent(saveHandler);
	
	NamespaceImpl::saveContent(saveHandler);
	RedefinableElementImpl::saveContent(saveHandler);
	TemplateableElementImpl::saveContent(saveHandler);
	TypeImpl::saveContent(saveHandler);
	
	PackageableElementImpl::saveContent(saveHandler);
	
	NamedElementImpl::saveContent(saveHandler);
	ParameterableElementImpl::saveContent(saveHandler);
	
	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void NodeImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Save 'nestedNode'
		for (std::shared_ptr<uml::Node> nestedNode : *this->getNestedNode()) 
		{
			saveHandler->addReference(nestedNode, "nestedNode", nestedNode->eClass() != package->getNode_Class());
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

std::shared_ptr<ecore::EClass> NodeImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getNode_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> NodeImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::NODE_ATTRIBUTE_NESTEDNODE:
			return eEcoreContainerAny(getNestedNode(),uml::umlPackage::NODE_CLASS); //15755
	}
	std::shared_ptr<Any> result;
	result = ClassImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = DeploymentTargetImpl::eGet(featureID, resolve, coreType);
	return result;
}

bool NodeImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::NODE_ATTRIBUTE_NESTEDNODE:
			return getNestedNode() != nullptr; //15755
	}
	bool result = false;
	result = ClassImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = DeploymentTargetImpl::internalEIsSet(featureID);
	return result;
}

bool NodeImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::NODE_ATTRIBUTE_NESTEDNODE:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<uml::Node>> _nestedNode = getNestedNode();
	
						for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
						{
							std::shared_ptr<uml::Node> valueToAdd = std::dynamic_pointer_cast<uml::Node>(anEObject);
	
							if (valueToAdd)
							{
								if(_nestedNode->find(valueToAdd) == -1)
								{
									_nestedNode->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'nestedNode'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'nestedNode'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	bool result = false;
	result = ClassImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = DeploymentTargetImpl::eSet(featureID, newValue);
	return result;
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> NodeImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// uml::Node::createCommunicationPath(bool, uml::AggregationKind, std::string, int, int, uml::Node, bool, uml::AggregationKind, std::string, int, int) : uml::CommunicationPath: 2087191607
		case umlPackage::NODE_OPERATION_CREATECOMMUNICATIONPATH_BOOLEAN_UNLIMITEDNATURAL:
		{
			//Retrieve input parameter 'end1IsNavigable'
			//parameter 0
			bool incoming_param_end1IsNavigable;
			Bag<Any>::const_iterator incoming_param_end1IsNavigable_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_end1IsNavigable = (*incoming_param_end1IsNavigable_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end1IsNavigable'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end1Aggregation'
			//parameter 1
			uml::AggregationKind incoming_param_end1Aggregation;
			Bag<Any>::const_iterator incoming_param_end1Aggregation_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_end1Aggregation = (*incoming_param_end1Aggregation_arguments_citer)->get<uml::AggregationKind>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end1Aggregation'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end1Name'
			//parameter 2
			std::string incoming_param_end1Name;
			Bag<Any>::const_iterator incoming_param_end1Name_arguments_citer = std::next(arguments->begin(), 2);
			try
			{
				incoming_param_end1Name = (*incoming_param_end1Name_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end1Name'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end1Lower'
			//parameter 3
			int incoming_param_end1Lower;
			Bag<Any>::const_iterator incoming_param_end1Lower_arguments_citer = std::next(arguments->begin(), 3);
			try
			{
				incoming_param_end1Lower = (*incoming_param_end1Lower_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end1Lower'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end1Upper'
			//parameter 4
			int incoming_param_end1Upper;
			Bag<Any>::const_iterator incoming_param_end1Upper_arguments_citer = std::next(arguments->begin(), 4);
			try
			{
				incoming_param_end1Upper = (*incoming_param_end1Upper_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end1Upper'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end1Node'
			//parameter 5
			std::shared_ptr<uml::Node> incoming_param_end1Node;
			Bag<Any>::const_iterator incoming_param_end1Node_arguments_citer = std::next(arguments->begin(), 5);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_end1Node_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_end1Node = std::dynamic_pointer_cast<uml::Node>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'end1Node'. Failed to invoke operation 'createCommunicationPath'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'end1Node'. Failed to invoke operation 'createCommunicationPath'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'end2IsNavigable'
			//parameter 6
			bool incoming_param_end2IsNavigable;
			Bag<Any>::const_iterator incoming_param_end2IsNavigable_arguments_citer = std::next(arguments->begin(), 6);
			try
			{
				incoming_param_end2IsNavigable = (*incoming_param_end2IsNavigable_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end2IsNavigable'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end2Aggregation'
			//parameter 7
			uml::AggregationKind incoming_param_end2Aggregation;
			Bag<Any>::const_iterator incoming_param_end2Aggregation_arguments_citer = std::next(arguments->begin(), 7);
			try
			{
				incoming_param_end2Aggregation = (*incoming_param_end2Aggregation_arguments_citer)->get<uml::AggregationKind>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end2Aggregation'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end2Name'
			//parameter 8
			std::string incoming_param_end2Name;
			Bag<Any>::const_iterator incoming_param_end2Name_arguments_citer = std::next(arguments->begin(), 8);
			try
			{
				incoming_param_end2Name = (*incoming_param_end2Name_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end2Name'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end2Lower'
			//parameter 9
			int incoming_param_end2Lower;
			Bag<Any>::const_iterator incoming_param_end2Lower_arguments_citer = std::next(arguments->begin(), 9);
			try
			{
				incoming_param_end2Lower = (*incoming_param_end2Lower_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end2Lower'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'end2Upper'
			//parameter 10
			int incoming_param_end2Upper;
			Bag<Any>::const_iterator incoming_param_end2Upper_arguments_citer = std::next(arguments->begin(), 10);
			try
			{
				incoming_param_end2Upper = (*incoming_param_end2Upper_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'end2Upper'. Failed to invoke operation 'createCommunicationPath'!")
				return nullptr;
			}
		
			result = eEcoreAny(this->createCommunicationPath(incoming_param_end1IsNavigable,incoming_param_end1Aggregation,incoming_param_end1Name,incoming_param_end1Lower,incoming_param_end1Upper,incoming_param_end1Node,incoming_param_end2IsNavigable,incoming_param_end2Aggregation,incoming_param_end2Name,incoming_param_end2Lower,incoming_param_end2Upper), uml::umlPackage::COMMUNICATIONPATH_CLASS);
			break;
		}
		// uml::Node::getCommunicationPaths() : uml::CommunicationPath[*]: 810632424
		case umlPackage::NODE_OPERATION_GETCOMMUNICATIONPATHS:
		{
			std::shared_ptr<Bag<uml::CommunicationPath>> resultList = this->getCommunicationPaths();
			return eEcoreContainerAny(resultList,uml::umlPackage::COMMUNICATIONPATH_CLASS);
			break;
		}

		default:
		{
			// call superTypes
			result = DeploymentTargetImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			result = ClassImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Node> NodeImpl::getThisNodePtr() const
{
	return m_thisNodePtr.lock();
}
void NodeImpl::setThisNodePtr(std::weak_ptr<uml::Node> thisNodePtr)
{
	m_thisNodePtr = thisNodePtr;
	setThisClassPtr(thisNodePtr);
	setThisDeploymentTargetPtr(thisNodePtr);
}


