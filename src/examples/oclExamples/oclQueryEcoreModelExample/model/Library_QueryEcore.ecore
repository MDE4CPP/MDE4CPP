<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="Library_QueryEcore" nsURI="http://www.example.org/Library_QueryEcore"
    nsPrefix="Library_QueryEcore">
  <eAnnotations source="http://tu-ilmenau.de/see/prepareApplication">
    <details key="includes" value="#include &lt;string>&#xA;#include &lt;sstream>&#xA;#include &lt;oclParser/Utilities/OclEcore.h>&#xA;#include &lt;ecore/EObject.hpp>&#xA;#include &lt;ecore/EObjectAny.hpp>&#xA;#include &quot;abstractDataTypes/EcoreAny.hpp&quot;&#xA;#include &quot;abstractDataTypes/EcoreContainerAny.hpp&quot;&#xA;#include &lt;ecore/EFactory.hpp>&#xA;#include &lt;ecore/EPackage.hpp>&#xA;#include &lt;ecore/ecorePackage.hpp>&#xA;#include &lt;ecore/EClassifier.hpp>&#xA;#include &lt;ecore/EObjectContainer.hpp>&#xA;#include &lt;ecore/EEnum.hpp>&#xA;#include &lt;ecore/EClass.hpp>&#xA;#include &lt;ecore/EReference.hpp>&#xA;#include &lt;ecore/EOperation.hpp>&#xA;#include &lt;ecore/EAttribute.hpp>&#xA;#include &lt;ecore/EParameter.hpp>&#xA;#include &lt;ecore/EEnumLiteral.hpp>&#xA;#include &lt;ecore/ETypeParameter.hpp>&#xA;#include &lt;ecore/EObjectContainer.hpp>"/>
    <details key="body" value="&#x9;std::shared_ptr&lt;Library_QueryEcore::LibraryModel> libModel=factory->createLibraryModel();&#xA;&#xA;&#x9;std::shared_ptr&lt;Library_QueryEcore::Library> lib1= createTestLibrary(libModel,&quot;TU Ilmenau - University Library&quot;);&#xA;&#x9;std::shared_ptr&lt;Library_QueryEcore::Library> lib2= createTestLibrary(libModel,&quot;FH Schmalkalden - Cellarius University Library Schmalkalden&quot;);&#xA;&#xA;&#x9;std::string enterValue;&#xA;&#xA;&#x9;std::shared_ptr&lt;ecore::EObject> context=libModel;&#xA;&#x9;Clear();&#xA;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;std::cout &lt;&lt; &quot;Enter an OCL expression or a command:&quot;;&#xA;&#x9;std::string resultString=&quot;&quot;;&#xA;&#x9;std::getline(std::cin, enterValue);&#xA;&#x9;while(enterValue.compare(&quot;x&quot;))&#xA;&#x9;{&#xA;&#x9;&#x9;Clear();&#xA;&#xA;&#x9;&#x9;if(enterValue.size()==1)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(0==enterValue.compare(&quot;m&quot;))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;currentContextNumber=0;&#xA;&#x9;&#x9;&#x9;&#x9;context=libModel;&#xA;&#x9;&#x9;&#x9;&#x9;resultString =&quot;Context set to Library Model&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if(0==enterValue.compare(&quot;i&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;currentContextNumber=1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;context=lib1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = &quot;Context set to &quot; + lib1->getName();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(0==enterValue.compare(&quot;s&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentContextNumber=2;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;context=lib2;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = &quot;Context set to &quot; + lib2->getName();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(0==enterValue.compare(&quot;e&quot;))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;currentContextNumber=3;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;context=libModel->eClass();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = &quot;Context set to Metamodel: &quot; + libModel->eClass()->getName();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt; &quot;___________ Result: ___________&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int commandNumber=std::stoi(enterValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if( (commandNumber>=0) &amp;&amp; (commandNumber&lt;=numberOfQueries))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::string command=std::string(queryList[commandNumber])+&quot;\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString =  std::string(&quot;Query: &quot;) + command ;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Any anyValue=queryValue(command, context);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = resultString  + print(anyValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch (std::exception &amp;e) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString =  std::string(&quot;exception : &quot;) + e.what();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch (...) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = &quot;unknown Error\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = &quot;unknown Command\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultString = &quot;unknown Command\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;printMainMenu(currentContextNumber);&#xA;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt; &quot;___________ Result: ___________&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;Any anyValue=queryValue(enterValue, context);&#xA;&#x9;&#x9;&#x9;&#x9;resultString =  std::string(&quot;Query: &quot;) + enterValue + &quot;\n&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;resultString = print(anyValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (std::exception &amp;e) {&#xA;&#x9;&#x9;&#x9;&#x9;resultString =  std::string(&quot;exception : &quot;) + e.what();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;catch (...) {&#xA;&#x9;&#x9;&#x9;&#x9;resultString = &quot;unknown Error\n&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;std::cout&lt;&lt; resultString &lt;&lt; std::endl&lt;&lt; std::endl;&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;Enter an OCL expression or a command:&quot;;&#xA;&#x9;&#x9;std::getline(std::cin, enterValue);&#xA;&#x9;}"/>
    <details key="library" value="OclParser"/>
    <details key="additionalFunctions" value="/*&#xA;Helper functions&#xA;*/&#xA;&#xA;Any queryValue(const std::string&amp; query, std::shared_ptr&lt;ecore::EObject> context)&#xA;{&#xA;&#x9;Utilities::Ocl ocl;&#xA;    try {&#xA;        if(ocl.query(query, context)) {&#xA;            return ocl.getResultValue();&#xA;        } else {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;    return nullptr;&#xA;}&#xA;&#xA;std::string printLibrary(const std::shared_ptr&lt;Library_QueryEcore::Library> library)&#xA;{&#xA;&#x9;std::ostringstream returnStringStream;&#xA;&#x9;if(nullptr!=library)&#xA;&#x9;{&#xA;&#x9;&#x9;returnStringStream &lt;&lt; library->getName() &lt;&lt; &quot;: &quot;  &lt;&lt; (library->isOpened() ? &quot;open&quot; : &quot;closed&quot;) &lt;&lt; &quot;: Num books: &quot; &lt;&lt; library->getNbBooks() &lt;&lt; std::endl;&#xA;&#x9;}&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string printLibraryModel(const std::shared_ptr&lt;Library_QueryEcore::LibraryModel> model)&#xA;{&#xA;&#x9;std::ostringstream returnStringStream;&#xA;&#x9;if(nullptr !=model)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;Library_QueryEcore::Library> > libraries = model->getLibraries();&#xA;&#x9;&#x9;returnStringStream &lt;&lt; &quot;LibraryModel. Number of libraries: &quot; &lt;&lt; libraries->size() &lt;&lt; std::endl;&#xA;&#x9;&#x9;for (std::shared_ptr&lt;Library_QueryEcore::Library> lib : *(libraries))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; printLibrary(lib);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string printBook(const std::shared_ptr&lt;Library_QueryEcore::Book> book)&#xA;{&#xA;&#x9;std::ostringstream returnStringStream;&#xA;&#x9;if(nullptr!=book)&#xA;&#x9;{&#xA;&#x9;&#x9;returnStringStream &lt;&lt; book->getTitle() &lt;&lt; &quot;: &quot;&#x9;&lt;&lt; (book->isAvailable() ? &quot;available&quot; : &quot;not available&quot;) &lt;&lt; &quot;: Num copies: &quot; &lt;&lt; book->getCopies() &lt;&lt; &quot;: category: &quot;&#x9;&lt;&lt; (int) ((book->getCategory())) &lt;&lt; std::endl;&#xA;&#x9;}&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;&#xA;std::string printEClassifier(std::shared_ptr&lt;ecore::EClass> anEClass)&#xA;{&#xA;&#x9;std::ostringstream returnStringStream;&#xA;&#x9;if(nullptr!= anEClass)&#xA;&#x9;{&#xA;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;EClass>:&quot; &lt;&lt; anEClass->getName() &lt;&lt; &quot;:&quot;&lt;&lt; anEClass->getName()&lt;&lt;std::endl;&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;ecore::EAttribute, ecore::EStructuralFeature>> attributes = anEClass->getEAttributes();&#xA;&#x9;&#x9;Any eAnyValue= eAnyBag(attributes,ecore::ecorePackage::EATTRIBUTE_CLASS);&#xA;&#x9;&#x9;returnStringStream &lt;&lt; Library_QueryEcore::Library_QueryEcoreFactory::eInstance()->convertToString(nullptr,  eAnyValue);&#xA;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;ecore::EReference, ecore::EStructuralFeature>> references = anEClass->getEReferences();&#xA;&#x9;&#x9;eAnyValue =eAnyBag(references,ecore::ecorePackage::EREFERENCE_CLASS);&#xA;&#x9;&#x9;returnStringStream &lt;&lt; Library_QueryEcore::Library_QueryEcoreFactory::eInstance()->convertToString(nullptr, eAnyValue);&#xA;&#x9;}&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;&#xA;std::string print(Any value);&#xA;&#xA;std::string printEObject(std::shared_ptr&lt;ecore::EObject> eobj) &#xA;{&#xA;&#x9;std::ostringstream returnStringStream;&#xA;    if(eobj!= nullptr) &#xA;    {&#xA;&#x9;&#x9;std::shared_ptr&lt;ecore::EClass> anEClass= std::dynamic_pointer_cast&lt;ecore::EClass>(eobj);&#xA;&#x9;&#x9;if(nullptr !=anEClass) // It's an meta-clas description! print MetaClass&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; printEClassifier(anEClass);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;switch (eobj->getMetaElementID())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECT_CLASS: // unknown or primitive type&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECLASS_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EATTRIBUTE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EREFERENCE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESTRUCTURALFEATURE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOPERATION_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBOOLEANOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBOOLEAN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTEARRAY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTEOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECHARACTEROBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECHAR_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDATE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ERESOURCE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EINTEGEROBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBIGINTEGER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESHORT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESHORTOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EINT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ELONGOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ELONG_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EFLOATOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EFLOAT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBIGDECIMAL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDOUBLE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESTRING_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EJAVAOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EENUMERATOR_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDIAGNOSTICCHAIN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; Library_QueryEcore::Library_QueryEcoreFactory::eInstance()->convertToString(nullptr, eAnyObject(eobj,eobj->getMetaElementID()));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ANY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTANY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObjectAny> eObjectAny=std::dynamic_pointer_cast&lt;ecore::EObjectAny>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=eObjectAny)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Any: &quot; &lt;&lt; print(eObjectAny->getAny()) &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTCONTAINER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObjectContainer> eObjectContainer= std::dynamic_pointer_cast&lt;ecore::EObjectContainer>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=eObjectContainer)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ecore::EObject>> eObjectBag =  eObjectContainer->getContainer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;EObjectContainer> size: &quot; &lt;&lt; eObjectBag->size();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(const std::shared_ptr&lt;ecore::EObject> object: *eObjectBag)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#x9;// recursive Call of printEObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;  &quot;\t&quot; &lt;&lt; printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::LIBRARYMODEL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::LibraryModel> model= std::dynamic_pointer_cast&lt;Library_QueryEcore::LibraryModel>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=model)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; printLibraryModel(model);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::LIBRARY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Library> library= std::dynamic_pointer_cast&lt;Library_QueryEcore::Library>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=library)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; printLibrary(library);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::BOOK_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Book> book=  std::dynamic_pointer_cast&lt;Library_QueryEcore::Book>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=book)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;  printBook(book);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::MEMBER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Member> member= std::dynamic_pointer_cast&lt;Library_QueryEcore::Member>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=member)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Member: &quot; &lt;&lt; member->getName()&lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::LOAN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Loan> loan = std::dynamic_pointer_cast&lt;Library_QueryEcore::Loan>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=loan)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Loan: &quot; &lt;&lt; loan->getDate() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;EObject (typeId: &quot; &lt;&lt; eobj->getMetaElementID()  &lt;&lt;  &quot;)&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string print(Any value)&#xA;{&#xA;&#x9;std::ostringstream returnStringStream;&#xA;&#x9;bool handled=false;&#xA;&#x9;if(nullptr==value )&#xA;&#x9;{&#xA;&#x9;&#x9;return &quot;&quot;;&#xA;&#x9;}&#xA;&#x9;if(value->isContainer())&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;switch (value->getTypeId())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ecore::EObject>> eObjectBag;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectBag= value->get&lt;std::shared_ptr&lt;Bag&lt;ecore::EObject>>>(); //throws exception&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;Bag&lt;EObject>> size: &quot; &lt;&lt; eObjectBag->size() &lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;AnyEObjectBag> anyObjectBag = std::dynamic_pointer_cast&lt;AnyEObjectBag>(value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=anyObjectBag)// AnyEobjectBag?&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectBag=anyObjectBag->getBag();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;AnyEObjectBag&lt;EObject>> size: &quot; &lt;&lt; eObjectBag->size() &lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;An EObject Container&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=eObjectBag)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(const std::shared_ptr&lt;ecore::EObject> object: *eObjectBag)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#x9;// recursive Call of convertToString via new Any EObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;\t&quot;&lt;&lt; printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true; break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTCONTAINER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObjectContainer> eObjectContainer = value->get&lt;std::shared_ptr&lt;ecore::EObjectContainer>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ecore::EObject>> eObjectBag =  eObjectContainer->getContainer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;EObjectContainer> size: &quot; &lt;&lt; eObjectBag->size() &lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for(const std::shared_ptr&lt;ecore::EObject> object: *eObjectBag)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#x9;// recursive Call of convertToString via new Any EObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;\t&quot;&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true; break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;AnyEObjectBag> anyObjectBag = std::dynamic_pointer_cast&lt;AnyEObjectBag>(value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=anyObjectBag)// AnyEObjectBag?&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ecore::EObject>> eObjectBag=anyObjectBag->getBag();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;AnyEObjectBag> size: &quot; &lt;&lt; eObjectBag->size() &lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(const std::shared_ptr&lt;ecore::EObject> object: *eObjectBag)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#x9;// recursive Call of convertToString via new Any EObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;\t&quot;&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true; break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else // last supported type bag&lt;Any>&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;AnyObject>> anyBag = value->get&lt;std::shared_ptr&lt;Bag&lt;AnyObject>>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;unsigned int size=anyBag->size();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;Bag&lt;Any>> size: &quot; &lt;&lt; size&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(unsigned int i = 0; i &lt; size; i++)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;\t&quot;&lt;&lt; print(anyBag->at(i));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true; break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;&quot;&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;try{&#xA;&#x9;&#x9;&#x9;switch(value->getTypeId())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECT_CLASS: // unknown or primitive type&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> eobj = value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return printEObject(eobj );&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTCONTAINER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObjectContainer> eObjectContainer= nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectContainer= value->get&lt;std::shared_ptr&lt;ecore::EObjectContainer>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectContainer= std::dynamic_pointer_cast&lt;ecore::EObjectContainer>(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ecore::EObject>> eObjectBag =  eObjectContainer->getContainer();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;&lt;EObjectContainer> size: &quot; &lt;&lt; eObjectBag->size() &lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;for(const std::shared_ptr&lt;ecore::EObject> object: *eObjectBag)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#x9;// recursive Call of convertToString via new Any EObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;\t&quot;&lt;&lt;printEObject(object)&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECLASS_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EATTRIBUTE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EREFERENCE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESTRUCTURALFEATURE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOPERATION_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBOOLEANOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBOOLEAN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTEARRAY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTEOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECHARACTEROBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECHAR_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDATE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ERESOURCE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EINTEGEROBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBIGINTEGER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESHORT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESHORTOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EINT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ELONGOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ELONG_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EFLOATOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EFLOAT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBIGDECIMAL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDOUBLE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESTRING_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EJAVAOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EENUMERATOR_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDIAGNOSTICCHAIN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; Library_QueryEcore::Library_QueryEcoreFactory::eInstance()->convertToString(nullptr, value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTANY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObjectAny> eObjectAny=nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> aObject = value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectAny = std::dynamic_pointer_cast&lt;ecore::EObjectAny>(aObject);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...) // 2. try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectAny= value->get&lt;std::shared_ptr&lt;ecore::EObjectAny>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// recursive Call of convertToString via new Any EObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=eObjectAny)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Any: &quot; &lt;&lt; print(eObjectAny->getAny());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case ecore::ecorePackage::ANY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObjectAny> eObjectAny=nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> aObject = value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectAny = std::dynamic_pointer_cast&lt;ecore::EObjectAny>(aObject);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...) // 2. try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;eObjectAny= value->get&lt;std::shared_ptr&lt;ecore::EObjectAny>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...) // 2. last try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;Any anAny= value->get&lt;Any>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Any: &quot; &lt;&lt; print(anAny);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// recursive Call of convertToString via new Any EObject Value&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr!=eObjectAny)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Any: &quot; &lt;&lt; print(eObjectAny->getAny());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;// Model types are not supported right now --> manual handling&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::LIBRARYMODEL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::LibraryModel> model= nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;model= value->get&lt;std::shared_ptr&lt;Library_QueryEcore::LibraryModel>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=model)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream&lt;&lt;printLibraryModel(model);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::BOOK_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Book> book= nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;book= value->get&lt;std::shared_ptr&lt;Library_QueryEcore::Book>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=book)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; printBook(book);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::LIBRARY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Library> library= nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;library= value->get&lt;std::shared_ptr&lt;Library_QueryEcore::Library>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=library)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; printLibrary(library);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::MEMBER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Member> member=nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;member = value->get&lt;std::shared_ptr&lt;Library_QueryEcore::Member>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=member)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;&quot;Member: &quot;&lt;&lt; member->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case Library_QueryEcore::Library_QueryEcorePackage::LOAN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Library_QueryEcore::Loan> loan = nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;loan = value->get&lt;std::shared_ptr&lt;Library_QueryEcore::Loan>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr !=loan)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;&quot;Loan: &quot;&lt;&lt; loan->getDate()&lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream&lt;&lt;printEObject(object);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;if(!handled)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EEnumLiteral> liter = value->get&lt;std::shared_ptr&lt;ecore::EEnumLiteral>>();&#xA;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; liter->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;&#x9;} catch (...) { }&#xA;&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;bool result = value->get&lt;bool>();&#xA;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;std::string result = value->get&lt;std::string>();&#xA;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;int result = value->get&lt;int>();&#xA;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;&#x9;double result = value->get&lt;double>();&#xA;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Any (typeId: &quot; &lt;&lt; value->getTypeId() &lt;&lt;&quot;)&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return returnStringStream.str();&#xA;&#xA;}&#xA;&#xA;std::shared_ptr&lt;Library_QueryEcore::Library> createTestLibrary(std::shared_ptr&lt;Library_QueryEcore::LibraryModel> libModel, std::string name)&#xA;{&#xA;&#x9;std::shared_ptr&lt;Library_QueryEcore::Library_QueryEcoreFactory> factory = Library_QueryEcore::Library_QueryEcoreFactory::eInstance();&#xA;    std::shared_ptr&lt;Library_QueryEcore::Library> lib = factory ->createLibrary_as_libraries_in_LibraryModel(libModel);&#xA;&#xA;    lib->setName(name);&#xA;    std::shared_ptr&lt;Library_QueryEcore::Book> bookMag = factory->createBook_as_books_in_Library(lib);&#xA;&#xA;    bookMag->setTitle(&quot;Magritte&quot;);&#xA;&#xA;    std::shared_ptr&lt;Writer> writer=factory->createWriter_as_writers_in_Library(lib);&#xA;    bookMag->setCategory(BookCategory::ART);&#xA;    writer->setName(&quot;David Sylvester&quot;);&#xA;    bookMag->getWriters()->add(writer);&#xA;    bookMag->setAvailable(true);&#xA;    bookMag->setCopies(2);&#xA;&#xA;    std::shared_ptr&lt;Member> paul=factory->createMember_as_members_in_Library(lib);&#xA;&#x9;paul->setName(&quot;Paul&quot;);&#xA;&#xA;    std::shared_ptr&lt;Loan> loan=factory->createLoan_as_loans_in_Library(lib);&#xA;    loan->setMember(paul);&#xA;    loan->setBook(bookMag);&#xA;    std::shared_ptr&lt;Library_QueryEcore::Book> book=nullptr;&#xA;&#x9;for(int i=0; i&lt;5;i++)&#xA;&#x9;{&#xA;&#x9;&#x9;book = factory->createBook_as_books_in_Library(lib);&#xA;&#x9;&#x9;std::string title=std::to_string(i);&#xA;&#x9;&#x9;book->setTitle(&quot;book # &quot;+title);&#xA;&#x9;}&#xA;&#xA;&#x9;return lib;&#xA;}&#xA;&#xA;int currentContextNumber=0;&#xA;const int numberOfQueries=10;&#xA;std::string queryList[numberOfQueries]={&quot;self&quot;,&quot;self.name&quot;, &quot;self.title&quot;,&quot;self->eContents()&quot;,&quot;self->eAllContents()&quot;,&quot;self->getLib(0)&quot;,&quot;self->calcBookNum()&quot;,&quot;self.books&quot;, &quot;self.members&quot;, &quot;self->eClass()&quot;};&#xA;&#xA;void Clear()&#xA;{&#xA;#if defined _WIN32&#xA;    system(&quot;cls&quot;);&#xA;    //clrscr(); // including header file : conio.h&#xA;#elif defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)&#xA;    system(&quot;clear&quot;);&#xA;    //std::cout&lt;&lt; u8&quot;\033[2J\033[1;1H&quot;; //Using ANSI Escape Sequences&#xA;#elif defined (__APPLE__)&#xA;    system(&quot;clear&quot;);&#xA;#endif&#xA;}&#xA;&#xA;void printMainMenu(int contextNumber)&#xA;{&#xA;&#x9;std::cout &lt;&lt; &quot;OCL Query Ecore Main Menu&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;_________________________&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;Current context: &quot;;&#xA;&#x9;switch(contextNumber)&#xA;&#x9;{&#xA;&#x9;&#x9;case 0:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;Library Model&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case 1:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;TU Ilmenau - University Library&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case 2:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;FH Schmalkalden - Cellarius University Library Schmalkalden&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case 3:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;Metamodel of Library Model (ecore)&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;Library Model&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;std::cout &lt;&lt; &quot;Commands: &quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;\tset context:&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;\t\t- m: select Library Model&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;\t\t- i: select TU Ilmenau - University Library&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;\t\t- s: select FH Schmalkalden - Cellarius University Library Schmalkalden&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;\t\t- e: select Metamodel of Library Model&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;\tpredefined Queries:&quot; &lt;&lt; std::endl;&#xA;&#x9;for(int i=0; i&lt;numberOfQueries;i++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;\t\t- &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; queryList[i] &lt;&lt; std::endl;&#xA;&#x9;}&#xA;&#x9;std::cout &lt;&lt; &quot;\tExit: x&quot; &lt;&lt; std::endl;&#xA;}&#xA;"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Library">
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Library inv: self.opened"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Library inv: self.nbBooks > 0"/>
    </eAnnotations>
    <eOperations name="addMember" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="m" eType="#//Member"/>
    </eOperations>
    <eOperations name="addLoan" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="m" eType="#//Member"/>
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eOperations name="addBook" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eOperations name="open">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    this->setOpened(true);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="close">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    this->setOpened(false);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="closed" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    return !this->isOpened();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="calcBookNum" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="m_nbBooks=0;&#xA;&#x9;for(const std::shared_ptr&lt;Book> book: *(m_books))&#xA;&#x9;{&#xA;&#x9;&#x9;m_nbBooks += book->getCopies();&#xA;&#x9;}&#xA;&#x9;return m_nbBooks;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="New Library"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="books" upperBound="-1"
        eType="#//Book" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="members" upperBound="-1"
        eType="#//Member" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="loans" upperBound="-1"
        eType="#//Loan" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="opened" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="nbBooks" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="0"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="writers" upperBound="-1"
        eType="#//Writer" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Member">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Book">
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Book inv: self.copies > 0"/>
    </eAnnotations>
    <eOperations name="addCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    m_copies += nbCopies;&#xA;    return m_copies;"/>
      </eAnnotations>
      <eParameters name="nbCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
    </eOperations>
    <eOperations name="incrCopies">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="   m_copies++;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="title" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="new Book"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="copies" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="category" eType="#//BookCategory"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="available" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="writers" lowerBound="1"
        upperBound="-1" eType="#//Writer"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Loan">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="date" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="book" eType="#//Book"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" eType="#//Member"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Writer">
    <eOperations name="write">
      <eAnnotations source="http://www.eclipse.org/OCL">
        <details key="OCL" value="context Book inv: self.copies > 0"/>
      </eAnnotations>
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"
        defaultValueLiteral="Unknown writer"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="BookCategory">
    <eLiterals name="MISTERY"/>
    <eLiterals name="BIOGRAPHY" value="1"/>
    <eLiterals name="HISTORY" value="2"/>
    <eLiterals name="ART" value="3" literal=""/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LibraryModel">
    <eOperations name="getLib" eType="#//Library">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="return this->m_libraries->at(index);"/>
      </eAnnotations>
      <eParameters name="index" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="libraries" upperBound="-1"
        eType="#//Library" containment="true"/>
  </eClassifiers>
</ecore:EPackage>
