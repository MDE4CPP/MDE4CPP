//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_ACTIONS_LINKACTIONACTIVATIONLINKACTIONACTIVATIONIMPL_HPP
#define FUML_SEMANTICS_ACTIONS_LINKACTIONACTIVATIONLINKACTIONACTIVATIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "fUML/fUML.hpp" 

// model includes
#include "../LinkActionActivation.hpp"

#include "fUML/Semantics/Actions/impl/ActionsFactoryImpl.hpp"
#include "fUML/Semantics/Actions/impl/ActionActivationImpl.hpp"

//*********************************
namespace fUML::Semantics::Actions 
{
	class FUML_API LinkActionActivationImpl : virtual public ActionActivationImpl, virtual public LinkActionActivation 
	{
		public: 
			LinkActionActivationImpl(const LinkActionActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;
			LinkActionActivationImpl& operator=(LinkActionActivationImpl const&); 

		protected:
			friend class fUML::Semantics::Actions::ActionsFactoryImpl;
			LinkActionActivationImpl();
			virtual std::shared_ptr<fUML::Semantics::Actions::LinkActionActivation> getThisLinkActionActivationPtr() const;
			virtual void setThisLinkActionActivationPtr(std::weak_ptr<fUML::Semantics::Actions::LinkActionActivation> thisLinkActionActivationPtr);

			//Additional constructors for the containments back reference
			LinkActionActivationImpl(std::weak_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> par_group);

		public:
			//destructor
			virtual ~LinkActionActivationImpl() = 0;
			
			//*********************************
			// Operations
			//*********************************
			virtual bool endMatchesEndData(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Link>& link, const std::shared_ptr<uml::LinkEndData>& endData) ;
			virtual std::shared_ptr<uml::Association> getAssociation() ;
			virtual bool linkMatchesEndData(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Link>& link, const std::shared_ptr<Bag<uml::LinkEndData>>& endDataList) ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<uml::LinkAction>& getLinkAction() const ;
			virtual void setLinkAction(const std::shared_ptr<uml::LinkAction>&) ;
			/*Additional Setter for 'ActionActivation::action' redefined by reference 'linkAction'*/
			virtual void setAction(const std::shared_ptr<uml::Action>&) ;
			/*Additional Setter for 'ActivityNodeActivation::node' redefined by reference 'linkAction'*/
			virtual void setNode(const std::shared_ptr<uml::ActivityNode>&) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual const std::shared_ptr<ecore::EClass>& eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<fUML::Semantics::Actions::LinkActionActivation> m_thisLinkActionActivationPtr;
	};
}
#endif /* end of include guard: FUML_SEMANTICS_ACTIONS_LINKACTIONACTIVATIONLINKACTIONACTIVATIONIMPL_HPP */
