//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef TYPESPLUGIN_HPP
#define TYPESPLUGIN_HPP

// namespace macro header include
#include "types/types.hpp"

#include "pluginFramework/EcoreModelPlugin.hpp"

namespace types
{
			class typesPackage;
			class typesFactory;
}
namespace types
{
	class TYPES_API typesPlugin : virtual public EcoreModelPlugin
	{
		public:
			virtual ~typesPlugin(){};
			static std::shared_ptr<typesPlugin> eInstance();
	
			virtual std::string eclipseURI() = 0;
			virtual std::string eNAME() = 0;
			virtual std::string eNS_URI() = 0;
			virtual std::string eNS_PREFIX() = 0;
	 		
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EFactory> getEFactory() = 0;
			virtual std::shared_ptr<ecore::EPackage> getEPackage() = 0;
			virtual std::shared_ptr<types::typesPackage> gettypesPackage() = 0;
			virtual std::shared_ptr<types::typesFactory> gettypesFactory() = 0;
		protected:
			typesPlugin(){};
	};
}
#endif /* end of include guard: TYPESPLUGIN_HPP */
