[comment encoding = UTF-8 /]
[module generateCMake( 'http://www.eclipse.org/uml2/5.0.0/UML' )]

[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::keywords /]

[template public generateCMake( aPackage : Package ) { 
	packageName : String = getPackageName().toUpperFirst(); 
} ]
[comment	build application files/]
[file( 'CMakeLists.txt', false, 'UTF-8' )]
#############################################################################
#																			#
#		 			CMakeList created by UML4CPP Generator					# 
#																			#
#############################################################################

# C++ project of application for [packageName/].uml, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED( VERSION 3.9 )

PROJECT( TestApp_[packageName/] )

IF( NOT CMAKE_BUILD_TYPE ) 
    SET( CMAKE_BUILD_TYPE Debug )
ENDIF( NOT CMAKE_BUILD_TYPE )

SET( CMAKE_CXX_STANDARD 14 )

[comment IF( "${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang" ) -> not necessary after removing openmp/]
SET( CMAKE_CXX_FLAGS "-Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fmax-errors=5" )
SET( CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb" )
SET( CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG" )

string( REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME} )

SET( SOURCE_FILES
	application/main.cpp
	helper/TestSuiteCountHelper.cpp
	helper/TestSuiteMemoryHelper.cpp
	helper/TestSuiteTimeHelper.cpp
[for( aClass : Class | aPackage.allOwnedElements()->select( e | e.oclIsKindOf( uml::Class ) )->select( e | not( e.oclIsKindOf( FunctionBehavior ) or e.oclIsKindOf( Activity ) ) ).oclAsType( uml::Class )->sortedBy( name ) )]
	[aClass.ancestors()->filter( Package )->first().getPackageName()/]/[aClass.name.toUpperFirst()/].cpp
[/for]
 )

INCLUDE_DIRECTORIES( 
	.
	${MDE4CPP_HOME}/application/tools/cute
	${MDE4CPP_HOME}/application/include
 )

# Apple specific stuff
IF( APPLE )
  SET( CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup" )
  SET( CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup" )
ENDIF( APPLE )

IF( UNIX AND NOT APPLE )
    # for Linux, BSD, Solaris, Minix
	[generateCMakeFindLibraryCommands( '.so', 'bin', 'Linux' )/]
ELSEIF( APPLE )
	[generateCMakeFindLibraryCommands( '.dylib', 'bin', 'Apple' )/]
ELSE()
	[generateCMakeFindLibraryCommands( '', 'lib', 'Win' )/]
ENDIF()

ADD_EXECUTABLE( ${PROJECT_NAME} ${SOURCE_FILES} )
SET_TARGET_PROPERTIES( ${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d" )

IF( WIN32 ) 
	IF( CMAKE_BUILD_TYPE STREQUAL "Debug" )
		[generateLibraryLinking( true, true )/]
	ELSE()
		[generateLibraryLinking( false, true )/]
	ENDIF()
ELSE()
	IF( CMAKE_BUILD_TYPE STREQUAL "Debug" )
		[generateLibraryLinking( true, false )/]
	ELSE()
		[generateLibraryLinking( false, false )/]
	ENDIF()
ENDIF()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL( TARGETS ${PROJECT_NAME} 
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
 )
[/file]
[/template]

[template private generateCMakeFindLibraryCommand( aPackage : Package, ending : String, folderName : String, debugMode : Boolean )]
[for( packName : String | aPackage.collectIncludingModelNames() )]
FIND_LIBRARY( [packName.toUpperCase()/]_[libraryVariableNameSuffix( debugMode )/] [packName/][libraryNameSuffix( debugMode )/][ending/] ${MDE4CPP_HOME}/application/[folderName/] )
[/for]
[for( aOperation : Operation | aPackage.allOwnedElements()->selectByType( Class ).ownedOperation->asOrderedSet()->sortedBy( myQualifiedName() ) )]
	[if( aOperation.method->notEmpty() and aOperation.method->asOrderedSet()->first().oclIsKindOf( OpaqueBehavior ) )]
		[if( aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior ).language->includes( keyLibrary() ) )]
			[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior ).language->indexOf( keyLibrary() )]
				[if( 0 <index and index <= aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->size() )]
FIND_LIBRARY( [aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->asOrderedSet()->at( index ).toUpperCase()/]_[libraryVariableNameSuffix( debugMode )/] [aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->asOrderedSet()->at( 3 )/][libraryNameSuffix( debugMode )/][ending/] ${MDE4CPP_HOME}/application/[folderName/] )
				[/if]
			[/let]
		[/if]
	[/if]
[/for]
[if( aPackage.eAllContents()->select( oclIsKindOf( Operation ) ).oclAsType( Operation ).method->filter( Activity )->asSet()->notEmpty() )]
FIND_LIBRARY( PLUGINFRAMEWORK_[libraryVariableNameSuffix( debugMode )/] pluginFramework[libraryNameSuffix( debugMode )/][ending/] ${MDE4CPP_HOME}/application/[folderName/] )
[/if]
[/template]

[template private generateCMakeFindLibraryCommands( aPackage : Package, ending : String, folderName : String, system : String )]
IF( CMAKE_BUILD_TYPE STREQUAL "Debug" )
	[generateCMakeFindLibraryCommand( aPackage, ending, folderName, true )/]
	[if( system.equalsIgnoreCase( 'win' ) )]
	FIND_LIBRARY( PSAPI Psapi )
	[/if]
ELSE()
	[generateCMakeFindLibraryCommand( aPackage, ending, folderName, false )/]
	[if( system.equalsIgnoreCase( 'win' ) )]
	FIND_LIBRARY( PSAPI Psapi )
	[/if]
ENDIF()
[/template]

[template private generateLibraryLinking( aPackage : Package, debugMode : Boolean, win : Boolean )]
TARGET_LINK_LIBRARIES( ${PROJECT_NAME}
[for( packName : String | aPackage.collectIncludingModelNames() )]
	[buildModeCMakeProperty( debugMode )/] ${[packName.toUpperCase()/]_[libraryVariableNameSuffix( debugMode )/]}
[/for]
[for( aOperation : Operation | aPackage.allOwnedElements()->selectByType( Class ).ownedOperation->asOrderedSet()->sortedBy( myQualifiedName() ) )]
	[if( aOperation.method->notEmpty() and aOperation.method->asOrderedSet()->first().oclIsKindOf( OpaqueBehavior ) )]
		[if( aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior ).language->includes( keyLibrary() ) )]
			[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior ).language->indexOf( keyLibrary() )]
				[if( 0 <index and index <= aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->size() )]
	[buildModeCMakeProperty( debugMode )/] ${[aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->asOrderedSet()->at( index ).toUpperCase()/]_[libraryVariableNameSuffix( debugMode )/]}
				[/if]
			[/let]
		[/if]
	[/if]
[/for]
[if( aPackage.eAllContents()->select( oclIsKindOf( Operation ) ).oclAsType( Operation ).method->filter( Activity )->asSet()->notEmpty() )]
	[buildModeCMakeProperty( debugMode )/] ${PLUGINFRAMEWORK_[libraryVariableNameSuffix( debugMode )/]}
	${CMAKE_DL_LIBS}
[/if]
[if( win )]
	${PSAPI}
[/if]          
 )
[/template]

[query private libraryVariableNameSuffix( debugMode : Boolean ) : String = if( debugMode ) then 'DEBUG' else 'RELEASE' endif/]
[query private libraryNameSuffix( debugMode : Boolean ) : String = if( debugMode ) then 'd' else '' endif/]
[query private buildModeCMakeProperty( debugMode : Boolean ) : String = if( debugMode ) then 'debug' else 'optimized' endif/]
