[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate class destructor code conforming to PSCS destruction semantics
 * 
 */]

[module generateDestruction('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::components::generateProperty /]

[template public generatePropertyDestruction(aProperty : Property)]
[if (aProperty.isContainer())]
//deleting property [aProperty.name/]
[if (aProperty.isComposite)] [comment If property is a part or port (isComposite = true), property has to be destroyed recursively also/]
//property is part or port and is destroyed recursively
for(unsigned int i = 0; i < m_[aProperty.name/]->size(); i++)
{ 
	if(m_[aProperty.name/]->at(i)) m_[aProperty.name/]->at(i)->destroy();  
}
[/if][comment If not, the variable of the property only has to be cleared/]
m_[aProperty.name/]->clear();
[elseif (aProperty.isSingleValue() and not aProperty.type.isPrimitive() and not aProperty.type.oclIsKindOf(Enumeration))]
//deleting property [aProperty.name/]
[if (aProperty.isComposite)] [comment If property is a part or port (isComposite = true), property has to be destroyed recursively also/]
//property is part or port and is destroyed recursively
if(m_[aProperty.name/]) m_[aProperty.name/]->destroy();
[/if][comment If not, the variable of the property only has to be cleared/]
m_[aProperty.name/].reset();
[/if]
[/template]
