[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to provide queries collecting models required by configuration modules to generate projects and build files
 * 
 * /]
[module collectionHelper('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
 
[**
 * query to collect all related packages, which are used by current model
 * 
 * Following packages are included:
 * - packages of attribute types of classes
 * - packages of applied stereotypes on class attributes
 * - packages of parameter types of class operations
 * - packages of interfaces realized by classes
 * - packages of applied stereotypes on dependencies
 * 
 * Following packages are rejects:
 * - current package (aPackage)
 * - undefined packages
 * - 'Ecore', 'UML' and 'PrimitiveTypes' packages
 * 
 * Each package is only include once. Undefined packages are rejected. Also 'aPackage' is rejected. 
 * 
 * 
*/]
[query private collectModelIncludes(aPackage : Package) : Set(Package) = OrderedSet{
																		aPackage.member->filter(Class).attribute.type.getNearestPackage(),
																		aPackage.member->filter(Class).attribute.getAppliedStereotypes().getNearestPackage(),
																		aPackage.member->filter(Class).ownedOperation.ownedParameter.type->reject(oclIsUndefined()).getNearestPackage(),
																		aPackage.member->filter(Class).interfaceRealization.supplier->reject(oclIsUndefined()).getNearestPackage(),
																		aPackage.member->filter(Dependency).getAppliedStereotypes().getNearestPackage()
																	}->flatten()->reject(oclIsUndefined())->reject(pack : Package | (pack = aPackage) or pack.isReflectionModel()) /]

[**
 * checks if a package is a reflection model
*/]
[query public isReflectionModel(aPackage : Package) : Boolean = ((aPackage.name = keyUML()) or (aPackage.name = keyEcore()) or (aPackage.name = keyPrimitiveTypes())) /]

[**
 * collect query for reflection models
 * 
 * include basic models and reflections models as well as packages used by given model
*/]
[query private collectIncludingModelNamesForNonReflectionModels(aPackage : Package) : Set(String) = OrderedSet{'ecore', 'uml', 'ecoreReflection', 'primitivetypesReflection', 'umlReflection'}->addAll(collectModelIncludes()->sortedBy(name).name)->flatten() /]

[**
 * collect query for reflection models
*/]
[query private collectIncludingModelNamesForReflectionModels(aPackage : Package) : Set(String) = if ((aPackage.name = keyUML()) or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())) then OrderedSet{'ecore', 'uml', 'ecoreReflection', 'primitivetypesReflection'} else OrderedSet{'ecore', 'uml'} endif/]

[**
 *  query to collect all related packages names, which are used by current model
 *  
 *  if current model is a reflection model, query 'collectIncludingModelNamesForReflectionModels' is used
 *  otherwise 'collectIncludingModelNamesForNonReflectionModels' is used
*/]
[query public collectIncludingModelNames(aPackage : Package) : Set(String) = if (aPackage.isReflectionModel()) then collectIncludingModelNamesForReflectionModels() else collectIncludingModelNamesForNonReflectionModels() endif/]

[**
 * query to collect model classes, which are relevant for create functions in model factory
 * 
 * This are all classes of the model except abstract classes and classes with active singleton annotation.
 * The resulting class list is sorted by myQualifiedName.
*/]
[query public collectModelClassesForFactory(aPackage : Package) : OrderedSet(Class) = collectModelClassesForFactoryInternal(aPackage)->addAll(collectModelStereotypesForFactory(aPackage))->sortedBy(myQualifiedName()) /]
[query private collectModelStereotypesForFactory(aPackage : Package) : OrderedSet(Class) = aPackage.ownedMember->selectByType(Stereotype)->reject(isSingleton() or isAbstract = true)->sortedBy(myQualifiedName()) /]
[query private collectModelClassesForFactoryInternal(aPackage : Package) : OrderedSet(Class) = aPackage.ownedMember->selectByType(Class)->reject(isSingleton() or isAbstract = true)->sortedBy(myQualifiedName()) /]