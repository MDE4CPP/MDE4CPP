[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generate('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP_test::generator::main::project_files::generateProjectFiles/]
[import UML4CPP_test::generator::main::test_suite::generateImplementation /]
[import UML4CPP::generator::main::validation::validateModel /]

[import UML4CPP_test::generator::main::generate_helpers::generateHelpers /]

[template public generateTestUML( aPackage : Package )]
[comment @main/]

[if( aPackage.name.oclIsUndefined() or aPackage.name = '' )]
	['package has no name '.registerError()/] 
[else]
	[aPackage.generateModel()/]
[/if]

[if( aPackage.errorExisting() )]
	[aPackage.printErrors()/]
	[closeWithErrorExit(1)/]
[/if]
[/template]

[template public generateModel( aPackage : Package )]

[aPackage.allOwnedElements()->select( e | e.oclIsKindOf( uml::Class ) )->select( e | not ( e.oclIsKindOf( FunctionBehavior ) or e.oclIsKindOf( Activity ) ) ).oclAsType( uml::Class ).generateElement()/]

[if( aPackage.ancestors()->filter( Package )->first().oclIsInvalid() )]
	[aPackage.generateHelpers()/]
	[aPackage.generateProjectFiles()/]
[/if]
[/template]

[template public generateElement( aClass : Class )]
[aClass.generateImplementation()/]
[/template]