[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Parameter artefacts
 * 
 */]
[module generateParameter('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * generate creation of meta model instance for an Parameter element
*/]
[template public generateParameterCreation(aParameter : Parameter) post(trim())]
[if(aParameter.owner.oclIsKindOf(Operation))]
[memberName(aParameter)/] = factory->createParameter_in_Operation([aParameter.owner.oclAsType(NamedElement).memberName()/]);
[else][memberName(aParameter)/] = factory->createParameter_in_Behavior([aParameter.owner.oclAsType(NamedElement).memberName()/]);
[/if]
[/template]

[**
 * generate initialization of meta model instance for an Parameter element
 * 
 * this includes:
 * - set Parameter name
 * - set type
 * - set lower bound
 * - set upper bound
 * - set direction literal
*/]
[template public generateParameterInitialization(aParameter : Parameter)]
// parameter [aParameter.name/]
[memberName(aParameter)/]->setName("[aParameter.name/]");
[memberName(aParameter)/]->setType([aParameter.type.generatePackageGetterCall(aParameter)/]);
[memberName(aParameter)/]->setLower([aParameter.lower/]);
[memberName(aParameter)/]->setUpper([aParameter.upper/]);
[memberName(aParameter)/]->setDirection(uml::ParameterDirectionKind::[direction.toString().toUpper()/]);
[/template]

[**
 * generate default value for parameter with type String
*/]
[template public genDefault(aParameter : Parameter) ? (aParameter.type.name='String' or aParameter.type.name='EString')]
[if (aParameter.default.oclIsUndefined())]""[else]"[aParameter.default/]"[/if]
[/template]

[**
 * generate default value for numeric parameter
*/]
[template public genDefault(aParameter : Parameter) ? ((aParameter.type.name='Integer') or (aParameter.type.name='Real') or (aParameter.type.name='Boolean') or (aParameter.type.name='UnlimitedNatural') or (aParameter.type.name='EInt') or (aParameter.type.name='EDouble') or (aParameter.type.name='EBoolean') or (aParameter.type.name='EFloat'))]
[if (aParameter.default.oclIsUndefined())]0[else][aParameter.default/][/if]
[/template]

[**
 * generate default value for parameter with enumeration type
*/]
[template public genDefault(aParameter : Parameter) ? (aParameter.type.oclIsKindOf(Enumeration))]
[aParameter.type.qualifiedName/]::[if (aParameter.default.oclIsUndefined())][aParameter.type.oclAsType(Enumeration).ownedLiteral->first().toString().toUpper()/][else][aParameter.default.toUpper()/][/if]
[/template]