[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2019 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to provide queries triggering the functions of the service Class ValidationService 
 * 
 */]
[module validateModel('http://www.eclipse.org/uml2/5.0.0/UML')/]

[query public ValidationService(anOclAny: OclAny) : OclVoid
	= invoke('UML4CPP.generator.main.validation.ValidationService', 'ValidationService()', Sequence{})
/]

[query public registerError(message : String) : OclVoid
	= invoke('UML4CPP.generator.main.validation.ValidationService', 'registerError(java.lang.String)', Sequence{message}).toString()
/]

[query public printErrors(any : OclAny) : OclVoid
	= invoke('UML4CPP.generator.main.validation.ValidationService', 'printErrors()', Sequence{})
/]

[query public closeWithErrorExit(number : Integer) : OclVoid
	= invoke('UML4CPP.generator.main.validation.ValidationService', 'closeWithErrorExit(int)', Sequence{number})
/]

[query public errorExisting(any : OclAny) : Boolean
	= invoke('UML4CPP.generator.main.validation.ValidationService', 'errorExisting()', Sequence{})
/]