//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ACTIVITYEDGEACTIVITYEDGEIMPL_HPP
#define UML_ACTIVITYEDGEACTIVITYEDGEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../ActivityEdge.hpp"

#include "uml/impl/RedefinableElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ActivityEdgeImpl : virtual public RedefinableElementImpl, virtual public ActivityEdge 
	{
		public: 
			ActivityEdgeImpl(const ActivityEdgeImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;
			ActivityEdgeImpl& operator=(ActivityEdgeImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ActivityEdgeImpl();
			virtual std::shared_ptr<uml::ActivityEdge> getThisActivityEdgePtr() const;
			virtual void setThisActivityEdgePtr(std::weak_ptr<uml::ActivityEdge> thisActivityEdgePtr);

			//Additional constructors for the containments back reference
			ActivityEdgeImpl(std::weak_ptr<uml::Activity> par_activity);
			//Additional constructors for the containments back reference
			ActivityEdgeImpl(std::weak_ptr<uml::StructuredActivityNode> par_inStructuredNode);
			//Additional constructors for the containments back reference
			ActivityEdgeImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ActivityEdgeImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~ActivityEdgeImpl() = 0;
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The Activity containing the ActivityEdge, if it is directly owned by an Activity.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::weak_ptr<uml::Activity> getActivity() const ;
			/*!
			The Activity containing the ActivityEdge, if it is directly owned by an Activity.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setActivity(std::weak_ptr<uml::Activity>) ;
			/*!
			A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::ValueSpecification> getGuard() const ;
			/*!
			A ValueSpecification that is evaluated to determine if a token can traverse the ActivityEdge. If an ActivityEdge has no guard, then there is no restriction on tokens traversing the edge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setGuard(std::shared_ptr<uml::ValueSpecification>) ;
			
			/*!
			ActivityPartitions containing the ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::ActivityPartition, uml::ActivityGroup>> getInPartition() const ;
			/*!
			The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::weak_ptr<uml::StructuredActivityNode> getInStructuredNode() const ;
			/*!
			The StructuredActivityNode containing the ActivityEdge, if it is owned by a StructuredActivityNode.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setInStructuredNode(std::weak_ptr<uml::StructuredActivityNode>) ;
			/*!
			The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::InterruptibleActivityRegion> getInterrupts() const ;
			/*!
			The InterruptibleActivityRegion for which this ActivityEdge is an interruptingEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setInterrupts(std::shared_ptr<uml::InterruptibleActivityRegion>) ;
			/*!
			ActivityEdges from a generalization of the Activity containing this ActivityEdge that are redefined by this ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::ActivityEdge, uml::RedefinableElement>> getRedefinedEdge() const ;
			/*!
			The ActivityNode from which tokens are taken when they traverse the ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::ActivityNode> getSource() const ;
			/*!
			The ActivityNode from which tokens are taken when they traverse the ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setSource(std::shared_ptr<uml::ActivityNode>) ;
			/*!
			The ActivityNode to which tokens are put when they traverse the ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::ActivityNode> getTarget() const ;
			/*!
			The ActivityNode to which tokens are put when they traverse the ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setTarget(std::shared_ptr<uml::ActivityNode>) ;
			/*!
			The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<uml::ValueSpecification> getWeight() const ;
			/*!
			The minimum number of tokens that must traverse the ActivityEdge at the same time. If no weight is specified, this is equivalent to specifying a constant value of 1.
			<p>From package UML::Activities.</p>
			*/
			
			virtual void setWeight(std::shared_ptr<uml::ValueSpecification>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			/*!
			ActivityGroups containing the ActivityEdge.
			<p>From package UML::Activities.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::ActivityGroup>> getInGroup() const ;
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::ActivityEdge> m_thisActivityEdgePtr;
	};
}
#endif /* end of include guard: UML_ACTIVITYEDGEACTIVITYEDGEIMPL_HPP */
