//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EOPERATION_HPP
#define ECORE_EOPERATION_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T> class Bag; 
template<class T, class ... U> class Subset;



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ecore
{
	class EcoreFactory;
}

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EClass;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EObject;
}

namespace ecore 
{
	class EOperation;
}

namespace ecore 
{
	class EParameter;
}

namespace ecore 
{
	class ETypeParameter;
}

namespace ecore 
{
	class ETypedElement;
}

// base class includes
#include "ecore/ETypedElement.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EOperation:virtual public ETypedElement
	{
		public:
 			EOperation(const EOperation &) {}
			EOperation& operator=(EOperation const&) = delete;

		protected:
			EOperation(){}


			//Additional constructors for the containments back reference

			EOperation(std::weak_ptr<ecore::EObject > par_eContainer);

			//Additional constructors for the containments back reference

			EOperation(std::weak_ptr<ecore::EClass > par_eContainingClass);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~EOperation() {}

			//*********************************
			// Operations
			//*********************************
			
			
			/*!
			 */ 
			virtual bool isOverrideOf(std::shared_ptr<ecore::EOperation>  someOperation) const = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual int getOperationID() const = 0;
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::weak_ptr<ecore::EClass > getEContainingClass() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr<Bag<ecore::EClassifier>> getEExceptions() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr<Bag<ecore::EGenericType>> getEGenericExceptions() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<ecore::EParameter, ecore::EObject>> getEParameters() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr<Bag<ecore::ETypeParameter>> getETypeParameters() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			int m_operationID = -1;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::weak_ptr<ecore::EClass > m_eContainingClass;
			/*!
			 */
			std::shared_ptr<Bag<ecore::EClassifier>> m_eExceptions;
			/*!
			 */
			std::shared_ptr<Bag<ecore::EGenericType>> m_eGenericExceptions;
			/*!
			 */
			std::shared_ptr<Subset<ecore::EParameter, ecore::EObject>> m_eParameters;
			/*!
			 */
			std::shared_ptr<Bag<ecore::ETypeParameter>> m_eTypeParameters;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Union<ecore::EObject>> getEContens() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: ECORE_EOPERATION_HPP */
