// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::configuration::generateGradleFiles

description 'Build tasks for project: ecoreReflection'

task runCommandCompileEcoreReflection(type:Exec) {
	commandLine 'cmd', '/c', 'gradlew src_gen:compileEcoreReflectionSrc'
	mustRunAfter =  [
		"generateEcoreReflection" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
	]
}

task runCommandGenerateEcoreReflection(type:Exec) {
	def modelPath = file('.' + File.separator + 'model' + File.separator + 'ecoreReflection.uml')
	commandLine 'cmd', '/c', 'gradlew :src:common:universalGradleTasks:generateModel -PModel='+modelPath.absolutePath
}

task generateEcoreReflection() {
	group 'ecoreReflection'	
	description 'generate C++ code of ecoreReflection.uml model ecoreReflection' 
 
	def buildFile = file('model/build.gradle')
	if(!buildFile.exists())
	{
		dependsOn 'runCommandGenerateEcoreReflection'
	}
	else
	{
		dependsOn 'model:generateEcoreReflectionModel'
	}
}

task compileEcoreReflection() {
	group 'ecoreReflection'
	description 'compile ecoreReflection'

	def buildFile = file('src_gen/build.gradle')
	if(!buildFile.exists()){ 
		dependsOn 'generateEcoreReflection'
		dependsOn 'runCommandCompileEcoreReflection'
	}
	else
	{
		dependsOn 'generateEcoreReflection'
		dependsOn 'src_gen:compileEcoreReflectionSrc'
	}
	mustRunAfter =  [
		"generateEcoreReflection" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
	]
}

task buildEcoreReflection() {
	group 'ecoreReflection'
	description 'build ecoreReflection'

	dependsOn 'generateEcoreReflection'
	dependsOn 'compileEcoreReflection'
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
}
