[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2021 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to 
 * deal in the Software without restriction, including without limitation the 
 * rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the 
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included 
 * in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER 
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING 
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOF
 * TWARE.
 */]

[module generateBehavioralFeatureInvoke('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateOperation /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::helpers::IDHelper /]
[import ecore4CPP::generator::main::helpers::keywords /]

[comment]
[template public generateInputParameter(par:EParameter, index:Integer)]
[par.name.generateInputParameter(par.eType, index)/]
[/template]


[template private generateInputParameter(name : String, type : EClassifier, index:Integer)]
std::shared_ptr<Bag<fUML::Semantics::Values::Value>> [name/]ValueList = inputParameters->at([index/])->getValues();
[/template]
[/comment]

[comment] Helper [/comment]
[template private _generateIncomingParameter(aEParameter : EParameter, index : Integer)]
	//parameter [index/]
	[aEParameter.generateParameterType()/] incoming_param_[aEParameter.name/];
	std::list<Any>::const_iterator incoming_param_[aEParameter.name/]_arguments_citer = std::next(arguments->begin(), [index/]);
	incoming_param_[aEParameter.name/] = (*incoming_param_[aEParameter.name/]_arguments_citer)->get<[aEParameter.generateParameterType()/] >();
[/template]


[**/
 *  Declaration of internal eInvoke helper method
 */]
[template public generateeInvokeByIDDeclaration(aClass : EClass, impl : Boolean)]
virtual Any eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments) [abstractSufix(impl)/];
[/template]

[**/
 *  Implementation of internal eInvoke helper method
 */]
[template public generateeInvokeByIDImplementation(aClass : EClass) post(trim())]
Any [aClass.name.toUpperFirst().concat('Impl')/]::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;
 
  	switch(operationID)
	{
	[for (aOperation : EOperation | aClass.eOperations->reject((doNotGenerateEOperation() or ignore()))->asOrderedSet()->sortedBy(name))]
		[comment @see ecore4CPP::generator::main::generateOperation for ID calculation /]
		// [aOperation.generateQualifiedNameWithSignature()/]: [aOperation.generateQualifiedNameWithSignature().generatePolynomialRollingHash()/]
		case [aClass.ePackage.name/]Package::[aOperation.getStaticAttributeIDName()/]:
		{
		[let parameterList : OrderedSet(EParameter) = aOperation.eParameters->reject(doNotGenerateEParameter())]
			[for (inPar : EParameter | parameterList)]
			//Retrieve input parameter '[inPar.name/]'
		[inPar._generateIncomingParameter(parameterList->indexOf(inPar)-1)/]
			[/for]
		[/let]
			[comment Operation w/o return value /]
		[if (aOperation.eType.oclIsUndefined())]
			this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
			break;
 		[else]
			[comment Operation w/ return value /]
			[if (aOperation.eType.oclIsKindOf(EDataType))] [comment Primitive Returntype/]
				[if (aOperation.isAnyNoPtr())]
			result = this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
				[elseif (aOperation.upperBound = 1)]
			result = eAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]),0,false);
				[else]
			result = eAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]),0,true);
				[/if]
			[elseif (aOperation.eType.oclIsKindOf(EClass))] [comment Returntype Class/]
				[if ((aOperation.upperBound = 1))]
					[if (aOperation.hasKey(aOperation.keyWeakptr()))]
			result = eAnyObject(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]).lock(), [aOperation.eType.ePackage.generateNamespaceDefinition()/]::[aOperation.eType.ePackage.name/]Package::[aOperation.eType.oclAsType(EClass).getStaticAttributeIDName()/]);
					[else]
			result = eAnyObject(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]), [aOperation.eType.ePackage.generateNamespaceDefinition()/]::[aOperation.eType.ePackage.name/]Package::[aOperation.eType.oclAsType(EClass).getStaticAttributeIDName()/]);
					[/if]
				[else] [comment Returntype Bag<EObject>/]
			[aOperation.generateOperationType()/] resultList = this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
			return eAnyBag(resultList,[aOperation.eType.ePackage.generateNamespaceDefinition()/]::[aOperation.eType.ePackage.name/]Package::[aOperation.eType.oclAsType(EClass).getStaticAttributeIDName()/]);
				[/if]
			[elseif (aOperation.isAnyNoPtr())]
			result = this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]);
			[else] [comment Unknown should be an EClass or EDataType /]
			result = eAny(this->[aOperation.name.toString()/]([for (inPar : EParameter | aOperation.eParameters) separator (',')]incoming_param_[inPar.name/][/for]), 0,false);
			[/if]
			break;
	[/if]
		}
	[/for]

		default:
		{
			// call superTypes
	[if (aClass.eSuperTypes->reject(doNotGenerateEClassifier())->isEmpty() and not (aClass.name ='EObject'))]
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
	[else]
	[let superTypeList : OrderedSet(EClass) = aClass.eSuperTypes->reject(doNotGenerateEClassifier())]
		[for (i : EClass | superTypeList->reverse())]
			result = [ClassWithNamespace(aClass, i)/]Impl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
		[/for]
	[/let]
	[/if]
			break;
		}
  	}

	return result;
}
[/template]