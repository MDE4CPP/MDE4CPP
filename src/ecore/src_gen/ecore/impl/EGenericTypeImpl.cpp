
#include "ecore/impl/EGenericTypeImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "ecore/ecoreFactory.hpp"
#include "ecore/EClassifier.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/ETypeParameter.hpp"
//Factories and Package includes
#include "ecore/ecorePackage.hpp"

using namespace ecore;

//*********************************
// Constructor / Destructor
//*********************************
EGenericTypeImpl::EGenericTypeImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

EGenericTypeImpl::~EGenericTypeImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete EGenericType "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


EGenericTypeImpl::EGenericTypeImpl(const EGenericTypeImpl & obj): EGenericTypeImpl()
{
	*this = obj;
}

EGenericTypeImpl& EGenericTypeImpl::operator=(const EGenericTypeImpl & obj)
{
	//call overloaded =Operator for each base class
	ecore::EModelElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of EGenericType 
	 * which is generated by the compiler (as EGenericType is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//EGenericType::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy EGenericType "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_eClassifier  = obj.getEClassifier();
	m_eRawType  = obj.getERawType();
	m_eTypeParameter  = obj.getETypeParameter();
	//Clone references with containment (deep copy)
	//clone reference 'eLowerBound'
	if(obj.getELowerBound()!=nullptr)
	{
		m_eLowerBound = std::dynamic_pointer_cast<ecore::EGenericType>(obj.getELowerBound()->copy());
	}

	//clone reference 'eTypeArguments'
	const std::shared_ptr<Bag<ecore::EGenericType>>& eTypeArgumentsList = obj.getETypeArguments();
	if(eTypeArgumentsList)
	{
		m_eTypeArguments.reset(new Bag<ecore::EGenericType>());
		
		
		for(const std::shared_ptr<ecore::EGenericType>& eTypeArgumentsindexElem: *eTypeArgumentsList) 
		{
			const std::shared_ptr<ecore::EGenericType>& temp = std::dynamic_pointer_cast<ecore::EGenericType>((eTypeArgumentsindexElem)->copy());
			m_eTypeArguments->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for eTypeArguments.")
	}

	//clone reference 'eUpperBound'
	if(obj.getEUpperBound()!=nullptr)
	{
		m_eUpperBound = std::dynamic_pointer_cast<ecore::EGenericType>(obj.getEUpperBound()->copy());
	}
	
	
	
	return *this;
}

std::shared_ptr<ecore::EObject> EGenericTypeImpl::copy() const
{
	std::shared_ptr<EGenericTypeImpl> element(new EGenericTypeImpl());
	*element =(*this);
	element->setThisEGenericTypePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
bool EGenericTypeImpl::isInstance(const std::shared_ptr<Any>& object) const
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference eClassifier */
const std::shared_ptr<ecore::EClassifier>& EGenericTypeImpl::getEClassifier() const
{
    return m_eClassifier;
}
void EGenericTypeImpl::setEClassifier(const std::shared_ptr<ecore::EClassifier>& _eClassifier)
{
    m_eClassifier = _eClassifier;
	
}

/* Getter & Setter for reference eLowerBound */
const std::shared_ptr<ecore::EGenericType>& EGenericTypeImpl::getELowerBound() const
{
    return m_eLowerBound;
}
void EGenericTypeImpl::setELowerBound(const std::shared_ptr<ecore::EGenericType>& _eLowerBound)
{
    m_eLowerBound = _eLowerBound;
	
}

/* Getter & Setter for reference eRawType */
const std::shared_ptr<ecore::EClassifier>& EGenericTypeImpl::getERawType() const
{
    return m_eRawType;
}
void EGenericTypeImpl::setERawType(const std::shared_ptr<ecore::EClassifier>& _eRawType)
{
    m_eRawType = _eRawType;
	
}

/* Getter & Setter for reference eTypeArguments */
const std::shared_ptr<Bag<ecore::EGenericType>>& EGenericTypeImpl::getETypeArguments() const
{
	if(m_eTypeArguments == nullptr)
	{
		m_eTypeArguments.reset(new Bag<ecore::EGenericType>());
		
		
	}
    return m_eTypeArguments;
}

/* Getter & Setter for reference eTypeParameter */
const std::shared_ptr<ecore::ETypeParameter>& EGenericTypeImpl::getETypeParameter() const
{
    return m_eTypeParameter;
}
void EGenericTypeImpl::setETypeParameter(const std::shared_ptr<ecore::ETypeParameter>& _eTypeParameter)
{
    m_eTypeParameter = _eTypeParameter;
	
}

/* Getter & Setter for reference eUpperBound */
const std::shared_ptr<ecore::EGenericType>& EGenericTypeImpl::getEUpperBound() const
{
    return m_eUpperBound;
}
void EGenericTypeImpl::setEUpperBound(const std::shared_ptr<ecore::EGenericType>& _eUpperBound)
{
    m_eUpperBound = _eUpperBound;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> EGenericTypeImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void EGenericTypeImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get ecoreFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void EGenericTypeImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("eClassifier");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eClassifier")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eRawType");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eRawType")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eTypeParameter");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eTypeParameter")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void EGenericTypeImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("eLowerBound") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "EGenericType";
			}
			loadHandler->handleChild(this->getELowerBound());

			return; 
		}

		if ( nodeName.compare("eTypeArguments") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "EGenericType";
			}
			loadHandler->handleChildContainer<ecore::EGenericType>(this->getETypeArguments());  

			return; 
		}

		if ( nodeName.compare("eUpperBound") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "EGenericType";
			}
			loadHandler->handleChild(this->getEUpperBound());

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
}

void EGenericTypeImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject>> references)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ECLASSIFIER:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::EClassifier> _eClassifier = std::dynamic_pointer_cast<ecore::EClassifier>( references.front() );
				setEClassifier(_eClassifier);
			}
			
			return;
		}

		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ERAWTYPE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::EClassifier> _eRawType = std::dynamic_pointer_cast<ecore::EClassifier>( references.front() );
				setERawType(_eRawType);
			}
			
			return;
		}

		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEPARAMETER:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::ETypeParameter> _eTypeParameter = std::dynamic_pointer_cast<ecore::ETypeParameter>( references.front() );
				setETypeParameter(_eTypeParameter);
			}
			
			return;
		}
	}
	ecore::EObjectImpl::resolveReferences(featureID, references);
}

void EGenericTypeImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void EGenericTypeImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<ecore::ecorePackage> package = ecore::ecorePackage::eInstance();
	// Add references
		saveHandler->addReference(this->getEClassifier(),"eClassifier", getEClassifier()->eClass() != ecore::ecorePackage::eInstance()->getEClassifier_Class());
		saveHandler->addReference(this->getERawType(),"eRawType", getERawType()->eClass() != ecore::ecorePackage::eInstance()->getEClassifier_Class());
		saveHandler->addReference(this->getETypeParameter(),"eTypeParameter", getETypeParameter()->eClass() != ecore::ecorePackage::eInstance()->getETypeParameter_Class());
		//
		// Add new tags (from references)
		//
		std::shared_ptr<EClass> metaClass = this->eClass();
		// Save 'eLowerBound'

		saveHandler->addReference(this->getELowerBound(), "eLowerBound", getELowerBound()->eClass() != ecore::ecorePackage::eInstance()->getEGenericType_Class());

		// Save 'eTypeArguments'

		saveHandler->addReferences<ecore::EGenericType>("eTypeArguments", this->getETypeArguments());

		// Save 'eUpperBound'

		saveHandler->addReference(this->getEUpperBound(), "eUpperBound", getEUpperBound()->eClass() != ecore::ecorePackage::eInstance()->getEGenericType_Class());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<EClass>& EGenericTypeImpl::eStaticClass() const
{
	return ecore::ecorePackage::eInstance()->getEGenericType_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> EGenericTypeImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ECLASSIFIER:
			return eAny(getEClassifier(),ecore::ecorePackage::ECLASSIFIER_CLASS,false); //295
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ELOWERBOUND:
			return eAny(getELowerBound(),ecore::ecorePackage::EGENERICTYPE_CLASS,false); //293
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ERAWTYPE:
			return eAny(getERawType(),ecore::ecorePackage::ECLASSIFIER_CLASS,false); //292
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEARGUMENTS:
			return eEcoreContainerAny(getETypeArguments(),ecore::ecorePackage::EGENERICTYPE_CLASS); //291
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEPARAMETER:
			return eAny(getETypeParameter(),ecore::ecorePackage::ETYPEPARAMETER_CLASS,false); //294
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_EUPPERBOUND:
			return eAny(getEUpperBound(),ecore::ecorePackage::EGENERICTYPE_CLASS,false); //290
	}
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
}

bool EGenericTypeImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ECLASSIFIER:
			return getEClassifier() != nullptr; //295
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ELOWERBOUND:
			return getELowerBound() != nullptr; //293
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ERAWTYPE:
			return getERawType() != nullptr; //292
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEARGUMENTS:
			return getETypeArguments() != nullptr; //291
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEPARAMETER:
			return getETypeParameter() != nullptr; //294
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_EUPPERBOUND:
			return getEUpperBound() != nullptr; //290
	}
	return ecore::EObjectImpl::internalEIsSet(featureID);
}

bool EGenericTypeImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ECLASSIFIER:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<ecore::EClassifier> _eClassifier = std::dynamic_pointer_cast<ecore::EClassifier>(eObject);
					if(_eClassifier)
					{
						setEClassifier(_eClassifier); //295
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'eClassifier'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'eClassifier'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ELOWERBOUND:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<ecore::EGenericType> _eLowerBound = std::dynamic_pointer_cast<ecore::EGenericType>(eObject);
					if(_eLowerBound)
					{
						setELowerBound(_eLowerBound); //293
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'eLowerBound'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'eLowerBound'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ERAWTYPE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<ecore::EClassifier> _eRawType = std::dynamic_pointer_cast<ecore::EClassifier>(eObject);
					if(_eRawType)
					{
						setERawType(_eRawType); //292
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'eRawType'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'eRawType'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEARGUMENTS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<ecore::EGenericType>>& _eTypeArguments = getETypeArguments();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<ecore::EGenericType> valueToAdd = std::dynamic_pointer_cast<ecore::EGenericType>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_eTypeArguments->includes(valueToAdd)))
								{
									_eTypeArguments->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'eTypeArguments'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'eTypeArguments'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_ETYPEPARAMETER:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<ecore::ETypeParameter> _eTypeParameter = std::dynamic_pointer_cast<ecore::ETypeParameter>(eObject);
					if(_eTypeParameter)
					{
						setETypeParameter(_eTypeParameter); //294
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'eTypeParameter'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'eTypeParameter'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case ecore::ecorePackage::EGENERICTYPE_ATTRIBUTE_EUPPERBOUND:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<ecore::EGenericType> _eUpperBound = std::dynamic_pointer_cast<ecore::EGenericType>(eObject);
					if(_eUpperBound)
					{
						setEUpperBound(_eUpperBound); //290
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'eUpperBound'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'eUpperBound'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ecore::EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> EGenericTypeImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// ecore::EGenericType::isInstance(Any) : bool {const}: 1038226181
		case ecorePackage::EGENERICTYPE_OPERATION_ISINSTANCE_EJAVAOBJECT:
		{
			//Retrieve input parameter 'object'
			//parameter 0
			std::shared_ptr<Any> incoming_param_object;
			Bag<Any>::const_iterator incoming_param_object_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_object = (*incoming_param_object_arguments_citer)->get<std::shared_ptr<Any>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'object'. Failed to invoke operation 'isInstance'!")
				return nullptr;
			}
		
			result = eAny(this->isInstance(incoming_param_object), 0, false);
			break;
		}

		default:
		{
			// call superTypes
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<ecore::EGenericType> EGenericTypeImpl::getThisEGenericTypePtr() const
{
	return m_thisEGenericTypePtr.lock();
}
void EGenericTypeImpl::setThisEGenericTypePtr(std::weak_ptr<ecore::EGenericType> thisEGenericTypePtr)
{
	m_thisEGenericTypePtr = thisEGenericTypePtr;
}


