// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::configuration::generateGradleFiles

description 'Build tasks for project: umlReflection'

task runCommandCompileUmlReflection(type:Exec) {
	commandLine 'cmd', '/c', 'gradlew src_gen:compileUmlReflectionSrc'
	mustRunAfter =  [
		"generateUmlReflection" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
		, getRootProject().getTasksByName('compileEcoreReflection', true)
		, getRootProject().getTasksByName('compilePrimitivetypesReflection', true)
	]
}

task runCommandGenerateUmlReflection(type:Exec) {
	def modelPath = file('.' + File.separator + 'model' + File.separator + 'umlReflection.uml')
	commandLine 'cmd', '/c', 'gradlew :src:common:universalGradleTasks:generateModel -PModel='+modelPath.absolutePath
}

task generateUmlReflection() {
	group 'umlReflection'	
	description 'generate C++ code of umlReflection.uml model umlReflection' 
 
	def buildFile = file('model/build.gradle')
	if(!buildFile.exists())
	{
		dependsOn 'runCommandGenerateUmlReflection'
	}
	else
	{
		dependsOn 'model:generateUmlReflectionModel'
	}
}

task compileUmlReflection() {
	group 'umlReflection'
	description 'compile umlReflection'

	def buildFile = file('src_gen/build.gradle')
	if(!buildFile.exists()){ 
		mustRunAfter = ["generateUmlReflection"]
		dependsOn 'runCommandCompileUmlReflection'
	}
	else
	{
		mustRunAfter = ["generateUmlReflection"]
		dependsOn 'src_gen:compileUmlReflectionSrc'
	}
	mustRunAfter =  [
		"generateUmlReflection" 
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUml', true)
		, getRootProject().getTasksByName('compileEcoreReflection', true)
		, getRootProject().getTasksByName('compilePrimitivetypesReflection', true)
	]
}

task buildUmlReflection() {
	group 'umlReflection'
	description 'build umlReflection'

	dependsOn 'generateUmlReflection'
	dependsOn 'compileUmlReflection'
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
	dependsOn getRootProject().getTasksByName('buildEcoreReflection', true)
	dependsOn getRootProject().getTasksByName('buildPrimitivetypesReflection', true)
}
