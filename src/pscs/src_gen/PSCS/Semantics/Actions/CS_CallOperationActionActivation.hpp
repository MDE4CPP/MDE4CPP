//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef PSCS_SEMANTICS_ACTIONS_CS_CALLOPERATIONACTIONACTIVATION_HPP
#define PSCS_SEMANTICS_ACTIONS_CS_CALLOPERATIONACTIONACTIVATION_HPP

#include <list>
#include <memory>
#include <string>


// forward declarations



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace PSCS
{
	class PSCSFactory;
}

//Forward Declaration for used types
namespace fUML::Semantics::Activities 
{
	class ActivityEdgeInstance;
}

namespace uml 
{
	class ActivityNode;
}

namespace fUML::Semantics::Activities 
{
	class ActivityNodeActivationGroup;
}

namespace fUML::Semantics::Actions 
{
	class CallOperationActionActivation;
}

namespace fUML::Semantics::CommonBehavior 
{
	class Execution;
}

namespace fUML::Semantics::Actions 
{
	class InputPinActivation;
}

namespace uml 
{
	class Operation;
}

namespace fUML::Semantics::Actions 
{
	class OutputPinActivation;
}

namespace fUML::Semantics::Actions 
{
	class PinActivation;
}

namespace uml 
{
	class Port;
}

namespace fUML::Semantics::Activities 
{
	class Token;
}

// base class includes
#include "fUML/Semantics/Actions/CallOperationActionActivation.hpp"

// enum includes


//*********************************
namespace PSCS::Semantics::Actions 
{
	/*!
	 */
	class CS_CallOperationActionActivation:virtual public fUML::Semantics::Actions::CallOperationActionActivation
	{
		public:
 			CS_CallOperationActionActivation(const CS_CallOperationActionActivation &) {}
			CS_CallOperationActionActivation& operator=(CS_CallOperationActionActivation const&) = delete;

		protected:
			CS_CallOperationActionActivation(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~CS_CallOperationActionActivation() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool _isCreate(std::shared_ptr<uml::Operation>  operation) = 0;
			
			/*!
			 */ 
			virtual void doAction() = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> getCallExecution() = 0;
			
			/*!
			 */ 
			virtual bool isCreate(std::shared_ptr<uml::Operation>  operation) = 0;
			
			/*!
			 */ 
			virtual bool isOperationProvided(std::shared_ptr<uml::Port>  port,std::shared_ptr<uml::Operation>  operation) = 0;
			
			/*!
			 */ 
			virtual bool isOperationRequired(std::shared_ptr<uml::Port>  port,std::shared_ptr<uml::Operation>  operation) = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Union<fUML::Semantics::Actions::PinActivation>> getPinActivation() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: PSCS_SEMANTICS_ACTIONS_CS_CALLOPERATIONACTIONACTIVATION_HPP */
