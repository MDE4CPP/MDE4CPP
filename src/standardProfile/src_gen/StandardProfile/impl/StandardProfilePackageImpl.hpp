//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef STANDARDPROFILEPACKAGEIMPL_HPP
#define STANDARDPROFILEPACKAGEIMPL_HPP

#include "ecore/EcorePackage.hpp"
#include "ecore/impl/EPackageImpl.hpp"

#include "StandardProfile/StandardProfilePackage.hpp"

namespace StandardProfile 
{	class Auxiliary;
	class BuildComponent;
	class Call;
	class Create;
	class Derive;
	class Destroy;
	class Document;
	class Entity;
	class Executable;
	class File;
	class Focus;
	class Framework;
	class Implement;
	class ImplementationClass;
	class Instantiate;
	class Library;
	class Metaclass;
	class Metamodel;
	class ModelLibrary;
	class Process;
	class Realization;
	class Refine;
	class Responsibility;
	class Script;
	class Send;
	class Service;
	class Source;
	class Specification;
	class Subsystem;
	class SystemModel;
	class Trace;
	class Type;
	class Utility;
}

namespace ecore
{
	class EcoreFactory;
}


namespace StandardProfile
{
	class StandardProfilePackageImpl : public ecore::EPackageImpl ,virtual public StandardProfilePackage
	{
		private:    
			StandardProfilePackageImpl(StandardProfilePackageImpl const&) = delete;
			StandardProfilePackageImpl& operator=(StandardProfilePackageImpl const&) = delete;

		protected:
			StandardProfilePackageImpl();

		public:
			virtual ~StandardProfilePackageImpl();

			// Begin Class Auxiliary
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getAuxiliary_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getAuxiliary_Attribute_base_Class() const ;
			
			
			// End Class Auxiliary

			// Begin Class BuildComponent
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getBuildComponent_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getBuildComponent_Attribute_base_Component() const ;
			
			
			// End Class BuildComponent

			// Begin Class Call
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCall_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getCall_Attribute_base_Usage() const ;
			
			
			// End Class Call

			// Begin Class Create
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCreate_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getCreate_Attribute_base_BehavioralFeature() const ;
			virtual std::shared_ptr<ecore::EReference> getCreate_Attribute_base_Usage() const ;
			
			
			// End Class Create

			// Begin Class Derive
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getDerive_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getDerive_Attribute_base_Abstraction() const ;
			
			
			// End Class Derive

			// Begin Class Destroy
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getDestroy_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getDestroy_Attribute_base_BehavioralFeature() const ;
			
			
			// End Class Destroy

			// Begin Class Document
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getDocument_Class() const ;
			
			
			
			
			// End Class Document

			// Begin Class Entity
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getEntity_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getEntity_Attribute_base_Component() const ;
			
			
			// End Class Entity

			// Begin Class Executable
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getExecutable_Class() const ;
			
			
			
			
			// End Class Executable

			// Begin Class File
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getFile_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getFile_Attribute_base_Artifact() const ;
			
			
			// End Class File

			// Begin Class Focus
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getFocus_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getFocus_Attribute_base_Class() const ;
			
			
			// End Class Focus

			// Begin Class Framework
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getFramework_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getFramework_Attribute_base_Package() const ;
			
			
			// End Class Framework

			// Begin Class Implement
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getImplement_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getImplement_Attribute_base_Component() const ;
			
			
			// End Class Implement

			// Begin Class ImplementationClass
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getImplementationClass_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getImplementationClass_Attribute_base_Class() const ;
			
			
			// End Class ImplementationClass

			// Begin Class Instantiate
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getInstantiate_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getInstantiate_Attribute_base_Usage() const ;
			
			
			// End Class Instantiate

			// Begin Class Library
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getLibrary_Class() const ;
			
			
			
			
			// End Class Library

			// Begin Class Metaclass
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getMetaclass_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getMetaclass_Attribute_base_Class() const ;
			
			
			// End Class Metaclass

			// Begin Class Metamodel
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getMetamodel_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getMetamodel_Attribute_base_Model() const ;
			
			
			// End Class Metamodel

			// Begin Class ModelLibrary
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getModelLibrary_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getModelLibrary_Attribute_base_Package() const ;
			
			
			// End Class ModelLibrary

			// Begin Class Process
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getProcess_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getProcess_Attribute_base_Component() const ;
			
			
			// End Class Process

			// Begin Class Realization
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getRealization_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getRealization_Attribute_base_Classifier() const ;
			
			
			// End Class Realization

			// Begin Class Refine
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getRefine_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getRefine_Attribute_base_Abstraction() const ;
			
			
			// End Class Refine

			// Begin Class Responsibility
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getResponsibility_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getResponsibility_Attribute_base_Usage() const ;
			
			
			// End Class Responsibility

			// Begin Class Script
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getScript_Class() const ;
			
			
			
			
			// End Class Script

			// Begin Class Send
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSend_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getSend_Attribute_base_Usage() const ;
			
			
			// End Class Send

			// Begin Class Service
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getService_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getService_Attribute_base_Component() const ;
			
			
			// End Class Service

			// Begin Class Source
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSource_Class() const ;
			
			
			
			
			// End Class Source

			// Begin Class Specification
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSpecification_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getSpecification_Attribute_base_Classifier() const ;
			
			
			// End Class Specification

			// Begin Class Subsystem
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSubsystem_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getSubsystem_Attribute_base_Component() const ;
			
			
			// End Class Subsystem

			// Begin Class SystemModel
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getSystemModel_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getSystemModel_Attribute_base_Model() const ;
			
			
			// End Class SystemModel

			// Begin Class Trace
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getTrace_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getTrace_Attribute_base_Abstraction() const ;
			
			
			// End Class Trace

			// Begin Class Type
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getType_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getType_Attribute_base_Class() const ;
			
			
			// End Class Type

			// Begin Class Utility
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getUtility_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getUtility_Attribute_base_Class() const ;
			
			
			// End Class Utility

			

		private:
			std::shared_ptr<ecore::EClass> m_auxiliary_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_buildComponent_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_call_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_create_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_derive_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_destroy_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_document_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_entity_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_executable_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_file_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_focus_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_framework_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_implement_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_implementationClass_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_instantiate_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_library_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_metaclass_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_metamodel_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_modelLibrary_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_process_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_realization_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_refine_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_responsibility_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_script_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_send_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_service_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_source_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_specification_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_subsystem_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_systemModel_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_trace_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_type_Class = nullptr;
			std::shared_ptr<ecore::EClass> m_utility_Class = nullptr;
			
			
			
			std::shared_ptr<ecore::EReference> m_derive_Attribute_base_Abstraction = nullptr;
			std::shared_ptr<ecore::EReference> m_refine_Attribute_base_Abstraction = nullptr;
			std::shared_ptr<ecore::EReference> m_trace_Attribute_base_Abstraction = nullptr;
			std::shared_ptr<ecore::EReference> m_file_Attribute_base_Artifact = nullptr;
			std::shared_ptr<ecore::EReference> m_create_Attribute_base_BehavioralFeature = nullptr;
			std::shared_ptr<ecore::EReference> m_destroy_Attribute_base_BehavioralFeature = nullptr;
			std::shared_ptr<ecore::EReference> m_auxiliary_Attribute_base_Class = nullptr;
			std::shared_ptr<ecore::EReference> m_focus_Attribute_base_Class = nullptr;
			std::shared_ptr<ecore::EReference> m_implementationClass_Attribute_base_Class = nullptr;
			std::shared_ptr<ecore::EReference> m_metaclass_Attribute_base_Class = nullptr;
			std::shared_ptr<ecore::EReference> m_type_Attribute_base_Class = nullptr;
			std::shared_ptr<ecore::EReference> m_utility_Attribute_base_Class = nullptr;
			std::shared_ptr<ecore::EReference> m_realization_Attribute_base_Classifier = nullptr;
			std::shared_ptr<ecore::EReference> m_specification_Attribute_base_Classifier = nullptr;
			std::shared_ptr<ecore::EReference> m_entity_Attribute_base_Component = nullptr;
			std::shared_ptr<ecore::EReference> m_implement_Attribute_base_Component = nullptr;
			std::shared_ptr<ecore::EReference> m_process_Attribute_base_Component = nullptr;
			std::shared_ptr<ecore::EReference> m_service_Attribute_base_Component = nullptr;
			std::shared_ptr<ecore::EReference> m_subsystem_Attribute_base_Component = nullptr;
			std::shared_ptr<ecore::EReference> m_buildComponent_Attribute_base_Component = nullptr;
			std::shared_ptr<ecore::EReference> m_metamodel_Attribute_base_Model = nullptr;
			std::shared_ptr<ecore::EReference> m_systemModel_Attribute_base_Model = nullptr;
			std::shared_ptr<ecore::EReference> m_framework_Attribute_base_Package = nullptr;
			std::shared_ptr<ecore::EReference> m_modelLibrary_Attribute_base_Package = nullptr;
			std::shared_ptr<ecore::EReference> m_call_Attribute_base_Usage = nullptr;
			std::shared_ptr<ecore::EReference> m_create_Attribute_base_Usage = nullptr;
			std::shared_ptr<ecore::EReference> m_instantiate_Attribute_base_Usage = nullptr;
			std::shared_ptr<ecore::EReference> m_responsibility_Attribute_base_Usage = nullptr;
			std::shared_ptr<ecore::EReference> m_send_Attribute_base_Usage = nullptr;
			
			

			friend class StandardProfilePackage;

			static bool isInited;
			static StandardProfilePackage* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init(std::shared_ptr<ecore::EPackage> package);

		public:
			void createPackageContents(std::shared_ptr<ecore::EPackage> package);
			void initializePackageContents();

		private:
			void createAuxiliaryContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createBuildComponentContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createCallContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createCreateContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createDeriveContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createDestroyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createDocumentContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createEntityContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createExecutableContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createFileContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createFocusContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createFrameworkContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createImplementContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createImplementationClassContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createInstantiateContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createLibraryContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createMetaclassContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createMetamodelContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createModelLibraryContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createProcessContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createRealizationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createRefineContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createResponsibilityContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createScriptContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createSendContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createServiceContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createSourceContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createSpecificationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createSubsystemContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createSystemModelContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createTraceContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createTypeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createUtilityContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);
			void createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::EcoreFactory> factory);

			void initializeAuxiliaryContent();
			void initializeBuildComponentContent();
			void initializeCallContent();
			void initializeCreateContent();
			void initializeDeriveContent();
			void initializeDestroyContent();
			void initializeDocumentContent();
			void initializeEntityContent();
			void initializeExecutableContent();
			void initializeFileContent();
			void initializeFocusContent();
			void initializeFrameworkContent();
			void initializeImplementContent();
			void initializeImplementationClassContent();
			void initializeInstantiateContent();
			void initializeLibraryContent();
			void initializeMetaclassContent();
			void initializeMetamodelContent();
			void initializeModelLibraryContent();
			void initializeProcessContent();
			void initializeRealizationContent();
			void initializeRefineContent();
			void initializeResponsibilityContent();
			void initializeScriptContent();
			void initializeSendContent();
			void initializeServiceContent();
			void initializeSourceContent();
			void initializeSpecificationContent();
			void initializeSubsystemContent();
			void initializeSystemModelContent();
			void initializeTraceContent();
			void initializeTypeContent();
			void initializeUtilityContent();
			void initializePackageEDataTypes();



	};
}
#endif /* end of include guard: STANDARDPROFILEPACKAGEIMPL_HPP */
