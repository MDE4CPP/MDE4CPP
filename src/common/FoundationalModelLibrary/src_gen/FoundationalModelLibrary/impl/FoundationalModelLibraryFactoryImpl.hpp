//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef FOUNDATIONALMODELLIBRARY_FACTORYIMPL_HPP
#define FOUNDATIONALMODELLIBRARY_FACTORYIMPL_HPP

#include <functional>
#include <map>

#include "uml/impl/FactoryImpl.hpp"
#include "FoundationalModelLibrary/FoundationalModelLibraryFactory.hpp"

namespace FoundationalModelLibrary 
{
	class FoundationalModelLibraryFactoryImpl : virtual public uml::FactoryImpl , virtual public FoundationalModelLibraryFactory 
	{
		protected:
			friend class FoundationalModelLibraryFactory;
			// Constructor
			FoundationalModelLibraryFactoryImpl();

		public:
			virtual ~FoundationalModelLibraryFactoryImpl();
			virtual std::shared_ptr<uml::Element> create(const unsigned int _metaClassId,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const;
			virtual std::shared_ptr<uml::Element> create(const std::shared_ptr<uml::Class> _class,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const;
			virtual std::shared_ptr<uml::Element> create(const std::string _className,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const;

			//Creator functions
			

			//Package
			virtual std::shared_ptr<FoundationalModelLibraryPackage> getFoundationalModelLibraryPackage();

		private:
			static FoundationalModelLibraryFactory * create();
			std::map<std::string,unsigned int> m_idMap;
			virtual void init() {}
	};
}
#endif /* end of include guard: FOUNDATIONALMODELLIBRARY_FACTORYIMPL_HPP */
