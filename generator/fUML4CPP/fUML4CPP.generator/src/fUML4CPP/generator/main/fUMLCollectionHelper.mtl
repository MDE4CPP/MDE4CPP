[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module fUMLCollectionHelper('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::components::generateConnector /]
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]

[comment]COLLECT REALIZING CLASSES FOR CERTAIN INTERFACE --------------- [/comment]
[query public collectRealizingClasses(anInterface : Interface) : OrderedSet(Class) = 
	anInterface._package.allOwnedElements()->filter(InterfaceRealization)->select(ir : InterfaceRealization | ir.contract = anInterface).owner.oclAsType(Class)->asOrderedSet()->sortedBy(myQualifiedName())/]

[comment]COLLECT ALL OPERATIONS THAT COULD BE CALLED WITH RESPECT TO PSCS COMMUNICATION SEMANTICS --------------- [/comment]
[comment collects all operations with the sme name as 'anOperation' in provided package/]
[query private collectOperationsWithSameNameAs(anOperation : Operation, aPackage : Package) : OrderedSet(Operation) =
	aPackage.getPackageOperations()->select(op : Operation | op.name = anOperation.name)->asOrderedSet()/]
[comment collects all operations with the same names as operations that are being called by CallOperationActions in the provided package /]
[query public collectAllPossiblyCalledOperations(aPackage : Package) : Set(Operation) =
	OrderedSet{aPackage.getCallOperationActions().operation->reject(oclIsUndefined()).collectOperationsWithSameNameAs(aPackage)}->flatten()/]



[comment]COLLECT OTHER ENDS FOR CONNECTOR ENDS OF CERTAIN TYPE --------------- [/comment]
[comment checks if 'anEnd' is typed by 'aType', i.e. if 'partWithPort' is defined, it must be typed by 'aType' ; if only 'partWithPort' is undefined, 'role' must be typed by 'aType' /]
[query private isConnectorEndTypeEqualTo(anEnd : ConnectorEnd, aType : Classifier) : Boolean = 
	if (anEnd.oclIsUndefined() or anEnd.role.oclIsUndefined()) then false else if (not anEnd.partWithPort.oclIsUndefined()) then anEnd.partWithPort.type = aType else anEnd.role.type = aType endif endif /]
[comment collects all ConnectorEnds that are typed by aType /]
[query private collectConnectorEndsOfType(aPackage : Package, aType : Classifier) : OrderedSet(ConnectorEnd) = 
	aPackage.allOwnedElements()->filter(ConnectorEnd)->select(isConnectorEndTypeEqualTo(aType))->asOrderedSet()/]
[comment collects valid other ends for all ConnectorEnds that are typed by aType (for external connectors)/]
[query private collectExternalOppositeConnectorEndsForType(aPackage : Package, aType : Classifier) : OrderedSet(ConnectorEnd) = 
	aPackage.collectConnectorEndsOfType(aType).getOtherConnectorEnd()->select(e : ConnectorEnd | (not e.role.oclIsUndefined()) and (e.role.oclIsKindOf(Port)))->asOrderedSet() /]
[comment collects valid other ends for all ConnectorEnds that are owned by aType (for internal connectors)/]
[query private collectInternalOppositeConnectorEndsOfType(aPackage : Package, aType : Classifier) : OrderedSet(ConnectorEnd) =
	 aPackage.allOwnedElements()->filter(ConnectorEnd)->select(aType.attribute->includes(role) and role.oclIsTypeOf(Port)).getOtherConnectorEnd()
	->select(e : ConnectorEnd | ((not e.partWithPort.oclIsUndefined()) and (not e.role.oclIsUndefined()) and aType.attribute->includes(e.partWithPort)))->asOrderedSet()/]

[query public collectOppositeConnectorEndsOfType(aPackage : Package, aType : Classifier) : OrderedSet(ConnectorEnd) =
	OrderedSet{aPackage.collectExternalOppositeConnectorEndsForType(aType), aPackage.collectInternalOppositeConnectorEndsOfType(aType)}->flatten()->asOrderedSet() /]



[comment]COLLECT ALL OPAQUEBEHAVIORS OF THE MODEL THAT ARE EXECUTED EITHER BY CALLBEHAVIORACTION OR DECISIONNODE --------------- [/comment]
[comment collect all CallBehaviorActions in the model that have a defined Opaque behavior /]
[query private collectOpaqueBehaviorsCalledByCBA(aPackage : Package) : Set(OpaqueBehavior) = 
	aPackage.allOwnedElements()->filter(CallBehaviorAction)->select((not behavior.oclIsUndefined()) and (behavior.oclIsKindOf(OpaqueBehavior))).behavior->asSet() /]
[comment collect all DecisionNodes that have an OpaqueBehavior defined as their decision input /]
[query private collectOpaqueBehaviorsCalledByDN(aPackage : Package) : Set(OpaqueBehavior) = 
	aPackage.allOwnedElements()->filter(DecisionNode)->select((not decisionInput.oclIsUndefined()) and (decisionInput.oclIsKindOf(OpaqueBehavior))).decisionInput->asSet() /]
[comment collect all OpaqueBehaviors that are executed in the model either by CallBehaviorAction or by DecisionNode /]
[query public collectAllExecutedOpaqueBehaviors(aPackage : Package) : OrderedSet(OpaqueBehavior) = aPackage.collectOpaqueBehaviorsCalledByCBA()->addAll(aPackage.collectOpaqueBehaviorsCalledByDN())->asOrderedSet() /]


[comment]COLLECT BASE CLASSES AND REALIZED INTERFACES FOR CERTAIN CLASS --------------- [/comment]
[query public collectInheritedTypes(aClassifier : Classifier) : OrderedSet(Classifier) = OrderedSet{aClassifier.collectSuperClasses(), aClassifier.collectRealizedInterfaces()}->flatten()->reject(
																																												oclIsUndefined() or 
																																												name.oclIsUndefined() or 
																																												_package.name = 'Ecore'  or 
																																												_package.name = 'ecore' )->sortedBy(myQualifiedName())/]
[query private collectSuperClasses(aClassifier : Classifier) : OrderedSet(Classifier) = aClassifier.parents()->sortedBy(name)/]
[query private collectRealizedInterfaces(aClassifier : Classifier) : OrderedSet(Classifier) = aClassifier.directlyRealizedInterfaces()->sortedBy(name)/]
[query private collectRedefinedInterfaces(aClassifier : Classifier) : OrderedSet(Classifier) = if(aClassifier.oclIsTypeOf(Interface)) then aClassifier.oclAsType(Interface).redefinedInterface->sortedBy(name) else OrderedSet{} endif/]