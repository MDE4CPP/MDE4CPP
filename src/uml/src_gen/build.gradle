plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.5"
}

description 'Compile task for project: uml'

task compileUml(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'uml'
	description 'compile uml'

	projectFolder = file('.' + File.separator + 'uml')

	inputs.files(fileTree('.') {
        exclude 'uml/.cmake/**'
    })
	if(!file('.' + File.separator + 'uml' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'uml.dll')
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'umld.dll')
	outputs.dir file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'include' + File.separator + 'uml')

	// dependency to basic interfaces
	dependsOn getRootProject().getTasksByName('deliverBasicInterfaces', true) 
	outputs.dir file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'include' + File.separator + 'abstractDataTypes')
	outputs.dir file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'include' + File.separator + 'persistence' + File.separator + 'interfaces')
	outputs.dir file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'include' + File.separator + 'pluginFramework')
	outputs.dir file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'include' + File.separator + 'util')

	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName('compileEcore', true)
	dependsOn ecore
	inputs.files(ecore.outputs)

	// dependency to model 'types'
	def types = getRootProject().getTasksByName('compileTypes', true)
	dependsOn types
	inputs.files(types.outputs)
}

task clean {
	doFirst {
		def cmakeFolder = file('.' + File.separator + 'uml' + File.separator + '.cmake' + File.separator)
		if(cmakeFolder.exists()) {
    		delete cmakeFolder.absolutePath
   			println 'deleting folder ' + cmakeFolder.absolutePath
		}
	}
}
