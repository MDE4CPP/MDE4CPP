
#include "uml/impl/PackageImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>


#include "abstractDataTypes/SubsetUnion.hpp"


#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"


//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Class.hpp"
#include "uml/Comment.hpp"
#include "uml/Constraint.hpp"
#include "uml/Dependency.hpp"
#include "ecore/EObject.hpp"
#include "uml/Element.hpp"
#include "uml/ElementImport.hpp"
#include "uml/Enumeration.hpp"
#include "uml/Interface.hpp"
#include "uml/NamedElement.hpp"
#include "uml/Namespace.hpp"
#include "uml/Package.hpp"
#include "uml/PackageImport.hpp"
#include "uml/PackageMerge.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/PrimitiveType.hpp"
#include "uml/Profile.hpp"
#include "uml/ProfileApplication.hpp"
#include "uml/Stereotype.hpp"
#include "uml/StringExpression.hpp"
#include "uml/TemplateBinding.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/TemplateSignature.hpp"
#include "uml/TemplateableElement.hpp"
#include "uml/Type.hpp"
//Factories and Package includes
#include "ecore/ecorePackage.hpp"
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
PackageImpl::PackageImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

PackageImpl::~PackageImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Package "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
PackageImpl::PackageImpl(std::weak_ptr<uml::Namespace> par_namespace)
:PackageImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
PackageImpl::PackageImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id)
:PackageImpl()
{
	switch(reference_id)
	{	
	case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTINGPACKAGE:
		m_nestingPackage = par_Package;
		m_namespace = par_Package;
		 return;
	case uml::umlPackage::PACKAGEABLEELEMENT_ATTRIBUTE_OWNINGPACKAGE:
		m_owningPackage = par_Package;
		m_namespace = par_Package;
		 return;
	default:
	std::cerr << __PRETTY_FUNCTION__ <<" Reference not found in class with the given ID" << std::endl;
	}
   
}

//Additional constructor for the containments back reference
PackageImpl::PackageImpl(std::weak_ptr<uml::Element> par_owner)
:PackageImpl()
{
	m_owner = par_owner;
}


//Additional constructor for the containments back reference
PackageImpl::PackageImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:PackageImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}

PackageImpl::PackageImpl(const PackageImpl & obj): PackageImpl()
{
	*this = obj;
}

PackageImpl& PackageImpl::operator=(const PackageImpl & obj)
{
	//call overloaded =Operator for each base class
	NamespaceImpl::operator=(obj);
	PackageableElementImpl::operator=(obj);
	TemplateableElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Package 
	 * which is generated by the compiler (as Package is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Package::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Package "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_URI = obj.getURI();

	//copy references with no containment (soft copy)
	m_nestingPackage  = obj.getNestingPackage();
	//Clone references with containment (deep copy)
	//clone reference 'nestedPackage'
	std::shared_ptr<Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/>> nestedPackageList = obj.getNestedPackage();
	if(nestedPackageList)
	{
		/*Subset*/
		m_nestedPackage.reset(new Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_nestedPackage - Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >()" << std::endl;
		#endif
		
		/*Subset*/
		getNestedPackage()->initSubset(getPackagedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_nestedPackage - Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Package> nestedPackageindexElem: *nestedPackageList) 
		{
			std::shared_ptr<uml::Package> temp = std::dynamic_pointer_cast<uml::Package>((nestedPackageindexElem)->copy());
			m_nestedPackage->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr nestedPackage."<< std::endl;)
	}

	//clone reference 'ownedStereotype'
	std::shared_ptr<Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/>> ownedStereotypeList = obj.getOwnedStereotype();
	if(ownedStereotypeList)
	{
		/*Subset*/
		m_ownedStereotype.reset(new Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedStereotype - Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedStereotype()->initSubset(getPackagedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedStereotype - Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Stereotype> ownedStereotypeindexElem: *ownedStereotypeList) 
		{
			std::shared_ptr<uml::Stereotype> temp = std::dynamic_pointer_cast<uml::Stereotype>((ownedStereotypeindexElem)->copy());
			m_ownedStereotype->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr ownedStereotype."<< std::endl;)
	}

	//clone reference 'ownedType'
	std::shared_ptr<Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/>> ownedTypeList = obj.getOwnedType();
	if(ownedTypeList)
	{
		/*Subset*/
		m_ownedType.reset(new Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedType - Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedType()->initSubset(getPackagedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedType - Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Type> ownedTypeindexElem: *ownedTypeList) 
		{
			std::shared_ptr<uml::Type> temp = std::dynamic_pointer_cast<uml::Type>((ownedTypeindexElem)->copy());
			m_ownedType->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr ownedType."<< std::endl;)
	}

	//clone reference 'packageMerge'
	std::shared_ptr<Subset<uml::PackageMerge, uml::Element>> packageMergeList = obj.getPackageMerge();
	if(packageMergeList)
	{
		/*Subset*/
		m_packageMerge.reset(new Subset<uml::PackageMerge, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_packageMerge - Subset<uml::PackageMerge, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getPackageMerge()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_packageMerge - Subset<uml::PackageMerge, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::PackageMerge> packageMergeindexElem: *packageMergeList) 
		{
			std::shared_ptr<uml::PackageMerge> temp = std::dynamic_pointer_cast<uml::PackageMerge>((packageMergeindexElem)->copy());
			m_packageMerge->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr packageMerge."<< std::endl;)
	}

	//clone reference 'packagedElement'
	std::shared_ptr<SubsetUnion<uml::PackageableElement, uml::NamedElement>> packagedElementList = obj.getPackagedElement();
	if(packagedElementList)
	{
		/*SubsetUnion*/
		m_packagedElement.reset(new SubsetUnion<uml::PackageableElement, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_packagedElement - SubsetUnion<uml::PackageableElement, uml::NamedElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getPackagedElement()->initSubsetUnion(getOwnedMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_packagedElement - SubsetUnion<uml::PackageableElement, uml::NamedElement >(getOwnedMember())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::PackageableElement> packagedElementindexElem: *packagedElementList) 
		{
			std::shared_ptr<uml::PackageableElement> temp = std::dynamic_pointer_cast<uml::PackageableElement>((packagedElementindexElem)->copy());
			m_packagedElement->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr packagedElement."<< std::endl;)
	}

	//clone reference 'profileApplication'
	std::shared_ptr<Subset<uml::ProfileApplication, uml::Element>> profileApplicationList = obj.getProfileApplication();
	if(profileApplicationList)
	{
		/*Subset*/
		m_profileApplication.reset(new Subset<uml::ProfileApplication, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_profileApplication - Subset<uml::ProfileApplication, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getProfileApplication()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_profileApplication - Subset<uml::ProfileApplication, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::ProfileApplication> profileApplicationindexElem: *profileApplicationList) 
		{
			std::shared_ptr<uml::ProfileApplication> temp = std::dynamic_pointer_cast<uml::ProfileApplication>((profileApplicationindexElem)->copy());
			m_profileApplication->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr profileApplication."<< std::endl;)
	}
	/*Subset*/
	getNestedPackage()->initSubset(getPackagedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_nestedPackage - Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
	#endif
	
	/*Subset*/
	getOwnedStereotype()->initSubset(getPackagedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_ownedStereotype - Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
	#endif
	
	/*Subset*/
	getOwnedType()->initSubset(getPackagedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_ownedType - Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
	#endif
	
	/*Subset*/
	getPackageMerge()->initSubset(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_packageMerge - Subset<uml::PackageMerge, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	/*SubsetUnion*/
	getPackagedElement()->initSubsetUnion(getOwnedMember());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value SubsetUnion: " << "m_packagedElement - SubsetUnion<uml::PackageableElement, uml::NamedElement >(getOwnedMember())" << std::endl;
	#endif
	
	/*Subset*/
	getProfileApplication()->initSubset(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_profileApplication - Subset<uml::ProfileApplication, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> PackageImpl::copy() const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl());
	*element =(*this);
	element->setThisPackagePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
std::shared_ptr<Bag<uml::Stereotype> > PackageImpl::allApplicableStereotypes()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<ecore::EObject> > PackageImpl::applyProfile(std::shared_ptr<uml::Profile> profile)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Profile> PackageImpl::containingProfile()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Class> PackageImpl::createOwnedClass(std::string name,bool isAbstract)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Enumeration> PackageImpl::createOwnedEnumeration(std::string name)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Interface> PackageImpl::createOwnedInterface(std::string name)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::PrimitiveType> PackageImpl::createOwnedPrimitiveType(std::string name)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Stereotype> PackageImpl::createOwnedStereotype(std::string name,bool isAbstract)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PackageImpl::elements_public_or_private(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Profile> > PackageImpl::getAllAppliedProfiles()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::ProfileApplication> > PackageImpl::getAllProfileApplications()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Profile> PackageImpl::getAppliedProfile(std::string qualifiedName)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Profile> PackageImpl::getAppliedProfile(std::string qualifiedName,bool recurse)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Profile> > PackageImpl::getAppliedProfiles()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Package> > PackageImpl::getNestedPackages()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Stereotype> > PackageImpl::getOwnedStereotypes()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Type> > PackageImpl::getOwnedTypes()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::ProfileApplication> PackageImpl::getProfileApplication(std::shared_ptr<uml::Profile> profile)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::ProfileApplication> PackageImpl::getProfileApplication(std::shared_ptr<uml::Profile> profile,bool recurse)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PackageImpl::isModelLibrary()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PackageImpl::isProfileApplied(std::shared_ptr<uml::Profile> profile)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PackageImpl::makesVisible(std::shared_ptr<uml::NamedElement> el)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<ecore::EObject> > PackageImpl::unapplyProfile(std::shared_ptr<uml::Profile> profile)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::PackageableElement> > PackageImpl::visibleMembers()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute URI */
std::string PackageImpl::getURI() const 
{
	return m_URI;
}
void PackageImpl::setURI(std::string _URI)
{
	m_URI = _URI;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference nestedPackage */
std::shared_ptr<Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/>> PackageImpl::getNestedPackage() const
{
	if(m_nestedPackage == nullptr)
	{
		/*Subset*/
		m_nestedPackage.reset(new Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_nestedPackage - Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >()" << std::endl;
		#endif
		
		/*Subset*/
		getNestedPackage()->initSubset(getPackagedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_nestedPackage - Subset<uml::Package, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
		#endif
		
	}
    return m_nestedPackage;
}

/* Getter & Setter for reference nestingPackage */
std::weak_ptr<uml::Package> PackageImpl::getNestingPackage() const
{
    return m_nestingPackage;
}
void PackageImpl::setNestingPackage(std::weak_ptr<uml::Package> _nestingPackage)
{
    m_nestingPackage = _nestingPackage;
	
}

/* Getter & Setter for reference ownedStereotype */
std::shared_ptr<Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/>> PackageImpl::getOwnedStereotype() const
{
	if(m_ownedStereotype == nullptr)
	{
		/*Subset*/
		m_ownedStereotype.reset(new Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedStereotype - Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedStereotype()->initSubset(getPackagedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedStereotype - Subset<uml::Stereotype, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
		#endif
		
	}
    return m_ownedStereotype;
}

/* Getter & Setter for reference ownedType */
std::shared_ptr<Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/>> PackageImpl::getOwnedType() const
{
	if(m_ownedType == nullptr)
	{
		/*Subset*/
		m_ownedType.reset(new Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedType - Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedType()->initSubset(getPackagedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedType - Subset<uml::Type, uml::PackageableElement /*Subset does not reference a union*/ >(getPackagedElement())" << std::endl;
		#endif
		
	}
    return m_ownedType;
}

/* Getter & Setter for reference packageMerge */
std::shared_ptr<Subset<uml::PackageMerge, uml::Element>> PackageImpl::getPackageMerge() const
{
	if(m_packageMerge == nullptr)
	{
		/*Subset*/
		m_packageMerge.reset(new Subset<uml::PackageMerge, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_packageMerge - Subset<uml::PackageMerge, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getPackageMerge()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_packageMerge - Subset<uml::PackageMerge, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_packageMerge;
}

/* Getter & Setter for reference packagedElement */
std::shared_ptr<SubsetUnion<uml::PackageableElement, uml::NamedElement>> PackageImpl::getPackagedElement() const
{
	if(m_packagedElement == nullptr)
	{
		/*SubsetUnion*/
		m_packagedElement.reset(new SubsetUnion<uml::PackageableElement, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_packagedElement - SubsetUnion<uml::PackageableElement, uml::NamedElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getPackagedElement()->initSubsetUnion(getOwnedMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_packagedElement - SubsetUnion<uml::PackageableElement, uml::NamedElement >(getOwnedMember())" << std::endl;
		#endif
		
	}
    return m_packagedElement;
}

/* Getter & Setter for reference profileApplication */
std::shared_ptr<Subset<uml::ProfileApplication, uml::Element>> PackageImpl::getProfileApplication() const
{
	if(m_profileApplication == nullptr)
	{
		/*Subset*/
		m_profileApplication.reset(new Subset<uml::ProfileApplication, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_profileApplication - Subset<uml::ProfileApplication, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getProfileApplication()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_profileApplication - Subset<uml::ProfileApplication, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_profileApplication;
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<uml::NamedElement>> PackageImpl::getMember() const
{
	if(m_member == nullptr)
	{
		/*Union*/
		m_member.reset(new Union<uml::NamedElement>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_member - Union<uml::NamedElement>()" << std::endl;
		#endif
		
		
	}
	return m_member;
}

std::weak_ptr<uml::Namespace> PackageImpl::getNamespace() const
{
	return m_namespace;
}

std::shared_ptr<Union<uml::Element>> PackageImpl::getOwnedElement() const
{
	if(m_ownedElement == nullptr)
	{
		/*Union*/
		m_ownedElement.reset(new Union<uml::Element>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_ownedElement - Union<uml::Element>()" << std::endl;
		#endif
		
		
	}
	return m_ownedElement;
}

std::shared_ptr<SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement>> PackageImpl::getOwnedMember() const
{
	if(m_ownedMember == nullptr)
	{
		/*SubsetUnion*/
		m_ownedMember.reset(new SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_ownedMember - SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getOwnedMember()->initSubsetUnion(getOwnedElement(), getMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_ownedMember - SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement >(getOwnedElement(), getMember())" << std::endl;
		#endif
		
	}
	return m_ownedMember;
}

std::weak_ptr<uml::Element> PackageImpl::getOwner() const
{
	return m_owner;
}



//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> PackageImpl::eContainer() const
{
	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_nestingPackage.lock())
	{
		return wp;
	}
	if(auto wp = m_owningPackage.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}


	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void PackageImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void PackageImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("URI");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'std::string'
			std::string value;
			value = iter->second;
			this->setURI(value);
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	NamespaceImpl::loadAttributes(loadHandler, attr_list);
	PackageableElementImpl::loadAttributes(loadHandler, attr_list);
	TemplateableElementImpl::loadAttributes(loadHandler, attr_list);
}

void PackageImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("nestedPackage") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "Package";
			}
			loadHandler->handleChildContainer<uml::Package>(this->getNestedPackage());  

			return; 
		}

		if ( nodeName.compare("ownedStereotype") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "Stereotype";
			}
			loadHandler->handleChildContainer<uml::Stereotype>(this->getOwnedStereotype());  

			return; 
		}

		if ( nodeName.compare("ownedType") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChildContainer<uml::Type>(this->getOwnedType());  

			return; 
		}

		if ( nodeName.compare("packageMerge") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "PackageMerge";
			}
			loadHandler->handleChildContainer<uml::PackageMerge>(this->getPackageMerge());  

			return; 
		}

		if ( nodeName.compare("packagedElement") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChildContainer<uml::PackageableElement>(this->getPackagedElement());  

			return; 
		}

		if ( nodeName.compare("profileApplication") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "ProfileApplication";
			}
			loadHandler->handleChildContainer<uml::ProfileApplication>(this->getProfileApplication());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	NamespaceImpl::loadNode(nodeName, loadHandler);
	PackageableElementImpl::loadNode(nodeName, loadHandler);
	TemplateableElementImpl::loadNode(nodeName, loadHandler);
}

void PackageImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	switch(featureID)
	{
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTINGPACKAGE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::Package> _nestingPackage = std::dynamic_pointer_cast<uml::Package>( references.front() );
				setNestingPackage(_nestingPackage);
			}
			
			return;
		}
	}
	NamespaceImpl::resolveReferences(featureID, references);
	PackageableElementImpl::resolveReferences(featureID, references);
	TemplateableElementImpl::resolveReferences(featureID, references);
}

void PackageImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	NamespaceImpl::saveContent(saveHandler);
	PackageableElementImpl::saveContent(saveHandler);
	TemplateableElementImpl::saveContent(saveHandler);
	
	NamedElementImpl::saveContent(saveHandler);
	ParameterableElementImpl::saveContent(saveHandler);
	
	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void PackageImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Save 'nestedPackage'
		for (std::shared_ptr<uml::Package> nestedPackage : *this->getNestedPackage()) 
		{
			saveHandler->addReference(nestedPackage, "nestedPackage", nestedPackage->eClass() != package->getPackage_Class());
		}

		// Save 'ownedStereotype'
		for (std::shared_ptr<uml::Stereotype> ownedStereotype : *this->getOwnedStereotype()) 
		{
			saveHandler->addReference(ownedStereotype, "ownedStereotype", ownedStereotype->eClass() != package->getStereotype_Class());
		}

		// Save 'ownedType'
		for (std::shared_ptr<uml::Type> ownedType : *this->getOwnedType()) 
		{
			saveHandler->addReference(ownedType, "ownedType", ownedType->eClass() != package->getType_Class());
		}

		// Save 'packageMerge'
		for (std::shared_ptr<uml::PackageMerge> packageMerge : *this->getPackageMerge()) 
		{
			saveHandler->addReference(packageMerge, "packageMerge", packageMerge->eClass() != package->getPackageMerge_Class());
		}

		// Save 'profileApplication'
		for (std::shared_ptr<uml::ProfileApplication> profileApplication : *this->getProfileApplication()) 
		{
			saveHandler->addReference(profileApplication, "profileApplication", profileApplication->eClass() != package->getProfileApplication_Class());
		}
		// Add attributes
		if ( this->eIsSet(package->getPackage_Attribute_uRI()) )
		{
			saveHandler->addAttribute("URI", this->getURI());
		}
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'packagedElement'

		saveHandler->addReferences<uml::PackageableElement>("packagedElement", this->getPackagedElement());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

std::shared_ptr<ecore::EClass> PackageImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getPackage_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any PackageImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::PACKAGE_ATTRIBUTE_URI:
			return eAny(getURI(),ecore::ecorePackage::ESTRING_CLASS,false); //17020
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTEDPACKAGE:
		{
			return eAnyBag(getNestedPackage(),uml::umlPackage::PACKAGE_CLASS); //17021
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTINGPACKAGE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getNestingPackage().lock();
			return eAny(returnValue,uml::umlPackage::PACKAGE_CLASS,false); //17022
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_OWNEDSTEREOTYPE:
		{
			return eAnyBag(getOwnedStereotype(),uml::umlPackage::STEREOTYPE_CLASS); //17023
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:
		{
			return eAnyBag(getOwnedType(),uml::umlPackage::TYPE_CLASS); //17024
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PACKAGEMERGE:
		{
			return eAnyBag(getPackageMerge(),uml::umlPackage::PACKAGEMERGE_CLASS); //17025
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:
		{
			return eAnyBag(getPackagedElement(),uml::umlPackage::PACKAGEABLEELEMENT_CLASS); //17026
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PROFILEAPPLICATION:
		{
			return eAnyBag(getProfileApplication(),uml::umlPackage::PROFILEAPPLICATION_CLASS); //17027
		}
	}
	Any result;
	result = NamespaceImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = PackageableElementImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = TemplateableElementImpl::eGet(featureID, resolve, coreType);
	return result;
}

bool PackageImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::PACKAGE_ATTRIBUTE_URI:
			return getURI() != ""; //17020
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTEDPACKAGE:
			return getNestedPackage() != nullptr; //17021
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTINGPACKAGE:
			return getNestingPackage().lock() != nullptr; //17022
		case uml::umlPackage::PACKAGE_ATTRIBUTE_OWNEDSTEREOTYPE:
			return getOwnedStereotype() != nullptr; //17023
		case uml::umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:
			return getOwnedType() != nullptr; //17024
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PACKAGEMERGE:
			return getPackageMerge() != nullptr; //17025
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:
			return getPackagedElement() != nullptr; //17026
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PROFILEAPPLICATION:
			return getProfileApplication() != nullptr; //17027
	}
	bool result = false;
	result = NamespaceImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = PackageableElementImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = TemplateableElementImpl::internalEIsSet(featureID);
	return result;
}

bool PackageImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::PACKAGE_ATTRIBUTE_URI:
		{
			// CAST Any to std::string
			std::string _URI = newValue->get<std::string>();
			setURI(_URI); //17020
			return true;
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTEDPACKAGE:
		{
			// CAST Any to Bag<uml::Package>
			if((newValue->isContainer()) && (uml::umlPackage::PACKAGE_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::Package>> nestedPackageList= newValue->get<std::shared_ptr<Bag<uml::Package>>>();
					std::shared_ptr<Bag<uml::Package>> _nestedPackage=getNestedPackage();
					for(const std::shared_ptr<uml::Package> indexNestedPackage: *_nestedPackage)
					{
						if (nestedPackageList->find(indexNestedPackage) == -1)
						{
							_nestedPackage->erase(indexNestedPackage);
						}
					}

					for(const std::shared_ptr<uml::Package> indexNestedPackage: *nestedPackageList)
					{
						if (_nestedPackage->find(indexNestedPackage) == -1)
						{
							_nestedPackage->add(indexNestedPackage);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_NESTINGPACKAGE:
		{
			// CAST Any to uml::Package
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<uml::Package> _nestingPackage = std::dynamic_pointer_cast<uml::Package>(_temp);
			setNestingPackage(_nestingPackage); //17022
			return true;
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:
		{
			// CAST Any to Bag<uml::Type>
			if((newValue->isContainer()) && (uml::umlPackage::TYPE_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::Type>> ownedTypeList= newValue->get<std::shared_ptr<Bag<uml::Type>>>();
					std::shared_ptr<Bag<uml::Type>> _ownedType=getOwnedType();
					for(const std::shared_ptr<uml::Type> indexOwnedType: *_ownedType)
					{
						if (ownedTypeList->find(indexOwnedType) == -1)
						{
							_ownedType->erase(indexOwnedType);
						}
					}

					for(const std::shared_ptr<uml::Type> indexOwnedType: *ownedTypeList)
					{
						if (_ownedType->find(indexOwnedType) == -1)
						{
							_ownedType->add(indexOwnedType);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PACKAGEMERGE:
		{
			// CAST Any to Bag<uml::PackageMerge>
			if((newValue->isContainer()) && (uml::umlPackage::PACKAGEMERGE_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::PackageMerge>> packageMergeList= newValue->get<std::shared_ptr<Bag<uml::PackageMerge>>>();
					std::shared_ptr<Bag<uml::PackageMerge>> _packageMerge=getPackageMerge();
					for(const std::shared_ptr<uml::PackageMerge> indexPackageMerge: *_packageMerge)
					{
						if (packageMergeList->find(indexPackageMerge) == -1)
						{
							_packageMerge->erase(indexPackageMerge);
						}
					}

					for(const std::shared_ptr<uml::PackageMerge> indexPackageMerge: *packageMergeList)
					{
						if (_packageMerge->find(indexPackageMerge) == -1)
						{
							_packageMerge->add(indexPackageMerge);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:
		{
			// CAST Any to Bag<uml::PackageableElement>
			if((newValue->isContainer()) && (uml::umlPackage::PACKAGEABLEELEMENT_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::PackageableElement>> packagedElementList= newValue->get<std::shared_ptr<Bag<uml::PackageableElement>>>();
					std::shared_ptr<Bag<uml::PackageableElement>> _packagedElement=getPackagedElement();
					for(const std::shared_ptr<uml::PackageableElement> indexPackagedElement: *_packagedElement)
					{
						if (packagedElementList->find(indexPackagedElement) == -1)
						{
							_packagedElement->erase(indexPackagedElement);
						}
					}

					for(const std::shared_ptr<uml::PackageableElement> indexPackagedElement: *packagedElementList)
					{
						if (_packagedElement->find(indexPackagedElement) == -1)
						{
							_packagedElement->add(indexPackagedElement);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::PACKAGE_ATTRIBUTE_PROFILEAPPLICATION:
		{
			// CAST Any to Bag<uml::ProfileApplication>
			if((newValue->isContainer()) && (uml::umlPackage::PROFILEAPPLICATION_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::ProfileApplication>> profileApplicationList= newValue->get<std::shared_ptr<Bag<uml::ProfileApplication>>>();
					std::shared_ptr<Bag<uml::ProfileApplication>> _profileApplication=getProfileApplication();
					for(const std::shared_ptr<uml::ProfileApplication> indexProfileApplication: *_profileApplication)
					{
						if (profileApplicationList->find(indexProfileApplication) == -1)
						{
							_profileApplication->erase(indexProfileApplication);
						}
					}

					for(const std::shared_ptr<uml::ProfileApplication> indexProfileApplication: *profileApplicationList)
					{
						if (_profileApplication->find(indexProfileApplication) == -1)
						{
							_profileApplication->add(indexProfileApplication);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
	}

	bool result = false;
	result = NamespaceImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = PackageableElementImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = TemplateableElementImpl::eSet(featureID, newValue);
	return result;
}

//*********************************
// EOperation Invoke
//*********************************
Any PackageImpl::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;

  	switch(operationID)
	{
		// uml::Package::allApplicableStereotypes() : uml::Stereotype[*]: 1557820782
		case umlPackage::PACKAGE_OPERATION_ALLAPPLICABLESTEREOTYPES:
		{
			std::shared_ptr<Bag<uml::Stereotype> > resultList = this->allApplicableStereotypes();
			return eAny(resultList,uml::umlPackage::STEREOTYPE_CLASS,true);
			break;
		}
		// uml::Package::applyProfile(uml::Profile) : ecore::EObject[*]: 532857739
		case umlPackage::PACKAGE_OPERATION_APPLYPROFILE_PROFILE:
		{
			//Retrieve input parameter 'profile'
			//parameter 0
			std::shared_ptr<uml::Profile> incoming_param_profile;
			std::list<Any>::const_iterator incoming_param_profile_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_profile = (*incoming_param_profile_arguments_citer)->get<std::shared_ptr<uml::Profile> >();
			std::shared_ptr<Bag<ecore::EObject> > resultList = this->applyProfile(incoming_param_profile);
			return eAny(resultList,ecore::ecorePackage::EOBJECT_CLASS,true);
			break;
		}
		// uml::Package::containingProfile() : uml::Profile: 1369083844
		case umlPackage::PACKAGE_OPERATION_CONTAININGPROFILE:
		{
			result = eAny(this->containingProfile(), uml::umlPackage::PROFILE_CLASS,false);
			break;
		}
		// uml::Package::createOwnedClass(std::string, bool) : uml::Class: 520555000
		case umlPackage::PACKAGE_OPERATION_CREATEOWNEDCLASS_STRING_BOOLEAN:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			//Retrieve input parameter 'isAbstract'
			//parameter 1
			bool incoming_param_isAbstract;
			std::list<Any>::const_iterator incoming_param_isAbstract_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_isAbstract = (*incoming_param_isAbstract_arguments_citer)->get<bool >();
			result = eAny(this->createOwnedClass(incoming_param_name,incoming_param_isAbstract), uml::umlPackage::CLASS_CLASS,false);
			break;
		}
		// uml::Package::createOwnedEnumeration(std::string) : uml::Enumeration: 588810307
		case umlPackage::PACKAGE_OPERATION_CREATEOWNEDENUMERATION_STRING:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			result = eAny(this->createOwnedEnumeration(incoming_param_name), uml::umlPackage::ENUMERATION_CLASS,false);
			break;
		}
		// uml::Package::createOwnedInterface(std::string) : uml::Interface: 2141179079
		case umlPackage::PACKAGE_OPERATION_CREATEOWNEDINTERFACE_STRING:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			result = eAny(this->createOwnedInterface(incoming_param_name), uml::umlPackage::INTERFACE_CLASS,false);
			break;
		}
		// uml::Package::createOwnedPrimitiveType(std::string) : uml::PrimitiveType: 1204664161
		case umlPackage::PACKAGE_OPERATION_CREATEOWNEDPRIMITIVETYPE_STRING:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			result = eAny(this->createOwnedPrimitiveType(incoming_param_name), uml::umlPackage::PRIMITIVETYPE_CLASS,false);
			break;
		}
		// uml::Package::createOwnedStereotype(std::string, bool) : uml::Stereotype: 64069774
		case umlPackage::PACKAGE_OPERATION_CREATEOWNEDSTEREOTYPE_STRING_BOOLEAN:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			//Retrieve input parameter 'isAbstract'
			//parameter 1
			bool incoming_param_isAbstract;
			std::list<Any>::const_iterator incoming_param_isAbstract_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_isAbstract = (*incoming_param_isAbstract_arguments_citer)->get<bool >();
			result = eAny(this->createOwnedStereotype(incoming_param_name,incoming_param_isAbstract), uml::umlPackage::STEREOTYPE_CLASS,false);
			break;
		}
		// uml::Package::elements_public_or_private(Any, std::map) : bool: 1451255929
		case umlPackage::PACKAGE_OPERATION_ELEMENTS_PUBLIC_OR_PRIVATE_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->elements_public_or_private(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::Package::getAllAppliedProfiles() : uml::Profile[*]: 1609552989
		case umlPackage::PACKAGE_OPERATION_GETALLAPPLIEDPROFILES:
		{
			std::shared_ptr<Bag<uml::Profile> > resultList = this->getAllAppliedProfiles();
			return eAny(resultList,uml::umlPackage::PROFILE_CLASS,true);
			break;
		}
		// uml::Package::getAllProfileApplications() : uml::ProfileApplication[*]: 1816651881
		case umlPackage::PACKAGE_OPERATION_GETALLPROFILEAPPLICATIONS:
		{
			std::shared_ptr<Bag<uml::ProfileApplication> > resultList = this->getAllProfileApplications();
			return eAny(resultList,uml::umlPackage::PROFILEAPPLICATION_CLASS,true);
			break;
		}
		// uml::Package::getAppliedProfile(std::string) : uml::Profile: 996929944
		case umlPackage::PACKAGE_OPERATION_GETAPPLIEDPROFILE_STRING:
		{
			//Retrieve input parameter 'qualifiedName'
			//parameter 0
			std::string incoming_param_qualifiedName;
			std::list<Any>::const_iterator incoming_param_qualifiedName_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_qualifiedName = (*incoming_param_qualifiedName_arguments_citer)->get<std::string >();
			result = eAny(this->getAppliedProfile(incoming_param_qualifiedName), uml::umlPackage::PROFILE_CLASS,false);
			break;
		}
		// uml::Package::getAppliedProfile(std::string, bool) : uml::Profile: 537452639
		case umlPackage::PACKAGE_OPERATION_GETAPPLIEDPROFILE_STRING_BOOLEAN:
		{
			//Retrieve input parameter 'qualifiedName'
			//parameter 0
			std::string incoming_param_qualifiedName;
			std::list<Any>::const_iterator incoming_param_qualifiedName_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_qualifiedName = (*incoming_param_qualifiedName_arguments_citer)->get<std::string >();
			//Retrieve input parameter 'recurse'
			//parameter 1
			bool incoming_param_recurse;
			std::list<Any>::const_iterator incoming_param_recurse_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_recurse = (*incoming_param_recurse_arguments_citer)->get<bool >();
			result = eAny(this->getAppliedProfile(incoming_param_qualifiedName,incoming_param_recurse), uml::umlPackage::PROFILE_CLASS,false);
			break;
		}
		// uml::Package::getAppliedProfiles() : uml::Profile[*]: 619686908
		case umlPackage::PACKAGE_OPERATION_GETAPPLIEDPROFILES:
		{
			std::shared_ptr<Bag<uml::Profile> > resultList = this->getAppliedProfiles();
			return eAny(resultList,uml::umlPackage::PROFILE_CLASS,true);
			break;
		}
		// uml::Package::getNestedPackages() : uml::Package[*]: 1133617509
		case umlPackage::PACKAGE_OPERATION_GETNESTEDPACKAGES:
		{
			std::shared_ptr<Bag<uml::Package> > resultList = this->getNestedPackages();
			return eAny(resultList,uml::umlPackage::PACKAGE_CLASS,true);
			break;
		}
		// uml::Package::getOwnedStereotypes() : uml::Stereotype[*]: 984223651
		case umlPackage::PACKAGE_OPERATION_GETOWNEDSTEREOTYPES:
		{
			std::shared_ptr<Bag<uml::Stereotype> > resultList = this->getOwnedStereotypes();
			return eAny(resultList,uml::umlPackage::STEREOTYPE_CLASS,true);
			break;
		}
		// uml::Package::getOwnedTypes() : uml::Type[*]: 1807861876
		case umlPackage::PACKAGE_OPERATION_GETOWNEDTYPES:
		{
			std::shared_ptr<Bag<uml::Type> > resultList = this->getOwnedTypes();
			return eAny(resultList,uml::umlPackage::TYPE_CLASS,true);
			break;
		}
		// uml::Package::getProfileApplication(uml::Profile) : uml::ProfileApplication: 1780891819
		case umlPackage::PACKAGE_OPERATION_GETPROFILEAPPLICATION_PROFILE:
		{
			//Retrieve input parameter 'profile'
			//parameter 0
			std::shared_ptr<uml::Profile> incoming_param_profile;
			std::list<Any>::const_iterator incoming_param_profile_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_profile = (*incoming_param_profile_arguments_citer)->get<std::shared_ptr<uml::Profile> >();
			result = eAny(this->getProfileApplication(incoming_param_profile), uml::umlPackage::PROFILEAPPLICATION_CLASS,false);
			break;
		}
		// uml::Package::getProfileApplication(uml::Profile, bool) : uml::ProfileApplication: 1620950971
		case umlPackage::PACKAGE_OPERATION_GETPROFILEAPPLICATION_PROFILE_BOOLEAN:
		{
			//Retrieve input parameter 'profile'
			//parameter 0
			std::shared_ptr<uml::Profile> incoming_param_profile;
			std::list<Any>::const_iterator incoming_param_profile_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_profile = (*incoming_param_profile_arguments_citer)->get<std::shared_ptr<uml::Profile> >();
			//Retrieve input parameter 'recurse'
			//parameter 1
			bool incoming_param_recurse;
			std::list<Any>::const_iterator incoming_param_recurse_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_recurse = (*incoming_param_recurse_arguments_citer)->get<bool >();
			result = eAny(this->getProfileApplication(incoming_param_profile,incoming_param_recurse), uml::umlPackage::PROFILEAPPLICATION_CLASS,false);
			break;
		}
		// uml::Package::isModelLibrary() : bool: 126460786
		case umlPackage::PACKAGE_OPERATION_ISMODELLIBRARY:
		{
			result = eAny(this->isModelLibrary(),0,false);
			break;
		}
		// uml::Package::isProfileApplied(uml::Profile) : bool: 1688405008
		case umlPackage::PACKAGE_OPERATION_ISPROFILEAPPLIED_PROFILE:
		{
			//Retrieve input parameter 'profile'
			//parameter 0
			std::shared_ptr<uml::Profile> incoming_param_profile;
			std::list<Any>::const_iterator incoming_param_profile_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_profile = (*incoming_param_profile_arguments_citer)->get<std::shared_ptr<uml::Profile> >();
			result = eAny(this->isProfileApplied(incoming_param_profile),0,false);
			break;
		}
		// uml::Package::makesVisible(uml::NamedElement) : bool: 1550634476
		case umlPackage::PACKAGE_OPERATION_MAKESVISIBLE_NAMEDELEMENT:
		{
			//Retrieve input parameter 'el'
			//parameter 0
			std::shared_ptr<uml::NamedElement> incoming_param_el;
			std::list<Any>::const_iterator incoming_param_el_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_el = (*incoming_param_el_arguments_citer)->get<std::shared_ptr<uml::NamedElement> >();
			result = eAny(this->makesVisible(incoming_param_el),0,false);
			break;
		}
		// uml::Package::unapplyProfile(uml::Profile) : ecore::EObject[*]: 775995658
		case umlPackage::PACKAGE_OPERATION_UNAPPLYPROFILE_PROFILE:
		{
			//Retrieve input parameter 'profile'
			//parameter 0
			std::shared_ptr<uml::Profile> incoming_param_profile;
			std::list<Any>::const_iterator incoming_param_profile_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_profile = (*incoming_param_profile_arguments_citer)->get<std::shared_ptr<uml::Profile> >();
			std::shared_ptr<Bag<ecore::EObject> > resultList = this->unapplyProfile(incoming_param_profile);
			return eAny(resultList,ecore::ecorePackage::EOBJECT_CLASS,true);
			break;
		}
		// uml::Package::visibleMembers() : uml::PackageableElement[*]: 1123478292
		case umlPackage::PACKAGE_OPERATION_VISIBLEMEMBERS:
		{
			std::shared_ptr<Bag<uml::PackageableElement> > resultList = this->visibleMembers();
			return eAny(resultList,uml::umlPackage::PACKAGEABLEELEMENT_CLASS,true);
			break;
		}

		default:
		{
			// call superTypes
			result = TemplateableElementImpl::eInvoke(operationID, arguments);
			if (!result->isEmpty())
				break;
			result = PackageableElementImpl::eInvoke(operationID, arguments);
			if (!result->isEmpty())
				break;
			result = NamespaceImpl::eInvoke(operationID, arguments);
			if (!result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Package> PackageImpl::getThisPackagePtr() const
{
	return m_thisPackagePtr.lock();
}
void PackageImpl::setThisPackagePtr(std::weak_ptr<uml::Package> thisPackagePtr)
{
	m_thisPackagePtr = thisPackagePtr;
	setThisNamespacePtr(thisPackagePtr);
	setThisPackageableElementPtr(thisPackagePtr);
	setThisTemplateableElementPtr(thisPackagePtr);
}


