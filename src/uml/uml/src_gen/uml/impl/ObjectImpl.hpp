//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_OBJECTOBJECTIMPL_HPP
#define UML_OBJECTOBJECTIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Object.hpp"


#include "ecore/impl/EModelElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ObjectImpl : virtual public ecore::EModelElementImpl,
virtual public Object 
	{
		public: 
			ObjectImpl(const ObjectImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ObjectImpl& operator=(ObjectImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ObjectImpl();
			virtual std::shared_ptr<uml::Object> getThisObjectPtr() const;
			virtual void setThisObjectPtr(std::weak_ptr<uml::Object> thisObjectPtr);


		public:
			//destructor
			virtual ~ObjectImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			If Property has multiplicity upper bound >1, add() will automatically add the value to the collection.
			*/
			 
			virtual void add(const std::shared_ptr<uml::Property>& _property, const std::shared_ptr<Any>& value) ;
			/*!
			If Property has multiplicity upper bound >1, add() will automatically add the value to the collection.
			Value will be added at the position given by insertAt.
			*/
			 
			virtual void add(const std::shared_ptr<uml::Property>& _property, const std::shared_ptr<Any>& value, int insertAt) ;
			/*!
			Abstract operation to destroy an instance.
			*/
			 
			virtual void destroy() ;
			/*!
			Gets the value of the given property. If the Property has multiplicity upper bound of 1, get() returns the value of the
			Property. If Property has multiplicity upper bound >1, get() returns a ReflectiveCollection containing the values of the
			Property. If there are no values, the ReflectiveCollection returned is empty. 
			*/
			 
			virtual std::shared_ptr<Any> get(const std::shared_ptr<uml::Property>& _property) const ;
			/*!
			Calls the supplied Operation on the object, passing the supplied Arguments and returning the result.
			The Operation must be defined on the Class of the Object, and the arguments must refer to Parameters of the Operation.
			If an Argument is not supplied for a Parameter, its default value, if any, will be used.
			*/
			 
			virtual std::shared_ptr<Any> invoke(const std::shared_ptr<uml::Operation>& _operation, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments) ;
			/*!
			Calls the Operation corresponding to the supplied OpaqueBehavior on the object, passing the supplied Arguments and returning the result.
			The OpaqueBehavior must be zin the context of the Class of the Object, and the arguments must refer to Parameters of the OpaqueBehavior.
			If an Argument is not supplied for a Parameter, its default value, if any, will be used.
			*/
			 
			virtual std::shared_ptr<Any> invoke(const std::shared_ptr<uml::OpaqueBehavior>& _opaqueBehavior, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments) ;
			/*!
			If Property has multiplicity upper bound >1, remove() will automatically remove the value from the collection.
			*/
			 
			virtual void remove(const std::shared_ptr<uml::Property>& _property, const std::shared_ptr<Any>& value) ;
			/*!
			If the Property has multiplicity upper bound = 1, set() atomically updates the value of the Property to the object
			parameter.
			*/
			 
			virtual void set(const std::shared_ptr<uml::Property>& _property, const std::shared_ptr<Any>& value) ;
			virtual void unset(const std::shared_ptr<uml::Property>& _property) ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::Object> m_thisObjectPtr;
	};
}
#endif /* end of include guard: UML_OBJECTOBJECTIMPL_HPP */
