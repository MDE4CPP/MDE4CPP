[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generatePackageHelper('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]

[query public getMetaMetaModelClasses(anEPackage : EPackage) : Set(EClassifier) = OrderedSet{
								anEPackage.eAllContents().eClass(), 
								anEPackage.eAllContents()->selectByKind(EClass).eOperations.eClass(), 
								anEPackage.eAllContents()->selectByKind(EClass).eOperations.eParameters.eType.eClass(), 
								anEPackage.eAllContents()->selectByKind(EClass).eOperations.eParameters.eClass(), 
								anEPackage.eAllContents()->selectByKind(EClass).eAttributes.eClass(), 
								anEPackage.eAllContents()->selectByKind(EClass).eAttributes.eType.eClass(), 
								anEPackage.eAllContents()->selectByKind(EClass).eReferences.eClass()
						}->flatten()->selectByKind(EClass)->sortedBy(name)/]

[template public generateDeletePrivatePackageMember(anENamedElement : ENamedElement)]
[anENamedElement.getClassMemberName()/].reset();
[/template]

[template public generateModelElementGetter(anENamedElement : ENamedElement, anEPackage : EPackage, impl : Boolean) ? ( not hasImplOnly())]
virtual std::shared_ptr<[metaModelTypeString(anENamedElement, anEPackage)/]> get[anENamedElement.getMemberNameUpperFirst()/]() const [abstractSufix(impl)/];

[/template]


[template public generateModelElementGetterImpl(anENamedElement : ENamedElement, anEPackage : EPackage)]
std::shared_ptr<[metaModelTypeString(anENamedElement, anEPackage)/]> [anEPackage.name.toUpperFirst()/]PackageImpl::get[anENamedElement.getMemberNameUpperFirst()/]() const
{
	return [anENamedElement.getClassMemberName()/];
}

[/template]

[template public generateSubPackageGetter(anEPackage : EPackage, impl : Boolean) ? ( not hasImplOnly()) ]			
virtual std::shared_ptr<[anEPackage.name.toUpperFirst()/]::[anEPackage.name.toUpperFirst()/]Package> get[anEPackage.getMemberNameUpperFirst()/]Package() const [abstractSufix(impl)/];

[/template]

[template public generateSubPackageGetterImpl(aSubPackage: EPackage, anEPackage: EPackage)]
std::shared_ptr<[aSubPackage.name.toUpperFirst()/]::[aSubPackage.name.toUpperFirst()/]Package> [anEPackage.name.toUpperFirst()/]PackageImpl::get[aSubPackage.getMemberNameUpperFirst()/]Package() const
{
	return [aSubPackage.name/]::[aSubPackage.name/]Package::eInstance();
} 

[/template]

[template public generatePrivatePackageMember(anENamedElement : ENamedElement, anEPackage : EPackage)] 
std::shared_ptr<[metaModelTypeString(anENamedElement, anEPackage)/]> [anENamedElement.getClassMemberName()/] = nullptr;
[/template]