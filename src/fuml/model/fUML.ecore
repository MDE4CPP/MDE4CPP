<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="fUML" nsURI="http://www.omg.org/spec/FUML/20180501" nsPrefix="fUML_Semantics">
  <eSubpackages name="Semantics" nsURI="http:///fUML_Semantics/Semantics.ecore" nsPrefix="fUML_Semantics.Semantics">
    <eSubpackages name="Classification" nsURI="http:///fUML_Semantics/Semantics/Classification.ecore"
        nsPrefix="fUML_Semantics.Semantics.Classification">
      <eAnnotations source="obsolete"/>
      <eClassifiers xsi:type="ecore:EClass" name="InstanceValueEvaluation" eSuperTypes="#//Semantics/Values/Evaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;&#xA;#include &quot;abstractDataTypes/Subset.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/DataValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/EnumerationValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/Execution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Executor.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/Object.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/Value.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xA;#include &quot;uml/DataType.hpp&quot;&#xA;#include &quot;uml/Enumeration.hpp&quot;&#xA;#include &quot;uml/EnumerationLiteral.hpp&quot;&#xA;#include &quot;uml/InstanceSpecification.hpp&quot;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xA;#include &quot;uml/Slot.hpp&quot;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'InstanceValueEvaluation' is currently not supported."/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::InstanceSpecification> instance = (std::dynamic_pointer_cast&lt;uml::InstanceValue>(this->getSpecification()))->getInstance();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = instance->getClassifier();&#xA;&#x9;std::shared_ptr&lt;uml::Classifier> myType = types->at(0);&#xA;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;(&quot;[evaluate] type = &quot; + myType->getName())&lt;&lt;std::endl;)&#xA;&#xA;    std::shared_ptr&lt;fUML::Semantics::Values::Value> value;&#xA;    std::shared_ptr&lt;uml::EnumerationLiteral> literal = std::dynamic_pointer_cast&lt;uml::EnumerationLiteral>(instance);&#xA;    if(literal != nullptr)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::EnumerationValue> enumerationValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createEnumerationValue());&#xA;        enumerationValue->setType(std::dynamic_pointer_cast&lt;uml::Enumeration>(myType));&#xA;        enumerationValue->setLiteral(literal);&#xA;        value = enumerationValue;&#xA;    }&#xA;    else&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::StructuredValue> structuredValue = nullptr;&#xA;    &#x9;std::shared_ptr&lt;uml::DataType> type = std::dynamic_pointer_cast&lt;uml::DataType>(myType);&#xA;        if(type != nullptr)&#xA;        {&#xA;            // Debug.println(&quot;[evaluate] Type is a data type.&quot;);&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::DataValue> dataValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createDataValue());&#xA;            dataValue->setType(type);&#xA;            structuredValue = dataValue;&#xA;        }&#xA;        else&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object> object = nullptr;&#xA;        &#x9;std::shared_ptr&lt;uml::Behavior> behavior = std::dynamic_pointer_cast&lt;uml::Behavior>(myType);&#xA;            if(behavior != nullptr)&#xA;            {&#xA;                // Debug.println(&quot;[evaluate] Type is a behavior.&quot;);&#xA;                object = this->getLocus()->getFactory()->createExecution(behavior, nullptr);&#xA;            }&#xA;            else&#xA;            {&#xA;                // Debug.println(&quot;[evaluate] Type is a class.&quot;);&#xA;                object = fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createObject();&#xA;                for(unsigned int i = 0; i &lt; types->size(); i++)&#xA;                {&#xA;                &#x9;std::shared_ptr&lt;uml::Classifier> type = types->at(i);&#xA;                    object->getTypes()->push_back(std::dynamic_pointer_cast&lt;uml::Class>(type));&#xA;                }&#xA;            }&#xA;&#xA;            this->getLocus()->add(object);&#xA;&#xA;            std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Reference> reference(fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createReference());&#xA;            reference->setReferent(object);&#xA;            structuredValue = reference;&#xA;        }&#xA;&#xA;        structuredValue->createFeatureValues();&#xA;&#xA;        std::shared_ptr&lt;Bag&lt;uml::Slot> > instanceSlots = instance->getSlot();&#xA;        for(unsigned int i = 0; i &lt; instanceSlots->size(); i++)&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;uml::Slot> slot = instanceSlots->at(i);&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value> > values(new Bag&lt;fUML::Semantics::Values::Value>());&#xA;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;uml::ValueSpecification> > slotValues = slot->getValue();&#xA;            for(unsigned int j = 0; j &lt; slotValues->size(); j++)&#xA;            {&#xA;            &#x9;std::shared_ptr&lt;uml::ValueSpecification> slotValue = slotValues->at(j);&#xA;                values->push_back(this->getLocus()->getExecutor()->evaluate(slotValue));&#xA;            }&#xA;            structuredValue->assignFeatureValue(slot->getDefiningFeature(), values, 0);&#xA;        }&#xA;&#xA;        value = structuredValue;&#xA;    }&#xA;&#xA;    return value;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="Values" nsURI="http:///fUML_Semantics/Semantics/Values.ecore"
        nsPrefix="fUML_Semantics.Semantics.Values">
      <eAnnotations source="obsolete"/>
      <eClassifiers xsi:type="ecore:EClass" name="Evaluation" abstract="true" eSuperTypes="#//Semantics/Loci/SemanticVisitor">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'Evaluation' is currently not supported and might be obsolete."/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
            lowerBound="1" eType="#//Semantics/Loci/Locus"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralBooleanEvaluation" eSuperTypes="#//Semantics/Values/LiteralEvaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/SimpleClassifiers/BooleanValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp&quot;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xA;#include &quot;primitivetypesReflection/PrimitiveTypesPackage.hpp&quot;"/>
          <details key="library" value="primitivetypesReflection"/>
          <details key="doNotGenerate" value="Class 'LiteralBooleanEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation&#xA;"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::BooleanValue> booleanValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createBooleanValue());&#xA;booleanValue->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());&#xA;booleanValue->setValue(getSpecification()->booleanValue());&#xA;return booleanValue;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralEvaluation" abstract="true"
          eSuperTypes="#//Semantics/Values/Evaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xA;#include &quot;uml/Type.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'LiteralEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation"/>
        </eAnnotations>
        <eOperations name="getType" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::PrimitiveType> type = std::dynamic_pointer_cast&lt;uml::PrimitiveType>(this->getSpecification()->getType());&#xD;&#xA;&#xD;&#xA;    if(type == nullptr)&#xD;&#xA;    {&#xD;&#xA;        type = this->getLocus()->getFactory()->getBuiltInType(builtInTypeName);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return type;"/>
          </eAnnotations>
          <eParameters name="builtInTypeName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralIntegerEvaluation" eSuperTypes="#//Semantics/Values/LiteralEvaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/SimpleClassifiers/IntegerValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp&quot;&#xA;#include &quot;uml/LiteralInteger.hpp&quot;&#xA;#include &quot;primitivetypesReflection/PrimitiveTypesPackage.hpp&quot;"/>
          <details key="library" value="primitivetypesReflection"/>
          <details key="doNotGenerate" value="Class 'LiteralIntegerEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::IntegerValue> integerValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createIntegerValue());&#xA;    integerValue ->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());&#xA;    integerValue ->setValue(getSpecification()->integerValue());&#xA;&#xA;    return integerValue ;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralNullEvaluation" eSuperTypes="#//Semantics/Values/LiteralEvaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'LiteralNullEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return nullptr;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralRealEvaluation" eSuperTypes="#//Semantics/Values/LiteralEvaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/SimpleClassifiers/RealValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp&quot;&#xA;#include &quot;uml/LiteralReal.hpp&quot;&#xA;#include &quot;primitivetypesReflection/PrimitiveTypesPackage.hpp&quot;"/>
          <details key="library" value="primitivetypesReflection"/>
          <details key="doNotGenerate" value="Class 'LiteralRealEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::RealValue> realValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createRealValue());&#xA;realValue->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());&#xA;realValue->setValue(getSpecification()->realValue());&#xA;return realValue;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralStringEvaluation" eSuperTypes="#//Semantics/Values/LiteralEvaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/SimpleClassifiers/StringValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp&quot;&#xA;#include &quot;uml/LiteralString.hpp&quot;&#xA;#include &quot;primitivetypesReflection/PrimitiveTypesPackage.hpp&quot;"/>
          <details key="library" value="primitivetypesReflection"/>
          <details key="doNotGenerate" value="Class 'LiteralStringEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::StringValue> stringValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createStringValue());&#xA;    stringValue->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());&#xA;    stringValue->setValue(getSpecification()->stringValue());&#xA;    return stringValue;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LiteralUnlimitedNaturalEvaluation"
          eSuperTypes="#//Semantics/Values/LiteralEvaluation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/SimpleClassifiers/UnlimitedNaturalValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersFactory.hpp&quot;&#xA;#include &quot;uml/LiteralUnlimitedNatural.hpp&quot;&#xA;#include &quot;primitivetypesReflection/PrimitiveTypesPackage.hpp&quot;"/>
          <details key="library" value="primitivetypesReflection"/>
          <details key="doNotGenerate" value="Class 'LiteralUnlimitedNaturalEvaluation' is excluded from generation because it is obsolete.&#xA;LiteralEvaluations are omitted in this fUML implementation"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::UnlimitedNaturalValue> unlimitedNaturalValue(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createUnlimitedNaturalValue());&#xA;    unlimitedNaturalValue->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());&#xA;    unlimitedNaturalValue->setValue(getSpecification()->unlimitedValue());&#xA;    return unlimitedNaturalValue;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Value" abstract="true" eSuperTypes="#//Semantics/Loci/SemanticVisitor">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'Value' is excluded from generation because it is obsolete.&#xA;Values are represented using the MDE4CPP 'Any' type in this fUML implementation "/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > myTypes = this->getTypes();&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > otherTypes = otherValue->getTypes();&#xD;&#xA;&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;in Value&quot;&lt;&lt;std::endl;)&#xD;&#xA;    bool isEqual = true;&#xD;&#xA;&#xD;&#xA;    if(myTypes->size() != otherTypes->size())&#xD;&#xA;    {&#xD;&#xA;        isEqual = false;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while(isEqual &amp;&amp; i &lt; myTypes->size())&#xD;&#xA;        {&#xD;&#xA;            bool matched = false;&#xD;&#xA;            unsigned int j = 0;&#xD;&#xA;            while(!matched &amp;&amp; j &lt; otherTypes->size())&#xD;&#xA;            {&#xD;&#xA;                matched = (otherTypes->at(j) == myTypes->at(i));&#xD;&#xA;                j = j + 1;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            isEqual = matched;&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="const"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="hasTypes" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getTypes();&#xD;&#xA;&#xD;&#xA;    bool found = false;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while(!found &amp;&amp; i &lt; types->size())&#xD;&#xA;    {&#xD;&#xA;        found = (types->at(i) == type);&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return found;"/>
          </eAnnotations>
          <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
        <eOperations name="objectId" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return &quot;SemanticVisitor&quot;;//typename(SemanticVisitor); //return super.toString();&#xD;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="checkAllParents" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="type" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
          <eParameters name="classifier" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new value that is equal to this value.&#xA;// By default, this operation simply creates a new value with empty properties.&#xA;// It must be overridden in each Value subclass to do the superclass copy and then appropriately set properties defined in the subclass.&#xA;&#xA;return this->new_();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="SimpleClassifiers" nsURI="http:///fUML_Semantics/Semantics/SimpleClassifiers.ecore"
        nsPrefix="fUML_Semantics.Semantics.SimpleClassifiers">
      <eAnnotations source="obsolete"/>
      <eClassifiers xsi:type="ecore:EClass" name="BooleanValue" eSuperTypes="#//Semantics/SimpleClassifiers/PrimitiveValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/umlFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'BooleanValue' is excluded from generation because it is obsolete.&#xA;BooleanValues are represented by the C++ 'bool' primitive type in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::LiteralBoolean> literal = uml::umlFactory::eInstance()->createLiteralBoolean_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());    &#xA;    literal->setType(this->getType());&#xA;    literal->setValue(this->isValue());&#xA;    return literal;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool isEqual = false;&#xA;&#xA;&#x9;if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::Semantics::SimpleClassifiers::SimpleClassifiersPackage::BOOLEANVALUE_CLASS)&#xA;    {&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::BooleanValue> otherBooleanValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::BooleanValue>(otherValue);&#xA;    &#x9;isEqual = otherBooleanValue->isValue() == this->isValue();&#xA;    }&#xA;&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    std::string stringValue = &quot;false&quot;;&#xD;&#xA;&#xD;&#xA;    if(this->isValue())&#xD;&#xA;    {&#xD;&#xA;        stringValue = &quot;true&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return stringValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new boolean value with the same value as this boolean value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::BooleanValue> newValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createBooleanValue();&#xA;newValue->setType(this->getType()); //Duplicated from _copy()-method of super class in order to avoid having to call _copy()-method of super class and having to cast afterwards&#xA;newValue->setValue(this->isValue());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new boolean value with no value.&#xA;return fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createBooleanValue();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CompoundValue" abstract="true" eSuperTypes="#//Semantics/SimpleClassifiers/StructuredValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;algorithm>&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &lt;fUML/fUMLFactory.hpp>&#xD;&#xA;#include &lt;cstdio>&#xD;&#xA;&#xD;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'CompoundValue' is excluded from generation because it is obsolete.&#xA;CompoundValues are omitted in this fUML implementation (see class StructuredClassifiers::Object)."/>
        </eAnnotations>
        <eOperations name="removeFeatureValues" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::remove_if(this->getFeatureValues()->begin(),this->getFeatureValues()->end(),[classifier](std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue){return featureValue->getFeature()->getType()==classifier;});"/>
          </eAnnotations>
          <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::CompoundValue> otherCompoundValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::CompoundValue>(otherValue);&#xA;&#x9;bool isEqual = (otherCompoundValue != nullptr);&#xA;&#x9;&#xA;    if (isEqual)&#xA;    {&#xA;        isEqual = fUML::Semantics::SimpleClassifiers::StructuredValueImpl::equals(otherValue)&#xA;                &amp;&amp; otherCompoundValue->retrieveFeatureValues()->size() == this->retrieveFeatureValues()->size();&#xA;&#xA;        unsigned int i = 0;&#xA;        while (isEqual &amp;&amp; i &lt; this->retrieveFeatureValues()->size())&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> thisFeatureValue = this->retrieveFeatureValues()->at(i);&#xA;&#xA;            bool matched = false;&#xA;            unsigned int j = 0;&#xA;            while (!matched &amp;&amp; j &lt; otherCompoundValue->retrieveFeatureValues()->size())&#xA;            {&#xA;            &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> otherFeatureValue = otherCompoundValue->retrieveFeatureValues()->at(j);&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;                if (thisFeatureValue->getFeature() == otherFeatureValue->getFeature())&#xA;                {&#xA;                    matched = thisFeatureValue->hasEqualValues(otherFeatureValue);&#xA;                }&#xA;                j = j + 1;&#xA;            }&#xA;&#xA;            isEqual = matched;&#xA;            i = i + 1;&#xA;        }&#xA;    }&#xA;&#x9;&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::string buffer = &quot;(&quot; + this->objectId() + &quot;:&quot;;&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getTypes();&#xA;&#xA;    unsigned int i = 0;&#xA;    while(i &lt; types->size())&#xA;    {&#xA;        buffer = buffer + &quot; &quot; + types->at(i)->getName();&#xA;        i = i + 1;&#xA;    }&#xA;&#xA;    unsigned int k = 0;&#xA;    while(k &lt; this->getFeatureValues()->size())&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = this->getFeatureValues()->at(k);&#xA;        char buf [11];&#xA;        std::sprintf(buf, &quot;%d&quot;, featureValue->getPosition());&#xA;        buffer = buffer + &quot;\n\t\t&quot; + featureValue->getFeature()->getName() + &quot;[&quot; + std::string(buf) + &quot;]  =&quot;;&#xA;&#xA;        unsigned int j = 0;&#xA;        while(j &lt; featureValue->getValues()->size())&#xA;        {&#xA;            buffer = buffer + &quot; &quot; + featureValue->getValues()->at(j)->toString();&#xA;            j = j + 1;&#xA;        }&#xA;&#xA;        k = k + 1;&#xA;    }&#xA;&#xA;    return buffer + &quot;)&quot;;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveFeatureValue" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = nullptr;&#xA;    unsigned int i = 0;&#xA;    while(featureValue == nullptr &amp;&amp; i &lt; this->getFeatureValues()->size())&#xA;    {&#xA;        if(this->getFeatureValues()->at(i)->getFeature() == feature)&#xA;        {&#xA;            featureValue = this->getFeatureValues()->at(i);&#xA;        }&#xA;        i = i + 1;&#xA;    }&#xA;    return featureValue;"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
        </eOperations>
        <eOperations name="assignFeatureValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = this->retrieveFeatureValue(feature);&#xA;    if(featureValue == nullptr)&#xA;    {&#xA;        featureValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createFeatureValue();&#xA;        this->getFeatureValues()->push_back(featureValue);&#xA;    }&#xA;    featureValue->setFeature(feature);&#xA;    std::vector&lt;std::shared_ptr&lt;fUML::Semantics::Values::Value>>::iterator i;&#xA;    for(i=values->begin();i!=values->end();++i)&#xA;    {&#xA;    &#x9;featureValue->getValues()->push_back(*i);&#xA;    }&#xA;    featureValue->setPosition(position);"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value"/>
          <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="retrieveFeatureValues" ordered="false" upperBound="-1"
            eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=" return this->getFeatureValues();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new data value with the same featureValues as this data value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::CompoundValue> newValue = &#xA;&#x9;std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::CompoundValue>(fUML::Semantics::Values::ValueImpl::_copy());&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues = this->retrieveFeatureValues();&#xA;unsigned int featureValuesSize = featureValues->size();&#xA;&#xA;for(unsigned int i = 0; i &lt; featureValuesSize; i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = featureValues->at(i);&#xA;&#x9;newValue->getFeatureValues()->add(featureValue->_copy());&#xA;}&#xA;&#xA;return newValue;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="featureValues" ordered="false"
            upperBound="-1" eType="#//Semantics/SimpleClassifiers/FeatureValue" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataValue" eSuperTypes="#//Semantics/SimpleClassifiers/CompoundValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/SimpleClassifiers/DataValue.hpp&quot;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/CompoundValue.hpp&quot;&#xA;#include &quot;uml/DataType.hpp&quot;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'DataValue' is excluded from generation because it is obsolete.&#xA;DataValues are omitted in this fUML implementation (see class StructuredClassifiers::Object)."/>
        </eAnnotations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new data value with no type or feature values.&#xD;&#xA;return std::shared_ptr&lt;fUML::Semantics::Values::Value>(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createDataValue());"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;    types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(this->getType()));&#xD;&#xA;    return types;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new data value with the same type and feature values as this data value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::DataValue> newValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::DataValue>(fUML::Semantics::SimpleClassifiers::CompoundValueImpl::_copy());&#xA;newValue->setType(this->getType());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//DataType"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EnumerationValue" eSuperTypes="#//Semantics/Values/Value">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/Enumeration.hpp&quot;&#xA;#include &quot;uml/EnumerationLiteral.hpp&quot;&#xA;#include &quot;uml/InstanceSpecification.hpp&quot;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xA;#include &quot;uml/umlFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'EnumerationValue' is excluded from generation because it is obsolete.&#xA;EnumerationValues are represented by model-specific, generated C++ enumeration types in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::InstanceValue> instanceValue(uml::umlFactory::eInstance()->createInstanceValue_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>()));&#xA;    //Remark: instance is so defined in the specification, but even there is not used.&#xA;    //uml::InstanceSpecification * instance = uml::umlFactory::eInstance()->createInstanceSpecification(std::shared_ptr&lt;uml::Class>());&#xA;&#xA;    instanceValue->setType(this->getType());&#xA;    instanceValue->setInstance(this->getLiteral());&#xA;&#xA;    return instanceValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="bool isEqual = false;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::EnumerationValue> value = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::EnumerationValue>(otherValue);&#xA;    if(value != nullptr)&#xA;    {&#xA;        isEqual = (value->getLiteral() == this->getLiteral());&#xA;    }&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new enumeration value with no literal.&#xD;&#xA;return std::shared_ptr&lt;fUML::Semantics::Values::Value>(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createEnumerationValue());"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    return this->getLiteral()->getName();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;    types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(this->getType()));&#xD;&#xA;    return types;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new enumeration value with the same literal as this enumeration value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::EnumerationValue> newValue(new fUML::Semantics::SimpleClassifiers::EnumerationValueImpl());&#xA;newValue->setType(this->getType());&#xA;newValue->setLiteral(this->getLiteral());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="literal" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//EnumerationLiteral"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Enumeration"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FeatureValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/StructuralFeature.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/ValuesPackage.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'FeatureValue' is excluded from generation because it is obsolete.&#xA;FeatureValues are represented by runtime attribute values of real C++ class instances in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="hasEqualValues" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool equal = true;&#xA;&#xA;    if(this->getValues()->size() != other->getValues()->size())&#xA;    {&#xA;        equal = false;&#xA;&#xA;    }&#xA;    else&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::StructuralFeature> feature = this->getFeature();&#xA;        if(feature->getIsOrdered())&#xA;        {&#xA;            unsigned int i = 0;&#xA;            while(equal &amp;&amp; (i &lt; this->getValues()->size()))&#xA;            {&#xA;                equal = this->getValues()->at(i)->equals(other->getValues()->at(i));&#xA;                i = i + 1;&#xA;            }&#xA;&#xA;        }&#xA;        else&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> otherFeatureValues(fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createFeatureValue());&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value> > values = other->getValues();&#xA;            for(unsigned int i = 0; i &lt; values->size(); i++)&#xA;            {&#xA;            &#x9;std::shared_ptr&lt;fUML::Semantics::Values::Value> value = values->at(i);&#xA;                otherFeatureValues->getValues()->push_back(value);&#xA;            }&#xA;&#xA;            unsigned int i = 0;&#xA;            while(equal &amp;&amp; (i &lt; this->getValues()->size()))&#xA;            {&#xA;                bool matched = false;&#xA;                unsigned int j = 0;&#xA;                while(!matched &amp;&amp; (j &lt; otherFeatureValues->getValues()->size()))&#xA;                {&#xA;                    if(this->getValues()->at(i)->equals(otherFeatureValues->getValues()->at(j)))&#xA;                    {&#xA;                        matched = true;&#xA;                        otherFeatureValues->getValues()->erase(otherFeatureValues->getValues()->begin() + j);&#xA;                    }&#xA;                    j = j + 1;&#xA;                }&#xA;&#xA;                equal = matched;&#xA;                i = i + 1;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    return equal;"/>
          </eAnnotations>
          <eParameters name="other" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/FeatureValue"/>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a copy of this feature value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> newValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createFeatureValue();&#xA;newValue->setFeature(this->getFeature());&#xA;newValue->setPosition(this->getPosition());&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> values = this->getValues();&#xA;unsigned int valuesSize = values->size();&#xA;&#xA;for(unsigned int i = 0; i &lt; valuesSize; i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Values::Value> value = values->at(i);&#xA;&#x9;newValue->getValues()->add(value->_copy());&#xA;}&#xA;&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="values" ordered="false"
            upperBound="-1" eType="#//Semantics/Values/Value" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="position" ordered="false"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt" defaultValueLiteral="0"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="feature" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="IntegerValue" eSuperTypes="#//Semantics/SimpleClassifiers/PrimitiveValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;cstdio>&#xD;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralInteger.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/umlFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'IntegerValue' is excluded from generation because it is obsolete.&#xA;IntegerValues are represented by the C++ 'int' primitive type in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::LiteralInteger> literal = uml::umlFactory::eInstance()->createLiteralInteger_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Classifier>());&#xA;&#xA;    literal->setType(this->getType());&#xA;    literal->setValue(this->getValue());&#xA;&#xA;    return literal;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool isEqual = false;&#xA;&#xA;&#xA;    if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::Semantics::SimpleClassifiers::SimpleClassifiersPackage::INTEGERVALUE_CLASS)&#xA;    {&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::IntegerValue> otherIntegerValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::IntegerValue>(otherValue);&#xA;        isEqual = (otherIntegerValue->getValue() == this->getValue());&#xA;    }&#xA;&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    char buf [11];&#xD;&#xA;    std::sprintf(buf, &quot;%d&quot;, this->getValue());&#xD;&#xA;    return std::string(buf);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new integer value with the same value as this integer value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::IntegerValue> newValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createIntegerValue();&#xA;newValue->setType(this->getType()); //Duplicated from _copy()-method of super class in order to avoid having to call _copy()-method of super class and having to cast afterwards&#xA;newValue->setValue(this->getValue());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new integer value with no value.&#xA;return fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createIntegerValue();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="PrimitiveValue" abstract="true"
          eSuperTypes="#//Semantics/Values/Value">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'PrimitiveValue' is excluded from generation because it is obsolete.&#xA;Specifications of PrimitiveValues are represented by their respective C++ primitive types in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::PrimitiveType> type = this->getType();&#xD;&#xA;&#x9;if (type != nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(type));&#xD;&#xA;&#x9;}&#xD;&#xA;    return types;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new value that is equal to this primitive value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::PrimitiveValue> newValue =&#xA;&#x9;std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::PrimitiveValue>(fUML::Semantics::Values::ValueImpl::_copy());&#xA;newValue->setType(this->getType());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RealValue" eSuperTypes="#//Semantics/SimpleClassifiers/PrimitiveValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;sstream>&#xD;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralReal.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'RealValue' is excluded from generation because it is obsolete.&#xA;RealValues are represented by the C++ 'double' primitive type in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::LiteralReal> literal = uml::umlFactory::eInstance()->createLiteralReal_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xA;&#x9;literal->setType(this->getType());&#xA;    literal->setValue(this->getValue());&#xA;    return literal;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool isEqual = false;&#xA;&#xA;    if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::Semantics::SimpleClassifiers::SimpleClassifiersPackage::REALVALUE_CLASS)&#xA;    {&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::RealValue> otherRealValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::RealValue>(otherValue);&#xA;        isEqual = (otherRealValue->getValue() == this->getValue());&#xA;    }&#xA;&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    std::ostringstream o;&#xD;&#xA;     if (!(o &lt;&lt; this->getValue()))&#xD;&#xA;       return &quot;&quot;;&#xD;&#xA;     return o.str();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new real value with the same value as this real value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::RealValue> newValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createRealValue();&#xA;newValue->setType(this->getType()); //Duplicated from _copy()-method of super class in order to avoid having to call _copy()-method of super class and having to cast afterwards&#xA;newValue->setValue(this->getValue());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new real value with no value.&#xA;return fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createRealValue();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SignalInstance" eSuperTypes="#//Semantics/SimpleClassifiers/CompoundValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'SignalInstance' is currently not supported."/>
        </eAnnotations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new signal instance with the same type and feature values as this signal instance.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::SignalInstance> newValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::SignalInstance>(fUML::Semantics::SimpleClassifiers::CompoundValueImpl::_copy());&#xA;newValue->setType(this->getType());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new signal instance with no type or feature values.&#xD;&#xA;return fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createSignalInstance();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Signal"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StringValue" eSuperTypes="#//Semantics/SimpleClassifiers/PrimitiveValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralString.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/umlFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'StringValue' is excluded from generation because it is obsolete.&#xA;StringValues are represented by the C++ 'std::string' type in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::LiteralString> literal = uml::umlFactory::eInstance()->createLiteralString_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xA;&#x9;literal->setType(this->getType());&#xA;    literal->setValue(this->getValue());&#xA;    return literal;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="bool isEqual = false;&#xA;    &#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::StringValue> otherStringValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::StringValue>(otherValue);&#xA;    if(otherStringValue != nullptr)&#xA;    {&#xA;        isEqual = otherStringValue->getValue() == this->getValue();&#xA;    }&#xA;    &#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getValue();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new string value with the same value as this string value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::StringValue> newValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createStringValue();&#xA;newValue->setType(this->getType()); //Duplicated from _copy()-method of super class in order to avoid having to call _copy()-method of super class and having to cast afterwards&#xA;newValue->setValue(this->getValue());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new string value with no value.&#xA;return fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createStringValue();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuredValue" abstract="true"
          eSuperTypes="#//Semantics/Values/Value">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceSpecification.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xD;&#xA;#include &quot;uml/NamedElement.hpp&quot;&#xD;&#xA;#include &quot;uml/Slot.hpp&quot;&#xD;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;&#xD;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xD;&#xA;"/>
          <details key="doNotGenerate" value="Class 'StructuredValue' is excluded from generation because it is obsolete.&#xA;StructuredValues are omitted in this fUML implementation (see class StructuredClassifiers::Object)."/>
        </eAnnotations>
        <eOperations name="retrieveFeatureValue" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
        </eOperations>
        <eOperations name="assignFeatureValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value"/>
          <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="retrieveFeatureValues" ordered="false" upperBound="-1"
            eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
        <eOperations name="createFeatureValues">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getTypes();&#xA;&#xA;    if(types!= nullptr)&#xA;    {&#xA;    &#x9;for(unsigned int i = 0; i &lt; types->size(); i++)&#xA;    &#x9;{&#xA;    &#x9;&#x9;std::shared_ptr&lt;uml::Classifier> type = types->at(i);&#xA;    &#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::NamedElement> > members = type->getMember();&#xA;&#xA;    &#x9;&#x9;for(unsigned int j = 0; j &lt; members->size(); j++)&#xA;    &#x9;&#x9;{&#xA;    &#x9;&#x9;&#x9;std::shared_ptr&lt;uml::NamedElement> member = members->at(j);&#xA;    &#x9;&#x9;&#x9;std::shared_ptr&lt;uml::StructuralFeature> structuralFeature = std::dynamic_pointer_cast&lt;uml::StructuralFeature>(member);&#xA;    &#x9;&#x9;&#x9;if(structuralFeature != nullptr)&#xA;    &#x9;&#x9;&#x9;{&#xA;    &#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value> > valueList(new Bag&lt;fUML::Semantics::Values::Value>());&#xA;    &#x9;&#x9;&#x9;&#x9;this->assignFeatureValue(structuralFeature, valueList, 0);&#xA;    &#x9;&#x9;&#x9;}&#xA;    &#x9;&#x9;}&#xA;    &#x9;}&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::InstanceValue> instanceValue = uml::umlFactory::eInstance()->createInstanceValue_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xA;&#x9;std::shared_ptr&lt;uml::InstanceSpecification> instance = uml::umlFactory::eInstance()->createInstanceSpecification_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xA;&#xA;    instanceValue->setType(nullptr);&#xA;    instanceValue->setInstance(instance);&#xA;&#xA;    instance->getClassifier();//->push_back(this->getTypes());&#xA;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> > featureValues = this->retrieveFeatureValues();&#xA;    // Debug.println(&quot;[specify] &quot; + featureValues.size() + &quot; feature(s).&quot;);&#xA;&#xA;    for(unsigned int i = 0; i &lt; featureValues->size(); i++)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = featureValues->at(i);&#xA;&#xA;    &#x9;std::shared_ptr&lt;uml::Slot> slot = uml::umlFactory::eInstance()->createSlot_as_slot_in_InstanceSpecification(std::shared_ptr&lt;uml::InstanceSpecification>());&#xA;        slot->setDefiningFeature(featureValue->getFeature());&#xA;&#xA;        // Debug.println(&quot;[specify] feature = &quot; + featureValue.feature.name&#xA;        // + &quot;, &quot; + featureValue.values.size() + &quot; value(s).&quot;);&#xA;&#xA;        std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value> > values = featureValue->getValues();&#xA;        for(unsigned int j = 0; j &lt; values->size(); j++)&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::Values::Value> value = values->at(j);&#xA;            // Debug.println(&quot;[specify] value = &quot; + value);&#xA;            slot->getValue()->push_back(value->specify());&#xA;        }&#xA;&#xA;        instance->getSlot()->push_back(slot);&#xA;    }&#xA;&#xA;    return instanceValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="setFeatureValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value"/>
          <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="getValues" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="featureValues" ordered="false" upperBound="-1" eType="#//Semantics/SimpleClassifiers/FeatureValue"/>
        </eOperations>
        <eOperations name="removeValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="value" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="UnlimitedNaturalValue" eSuperTypes="#//Semantics/SimpleClassifiers/PrimitiveValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/IntegerValue.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/LiteralUnlimitedNatural.hpp&quot;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xA;#include &quot;uml/Type.hpp&quot;&#xA;#include &quot;uml/umlFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'UnlimitedNaturalValue' is excluded from generation because it is obsolete.&#xA;UnlimitedNaturalValues are represented by the C++ 'int' primitive type in this fUML implementation."/>
        </eAnnotations>
        <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::LiteralUnlimitedNatural> literal = uml::umlFactory::eInstance()->createLiteralUnlimitedNatural_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xA;    literal->setType(this->getType());&#xA;    literal->setValue(this->getValue());&#xA;    return literal;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;//generated from body annotation&#xA;&#x9;bool isEqual = false;&#xA;&#xA;    if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::Semantics::SimpleClassifiers::SimpleClassifiersPackage::UNLIMITEDNATURALVALUE_CLASS)&#xA;    {&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::UnlimitedNaturalValue> unValue = std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::UnlimitedNaturalValue>(otherValue);&#xA;        isEqual = (unValue->getValue() == this->getValue());&#xA;    }&#xA;&#xA;    return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    std::string stringValue = &quot;*&quot;;&#xD;&#xA;&#xD;&#xA;    if(this->getValue() >= 0)&#xD;&#xA;    {&#xD;&#xA;        auto integerValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createIntegerValue();&#xD;&#xA;        integerValue->setValue(this->getValue());&#xD;&#xA;        stringValue = integerValue->toString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return stringValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new unlimited natural value with the same value as this unlimited natural value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::UnlimitedNaturalValue> newValue = fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createUnlimitedNaturalValue();&#xA;newValue->setType(this->getType()); //Duplicated from _copy()-method of super class in order to avoid having to call _copy()-method of super class and having to cast afterwards&#xA;newValue->setValue(this->getValue());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new unlimited natural value with no value.&#xA;return fUML::Semantics::SimpleClassifiers::SimpleClassifiersFactory::eInstance()->createUnlimitedNaturalValue();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="StructuredClassifiers" nsURI="http:///fUML_Semantics/Semantics/StructuredClassifiers.ecore"
        nsPrefix="fUML_Semantics.Semantics.StructuredClassifiers">
      <eClassifiers xsi:type="ecore:EClass" name="DispatchStrategy" eSuperTypes="#//Semantics/Loci/SemanticStrategy">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Bag.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="dispatch" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// return object->getLocus()->getFactory()->createExecution(this->retrieveMethod(object,operation),object);&#xA;&#x9;return nullptr;"/>
          </eAnnotations>
          <eParameters name="object" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
        <eOperations name="retrieveMethod" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (operation->getMethod()->size() > 0)&#xA;&#x9;{&#xA;&#x9;&#x9;return operation->getMethod()->front();&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;return nullptr;&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="object" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
        <eOperations name="getName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return &quot;dispatch&quot;;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExtensionalValue" abstract="true"
          eSuperTypes="#//Semantics/SimpleClassifiers/CompoundValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'ExtensionalValue' is excluded from generation because it is obsolete.&#xA;ExtensionalValues are omitted in this fUML implementation (see class StructuredClassifiers::Object or StructuredClassifiers::Link)."/>
        </eAnnotations>
        <eOperations name="destroy" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if(this->getLocus() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getLocus()->remove(getThisExtensionalValuePtr());&#xD;&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new extensional value with the same feature values at the same locus as this one.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue> newValue = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue>(fUML::Semantics::SimpleClassifiers::CompoundValueImpl::_copy());&#xA;&#xA;if(this->getLocus() != nullptr)&#xA;{&#xA;&#x9;newValue->setLocus(this->getLocus());&#xA;}&#xA;&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
            eType="#//Semantics/Loci/Locus"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Link" eSuperTypes="#//Semantics/StructuredClassifiers/ExtensionalValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xD;&#xA;#include &quot;uml/Property.hpp&quot;&#xD;&#xA;#include &quot;uml/Association.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'Link' is excluded from generation because it is obsolete.&#xA;In this fUML implementation, Links are handled implicitely inside model-specific, generated C++ classes.&#xA;If a link between two objects should be able to exist, there has to be an association between them in the model.&#xA;If so, both objects will have properties referencing each others types after generation. &#xA;That way, we can access linked object by accessing the corresponding properties during runtime."/>
        </eAnnotations>
        <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;&#xD;&#xA;&#x9;if( this->getType() != nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(this->getType()));&#xD;&#xA;&#x9;}&#xD;&#xA;    return types;"/>
            <details key="const"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isMatchingLink" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Property> > ends = this->getType()->getMemberEnd();&#xD;&#xA;&#xD;&#xA;&#x9;bool matches = true;&#xD;&#xA;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;while (matches &amp;&amp; i &lt; ends->size()) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Property> otherEnd = ends->at(i);&#xD;&#xA;&#x9;&#x9;if (otherEnd != end&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !this->retrieveFeatureValue(otherEnd)->getValues()->at(0)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;->equals(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;link->retrieveFeatureValue(otherEnd)->getValues()->at(0))) {&#xD;&#xA;&#x9;&#x9;&#x9;matches = false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;i = i + 1;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return matches;"/>
          </eAnnotations>
          <eParameters name="link" eType="#//Semantics/StructuredClassifiers/ExtensionalValue"/>
          <eParameters name="end" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Property"/>
        </eOperations>
        <eOperations name="addTo">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;// Add this link to the extent of its association at the given locus,&#xA;&#x9;// Shift the positions of ends of other links, as appropriate, for ends&#xA;&#x9;// that are ordered.&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Property>> ends = this->getType()->getMemberEnd();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue>> extent = locus->retrieveExtent(this->getType());&#xA;&#xA;&#x9;unsigned int endsSize = ends->size();&#xA;&#x9;for (unsigned int i = 0; i &lt; endsSize; i++) {&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Property> end = ends->at(i);&#xA;&#x9;&#x9;if (end->getIsOrdered()) {&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this->retrieveFeatureValue(end);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>> otherFeatureValues =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;this->getOtherFeatureValues(extent, end);&#xA;&#x9;&#x9;&#x9;int n = otherFeatureValues->size();&#xA;&#x9;&#x9;&#x9;if (featureValue->getPosition() &lt; 0&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;|| featureValue->getPosition() > n) {&#xA;&#x9;&#x9;&#x9;&#x9;featureValue->setPosition(n + 1);&#xA;&#x9;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;&#x9;if (featureValue->getPosition() == 0) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;featureValue->setPosition(-1);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;for (int j = 0; j &lt; n; j++) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;fUML::Semantics::SimpleClassifiers::FeatureValue> otherFeatureValue =&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;otherFeatureValues->at(j);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (featureValue->getPosition()&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;= otherFeatureValue->getPosition()) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;otherFeatureValue->setPosition(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;otherFeatureValue->getPosition() + 1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;locus->add(getThisLinkPtr());"/>
          </eAnnotations>
          <eParameters name="locus" eType="#//Semantics/Loci/Locus"/>
        </eOperations>
        <eOperations name="getOtherFeatureValues" upperBound="-1" eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;// Return all feature values for the given end of links in the given&#xA;&#x9;// extent whose other ends match this link.&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues(new Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>());&#xA;&#x9;unsigned int extentSize = extent->size();&#xA;&#x9;for(unsigned int i = 0; i &lt; extentSize; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue> link = extent->at(i);&#xA;&#x9;&#x9;if(link != getThisLinkPtr())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(isMatchingLink(link, end))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;featureValues->add(link->retrieveFeatureValue(end));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return featureValues;"/>
          </eAnnotations>
          <eParameters name="extent" upperBound="-1" eType="#//Semantics/StructuredClassifiers/ExtensionalValue"/>
          <eParameters name="end" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Property"/>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new link with the same type, locus and feature values as this link.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Link> newValue = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Link>(fUML::Semantics::StructuredClassifiers::ExtensionalValueImpl::_copy());&#xA;&#xA;newValue->setType(this->getType());&#xA;&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new link with no type or properties.&#xA;return fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createLink();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Object" eSuperTypes="#//Semantics/StructuredClassifiers/ExtensionalValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/StructuredClassifiers/DispatchStrategy.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp&quot;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'Object' is excluded from generation because it is obsolete.&#xA;Objects are represented by class uml::Element in this fUML implementation.&#xA;This is possible because in MDE4CPP, all C++ classes generated from UML classes inherit from uml::Element.&#xA;"/>
        </eAnnotations>
        <eOperations name="startBehavior" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if(this->getObjectActivation() == nullptr) &#xA;    {&#xA;        this->setObjectActivation(std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ObjectActivation>(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createObjectActivation()));&#xA;        this->getObjectActivation()->setObject(getThisObjectPtr());&#xA;    }&#xA;&#xA;    this->getObjectActivation()->startBehavior(classifier, inputs);"/>
          </eAnnotations>
          <eParameters name="classifier" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
          <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="dispatch" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="static std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::DispatchStrategy> strategy = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::DispatchStrategy>(this->getLocus()->getFactory()->getStrategy(&quot;dispatch&quot;));&#xA;&#x9;return strategy->dispatch(getThisObjectPtr(), operation);"/>
          </eAnnotations>
          <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
        <eOperations name="send" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if( this->getObjectActivation() != nullptr)&#xA;    {&#xA;        this->getObjectActivation()->send(signalInstance);&#xA;    }"/>
          </eAnnotations>
          <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/SignalInstance"/>
        </eOperations>
        <eOperations name="_register" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if( this->getObjectActivation() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getObjectActivation()->_register(accepter);&#xD;&#xA;    }"/>
          </eAnnotations>
          <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/EventAccepter"/>
        </eOperations>
        <eOperations name="unregister" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if( this->getObjectActivation() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getObjectActivation()->unregister(accepter);&#xD;&#xA;    }"/>
          </eAnnotations>
          <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/EventAccepter"/>
        </eOperations>
        <eOperations name="destroy" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if(this->getObjectActivation() != nullptr)&#xA;    {&#xA;        this->getObjectActivation()->stop();&#xA;        this->setObjectActivation(nullptr);&#xA;    }&#xA;&#xA;    this->getTypes()->clear();&#xA;    fUML::Semantics::StructuredClassifiers::ExtensionalValueImpl::destroy();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="send" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body"/>
          </eAnnotations>
          <eParameters name="eventOccurrence" lowerBound="1" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new object that is a copy of this object at the same locus as this object.&#xA;// However, the new object will NOT have any object activation (i.e, its classifier behaviors will not be started).&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object> newObject = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Object>(fUML::Semantics::StructuredClassifiers::ExtensionalValueImpl::_copy());&#xA;&#xA;std::shared_ptr&lt;Bag&lt;uml::Classifier>> types = this->getTypes();&#xA;unsigned int typesSize = types->size();&#xA;&#xA;for(unsigned int i = 0; i &lt; typesSize; i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;uml::Classifier> type = types->at(i);&#xA;&#x9;newObject->getTypes()->add(type);&#xA;}&#xA;&#xA;return newObject;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new object with no type, feature values or locus.&#xA;return fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createObject();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="types" ordered="false"
            upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations>
            <details key="note" value="This Property is a Class in the OMG standard"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="objectActivation" ordered="false"
            eType="#//Semantics/CommonBehavior/ObjectActivation" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RedefinitionBasedDispatchStrategy"
          eSuperTypes="#//Semantics/StructuredClassifiers/DispatchStrategy">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xA;#include &quot;uml/umlPackage.hpp&quot;&#xA;#include &quot;uml/NamedElement.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/Operation.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="operationsMatch" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool matches = false;&#xA;&#x9;if(ownedOperation->matches(baseOperation))&#xA;&#x9;{&#xA;&#x9;&#x9;matches = true;&#xA;&#x9;}&#xA;&#x9;else&#xA;    {&#xA;&#x9;&#x9;unsigned int i = 0;&#xA;&#x9;&#x9;while(!matches &amp;&amp; i &lt; ownedOperation->getRedefinedOperation()->size())&#xA;        {&#xA;&#x9;&#x9;&#x9;matches = this->operationsMatch(ownedOperation->getRedefinedOperation()->at(i), baseOperation);&#xA;&#x9;&#x9;&#x9;i = i + 1;&#xA;        }&#xA;    }&#xA;&#x9;return matches;"/>
          </eAnnotations>
          <eParameters name="ownedOperation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
          <eParameters name="baseOperation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
        <eOperations name="retrieveMethod" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::Behavior> method = DispatchStrategyImpl::retrieveMethod(object, operation);&#xA;&#x9;/* Currently not supported&#xA;&#x9;unsigned int i = 0;&#xA;&#x9;while(method == nullptr &amp;&amp; (i &lt; object->getTypes()->size()))&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> type = object->getTypes()->at(i);&#xA;&#x9;&#x9;*/&#xA;&#x9;&#x9;/*&#xA;&#x9;&#x9;MDE4CPP specific implementation:&#xA;&#x9;&#x9;Normalley. only classes would be taken into account. &#xA;&#x9;&#x9;In MDE4CPP object classes for interfaces also exist. Those are typed by interfaces as well.&#xA;&#x9;&#x9;Because of that, interfaces are also taken into account here.&#xA;&#x9;&#x9;*/&#xA;&#x9;&#x9;/*&#xA;&#x9;&#x9;unsigned long metaElementID = type->eClass()->getMetaElementID();&#xA;&#x9;&#x9;if(metaElementID == uml::umlPackage::CLASS_CLASS || metaElementID == uml::umlPackage::INTERFACE_CLASS)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Operation> > memberOperations = type->getAllOperations();&#xA;&#x9;&#x9;unsigned int j = 0;&#xA;&#x9;&#x9;while(method == nullptr &amp;&amp; (j &lt; memberOperations->size()))&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Operation> memberOperation = memberOperations->at(j);&#xA;&#x9;&#x9;&#x9;if(memberOperation != nullptr)&#xA;&#x9;&#x9;&#x9;{&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if(this->operationsMatch(memberOperation, operation))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method = memberOperation->getMethod()->at(0);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;j = j + 1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;i = i + 1;&#xA;&#x9;}&#xA;&#x9;*/&#xA;&#xA;&#x9;return method;"/>
          </eAnnotations>
          <eParameters name="object" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Reference" eSuperTypes="#//Semantics/SimpleClassifiers/StructuredValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;uml/Classifier.hpp>&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'CompoundValue' is excluded from generation because it is obsolete.&#xA;CompoundValues are omitted in this fUML implementation, &#xA;as all objects (i.e. C++ instances) in MDE4CPP are handled by C++ std::shared_ptr anyway.&#xA;This is sufficient to substitute the fUML reference concept."/>
        </eAnnotations>
        <eOperations name="startBehavior" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getReferent()->startBehavior(classifier,inputs);"/>
          </eAnnotations>
          <eParameters name="classifier" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
          <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="dispatch" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getReferent()->dispatch(operation);"/>
          </eAnnotations>
          <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
        <eOperations name="send" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getReferent()->send(signalInstance);"/>
          </eAnnotations>
          <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/SignalInstance"/>
        </eOperations>
        <eOperations name="destroy" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getReferent()->destroy();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool isEqual = false;&#xA;&#x9;auto other = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Reference>(otherValue);&#xA;&#x9;if (other != nullptr) {&#xA;&#x9;&#x9;if (this->getReferent() == nullptr) {&#xA;&#x9;&#x9;&#x9;isEqual = other->getReferent() == nullptr;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;isEqual = this->getReferent()->equals(other->getReferent());&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new reference with no referent.&#xD;&#xA;return fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createReference();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;return  this->getReferent()->getTypes();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveFeatureValue" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getReferent()->retrieveFeatureValue(feature);"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
        </eOperations>
        <eOperations name="assignFeatureValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getReferent()->assignFeatureValue(feature,values,position);"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value"/>
          <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="retrieveFeatureValues" ordered="false" upperBound="-1"
            eType="#//Semantics/SimpleClassifiers/FeatureValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getReferent()->retrieveFeatureValues();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return &quot;Reference to &quot; + this->getReferent()->toString();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="send" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body"/>
          </eAnnotations>
          <eParameters name="eventOccurrence" lowerBound="1" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
        <eOperations name="setFeatureValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getReferent()->setFeatureValue(feature,values,position);"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value"/>
          <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="getValues" ordered="false" upperBound="-1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getReferent()->getValues(feature,featureValues);"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="featureValues" ordered="false" upperBound="-1" eType="#//Semantics/SimpleClassifiers/FeatureValue"/>
        </eOperations>
        <eOperations name="removeValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getReferent()->removeValue(feature, value);"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="value" ordered="false" lowerBound="1" eType="#//Semantics/Values/Value"/>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Values/Value">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// // Create a new reference with the same referent as this reference.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Reference> newValue = fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createReference();&#xA;&#xA;newValue->setReferent(this->getReferent());&#xA;&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="referent" ordered="false"
            lowerBound="1" eType="#//Semantics/StructuredClassifiers/Object"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="CommonBehavior" nsURI="http:///fUML_Semantics/Semantics/CommonBehavior.ecore"
        nsPrefix="fUML_Semantics.Semantics.CommonBehavior">
      <eClassifiers xsi:type="ecore:EClass" name="CallEventBehavior">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/umlFactory.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'CallEventBehavior' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="assignOperation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Set the operation for this call event behavior and construct&#xA;// the behavior signature based on the operation signature.&#xA;&#xA;m_operation = operation;&#xA;for(int i = 0; i &lt; operation->getOwnedParameter()->size(); i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;uml::Parameter> operationParameter = operation->getOwnedParameter()->at(i);&#xA;&#x9;std::shared_ptr&lt;uml::Parameter> parameter = uml::umlFactory::eInstance()->createParameter();&#xA;&#x9;parameter->setName(operationParameter->getName());&#xA;&#x9;parameter->setType(operationParameter->getType());&#xA;&#x9;parameter->setLowerValue(operationParameter->getLowerValue());&#xA;&#x9;parameter->setLower(operationParameter->getLower());&#xA;&#x9;parameter->setUpperValue(operationParameter->getUpperValue());&#xA;&#x9;parameter->setUpper(operationParameter->getUpper());&#xA;&#x9;parameter->setDirection(operationParameter->getDirection());&#xA;&#x9;parameter->setOwner(operationParameter->getOwner());&#xA;&#x9;parameter->setNamespace(operationParameter->getNamespace());&#xA;&#xA;&#x9;this->getOwnedElement()->add(parameter);&#xA;&#x9;this->getOwnedMember()->add(parameter);&#xA;&#x9;this->getMember()->add(parameter);&#xA;&#x9;this->getOwnedParameter()->add(parameter);&#xA;}&#xA;&#xA;this->setIsReentrant(true);&#xA;this->setName(&quot;CallEventBehavior&quot;);&#xA;if(operation->getName != &quot;&quot;)&#xA;{&#xA;&#x9;this->setName(this->getName() + &quot;(&quot; + operation->getName() + &quot;)&quot;);&#xA;}"/>
          </eAnnotations>
          <eParameters name="operation" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="operation" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallEventExecution" eSuperTypes="#//Semantics/CommonBehavior/Execution">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/CommonBehavior/CallEventOccurrence.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CallEventBehavior.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'CalEventExecution' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="_copy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new call event execution that is a copy of this execution, with the&#xA;// caller initially not suspended.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::CallEventExecution> newValue = std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::CallEventExecution>(fUML::Semantics::CommonBehavior::ExecutionImpl::_copy());&#xA;newValue->setCallerSuspended(false);&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="createEventOccurrence" lowerBound="1" eType="#//Semantics/CommonBehavior/EventOccurrence">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::CallEventOccurrence> eventOccurrence = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createCallEventOccurrence();&#xA;&#x9;eventOccurrence->setExecution(getThisCallEventExecutionPtr());&#xA;&#x9;return eventOccurrence;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="execute">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Make the call on the target object (which is the context of this execution)&#xA;// and suspend the caller until the call is completed.&#xA;// Note: The callerSuspended flag needs to be set before the call is made,&#xA;// in case the call is immediately handled and returned, even before the&#xA;// suspend loop is started.&#xA;&#xA;this->setCallerSuspended(true);&#xA;this->makeCall();&#xA;this->suspendCaller();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getInputParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return input parameter values for this execution.&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> parameterValues(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;for(unsigned int i = 0; i &lt; this->getParameterValues()->size(); i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = this->getParameterValues()->at(i);&#xA;&#x9;if((parameterValue->getParameter()->getDirection() == uml::ParameterDirectionKind::IN) || (parameterValue->getParameter()->getDirection() == uml::ParameterDirectionKind::INOUT))&#xA;&#x9;{&#xA;&#x9;&#x9;parameterValues->add(parameterValue);&#xA;&#x9;}&#xA;}&#xA;&#xA;return parameterValues;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getOperation" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return the operation being called by this call event execution.&#xA;return (std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::CallEventBehavior>(this->getBehavior()))->getOperation();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isCallerSuspended" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;_beginIsolation();&#xA;&#x9;bool isSuspended = m_callerSuspended;&#xA;&#x9;_endIsolation();&#xA;&#xA;&#x9;return isSuspended;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="makeCall">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Make the call on the target object (which is the context of this execution)&#xA;// by sending a call event occurrence. (Note that the call will never be&#xA;// completed if the target is not an active object, since then the object&#xA;// would then have no event pool in which the event occurrence could be placed.)&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Reference> reference = fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createReference();&#xA;&#x9;reference->setReferent(this->getContext());&#xA;&#x9;this->createEventOccurrence()->sendTo(reference);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new call event execution.&#xA;return fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createCallEventExecution();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="releaseCaller">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="setCallerSuspended(false);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="setOutputParameterValues">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Set the output parameter values for this execution.&#xA;&#xA;std::shared_ptr&lt;Bag&lt;uml::Parameter>> parameters = this->getBehavior()->getOwnedParameter();&#xA;unsigned int i = 1;&#xA;unsigned int j = 1;&#xA;&#xA;while(i &lt;= parameters->size())&#xA;{&#xA;&#x9;std::shared_ptr&lt;uml::Parameter> parameter = parameters->at(i-1);&#xA;&#x9;if((parameter->getDirection() == uml::ParameterDirectionKind::INOUT) || (parameter->getDirection() == uml::ParameterDirectionKind::OUT) || (parameter->getDirection() == uml::ParameterDirectionKind::RETURN))&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = getParameterValues()->at(j-1);&#xA;&#x9;&#x9;parameterValue->setParameter(parameter);&#xA;&#x9;&#x9;this->setParameterValue(parameterValue);&#xA;&#x9;&#x9;j += 1;&#xA;&#x9;}&#xA;&#x9;i += 1;&#xA;}"/>
          </eAnnotations>
          <eParameters name="parameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="suspendCaller">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="while(isCallerSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;wait_();&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="wait_">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Wait for an indeterminate amount of time to allow other concurrent&#xA;// executions to proceed&#xA;&#xA;// [There is no further formal specification for this operation.]."/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="callerSuspended" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Boolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="keySetterBody" value="_beginIsolation();&#xA;this.callerSuspended = callerSuspended;&#xA;_endIsolation();"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallEventOccurrence" eSuperTypes="#//Semantics/CommonBehavior/EventOccurrence">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;memory>&#xA;#include &quot;uml/Trigger.hpp&quot;&#xA;#include &quot;uml/CallEvent.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'CallEventOccurrence' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="getOperation" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return m_execution->getOperation();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return m_execution->getInputParameterValues();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="match" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool matches = false;&#xA;&#x9;std::shared_ptr&lt;uml::CallEvent> callEvent = std::dynamic_pointer_cast&lt;uml::CallEvent>(trigger->getEvent());&#xA;&#x9;if (callEvent != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;matches = callEvent->getOperation() == getOperation();&#xA;&#x9;}&#xA;&#x9;return matches;"/>
          </eAnnotations>
          <eParameters name="trigger" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Trigger"/>
        </eOperations>
        <eOperations name="releaseCaller">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="m_execution->releaseCaller();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="setOutputParameterValues">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="m_execution->setOutputParameterValues(parameterValues);"/>
          </eAnnotations>
          <eParameters name="parameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="execution" lowerBound="1"
            eType="#//Semantics/CommonBehavior/CallEventExecution"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorInvocationEventAccepter"
          eSuperTypes="#//Semantics/CommonBehavior/EventAccepter">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ObjectActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/InvocationEventOccurrence.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'ClassifierBehaviorInvocationEventAccepter' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="accept">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Accept an invocation event occurrence. Execute the execution of this&#xA;// classifier behavior invocation event accepter.&#xA;&#xA;if(std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::InvocationEventOccurrence>(eventOccurrence) != nullptr)&#xA;{&#xA;&#x9;this->getExecution()->execute();&#xA;}"/>
          </eAnnotations>
          <eParameters name="eventOccurrence" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
        <eOperations name="invokeBehavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Set the classifier for this classifier behavior execution to the given class.&#xA;// If the given class is a behavior, set the execution to be the object of the object activation of the classifier behavior execution.&#xA;// Otherwise the class must be an active class, so get an execution object for the classifier behavior for the class.&#xA;// Set the input parameters for the execution to the given values.&#xA;// Then register this event accepter with the object activation.&#xA;&#xA;this->setClassifier(classifier);&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object> object = this->getObjectActivation()->getObject();&#xA;&#xA;if(std::dynamic_pointer_cast&lt;uml::Behavior>(classifier) != nullptr)&#xA;{&#xA;&#x9;this->setExecution(std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::Execution>(object));&#xA;}&#xA;else &#xA;{&#xA;&#x9;this->setExecution(object->getLocus()->getFactory()->createExecution(classifier->getClassifierBehavior(), object));&#xA;}&#xA;&#xA;if(inputs != nullptr)&#xA;{&#xA;&#x9;for(int i = 0; i &lt; inputs->size(); i++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> input= inputs->at(i);&#xA;&#x9;&#x9;this->getExecution()->setParameterValue(input);&#xA;&#x9;}&#xA;}&#xA;&#xA;this->getObjectActivation()->_register(std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::EventAccepter>(this));"/>
          </eAnnotations>
          <eParameters name="classifier" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
          <eParameters name="inputs" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="match" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return true if the given event occurrence is an invocation event&#xA;// occurrence for the execution of this classifier behavior invocation&#xA;// event accepter.&#xA;&#xA;bool matches = false;&#xA;&#xA;if(std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::InvocationEventOccurrence>(eventOccurrence) != nullptr)&#xA;{&#xA;&#x9;matches = (std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::InvocationEventOccurrence>(eventOccurrence))->getExecution() == this->getExecution();&#xA;}&#xA;&#xA;return matches;"/>
          </eAnnotations>
          <eParameters name="eventOccurrence" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
        <eOperations name="terminate">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Terminate the associated execution.&#xA;// If the execution is not itself the object of the object activation, then destroy it.&#xA;&#xA;this->getExecution()->terminate();&#xA;&#xA;if(this->getExecution() != this->getObjectActivation()->getObject())&#xA;{&#xA;&#x9;this->getExecution()->destroy();&#xA;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="execution" lowerBound="1"
            eType="#//Semantics/CommonBehavior/Execution"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="objectActivation" eType="#//Semantics/CommonBehavior/ObjectActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorExecution">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ClassifierBehaviorExecution' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="execute" ordered="false" lowerBound="1">
          <eParameters name="classifier" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
          <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1"/>
        <eOperations name="_startObjectBehavior" ordered="false" lowerBound="1"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="execution" ordered="false"
            lowerBound="1" eType="#//Semantics/CommonBehavior/Execution"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="objectActivation" ordered="false"
            eType="#//Semantics/CommonBehavior/ObjectActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EventAccepter" abstract="true">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'EventAccepter' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="accept" ordered="false" lowerBound="1">
          <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="match" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EventOccurrence">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'EventOccurrence' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="doSend" lowerBound="1"/>
        <eOperations name="getParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        <eOperations name="match" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="trigger" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Trigger"/>
        </eOperations>
        <eOperations name="matchAny" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="triggers" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Trigger"/>
        </eOperations>
        <eOperations name="sendTo" lowerBound="1">
          <eParameters name="target" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Execution" abstract="true" eSuperTypes="#//Semantics/Loci/SemanticVisitor http://www.eclipse.org/uml2/5.0.0/UML#//Element">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;algorithm>&#xA;#include &lt;uml/Parameter.hpp>&#xA;#include &lt;uml/ParameterDirectionKind.hpp>&#xA;#include &lt;fUML/Semantics/CommonBehavior/ParameterValue.hpp>&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/impl/ObjectImpl.hpp&quot;&#xA;"/>
        </eAnnotations>
        <eAnnotations source="http://tu-ilmenau.de/see/modelChange">
          <details value="Deleted inheritance from fUML::Semantics::StructuredClassifiers::Object&#xA;Inserted inheritance to fUML::Semantics::Loci::SemanticVisitor&#xA;Inserted inheritance to uml::Element"/>
        </eAnnotations>
        <eOperations name="execute" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="setParameterValue" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> existingParameterValue = this->getParameterValue(parameterValue->getParameter());&#xA;&#xA;&#x9;if (existingParameterValue == nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;this->getParameterValues()->push_back(parameterValue);&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;existingParameterValue->getValues()->clear(); // memory Leak&#xA;&#x9;&#x9;auto vec = parameterValue->getValues();&#xA;&#x9;&#x9;existingParameterValue->getValues()->insert(existingParameterValue->getValues()->end(),vec->begin(),vec->end());&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="parameterValue" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="getParameterValue" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = nullptr;&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > list = this->getParameterValues();&#xA;&#x9;std::vector&lt;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue>>::iterator it = std::find_if(list->begin(), list->end(), [parameter] (std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> p) { return p->getParameter() == parameter; } );&#xA;    if(it!= this->getParameterValues()->end() )&#xA;    {&#xA;        parameterValue  = *it;&#xA;    }&#xA;    return parameterValue;"/>
          </eAnnotations>
          <eParameters name="parameter" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter"/>
        </eOperations>
        <eOperations name="getOutputParameterValues" ordered="false" upperBound="-1"
            eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > outputs(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > outputParameterValueList = this->getParameterValues();&#xA;    for (std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue : *outputParameterValueList)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::Parameter> parameter = parameterValue->getParameter();&#xA;        if((parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::OUT)&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::RETURN))&#xA;        {&#xA;            outputs->push_back(parameterValue);&#xA;        }&#xA;    }&#xA;&#xA;    return outputs;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getBehavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return std::dynamic_pointer_cast&lt;uml::Behavior>(this->getTypes()->front());"/>
            <details key="doNotGenerate" value="Class 'Execution' is excluded from generation because it is obsolete.&#xA;Executions (except for ActivityExecutions) are omitted in this fUML implementation."/>
          </eAnnotations>
          <eAnnotations source="MDE4CPP_Substituted" references="#//Semantics/CommonBehavior/Execution/behavior">
            <details key="doc" value="For performance reasons, this operation is substituted with the Getter-method of &quot;this.behavior : Behavior&quot;, which is newly introduced and is not part of the original specification."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new execution that has the same behavior and parameterValues as this execution.&#xA;&#xA;/* Curretly not supported&#xA;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::Execution> newValue = std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::Execution>(fUML::Semantics::StructuredClassifiers::ObjectImpl::_copy());&#xA;&#xA;newValue->setContext(this->getContext());&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> parameterValues = this->getParameterValues();&#xA;unsigned int parameterValuesSize = parameterValues->size();&#xA;&#xA;for(unsigned int i = 0; i &lt; parameterValuesSize; i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = parameterValues->at(i);&#xA;&#x9;newValue->getParameterValues()->add(parameterValue->_copy());&#xA;}&#xA;&#xA;return newValue;&#xA;*/&#xA;&#xA;throw std::runtime_error(&quot;UnsupportedOperationException: &quot; + std::string(__PRETTY_FUNCTION__));&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="destroy" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    &#xA;/* Currently not supported&#xA;if(this->getObjectActivation() != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;this->getObjectActivation()->stop();&#xA;&#x9;&#x9;this->setObjectActivation(nullptr);&#xA;&#x9;}&#xA;*/&#xA;&#xA;&#x9;this->getTypes()->clear();&#xA;    &#xA;&#x9;if(this->getLocus() != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;this->getLocus()->remove(getThisExecutionPtr());&#xA;&#x9;}"/>
          </eAnnotations>
          <eAnnotations source="http://tu-ilmenau.de/see/modelChange">
            <details value="Transfered from fUML::Semantics::StructuredClassifiers::Object::destroy()"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="context" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameterValues" ordered="false"
            upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue" containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="behavior" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="getterBody" value="if(!m_behavior)&#xA;{&#xA;&#x9;m_behavior = std::dynamic_pointer_cast&lt;uml::Behavior>(this->getTypes()->front());&#xA;}&#xA;&#xA;return m_behavior;"/>
            <details key="qualify" value="mutable"/>
          </eAnnotations>
          <eAnnotations source="MDE4CPP_Substitutes" references="#//Semantics/CommonBehavior/Execution/getBehavior">
            <details key="doc" value="The Getter-method of this property substitutes &quot;this.getBehavior() : Behavior&quot;.&#xA;"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
            eType="#//Semantics/Loci/Locus">
          <eAnnotations source="http://tu-ilmenau.de/see/modelChange">
            <details value="Transfered from fUML::Semantics::StructuredClassifiers::ExtensionalValue::locus"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="types" ordered="false"
            upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/modelChange">
            <details value="Transfered from fUML::Semantics::StructuredClassifiers::Object::types"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="objectActivation" ordered="false"
            eType="#//Semantics/CommonBehavior/ObjectActivation" containment="true">
          <eAnnotations source="http://tu-ilmenau.de/see/modelChange">
            <details value="Transfered from fUML::Semantics::StructuredClassifiers::Object::objectActivation"/>
          </eAnnotations>
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="doNotGenerate"/>
          </eAnnotations>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FIFOGetNextEventStrategy" eSuperTypes="#//Semantics/CommonBehavior/GetNextEventStrategy">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'FIFOGetNextEventStrategy' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="GetNextEventStrategy" abstract="true"
          eSuperTypes="#//Semantics/Loci/SemanticStrategy">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'GetNextEventStrategy' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="retrieveNextEvent" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eParameters name="objectActivation" ordered="false" eType="#//Semantics/CommonBehavior/ObjectActivation"/>
        </eOperations>
        <eOperations name="getName" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//String">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get next event strategies are always named &quot;getNextEvent&quot;.&#xA;return &quot;getNextEvent&quot;;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InvocationEventOccurrence" eSuperTypes="#//Semantics/CommonBehavior/EventOccurrence">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'InvocationEventOccurrence' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="getParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// An invocation event occurrence does not have any associated data.&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> parameterValueList(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#xA;return parameterValueList;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="match" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// An invocation event occurrence does not match any triggers.&#xA;&#xA;return false;"/>
          </eAnnotations>
          <eParameters name="trigger" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Trigger"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="execution" lowerBound="1"
            eType="#//Semantics/CommonBehavior/Execution"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ObjectActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/CommonBehavior/ClassifierBehaviorExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/SimpleClassifiers/SimpleClassifiersPackage.hpp&quot;&#xA;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'ObjectActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="startBehavior" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->_startObjectBehavior();&#xA;&#xA;&#x9;if (classifier == nullptr)&#xA;&#x9;{&#xA;    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[startBehavior] Starting behavior for all classifiers...&quot;&lt;&lt;std::endl;)&#xA;&#x9;&#x9;// *** Start all classifier behaviors concurrently. ***&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getObject()->getTypes();&#xA;        std::vector&lt;std::shared_ptr&lt;uml::Classifier>>::iterator i;&#xA;        for (i = types->begin(); i!=types->end(); ++i) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;uml::Class> type = std::dynamic_pointer_cast&lt;uml::Class> (*i);&#xA;        &#x9;if ((std::dynamic_pointer_cast&lt;uml::Behavior>(type) != nullptr) || (type->getClassifierBehavior() != nullptr))&#xA;            {&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > parameterValue(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;            &#x9;this->startBehavior(type, parameterValue);&#xA;            }&#xA;        }&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[startBehavior] Starting behavior for &quot;&lt;&lt; classifier->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xA;&#xA;&#x9;&#x9;bool notYetStarted = true;&#xA;        unsigned int i = 0;&#xA;        while (notYetStarted &amp;&amp; i &lt; this->getClassifierBehaviorExecutions()->size())&#xA;        {&#xA;        &#x9;notYetStarted = (this->getClassifierBehaviorExecutions()->at(i)->getClassifier() != classifier);&#xA;            i = i + 1;&#xA;        }&#xA;&#xA;        if (notYetStarted)&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ClassifierBehaviorExecution> newExecution(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createClassifierBehaviorExecution());&#xA;        &#x9;newExecution->setObjectActivation(getThisObjectActivationPtr());&#xA;        &#x9;this->getClassifierBehaviorExecutions()->push_back(newExecution);&#xA;        &#x9;//newExecution->execute(classifier, inputs);&#xA;        }&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="classifier" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
          <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="stop" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ClassifierBehaviorExecution> > classifierBehaviorExecutions = this->getClassifierBehaviorExecutions();&#xA;    for (unsigned int i = 0; i &lt; classifierBehaviorExecutions->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ClassifierBehaviorExecution> classifierBehaviorExecution = classifierBehaviorExecutions->at(i);&#xA;        classifierBehaviorExecution->terminate();&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_register" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[register] object = &quot; &lt;&lt; this->getObject()&lt;&lt;std::endl;)&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[register] accepter = &quot; &lt;&lt; accepter&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    this->getWaitingEventAccepters()->push_back(accepter);"/>
          </eAnnotations>
          <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/EventAccepter"/>
        </eOperations>
        <eOperations name="unregister" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[unregister] object = &quot; &lt;&lt; this->getObject()&lt;&lt;std::endl;)&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[unregister] accepter = &quot; &lt;&lt; accepter&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    bool notFound = true;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (notFound &amp;&amp; i &lt; this->getWaitingEventAccepters()->size()) {&#xD;&#xA;        if (this->getWaitingEventAccepters()->at(i) == accepter) {&#xD;&#xA;            this->getWaitingEventAccepters()->erase(this->getWaitingEventAccepters()->begin() + i);&#xD;&#xA;            notFound = false;&#xD;&#xA;        }&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }"/>
          </eAnnotations>
          <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/EventAccepter"/>
        </eOperations>
        <eOperations name="send" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getEventPool()->push_back(std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::SignalInstance>(signalInstance->copy()));&#xA;    //_send(new ArrivalSignal());"/>
          </eAnnotations>
          <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="dispatchNextEvent" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=""/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveNextEvent" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
        </eOperations>
        <eOperations name="_startObjectBehavior" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="//this->behavior._startObjectBehavior();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_send" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=""/>
          </eAnnotations>
          <eParameters name="signal" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="waitingEventAccepters"
            ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/EventAccepter"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="eventPool" ordered="false"
            upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"
            containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="object" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="classifierBehaviorExecutions"
            ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ClassifierBehaviorExecution"
            containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="EventDispatchLoop">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'EventDispatchLoop' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OpaqueBehaviorExecution" abstract="true"
          eSuperTypes="#//Semantics/CommonBehavior/Execution">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'OpaqueBehaviorExecution' is excluded from generation because it is obsolete.&#xA;OpaqueBehaviorExecutions are omitted in this fUML implementation.&#xA;OpaqueBehaviors are executed by invoking corresponding model-specific, generated C++ operations."/>
        </eAnnotations>
        <eOperations name="doBody" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
          <eParameters name="inputParameters" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
          <eParameters name="outputParameters" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="execute" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[execute] Opaque behavior &quot; &lt;&lt; this->getBehavior()->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > inputs(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > outputs(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Parameter> > parameterList = this->getBehavior()->getOwnedParameter();&#xA;    for(std::shared_ptr&lt;uml::Parameter> parameter : *parameterList) &#xA;    {&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;parameter->getName()&lt;&lt; &quot; Parameter Direction: &quot; &lt;&lt; (int) parameter->getDirection()&lt;&lt;std::endl;)&#xA;        if ((parameter->getDirection() == uml::ParameterDirectionKind::IN)&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::INOUT)) &#xA;        {&#xA;            inputs->push_back(this->getParameterValue(parameter));&#xA;        }&#xA;&#xA;        if ((parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::OUT)&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::RETURN)) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue());&#xA;            parameterValue->setParameter(parameter);&#xA;&#xA;            //Do not override ParameterValues for INOUT parameters&#xA;            //Otherwise the input value would be lost&#xA;            if(parameter->getDirection() != uml::ParameterDirectionKind::INOUT)&#xA;            {&#xA;                this->setParameterValue(parameterValue);&#xA;            }&#xA;&#xA;            outputs->push_back(parameterValue);&#xA;        }&#xA;    }&#xA;&#xA;    this->doBody(inputs, outputs);&#xA;&#xA;    for(std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue : *outputs)&#xA;    {&#xA;    &#x9;//Now override INOUT ParameterValues with their (new) output values&#xA;    &#x9;std::shared_ptr&lt;uml::Parameter> parameter = parameterValue->getParameter();&#xA;    &#x9;if(parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xA;    &#x9;{&#xA;    &#x9;&#x9;this->setParameterValue(parameterValue);&#xA;    &#x9;}&#xA;    }"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ParameterValue">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Values/ValuesPackage.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new parameter value for the same parameter as this parameter value, but with&#xA;// copies of the values of this parameter value.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> newValue = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue();&#xA;newValue->setParameter(this->getParameter());&#xA;&#xA;std::shared_ptr&lt;Bag&lt;Any>> values = this->getValues();&#xA;unsigned int valuesSize = values->size();&#xA;&#xA;for(unsigned int i = 0; i &lt; valuesSize; i++)&#xA;{&#xA;&#x9;std::shared_ptr&lt;Any> value = values->at(i);&#xA;&#x9;/* Currently not supported&#xA;&#x9;newValue->getValues()->add(value->_copy());&#xA;&#x9;*/&#xA;}&#xA;&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="values" upperBound="-1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SignalEventOccurrence" eSuperTypes="#//Semantics/CommonBehavior/EventOccurrence">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'SignalEventOccurrence' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="getParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        <eOperations name="match" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="trigger" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Trigger"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="signalInstance" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="Actions" nsURI="http:///fUML_Semantics/Semantics/Actions.ecore"
        nsPrefix="fUML_Semantics.Semantics.Actions">
      <eClassifiers xsi:type="ecore:EClass" name="AcceptEventActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'AcceptEventActionActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="accept" ordered="false" lowerBound="1">
          <eParameters name="eventOccurrence" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
        <eOperations name="match" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="eventOccurrence" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
        <eOperations name="doAction" lowerBound="1"/>
        <eOperations name="fire" lowerBound="1">
          <eParameters name="incomingTokens" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="initialize" lowerBound="1">
          <eParameters name="node" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
          <eParameters name="group" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivationGroup"/>
        </eOperations>
        <eOperations name="isReady" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
        <eOperations name="run" lowerBound="1"/>
        <eOperations name="terminate" lowerBound="1"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="eventAccepter" ordered="false"
            eType="#//Semantics/Actions/AcceptEventActionEventAccepter"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="waiting" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AcceptEventActionEventAccepter"
          eSuperTypes="#//Semantics/CommonBehavior/EventAccepter">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'AcceptEventActionEventAccepter' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="actionActivation" ordered="false"
            lowerBound="1" eType="#//Semantics/Actions/AcceptEventActionActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AcceptCallActionActivation" eSuperTypes="#//Semantics/Actions/AcceptEventActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'AcceptCallActionActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="accept" lowerBound="1">
          <eParameters name="eventOccurrence" lowerBound="1" eType="#//Semantics/CommonBehavior/EventOccurrence"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActionActivation" abstract="true"
          eSuperTypes="#//Semantics/Activities/ActivityNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;algorithm>&#xA;#include &lt;iterator>&#xA;#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ControlToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Executor.hpp&quot;&#xA;//#include &quot;fUML/Semantics/SimpleClassifiers/FeatureValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ForkNodeActivation.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Link.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/PinActivation.hpp&quot;&#xA;#include &quot;uml/Action.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/DataStoreNode.hpp&quot;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xA;#include &quot;uml/ForkNode.hpp&quot;&#xA;#include &quot;uml/Activity.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="isFirng" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    return this->isFiring();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doAction" ordered="false" lowerBound="1"/>
        <eOperations name="sendOffers" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    // *** Send offers from all output pins concurrently. ***&#xA;&#x9;std::shared_ptr&lt;Subset&lt;fUML::Semantics::Actions::OutputPinActivation, fUML::Semantics::Actions::PinActivation > > outputPins=this->getOutputPinActivation();&#xA;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Actions::OutputPinActivation> pin: *outputPins)&#xA;&#x9;{&#xA;&#x9;&#x9;pin->sendUnofferedTokens();&#xA;&#x9;}&#xA;&#xA;    // Send offers on all outgoing control flows.&#xA;    if (!this->getOutgoingEdges()->empty()) {&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;        tokens->push_back(std::shared_ptr&lt;fUML::Semantics::Activities::Token>(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createControlToken()));&#xA;        this->addTokens(tokens);&#xA;        //front ok - because of adding anonymus fork node instead of multiple outgoing edges&#xA;        this->getOutgoingEdges()->front()->sendOffer(tokens);&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addPinActivation" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="pinActivation->setActionActivation(getThisActionActivationPtr());&#xA;&#xA;&#x9;switch(pinActivation->eClass()->getClassifierID())&#xA;&#x9;{&#xA;&#x9;&#x9;case fUML::Semantics::Actions::ActionsPackage::INPUTPINACTIVATION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::InputPinActivation> inPinActivation= std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::InputPinActivation> (pinActivation);&#xA;&#x9;&#x9;&#x9;this->getInputPinActivation()->push_back(inPinActivation);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;case fUML::Semantics::Actions::ActionsPackage::OUTPUTPINACTIVATION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::OutputPinActivation> outPinActivation= std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::OutputPinActivation> (pinActivation);&#xA;&#x9;&#x9;&#x9;this->getOutputPinActivation()->push_back(outPinActivation);&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;default:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;fUML::Semantics::Actions::ActionActivationImpl::addPinActivation: unknown pin type.&quot;;&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="pinActivation" ordered="false" lowerBound="1" eType="#//Semantics/Actions/PinActivation"/>
        </eOperations>
        <eOperations name="retrievePinActivation" ordered="false" lowerBound="1" eType="#//Semantics/Actions/PinActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation = nullptr;&#xA;&#xA;    Bag&lt;fUML::Semantics::Actions::PinActivation>* pinActivationListPtr = this->getPinActivation().get();&#xA;    const int size = pinActivationListPtr->size();&#xA;    std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation>thisPinActivation;&#xA;    for(int i=0; i&lt; size; i++)&#xA;    {&#xA;        thisPinActivation = (*pinActivationListPtr)[i];&#xA;        if (thisPinActivation->getNode() == pin) {&#xA;            pinActivation = thisPinActivation;&#xA;            break;&#xA;        }&#xA;    }&#xA;&#xA;    return pinActivation;"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Pin"/>
        </eOperations>
        <eOperations name="putToken" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> token = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createObjectToken();&#xA;    token->setValue(value);&#xA;&#xA;    std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation = this->retrievePinActivation(pin);&#xA;    pinActivation->addToken(token);&#xA;    ACT_DEBUG(std::cout&lt;&lt;&quot;SET_TOKEN;NODE:&quot;&lt;&lt; this->getNode()->getQualifiedName() &lt;&lt;&quot;;TOKEN:&quot;&lt;&lt;token->getValue() &lt;&lt; &quot;;CURRENT_TOKENS:&quot;&lt;&lt; (this->getHeldTokens()->size()+1) &lt;&lt;&quot;;DIRECTION:add&quot;&lt;&lt;std::endl;)"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="putTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Action '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' putting &quot; &lt;&lt; values->size() &lt;&lt; &quot;tokens to output pin '&quot; &lt;&lt; pin->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;for (std::shared_ptr&lt;Any> value : *values)&#xA;&#x9;{&#xA;       &#x9;&#x9;this->putToken(pin,value);&#xA;   &#x9;}"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="getTokens" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Action '&quot; &lt;&lt; this->getNode()->getName()  &lt;&lt; &quot;' retrieving tokens from input pin '&quot; &lt;&lt; pin->getName()&lt;&lt;&quot;'.&quot;)&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation(this->retrievePinActivation(pin));&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Any>> values(new Bag&lt;Any>());&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokenList = pinActivation->getUnofferedTokens();&#xA;   &#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token : *tokenList)&#xA;    &#x9;{&#xA;    &#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> objToken = std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ObjectToken>(token);&#xA;        &#x9;&#x9;if(objToken!=nullptr)&#xA;        &#x9;&#x9;{&#xA;            &#x9;&#x9;std::shared_ptr&lt;Any> value = objToken->getValue();&#xA;            &#x9;&#x9;if(value != nullptr)&#xA;            &#x9;&#x9;{&#xA;                &#x9;&#x9;&#x9;values->push_back(value);&#xA;            &#x9;&#x9;}&#xA;        &#x9;&#x9;}&#xA;    &#x9;}&#xA;&#xA;&#x9;return values;"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//InputPin"/>
        </eOperations>
        <eOperations name="takeTokens" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation = this->retrievePinActivation(pin);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Any>> values(new Bag&lt;Any>());&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokenList = pinActivation->takeUnofferedTokens();&#xA;&#xA;&#x9;DEBUG_INFO(&quot;Action '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' retrieved &quot;&lt;&lt; tokenList->size() &lt;&lt; &quot; tokens from pin '&quot; &lt;&lt; pin->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token : *tokenList)&#xA;    &#x9;{&#xA;#ifndef NDEBUG&#xA;&#x9;&#x9;unsigned int tokenNumber = 0;&#xA;#endif&#xA;    &#x9;&#x9;std::shared_ptr&lt;Any> value = token->getValue();&#xA;        &#x9;if(value != nullptr)&#xA;        &#x9;{&#xA;        &#x9;&#x9;DEBUG_INFO(&quot;Value in token[&quot; &lt;&lt; tokenNumber &lt;&lt;&quot;] : &quot; &lt;&lt; value->toString() &lt;&lt; &quot;.&quot;)&#xA;            &#x9;&#x9;values->push_back(value);&#xA;        &#x9;}&#xA;    &#x9;}&#xA;    return values;"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//InputPin"/>
        </eOperations>
        <eOperations name="valueParticipatesInLink" ordered="false" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="bool participates = false;&#xA;&#xA;&#x9;/* Currently not supported&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> > featureValueList = link->getFeatureValues();&#xA;    for (std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue : *featureValueList)&#xA;    {&#xA;        if(featureValue->getValues()->front()->equals(value))&#xA;        {&#xA;            participates = true;&#xA;            break;&#xA;        }&#xA;    }&#xA;&#x9;*/&#xA;&#xA;    return participates;"/>
          </eAnnotations>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="link" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="makeBooleanValue" ordered="false" lowerBound="1" eType="#//Semantics/SimpleClassifiers/BooleanValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=" std::shared_ptr&lt;uml::LiteralBoolean> booleanValue = uml::umlFactory::eInstance()->createLiteralBoolean_as_ownedMember_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xA;    booleanValue->setValue(value);&#xA;    return std::dynamic_pointer_cast&lt;fUML::Semantics::SimpleClassifiers::BooleanValue>(this->getExecutionLocus()->getExecutor()->evaluate(booleanValue));"/>
            <details key="doNotGenerate" value="Operation 'makeBooleanValue' is excluded from generation because class 'BooleanValue' is excluded from generation (see class SimpleClassifiers::BooleanValue)."/>
          </eAnnotations>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
        </eOperations>
        <eOperations name="run" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;    fUML::Semantics::Activities::ActivityNodeActivationImpl::run();&#xA;&#xA;    if (!this->getOutgoingEdges()->empty()) {&#xA;    &#x9;auto target=this->getOutgoingEdges()->front()->getTarget().lock();&#xA;    &#x9;if(target)&#xA;    &#x9;{&#xA;    &#x9;&#x9;target->run();&#xA;    &#x9;}&#xA;    }&#xA;&#xA;    this->setFiring( false);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::Action> action = this->getAction();&#xA;&#xA;    if(action != nullptr)&#xA;    {&#xA;        this->setFiring(!action->getIsLocallyReentrant());&#xA;    }&#xA;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > offeredTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;Bag&lt;fUML::Semantics::Activities::Token>* offeredTokensPtr = offeredTokens.get();&#xA;&#x9;Bag&lt;fUML::Semantics::Activities::Token>* tokenListPtr = nullptr;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > incomingEdgeList = this->getIncomingEdges();&#xA;&#x9;&#xA;    for(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> incomingEdge : *incomingEdgeList)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokenList = incomingEdge->takeOfferedTokens();&#xA;&#x9;&#x9;tokenListPtr = tokenList.get();&#xA;&#x9;&#x9;&#xA;        for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token: *tokenListPtr)&#xA;        {&#xA;            token->withdraw();&#xA;            offeredTokensPtr->push_back(token);&#xA;        }&#xA;    }&#xA;&#xA;    // *** Fire all input pins concurrently. ***&#xA;    if(action != nullptr)&#xA;    {&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Activities::Token>* tokensPtr = nullptr;&#xA;    &#x9;std::shared_ptr&lt;Subset&lt;fUML::Semantics::Actions::InputPinActivation, fUML::Semantics::Actions::PinActivation > > inputPinActivations = this->getInputPinActivation();&#xA;        for (std::shared_ptr&lt;fUML::Semantics::Actions::InputPinActivation> pinActivation : *inputPinActivations)&#xA;        {&#xA;            if(pinActivation!=nullptr)&#xA;&#x9;{&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens = pinActivation->takeOfferedTokens();&#xA;&#x9;&#x9;tokensPtr = tokens.get();&#xA;            &#x9;pinActivation->fire(tokens);&#xA;            &#x9;offeredTokensPtr->insert(offeredTokensPtr->end(), tokensPtr->begin(), tokensPtr->end());&#xA;            }&#xA;            else&#xA;            {&#xA;                DEBUG_WARNING(&quot;A Pin was nullptr!&quot;)&#xA;            }&#xA;        }&#xA;    }&#xA;&#x9;DEBUG_INFO(&quot;Action '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' retrieved &quot; &lt;&lt; offeredTokens->size() &lt;&lt; &quot; token(s) from it's input pins and incoming edges.&quot;)&#xA;   &#x9;return offeredTokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    do {&#xA;&#xA;        DEBUG_INFO(&quot;Firing Action '&quot;  &lt;&lt; this->getNode()->getName()  &lt;&lt; &quot;'.&quot;)&#xA;&#xA;        this->doAction();&#xA;        this->sendOffers();&#xA;        incomingTokens = this->completeAction();&#xA;&#xA;    } while (incomingTokens->size() > 0);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;    fUML::Semantics::Activities::ActivityNodeActivationImpl::terminate();&#xA;&#xA;    if (!this->getOutgoingEdges()->empty())&#xA;    {&#xA;    &#x9;auto target=this->getOutgoingEdges()->front()->getTarget().lock();&#xA;    &#x9;if(target)&#xA;    &#x9;{&#xA;    &#x9;&#x9;target->terminate();&#xA;    &#x9;}&#xA;    }&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::Action> actionNode = this->getAction();&#xA;    bool ready = false;&#xA;    if(actionNode != nullptr)&#xA;    {&#xA;        ready = fUML::Semantics::Activities::ActivityNodeActivationImpl::isReady()&#xA;                 &amp;&amp; ((actionNode->getIsLocallyReentrant()) || !this->isFiring());&#xA;&#xA;         //Has any Edge Offers?&#xA;         if(ready)&#xA;         {&#xA;        &#x9; std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > edgeList = this->getIncomingEdges();&#xA;             ready = std::all_of(edgeList->begin(),edgeList->end(),[](std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edge ){return edge->hasOffer();});&#xA;         }&#xA;&#xA;         //Have all Inputpin an Activation?&#xA;         if(ready)&#xA;         {&#xA;        &#x9; std::shared_ptr&lt;Subset&lt;fUML::Semantics::Actions::InputPinActivation, fUML::Semantics::Actions::PinActivation > > activations = this->getInputPinActivation();&#xA;             ready = std::all_of(activations->begin(),activations->end(),[this]( std::shared_ptr&lt;fUML::Semantics::Actions::InputPinActivation> pin){return pin->isReady();});&#xA;         }&#xA;&#xA;    }&#xA;    else&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::DataStoreNode> dActivation = std::dynamic_pointer_cast&lt;uml::DataStoreNode>(this->getNode());&#xA;        if(dActivation != nullptr)&#xA;        {&#xA;            ready = true; //TODO&#xA;            //Has any Edge Offers?&#xA;            if(ready)&#xA;            {&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > edgeList = this->getIncomingEdges();&#xA;                ready = std::all_of(edgeList->begin(),edgeList->end(),[](std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edge ){return edge->hasOffer();});&#xA;            }&#xA;&#xA;            if(!ready)&#xA;            {&#xA;&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    return ready;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="completeAction" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Checking if Action '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' can fire again.&quot;)&#xA;&#xA;    _beginIsolation();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > incomingTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#xA;    this->setFiring(false);&#xA;    if (this->isReady()) {&#xA;        incomingTokens = this->takeOfferedTokens();&#xA;        this->setFiring(this->isFirng() &amp;&amp; !incomingTokens->empty());&#xA;    }&#xA;    _endIsolation();&#xA;&#xA;    return incomingTokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::Action> action = this->getAction();&#xA;&#xA;    //createinputpin activation&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > inputPinNodes(new Bag&lt;uml::ActivityNode>());&#xA;    if(action)&#xA;    {&#xA;    &#x9;DEBUG_INFO(&quot;Action '&quot; &lt;&lt; action->getName() &lt;&lt;&quot;' has &quot; &lt;&lt;action->getInput()->size()&lt;&lt;&quot; input pin(s).&quot;)&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = action->getInput();&#xA;    &#x9;for(std::shared_ptr&lt;uml::InputPin> pin : *inputPins)&#xA;    &#x9;{&#xA;    &#x9;&#x9;if(pin!=nullptr)&#xA;    &#x9;&#x9;{&#xA;    &#x9;&#x9;&#x9;inputPinNodes->push_back(pin);&#xA;    &#x9;&#x9;}&#xA;    &#x9;&#x9;else&#xA;    &#x9;&#x9;{&#xA;    &#x9;&#x9;&#x9;DEBUG_WARNING(&quot;An input pin was nullptr!&quot;)&#xA;    &#x9;&#x9;}&#xA;    &#x9;}&#xA;    }&#xA;&#xA;    //create outputpin activation&#xA;    std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > outputPinNodes(new Bag&lt;uml::ActivityNode>());&#xA;    if(action)&#xA;    {&#xA;    &#x9;DEBUG_INFO(&quot;Action '&quot; &lt;&lt; action->getName() &lt;&lt;&quot;' has &quot; &lt;&lt; action->getOutput()->size()&lt;&lt;&quot; output pin(s).&quot;)&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::OutputPin> > outputPins = action->getOutput();&#xA;    &#x9;for(std::shared_ptr&lt;uml::OutputPin> pin : *outputPins)&#xA;    &#x9;{&#xA;    &#x9;&#x9;if(pin!=nullptr)&#xA;            {&#xA;    &#x9;&#x9;&#x9;outputPinNodes->push_back(pin);&#xA;            }&#xA;    &#x9;&#x9;else&#xA;    &#x9;&#x9;{&#xA;    &#x9;&#x9;&#x9;DEBUG_WARNING(&quot;An output pin was nullptr!&quot;)&#xA;    &#x9;&#x9;}&#xA;    &#x9;}&#xA;    }&#xA;&#xA;    auto group = this->getGroup().lock();&#xA;    if(group )&#xA;    {&#xA;    &#x9;group->createNodeActivations(inputPinNodes);&#xA;&#xA;&#x9;&#x9;for(std::shared_ptr&lt;uml::ActivityNode> node : *inputPinNodes)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this->addPinActivation(std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::PinActivation> (group->getNodeActivation(node)));&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;group->createNodeActivations(outputPinNodes);&#xA;&#xA;&#x9;&#x9;for(std::shared_ptr&lt;uml::ActivityNode> node : *outputPinNodes)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this->addPinActivation(std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::PinActivation> (group->getNodeActivation(node)));&#xA;&#x9;&#x9;}&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addOutgoingEdge" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;/* If there are no outgoing activity edge instances, create a single activity edge instance with a fork node execution at the other end.&#xA;&#x9;   Add the give edge to the fork node execution that is the target of the activity edge instance out of this action execution.&#xA;&#x9;   [This assumes that all edges directly outgoing from the action are control flows, with an implicit fork for offers out of the action.]&#xA;&#x9; */&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> forkNodeActivation;&#xA;&#xA;    if (this->getOutgoingEdges()->empty()) &#xA;    {&#xA;    &#x9;//Create anonymousFork with no reference to model node&#xA;&#xA;&#x9;&#x9;forkNodeActivation = std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ActivityNodeActivation>(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createForkNodeActivation());&#xA;&#x9;&#x9;// copy from ActivityNodeActivationGroupImpl::createNodeActivation&#xA;&#xA;&#x9;&#x9;// activation->setNode(node); anonymous Fork doesn't has a Node&#xA;&#x9;&#x9;forkNodeActivation->setRunning(false);&#xA;&#x9;&#x9;this->getGroup().lock()->addNodeActivation(forkNodeActivation);&#xA;&#x9;&#x9;forkNodeActivation->createNodeActivations();&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> newEdge(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityEdgeInstance());&#xA;&#x9;&#x9;fUML::Semantics::Activities::ActivityNodeActivationImpl::addOutgoingEdge(newEdge);&#xA;&#x9;&#x9;forkNodeActivation->addIncomingEdge(newEdge);&#xA;&#x9;&#x9;edge->setSource(forkNodeActivation);&#xA;    } &#xA;    else &#xA;    {&#xA;        forkNodeActivation = this->getOutgoingEdges()->front()->getTarget().lock();&#xA;    }&#xA;    &#xA;    forkNodeActivation->addOutgoingEdge(edge);"/>
          </eAnnotations>
          <eParameters name="edge" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eOperations name="isSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;    bool isSource = false;&#xD;&#xA;    if (this->getOutgoingEdges()->size() > 0)&#xD;&#xA;    {&#xD;&#xA;    &#x9;auto target=this->getOutgoingEdges()->at(0)->getTarget().lock();&#xD;&#xA;    &#x9;if(target)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;isSource = target->isSourceFor(edgeInstance);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isSource;"/>
          </eAnnotations>
          <eParameters name="edgeInstance" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="pinActivation" ordered="false"
            upperBound="-1" eType="#//Semantics/Actions/PinActivation" eOpposite="#//Semantics/Actions/PinActivation/actionActivation">
          <eAnnotations source="union"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="firing" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="false"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="inputPinActivation"
            ordered="false" upperBound="-1" eType="#//Semantics/Actions/InputPinActivation">
          <eAnnotations source="subsets" references="#//Semantics/Actions/ActionActivation/pinActivation"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="outputPinActivation"
            ordered="false" upperBound="-1" eType="#//Semantics/Actions/OutputPinActivation">
          <eAnnotations source="subsets" references="#//Semantics/Actions/ActionActivation/pinActivation"/>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="action" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Action">
          <eAnnotations source="redefines" references="#//Semantics/Activities/ActivityNodeActivation/node"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AddStructuralFeatureValueActionActivation"
          eSuperTypes="#//Semantics/Actions/WriteStructuralFeatureActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ChoiceStrategy.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/AddStructuralFeatureValueAction.hpp&quot;&#xA;#include &quot;uml/Property.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get the values of the object and value input pins.&#xA;&#x9;// If the given feature is an association end, then create a link between the object and value inputs.&#xA;&#x9;// Otherwise, if the object input is a structural value, then add a value to the values for the feature.&#xA;&#x9;// If isReplaceAll is true, first remove all current matching links or feature values.&#xA;&#x9;// If isReplaceAll is false and there is an insertAt pin, insert the value at the appropriate position.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::AddStructuralFeatureValueAction> action = this->getAddStructuralFeatureValueAction();&#xA;&#x9;std::shared_ptr&lt;uml::StructuralFeature> feature = action->getStructuralFeature();&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property>(feature);&#xA;&#xA;&#x9;if(!property)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;std::shared_ptr&lt;uml::Association> association = this->getAssociation(feature);&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> value = nullptr;&#xA;&#xA;&#x9;/* MDE4CPP specific implementation for handling &quot;self&quot;-Pin */&#xA;&#x9;std::string objectPinName = action->getObject()->getName();&#xA;&#x9;if((objectPinName.empty()) || (objectPinName.find(&quot;self&quot;) == 0)){&#xA;&#x9;&#x9;//value is set to the context of the current activity execution&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = this->getActivityExecution()->getContext();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;value = eUMLAny(context, context->getMetaElementID());&#xA;&#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;value = this->takeTokens(action->getObject())->at(0);&#xA;&#x9;}&#xA;&#x9;/*--------------------------------------------------------*/&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Any>> inputValues = takeTokens(action->getValue());&#xA;&#xA;&#x9;// NOTE: Multiplicity of the value input pin is required to be 1..1.&#xA;&#x9;std::shared_ptr&lt;Any> inputValue = inputValues->at(0);&#xA;&#xA;&#x9;int insertAt = -1;&#xA;&#x9;if (action->getInsertAt() != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Any> insertValue = takeTokens(action->getInsertAt())->at(0);&#xA;&#x9;&#x9;insertAt = insertValue->get&lt;int>();&#xA;&#x9;}&#xA;&#xA;&#x9;/*&#xA;&#x9; * Currently not supported&#xA;&#x9;if(association != nullptr) &#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::StructuredClassifiers::Link>> links = this->getMatchingLinks(association, feature, value);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Property> oppositeEnd = this->getOppositeEnd(association, feature);&#xA;&#x9;&#x9;int position = 0;&#xA;&#x9;&#x9;if(oppositeEnd->getIsOrdered()) {&#xA;&#x9;&#x9;&#x9;position = this->getMatchingLinks(association, oppositeEnd, inputValue)->size() + 1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (action->getIsReplaceAll()){&#xA;&#x9;&#x9;&#x9;for(int unsigned i = 0; i &lt; links->size(); i++) {&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Link> link = links->at(i);&#xA;&#x9;&#x9;&#x9;&#x9;link->destroy();&#xA;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else if(feature->getIsUnique())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;unsigned int i = 1;&#xA;&#x9;&#x9;&#x9;bool destroyed = false;&#xA;&#x9;&#x9;&#x9;while(!destroyed &amp;&amp; i &lt;= links->size()){&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Link> link = links->at(i-1);&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue = link->retrieveFeatureValue(feature);&#xA;&#x9;&#x9;&#x9;&#x9;if(featureValue->getValues()->at(0)->equals(inputValue))&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;position = link->retrieveFeatureValue(oppositeEnd)->getPosition();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;link->destroy();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;destroyed = true;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;i++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Link> newLink = fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createLink();&#xA;&#x9;&#x9;newLink->setType(association);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newLink->assignFeatureValue(feature, inputValues, insertAt);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> oppositeValues(new Bag&lt;fUML::Semantics::Values::Value>());&#xA;&#x9;&#x9;oppositeValues->add(value);&#xA;&#x9;&#x9;newLink->assignFeatureValue(oppositeEnd, oppositeValues, position);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;newLink->getLocus()->add(newLink);&#xA;&#x9;}&#xA;&#x9;else */&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> structuredValue = nullptr;&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlValue = std::dynamic_pointer_cast&lt;uml::UMLAny>(value);&#xA;&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;structuredValue = umlValue->getAsElement();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;if (structuredValue)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if(action->getIsReplaceAll())&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;structuredValue->unset(property);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;int upperOfFeature = feature->getUpper();&#xA;&#x9;&#x9;&#x9;&#x9;if(upperOfFeature == 1)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// If upperOfFeature = 1, then feature is a &quot;simple&quot; feature&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;// insertAt as well as isUnique do not apply here, since the current value will be overwritten anyway&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;structuredValue->set(property, inputValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;//If upperOfFeature &lt;> 1, then feature is a container&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> featureValue = structuredValue->get(property);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(featureValue &amp;&amp; featureValue->isContainer())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/* &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9; * Currently not supported&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int sizeOfFeatureValue = (std::dynamic_pointer_cast&lt;AnyEObjectBag>(featureValue))->getBag()->size();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(sizeOfFeatureValue > 0 &amp;&amp; insertAt == 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;insertAt = (std::dynamic_pointer_cast&lt;fUML::Semantics::Loci::ChoiceStrategy>(this->getExecutionLocus()->getFactory()->getStrategy(&quot;choice&quot;)))->choose(sizeOfFeatureValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;*/ &#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;//Note: uniqueness of feature is handled by the add() method of structuredValue&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(insertAt &lt;= 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;// Note: insertAt = -1 indicates an unlimited value of &quot;*&quot;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;structuredValue->add(property, inputValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;structuredValue->add(property, inputValue, (insertAt - 1));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Retrieved feature value does not match it's feature's multiplicity! Failed to add feature value!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Context is nullptr! Failed to add feature value!&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element! Failed to add feature value!&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;if(action->getResult() != nullptr) &#xA;&#x9;{&#xA;&#x9;&#x9;this->putToken(action->getResult(), value);&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="addStructuralFeatureValueAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//AddStructuralFeatureValueAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallActionActivation" abstract="true"
          eSuperTypes="#//Semantics/Actions/InvocationActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/Execution.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/CallAction.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/Property.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getCallExecution" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    //TODO verify!&#xD;&#xA;    return this->m_callExecutions->front();"/>
            <details key="doNotGenerate" value="Operation 'getCallExecution' is excluded from generation because class 'Execution' is excluded from generation (see class CommonBehavior::Execution)."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="removeCallExecution" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    bool notFound = true;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (notFound &amp;&amp; (i &lt; this->getCallExecutions()->size())) {&#xD;&#xA;        if (this->getCallExecutions()->at(i) == execution) {&#xD;&#xA;            this->getCallExecutions()->erase(this->getCallExecutions()->begin() + i);&#xD;&#xA;            notFound = false;&#xD;&#xA;        }&#xD;&#xA;    }"/>
            <details key="doNotGenerate" value="Operation 'removeCallExecution' is excluded from generation because class 'Execution' is excluded from generation (see class CommonBehavior::Execution)"/>
          </eAnnotations>
          <eParameters name="execution" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution"/>
        </eOperations>
        <eOperations name="doAction" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::CallAction> callAction = this->getCallAction();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin>> argumentPins = callAction->getArgument();&#xA;&#x9;std::shared_ptr&lt;Subset&lt;fUML::Semantics::Actions::InputPinActivation, fUML::Semantics::Actions::PinActivation>> inputActivationList = this->getInputPinActivation();&#xA;&#xA;&#x9;unsigned int inputPinNumber = 0;&#xA;&#x9;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Parameter>> parameterList = this->retrieveCallParameters();&#xA;&#x9;unsigned int size = parameterList->size();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> inputParameterValues(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#x9;&#xA;&#x9;for (unsigned int i=0; i&lt;size; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Parameter> parameter = parameterList->at(i);&#xA;&#x9;&#x9;uml::ParameterDirectionKind direction = parameter->getDirection();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (direction == uml::ParameterDirectionKind::IN || direction == uml::ParameterDirectionKind::INOUT)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue();&#xA;&#x9;&#x9;&#x9;parameterValue->setParameter(parameter);&#xA;&#xA;&#x9;&#x9;&#x9;// get corresponding pin (pin and parameter list should be synchronized)&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> correspondingInputpin = argumentPins->at(i);&#xA;&#x9;&#x9;&#x9;std::string pinName = correspondingInputpin->getName();&#xA;&#xA;&#x9;&#x9;&#x9;// if pin name starts with 'self', get values from context attribute&#xA;&#x9;&#x9;&#x9;if (pinName.find(&quot;self.&quot;) == 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::string attributeName = pinName.substr (5, std::string::npos);&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Changing execution context to self.&quot; &lt;&lt; attributeName &lt;&lt; &quot;.&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = this->getExecutionContext();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> attribute = nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> contextImmediateType = context->getMetaClass();&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier>> contextTypes = contextImmediateType->allParents();&#xA;&#x9;&#x9;&#x9;&#x9;contextTypes->insert(contextTypes->begin(), contextImmediateType);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Classifier>::iterator contextTypesIter = contextTypes->begin();&#xA;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Classifier>::iterator contextTypesEnd = contextTypes->end();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while (attribute == nullptr || contextTypesIter &lt; contextTypesEnd)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> classifier = *contextTypesIter;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;contextTypesIter++;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Property>> attributes = classifier->getAllAttributes();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Property>::iterator attributeIter = attributes->begin();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Property>::iterator attributeEnd = attributes->end();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (attribute == nullptr || attributeIter &lt; attributeEnd)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((*attributeIter)->getName() == attributeName)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = *attributeIter;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributeIter++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(attribute == nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;Could not find the attribute in the current context for input pin '&quot; &lt;&lt; pinName &lt;&lt; &quot;'.&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit(EXIT_FAILURE);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Found context attribute self.&quot;&lt;&lt; attributeName &lt;&lt; &quot; for target pin.&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (context != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> attributeValue = context->get(attribute);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->add(attributeValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;// if pin name starts with 'self', use context as value&#xA;&#x9;&#x9;&#x9;else if (pinName.find(&quot;self&quot;) == 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = getExecutionContext();&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> contextValue = eUMLAny(context, context->getMetaElementID());&#xA;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->add(contextValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::InputPinActivation> activation =inputActivationList->at(inputPinNumber);&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokenList = activation->takeUnofferedTokens();&#xA;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token : *tokenList)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> value = token->getValue();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(value != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Target: &quot;&lt;&lt;value->toString() &lt;&lt; &quot;.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->add(value);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;inputParameterValues->add(parameterValue);&#xA;&#x9;&#x9;&#x9;inputPinNumber++;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> outputParameterValues = this->doCall(inputParameterValues);&#xA;&#x9;&#xA;&#x9;if(outputParameterValues)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::OutputPin>> resultPins = callAction->getResult();&#xA;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;fUML::Semantics::Actions::OutputPinActivation, fUML::Semantics::Actions::PinActivation>> outputActivationList=this->getOutputPinActivation();&#xA;&#x9;&#x9;unsigned int outputPinNumber = 0;&#xA;&#x9;&#x9;for (std::shared_ptr&lt;uml::Parameter> parameter : *parameterList)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (!(parameter->getDirection() == uml::ParameterDirectionKind::IN))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;for (std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> outputParameterValue : *outputParameterValues)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (outputParameterValue->getParameter() == parameter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::OutputPinActivation> resultPinActivation = outputActivationList->at(outputPinNumber);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;Any>> values = outputParameterValue->getValues();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (std::shared_ptr&lt;Any> value : *values)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Creating outgoing ObjectToken for CallAction '&quot; &lt;&lt; callAction ->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> token = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createObjectToken();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;token->setValue(value);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resultPinActivation->addToken(token);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;ACT_DEBUG(std::cout&lt;&lt;&quot;SET_TOKEN;NODE:&quot;&lt;&lt; resultPinActivation->getNode()->getQualifiedName() &lt;&lt;&quot;;TOKEN:&quot;&lt;&lt;token->getValue() &lt;&lt; &quot;;CURRENT_TOKENS:&quot;&lt;&lt; (this->getHeldTokens()->size()+1) &lt;&lt;&quot;;DIRECTION:add&quot;&lt;&lt;std::endl;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputPinNumber++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_ERROR(&quot;Output parameter values were NULL for CallAction '&quot; &lt;&lt; callAction ->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="/* Property CallActionActivation::callExecutions do not exist anymore&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::Execution> > executionList = this->getCallExecutions();&#xA;&#x9;for (std::shared_ptr&lt;fUML::Semantics::CommonBehavior::Execution>  execution: *executionList)&#xA;&#x9;{&#xA;&#x9;&#x9;execution->terminate();&#xA;&#x9;}&#xA;&#x9;*/&#xA;&#xA;&#x9;fUML::Semantics::Actions::InvocationActionActivationImpl::terminate();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveCallParameters" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="const"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doCall" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eParameters name="inputParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="callExecutions" ordered="false"
            upperBound="-1" eType="#//Semantics/CommonBehavior/Execution" containment="true">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="doNotGenerate" value="Property 'callExecutions' is excluded from generation because execution of CallActionActivations are handled differently in this fUML implementation (see specializations of CallActionActivation)."/>
          </eAnnotations>
          <eAnnotations source="http://tu-ilmenau.de/see/modelChange">
            <details value="CallActionActivation::callExecutions is not required anymore and thus not generated."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="callAction" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//CallAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallBehaviorActionActivation" eSuperTypes="#//Semantics/Actions/CallActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Loci/Executor.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/CallBehaviorAction.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getCallExecution" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::CallBehaviorAction> callBehaviorAction = this->getCallBehaviorAction();&#xA;    if(callBehaviorAction != nullptr)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::Behavior> behavior = callBehaviorAction->getBehavior();&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object> context = nullptr;&#xA;&#xA;        if(behavior!=nullptr)&#xA;        {&#xA;            if (behavior->getContext()!= nullptr) &#xA;            {&#xA;                DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[getCallExecution] behavior context = &quot; &lt;&lt; behavior->getContext()->getName()&lt;&lt;std::endl;)&#xA;                context = this->getExecutionContext();&#xA;            }&#xA;            return this->getExecutionLocus()->getFactory()->createExecution(behavior,context);&#xA;        }&#xA;    }&#xA;    return nullptr;"/>
            <details key="doNotGenerate" value="Operation 'getCallExecution' is excluded from generation because execution of CallBehaviorActionActivations are handled without Executions in this fUML implementation.&#xA;Behaviors are executed by model-specific Executor classes using operation Loci::Executor::execute. OpaqueBehaviors are executed by invoking respective generated C++ operations.&#xA;Activities are executed using model-specific execution prototypes."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveBehavior" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="const"/>
            <details key="body" value="return this->getCallBehaviorAction()->getBehavior();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doCall" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::Behavior> behavior = this->retrieveBehavior();&#xA;&#xA;&#x9;if(behavior != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = nullptr;&#xA;&#x9;&#x9;if(behavior->getContext() != nullptr)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Behavior context is '&quot; &lt;&lt; behavior->getContext()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#x9;&#x9;&#x9;context = this->getExecutionContext();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;return this->getExecutionLocus()->getExecutor()->execute(behavior, context, inputParameterValues);&#xA;&#x9;}&#xA;&#x9;return nullptr;&#xA;"/>
          </eAnnotations>
          <eParameters name="inputParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="retrieveCallParameters" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="const"/>
            <details key="body" value="return this->retrieveBehavior()->getOwnedParameter();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="callBehaviorAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//CallBehaviorAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/CallActionActivation/callAction"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CallOperationActionActivation" eSuperTypes="#//Semantics/Actions/CallActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/Execution.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/UMLContainerAny.hpp&quot;&#xA;#include &quot;uml/CallOperationAction.hpp&quot;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/Property.hpp&quot;&#xA;#include &quot;uml/Operation.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getCallExecution" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::Execution> execution = nullptr;&#xA;&#x9;std::shared_ptr&lt;uml::CallOperationAction> action = this->getCallOperationAction();&#xA;&#x9;if(action != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;//Pin name&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> targetPin = action->getTarget();&#xA;&#x9;&#x9;std::string name = targetPin->getName();&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Values::Value> target = nullptr;&#xA;&#x9;&#x9;std::string attributeName = &quot;&quot;;&#xA;&#xA;&#x9;&#x9;if(name.empty() || name.find(&quot;self&quot;) == 0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object> context = this->getActivityExecution()->getContext();&#xA;&#x9;&#x9;&#x9;if(name.find(&quot;self.&quot;) == 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;attributeName = name.substr (5, std::string::npos);&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout &lt;&lt; &quot;change context to &quot; &lt;&lt; attributeName &lt;&lt; std::endl;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> attribute = nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier>> contextTypes = context->getTypes();&#xA;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Classifier>::iterator contextTypesIter = contextTypes->begin();&#xA;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Classifier>::iterator contextTypesEnd = contextTypes->end();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while (attribute == nullptr || contextTypesIter &lt; contextTypesEnd)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> classifier = *contextTypesIter;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;contextTypesIter++;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Property>> attributes = classifier->getAllAttributes();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Property>::iterator attributeIter = attributes->begin();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Property>::iterator attributeEnd = attributes->end();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (attribute == nullptr || attributeIter &lt; attributeEnd)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((*attributeIter)->getName() == attributeName)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = *attributeIter;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributeIter++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr == attribute)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;Could not find the attribute in the current context for the target pin &quot; &lt;&lt; attributeName &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit(EXIT_FAILURE);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout &lt;&lt; &quot;Self attribute found for target pin&quot; &lt;&lt;std::endl;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (context != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues(new Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> attributeValues = context->getValues(attribute, featureValues);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (attributeValues->size() > 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;context = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Reference>(attributeValues->front())->getReferent();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_MESSAGE(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (context != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;found object for &quot; &lt;&lt; context->getTypes()->front()->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#xA;&#x9;&#x9;&#x9;if(nullptr != context)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;execution = context->dispatch(action->getOperation());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> t = action->getTarget();&#xA;&#x9;&#x9;&#x9;if(nullptr==t)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] Target is null&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pa = this->retrievePinActivation(t);&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr==pa)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] PinActivation is null&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > unofferedTokens = pa->getUnofferedTokens();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr == unofferedTokens)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] UnofferedTokens are null&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> firstToken = unofferedTokens->at(unofferedTokens->size()-1);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr==firstToken)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] FirstToken is null&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;target  = firstToken->getValue();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;if(target)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Reference> ref = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Reference>(target);&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr != ref)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;execution = ref->dispatch(action->getOperation());&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return execution;"/>
            <details key="doNotGenerate" value="Operation 'getCallExecution' is excluded from generation because execution of CallOperationActionActivations are handled without Executions in this fUML implementation.&#xA;Operations are executed via reflective method uml::Element::invoke."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveBehavior" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="const"/>
            <details key="body" value="std::shared_ptr&lt;uml::Behavior> method = nullptr;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Behavior>> methods = this->getCallOperationAction()->getOperation()->getMethod();&#xA;&#x9;if(!(methods->empty()))&#xA;&#x9;{&#xA;&#x9;&#x9;method = methods->front();&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return method;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doCall" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::CallOperationAction> action = this->getCallOperationAction();&#xA;&#x9;if(action != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Operation> operation = action->getOperation();&#xA;&#x9;&#x9;if(!operation)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Operation is nullptr! Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> targetPin = action->getTarget();&#xA;&#x9;&#x9;if(!targetPin)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Target is nullptr! Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = nullptr;&#xA;&#x9;&#x9;std::string targetPinName = targetPin->getName();&#xA;&#xA;&#x9;&#x9;/* MDE4CPP specific implementation for handling &quot;self&quot;-Pin */&#xA;&#x9;&#x9;if(targetPinName.empty() || targetPinName.find(&quot;self&quot;) == 0)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;context = this->getExecutionContext();&#xA;&#x9;&#x9;&#x9;if(targetPinName.find(&quot;self.&quot;) == 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::string attributeName = targetPinName.substr (5, std::string::npos);&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Changing execution context to self.&quot; &lt;&lt; attributeName &lt;&lt; &quot;.&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> attribute = nullptr;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> contextImmediateType = context->getMetaClass();&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier>> contextTypes = contextImmediateType->allParents();&#xA;&#x9;&#x9;&#x9;&#x9;contextTypes->insert(contextTypes->begin(), contextImmediateType);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Classifier>::iterator contextTypesIter = contextTypes->begin();&#xA;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Classifier>::iterator contextTypesEnd = contextTypes->end();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;while (attribute == nullptr || contextTypesIter &lt; contextTypesEnd)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> classifier = *contextTypesIter;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;contextTypesIter++;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Property>> attributes = classifier->getAllAttributes();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Property>::iterator attributeIter = attributes->begin();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Bag&lt;uml::Property>::iterator attributeEnd = attributes->end();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;while (attribute == nullptr || attributeIter &lt; attributeEnd)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if ((*attributeIter)->getName() == attributeName)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attribute = *attributeIter;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;attributeIter++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr == attribute)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;Could not find the attribute in the current context for input pin '&quot; &lt;&lt; targetPinName &lt;&lt; &quot;'.&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;exit(EXIT_FAILURE);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Found context attribute self.&quot;&lt;&lt; attributeName &lt;&lt; &quot; for target pin.&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (context != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> attributeValue = context->get(attribute);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(attributeValue->isContainer())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::UMLContainerAny> umlContainerAny = std::dynamic_pointer_cast&lt;uml::UMLContainerAny>(attributeValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Element>> elements = umlContainerAny->getAsElementContainer();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(elements->size() > 0)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;context = elements->front();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*DEBUG_INFO&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (context != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;found object for &quot; &lt;&lt; context->getTypes()->front()->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;} //getTypes currently not supported&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)*/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element. Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlAny = std::dynamic_pointer_cast&lt;uml::UMLAny>(attributeValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;context = umlAny->getAsElement();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;/*DEBUG_INFO&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;(&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (context != nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;found object for &quot; &lt;&lt; context->getTypes()->front()->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}//getTypes currently not supported&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;)*/&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element. Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;/*--------------------------------------------------------*/&#xA;&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> targetPinActivation = this->retrievePinActivation(targetPin);&#xA;&#x9;&#x9;&#x9;if(targetPinActivation == nullptr)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;PinActivation for target is nullptr! Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > unofferedTokens = targetPinActivation->getUnofferedTokens();&#xA;&#x9;&#x9;&#x9;if(unofferedTokens == nullptr)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Unoffered tokens is nullptr! Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> firstToken = unofferedTokens->at(unofferedTokens->size()-1);&#xA;&#x9;&#x9;&#x9;if(firstToken == nullptr)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;First token is nullptr! Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> target = firstToken->getValue();&#xA;&#xA;&#x9;&#x9;&#x9;if(target)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlAny = std::dynamic_pointer_cast&lt;uml::UMLAny>(target);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;context = umlAny->getAsElement();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element. Failed to call operation!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(!context)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Context is nullptr! Failed to call operation!&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;Any>> inputArguments(new Bag&lt;Any>());&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> inputParameterValue : *inputParameterValues)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;//Only first value as lists are handled by a single instance of Any&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> argument = inputParameterValue->getValues()->at(0);&#xA;&#x9;&#x9;&#x9;&#x9;inputArguments->add(argument);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;// Do the actual call&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;Any>> outputArguments(new Bag&lt;Any>());&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> returnValue = context->invoke(operation, inputArguments, outputArguments);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> outputParameterValues(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Parameter>> parametersOfBehavior = this->retrieveBehavior()->getOwnedParameter();&#xA;&#x9;&#x9;&#x9;bool foundFirstReturnParameter = false;&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;uml::Parameter> aParameter : *parametersOfBehavior)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;unsigned int parameterCounter = 0;&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;if(aParameter->getDirection() == uml::ParameterDirectionKind::INOUT || aParameter->getDirection() == uml::ParameterDirectionKind::OUT)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> outputParameterValue = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputParameterValue->setParameter(aParameter);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputParameterValue->getValues()->add(outputArguments->at(parameterCounter));&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;outputParameterValues->add(outputParameterValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else if(aParameter->getDirection() == uml::ParameterDirectionKind::RETURN)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(!foundFirstReturnParameter)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(!returnValue->isEmpty())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> returnParameterValue = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnParameterValue->setParameter(aParameter);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;returnParameterValue->getValues()->add(returnValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;outputParameterValues->add(returnParameterValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;foundFirstReturnParameter = true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;parameterCounter++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;return outputParameterValues;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return nullptr;"/>
          </eAnnotations>
          <eParameters name="inputParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="retrieveCallParameters" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="const"/>
            <details key="body" value="std::shared_ptr&lt;uml::Behavior> behavior = this->retrieveBehavior();&#xA;&#xA;if(!behavior)&#xA;{&#xA;&#x9;return this->getCallOperationAction()->getOperation()->getOwnedParameter();&#xA;}&#xA;&#xA;return behavior->getOwnedParameter();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="callOperationAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//CallOperationAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/CallActionActivation/callAction"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClauseActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ClauseActivation' is excluded from generation because ConditionalNodes are currently not supported."/>
        </eAnnotations>
        <eOperations name="recieveControl" ordered="false" lowerBound="1"/>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
        <eOperations name="runTest" ordered="false" lowerBound="1"/>
        <eOperations name="selectBody" ordered="false" lowerBound="1"/>
        <eOperations name="getDecision" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
        <eOperations name="getPredecessors" ordered="false" upperBound="-1" eType="#//Semantics/Actions/ClauseActivation"/>
        <eOperations name="getSuccessors" ordered="false" upperBound="-1" eType="#//Semantics/Actions/ClauseActivation"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clause" ordered="false"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="conditionalNodeActivation"
            ordered="false" lowerBound="1" eType="#//Semantics/Actions/ConditionalNodeActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClearAssociationActionActivation"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ClearAssociationActionActivation' is excluded from generation because actions concering Links are currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClearStructuralFeatureActionActivation"
          eSuperTypes="#//Semantics/Actions/StructuralFeatureActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/ClearStructuralFeatureAction.hpp&quot;&#xA;#include &quot;uml/Property.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ClearStructuralFeatureAction> action = this->getClearStructuralFeatureAction();&#xA;&#x9;std::shared_ptr&lt;uml::StructuralFeature> feature = action->getStructuralFeature();&#xA;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property>(feature);&#xA;&#xA;&#x9;if(!property)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> objectValue = nullptr;&#xA;&#x9;&#xA;&#x9;/* MDE4CPP specific implementation for handling &quot;self&quot;-Pin */&#xA;&#x9;std::string objectPinName = action->getObject()->getName();&#xA;&#x9;if((objectPinName.empty()) || (objectPinName.find(&quot;self&quot;) == 0)){&#xA;&#x9;&#x9;//objectValue is set to the context of the current activity execution&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = this->getActivityExecution()->getContext();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;objectValue = eUMLAny(context, context->getMetaElementID());&#xA;&#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;objectValue = this->takeTokens(action->getObject())->at(0);&#xA;&#x9;}&#xA;&#x9;/*--------------------------------------------------------*/&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::Element> structuredValue = nullptr;&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlAny = std::dynamic_pointer_cast&lt;uml::UMLAny>(objectValue);&#xA;&#xA;&#x9;&#x9;structuredValue = umlAny->getAsElement();&#xA;&#xA;&#x9;&#x9;if (structuredValue)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;structuredValue->unset(property);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Context is nullptr! Failed to clear feature!&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch(...)&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element! Failed to clear feature!&quot;)&#xA;&#x9;}&#xA;&#xA;&#x9;putToken(action->getResult(), objectValue);"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clearStructuralFeatureAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ClearStructuralFeatureAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ConditionalNodeActivation" eSuperTypes="#//Semantics/Actions/StructuredActivityNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ConditionalNodeActivation' is excluded from generation because ConditionalNodes are currently not supported."/>
        </eAnnotations>
        <eOperations name="getClauseActivation" ordered="false" lowerBound="1" eType="#//Semantics/Actions/ClauseActivation">
          <eParameters name="clause" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
        </eOperations>
        <eOperations name="runTest" ordered="false" lowerBound="1">
          <eParameters name="clause" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
        </eOperations>
        <eOperations name="selectBody" ordered="false" lowerBound="1">
          <eParameters name="clause" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="clauseActivations"
            ordered="false" upperBound="-1" eType="#//Semantics/Actions/ClauseActivation"
            containment="true"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="selectedClauses" ordered="false"
            upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CreateLinkActionActivation" eSuperTypes="#//Semantics/Actions/WriteLinkActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'CreateLinkActionActivation' is excluded from generation because actions concering Links are currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CreateObjectActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/CreateObjectAction.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create an object with the given classifier (which must be a class) as its type, at the same locus as the action activation.&#xA;// Place a reference to the object on the result pin of the action.&#xA;&#xA;std::shared_ptr&lt;uml::CreateObjectAction> action = this->getCreateObjectAction();&#xA;&#xA;if(action)&#xA;{&#xA;&#x9;std::shared_ptr&lt;uml::Class> type= std::dynamic_pointer_cast&lt;uml::Class> (action->getClassifier());&#xA;&#xA;&#x9;if(type)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> newObject = this->getExecutionLocus()->instantiate(type);&#xA;&#xA;&#x9;&#x9;if(newObject)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> value = eUMLAny(newObject, newObject->getMetaElementID());&#xA;&#x9;&#x9;&#x9;this->putToken(action->getResult(), value);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;Can't instantiate object&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;throw &quot;Unexpected invalid Classifier&quot;;&#xA;&#x9;}&#xA;}&#xA;else&#xA;{&#xA;&#x9;throw &quot;Unexpected invalid CreateObjectAction&quot;;&#xA;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="createObjectAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//CreateObjectAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DestroyLinkActionActivation" eSuperTypes="#//Semantics/Actions/WriteLinkActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'DestroyLinkActionActivation' is excluded from generation because actions concering Links are currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DestroyObjectActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/Property.hpp&quot;&#xA;#include &quot;uml/DestroyObjectAction.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;//#include &quot;fUML/Semantics/SimpleClassifiers/FeatureValue.hpp&quot;&#xA;"/>
        </eAnnotations>
        <eOperations name="destroyObject" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// If the given value contains an uml::Element, then destroy the contained object, per the given destroy action attribute values.&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> object = value->get&lt;std::shared_ptr&lt;uml::Element>>();&#xA;&#xA;&#x9;&#x9;if (isDestroyLinks || isDestroyOwnedObjects)&#xA;&#x9;&#x9;{&#x9;&#xA;&#x9;&#x9;&#x9;/*Currently not supported&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue> > extensionalValues = this->getExecutionLocus()->getExtensionalValues();&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue> extensionalValue : *extensionalValues)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Link> link = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Link> (extensionalValue);&#xA;&#x9;&#x9;&#x9;&#x9;if (link)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (this->valueParticipatesInLink(reference, link))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isDestroyLinks | this->objectIsComposite(reference, link))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;link->destroy();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (isDestroyOwnedObjects)&#xA;&#x9;&#x9;{&#x9;&#xA;&#x9;&#x9;&#x9;/*Currently not supported&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> > objectFeatureValues = reference->retrieveFeatureValues();&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue : *objectFeatureValues)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property> (featureValue->getFeature());&#xA;&#x9;&#x9;&#x9;&#x9;if(property)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (property->getAggregation() == uml::AggregationKind::COMPOSITE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> values = featureValue->getValues();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Values::Value> ownedValue : *values)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this->destroyObject(ownedValue, isDestroyLinks, isDestroyOwnedObjects);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;object->destroy();&#xA;&#x9;}&#xA;&#x9;catch(...)&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_ERROR(&quot;Provided object is not an instance of uml::Element! Failed to destroy object!&quot;)&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="isDestroyLinks" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
          <eParameters name="isDestroyOwnedObjects" ordered="false" lowerBound="1"
              eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
        </eOperations>
        <eOperations name="objectIsComposite" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;// Test whether the given reference participates in the given link as a composite.&#xA;&#x9;/*Currently not supported&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::SimpleClassifiers::FeatureValue>> linkFeatureValues = link->getFeatureValues();&#xA;&#x9;for(std::shared_ptr&lt;fUML::Semantics::SimpleClassifiers::FeatureValue> featureValue : *linkFeatureValues)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> values= featureValue->getValues();&#xA;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Values::Value> value : *values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;value->equals(reference);&#xA;&#xA;&#x9;&#x9;&#x9;if(!(value->equals(reference)))&#xA;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property> (featureValue->getFeature());&#xA;&#x9;&#x9;&#x9;&#x9;if(property)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (property->getAggregation() == uml::AggregationKind::COMPOSITE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;*/&#xA;&#x9;return false;"/>
          </eAnnotations>
          <eParameters name="reference" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="link" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;//generated from body annotation&#xA;&#x9;&#x9;// Get the value on the target input pin.&#xA;&#x9;// If the value is not a reference, then the action has no effect. Otherwise, do the following.&#xA;&#x9;// If isDestroyLinks is true, destroy all links in which the referent participates.&#xA;&#x9;// If isDestroyOwnedObjects is true, destroy all objects owned by the referent via composition links.&#xA;&#x9;// Destroy the referent object.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::DestroyObjectAction> action = this->getDestroyObjectAction();&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> destroyTarget=action->getTarget();&#xA;&#x9;&#x9;if(destroyTarget)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;Any>> tokens = this->takeTokens(destroyTarget);&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;Any> value : *tokens)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this->destroyObject(value, action->getIsDestroyLinks(), action->getIsDestroyOwnedObjects());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;invalid target pin&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="destroyObjectAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//DestroyObjectAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExpansionActivationGroup" eSuperTypes="#//Semantics/Activities/ActivityNodeActivationGroup">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/ExpansionNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getActivityExecution" lowerBound="1" eType="#//Semantics/Activities/ActivityExecution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return m_regionActivation->getActivityExecution();"/>
            <details key="const"/>
            <details key="returnWeakPtr"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = nullptr;&#xA;&#x9;Bag&lt;fUML::Semantics::Actions::OutputPinActivation>::iterator pinIter = m_regionInputs->begin();&#xA;&#x9;Bag&lt;fUML::Semantics::Actions::OutputPinActivation>::iterator pinEnd = m_regionInputs->end();&#xA;&#x9;while ((!activation) and (pinIter != pinEnd))&#xA;&#x9;{&#xA;       &#x9;activation =(*pinIter)->getNodeActivation(node);&#xA;       &#x9;pinIter++;&#xA;&#x9;}&#xA;&#xA;&#x9;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>::iterator iter = m_groupInputs->begin();&#xA;&#x9;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>::iterator end = m_groupInputs->end();&#xA;&#xA;&#x9;iter = m_groupInputs->begin();&#xA;&#x9;end = m_groupInputs->end();&#xA;&#x9;while ((!activation) and (iter != end))&#xA;&#x9;{&#xA;&#x9;&#x9;activation =(*iter)->getNodeActivation(node);&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#xA;&#x9;iter = m_groupOutputs->begin();&#xA;&#x9;end = m_groupOutputs->end();&#xA;&#x9;while ((!activation) and (iter != end))&#xA;&#x9;{&#xA;&#x9;&#x9;activation =(*iter)->getNodeActivation(node);&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#xA;&#x9;if (activation == nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;return ActivityNodeActivationGroupImpl::getNodeActivation(node);&#xA;&#x9;}&#xA;&#xA;&#x9;return activation;"/>
          </eAnnotations>
          <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="resume">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="ActivityNodeActivationGroupImpl::resume(activation);&#xA;&#x9;if (isSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;m_regionActivation->resume(getThisExpansionActivationGroupPtr());&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="activation" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="suspend">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (!isSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;m_regionActivation->suspend();&#xA;&#x9;}&#xA;&#x9;ActivityNodeActivationGroupImpl::suspend(activation);"/>
          </eAnnotations>
          <eParameters name="activation" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="groupInputs" upperBound="-1"
            eType="#//Semantics/Actions/ExpansionNodeActivation"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="groupOutputs" upperBound="-1"
            eType="#//Semantics/Actions/ExpansionNodeActivation"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="index" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Integer"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="regionActivation" ordered="false"
            lowerBound="1" eType="#//Semantics/Actions/ExpansionRegionActivation"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="regionInputs" upperBound="-1"
            eType="#//Semantics/Actions/OutputPinActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExpansionNodeActivation" eSuperTypes="#//Semantics/Activities/ObjectNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/ExpansionNode.hpp&quot;&#xA;#include &quot;uml/ExpansionRegion.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getExpansionRegionActivation" ordered="false" lowerBound="1"
            eType="#//Semantics/Actions/ExpansionRegionActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ExpansionNode> node = std::dynamic_pointer_cast&lt;uml::ExpansionNode>(m_node);&#xA;&#x9;std::shared_ptr&lt;uml::ExpansionRegion> region = node->getRegionAsInput();&#xA;&#x9;if (region == nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;region = node->getRegionAsOutput();&#xA;&#x9;}&#xA;&#xA;&#x9;auto group = m_group.lock();&#xA;&#x9;if (group == nullptr)&#xA;&#x9;{&#xA;        &#x9;DEBUG_ERROR(&quot;Group is nullptr! Failed to get expansion region group!&quot;)&#xA;&#x9;&#x9;throw &quot;unknown group&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;return std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ExpansionRegionActivation>(group->getNodeActivation(region));"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="addTokens(incomingTokens);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="receiveOffer" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="getExpansionRegionActivation()->receiveOffer();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return false;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExpansionRegionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;uml/Action.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xA;#include &quot;uml/ExpansionRegion.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/OutputPin.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::StructuredActivityNode> node = std::dynamic_pointer_cast&lt;uml::StructuredActivityNode>(m_node);&#xA;&#x9;if (node->getMustIsolate())&#xA;&#x9;{&#xA;&#x9;&#x9;_beginIsolation();&#xA;&#x9;&#x9;doStructuredActivity();&#xA;&#x9;&#x9;_endIsolation();&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;doStructuredActivity();&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doOutput">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ExpansionRegion> region = std::dynamic_pointer_cast&lt;uml::ExpansionRegion>(m_node);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ExpansionNode>> outputElements = region->getOutputElement();&#xA;&#x9;if (!isSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;unsigned int activationGroupsSize = m_activationGroups->size();&#xA;&#x9;&#x9;for (unsigned int i=0; i&lt;activationGroupsSize; i++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;ExpansionActivationGroup> activationGroup = m_activationGroups->at(i);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>> groupOutputs = activationGroup->getGroupOutputs();&#xA;&#x9;&#x9;&#x9;unsigned int groupOutputsSize = groupOutputs->size();&#xA;&#x9;&#x9;&#x9;for (unsigned j=0; j&lt;groupOutputsSize; j++)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> groupOutput = groupOutputs->at(j);&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::ExpansionNode> outputElement = outputElements->at(j);&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> activation = getExpansionNodeActivation(outputElement);&#xA;&#x9;&#x9;&#x9;&#x9;if (activation == nullptr)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;        &#x9;DEBUG_ERROR(&quot;Expansion node activation is nullptr! Failed to output tokens!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;throw &quot;unknown activation&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;activation->addTokens(groupOutput->takeTokens());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="doStructuredActivity" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ExpansionRegion> region = std::dynamic_pointer_cast&lt;uml::ExpansionRegion>(m_node);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin>> inputPins = region->getInput();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ExpansionNode>> inputElements = region->getInputElement();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ExpansionNode>> outputElements = region->getOutputElement();&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ActionsFactory> actionsFactory = fUML::Semantics::Actions::ActionsFactory::eInstance();&#xA;&#x9;&#xA;&#x9;getActivationGroups()->clear();&#xA;&#xA;&#x9;int n = m_inputExpansionTokens->at(0)->getTokens()->size();&#xA;&#x9;int k = 0;&#xA;&#x9;while (k &lt; n)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;ExpansionActivationGroup> activationGroup = actionsFactory->createExpansionActivationGroup();&#xA;&#x9;&#x9;activationGroup->setRegionActivation(getThisExpansionRegionActivationPtr());&#xA;&#x9;&#x9;activationGroup->setIndex(k);&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Actions::OutputPinActivation>> regionInputList = activationGroup->getRegionInputs();&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>> groupInputsList = activationGroup->getGroupInputs();&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>> groupOutputsList = activationGroup->getGroupOutputs();&#xA;&#xA;&#x9;&#x9;Bag&lt;uml::InputPin>::iterator inputPinsIter = inputPins->begin();&#xA;&#x9;&#x9;Bag&lt;uml::InputPin>::iterator inputPinsEnd = inputPins->end();&#xA;&#x9;&#x9;while (inputPinsIter != inputPinsEnd)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::OutputPinActivation> regionInput = actionsFactory->createOutputPinActivation();&#xA;&#x9;&#x9;&#x9;regionInput->setNode(*inputPinsIter);&#xA;&#x9;&#x9;&#x9;regionInput->run();&#xA;&#x9;&#x9;&#x9;regionInputList->push_back(regionInput);&#xA;&#x9;&#x9;&#x9;inputPinsIter++;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;Bag&lt;uml::ExpansionNode>::iterator inputElementsIter = inputElements->begin();&#xA;&#x9;&#x9;Bag&lt;uml::ExpansionNode>::iterator intputElementsEnd = inputElements->end();&#xA;&#x9;&#x9;while (inputElementsIter != intputElementsEnd)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> groupInput = actionsFactory->createExpansionNodeActivation();&#xA;&#x9;&#x9;&#x9;groupInput->setNode(*inputElementsIter);&#xA;&#x9;&#x9;&#x9;groupInput->setGroup(activationGroup);&#xA;&#x9;&#x9;&#x9;groupInput->run();&#xA;&#x9;&#x9;&#x9;groupInputsList->push_back(groupInput);&#xA;&#x9;&#x9;&#x9;inputElementsIter++;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;Bag&lt;uml::ExpansionNode>::iterator outputElementsIter = outputElements->begin();&#xA;&#x9;&#x9;Bag&lt;uml::ExpansionNode>::iterator outputElementsEnd = outputElements->end();&#xA;&#x9;&#x9;while (outputElementsIter != outputElementsEnd)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> groupOutput = actionsFactory->createExpansionNodeActivation();&#xA;&#x9;&#x9;&#x9;groupOutput->setNode(*outputElementsIter);&#xA;&#x9;&#x9;&#x9;groupOutput->setGroup(getGroup().lock());&#xA;&#x9;&#x9;&#x9;groupOutput->run();&#xA;&#x9;&#x9;&#x9;groupOutputsList->push_back(groupOutput);&#xA;&#x9;&#x9;&#x9;outputElementsIter++;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;activationGroup->createNodeActivations(region->getNode());&#xA;&#x9;&#x9;activationGroup->createEdgeInstance(region->getEdge());&#xA;&#x9;&#x9;m_activationGroups->push_back(activationGroup);&#xA;&#xA;&#x9;&#x9;k = k + 1;&#xA;&#x9;}&#xA;&#xA;&#x9;if (region->getMode() == uml::ExpansionKind::ITERATIVE)&#xA;&#x9;{&#xA;&#x9;&#x9;m_next = 0;&#xA;&#x9;&#x9;runIterative();&#xA;&#x9;}&#xA;&#x9;else if (region->getMode() == uml::ExpansionKind::PARALLEL)&#xA;&#x9;{&#xA;&#x9;&#x9;runParallel();&#xA;&#x9;}&#xA;&#xA;&#x9;doOutput();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getExpansionNodeActivation" ordered="false" lowerBound="1"
            eType="#//Semantics/Actions/ExpansionNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="auto group = m_group.lock();&#xA;&#x9;if (group != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> nodeActivation = group->getNodeActivation(node);&#xA;&#x9;&#x9;return std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ExpansionNodeActivation>(nodeActivation);&#xA;&#x9;}&#xA;&#x9;return nullptr;"/>
          </eAnnotations>
          <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ExpansionNode"/>
        </eOperations>
        <eOperations name="isSuspended" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Boolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="bool suspended = false;&#xA;&#x9;Bag&lt;ExpansionActivationGroup>::iterator iter = m_activationGroups->begin();&#xA;&#x9;Bag&lt;ExpansionActivationGroup>::iterator end = m_activationGroups->end();&#xA;&#x9;while (!suspended and iter != end)&#xA;&#x9;{&#xA;&#x9;&#x9;suspended = (*iter)->isSuspended();&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#x9;return suspended;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="numberOfValues" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ExpansionRegion> region = std::dynamic_pointer_cast&lt;uml::ExpansionRegion>(m_node);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ExpansionNode>> inputElements = region->getInputElement();&#xA;&#x9;int n = 0;&#xA;&#x9;Bag&lt;uml::ExpansionNode>::iterator iter = inputElements->begin();&#xA;&#x9;Bag&lt;uml::ExpansionNode>::iterator end = inputElements->end();&#xA;&#x9;while (iter != end)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> activation = getExpansionNodeActivation(*iter);&#xA;&#x9;&#x9;if (activation == nullptr)&#xA;&#x9;&#x9;{&#xA;&#x9;       &#x9;&#x9;DEBUG_ERROR(&quot;Expansion node activation is nullptr! Failed to count number of values!&quot;)&#xA;&#x9;&#x9;&#x9;throw &quot;unknown activation&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;int count = activation->countOfferedValues();&#xA;&#x9;&#x9;if (count > n)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;n = count;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#x9;return n;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="resume">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ExpansionRegion> region = std::dynamic_pointer_cast&lt;uml::ExpansionRegion>(m_node);&#xA;&#xA;&#x9;ActivityNodeActivationImpl::resume();&#xA;&#x9;terminateGroup(activationGroup);&#xA;&#x9;if (region->getMode() == uml::ExpansionKind::ITERATIVE)&#xA;&#x9;{&#xA;&#x9;&#x9;runIterative();&#xA;&#x9;}&#xA;&#xA;&#x9;doOutput();"/>
          </eAnnotations>
          <eParameters name="activationGroup" eType="#//Semantics/Actions/ExpansionActivationGroup"/>
        </eOperations>
        <eOperations name="runGroup" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (isRunning())&#xA;&#x9;{&#xA;&#x9;&#x9;unsigned int size = m_inputTokens->size();&#xA;&#x9;&#x9;for (unsigned int i=0; i&lt;size; i++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::TokenSet> tokenSet = m_inputTokens->at(i);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::OutputPinActivation> regionInput = activationGroup->getRegionInputs()->at(i);&#xA;&#x9;&#x9;&#x9;regionInput->clearTokens();&#xA;&#x9;&#x9;&#x9;regionInput->addTokens(tokenSet->getTokens());&#xA;&#x9;&#x9;&#x9;regionInput->sendUnofferedTokens();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;size = m_inputExpansionTokens->size();&#xA;&#x9;&#x9;for (unsigned int i=0; i&lt;size; i++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::TokenSet> tokenSet = m_inputExpansionTokens->at(i);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> groupInput = activationGroup->getGroupInputs()->at(i);&#xA;&#x9;&#x9;&#x9;groupInput->clearTokens();&#xA;&#x9;&#x9;&#x9;unsigned int index = activationGroup->getIndex();&#xA;&#x9;&#x9;&#x9;if (tokenSet->getTokens()->size() > index)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;groupInput->addToken(tokenSet->getTokens()->at(index));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;groupInput->sendUnofferedTokens();&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;activationGroup->run(activationGroup->getNodeActivations());&#xA;&#xA;&#x9;&#x9;terminateGroup(activationGroup);&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="activationGroup" ordered="false" lowerBound="1" eType="#//Semantics/Actions/ExpansionActivationGroup"/>
        </eOperations>
        <eOperations name="runIterative">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="int size = m_activationGroups->size();&#xA;&#x9;while (m_next &lt; size and !isSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;ExpansionActivationGroup> activationGroup = m_activationGroups->at(m_next);&#xA;&#x9;&#x9;runGroup(activationGroup);&#xA;&#x9;&#x9;m_next++;&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="runParallel">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="Bag&lt;ExpansionActivationGroup>::iterator iter = m_activationGroups->begin();&#xA;&#x9;Bag&lt;ExpansionActivationGroup>::iterator end = m_activationGroups->end();&#xA;&#x9;while (iter != end)&#xA;&#x9;{&#xA;&#x9;&#x9;runGroup(*iter);&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="sendOffers">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ExpansionRegion> region = std::dynamic_pointer_cast&lt;uml::ExpansionRegion>(m_node);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ExpansionNode>> outputElement = region->getOutputElement();&#xA;&#xA;&#x9;Bag&lt;uml::ExpansionNode>::iterator iter = outputElement->begin();&#xA;&#x9;Bag&lt;uml::ExpansionNode>::iterator end = outputElement->end();&#xA;&#xA;&#x9;while (iter != end)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> activation = getExpansionNodeActivation(*iter);&#xA;&#x9;&#x9;if (activation == nullptr)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Expansion node activation is nullptr! Failed to send offers!&quot;)&#xA;&#x9;&#x9;&#x9;throw &quot;unknown activation&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;activation->sendUnofferedTokens();&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#xA;&#x9;ActionActivationImpl::sendOffers();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="ActionActivationImpl::takeOfferedTokens();&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::ExpansionRegion> region = std::dynamic_pointer_cast&lt;uml::ExpansionRegion>(m_node);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin>> inputPinList = region->getInput();&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ExpansionNode>> inputElementList = region->getInputElement();&#xA;&#xA;&#x9;getInputTokens()->clear();&#xA;&#x9;getInputExpansionTokens()->clear();&#xA;&#xA;&#x9;Bag&lt;uml::InputPin>::iterator inputPinIter = inputPinList->begin();&#xA;&#x9;Bag&lt;uml::InputPin>::iterator inputPinEnd = inputPinList->end();&#xA;&#x9;while (inputPinIter != inputPinEnd)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> inputPin = *inputPinIter;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::TokenSet> tokenSet = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createTokenSet();&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = getNodeActivation(inputPin);&#xA;&#x9;&#x9;if (activation == nullptr)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Expansion node activation is nullptr! Failed to take offered tokens!&quot;)&#xA;&#x9;&#x9;&#x9;throw &quot;unknown activation&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;tokenSet->getTokens()->insert(*(activation->takeTokens()));&#xA;&#x9;&#x9;m_inputTokens->push_back(tokenSet);&#xA;&#xA;&#x9;&#x9;inputPinIter++;&#xA;&#x9;}&#xA;&#xA;&#x9;int n = numberOfValues();&#xA;&#xA;&#x9;Bag&lt;uml::ExpansionNode>::iterator inputElementIter = inputElementList->begin();&#xA;&#x9;Bag&lt;uml::ExpansionNode>::iterator inputElementEnd = inputElementList->end();&#xA;&#x9;while (inputElementIter != inputElementEnd)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::ExpansionNode> inputElement = *inputElementIter;&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> expansionNodeActivation = getExpansionNodeActivation(inputElement);&#xA;&#x9;&#x9;if (expansionNodeActivation == nullptr)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Expansion node activation is nullptr! Failed to take offered tokens!&quot;)&#xA;&#x9;&#x9;&#x9;throw &quot;unknown activation&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;expansionNodeActivation->fire(expansionNodeActivation->takeOfferedTokens());&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token>> tokens = expansionNodeActivation->takeTokens();&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::TokenSet> tokenSet = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createTokenSet();&#xA;&#x9;&#x9;int j = 0;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token>> tokenSetTokens = tokenSet->getTokens();&#xA;&#x9;&#x9;while (j &lt; n)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;tokenSetTokens->push_back(tokens->at(j));&#xA;&#x9;&#x9;&#x9;j++;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;m_inputExpansionTokens->push_back(tokenSet);&#xA;&#xA;&#x9;&#x9;inputElementIter++;&#xA;&#x9;}&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token>> offeredTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;return offeredTokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminate">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="Bag&lt;ExpansionActivationGroup>::iterator iter = getActivationGroups()->begin();&#xA;&#x9;Bag&lt;ExpansionActivationGroup>::iterator end = getActivationGroups()->end();&#xA;&#xA;&#x9;while (iter != end)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;ExpansionActivationGroup> activationGroup = *iter;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>> groupOutputs = activationGroup->getGroupOutputs();&#xA;&#x9;&#x9;_beginIsolation();&#xA;&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputIter = groupOutputs->begin();&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputEnd = groupOutputs->end();&#xA;&#x9;&#x9;while(outputIter != outputEnd)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> output = *outputIter;&#xA;&#x9;&#x9;&#x9;output->fire(output->takeOfferedTokens());&#xA;&#x9;&#x9;&#x9;outputIter++;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;activationGroup->terminateAll();&#xA;&#x9;&#x9;_endIsolation();&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#xA;&#x9;ActionActivationImpl::terminate();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminateGroup">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (isRunning() and !isSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>> groupOutputs = activationGroup->getGroupOutputs();&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputIter = groupOutputs->begin();&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Actions::ExpansionNodeActivation>::iterator outputEnd = groupOutputs->end();&#xA;&#x9;&#x9;while(outputIter != outputEnd)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ExpansionNodeActivation> output = *outputIter;&#xA;&#x9;&#x9;&#x9;output->fire(output->takeOfferedTokens());&#xA;&#x9;&#x9;&#x9;outputIter++;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;activationGroup->terminateAll();&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="activationGroup" lowerBound="1" eType="#//Semantics/Actions/ExpansionActivationGroup"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="inputTokens" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/TokenSet"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="inputExpansionTokens"
            ordered="false" lowerBound="1" upperBound="-1" eType="#//Semantics/Activities/TokenSet"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="activationGroups" ordered="false"
            upperBound="-1" eType="#//Semantics/Actions/ExpansionActivationGroup"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="next" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Integer"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InputPinActivation" eSuperTypes="#//Semantics/Actions/PinActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Actions/ActionActivation.hpp&quot;&#xA;#include &quot;uml/Pin.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="receiveOffer" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->getActionActivation().lock()->receiveOffer();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool ready = fUML::Semantics::Activities::ActivityNodeActivationImpl::isReady();&#xA;&#x9;if (getNode()->getName().find(&quot;self&quot;) == 0)&#xA;&#x9;{&#xA;&#x9;&#x9;return true;&#xA;&#x9;}&#xA;&#x9;if (ready) &#xA;&#x9;{&#xA;&#x9;&#x9;int totalValueCount = this->countUnofferedTokens() + this->countOfferedValues();&#xA;&#x9;&#x9;int minimum = getPin()->getLower();&#xA;&#x9;&#x9;ready = (totalValueCount >= minimum);&#x9;&#xA;&#x9;}&#xA;&#x9;return ready;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InvocationActionActivation" abstract="true"
          eSuperTypes="#//Semantics/Actions/ActionActivation"/>
      <eClassifiers xsi:type="ecore:EClass" name="LinkActionActivation" abstract="true"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'LinkActionActivation' is excluded from generation because actions concering Links are currently not supported."/>
        </eAnnotations>
        <eOperations name="linkMatchesEndData" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="link" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="endDataList" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndData"/>
        </eOperations>
        <eOperations name="endMatchesEndData" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eParameters name="link" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="endData" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndData"/>
        </eOperations>
        <eOperations name="getAssociation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="LoopNodeActivation" eSuperTypes="#//Semantics/Actions/StructuredActivityNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'LoopNodeActivation' is excluded from generation because LoopNodes are currently not supported."/>
        </eAnnotations>
        <eOperations name="runTest" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
        <eOperations name="runBody" ordered="false" lowerBound="1"/>
        <eOperations name="runLoopVariables" ordered="false" lowerBound="1"/>
        <eOperations name="makeLoopVariableList" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="bodyOutputLists" ordered="false"
            upperBound="-1" eType="#//Semantics/Actions/Values" containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="OutputPinActivation" eSuperTypes="#//Semantics/Actions/PinActivation"/>
      <eClassifiers xsi:type="ecore:EClass" name="PinActivation" abstract="true" eSuperTypes="#//Semantics/Activities/ObjectNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Pin.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Firing &quot; &lt;&lt; this->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; this->getNode()->getName() + &quot;'.&quot;)&#xA;&#x9;this->addTokens(incomingTokens);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="int count = this->countUnofferedTokens();&#xA;&#x9;int upper = -1;&#xA;&#xA;&#x9;//Note: A pin activation used in an expansion activation group will have this.node == null&#xA;&#x9;upper = getPin()->getUpper();&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#xA;&#x9;//NEWDEBUG&#xA;&#x9;DEBUG_INFO(this->getNode()->eClass()->getName() &lt;&lt; &quot; &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; count &lt;&lt; &quot; unoffered tokens on it's incoming edges.&quot;)&#xA;&#xA;&#x9;if (upper &lt; 0 || count &lt; upper) &#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > incomingEdges = this->getIncomingEdges();&#xA;&#xA;&#x9;&#x9;//NEWDEBUG&#xA;&#x9;&#x9;DEBUG_INFO(this->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; incomingEdges->size() &lt;&lt; &quot; incoming edges.&quot;)&#xA;&#xA;&#x9;&#x9;for (unsigned int i = 0; i &lt; incomingEdges->size(); i++) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edge = incomingEdges->at(i);&#xA;&#x9;&#x9;&#x9;int incomingCount = edge->countOfferedValue();&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > incomingTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;&#x9;&#x9;if (upper &lt; 0 || incomingCount &lt; upper - count) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;incomingTokens = edge->takeOfferedTokens();&#xA;&#x9;&#x9;&#x9;&#x9;count = count + incomingCount;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (count &lt; upper) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;incomingTokens = edge->takeOfferedTokens(upper - count);&#xA;&#x9;&#x9;&#x9;&#x9;count = upper;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;for (unsigned int j = 0; j &lt; incomingTokens->size(); j++) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = incomingTokens->at(j);&#xA;&#x9;&#x9;&#x9;&#x9;tokens->push_back(token);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;//NEWDEBUG&#xA;&#x9;DEBUG_INFO(this->getNode()->eClass()->getName() &lt;&lt; &quot; &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'  took &quot; &lt;&lt; tokens->size() &lt;&lt; &quot; tokens from it's incmoning edges.&quot;)&#xA;&#x9;return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="actionActivation" ordered="false"
            eType="#//Semantics/Actions/ActionActivation" eOpposite="#//Semantics/Actions/ActionActivation/pinActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="sharedAggregation"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="pin" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Pin">
          <eAnnotations source="redefines" references="#//Semantics/Activities/ActivityNodeActivation/node"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReadExtentActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ReadExtetActionActivation' is excluded from generation because the concept of extents is currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReadIsClassifiedObjectActionActivation"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;// Get the value on the object input pin and determine if it is classified by the classifier specified in the action.&#xA;// If the isDirect attribute of the action is false, then place true on the result output pin if the input object has the specified classifier or of one its (direct or indirect) descendants as a type.&#xA;&#x9;// If the isDirect attribute of the action is true, then place true on the result output pin if the input object has the specified classifier as a type.&#xA;&#x9;// Otherwise place false on the result output pin.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::ReadIsClassifiedObjectAction> readIsClassifiedObjectAction = this->getReadIsClassifiedObjectAction();&#xA;&#x9;std::shared_ptr&lt;uml::Classifier> classifier = readIsClassifiedObjectAction->getClassifier();&#xA;&#x9;bool isDirect = readIsClassifiedObjectAction->getIsDirect();&#xA;&#x9;bool result = false;&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> inputAsAny = this->takeTokens(readIsClassifiedObjectAction->getObject())->at(0);&#xA;&#xA;&#x9;if(inputAsAny)&#xA;&#x9;{&#xA;&#x9;&#x9;try&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlAny = std::dynamic_pointer_cast&lt;uml::UMLAny>(inputAsAny);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Element> input = umlAny->getAsElement();&#xA;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> typeOfInput = input->getMetaClass();&#xA;&#xA;&#x9;&#x9;&#x9;result = (classifier == typeOfInput);&#xA;&#xA;&#x9;&#x9;&#x9;if(!isDirect &amp;&amp; !result)&#xA;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier>> superTypesOfInput = typeOfInput->allParents();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;uml::Classifier> superType : *superTypesOfInput)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;result = (classifier == superType);&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(result)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Provided input is not an instance of uml::Element. Failed read is classified!&quot;)&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;Any> resultValue = eAny(result, 0, false);&#xA;&#xA;&#x9;&#x9;if(readIsClassifiedObjectAction->getResult())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this->putToken(readIsClassifiedObjectAction->getResult(), resultValue);&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="readIsClassifiedObjectAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ReadIsClassifiedObjectAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReadLinkActionActivation" eSuperTypes="#//Semantics/Actions/LinkActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ReadLinkActionActivation' is excluded from generation because actions concering Links are currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReadSelfActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/ReadSelfAction.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get the context object of the activity execution containing this action activation and place a reference to it on the result output pin.&#xA;&#x9;std::shared_ptr&lt;uml::ReadSelfAction> action = this->getReadSelfAction();&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::Element> context=this->getExecutionContext();&#x9;&#xA;&#x9;if(context)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Any> value = eUMLAny(context, context->getMetaElementID());&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::OutputPin> resultPin = action->getResult();&#xA;&#x9;&#x9;if(resultPin)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;this->putToken(resultPin, value);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Result pin is nullptr! Failed to read self!&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_ERROR(&quot;Context nullptr! Failed to read self!&quot;)&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="readSelfAction" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ReadSelfAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReadStructuralFeatureActionActivation"
          eSuperTypes="#//Semantics/Actions/StructuralFeatureActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="//#include &quot;fUML/Semantics/SimpleClassifiers/FeatureValue.hpp&quot;&#xA;//#include &quot;fUML/Semantics/SimpleClassifiers/StructuredValue.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Values/Value.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/ReadStructuralFeatureAction.hpp&quot;&#xA;#include &quot;uml/Property.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ReadStructuralFeatureAction> action = this->getReadStructuralFeatureAction();&#xA;&#x9;std::shared_ptr&lt;uml::StructuralFeature> feature = action->getStructuralFeature();&#xA;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property>(feature);&#xA;&#xA;&#x9;if(!property)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> value = nullptr;&#xA;&#x9;&#xA;&#x9;/* MDE4CPP specific implementation for handling &quot;self&quot;-Pin */&#xA;&#x9;std::string objectPinName = action->getObject()->getName();&#xA;&#x9;if((objectPinName.empty()) || (objectPinName.find(&quot;self&quot;) == 0)){&#xA;&#x9;&#x9;//value is set to the context of the current activity execution&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = this->getActivityExecution()->getContext();&#xA;&#x9;&#xA;&#x9;&#x9;value = eUMLAny(context, context->getMetaElementID());&#xA;&#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;value = this->takeTokens(action->getObject())->at(0);&#xA;&#x9;}&#xA;&#x9;/*--------------------------------------------------------*/&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::Element> structuredValue = nullptr;&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlAny = std::dynamic_pointer_cast&lt;uml::UMLAny>(value);&#xA;&#xA;&#x9;&#x9;structuredValue = umlAny->getAsElement();&#xA;&#xA;&#x9;&#x9;if (structuredValue)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> values = structuredValue->get(property);&#xA;&#x9;&#x9;&#x9;putToken(action->getResult(), values);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;{&#xA;&#x9;&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Context is nullptr! Failed to read feature!&quot;)&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch(...)&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element! Failed to read feature!&quot;)&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="readStructuralFeatureAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ReadStructuralFeatureAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReclassifyObjectActionActivation"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ReclassifyObjectActionActivation' is excluded from generation because ReclassifyObjectActions are currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReduceActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ReduceActionActivation' is excluded from generation because ReduceActions are currently not supported."/>
        </eAnnotations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="currentExecution" ordered="false"
            eType="#//Semantics/CommonBehavior/Execution"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="RemoveStructuralFeatureValueActionActivation"
          eSuperTypes="#//Semantics/Actions/WriteStructuralFeatureActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="//#include &quot;fUML/Semantics/SimpleClassifiers/FeatureValue.hpp&quot;&#xA;//#include &quot;fUML/Semantics/SimpleClassifiers/StructuredValue.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Values/Value.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;uml/UMLAny.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/RemoveStructuralFeatureValueAction.hpp&quot;&#xA;#include &quot;uml/Property.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::RemoveStructuralFeatureValueAction> action = this->getRemoveStructuralFeatureValueAction();&#xA;&#x9;std::shared_ptr&lt;uml::StructuralFeature> feature = action->getStructuralFeature();&#xA;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property>(feature);&#xA;&#xA;&#x9;if(!property)&#xA;&#x9;{&#xA;&#x9;&#x9;return;&#xA;&#x9;}&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> objectValue = nullptr;&#xA;&#x9;&#xA;&#x9;/* MDE4CPP specific implementation for handling &quot;self&quot;-Pin */&#xA;&#x9;std::string objectPinName = action->getObject()->getName();&#xA;&#x9;if((objectPinName.empty()) || (objectPinName.find(&quot;self&quot;) == 0)){&#xA;&#x9;&#x9;//objectValue is set to the context of the current activity execution&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> context = this->getActivityExecution()->getContext();&#xA;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;objectValue = eUMLAny(context, context->getMetaElementID());&#xA;&#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;objectValue = this->takeTokens(action->getObject())->at(0);&#xA;&#x9;}&#xA;&#x9;/*--------------------------------------------------------*/&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> inputValue = takeTokens(action->getValue())->at(0);&#xA;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::UMLAny> umlAny = std::dynamic_pointer_cast&lt;uml::UMLAny>(objectValue);&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> structuredValue = umlAny->getAsElement();&#xA;&#xA;&#x9;&#x9;if(structuredValue)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;structuredValue->remove(property, inputValue);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Context is nullptr! Failed to remove value from feature!&quot;)&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;catch(...)&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_ERROR(&quot;Provided context is not an instance of uml::Element! Failed to remove value from feature!&quot;)&#xA;&#x9;}&#xA;&#xA;&#x9;if(action->getResult() != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;putToken(action->getResult(), objectValue);&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="removeStructuralFeatureValueAction"
            lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//RemoveStructuralFeatureValueAction">
          <eAnnotations source="redefines" references="#//Semantics/Actions/ActionActivation/action"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReplyActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/ReplyAction.hpp&quot;&#xA;#include &quot;uml/CallEvent.hpp&quot;&#xA;#include &quot;uml/Trigger.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ReturnInformation.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'ReplyActionActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Reply to the call represented by the return information on&#xA;// the return information pin using the reply values given&#xA;// on the reply value pins.&#xA;&#xA;std::shared_ptr&lt;uml::ReplyAction> action = std::dynamic_pointer_cast&lt;uml::ReplyAction>(this->getNode());&#xA;std::shared_ptr&lt;uml::Trigger> replyToCall = action->getReplyToCall();&#xA;std::shared_ptr&lt;Bag&lt;uml::InputPin>> replyValuePins = action->getReplyValue();&#xA;std::shared_ptr&lt;uml::InputPin> returnInformationPin = action->getReturnInformation();&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> values = this->takeTokens(returnInformationPin);&#xA;std::shared_ptr&lt;fUML::Semantics::Actions::ReturnInformation> returnInformation = std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ReturnInformation>(values->at(0));&#xA;&#xA;if((std::dynamic_pointer_cast&lt;uml::CallEvent>(replyToCall->getEvent()) != nullptr) &amp;&amp; ((std::dynamic_pointer_cast&lt;uml::CallEvent>(replyToCall->getEvent()))->getOperation() == returnInformation->getOperation()))&#xA;{&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> parameterValues(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#x9;unsigned int i = 1;&#xA;&#xA;&#x9;while(i &lt;= replyValuePins->size()){&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue();&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value>> currentValues = this->takeTokens(replyValuePins->at(i-1)); &#xA;&#x9;&#x9;&#xA;&#x9;&#x9;for(unsigned int j = 0; j &lt; currentValues->size(); j++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;parameterValue->getValues()->add(currentValues->at(j));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;parameterValues->add(parameterValue);&#xA;&#x9;&#x9;i += 1;&#xA;&#x9;}&#xA;&#x9;returnInformation->reply(parameterValues);&#xA;}"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ReturnInformation" eSuperTypes="#//Semantics/Values/Value">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/Classifier.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'ReturnInformation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="getOperation" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return the operation associated with the call event occurrence of this&#xA;// return information.&#xA;&#xA;return this->getCallEventOccurrence()->getOperation();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// One return information value equals another if they are for the&#xA;// same call event occurrence.&#xA;&#xA;bool isEqual = false;&#xA;&#xA;if(std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ReturnInformation>(otherValue) != nullptr)&#xA;{&#xA;&#x9;isEqual = (std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ReturnInformation>(otherValue))->getCallEventOccurrence() == this->getCallEventOccurrence();&#xA;}&#xA;&#xA;return isEqual;"/>
          </eAnnotations>
          <eParameters name="otherValue" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="getTypes" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return information is untyped.&#xA;&#xA;std::shared_ptr&lt;Bag&lt;uml::Classifier>> types(new Bag&lt;uml::Classifier>);&#xA;&#xA;return types;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new return information value, with an empty call event occurrence.&#xA;&#xA;return fUML::Semantics::Actions::ActionsFactory::eInstance()->createReturnInformation();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="reply">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Reply to the call by setting the output parameters and&#xA;&#x9;// releasing the caller.&#xA;&#x9;this->getCallEventOccurrence()->setOutputParameterValues(outputParameterValues);&#xA;&#x9;this->getCallEventOccurrence()->releaseCaller();"/>
          </eAnnotations>
          <eParameters name="outputParameterValues" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="specify" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return information cannot be specified using a value specification.&#xA;&#x9;return nullptr;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="toString" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a string representation of the return information.&#xA;&#x9;std::string s = &quot;ReturnInformation&quot;;&#xA;&#x9;std::string name = this->getCallEventOccurrence()->getOperation()->getName();&#xA;&#x9;if(name != &quot;&quot;)&#xA;&#x9;{&#xA;&#x9;&#x9;s = s + &quot;(&quot; + name + &quot;)&quot;;&#xA;&#x9;}&#xA;&#x9;return s;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new return information value that is a copy of this value, with&#xA;// the same call event occurrence.&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::Actions::ReturnInformation> newValue = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReturnInformation();&#xA;newValue->setCallEventOccurrence(this->getCallEventOccurrence());&#xA;return newValue;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="callEventOccurrence"
            lowerBound="1" eType="#//Semantics/CommonBehavior/CallEventOccurrence"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SendSignalActionActivation" eSuperTypes="#//Semantics/Actions/InvocationActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'SendSignalActionActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="doAction" ordered="false" lowerBound="1"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StartClassifierBehaviorActionActivation"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/StartClassifierBehaviorAction.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'StartClassifierBehaviorActionActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get the value on the object input pin. If it is not a reference, then do nothing.&#xA;// Start the classifier behavior of the referent object for the classifier given as the type of the object input pin.&#xA;// If the object input pin has no type, then start the classifier behaviors of all types of the referent object. [The required behavior in this case is not clear from the spec.]&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::StartClassifierBehaviorAction> action = std::dynamic_pointer_cast&lt;uml::StartClassifierBehaviorAction>(this->getNode());&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin > object= action->getObject();&#xA;&#x9;&#x9;if(object)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//Todo Check: really only first Element?&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Values::Value> valueObject=this->takeTokens(object)->at(0);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Reference> reference = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Reference>(valueObject);&#xA;&#x9;&#x9;&#x9;if (reference)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Class> type=std::dynamic_pointer_cast&lt;uml::Class> (object->getType());&#xA;&#x9;&#x9;&#x9;&#x9;if (type)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > parameterValueList(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reference->startBehavior(type, parameterValueList);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StartObjectBehaviorActionActivation"
          eSuperTypes="#//Semantics/Actions/InvocationActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;uml/StartObjectBehaviorAction.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/Reference.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;"/>
          <details key="doNotGenerate" value="Class 'StartObjectBehaviorActionActivation' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;// Get the value on the object input pin. If it is not a reference, then do nothing.&#xA;&#x9;// Start the behavior of the referent object for the classifier given as the type of the object input pin, with parameter values taken from the argument input pins.&#xA;&#x9;// If the object input pin has no type, then start the classifier behaviors of all types of the referent object.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::StartObjectBehaviorAction> action = std::dynamic_pointer_cast&lt;uml::StartObjectBehaviorAction>(this->getNode());&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin > object= action->getObject();&#xA;&#x9;&#x9;if(object)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//Todo Check: really only first Element?&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Values::Value> valueObject=this->takeTokens(object)->at(0);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Reference> reference = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Reference>(valueObject);&#xA;&#x9;&#x9;&#x9;if (reference)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;uml::InputPin, uml::InputPin>> argumentPins = action->getArgument();&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > inputs(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#x9;&#x9;&#x9;&#x9;//Todo Check TypedElement? - fUML Spec: Class_ type = (Class_)(action.object.typedElement.type);&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Class> type=std::dynamic_pointer_cast&lt;uml::Class> (object->getType());&#xA;&#x9;&#x9;&#x9;&#x9;if (type)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Behavior> behavior=std::dynamic_pointer_cast&lt;uml::Behavior> (object->getType());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!behavior)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;behavior = type->getClassifierBehavior();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (behavior)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;uml::Parameter, uml::NamedElement>> parameters = behavior->getOwnedParameter();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int pinNumber = 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;uml::Parameter> parameter: *parameters)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;uml::ParameterDirectionKind direction=parameter->getDirection();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (direction == uml::ParameterDirectionKind::IN || direction == uml::ParameterDirectionKind::INOUT)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->setParameter(parameter);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;auto argumentPin=argumentPins->at(pinNumber);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Values::Value> > valueTokens=this->takeTokens(argumentPin);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->insert(*valueTokens);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inputs->add(parameterValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pinNumber ++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw &quot;Invalid Behavior for StartObjectBehaviorAction&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;reference->startBehavior(type, inputs);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuralFeatureActionActivation"
          abstract="true" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="//#include &quot;fUML/Semantics/StructuredClassifiers/Link.hpp&quot;&#xA;//#include &quot;fUML/Semantics/SimpleClassifiers/FeatureValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getAssociation" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// If the structural feature for the action of this activation is an association end,&#xA;// then get the associated association.&#xA;&#xA;std::shared_ptr&lt;uml::Association> association = nullptr;&#xA;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property>(feature);&#xA;&#xA;if(property != nullptr)&#xA;{&#xA;&#x9;association = property->getAssociation();&#xA;}&#xA;&#xA;return association;"/>
          </eAnnotations>
          <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
        </eOperations>
        <eOperations name="getMatchingLinks" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get the links of the given binary association whose end opposite&#xA;// to the given end has the given value&#xA;&#xA;return getMatchingLinksForEndValue(association, end, oppositeValue, nullptr);"/>
          </eAnnotations>
          <eParameters name="association" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
          <eParameters name="end" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="oppositeValue" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="getOppositeEnd" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Property">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get the end of a binary association opposite to the given end.&#xA;&#xA;std::shared_ptr&lt;uml::Property> oppositeEnd = association->getMemberEnd()->at(0);&#xA;if(oppositeEnd == end)&#xA;{&#xA;&#x9;&#x9;oppositeEnd = association->getMemberEnd()->at(1);&#xA;}&#xA;&#xA;return oppositeEnd;"/>
          </eAnnotations>
          <eParameters name="association" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
          <eParameters name="end" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
        </eOperations>
        <eOperations name="getMatchingLinksForEndValue" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Get the links of the given binary association whose end opposite&#xA;// to the given end has the given opposite value and, optionally, that&#xA;// has a given end value for the given end.&#xA;&#xA;/* Currently not supported&#xA;std::shared_ptr&lt;uml::Property> oppositeEnd = getOppositeEnd(association, end);&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue>> extent = this->getExecutionLocus()->retrieveExtent(association);&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::StructuredClassifiers::Link>> links(new Bag&lt;fUML::Semantics::StructuredClassifiers::Link>);&#xA;for(unsigned int i = 0; i &lt; extent->size(); i++){&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::ExtensionalValue> link = extent->at(i);&#xA;&#x9;if(link->retrieveFeatureValue(oppositeEnd)->getValues()->at(0) == oppositeValue) {&#xA;&#x9;&#x9;bool matches = true;&#xA;&#x9;&#x9;if(endValue != nullptr) {&#xA;&#x9;&#x9;&#x9;matches = (link->retrieveFeatureValue(end)->getValues()->at(0) == endValue);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if(matches){&#xA;&#x9;&#x9;&#x9;if(!(std::dynamic_pointer_cast&lt;uml::MultiplicityElement>(end)->getIsOrdered()) || (links->size() == 0)){&#xA;&#x9;&#x9;&#x9;&#x9;links->add(std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Link>(link));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;unsigned int n = link->retrieveFeatureValue(end)->getPosition();&#xA;&#x9;&#x9;&#x9;&#x9;bool continueSearching = true;&#xA;&#x9;&#x9;&#x9;&#x9;unsigned int j = 0;&#xA;&#x9;&#x9;&#x9;&#x9;while(continueSearching &amp;&amp; (j &lt; links->size())){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;j += 1;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;continueSearching = (unsigned int)(links->at(j-1)->retrieveFeatureValue(end)->getPosition()) &lt; n;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(continueSearching){&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;links->add(std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Link>(link));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;links->insert((links->begin() + (j-1)), std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Link>(link));&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&#xA;return links;&#xA;*/&#xA;&#xA;throw std::runtime_error(&quot;UnsupportedOperationException: &quot; + std::string(__PRETTY_FUNCTION__));"/>
          </eAnnotations>
          <eParameters name="association" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
          <eParameters name="end" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
          <eParameters name="oppositeValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="endValue" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="StructuredActivityNodeActivation"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivitiesPackage.hpp&quot;&#xA;#include &quot;uml/StructuredActivityNode.hpp&quot;&#xA;#include &quot;uml/Action.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/OutputPin.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doStructuredActivity" ordered="false">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="//Remark: action is not used in the specification.&#xA;&#x9;std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action>(this->getNode());&#xA;    assert(action != nullptr);&#xA;&#xA;    // *** Concurrently send offers from all input pins. ***&#xA;    std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = nullptr;//action->input;&#xA;    std::vector&lt;std::shared_ptr&lt;uml::InputPin>>::iterator i;&#xA;&#xA;    for (i = inputPins->begin(); i!= inputPins->end();++i)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::InputPin> inputPin = std::dynamic_pointer_cast&lt;uml::InputPin> (*i);&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation = this->retrievePinActivation(inputPin);&#xA;        pinActivation->sendUnofferedTokens();&#xA;    }&#xA;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > nodes = this->getActivationGroup()->getNodeActivations();&#xA;    this->getActivationGroup()->run(nodes);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="makeActivityNodeList" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > activityNodes(new Bag&lt;uml::ActivityNode>());&#xA;&#xA;    for (unsigned int i = 0; i &lt; nodes->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::ActivityNode> node = nodes->at(i);&#xA;        activityNodes->push_back(node);&#xA;        std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action>(node);&#xA;        if (action != nullptr) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = action->getInput();//was: nullptr;&#xA;            for (unsigned int j = 0; j &lt; inputPins->size(); j++) &#xA;            {&#xA;            &#x9;std::shared_ptr&lt;uml::InputPin> inputPin = inputPins->at(j);&#xA;                activityNodes->push_back(inputPin);&#xA;            }&#xA;&#xA;            std::shared_ptr&lt;Bag&lt;uml::OutputPin> > outputPins = action->getOutput();//was: nullptr;&#xA;            for (unsigned int j = 0; j &lt; outputPins->size(); j++) &#xA;            {&#xA;            &#x9;std::shared_ptr&lt;uml::OutputPin> outputPin = outputPins->at(j);&#xA;                activityNodes->push_back(std::dynamic_pointer_cast&lt;uml::ActivityNode>(outputPin));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    return activityNodes;"/>
          </eAnnotations>
          <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ExecutableNode"/>
        </eOperations>
        <eOperations name="getPinValues" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation = std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::PinActivation>(this->getActivationGroup()->getNodeActivation(pin));&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token>> tokens = pinActivation->getTokens();&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Any>> values(new Bag&lt;Any>());&#xA;    for (unsigned int i = 0; i &lt; tokens->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = tokens->at(i);&#xA;    &#x9;std::shared_ptr&lt;Any> value = token->getValue();&#xA;        if (value != nullptr) &#xA;        {&#xA;            values->push_back(value);&#xA;        }&#xA;    }&#xA;&#xA;    return values;"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
        </eOperations>
        <eOperations name="putPinValues" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Actions::PinActivation> pinActivation = std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::PinActivation>(this->getActivationGroup()->getNodeActivation(std::dynamic_pointer_cast&lt;uml::ActivityNode>(pin)));&#xA;&#xA;    for (unsigned int i = 0; i &lt; values->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;Any> value = values->at(i);&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> token = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createObjectToken();&#xA;        token->setValue(value);&#xA;        pinActivation->addToken(token);&#xA;    }"/>
          </eAnnotations>
          <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
          <eParameters name="values" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="doAction" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if ((std::dynamic_pointer_cast&lt;uml::StructuredActivityNode>(this->getNode()))->getMustIsolate()) &#xD;&#xA;&#x9;{&#xD;&#xA;        _beginIsolation();&#xD;&#xA;        this->doStructuredActivity();&#xD;&#xA;        _endIsolation();&#xD;&#xA;    }&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;{&#xD;&#xA;        this->doStructuredActivity();&#xD;&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    this->terminateAll();&#xA;    fUML::Semantics::Actions::ActionActivationImpl::terminate();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> thisActivation = fUML::Semantics::Actions::ActionActivationImpl::getNodeActivation(node);&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = nullptr;&#xA;    if (thisActivation != nullptr) &#xA;    {&#xA;        activation = thisActivation;&#xA;    }&#xA;    else if (this->getActivationGroup() != nullptr)&#xA;    {&#xA;        activation = this->getActivationGroup()->getNodeActivation(node);&#xA;    }&#xA;&#xA;    return activation;"/>
          </eAnnotations>
          <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="fUML::Semantics::Actions::ActionActivationImpl::createNodeActivations();&#xA;&#xA;&#x9;this->setActivationGroup(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivationGroup>(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityNodeActivationGroup()));&#xA;&#x9;this->getActivationGroup()->setContainingNodeActivation(getThisStructuredActivityNodeActivationPtr());&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::StructuredActivityNode> structuredActivityNode = std::dynamic_pointer_cast&lt;uml::StructuredActivityNode> (this->getNode());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > nodes = structuredActivityNode->getNode();&#xA;&#x9;this->getActivationGroup()->createNodeActivations(nodes);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="createEdgeInstances" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::ActivityEdge> > edges = (std::dynamic_pointer_cast&lt;uml::StructuredActivityNode> (this->getNode()))->getEdge();&#xD;&#xA;&#x9;this->getActivationGroup()->createEdgeInstance(edges);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminateAll" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    this->getActivationGroup()->terminateAll();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    bool isSource = fUML::Semantics::Actions::ActionActivationImpl::isSourceFor(edgeInstance);&#xA;    if (!isSource) {&#xA;        isSource = this->getActivationGroup()->hasSourceFor(edgeInstance);&#xA;    }&#xA;    return isSource;"/>
          </eAnnotations>
          <eParameters name="edgeInstance" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eOperations name="isSuspended" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    return this->getActivationGroup()->isSuspended();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="completeAction" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > incomingTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;    if (!this->isSuspended()) &#xA;    {&#xA;        incomingTokens = fUML::Semantics::Actions::ActionActivationImpl::completeAction();&#xA;    }&#xA;    return incomingTokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="resume" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > incomingTokens = fUML::Semantics::Actions::ActionActivationImpl::completeAction();&#xA;    if (incomingTokens->size() > 0) &#xA;    {&#xA;        this->fire(incomingTokens);&#xA;    }&#xA;    if (!this->isSuspended()) &#xA;    {&#xA;        fUML::Semantics::Actions::ActionActivationImpl::resume();&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="activationGroup" ordered="false"
            lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivationGroup"
            containment="true" eOpposite="#//Semantics/Activities/ActivityNodeActivationGroup/containingNodeActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TestIdentityActionActivation" eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'TestIdentityActionActivation' is excluded from generation because comparison between arbitrary objects is currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Values">
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="values" upperBound="-1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ValueSpecificationActionActivation"
          eSuperTypes="#//Semantics/Actions/ActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Executor.hpp&quot;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;&#xA;#include &quot;uml/ValueSpecificationAction.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="doAction">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ValueSpecificationAction> action = std::dynamic_pointer_cast&lt;uml::ValueSpecificationAction>(m_node);&#xA;&#x9;if (action != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::ValueSpecification> valueSpecificaton = action->getValue();&#xA;&#x9;&#x9;if (valueSpecificaton == nullptr)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;value of ValueSpecificationAction is null&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;std::shared_ptr&lt;Any> value = getExecutionLocus()->getExecutor()->evaluate(valueSpecificaton);&#xA;&#x9;&#x9;putToken(action->getResult(), value);&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="WriteLinkActionActivation" abstract="true"
          eSuperTypes="#//Semantics/Actions/LinkActionActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'WriteLinkActionActivation' is excluded from generation because actions concering Links are currently not supported."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="WriteStructuralFeatureActionActivation"
          abstract="true" eSuperTypes="#//Semantics/Actions/StructuralFeatureActionActivation">
        <eOperations name="position" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return the position (counting from 1) of the first occurance of the given value in the&#xA;// given list at or after the starting index, or 0 if it is not found.&#xA;&#xA;bool found = false;&#xA;unsigned int i = startAt;&#xA;&#xA;while(!found &amp;&amp; i&lt;=list->size()) {&#xA;&#x9;found = (list->at(i-1) == value);&#xA;&#x9;i += 1;&#xA;}&#xA;&#xA;if(!found){&#xA;&#x9;i = 1;&#xA;}&#xA;&#xA;return i-1;"/>
          </eAnnotations>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="list" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="startAt" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="AcceptCallActionActivations">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'AcceptCallActionActivations' is excluded from generation because event handling is currently not supported."/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="Activities" nsURI="http:///fUML_Semantics/Semantics/Activities.ecore"
        nsPrefix="fUML_Semantics.Semantics.Activities">
      <eClassifiers xsi:type="ecore:EClass" name="ActivityEdgeInstance">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;algorithm> &#xD;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="sendOffer" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Offer> offer(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createOffer());&#xA;    &#x9;offer->getOfferedTokens()->insert(offer->getOfferedTokens()->end(), tokens->begin(), tokens->end());&#xA;    &#x9;this->getOffers()->push_back(offer);&#xA;&#xA;&#x9;DEBUG_INFO((((this ->getEdge() == nullptr) || (this->getEdge()->getName() == &quot;&quot;)) ? &quot;Anonymous edge&quot; : (this->getEdge()->eClass()->getName() + &quot; '&quot; + this->getEdge()->getName() + &quot;'&quot;)) &lt;&lt; &quot; created a new offer containing &quot;&lt;&lt;tokens->size()&lt;&lt;&quot; token(s).&quot;)&#xA;&#xA;    &#x9;auto target = this->getTarget().lock();&#xA;&#xA;    if(nullptr == target )&#xA;    {&#xA;        //NEWDEBUG&#xA;&#x9;DEBUG_ERROR(&quot;Target is nullptr! Failed to send offer!&quot;)&#xA;    }&#xA;    else&#xA;    {&#xA;    &#x9;target->receiveOffer();&#xA;    }"/>
          </eAnnotations>
          <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="countOfferedValue" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="int count = 0;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Offer> > offerList = this->getOffers();&#xA;    for(std::shared_ptr&lt;fUML::Semantics::Activities::Offer> offer : *offerList)&#xA;    {&#xA;        count+=offer->countOfferedVales();&#xA;    }&#xA;    return count;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Offer> > offerList = this->getOffers();&#xA;&#x9;//NEWDEBUG&#xA;&#x9;DEBUG_INFO((((this->getEdge() == nullptr) || (this->getEdge()->getName() == &quot;&quot;)) ? &quot;Anonymous edge&quot; : (this->getEdge()->eClass()->getName() + &quot; '&quot; + this->getEdge()->getName() + &quot;'&quot;)) &lt;&lt; &quot; has &quot; &lt;&lt; this->getOffers()->size() &lt;&lt; &quot; offer(s).&quot;)&#xA;&#xA;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::Offer> offer : *offerList)&#xA;    &#x9;{&#xA;    &#x9;&#x9;auto vec = offer->retrieveOfferedTokens();&#xA;&#x9;&#x9;//NEWDEBUG&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Retrieved &quot;&lt;&lt;vec->size()&lt;&lt;&quot; token(s) from offer.&quot;)&#xA;       &#x9;&#x9;tokens->insert(tokens->end(), vec->begin(), vec->end());&#xA;  &#x9;}&#xA;&#xA;&#x9;DEBUG_INFO(&quot;Retrieved a total number of &quot; &lt;&lt; tokens->size() &lt;&lt; &quot; token(s).&quot;)&#xA;&#xA;    &#x9;this->getOffers()->clear();&#xA;&#xA;    &#x9;return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;    int remainingCount = maxCount;&#xA;&#xA;    while (this->getOffers()->size() > 0 &amp;&amp; remainingCount > 0) {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Offer> offer = this->getOffers()->at(0);&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > offeredTokens = offer->retrieveOfferedTokens();&#xA;        int count = offer->countOfferedVales();&#xA;        if (count &lt;= remainingCount) {&#xA;            for (unsigned int i = 0; i &lt; offeredTokens->size(); i++) {&#xA;                tokens->push_back(offeredTokens->at(i));&#xA;            }&#xA;            remainingCount = remainingCount - count;&#xA;            this->getOffers()->erase(this->getOffers()->begin());&#xA;        } else {&#xA;            for (int i = 0; i &lt; remainingCount; i++) {&#xA;            &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = offeredTokens->at(i);&#xA;                if (token->getValue() != nullptr) {&#xA;                    tokens->push_back(token);&#xA;                }&#xA;            }&#xA;            offer->removeOfferedValues(remainingCount);&#xA;            remainingCount = 0;&#xA;        }&#xA;    }&#xA;&#xA;    return tokens;"/>
          </eAnnotations>
          <eParameters name="maxCount" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="getOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#xA;&#x9;Bag&lt;fUML::Semantics::Activities::Offer>* offerList = this->getOffers().get();&#xA;    const int size = offerList->size();&#xA;    Bag&lt;fUML::Semantics::Activities::Token>* vec;&#xA;    for(int i=0; i &lt; size; i++){&#xA;    {&#xA;        vec = (*offerList)[i]->retrieveOfferedTokens().get();&#xA;        if(vec->size()>0)&#xA;        {&#xA;            if (tokens->empty())&#xA;            {&#xA;                *tokens = *vec;&#xA;            } else {&#xA;                tokens->insert(tokens->end(), vec->begin(), vec->end());&#xA;            }&#xA;        }&#xA;        }&#xA;    }&#xA;&#xA;    return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="hasOffer" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return std::any_of(this->getOffers()->begin(),this->getOffers()->end(),[](std::shared_ptr&lt;fUML::Semantics::Activities::Offer> offer){return offer->hasTokens();});&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="edge" ordered="false"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="source" ordered="false"
            lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation"
            eOpposite="#//Semantics/Activities/ActivityNodeActivation/outgoingEdges">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="sharedAggregation"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
            lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation"
            eOpposite="#//Semantics/Activities/ActivityNodeActivation/incomingEdges">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="sharedAggregation"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="offers" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/Offer"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="group" ordered="false"
            lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivationGroup"
            eOpposite="#//Semantics/Activities/ActivityNodeActivationGroup/edgeInstances"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActivityExecution" eSuperTypes="#//Semantics/CommonBehavior/Execution">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityParameterNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/Execution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ForkedToken.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Object.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;uml/umlPackage.hpp&quot;&#xA;#include &quot;uml/Activity.hpp&quot;&#xA;#include &quot;uml/ActivityParameterNode.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="execute" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::Activity> activity = this->getActivity();&#xA;&#xA;&#x9;if(activity != nullptr)&#xA;   &#x9;{&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Executing Activity '&quot; &lt;&lt; activity->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityExecution> thisPtr=getThisActivityExecutionPtr();&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivationGroup> newActivationGroup=fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityNodeActivationGroup_as_activationGroup_in_ActivityExecution(thisPtr);&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > nodes = activity->getNode();&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityEdge> > edges = activity->getEdge();&#xA;&#x9;&#xA;&#x9;&#x9;newActivationGroup->activate(nodes, edges);&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation> > outputActivationList = this->getActivationGroup()->getOutputParameterNodeActivations();&#xA;&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Activity '&quot; &lt;&lt; activity->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; outputActivationList->size() &lt;&lt; &quot; output ParameterNodes.&quot;)&#xA;&#xA;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation> outputActivation : *outputActivationList)&#xA;&#x9;&#x9;{&#xA;            &#x9;&#x9;if(outputActivation->getNode()->getMetaElementID() == uml::umlPackage::ACTIVITYPARAMETERNODE_CLASS)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue());&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::ActivityParameterNode> activityParameterNode = std::dynamic_pointer_cast&lt;uml::ActivityParameterNode> (outputActivation->getNode());&#xA;&#x9;&#x9;&#x9;&#x9;parameterValue->setParameter(activityParameterNode->getParameter());&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokenList = outputActivation->getTokens();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token : *tokenList)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;value = token->getValue();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;#ifndef NDEBUG&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;/*if(token->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::OBJECTTOKEN_CLASS)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;Getting the value of a object token&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(token->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::FORKEDTOKEN_CLASS)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;Getting the value of a forked token&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr&lt;&lt;&quot;Unsupported token type.&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit(EXIT_FAILURE);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}*/&#xA;#endif&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (value != nullptr) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->push_back(value);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Parameter '&quot; &lt;&lt; parameterValue->getParameter()->getName() &lt;&lt; &quot;' has value: &quot; &lt;&lt; value->toString() &lt;&lt; &quot;.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;this->setParameterValue(parameterValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;        &#x9;DEBUG_INFO(&quot;Completed execution of Activity '&quot; &lt;&lt; activity->getName() &lt;&lt; &quot;'.&quot;)&#xA;        &#x9;//TODO: which elements connected to the activity can be safely cleaned up here?&#xA;&#x9;}&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    this->getActivationGroup()->terminateAll();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="new_" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new activity execution with empty properties.&#xA;&#x9;return eEcoreAny(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityExecution(), fUML::Semantics::Activities::ActivitiesPackage::ACTIVITYEXECUTION_CLASS);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Create a new activity execution that is a copy of this execution.&#xA;// [Note: This currently just returns a non-executing execution for the same activity as this execution.]&#xA;&#xA;return fUML::Semantics::CommonBehavior::ExecutionImpl::_copy();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="execute_new" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::Activity> activity = this->getActivity();&#xA;&#xA;&#x9;if(activity != nullptr)&#xA;   &#x9;{&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Executing Activity '&quot; &lt;&lt; activity->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivationGroup> activityNodeActivationGroup = this->getActivationGroup();&#xA;&#xA;&#x9;&#x9;activityNodeActivationGroup->run(activityNodeActivationGroup->getNodeActivations());&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation> > outputActivationList = activityNodeActivationGroup->getOutputParameterNodeActivations();&#xA;&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Activity '&quot; &lt;&lt; activity->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; outputActivationList->size() &lt;&lt; &quot; output ParameterNodes.&quot;)&#xA;&#xA;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation> outputActivation : *outputActivationList)&#xA;&#x9;&#x9;{&#xA;            &#x9;&#x9;if(outputActivation->getNode()->getMetaElementID() == uml::umlPackage::ACTIVITYPARAMETERNODE_CLASS)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue());&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::ActivityParameterNode> activityParameterNode = std::dynamic_pointer_cast&lt;uml::ActivityParameterNode> (outputActivation->getNode());&#xA;&#x9;&#x9;&#x9;&#x9;parameterValue->setParameter(activityParameterNode->getParameter());&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokenList = outputActivation->getTokens();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token : *tokenList)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Any> value;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;value = token->getValue();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;#ifndef NDEBUG&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;/*if(token->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::OBJECTTOKEN_CLASS)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;Getting the value of a object token&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(token->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::FORKEDTOKEN_CLASS)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;Getting the value of a forked token&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr&lt;&lt;&quot;Unsupported token type.&quot;&lt;&lt;std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;exit(EXIT_FAILURE);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}*/&#xA;#endif&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (value != nullptr) &#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->push_back(value);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Parameter '&quot; &lt;&lt; parameterValue->getParameter()->getName() &lt;&lt; &quot;' has value: &quot; &lt;&lt; value->toString() &lt;&lt; &quot;.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;this->setParameterValue(parameterValue);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;        &#x9;DEBUG_INFO(&quot;Completed execution of Activity '&quot; &lt;&lt; activity->getName() &lt;&lt; &quot;'.&quot;)&#xA;        &#x9;//TODO: which elements connected to the activity can be safely cleaned up here?&#xA;&#x9;}&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="activationGroup" ordered="false"
            lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivationGroup"
            containment="true" eOpposite="#//Semantics/Activities/ActivityNodeActivationGroup/activityExecution"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="activity" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Activity">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="getterBody" value="if(!m_activity)&#xA;{&#xA;&#x9;m_activity = std::dynamic_pointer_cast&lt;uml::Activity>(this->getBehavior());&#xA;}&#xA;&#xA;return m_activity;"/>
            <details key="qualify" value="mutable"/>
          </eAnnotations>
          <eAnnotations source="redefines" references="#//Semantics/CommonBehavior/Execution/behavior"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActivityFinalNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ExpansionActivationGroup.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ExpansionRegionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/StructuredActivityNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ActionsPackage.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Fireing ActivityFinalNode. Terminating execution of activity '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;if (incomingTokens->size() > 0 || this->getIncomingEdges()->size() == 0) &#xA;    &#x9;{&#xA;&#x9;&#x9;auto this_group = this->getGroup().lock();&#xA;&#x9;&#x9;if(this_group )&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;auto activityExecution = this_group->getActivityExecution().lock();&#xA;&#x9;&#x9;&#x9;if (activityExecution)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;activityExecution->terminate();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else if (this_group->getContainingNodeActivation().lock())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;auto activation= this_group->getContainingNodeActivation().lock();&#xA;&#x9;&#x9;&#x9;&#x9;if(activation)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activation->terminateAll();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;if (this_group->getMetaElementID() == fUML::Semantics::Actions::ActionsPackage::EXPANSIONACTIVATIONGROUP_CLASS)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ExpansionActivationGroup>(this_group)->getRegionActivation()->terminate();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;    &#x9;}&#xA;&#xA;"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActivityNodeActivation" abstract="true"
          eSuperTypes="#//Semantics/Loci/SemanticVisitor">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;ecore/EClass.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ForkedToken.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xA;#include &quot;uml/ActivityEdge.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="run" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Running &quot; &lt;&lt; ((this->getNode() == nullptr) ? &quot;anonymous node.&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'.&quot;)))&#xA;&#xA;    this->setRunning(true);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="receiveOffer" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(((this->getNode() == nullptr) ? &quot;Anonymous node&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'&quot;)) &lt;&lt; &quot; received an offer.&quot;)&#xA;&#xA;    _beginIsolation();&#xA;&#xA;    bool ready = this->isReady();&#xA;&#xA;    std::shared_ptr&lt;Bag&lt;Token> > tokens;&#xA;   &#x9; if (ready) &#xA;    &#x9;{&#xA;       &#x9;&#x9;DEBUG_INFO(((this->getNode() == nullptr) ? &quot;Anonymous node&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'.&quot;)) &lt;&lt; &quot; is ready for execution. Taking offered tokens.&quot;)&#xA;        &#x9;tokens = this->takeOfferedTokens();&#xA;   &#x9;}&#xA;&#x9;else{&#xA;&#x9;&#x9;DEBUG_INFO(((this->getNode() == nullptr) ? &quot;Anonymous node&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'.&quot;)) &lt;&lt; &quot; is not ready for execution yet. Not taking offered tokens.&quot;)&#xA;&#x9;}&#xA;&#xA;    _endIsolation();&#xA;&#xA;    if (ready) &#xA;    {&#xA;        this->fire(tokens);&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > allTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > incomingEdgeList = this->getIncomingEdges();&#xA;&#xA;&#x9;DEBUG_INFO(((this->getNode() == nullptr) ? &quot;Anonymous node&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'&quot;)) &lt;&lt; &quot; has &quot; &lt;&lt; incomingEdgeList->size() &lt;&lt; &quot; incoming edges.&quot;)&#xA;&#xA;&#x9;for(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> incomingEdge : *incomingEdgeList)&#xA;&#x9;{&#xA;&#x9;&#x9;auto vec = incomingEdge->takeOfferedTokens();&#xA;&#x9;&#x9;allTokens->insert(allTokens->end(), vec->begin(), vec->end());&#xA;&#x9;}&#xA;&#xA;&#x9;DEBUG_INFO(((this->getNode() == nullptr) ? &quot;Anonymous node&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'&quot;)) &lt;&lt; &quot; retrieved a total number of &quot; &lt;&lt; allTokens->size() &lt;&lt; &quot; offered tokens from incoming edges.&quot;)&#xA;&#xA;&#x9;return allTokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="sendOffers" ordered="false">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (tokens->size() > 0) &#xA;&#x9;{&#xA;        // *** Send all outgoing offers concurrently. ***&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > outgoingEdgeList = this->getOutgoingEdges();&#xA;        for(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> outgoingEdge : *outgoingEdgeList)&#xA;        {&#xA;&#x9;&#x9;auto target=outgoingEdge->getTarget().lock();&#xA;&#x9;&#x9;if(!target){&#xA;&#x9;&#x9;&#x9;DEBUG_WARNING(&quot;Target activation is nullptr for &quot; &lt;&lt; (((outgoingEdge->getEdge() == nullptr) || (outgoingEdge->getEdge()->getName() == &quot;&quot;)) ? &quot;anonymous edge!&quot; : (outgoingEdge->getEdge()->eClass()->getName() + &quot; '&quot; + outgoingEdge->getEdge()->getName() + &quot;'!&quot;)))&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if(! (target->getNode()))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_WARNING(&quot;Node for target activation is nullptr for &quot; &lt;&lt; (((outgoingEdge->getEdge() == nullptr) || (outgoingEdge->getEdge()->getName() == &quot;&quot;)) ? &quot;anonymous edge!&quot; : (outgoingEdge->getEdge()->eClass()->getName() + &quot; '&quot; + outgoingEdge->getEdge()->getName() + &quot;'!&quot;)))&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Sending offer to &quot; &lt;&lt; target->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; target->getNode()->getName() &lt;&lt; &quot;' with &quot;&lt;&lt;tokens->size()&lt;&lt;&quot; token(s).&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;            outgoingEdge->sendOffer(tokens);&#xA;        }&#xA;    }"/>
          </eAnnotations>
          <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="#ifndef NDEBUG&#xA;&#x9;if (this->isRunning())&#xA;&#x9;{&#xA;     &#x9;&#x9;DEBUG_INFO(&quot;Terminating &quot; &lt;&lt; ((this->getNode() == nullptr) ? &quot;anonymous node.&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'.&quot;)))  &#xA;&#x9;}&#xA;#endif&#xA;&#xA;this->setRunning(false);&#xA;this->getHeldTokens()->clear();&#xA;&#xA;&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getRunning();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getRunning" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->isRunning();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addOutgoingEdge" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;if (edge->getSource().lock().get() != this)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;edge->setSource(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;this->getOutgoingEdges()->push_back(edge);"/>
          </eAnnotations>
          <eParameters name="edge" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eOperations name="addIncomingEdge" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;if (edge->getTarget().lock().get() != this)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;edge->setTarget(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;}&#xD;&#xA;    this->getIncomingEdges()->push_back(edge);"/>
          </eAnnotations>
          <eParameters name="edge" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="createEdgeInstances" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return (edgeInstances->getSource().lock().get() ==this);"/>
          </eAnnotations>
          <eParameters name="edgeInstances" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eOperations name="getActivityExecution" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityExecution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#xA;&#x9;auto group=this->getGroup().lock();&#xA;&#x9;if(group)&#xA;&#x9;{&#xA;&#x9;&#x9;return group->retrieveActivityExecution();&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;std::cout &lt;&lt; __PRETTY_FUNCTION__  &lt;&lt; std::endl;&#xA;&#x9;&#x9;throw &quot;empty group!&quot;;&#xA;&#x9;}&#xA;&#xA;&#x9;return std::shared_ptr&lt;fUML::Semantics::Activities::ActivityExecution>();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getExecutionContext" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getActivityExecution()->getContext();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getExecutionLocus" ordered="false" lowerBound="1" eType="#//Semantics/Loci/Locus">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getActivityExecution()->getLocus();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (node == this->getNode())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return getThisActivityNodeActivationPtr();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return nullptr;&#xD;&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="addToken" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (!token->isWithdrawn())&#xA;{&#xA;&#x9;token->withdraw();&#xA;&#x9;//token = token->_copy();&#xA;&#x9;if(token->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::FORKEDTOKEN_CLASS)&#xA;&#x9;{&#xA;&#x9;&#x9;token = token->_copy();&#xA;&#x9;}&#xA;&#x9;&#x9;&#xA;}&#xA;&#xA;token->setHolder(getThisActivityNodeActivationPtr());&#xA;token->setWithdrawn(false);&#xA;&#xA;DEBUG_INFO(((this->getNode() == nullptr) ? &quot;Anonymous node &quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;' &quot;)) &lt;&lt; &quot; : Adding token&quot; &lt;&lt; ((token->getValue() == nullptr) ? &quot; with no value&quot; :  (&quot; with value : &quot; + token->getValue()->toString())) &lt;&lt; &quot;.&quot;)&#xA;&#xA;this->getHeldTokens()->push_back(token);"/>
          </eAnnotations>
          <eParameters name="token" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="removeToken" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > heldTokenList = this->getHeldTokens();&#xA;&#x9;std::vector&lt;std::shared_ptr&lt;fUML::Semantics::Activities::Token>>::iterator iter = heldTokenList->begin();&#xA;&#x9;std::vector&lt;std::shared_ptr&lt;fUML::Semantics::Activities::Token>>::iterator end = heldTokenList->end();&#xA;&#xA;&#x9;int i = 0;&#xA;&#x9;while (iter != end)&#xA;&#x9;{&#xA;&#x9;&#x9;i++;&#xA;&#x9;&#x9;if (*iter == token)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Removing token from &quot; &lt;&lt; ((this->getNode() == nullptr) ? &quot;anonymous node&quot; : (this->getNode()->eClass()->getName() + &quot; '&quot; + this->getNode()->getName() + &quot;'.&quot;)) &lt;&lt; ((token->getValue() == nullptr) ? &quot; with no value&quot; : (&quot; with value : &quot; + token->getValue()->toString())) &lt;&lt; &quot;.&quot;)&#xA;&#xA;&#x9;&#x9;&#x9;this->getHeldTokens()->erase(iter);&#xA;&#x9;&#x9;&#x9;return i;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;iter++;&#xA;&#x9;}&#xA;&#xA;&#x9;return 0;"/>
          </eAnnotations>
          <eParameters name="token" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="addTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="for(std::shared_ptr&lt;fUML::Semantics::Activities::Token> token: *tokens)&#xA;    {&#xA;        this->addToken(token);&#xA;    }"/>
          </eAnnotations>
          <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="takeTokens" ordered="false" lowerBound="1" upperBound="-1"
            eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens = this->getTokens();&#xA;    this->clearTokens();&#xA;&#xA;    return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="clearTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    while (this->getHeldTokens()->size() > 0) {&#xD;&#xA;        this->getHeldTokens()->at(0)->withdraw();&#xD;&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > heldTokens = this->getHeldTokens();&#xA;    for (unsigned int i = 0; i &lt; heldTokens->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> heldToken = heldTokens->at(i);&#xA;        tokens->push_back(heldToken);&#xA;    }&#xA;&#xA;    return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="suspend" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;auto group=this->getGroup().lock();&#xA;&#x9;if(group)&#xA;&#x9;{&#xA;&#x9;&#x9;group->suspend(getThisActivityNodeActivationPtr());&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_WARNING(&quot;Activity node activation group is empty!&quot;)&#xA;&#x9;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="resume" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;auto group=this->getGroup().lock();&#xA;&#x9;if(group)&#xA;&#x9;{&#xA;&#x9;&#x9;group->resume(getThisActivityNodeActivationPtr());&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_WARNING(&quot;Activity node activation group is empty!&quot;)&#xA;&#x9;}&#xA;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="outgoingEdges" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/ActivityEdgeInstance" eOpposite="#//Semantics/Activities/ActivityEdgeInstance/source"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="incomingEdges" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/ActivityEdgeInstance" eOpposite="#//Semantics/Activities/ActivityEdgeInstance/target"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="heldTokens" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/Token" containment="true"
            eOpposite="#//Semantics/Activities/Token/holder"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="group" ordered="false"
            lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivationGroup"
            eOpposite="#//Semantics/Activities/ActivityNodeActivationGroup/nodeActivations"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="node" ordered="false"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="running" ordered="false"
            lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActivityNodeActivationGroup">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityEdgeInstance.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityNodeActivationGroup.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityParameterNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ControlNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/PinActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ActionsPackage.hpp&quot;&#xA;#include &quot;uml/umlPackage.hpp&quot;&#xA;#include &quot;uml/Action.hpp&quot;&#xA;#include &quot;uml/ActivityEdge.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;"/>
        </eAnnotations>
        <eOperations name="run" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;{&#xA;&#x9;&#x9;auto endIter=activations->end();&#xA;&#x9;&#x9;for (auto it = activations->begin(); it != endIter; it++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = (*it);&#xA;&#x9;&#x9;&#x9;activation->run();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;    DEBUG_INFO(&quot;Checking for enabled nodes.&quot;)&#xA;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > enabledActivations(new Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation>());&#xA;    {&#xA;        auto endIter=activations->end();&#xA;&#x9;&#x9;for (auto it = activations->begin(); it != endIter; ++it)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = (*it);&#xA;&#xA;&#x9;&#x9;&#x9;const int class_id = activation->eClass()->getClassifierID();&#xA;&#xA;&#x9;&#x9;&#x9;if(!(class_id == fUML::Semantics::Actions::ActionsPackage::INPUTPINACTIVATION_CLASS &#xA;&#x9;&#x9;&#x9;|| class_id == fUML::Semantics::Actions::ActionsPackage::OUTPUTPINACTIVATION_CLASS &#xA;&#x9;&#x9;&#x9;|| class_id == fUML::Semantics::Actions::ActionsPackage::EXPANSIONNODEACTIVATION_CLASS))&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > edges = activation->getIncomingEdges();&#xA;&#x9;&#x9;&#x9;&#x9;bool isEnabled = this->checkIncomingEdges(edges, activations);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;// For an action activation, also consider incoming edges to&#xA;&#x9;&#x9;&#x9;&#x9;// input pins&#xA;&#x9;&#x9;&#x9;&#x9;if (isEnabled)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action>(activation->getNode());&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(action != nullptr) // if there is no action (e.g anonymous Fork), then there is also no pins&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = action->getInput();&#xA;&#x9;&#x9;&#x9;&#x9;        auto pinEndIter=inputPins->end();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for (auto pinIt = inputPins->begin(); pinIt != pinEndIter; ++pinIt)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> inputPin = (*pinIt);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Actions::ActionActivation> actionActivation = std::dynamic_pointer_cast&lt;fUML::Semantics::Actions::ActionActivation>(activation);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > inputEdges = actionActivation->retrievePinActivation(inputPin)->getIncomingEdges();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;isEnabled = isEnabled &amp;&amp; this->checkIncomingEdges(inputEdges, activations);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;if (isEnabled)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(activation->getNode())&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(activation->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; activation->getNode()->getName()&lt;&lt; &quot;' is enabled.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Anonymous node is enabled.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;enabledActivations->push_back(activation);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;    }&#xA;&#xA;    // *** Send offers to all enabled nodes concurrently. ***&#xA;    {&#xA;&#x9;&#x9;auto endIter=enabledActivations->end();&#xA;&#x9;&#x9;for (auto it = enabledActivations->begin(); it != endIter; it++)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ActivityNodeActivation> (*it);&#xA;&#x9;&#x9;&#x9;if(activation->getNode())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Sending offer to &quot; &lt;&lt; activation->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; activation->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Sending offer to anonymous node&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;activation->receiveOffer();&#xA;&#x9;&#x9;}&#xA;    }"/>
          </eAnnotations>
          <eParameters name="activations" ordered="false" upperBound="-1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="checkIncomingEdges" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    unsigned int j = 0;&#xD;&#xA;    bool notFound = true;&#xD;&#xA;&#xD;&#xA;    while (j &lt; incomingEdges->size() &amp;&amp; notFound) {&#xD;&#xA;        unsigned int k = 0;&#xD;&#xA;        while (k &lt; activations->size() &amp;&amp; notFound) {&#xD;&#xA;            if (activations->at(k)->isSourceFor(&#xD;&#xA;                        incomingEdges->at(j))) {&#xD;&#xA;                notFound = false;&#xD;&#xA;            }&#xD;&#xA;            k = k + 1;&#xD;&#xA;        }&#xD;&#xA;        j = j + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return notFound;"/>
          </eAnnotations>
          <eParameters name="incomingEdges" ordered="false" upperBound="-1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
          <eParameters name="activations" ordered="false" upperBound="-1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="activate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->createNodeActivations(nodes);&#xA;    this->createEdgeInstance(edges);    &#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > nodeActiviations = this->getNodeActivations();&#xA;    this->run(nodeActiviations);"/>
          </eAnnotations>
          <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
          <eParameters name="edges" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge"/>
        </eOperations>
        <eOperations name="runNodes" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > nodeActivations(new Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation>());&#xA;&#xA;    for (unsigned int i = 0; i &lt; nodes->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::ActivityNode> node = nodes->at(i);&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> nodeActivation = this->getNodeActivation(node);&#xA;        if (nodeActivation != nullptr) &#xA;        {&#xA;            nodeActivations->push_back(nodeActivation);&#xA;        }&#xA;    }&#xA;&#xA;    this->run(nodeActivations);"/>
          </eAnnotations>
          <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="terminateAll" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation>> nodeActivations = this->getNodeActivations();&#xA;for (std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> nodeActivation : *nodeActivations) &#xA;{&#xA;          nodeActivation->terminate();&#xA;}&#xA;&#xA;this->getSuspendedActivations()->clear();&#xA;&#xA;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance>> edgeInstances = this->getEdgeInstances();&#xA;for(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edgeInstance : *edgeInstances)&#xA;{&#xA;&#x9;edgeInstance->getOffers()->clear();&#xA;}"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="for (unsigned int i = 0; i &lt; nodes->size(); i++) &#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::ActivityNode> node = nodes->at(i);&#xA;        if(node != nullptr)&#xA;        {&#xA;        &#x9;DEBUG_INFO(&quot;Creating &quot; &lt;&lt; node->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; node->getName() &lt;&lt; &quot;'.&quot;)&#xA;        &#x9;this->createNodeActivation(node);&#xA;        }&#xA;        else&#xA;        {&#xA;            DEBUG_WARNING(&quot;A node was null!&quot;)&#xA;        }&#xA;    }"/>
          </eAnnotations>
          <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="createNodeActivation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation>  activation = std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ActivityNodeActivation> (this->retrieveActivityExecution()->getLocus()->getFactory()->instantiateVisitor(node));&#xA;&#xA;    if(activation!=nullptr)&#xA;    {&#xA;    &#x9;activation->setNode(node);&#xA;    &#x9;activation->setRunning(false);&#xA;    &#x9;this->addNodeActivation(activation);&#xA;    &#x9;activation->createNodeActivations();&#xA;    }&#xA;    else&#xA;    {&#xA;        DEBUG_ERROR(&quot;Activation is nullptr! Failed to create node!&quot;)&#xA;    }&#xA;    return activation;"/>
          </eAnnotations>
          <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="addNodeActivation" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="activation->setGroup(getThisActivityNodeActivationGroupPtr());&#xD;&#xA;    this->getNodeActivations()->push_back(activation);"/>
          </eAnnotations>
          <eParameters name="activation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation = nullptr;&#xA;&#xA;    int nodeMetaElementID = node->getMetaElementID();&#xA;    if ((nodeMetaElementID == uml::umlPackage::PIN_CLASS) || &#xA;&#x9;&#x9;(nodeMetaElementID == uml::umlPackage::INPUTPIN_CLASS) ||&#xA;&#x9;&#x9;(nodeMetaElementID == uml::umlPackage::OUTPUTPIN_CLASS) ||&#xA;&#x9;&#x9;(nodeMetaElementID == uml::umlPackage::ACTIONINPUTPIN_CLASS) ||&#xA;&#x9;&#x9;(nodeMetaElementID == uml::umlPackage::VALUEPIN_CLASS))&#xA;&#x9;{&#xA;&#x9;&#x9;&#x9;auto containingNodeActivation=this->getContainingNodeActivation().lock();&#xA;&#x9;&#x9;&#x9;if(containingNodeActivation)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;activation = containingNodeActivation->retrievePinActivation(std::dynamic_pointer_cast&lt;uml::Pin>(node));&#xA;&#x9;&#x9;&#x9;}&#xA;  &#x9;  }&#xA;&#xA;    if (activation == nullptr) &#xA;    {&#xA;        unsigned int i = 0;&#xA;        std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation>> nodeActivations=this->getNodeActivations();&#xA;        unsigned int nodeActivationsSize= nodeActivations->size();&#xA;        while ((!activation) &amp;&amp; (i &lt; nodeActivationsSize))&#xA;        {&#xA;        &#x9;activation = nodeActivations->at(i)->getNodeActivation(node);&#xA;            i = i + 1;&#xA;        }&#xA;    }&#xA;&#xA;    return activation;"/>
          </eAnnotations>
          <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
        </eOperations>
        <eOperations name="createEdgeInstance" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="for (unsigned int i = 0; i &lt; edges->size(); i++) &#xA;&#x9;{&#xA;        std::shared_ptr&lt;uml::ActivityEdge> edge = edges->at(i);&#xA;&#xA;&#x9;DEBUG_INFO(&quot;Creating edge &quot; &#xA;&#x9;&#x9;&lt;&lt; ((edge->getName() != &quot;&quot;) ? (&quot;'&quot; + edge->getName() + &quot;' &quot;) : &quot;&quot;)&#xA;&#x9;&#x9;&lt;&lt; &quot;from &quot;&#xA;&#x9;&#x9;&lt;&lt; edge->getSource()->getName()&#xA;                &lt;&lt; &quot; to &quot;&#xA;                &lt;&lt; edge->getTarget()->getName()&#xA;                 &lt;&lt; &quot;.&quot;)&#xA;&#xA;        std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edgeInstance=fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityEdgeInstance();&#xA;        edgeInstance->setEdge(edge);&#xA;&#xA;        this->addEdgeInstance(edgeInstance);&#xA;        this->getNodeActivation(edge->getSource())->addOutgoingEdge(edgeInstance);&#xA;        this->getNodeActivation(edge->getTarget())->addIncomingEdge(edgeInstance);&#xA;    }&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > nodeActivations = this->getNodeActivations();&#xA;    for (unsigned int i = 0; i &lt; nodeActivations->size(); i++) {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> nodeActivation = nodeActivations->at(i);&#xA;        nodeActivation->createEdgeInstances();&#xA;    }"/>
          </eAnnotations>
          <eParameters name="edges" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge"/>
        </eOperations>
        <eOperations name="addEdgeInstance" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="instance->setGroup(getThisActivityNodeActivationGroupPtr());&#xD;&#xA;    this->getEdgeInstances()->push_back(instance);"/>
          </eAnnotations>
          <eParameters name="instance" ordered="false" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eOperations name="retrieveActivityExecution" ordered="false" lowerBound="1"
            eType="#//Semantics/Activities/ActivityExecution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityExecution> activityExecution = this->getActivityExecution().lock();&#xA;    if (!activityExecution)&#xA;    {&#xA;    &#x9;auto activation=this->getContainingNodeActivation().lock();&#xA;    &#x9;if(activation)&#xA;    &#x9;{&#xA;    &#x9;&#x9;auto group=activation->getGroup().lock();&#xA;    &#x9;&#x9;if(group)&#xA;    &#x9;&#x9;{&#xA;    &#x9;&#x9;&#x9;activityExecution = group->retrieveActivityExecution();&#xA;    &#x9;&#x9;}&#xA;    &#x9;&#x9;else&#xA;    &#x9;&#x9;{&#xA;                &#x9;&#x9;DEBUG_ERROR(&quot;Group is nullptr! Failed to retrieve activity execution!&quot;)&#xA;                &#x9;&#x9;throw &quot;invalid group&quot;;&#xA;    &#x9;&#x9;}&#xA;    &#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;            &#x9;DEBUG_ERROR(&quot;Activation is nullptr! Failed to retrieve activity execution!&quot;)&#xA;            &#x9;throw &quot;invalid activation&quot;;&#xA;&#x9;}&#xA;    }&#xA;    return activityExecution;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getOutputParameterNodeActivations" ordered="false" lowerBound="1"
            upperBound="-1" eType="#//Semantics/Activities/ActivityParameterNodeActivation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation> > parameterNodeActivations(new Bag&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > nodeActivations = this->getNodeActivations();&#xA;&#x9;for (std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> activation : *nodeActivations)&#xA;&#x9;{&#xA;&#x9;&#x9;if (activation->eClass() == fUML::Semantics::Activities::ActivitiesPackage::eInstance()->getActivityParameterNodeActivation_Class())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;if (activation->getIncomingEdges()->size() > 0)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;parameterNodeActivations->push_back(std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ActivityParameterNodeActivation>(activation));&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return parameterNodeActivations;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="resume" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Resuming &quot; &lt;&lt; ((activation->getNode() == nullptr) ? &quot;anonymous node.&quot; : (&quot;'&quot; + activation->getNode()->getName() + &quot;'.&quot;)))&#xA;&#xA;    bool found = false;&#xA;    unsigned int i = 0;&#xA;    while (!found &amp;&amp; i &lt; this->getSuspendedActivations()->size()) {&#xA;        if (this->getSuspendedActivations()->at(i) == activation) {&#xA;            this->getSuspendedActivations()->erase(this->getSuspendedActivations()->begin() + i);&#xA;            found = true;&#xA;        }&#xA;        i = i + 1;&#xA;    }&#xA;    if (!this->isSuspended()) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Actions::StructuredActivityNodeActivation> containingNodeActivation = this->getContainingNodeActivation().lock();&#xA;        if (containingNodeActivation != nullptr) &#xA;        {&#xA;            containingNodeActivation->resume();&#xA;        }&#xA;    }"/>
          </eAnnotations>
          <eParameters name="activation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="suspend" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Suspending &quot; &lt;&lt; ((activation->getNode() == nullptr) ? &quot;anonymous node.&quot; : (&quot;'&quot; + activation->getNode()->getName() + &quot;'.&quot;)))&#xA;&#xA;    if (!this->isSuspended()) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Actions::StructuredActivityNodeActivation> containingNodeActivation = this->getContainingNodeActivation().lock();&#xA;        if (containingNodeActivation != nullptr)&#xA;        {&#xA;            containingNodeActivation->suspend();&#xA;        }&#xA;    }&#xA;    this->getSuspendedActivations()->push_back(activation);"/>
          </eAnnotations>
          <eParameters name="activation" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="isSuspended" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    return this->getSuspendedActivations()->size() > 0;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="hasSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool hasSource = false;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityNodeActivation> > activations = this->getNodeActivations();&#xA;    unsigned int i = 0;&#xA;    while (!hasSource &amp;&amp; i &lt; activations->size()) &#xA;    {&#xA;        hasSource = activations->at(i)->isSourceFor(edgeInstance);&#xA;        i = i + 1;&#xA;    }&#xA;    return hasSource;"/>
          </eAnnotations>
          <eParameters name="edgeInstance" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityEdgeInstance"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="edgeInstances" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/ActivityEdgeInstance" containment="true"
            eOpposite="#//Semantics/Activities/ActivityEdgeInstance/group"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="nodeActivations" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/ActivityNodeActivation"
            containment="true" eOpposite="#//Semantics/Activities/ActivityNodeActivation/group"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="activityExecution"
            eType="#//Semantics/Activities/ActivityExecution" eOpposite="#//Semantics/Activities/ActivityExecution/activationGroup"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="containingNodeActivation"
            ordered="false" eType="#//Semantics/Actions/StructuredActivityNodeActivation"
            eOpposite="#//Semantics/Actions/StructuredActivityNodeActivation/activationGroup"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="suspendedActivations"
            ordered="false" upperBound="-1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ActivityParameterNodeActivation"
          eSuperTypes="#//Semantics/Activities/ObjectNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ForkedToken.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xA;#include &quot;uml/ActivityParameterNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (this->getNode()->getIncoming()->size() == 0) &#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Fireing input ActivityParameterNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Parameter> parameter = (std::dynamic_pointer_cast&lt;uml::ActivityParameterNode>(this->getNode()))->getParameter();&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue = this->getActivityExecution()->getParameterValue(parameter);&#xA;&#xA;&#x9;&#x9;if (parameterValue != nullptr) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Parameter contains &quot;&lt;&lt; parameterValue->getValues()->size() &lt;&lt; &quot; value(s).&quot;)&#xA;&#x9;&#x9;&#x9;Bag&lt;Any>* valueList = parameterValue->getValues().get();&#xA;&#x9;&#x9;&#x9;auto factory = fUML::Semantics::Activities::ActivitiesFactory::eInstance();&#xA;            &#x9;&#x9;const auto size = valueList->size();&#xA;&#xA;            &#x9;&#x9;std::shared_ptr&lt;Any> value;&#xA;&#x9;&#x9;&#x9;for (unsigned int i = 0; i&lt; size; i++)&#xA;&#x9;&#x9;&#x9;{&#xA;                &#x9;&#x9;&#x9;value = (*valueList)[i];&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> token = factory->createObjectToken();&#xA;&#x9;&#x9;&#x9;&#x9;token->setValue(value);&#xA;&#x9;&#x9;&#x9;&#x9;this->addToken(token);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;this->sendUnofferedTokens();&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;else &#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Fireing output ActivityParameterNode '&quot; &lt;&lt; this->getNode()->getName() + &quot;'.&quot;)&#xA;&#x9;&#x9;this->addTokens(incomingTokens);&#xA;&#x9;&#x9;if (incomingTokens->at(0)->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::FORKEDTOKEN_CLASS) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ForkedToken>(incomingTokens->at(0))->getBaseToken()->setHolder(getThisActivityParameterNodeActivationPtr());&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="clearTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if (this->getNode()->getIncoming()->size() == 0) {&#xA;        fUML::Semantics::Activities::ObjectNodeActivationImpl::clearTokens();&#xA;    }"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="CentralBufferNodeActivation" eSuperTypes="#//Semantics/Activities/ObjectNodeActivation">
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;DEBUG_INFO(&quot;Firing CentralBufferNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;this->addTokens(incomingTokens);&#xA;this->sendUnofferedTokens();"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ControlNodeActivation" abstract="true"
          eSuperTypes="#//Semantics/Activities/ActivityNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value=" #include &quot;uml/ActivityNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if (this->getNode() != nullptr) {&#xA;        DEBUG_INFO(&quot;Firing ControlNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;    }&#xA;&#xA;    this->sendOffers(incomingTokens);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ControlToken" eSuperTypes="#//Semantics/Activities/Token">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return (other->getMetaElementID() == fUML::Semantics::Activities::ActivitiesPackage::CONTROLTOKEN_CLASS);"/>
          </eAnnotations>
          <eParameters name="other" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;return true;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new control token.&#xA;&#xA;return fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createControlToken();"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DataStoreNodeActivation" eSuperTypes="#//Semantics/Activities/CentralBufferNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="//#include &quot;fUML/Semantics/Values/Value.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="removeToken" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="int i = fUML::Semantics::Activities::ObjectNodeActivationImpl::removeToken(token);&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;if (this->isRunning()) {&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> copied_token = std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::Token>(token->_copy());&#xA;&#x9;&#x9;&#x9;fUML::Semantics::Activities::ObjectNodeActivationImpl::addToken(copied_token);&#xA;&#x9;&#x9;&#x9;this->sendUnofferedTokens();&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;return i;"/>
          </eAnnotations>
          <eParameters name="token" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="addToken" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Any>value = token->getValue();&#xA;&#x9;&#x9;&#xA;&#x9;&#x9;bool isUnique = true;&#xA;&#x9;&#x9;if (value != nullptr) &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;/* Curretly not supported&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > heldTokens = this->getTokens();&#xA;&#x9;&#x9;&#x9;unsigned int i = 0;&#xA;&#x9;&#x9;&#x9;while (isUnique &amp;&amp; i &lt; heldTokens->size()) &#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;isUnique = !(heldTokens->at(i)->getValue()->equals(value));&#xA;&#x9;&#x9;&#x9;&#x9;i++;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;if (isUnique) {&#xA;&#x9;&#x9;&#x9;fUML::Semantics::Activities::ObjectNodeActivationImpl::addToken(token);&#xA;&#x9;&#x9;}"/>
          </eAnnotations>
          <eParameters name="token" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="DecisionNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Executor.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/ParameterValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/Token.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Values/Value.hpp&quot;&#xA;#include &quot;uml/ActivityEdge.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/DecisionNode.hpp&quot;&#xA;#include &quot;uml/ObjectFlow.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xA;#include &quot;uml/umlFactory.hpp&quot;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="getDecisionValues" ordered="false" upperBound="-1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Any> decisionInputValue = this->getDecisionInputFlowValue();&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Any>> decisionValues(new Bag&lt;Any>());&#xA;&#xA;    for (unsigned int i = 0; i &lt; incomingTokens->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> incomingToken = incomingTokens->at(i);&#xA;    &#x9;std::shared_ptr&lt;Any> value = this->executeDecisionInputBehavior(incomingToken->getValue(), decisionInputValue);&#xA;        decisionValues->push_back(value);&#xA;    }&#xA;&#xA;#ifndef NDEBUG&#xA;&#x9;std::string decisionValuesDebugInfoMessage;&#xA;&#x9;for (unsigned int i = 0; i &lt; decisionValues->size(); i++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Any> decisionValue = decisionValues->at(i);&#xA;&#x9;&#x9;if (decisionValue)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;decisionValuesDebugInfoMessage += &quot;decisionValues[&quot; + std::to_string(i) + &quot;] = &quot; + decisionValue->toString() + &quot; ; &quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;decisionValuesDebugInfoMessage += &quot;decisionValues[&quot; + std::to_string(i) + &quot;] = nullptr ; &quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;#endif&#xA;&#xA;    return decisionValues;"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="executeDecisionInputBehavior" ordered="false" lowerBound="1"
            eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::DecisionNode> decisionNode = this->getDecisionNode();&#xA;&#x9;std::shared_ptr&lt;uml::Behavior> decisionInputBehavior = nullptr;&#xA;&#xA;    if(decisionNode != nullptr)&#xA;    {&#xA;        decisionInputBehavior = decisionNode->getDecisionInput();&#xA;    }&#xA;&#xA;    std::shared_ptr&lt;Any> decisionInputResult = nullptr;&#xA;&#xA;    if (decisionInputBehavior == nullptr)&#xA;    {&#xA;        if (decisionInputValue != nullptr)&#xA;        {&#xA;            decisionInputResult = decisionInputValue;&#xA;        }&#xA;        else&#xA;        {&#xA;            decisionInputResult = inputValue;&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#x9;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>> inputParameterValues(new Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue>());&#xA;&#xA;        unsigned int i = 0;&#xA;        unsigned int j = 0;&#xA;        while (((j == 0) || ((j == 1) &amp;&amp; (decisionInputValue != nullptr)))&#xA;               &amp;&amp; (i &lt; decisionInputBehavior->getOwnedParameter()->size()))&#xA;        {&#xA;        &#x9;std::shared_ptr&lt;uml::Parameter> parameter = decisionInputBehavior->getOwnedParameter()->at(i);&#xA;            if (parameter->getDirection() == uml::ParameterDirectionKind::IN&#xA;                    || parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xA;            {&#xA;            &#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> inputParameterValue(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue());&#xA;                inputParameterValue->setParameter(parameter);&#xA;&#xA;                j = j + 1;&#xA;                if (j == 1 &amp;&amp; inputValue != nullptr)&#xA;                {&#xA;                    inputParameterValue->getValues()->push_back(inputValue);&#xA;                }&#xA;                else&#xA;                {&#xA;                    inputParameterValue->getValues()->push_back(decisionInputValue);&#xA;                }&#xA;&#xA;                inputParameterValues->add(inputParameterValue);&#xA;            }&#xA;            i = i + 1;&#xA;        }&#xA;&#xA;        std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > outputParameterValues = this->getExecutionLocus()->getExecutor()->execute(decisionInputBehavior, this->getExecutionContext(), inputParameterValues);&#xA;&#xA;        decisionInputResult = outputParameterValues->at(0)->getValues()->at(0);&#xA;    }&#xA;&#xA;    return decisionInputResult;"/>
          </eAnnotations>
          <eParameters name="inputValue" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
          <eParameters name="decisionInputValue" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="getDecisionInputFlowValue" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> decisionInputFlowInstance = this->getDecisionInputFlowInstance();&#xA;&#xA;&#x9;std::shared_ptr&lt;Any> value = nullptr;&#xA;    if (decisionInputFlowInstance != nullptr) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens = decisionInputFlowInstance->takeOfferedTokens();&#xA;        if (tokens->size() > 0) &#xA;        {&#xA;            value = tokens->at(0)->getValue();&#xA;        }&#xA;    }&#xA;&#xA;    return value;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getDecisionInputFlowInstance" ordered="false" eType="#//Semantics/Activities/ActivityEdgeInstance">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::ActivityEdge>  decisionInputFlow = this->getDecisionNode()->getDecisionInputFlow();&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edgeInstance = nullptr;&#xA;    if (decisionInputFlow != nullptr) &#xA;    {&#xA;        unsigned int i = 0;&#xA;        while ((edgeInstance == nullptr) &amp;&amp; (i &lt; this->getIncomingEdges()->size())) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> incomingEdge = this->getIncomingEdges()->at(i);&#xA;            if (incomingEdge->getEdge() == decisionInputFlow) &#xA;            {&#xA;                edgeInstance = incomingEdge;&#xA;            }&#xA;            i = i + 1;&#xA;        }&#xA;    }&#xA;&#xA;    return edgeInstance;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="test" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="bool guardResult = true;&#xA;    if (guard != nullptr) &#xA;    {&#xA;&#x9;&#x9;// Determine what kind of ValueSpecification is present&#xA;&#x9;&#x9;switch(guard->getMetaElementID())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALBOOLEAN_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;bool guardValue = guard->booleanValue();&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;bool booleanValue = value->get&lt;bool>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = (guardValue == booleanValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALINTEGER_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;int guardValue = guard->integerValue();&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int integerValue = value->get&lt;int>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = (guardValue == integerValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALREAL_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;double guardValue = guard->realValue();&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;double realValue = value->get&lt;double>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = (guardValue == realValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALSTRING_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::string guardValue = guard->stringValue();&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::string stringValue = value->get&lt;std::string>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = (guardValue == stringValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALUNLIMITEDNATURAL_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;int guardValue = guard->integerValue();&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;int integerValue = value->get&lt;int>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = (guardValue == integerValue);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;guardResult = false;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case uml::umlPackage::INSTANCEVALUE_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;Currently not supported&#xA;&#x9;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_WARNING(&quot;Evaluation of InstanceValues used for ActivityEdge guards is currently not supported!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Unknown kind of ValuesSpecification used for ActivityEdge guard!&quot;)&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;    }&#xA;    return guardResult;"/>
          </eAnnotations>
          <eParameters name="guard" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
        </eOperations>
        <eOperations name="removeJoinedControlTokens" ordered="false" upperBound="-1"
            eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > removedControlTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#xA;    if (this->hasObjectFlowInput()) &#xA;    {&#xA;        unsigned int i = 0;&#xA;        while (i &lt; incomingTokens->size()) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = incomingTokens->at(i);&#xA;            if (token->isControl()) &#xA;            {&#xA;                removedControlTokens->push_back(token);&#xA;                incomingTokens->erase(incomingTokens->begin()+i);&#xA;                i = i - 1;&#xA;            }&#xA;            i = i + 1;&#xA;        }&#xA;    }&#xA;&#xA;    return removedControlTokens;"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="hasObjectFlowInput" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::ActivityEdge> decisionInputFlow = this->getDecisionNode()->getDecisionInputFlow();&#xA;&#xA;    bool isObjectFlow = false;&#xA;    unsigned int i = 0;&#xA;    while (!isObjectFlow &amp;&amp; i &lt; this->getIncomingEdges()->size()) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::ActivityEdge> edge = this->getIncomingEdges()->at(i)->getEdge();&#xA;        isObjectFlow = (edge != decisionInputFlow) &amp;&amp; (std::dynamic_pointer_cast&lt;uml::ObjectFlow>(edge) != nullptr);&#xA;        i = i + 1;&#xA;    }&#xA;    return isObjectFlow;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;uml::ObjectFlow> decisionInputFlow = this->getDecisionNode()->getDecisionInputFlow();&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > allTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > incomingEdges = this->getIncomingEdges();&#xA;    for (unsigned int i = 0; i &lt; incomingEdges->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edgeInstance = incomingEdges->at(i);&#xA;        if (edgeInstance->getEdge() != decisionInputFlow) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens = edgeInstance->takeOfferedTokens();&#xA;            for (unsigned int j = 0; j &lt; tokens->size(); j++)&#xA;            {&#xA;                allTokens->push_back(tokens->at(j));&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    return allTokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Firing DecisionNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token>> removedControlTokens = this->removeJoinedControlTokens(incomingTokens);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Any>> decisionValues = this->getDecisionValues(incomingTokens);&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance>> outgoingEdges = this->getOutgoingEdges();&#xA;&#xA;    for (unsigned int i = 0; i &lt; outgoingEdges->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityEdgeInstance> edgeInstance = outgoingEdges->at(i);&#xA;    &#x9;std::shared_ptr&lt;uml::ValueSpecification> guard = edgeInstance->getEdge()->getGuard();&#xA;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > offeredTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;        for (unsigned int j = 0; j &lt; incomingTokens->size(); j++) &#xA;        {&#xA;        &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> incomingToken = incomingTokens->at(j);&#xA;        &#x9;std::shared_ptr&lt;Any> decisionValue = decisionValues->at(j);&#xA;            if (this->test(guard, decisionValue)) &#xA;            {&#xA;                offeredTokens->push_back(incomingToken);&#xA;            }&#xA;        }&#xA;&#xA;        if (offeredTokens->size() > 0) &#xA;        {&#xA;            for (unsigned int j = 0; j &lt; removedControlTokens->size(); j++) &#xA;            {&#xA;            &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> removedControlToken = removedControlTokens->at(j);&#xA;                offeredTokens->push_back(removedControlToken);&#xA;            }&#xA;            edgeInstance->sendOffer(offeredTokens);&#xA;        }&#xA;    }"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (this->getDecisionInputExecution() != nullptr) &#xA;{&#xA;&#x9;this->getDecisionInputExecution()->terminate();&#xA;}&#xA;&#xA;fUML::Semantics::Activities::ControlNodeActivationImpl::terminate();"/>
            <details key="doNotGenerate" value="EOperation 'terminate' is excluded from generation because it only handles termination of the decisionInputExecution of this Activation&#xA;in addition to Activities::ControlNodeActivation::terminate. As EReference 'decisionInputExecution' is excluded from generation, this&#xA;overwritten method becomes obsolete."/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="unsigned int i = 0;&#xA;    bool ready = true;&#xA;    DEBUG_INFO(&quot;DecisionNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; this->getIncomingEdges()->size() &lt;&lt; &quot;incoming edges.&quot;)&#xA;    while (ready &amp;&amp; (i &lt; this->getIncomingEdges()->size())) {&#xA;        ready = this->getIncomingEdges()->at(i)->hasOffer();&#xA;        i = i + 1;&#xA;    }&#xA;    DEBUG_INFO(&quot;DecisionNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' &quot; &lt;&lt; ((ready) ? &quot;is ready to execute.&quot; : &quot;is not ready to execute yet.&quot;))&#xA;    return ready;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="decisionInputExecution"
            ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution"
            containment="true">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="doNotGenerate" value="ERference 'decisionInputExecution' is excluded from generation because execution of the decisionInputBehavior &#xA;of the corresponding DecisionNode is handled via model-specific Executor classes."/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="decisionNode" lowerBound="1"
            eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//DecisionNode">
          <eAnnotations source="redefines" references="#//Semantics/Activities/ActivityNodeActivation/node"/>
        </eStructuralFeatures>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FlowFinalNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation"/>
      <eClassifiers xsi:type="ecore:EClass" name="ForkedToken" eSuperTypes="#//Semantics/Activities/Token">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="//NEWDEBUG&#xA;#include &quot;uml/ActivityNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return (this == otherToken.get());"/>
          </eAnnotations>
          <eParameters name="otherToken" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="withdraw" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> holder = this->getHolder().lock();    &#xA;&#xA;if (!this->isBaseTokenIsWithdrawn() &amp; !this->getBaseToken()->isWithdrawn()) {&#xA;        this->getBaseToken()->withdraw();&#xA;        this->setBaseTokenIsWithdrawn(true);&#xA;    }&#xA;&#xA;    if (this->getRemainingOffersCount() > 0) {&#xA;        this->setRemainingOffersCount(this->getRemainingOffersCount() - 1);&#xA;&#x9;//NEWDEBUG&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Holder of this forked token = &quot; &lt;&lt; (holder->getNode() == nullptr ? &quot;nullptr&quot; : (&quot;'&quot; + holder->getNode()->getName() + &quot;'&quot;)) &lt;&lt; &quot; ; remaining offers on edges for this forked token = &quot; &lt;&lt; getRemainingOffersCount())&#xA;    }&#xA;&#xA;    if (this->getRemainingOffersCount() == 0) {&#xA;&#x9;&#x9;//NEWDEBUG&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Final withdraw for this forked token (no remaining offers for this token on any edges left).&quot;)&#xA;        fUML::Semantics::Activities::TokenImpl::withdraw();&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getBaseToken()->isControl();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getValue" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return this->getBaseToken()->getValue();"/>
            <details key="const"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a copy of the base token.&#xA;&#xA;return this->getBaseToken()->_copy();"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="baseToken" ordered="false"
            eType="#//Semantics/Activities/Token"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="remainingOffersCount"
            ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="baseTokenIsWithdrawn"
            ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ForkNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ForkedToken.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include&quot;uml/ActivityNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ActivityEdgeInstance> > outgoingEdges = this->getOutgoingEdges();&#xA;    int outgoingEdgeCount = outgoingEdges->size();&#xA;&#xA;#ifndef NDEBUG&#xA;&#x9;if (this->getNode() == nullptr) &#xA;&#x9;{&#xA;        &#x9;DEBUG_INFO(&quot;Firing anonymous ForkNode. Number of incoming tokens is &quot;&lt;&lt; incomingTokens->size() &lt;&lt; &quot;.&quot;)&#xA;    &#x9;} &#xA;&#x9;else &#xA;&#x9;{&#xA;       &#x9;&#x9;DEBUG_INFO(&quot;Firing ForkNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'. Number of incoming tokens is: &quot; &lt;&lt; incomingTokens->size() &lt;&lt; &quot;.&quot;)&#xA;&#x9;}&#xA;#endif&#xA;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > forkedTokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;    for (unsigned int i = 0; i &lt; incomingTokens->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = incomingTokens->at(i);&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ForkedToken> forkedToken(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createForkedToken());&#xA;        forkedToken->setBaseToken(token);&#xA;        forkedToken->setRemainingOffersCount(outgoingEdgeCount);&#xA;        forkedToken->setBaseTokenIsWithdrawn(false);&#xA;        forkedTokens->push_back(forkedToken);&#xA;    }&#xA;&#xA;#ifndef NDEBUG&#xA;&#x9;if (this->getNode() == nullptr) &#xA;&#x9;{&#xA;        &#x9;DEBUG_INFO(&quot;Number of forked tokens of anonymous ForkNode is: &quot; &lt;&lt; forkedTokens->size() &lt;&lt; &quot;.&quot;)&#xA;    &#x9;} &#xA;&#x9;else &#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Number of forked tokens of ForkNode '&quot; &lt;&lt; this->getNode()->getName( )&lt;&lt; &quot;' is: &quot; &lt;&lt; forkedTokens->size() &lt;&lt; &quot;.&quot;)&#xA;    &#x9;}&#xA;#endif&#xA;&#xA;    this->addTokens(forkedTokens);&#xA;    this->sendOffers(forkedTokens);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    this->clearTokens();&#xA;    fUML::Semantics::Activities::ControlNodeActivationImpl::terminate();"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="InitialNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ControlToken.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;//struct null_deleter{void operator()(void const *) const { } };&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ControlToken> controlToken(fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createControlToken());&#xA;    tokens->push_back(controlToken);&#xA;    this->addTokens(tokens);&#xA;    this->sendOffers(tokens);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="JoinNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ControlToken.hpp&quot;&#xA;#include &quot;uml/ActivityNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="fire" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (this->getNode() != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Firing JoinNode '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#x9;}&#xA;&#xA;&#x9;int controlTokenID = fUML::Semantics::Activities::ActivitiesPackage::CONTROLTOKEN_CLASS;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::ControlToken>> controlTokenList(new Bag&lt;fUML::Semantics::Activities::ControlToken>());&#xA;&#xA;&#x9;Bag&lt;fUML::Semantics::Activities::Token>::iterator tokenIter = incomingTokens->begin();&#xA;&#x9;Bag&lt;fUML::Semantics::Activities::Token>::iterator tokenEnd = incomingTokens->end();&#xA;&#x9;while (tokenIter != tokenEnd)&#xA;&#x9;{&#xA;&#x9;&#x9;if ((*tokenIter)->getMetaElementID() == controlTokenID)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;controlTokenList->push_back(std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::ControlToken>(*tokenIter));&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;tokenIter++;&#xA;&#x9;}&#xA;&#xA;&#x9;DEBUG_INFO(std::to_string(controlTokenList->size()) &lt;&lt; &quot; control tokens contained within all &quot; &lt;&lt; std::to_string(incomingTokens->size()) &lt;&lt; &quot; incoming tokens.&quot;)&#xA;&#x9;if (controlTokenList->size() == incomingTokens->size()) // all incoming tokens are ControlToken -> only one token should be offered&#xA;&#x9;{&#xA;&#x9;&#x9;incomingTokens.reset(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;&#x9;incomingTokens->push_back(controlTokenList->front());&#xA;&#x9;}&#xA;&#x9;else // remove all ControlToken and offer only ObjectToken&#xA;&#x9;{&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Activities::Token>::iterator controlIter = incomingTokens->begin();&#xA;&#x9;&#x9;Bag&lt;fUML::Semantics::Activities::Token>::iterator controlEnd = incomingTokens->end();&#xA;&#x9;&#x9;while (controlIter != controlEnd)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;incomingTokens->erase(*controlIter);&#xA;&#x9;&#x9;&#x9;controlIter++;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#xA;&#x9;this->sendOffers(incomingTokens);"/>
          </eAnnotations>
          <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool ready = true;&#xD;&#xA;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;while (ready &amp;&amp; i &lt; this->getIncomingEdges()->size()) {&#xD;&#xA;&#x9;&#x9;ready = this->getIncomingEdges()->at(i)->hasOffer();&#xD;&#xA;&#x9;&#x9;i = i + 1;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return ready;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="MergeNodeActivation" eSuperTypes="#//Semantics/Activities/ControlNodeActivation"/>
      <eClassifiers xsi:type="ecore:EClass" name="ObjectNodeActivation" abstract="true"
          eSuperTypes="#//Semantics/Activities/ActivityNodeActivation">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ObjectToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/Token.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="countOfferedValues" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;int totalValueCount = 0;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (i &lt; this->getIncomingEdges()->size()) {&#xD;&#xA;        totalValueCount = totalValueCount&#xD;&#xA;                + this->getIncomingEdges()->at(i)->countOfferedValue();&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return totalValueCount;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="sendUnofferedTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens = this->getUnofferedTokens();&#xA;    this->setOfferedTokenCount(this->getOfferedTokenCount() + tokens->size());&#xA;    this->sendOffers(tokens);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="countUnofferedTokens" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if (this->getHeldTokens()->size() == 0) {&#xD;&#xA;        this->setOfferedTokenCount(0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return (this->getHeldTokens()->size() - this->getOfferedTokenCount());"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getUnofferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#xA;  const int numberUnofferedTokens=this->countUnofferedTokens(); &#xA;  int offeredTokenCount=this->getOfferedTokenCount(); &#xA;&#xA;//NEWDEBUG&#xA;  DEBUG_INFO(this->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; numberUnofferedTokens &lt;&lt; &quot; unoffered tokens.&quot;)&#xA;  DEBUG_INFO(this->getNode()->eClass()->getName() &lt;&lt; &quot; '&quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;' has &quot; &lt;&lt; offeredTokenCount &lt;&lt; &quot; offered tokens on incoming edges.&quot;)&#xA; &#xA;  Bag&lt;fUML::Semantics::Activities::Token>* heldTokenPtr = this->getHeldTokens().get(); &#xA;  Bag&lt;fUML::Semantics::Activities::Token>* tokensPtr = tokens.get();&#xA;  &#xA;  tokensPtr->insert(tokensPtr->begin(), heldTokenPtr->begin() + offeredTokenCount, heldTokenPtr->begin() + offeredTokenCount + numberUnofferedTokens);&#xA;&#xA;  return tokens; "/>
          </eAnnotations>
        </eOperations>
        <eOperations name="takeUnofferedTokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens = this->getUnofferedTokens();&#xA;&#xA;    for (unsigned int i = 0; i &lt; tokens->size(); i++) &#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = tokens->at(i);&#xA;        token->withdraw();&#xA;    }&#xA;&#xA;    return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="run" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    fUML::Semantics::Activities::ActivityNodeActivationImpl::run();&#xA;    this->setOfferedTokenCount(0);"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="sendOffers" ordered="false">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (tokens->size() == 0) &#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> token = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createObjectToken();&#xA;&#x9;&#x9;token->setHolder(getThisObjectNodeActivationPtr());&#xA;&#x9;&#x9;token->setWithdrawn(false);&#xA;&#x9;&#x9;tokens->push_back(token);&#xA;&#x9;}&#xA;&#xA;&#x9;fUML::Semantics::Activities::ActivityNodeActivationImpl::sendOffers(tokens);"/>
          </eAnnotations>
          <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="terminate" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="fUML::Semantics::Activities::ActivityNodeActivationImpl::terminate();&#xA;this->clearTokens();"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="addToken" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    if (token->getValue() == nullptr) {&#xA;        token->withdraw();&#xA;    } else {&#xA;        fUML::Semantics::Activities::ActivityNodeActivationImpl::addToken(token);&#xA;    }"/>
          </eAnnotations>
          <eParameters name="token" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="removeToken" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    int i = fUML::Semantics::Activities::ActivityNodeActivationImpl::removeToken(token);&#xA;    if (i > 0 &amp;&amp; i &lt;= this->getOfferedTokenCount()) {&#xA;        this->setOfferedTokenCount(this->getOfferedTokenCount() - 1);&#xA;    }&#xA;&#xA;    return i;"/>
          </eAnnotations>
          <eParameters name="token" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="clearTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    fUML::Semantics::Activities::ActivityNodeActivationImpl::clearTokens();&#xA;    this->setOfferedTokenCount(0);"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="offeredTokenCount"
            ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
            defaultValueLiteral="0"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ObjectToken" eSuperTypes="#//Semantics/Activities/Token">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value=" #include &quot;fUML/Semantics/Values/ValuesPackage.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return (this == other.get());"/>
          </eAnnotations>
          <eParameters name="other" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return false;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="// Return a new object token with the same value as this token.&#xA;// [Note: the holder of the copy is not set.]&#xA;&#xA;std::shared_ptr&lt;fUML::Semantics::Activities::ObjectToken> copy = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createObjectToken();&#xA;copy->setValue(this->getValue());&#xA;&#xA;return copy;"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Offer">
        <eOperations name="countOfferedVales" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    this->removeWithdrawnTokens();&#xD;&#xA;&#xD;&#xA;    int count = 0;&#xD;&#xA;    for (unsigned int i = 0; i &lt; this->getOfferedTokens()->size(); i++) {&#xD;&#xA;        if (this->getOfferedTokens()->at(i)->getValue() != nullptr) {&#xD;&#xA;            count = count + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return count;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="retrieveOfferedTokens" ordered="false" upperBound="-1"
            eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->removeWithdrawnTokens();&#xA;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > tokens(new Bag&lt;fUML::Semantics::Activities::Token>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Semantics::Activities::Token> > offeredTokens = this->getOfferedTokens();&#xA;    for (unsigned int i = 0; i &lt; this->getOfferedTokens()->size(); i++)&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::Activities::Token> offeredToken = offeredTokens->at(i);&#xA;        tokens->push_back(offeredToken);&#xA;    }&#xA;&#xA;    return tokens;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="removeOfferedValues" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    int n = count;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (n > 0) {&#xD;&#xA;        if (this->getOfferedTokens()->at(i)->getValue() != nullptr) {&#xD;&#xA;            this->getOfferedTokens()->erase(this->getOfferedTokens()->begin() + i);&#xD;&#xA;        } else {&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;        n = n - 1;&#xD;&#xA;    }"/>
          </eAnnotations>
          <eParameters name="count" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="removeWithdrawnTokens" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value=" std::shared_ptr&lt; Bag&lt;fUML::Semantics::Activities::Token> > offeredTokens= this->getOfferedTokens();&#xA;    Bag&lt;fUML::Semantics::Activities::Token> *offeredTokensPtr=offeredTokens.get();&#xA;&#xA;    const unsigned int numberTokens=offeredTokensPtr->size();&#xA;&#xA;    if(numberTokens==1)&#xA;    {&#xA;        if((*offeredTokensPtr)[0]->isWithdrawn())&#xA;        {&#xA;            offeredTokensPtr->clear();&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        Bag&lt;fUML::Semantics::Activities::Token> *new_OfferedTokensPtr = new Bag&lt;fUML::Semantics::Activities::Token>();&#xA;        m_offeredTokens.reset(new_OfferedTokensPtr);&#xA;        //&#x9;m_offeredTokens.reserve(numberTokens);&#xA;        for(unsigned int i = 0; i &lt; numberTokens; i++)&#xA;        {&#xA;            if(!((*offeredTokensPtr)[i]->isWithdrawn()))&#xA;            {&#xA;                new_OfferedTokensPtr->push_back((*offeredTokensPtr)[i]);&#xA;            }&#xA;        }&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="hasTokens" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    this->removeWithdrawnTokens();&#xD;&#xA;    return (this->getOfferedTokens()->size() > 0);"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="offeredTokens" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/Token"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Token" abstract="true">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/Semantics/Activities/ControlToken.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Locus.hpp&quot;&#xA;&#xA;#include &quot;uml/ActivityNode.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="transfer" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Activities::Token> token = getThisTokenPtr();&#xA;    if (!this->isWithdrawn())&#xA;    {&#xA;        this->withdraw();&#xA;        token = std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::Token>(this->copy());&#xA;    }&#xA;&#xA;    token->setHolder(holder);&#xA;&#x9;token->setWithdrawn(false);&#xA;    return token;"/>
          </eAnnotations>
          <eParameters name="holder" ordered="false" lowerBound="1" eType="#//Semantics/Activities/ActivityNodeActivation"/>
        </eOperations>
        <eOperations name="withdraw" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="if (!this->isWithdrawn()) &#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation> holder = this->getHolder().lock();&#xA;&#x9;&#x9;this->setHolder(std::shared_ptr&lt;fUML::Semantics::Activities::ActivityNodeActivation>(nullptr));&#xA;&#x9;&#x9;this->setWithdrawn(true);&#xA;&#x9;&#x9;if (holder)&#xA;&#x9;&#x9;{&#x9;&#xA;&#x9;&#x9;&#x9;//NEWDEBUG&#xA;&#x9;&#x9;&#x9;DEBUG_INFO(&quot;Withdrawing &quot; &lt;&lt; this->eClass()->getName() &lt;&lt; &quot; from it's old holder: &quot; &lt;&lt; (holder->getNode() == nullptr ? &quot;anonymous node&quot; : (&quot;'&quot; + holder->getNode()->getName() + &quot;'&quot;)) &lt;&lt; &quot;.&quot;)&#xA;&#x9;&#x9;&#x9;holder->removeToken(getThisTokenPtr());&#xA;&#x9;&#x9;}&#xA;    }"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen"/>
          <eParameters name="other" ordered="false" lowerBound="1" eType="#//Semantics/Activities/Token"/>
        </eOperations>
        <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return dynamic_cast&lt;fUML::Semantics::Activities::ControlToken*>(this) != nullptr;"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_copy" lowerBound="1" eType="#//Semantics/Activities/Token">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return std::dynamic_pointer_cast&lt;fUML::Semantics::Activities::Token>(this->copy());"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="getValue" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return nullptr;"/>
            <details key="const"/>
          </eAnnotations>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="holder" ordered="false"
            eType="#//Semantics/Activities/ActivityNodeActivation" eOpposite="#//Semantics/Activities/ActivityNodeActivation/heldTokens"/>
        <eStructuralFeatures xsi:type="ecore:EAttribute" name="withdrawn" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
            defaultValueLiteral="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="TokenSet">
        <eStructuralFeatures xsi:type="ecore:EReference" name="tokens" ordered="false"
            upperBound="-1" eType="#//Semantics/Activities/Token"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorExecutionActivity">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ClassifierBehaviorExecutionActivity' is excluded from generation because its purpose it unclear."/>
        </eAnnotations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="doNotGenerate" value="Class 'ClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1' is excluded from generation because its purpose it unclear."/>
        </eAnnotations>
      </eClassifiers>
    </eSubpackages>
    <eSubpackages name="Loci" nsURI="http:///fUML_Semantics/Semantics/Loci.ecore"
        nsPrefix="fUML_Semantics.Semantics.Loci">
      <eClassifiers xsi:type="ecore:EClass" name="ChoiceStrategy" abstract="true"
          eSuperTypes="#//Semantics/Loci/SemanticStrategy">
        <eOperations name="choose" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eParameters name="size" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
        <eOperations name="getName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return &quot;choice&quot;;"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="ExecutionFactory">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &quot;fUML/fUMLPackage.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/ValuesFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivitiesFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ActionsFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/Classification/ClassificationFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp&quot;&#xA;&#xA;#include &quot;uml/OpaqueBehavior.hpp&quot;&#xA;//#include &quot;fUML/Semantics/CommonBehavior/OpaqueBehaviorExecution.hpp&quot;&#xA;//#include &quot;fUML/Semantics/CommonBehavior/CallEventBehavior.hpp&quot;&#xA;#include &quot;uml/CentralBufferNode.hpp&quot;&#xA;#include &quot;uml/StructuredActivityNode.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Values/Value.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Values/Evaluation.hpp&quot;&#xA;#include &quot;uml/Element.hpp&quot;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;&#xA;/* #include &quot;fUML/Semantics/Values/LiteralBooleanEvaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/LiteralStringEvaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/LiteralNullEvaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Classification/InstanceValueEvaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/LiteralUnlimitedNaturalEvaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/LiteralIntegerEvaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Values/LiteralRealEvaluation.hpp&quot; &#xA;#include &quot;fUML/Semantics/CommonBehavior/CallEventExecution.hpp&quot; */&#xA;#include &quot;uml/umlPackage.hpp&quot;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xA;#include &quot;uml/LiteralInteger.hpp&quot;&#xA;#include &quot;uml/LiteralNull.hpp&quot;&#xA;#include &quot;uml/LiteralReal.hpp&quot;&#xA;#include &quot;uml/LiteralString.hpp&quot;&#xA;#include &quot;uml/LiteralUnlimitedNatural.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityExecution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityFinalNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/CentralBufferNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ActivityParameterNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/AddStructuralFeatureValueActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/CallBehaviorActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/CallOperationActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ClearAssociationActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/CreateLinkActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ClearStructuralFeatureActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/CreateObjectActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/DecisionNodeActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/DestroyLinkActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/DestroyObjectActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/FlowFinalNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/ForkNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/InitialNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/InputPinActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/JoinNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/MergeNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/OutputPinActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ReadLinkActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ReadSelfActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ReadStructuralFeatureActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/RemoveStructuralFeatureValueActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/SendSignalActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/TestIdentityActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ValueSpecificationActionActivation.hpp&quot;&#xA;#include &quot;uml/Activity.hpp&quot;&#xA;#include &quot;uml/ActivityFinalNode.hpp&quot;&#xA;#include &quot;uml/ActivityParameterNode.hpp&quot;&#xA;#include &quot;uml/AddStructuralFeatureValueAction.hpp&quot;&#xA;#include &quot;uml/CallBehaviorAction.hpp&quot;&#xA;#include &quot;uml/CallOperationAction.hpp&quot;&#xA;#include &quot;uml/ClearAssociationAction.hpp&quot;&#xA;#include &quot;uml/ClearStructuralFeatureAction.hpp&quot;&#xA;#include &quot;uml/CreateLinkAction.hpp&quot;&#xA;#include &quot;uml/CreateObjectAction.hpp&quot;&#xA;#include &quot;uml/DecisionNode.hpp&quot;&#xA;#include &quot;uml/DestroyLinkAction.hpp&quot;&#xA;#include &quot;uml/DestroyObjectAction.hpp&quot;&#xA;#include &quot;uml/FlowFinalNode.hpp&quot;&#xA;#include &quot;uml/ForkNode.hpp&quot;&#xA;#include &quot;uml/InitialNode.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/JoinNode.hpp&quot;&#xA;#include &quot;uml/MergeNode.hpp&quot;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xA;#include &quot;uml/ReadLinkAction.hpp&quot;&#xA;#include &quot;uml/ReadSelfAction.hpp&quot;&#xA;#include &quot;uml/ReadStructuralFeatureAction.hpp&quot;&#xA;#include &quot;uml/RemoveStructuralFeatureValueAction.hpp&quot;&#xA;#include &quot;uml/SendSignalAction.hpp&quot;&#xA;#include &quot;uml/TestIdentityAction.hpp&quot;&#xA;#include &quot;uml/ValueSpecificationAction.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/AcceptEventActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ConditionalNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Activities/DataStoreNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ExpansionNodeActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/ExpansionRegionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/LoopNodeActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ReadExtentActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ReadIsClassifiedObjectActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ReclassifyObjectActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/ReduceActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/StartClassifierBehaviorActionActivation.hpp&quot;&#xA;//#include &quot;fUML/Semantics/Actions/StartObjectBehaviorActionActivation.hpp&quot;&#xA;#include &quot;fUML/Semantics/Actions/StructuredActivityNodeActivation.hpp&quot;&#xA;#include &quot;uml/AcceptEventAction.hpp&quot;&#xA;#include &quot;uml/ConditionalNode.hpp&quot;&#xA;#include &quot;uml/DataStoreNode.hpp&quot;&#xA;#include &quot;uml/ExpansionNode.hpp&quot;&#xA;#include &quot;uml/ExpansionRegion.hpp&quot;&#xA;#include &quot;uml/LoopNode.hpp&quot;&#xA;#include &quot;uml/ReadExtentAction.hpp&quot;&#xA;#include &quot;uml/ReadIsClassifiedObjectAction.hpp&quot;&#xA;#include &quot;uml/ReclassifyObjectAction.hpp&quot;&#xA;#include &quot;uml/ReduceAction.hpp&quot;&#xA;#include &quot;uml/StartClassifierBehaviorAction.hpp&quot;&#xA;#include &quot;uml/StartObjectBehaviorAction.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="createExecution" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/Execution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr &lt;fUML::Semantics::CommonBehavior::Execution> execution;&#xA;&#x9;int behaviorMetaElementID = behavior->getMetaElementID();&#xA;    if((behaviorMetaElementID == uml::umlPackage::OPAQUEBEHAVIOR_CLASS) || (behaviorMetaElementID == uml::umlPackage::FUNCTIONBEHAVIOR_CLASS))&#xA;    {&#xA;&#x9;//Currently not supported&#xA;        //execution = this->instantiateOpaqueBehaviorExecution(behavior);&#xA;    }&#xA;    else&#xA;    {&#xA;&#x9;&#x9;if(behaviorMetaElementID == uml::umlPackage::ACTIVITY_CLASS)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;execution = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityExecution();&#xA;&#x9;&#x9;&#x9;execution->getTypes()->push_back(behavior);&#xA;            &#x9;&#x9;//execution->createFeatureValues();&#x9;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else{&#xA;&#x9;&#x9;&#x9;/*&#xA;&#x9;&#x9;&#x9;Should never be reached&#xA;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;&#x9;execution = std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::Execution>(this->instantiateVisitor(behavior));&#xA;&#x9;&#x9;&#x9;if(execution != nullptr)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;execution->getTypes()->push_back(behavior);&#xA;            &#x9;&#x9;&#x9;//execution->createFeatureValues();&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;    }&#xA;&#xA;    if(nullptr == execution)&#xA;    {&#xA;        std::cerr &lt;&lt; &quot;[createExecution] Execution is null&quot; &lt;&lt; std::endl;&#xA;        return nullptr;&#xA;    }&#xA;    this->getLocus().lock()->add(execution);&#xA;&#x9;execution->setLocus(this->getLocus().lock());&#xA;&#xA;&#xA;    if(context == nullptr)&#xA;    {&#xA;        if(execution != nullptr)&#xA;        {&#xA;&#x9;  /*&#xA;&#x9;  Setting the execution as the context of itself creates a circular dependecy between shared_ptrs,&#xA;&#x9;  which results in a memory leak.&#xA;&#x9;  Since the execution context should not be needed if the executed behavior does not have a context,&#xA;&#x9;  this line is commented out&#xA;&#x9;  */&#xA;            //execution->setContext(execution);&#xA;        }&#xA;    }&#xA;    else&#xA;    {&#xA;        if(execution != nullptr)&#xA;        {&#xA;            execution->setContext(context);&#xA;        }&#xA;    }&#xA;&#xA;    return execution;"/>
          </eAnnotations>
          <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior"/>
          <eParameters name="context" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="createEvaluation" ordered="false" lowerBound="1" eType="#//Semantics/Values/Evaluation">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Semantics::Values::Evaluation> evaluation = std::dynamic_pointer_cast&lt;fUML::Semantics::Values::Evaluation>(this->instantiateVisitor(specification));&#xA;&#xA;    evaluation->setSpecification(specification);&#xA;    evaluation->setLocus(this->getLocus().lock()) /*TODO: it can be dangerous to use the weak pointer!*/;&#xA;&#xA;    return evaluation;"/>
            <details key="doNotGenerate" value="Operation 'createEvaluation' is excluded from generation because class 'Evaluation' is excluded from generation (see class Vaues::Evaluation)"/>
          </eAnnotations>
          <eParameters name="specification" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
        </eOperations>
        <eOperations name="instantiateVisitor" ordered="false" lowerBound="1" eType="#//Semantics/Loci/SemanticVisitor">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::Loci::SemanticVisitor> visitor = nullptr;&#xA;&#xA;&#x9;switch (element->eClass()->getClassifierID()) &#xA;&#x9;{&#xA;&#x9;&#x9;case uml::umlPackage::ACTIVITY_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityExecution();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::ACTIVITYPARAMETERNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityParameterNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::INITIALNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createInitialNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::ACTIVITYFINALNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityFinalNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::FLOWFINALNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createFlowFinalNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::JOINNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createJoinNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::MERGENODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createMergeNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::FORKNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createForkNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::DECISIONNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createDecisionNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::EXPANSIONREGION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createExpansionRegionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::EXPANSIONNODE_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createExpansionNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::INPUTPIN_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createInputPinActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::OUTPUTPIN_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createOutputPinActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CALLBEHAVIORACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createCallBehaviorActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CALLOPERATIONACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createCallOperationActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::SENDSIGNALACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createSendSignalActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::READSELFACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReadSelfActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage:: TESTIDENTITYACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createTestIdentityActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::VALUESPECIFICATIONACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createValueSpecificationActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CREATEOBJECTACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createCreateObjectActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::DESTROYOBJECTACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createDestroyObjectActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::READSTRUCTURALFEATUREACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReadStructuralFeatureActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CLEARSTRUCTURALFEATUREACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createClearStructuralFeatureActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::ADDSTRUCTURALFEATUREVALUEACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createAddStructuralFeatureValueActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createRemoveStructuralFeatureValueActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::READLINKACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReadLinkActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CLEARASSOCIATIONACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createClearAssociationActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CREATELINKACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createCreateLinkActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::DESTROYLINKACTION_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createDestroyLinkActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CONDITIONALNODE_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createConditionalNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::LOOPNODE_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createLoopNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::STRUCTUREDACTIVITYNODE_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createStructuredActivityNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::READEXTENTACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReadExtentActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::READISCLASSIFIEDOBJECTACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReadIsClassifiedObjectActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::RECLASSIFYOBJECTACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReclassifyObjectActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::STARTOBJECTBEHAVIORACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createStartObjectBehaviorActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::STARTCLASSIFIERBEHAVIORACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createStartClassifierBehaviorActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::ACCEPTEVENTACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createAcceptEventActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::REDUCEACTION_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::Actions::ActionsFactory::eInstance()->createReduceActionActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::DATASTORENODE_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createDataStoreNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;case uml::umlPackage::CENTRALBUFFERNODE_CLASS: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;visitor = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createCentralBufferNodeActivation();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;/*case fUML::Semantics::CommonBehavior::CommonBehaviorPackage::CALLEVENTBEHAVIOR_CLASS:&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//visitor = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createCallEventExecution();&#xA;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;}*/&#x9;&#x9;&#xA;&#x9;&#x9;default: &#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::cerr &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; &quot; - Unknown visitor type&quot; &lt;&lt; std::endl;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;&#xA;&#x9;return visitor;"/>
          </eAnnotations>
          <eParameters name="element" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="instantiateOpaqueBehaviorExecution" ordered="false" lowerBound="1"
            eType="#//Semantics/CommonBehavior/OpaqueBehaviorExecution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> execution = nullptr;&#xA;    unsigned int i = 0;&#xA;    //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;SIZE PROTOTYPES &quot;&lt;&lt; this->getPrimitiveBehaviorPrototypes()->size()&lt;&lt;std::endl;)&#xA;    auto primitiveBehaviorPrototypes = this->getPrimitiveBehaviorPrototypes();&#xA;    while(execution == nullptr &amp;&amp; (i &lt; primitiveBehaviorPrototypes->size()))&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> prototype = primitiveBehaviorPrototypes->at(i);&#xA;        //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;BEHAVIOUR NAME:&quot;&lt;&lt;prototype->getBehavior()->getName()&lt;&lt;&quot;AND&quot;&lt;&lt;behavior->getName()&lt;&lt;std::endl;)&#xA;        if( prototype->getTypes()->front() == behavior)&#xA;        {&#xA;            execution = std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution>(prototype->copy());&#xA;        }&#xA;        i++;&#xA;    }&#xA;&#xA;    if(execution == nullptr)&#xA;    {&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[instantiateOpaqueExecution] No prototype execution found for &quot; &lt;&lt; behavior->getName() &lt;&lt;std::endl;)&#xA;    }&#xA;&#xA;    return execution;"/>
            <details key="doNotGenerate" value="Operation 'instantiateOpaqueBehaviorExecution' is excluded from generation because class 'OpaqueBehaviorExecution' is excluded from generation (see class CommonBehavior::OpaqueBehaviorExecution)"/>
          </eAnnotations>
          <eAnnotations source="MDE4CPP_Substituted">
            <details key="doc" value="For performance reasons, this operation is substituted with:&#xA;&quot;this.instantiateOpaqueBehaviorExecution(Behavior) : OpaqueBehaviorExecution&quot;"/>
          </eAnnotations>
          <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OpaqueBehavior"/>
        </eOperations>
        <eOperations name="instantiateOpaqueBehaviorExecution" ordered="false" lowerBound="1"
            eType="#//Semantics/CommonBehavior/OpaqueBehaviorExecution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> execution = nullptr;&#xA;    unsigned int i = 0;&#xA;    //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;SIZE PROTOTYPES &quot;&lt;&lt; this->getPrimitiveBehaviorPrototypes()->size()&lt;&lt;std::endl;)&#xA;    auto primitiveBehaviorPrototypes = this->getPrimitiveBehaviorPrototypes();&#xA;    while(execution == nullptr &amp;&amp; (i &lt; primitiveBehaviorPrototypes->size()))&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> prototype = primitiveBehaviorPrototypes->at(i);&#xA;        //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;BEHAVIOUR NAME:&quot;&lt;&lt;prototype->getBehavior()->getName()&lt;&lt;&quot;AND&quot;&lt;&lt;behavior->getName()&lt;&lt;std::endl;)&#xA;        if(prototype->getBehavior() == behavior)&#xA;        {&#xA;            execution = std::dynamic_pointer_cast&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution>(prototype->copy());&#xA;        }&#xA;        i++;&#xA;    }&#xA;&#xA;    if(execution == nullptr)&#xA;    {&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[instantiateOpaqueExecution] No prototype execution found for &quot; &lt;&lt; behavior->getName() &lt;&lt;std::endl;)&#xA;    }&#xA;&#xA;    return execution;"/>
            <details key="doNotGenerate" value="Operation 'instantiateOpaqueBehaviorExecution' is excluded from generation because class 'OpaqueBehaviorExecution' is excluded from generation (see class CommonBehavior::OpaqueBehaviorExecution)"/>
          </eAnnotations>
          <eAnnotations source="MDE4CPP_Substitutes">
            <details key="doc" value="This operation substitutes:&#xA;&quot;this.instantiateOpaqueBehaviorExecution(OpaqueBehavior) : OpaqueBehaviorExecution&quot;&#xA;"/>
          </eAnnotations>
          <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior"/>
        </eOperations>
        <eOperations name="addPrimitiveBehaviorPrototype" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::OpaqueBehaviorExecution> > primBehaviorExecution = this->getPrimitiveBehaviorPrototypes();&#xA;    primBehaviorExecution->push_back(execution);"/>
            <details key="doNotGenerate" value="Operation 'addPrimitiveBehaviorPrototype' is excluded from generation because class 'OpaqueBehaviorExecution' is excluded from generation (see class CommonBehavior::OpaqueBehaviorExecution)"/>
          </eAnnotations>
          <eParameters name="execution" ordered="false" lowerBound="1" eType="#//Semantics/CommonBehavior/OpaqueBehaviorExecution"/>
        </eOperations>
        <eOperations name="addBuiltInType" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::PrimitiveType> > builtInTypes = this->getBuiltInTypes();&#xD;&#xA;    builtInTypes->push_back(type);"/>
          </eAnnotations>
          <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType"/>
        </eOperations>
        <eOperations name="getBuiltInType" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;uml::PrimitiveType> type = nullptr;&#xA;    unsigned int i = 0;&#xA;    while (nullptr == type &amp;&amp; i &lt; this->getBuiltInTypes()->size())&#xA;    {&#xA;    &#x9;std::shared_ptr&lt;uml::PrimitiveType> primitiveType = this->getBuiltInTypes()->at(i);&#xA;        if (typeid(primitiveType).name() == name) &#xA;        {&#xA;            type = primitiveType;&#xA;        }&#xA;        i = i + 1;&#xA;    }&#xA;&#xA;    return type;"/>
          </eAnnotations>
          <eParameters name="name" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eOperations name="assignStrategy" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="    unsigned int i = this->getStrategyIndex(strategy->getName());&#xA;&#xA;    if(i &lt; this->getStrategies()->size())&#xA;    {&#xA;        this->getStrategies()->erase(this->getStrategies()->begin() + i);&#xA;    }&#xA;&#xA;    this->getStrategies()->push_back(strategy);"/>
          </eAnnotations>
          <eParameters name="strategy" ordered="false" lowerBound="1" eType="#//Semantics/Loci/SemanticStrategy"/>
        </eOperations>
        <eOperations name="getStrategy" ordered="false" eType="#//Semantics/Loci/SemanticStrategy">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;unsigned int i = this->getStrategyIndex(name);&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::Loci::SemanticStrategy> strategy = nullptr;&#xA;    if(i &lt; this->getStrategies()->size())&#xA;    {&#xA;        strategy = this->getStrategies()->at(i);&#xA;    }&#xA;&#xA;    return strategy;"/>
          </eAnnotations>
          <eParameters name="name" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eOperations name="getStrategyIndex" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;Bag&lt;fUML::Semantics::Loci::SemanticStrategy>* strategies = this->getStrategies().get();&#xA;&#xA;    unsigned int i = 0;&#xA;    bool unmatched = true;&#xA;    const unsigned int s_size = strategies->size();&#xA;    while(unmatched &amp;&amp; (i &lt; s_size))&#xA;    {&#xA;        if((*strategies)[i]->getName()==name)&#xA;        {&#xA;            unmatched = false;&#xA;        }&#xA;        else&#xA;        {&#xA;            i = i + 1;&#xA;        }&#xA;    }&#xA;    return i;"/>
          </eAnnotations>
          <eParameters name="name" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
            eType="#//Semantics/Loci/Locus" eOpposite="#//Semantics/Loci/Locus/factory"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="strategies" ordered="false"
            upperBound="-1" eType="#//Semantics/Loci/SemanticStrategy"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="primitiveBehaviorPrototypes"
            upperBound="-1" eType="#//Semantics/CommonBehavior/OpaqueBehaviorExecution">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="map_key" value="Behavior"/>
            <details key="doNotGenerate" value="Property 'primitiveBehaviorPrototypes' is excluded from generation because class 'OpaqueBehaviorExecution' is excluded from generation (see class CommonBehavior::OpaqueBehaviorExecution)"/>
          </eAnnotations>
        </eStructuralFeatures>
        <eStructuralFeatures xsi:type="ecore:EReference" name="builtInTypes" ordered="false"
            upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Executor">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="//#include &quot;fUML/Semantics/Values/Evaluation.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/Execution.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;#include &quot;fUML/fUMLFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Object.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;"/>
        </eAnnotations>
        <eOperations name="evaluate" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;if (auto locus = this->getLocus().lock())&#xA;&#x9;{&#xA;&#x9;&#x9;switch (specification->eClass()->getClassifierID())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;/*&#xA;&#x9;&#x9;&#x9;&#x9;TODO: correct MetaElementIDs&#xA;&#x9;&#x9;&#x9;&#x9;*/&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALBOOLEAN_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return eAny(specification->booleanValue(), 0, false);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALSTRING_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return eAny(specification->stringValue(), 0, false);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALNULL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return eAny(nullptr, -1, false);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::INSTANCEVALUE_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_WARNING(&quot;uml::ValueSpecification of type uml::InstanceValue is currently not supported! NOTE: specifications of type uml::EnumerationLiteral are handled by auto-generated, model-specific Executor class.&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALUNLIMITEDNATURAL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return eAny(specification->unlimitedValue(), 0, false);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALINTEGER_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return eAny(specification->integerValue(), 0, false);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case uml::umlPackage::LITERALREAL_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return eAny(specification->realValue(), 0, false);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_ERROR(&quot;Unsupported instance of uml::ValueSpecification!&quot;)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;return nullptr;&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="specification" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
        </eOperations>
        <eOperations name="start" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Starting instance of active class '&quot; &lt;&lt; type->getName() &lt;&lt; &quot;'.&quot;)&#xA;&#xA;&#x9;if (auto locus = this->getLocus().lock())&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> object = locus->instantiate(type);&#xA;&#xA;&#x9;&#x9;DEBUG_INFO(&quot;Instance of active class = &quot; &lt;&lt; object)&#xA;&#xA;&#x9;&#x9;/* Currently not supported&#xA;&#x9;&#x9;object->startBehavior(type,inputs);&#xA;&#x9;&#x9;*/&#xA;&#xA;&#x9;&#x9;return object;&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;return nullptr;&#xA;&#x9;}"/>
          </eAnnotations>
          <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
          <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eOperations name="execute" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="std::shared_ptr&lt;fUML::Semantics::CommonBehavior::Execution> execution = nullptr;&#xA;&#x9;if (auto locus = this->getLocus().lock())&#xA;&#x9;{&#xA;&#x9;&#x9;execution = locus->getFactory()->createExecution(behavior, context);&#xA;&#x9;}&#xA;&#xA;    if(nullptr == execution)&#xA;    {&#xA;        std::cerr &lt;&lt; &quot;[execute] Execution is null&quot; &lt;&lt; std::endl;&#xA;        return nullptr;&#xA;    }&#xA;&#xA;    for(std::shared_ptr&lt;fUML::Semantics::CommonBehavior::ParameterValue> parameterValue : *inputs )&#xA;    {&#xA;        execution->setParameterValue(parameterValue);&#xA;    }&#xA;&#xA;    execution->execute();&#xA;    std::shared_ptr&lt;Bag&lt;fUML::Semantics::CommonBehavior::ParameterValue> > outputValues = execution->getOutputParameterValues();&#xA;    execution->destroy();&#xA;&#xA;    return outputValues;"/>
          </eAnnotations>
          <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior"/>
          <eParameters name="context" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
          <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//Semantics/CommonBehavior/ParameterValue"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
            eType="#//Semantics/Loci/Locus" eOpposite="#//Semantics/Loci/Locus/executor"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="FirstChoiceStrategy" eSuperTypes="#//Semantics/Loci/ChoiceStrategy">
        <eOperations name="choose" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="return 1;"/>
          </eAnnotations>
          <eParameters name="size" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
        </eOperations>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="Locus">
        <eAnnotations source="http://tu-ilmenau.de/see/codegen">
          <details key="implIncludes" value="#include &lt;algorithm>&#xA;#include &quot;uml/Classifier.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp&quot;&#xA;#include &quot;fUML/Semantics/StructuredClassifiers/StructuredClassifiersPackage.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/ExecutionFactory.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/ExtensionalValue.hpp&quot;&#xA;#include &quot;fUML/Semantics/Loci/Executor.hpp&quot;&#xA;//#include &quot;fUML/Semantics/StructuredClassifiers/Object.hpp&quot;&#xA;#include &quot;fUML/Semantics/CommonBehavior/Execution.hpp&quot;&#xA;"/>
        </eAnnotations>
        <eOperations name="conforms" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;bool doesConform = false;&#xD;&#xA;    if(type == classifier)&#xD;&#xA;    {&#xD;&#xA;        doesConform = true;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while(!doesConform &amp;&amp; (i &lt; type->getGeneral()->size()))&#xD;&#xA;        {&#xD;&#xA;            doesConform = this->conforms(type->getGeneral()->at(i), classifier);&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return doesConform;"/>
          </eAnnotations>
          <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
          <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
        </eOperations>
        <eOperations name="assignExecutor" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->setExecutor(executor);&#xD;&#xA;&#x9;this->getExecutor()->setLocus(getThisLocusPtr());"/>
          </eAnnotations>
          <eParameters name="executor" ordered="false" lowerBound="1" eType="#//Semantics/Loci/Executor"/>
        </eOperations>
        <eOperations name="assignFactory" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="this->setFactory(factory);&#xD;&#xA;&#x9;this->getFactory()->setLocus(getThisLocusPtr());"/>
          </eAnnotations>
          <eParameters name="factory" ordered="false" lowerBound="1" eType="#//Semantics/Loci/ExecutionFactory"/>
        </eOperations>
        <eOperations name="retrieveExtent" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Element>> extent(new Bag&lt;uml::Element>());&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Element>> extensionalValues = this->getExtensionalValues();&#xA;&#xA;&#x9;unsigned int extensionalValuesSize = extensionalValues->size();&#xA;&#xA;&#x9;for (unsigned int i=0; i &lt; extensionalValuesSize; i++)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Element> value = extensionalValues->at(i);&#xA;&#x9;&#x9;//Currently, only one type is supported&#xA;&#x9;&#x9;/*std::shared_ptr&lt;Bag&lt;uml::Classifier>> types = value->getTypes();&#xA;&#x9;&#x9;bool conforms = false;&#xA;&#x9;&#x9;unsigned int j = 0;&#xA;&#x9;&#x9;while(!conforms &amp;&amp; j &lt; types->size())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;conforms = this->conforms(types->at(j), classifier);&#xA;&#x9;&#x9;&#x9;j = j + 1;&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if(conforms)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;extent->push_back(value);&#xA;&#x9;&#x9;}*/&#xA;&#xA;&#x9;&#x9;if(classifier->eClass()->getClassifierID() == value->getMetaElementID())&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;extent->push_back(value);&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return extent;"/>
          </eAnnotations>
          <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
        </eOperations>
        <eOperations name="add" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;// TODO decide how the reference between an instance and the locus should be handled&#xA;&#x9;//value->setLocus(getThisLocusPtr());&#xA;&#x9;this->getExtensionalValues()->push_back(value);"/>
          </eAnnotations>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="remove" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="&#x9;//TODO decide hoe the reference between an instance and a locus should be handled&#xA;&#x9;//value->setLocus(nullptr);&#xA;&#x9;this->getExtensionalValues()->erase(value);&#xA;&#x9;value.reset();"/>
          </eAnnotations>
          <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
        </eOperations>
        <eOperations name="instantiate" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="/* &#xA;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object> object = nullptr;&#xA;&#x9;std::shared_ptr&lt;uml::Behavior> behavior = std::dynamic_pointer_cast&lt;uml::Behavior>(type);&#xA;   &#x9; if(behavior != nullptr)&#xA;   &#x9; {&#xA;    &#x9;&#x9;std::shared_ptr&lt;fUML::Semantics::StructuredClassifiers::Object>  context = nullptr;&#xA;        &#x9;object = std::dynamic_pointer_cast&lt;fUML::Semantics::StructuredClassifiers::Object>(this->getFactory()->createExecution(behavior, nullptr));&#xA;    &#x9;}&#xA;   &#x9; else&#xA;   &#x9; {&#xA;        &#x9;object = fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createObject();&#xA;       &#x9;object->getTypes()->push_back(type);&#xA;       &#x9;object->createFeatureValues();&#xA;        &#x9;this->add(object);&#xA;    &#x9;}&#xA;    &#xA;    return object;&#xA;*/&#xA;&#xA;/*&#xA; * This method is implemented in every model-specific locus&#xA; */&#xA;&#xA;return nullptr;"/>
          </eAnnotations>
          <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
        </eOperations>
        <eStructuralFeatures xsi:type="ecore:EReference" name="executor" ordered="false"
            eType="#//Semantics/Loci/Executor" containment="true" eOpposite="#//Semantics/Loci/Executor/locus"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="factory" lowerBound="1"
            eType="#//Semantics/Loci/ExecutionFactory" containment="true" eOpposite="#//Semantics/Loci/ExecutionFactory/locus"/>
        <eStructuralFeatures xsi:type="ecore:EReference" name="extensionalValues"
            ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"
            containment="true"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SemanticStrategy" abstract="true">
        <eOperations name="getName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      </eClassifiers>
      <eClassifiers xsi:type="ecore:EClass" name="SemanticVisitor" abstract="true">
        <eOperations name="_endIsolation" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;End of isolation.&quot;)"/>
          </eAnnotations>
        </eOperations>
        <eOperations name="_beginIsolation" ordered="false" lowerBound="1">
          <eAnnotations source="http://tu-ilmenau.de/see/codegen">
            <details key="body" value="DEBUG_INFO(&quot;Begin of isolation.&quot;)"/>
          </eAnnotations>
        </eOperations>
      </eClassifiers>
    </eSubpackages>
  </eSubpackages>
</ecore:EPackage>
