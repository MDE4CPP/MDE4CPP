//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_EXTENSIONEXTENSIONIMPL_HPP
#define UML_EXTENSIONEXTENSIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Extension.hpp"

#include "uml/impl/AssociationImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ExtensionImpl : virtual public AssociationImpl, virtual public Extension 
	{
		public: 
			ExtensionImpl(const ExtensionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ExtensionImpl& operator=(ExtensionImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ExtensionImpl();
			virtual std::shared_ptr<uml::Extension> getThisExtensionPtr() const;
			virtual void setThisExtensionPtr(std::weak_ptr<uml::Extension> thisExtensionPtr);

			//Additional constructors for the containments back reference
			ExtensionImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ExtensionImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			ExtensionImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id);
			//Additional constructors for the containments back reference
			ExtensionImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);
			//Additional constructors for the containments back reference

		public:
			//destructor
			virtual ~ExtensionImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			/*!
			Retrieves the stereotype that extends a metaclass through this extension.
			*/
			 
			virtual std::shared_ptr<uml::Stereotype> getStereotype() ;
			/*!
			Retrieves the extension end that is typed by a stereotype (as opposed to a metaclass).
			*/
			 
			virtual std::shared_ptr<uml::Property> getStereotypeEnd() ;
			/*!
			The query isRequired() is true if the owned end has a multiplicity with the lower bound of 1.
			result = (ownedEnd.lowerBound() = 1)
			<p>From package UML::Packages.</p>
			*/
			 
			virtual bool isRequired() ;
			/*!
			The query metaclassEnd() returns the Property that is typed by a metaclass (as opposed to a stereotype).
			result = (memberEnd->reject(p | ownedEnd->includes(p.oclAsType(ExtensionEnd)))->any(true))
			<p>From package UML::Packages.</p>
			*/
			 
			virtual std::shared_ptr<uml::Property> metaclassEnd() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Indicates whether an instance of the extending stereotype must be created when an instance of the extended class is created. The attribute value is derived from the value of the lower property of the ExtensionEnd referenced by Extension::ownedEnd; a lower value of 1 means that isRequired is true, but otherwise it is false. Since the default value of ExtensionEnd::lower is 0, the default value of isRequired is false.
			<p>From package UML::Packages.</p>
			*/
			 
			virtual bool getIsRequired() const ;
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References the Class that is extended through an Extension. The property is derived from the type of the memberEnd that is not the ownedEnd.
			<p>From package UML::Packages.</p>
			*/
			
			virtual std::shared_ptr<uml::Class> getMetaclass() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::Extension> m_thisExtensionPtr;
	};
}
#endif /* end of include guard: UML_EXTENSIONEXTENSIONIMPL_HPP */
