//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INTERFACE_HPP
#define UML_INTERFACE_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 
template<class T, class ... U> class Subset;


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 
namespace uml 
{
	class CollaborationUse;
	class Comment;
	class Constraint;
	class Dependency;
	class ElementImport;
	class Feature;
	class Generalization;
	class GeneralizationSet;
	class Operation;
	class Package;
	class PackageImport;
	class Property;
	class ProtocolStateMachine;
	class Reception;
	class StringExpression;
	class Substitution;
	class TemplateBinding;
	class TemplateParameter;
	class TemplateSignature;
	class UseCase;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Classifier.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	Interfaces declare coherent services that are implemented by BehavioredClassifiers that implement the Interfaces via InterfaceRealizations.
	<p>From package UML::SimpleClassifiers.</p>
	*/
	
	class UML_API Interface : virtual public Classifier
	{
		public:
 			Interface(const Interface &) {}

		protected:
			Interface(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Interface() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			Creates a property with the specified name, type, lower bound, and upper bound as an owned attribute of this interface.
			*/
			 
			virtual std::shared_ptr<uml::Property> createOwnedAttribute(std::string name, const std::shared_ptr<uml::Type>& type, int lower, int upper) = 0;
			/*!
			Creates an operation with the specified name, parameter names, parameter types, and return type (or null) as an owned operation of this interface.
			*/
			 
			virtual std::shared_ptr<uml::Operation> createOwnedOperation(std::string name, const std::shared_ptr<Bag<std::string>>& parameterNames, const std::shared_ptr<Bag<uml::Type>>& parameterTypes, const std::shared_ptr<uml::Type>& returnType) = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References all the Classifiers that are defined (nested) within the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Classifier, uml::NamedElement>>& getNestedClassifier() const = 0;
			/*!
			The attributes (i.e., the Properties) owned by the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Property, uml::NamedElement, uml::Property>>& getOwnedAttribute() const = 0;
			/*!
			The Operations owned by the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Operation, uml::Feature, uml::NamedElement>>& getOwnedOperation() const = 0;
			/*!
			Receptions that objects providing this Interface are willing to accept.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Reception, uml::Feature, uml::NamedElement>>& getOwnedReception() const = 0;
			/*!
			References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<uml::ProtocolStateMachine>& getProtocol() const = 0;
			/*!
			References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual void setProtocol(const std::shared_ptr<uml::ProtocolStateMachine>&) = 0;
			/*!
			References all the Interfaces redefined by this Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			virtual const std::shared_ptr<Subset<uml::Interface, uml::Classifier /*Subset does not reference a union*/>>& getRedefinedInterface() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			References all the Classifiers that are defined (nested) within the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Classifier, uml::NamedElement>> m_nestedClassifier;
			/*!
			The attributes (i.e., the Properties) owned by the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Property, uml::NamedElement, uml::Property>> m_ownedAttribute;
			/*!
			The Operations owned by the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Operation, uml::Feature, uml::NamedElement>> m_ownedOperation;
			/*!
			Receptions that objects providing this Interface are willing to accept.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Reception, uml::Feature, uml::NamedElement>> m_ownedReception;
			/*!
			References a ProtocolStateMachine specifying the legal sequences of the invocation of the BehavioralFeatures described in the Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			std::shared_ptr<uml::ProtocolStateMachine> m_protocol;
			/*!
			References all the Interfaces redefined by this Interface.
			<p>From package UML::SimpleClassifiers.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Interface, uml::Classifier /*Subset does not reference a union*/>> m_redefinedInterface;
	};
}
#endif /* end of include guard: UML_INTERFACE_HPP */
