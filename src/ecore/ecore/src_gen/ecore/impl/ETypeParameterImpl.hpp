//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_ETYPEPARAMETERETYPEPARAMETERIMPL_HPP
#define ECORE_ETYPEPARAMETERETYPEPARAMETERIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "ecore/ecore.hpp" 

// model includes
#include "../ETypeParameter.hpp"

#include "ecore/impl/ENamedElementImpl.hpp"

//*********************************
namespace ecore 
{
	class ECORE_API ETypeParameterImpl : virtual public ENamedElementImpl, virtual public ETypeParameter 
	{
		public: 
			ETypeParameterImpl(const ETypeParameterImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ETypeParameterImpl& operator=(ETypeParameterImpl const&); 

		protected:
			friend class ecoreFactoryImpl;
			ETypeParameterImpl();
			virtual std::shared_ptr<ecore::ETypeParameter> getThisETypeParameterPtr() const;
			virtual void setThisETypeParameterPtr(std::weak_ptr<ecore::ETypeParameter> thisETypeParameterPtr);

			//Additional constructors for the containments back reference
			ETypeParameterImpl(std::weak_ptr<ecore::EObject> par_eContainer);

		public:
			//destructor
			virtual ~ETypeParameterImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<Bag<ecore::EGenericType>> getEBounds() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			virtual std::shared_ptr<Union<ecore::EObject>> getEContentUnion() const ;
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, Any newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual Any eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments) ;

		private:
			std::weak_ptr<ecore::ETypeParameter> m_thisETypeParameterPtr;
	};
}
#endif /* end of include guard: ECORE_ETYPEPARAMETERETYPEPARAMETERIMPL_HPP */
