
#include "ecore/impl/EClassImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/SubsetUnion.hpp"


#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"


//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "ecore/ecoreFactory.hpp"

#include "ecore/EAnnotation.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EClassifier.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/EObject.hpp"
#include "ecore/EOperation.hpp"
#include "ecore/EPackage.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ETypeParameter.hpp"

//Factories an Package includes
#include "ecore/ecorePackage.hpp"


#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"

using namespace ecore;

//*********************************
// Constructor / Destructor
//*********************************
EClassImpl::EClassImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

EClassImpl::~EClassImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete EClass "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
EClassImpl::EClassImpl(std::weak_ptr<ecore::EObject> par_eContainer)
:EClassImpl()
{
	m_eContainer = par_eContainer;
}

//Additional constructor for the containments back reference
EClassImpl::EClassImpl(std::weak_ptr<ecore::EPackage> par_ePackage)
:EClassImpl()
{
	m_ePackage = par_ePackage;
}

EClassImpl::EClassImpl(const EClassImpl & obj): EClassImpl()
{
	*this = obj;
}

EClassImpl& EClassImpl::operator=(const EClassImpl & obj)
{
	//call overloaded =Operator for each base class
	EClassifierImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of EClass 
	 * which is generated by the compiler (as EClass is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//EClass::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy EClass "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_abstract = obj.isAbstract();
	m_interface = obj.isInterface();

	//copy references with no containment (soft copy)
	m_eAllAttributes  = obj.getEAllAttributes();
	m_eAllContainments  = obj.getEAllContainments();
	m_eAllGenericSuperTypes  = obj.getEAllGenericSuperTypes();
	m_eAllOperations  = obj.getEAllOperations();
	m_eAllReferences  = obj.getEAllReferences();
	m_eAllStructuralFeatures  = obj.getEAllStructuralFeatures();
	m_eAllSuperTypes  = obj.getEAllSuperTypes();
	m_eIDAttribute  = obj.getEIDAttribute();
	m_eSuperTypes  = obj.getESuperTypes();
	//Clone references with containment (deep copy)
	//clone reference 'eAttributes'
	std::shared_ptr<Subset<ecore::EAttribute, ecore::EStructuralFeature>> eAttributesList = obj.getEAttributes();
	if(eAttributesList)
	{
		/*Subset*/
		m_eAttributes.reset(new Subset<ecore::EAttribute, ecore::EStructuralFeature >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_eAttributes - Subset<ecore::EAttribute, ecore::EStructuralFeature >()" << std::endl;
		#endif
		
		/*Subset*/
		getEAttributes()->initSubset(getEStructuralFeatures());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_eAttributes - Subset<ecore::EAttribute, ecore::EStructuralFeature >(getEStructuralFeatures())" << std::endl;
		#endif
		

		Bag<ecore::EAttribute>::iterator eAttributesIter = eAttributesList->begin();
		Bag<ecore::EAttribute>::iterator eAttributesEnd = eAttributesList->end();
		while (eAttributesIter != eAttributesEnd) 
		{
			std::shared_ptr<ecore::EAttribute> temp = std::dynamic_pointer_cast<ecore::EAttribute>((*eAttributesIter)->copy());
			getEAttributes()->push_back(temp);
			eAttributesIter++;
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr eAttributes."<< std::endl;)
	}

	//clone reference 'eGenericSuperTypes'
	std::shared_ptr<Bag<ecore::EGenericType>> eGenericSuperTypesList = obj.getEGenericSuperTypes();
	if(eGenericSuperTypesList)
	{
		m_eGenericSuperTypes.reset(new Bag<ecore::EGenericType>());
		
		

		Bag<ecore::EGenericType>::iterator eGenericSuperTypesIter = eGenericSuperTypesList->begin();
		Bag<ecore::EGenericType>::iterator eGenericSuperTypesEnd = eGenericSuperTypesList->end();
		while (eGenericSuperTypesIter != eGenericSuperTypesEnd) 
		{
			std::shared_ptr<ecore::EGenericType> temp = std::dynamic_pointer_cast<ecore::EGenericType>((*eGenericSuperTypesIter)->copy());
			getEGenericSuperTypes()->push_back(temp);
			eGenericSuperTypesIter++;
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr eGenericSuperTypes."<< std::endl;)
	}

	//clone reference 'eOperations'
	std::shared_ptr<Subset<ecore::EOperation, ecore::EObject>> eOperationsList = obj.getEOperations();
	if(eOperationsList)
	{
		/*Subset*/
		m_eOperations.reset(new Subset<ecore::EOperation, ecore::EObject >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_eOperations - Subset<ecore::EOperation, ecore::EObject >()" << std::endl;
		#endif
		
		/*Subset*/
		getEOperations()->initSubset(getEContens());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_eOperations - Subset<ecore::EOperation, ecore::EObject >(getEContens())" << std::endl;
		#endif
		

		Bag<ecore::EOperation>::iterator eOperationsIter = eOperationsList->begin();
		Bag<ecore::EOperation>::iterator eOperationsEnd = eOperationsList->end();
		while (eOperationsIter != eOperationsEnd) 
		{
			std::shared_ptr<ecore::EOperation> temp = std::dynamic_pointer_cast<ecore::EOperation>((*eOperationsIter)->copy());
			getEOperations()->push_back(temp);
			eOperationsIter++;
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr eOperations."<< std::endl;)
	}

	//clone reference 'eReferences'
	std::shared_ptr<Subset<ecore::EReference, ecore::EStructuralFeature>> eReferencesList = obj.getEReferences();
	if(eReferencesList)
	{
		/*Subset*/
		m_eReferences.reset(new Subset<ecore::EReference, ecore::EStructuralFeature >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_eReferences - Subset<ecore::EReference, ecore::EStructuralFeature >()" << std::endl;
		#endif
		
		/*Subset*/
		getEReferences()->initSubset(getEStructuralFeatures());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_eReferences - Subset<ecore::EReference, ecore::EStructuralFeature >(getEStructuralFeatures())" << std::endl;
		#endif
		

		Bag<ecore::EReference>::iterator eReferencesIter = eReferencesList->begin();
		Bag<ecore::EReference>::iterator eReferencesEnd = eReferencesList->end();
		while (eReferencesIter != eReferencesEnd) 
		{
			std::shared_ptr<ecore::EReference> temp = std::dynamic_pointer_cast<ecore::EReference>((*eReferencesIter)->copy());
			getEReferences()->push_back(temp);
			eReferencesIter++;
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr eReferences."<< std::endl;)
	}
	
	/*Subset*/
	getEOperations()->initSubset(getEContens());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_eOperations - Subset<ecore::EOperation, ecore::EObject >(getEContens())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> EClassImpl::copy() const
{
	std::shared_ptr<EClassImpl> element(new EClassImpl());
	*element =(*this);
	element->setThisEClassPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
std::shared_ptr<ecore::EOperation> EClassImpl::getEOperation(int operationID) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr< Bag<ecore::EOperation> > eAllOps = getEAllOperations();

    std::shared_ptr<ecore::EOperation> operation;
    Bag<ecore::EOperation >::iterator iter = eAllOps->begin();
    
    while (iter != eAllOps->end())
    {
        operation = *iter;
        if (operation->getOperationID() == operationID)
            return operation;
        iter++;
    }
    
    return nullptr;
	//end of body
}

std::shared_ptr<ecore::EStructuralFeature> EClassImpl::getEStructuralFeature(int featureID) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr< Bag<ecore::EStructuralFeature> >  eAllFeat = getEAllStructuralFeatures();
    return featureID >=0 && featureID < (int) eAllFeat->size() ? eAllFeat->at(featureID): nullptr;
	//end of body
}

std::shared_ptr<ecore::EStructuralFeature> EClassImpl::getEStructuralFeature(std::string featureName) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    std::shared_ptr<Bag<EStructuralFeature > > eAllFeat = getEAllStructuralFeatures();
    for(std::shared_ptr<EStructuralFeature> f: *eAllFeat)
    {
        if(f->getName()==featureName)
        {
            return f;
        }
    }

    return nullptr;
	//end of body
}

int EClassImpl::getFeatureCount() const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return getEAllStructuralFeatures()->size();
	//end of body
}

int EClassImpl::getFeatureID(std::shared_ptr<ecore::EStructuralFeature> feature) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    std::shared_ptr<Bag<EStructuralFeature > > eAllFeat = getEAllStructuralFeatures();
    int index = feature->getFeatureID();
    
    if(index != -1)
    {
        index = 0;
        Bag<EStructuralFeature > ::iterator iter = eAllFeat->begin();
        while (iter != eAllFeat->end())
        {
           if (feature == *iter)
           {
               return index;
           }
           index++;
           iter++;
        }
    }
    return -1;
	//end of body
}

std::shared_ptr<ecore::EGenericType> EClassImpl::getFeatureType(std::shared_ptr<ecore::EStructuralFeature> feature) const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

int EClassImpl::getOperationCount() const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return getEAllOperations()->size();
	//end of body
}

int EClassImpl::getOperationID(std::shared_ptr<ecore::EOperation> operation) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    std::shared_ptr< Bag<ecore::EOperation> > eAllOps = getEAllOperations();
    int index = operation->getOperationID();
    
    if(index != -1)
    {
        index = 0;
        Bag<ecore::EOperation >::iterator iter = eAllOps->begin();
        while (iter != eAllOps->end())
        {
           if (operation == *iter)
           {
               return index;
           }
           index++;
           iter++;
        }
    }
    return -1;
	//end of body
}

std::shared_ptr<ecore::EOperation> EClassImpl::getOverride(std::shared_ptr<ecore::EOperation> operation) const
{
	std::cout << __PRETTY_FUNCTION__  << std::endl;
	throw "UnsupportedOperationException";
}

bool EClassImpl::isSuperTypeOf(std::shared_ptr<ecore::EClass> someClass) const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		std::shared_ptr< Bag<ecore::EClass > > list = someClass->getEAllSuperTypes();

    Bag< ecore::EClass > ::iterator i=list->begin();
    Bag< ecore::EClass > ::iterator endIter=list->end();

    while (i!=endIter)
    {
	    if ((*i).get()==this) return true;
	    ++i;
    }

    return someClass.get() == this;
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute abstract */
bool EClassImpl::isAbstract() const 
{
	return m_abstract;
}
void EClassImpl::setAbstract(bool _abstract)
{
	m_abstract = _abstract;
	
}

/* Getter & Setter for attribute interface */
bool EClassImpl::isInterface() const 
{
	return m_interface;
}
void EClassImpl::setInterface(bool _interface)
{
	m_interface = _interface;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference eAllAttributes */
std::shared_ptr<Bag<ecore::EAttribute>> EClassImpl::getEAllAttributes() const
{
	//generated from getterBody annotation
    std::shared_ptr<Bag<ecore::EAttribute> > eAllAttributes(new Bag<ecore::EAttribute>());

    std::shared_ptr<Bag<ecore::EAttribute> > attributeList = this->getEAttributes();
    eAllAttributes->insert(eAllAttributes->end(), attributeList->begin(), attributeList->end());
    std::shared_ptr<Bag<EClass> > classList = this->getESuperTypes();
    for (std::shared_ptr<EClass> c : *classList)
    {
        std::shared_ptr<Bag<EAttribute> > attributeList = c->getEAllAttributes();
        eAllAttributes->insert(eAllAttributes->end(), attributeList->begin(), attributeList->end());
    }
    return eAllAttributes;
	//end of body
}

/* Getter & Setter for reference eAllContainments */
std::shared_ptr<Bag<ecore::EReference>> EClassImpl::getEAllContainments() const
{
	if(m_eAllContainments == nullptr)
	{
		m_eAllContainments.reset(new Bag<ecore::EReference>());
		
		
	}
    return m_eAllContainments;
}

/* Getter & Setter for reference eAllGenericSuperTypes */
std::shared_ptr<Bag<ecore::EGenericType>> EClassImpl::getEAllGenericSuperTypes() const
{
	if(m_eAllGenericSuperTypes == nullptr)
	{
		m_eAllGenericSuperTypes.reset(new Bag<ecore::EGenericType>());
		
		
	}
    return m_eAllGenericSuperTypes;
}

/* Getter & Setter for reference eAllOperations */
std::shared_ptr<Bag<ecore::EOperation>> EClassImpl::getEAllOperations() const
{
	//generated from getterBody annotation
std::shared_ptr< Bag<ecore::EOperation> > eAllOperations(new Bag<ecore::EOperation> () );

    std::shared_ptr<Bag<ecore::EOperation> > operationList = this->getEOperations();
    eAllOperations->insert(eAllOperations->end(), operationList->begin(), operationList->end());
    std::shared_ptr<Bag<EClass> > classList = this->getESuperTypes();
    for (std::shared_ptr<EClass > c : *classList)
    {
    	std::shared_ptr< Bag< EOperation> > operationList = c->getEAllOperations();
        eAllOperations->insert(eAllOperations->end(), operationList->begin(), operationList->end());
    }
    return eAllOperations;
	//end of body
}

/* Getter & Setter for reference eAllReferences */
std::shared_ptr<Bag<ecore::EReference>> EClassImpl::getEAllReferences() const
{
	//generated from getterBody annotation
    std::shared_ptr<Bag<ecore::EReference> > eAllReferences(new Bag<ecore::EReference>());

    std::shared_ptr<Bag<ecore::EReference> > referenceList = this->getEReferences();
    eAllReferences->insert(eAllReferences->end(), referenceList->begin(), referenceList->end());
    std::shared_ptr<Bag<EClass> > classList = this->getESuperTypes();
    for (std::shared_ptr<EClass> c : *classList)
    {
        std::shared_ptr<Bag<EReference> > referenceList = c->getEAllReferences();
        eAllReferences->insert(eAllReferences->end(), referenceList->begin(), referenceList->end());
    }
    return eAllReferences;
	//end of body
}

/* Getter & Setter for reference eAllStructuralFeatures */
std::shared_ptr<Bag<ecore::EStructuralFeature>> EClassImpl::getEAllStructuralFeatures() const
{
	//generated from getterBody annotation
std::shared_ptr< Bag<ecore::EStructuralFeature> > eAllStructuralFeatures( new Bag<ecore::EStructuralFeature> ());

    std::shared_ptr< Bag< EStructuralFeature> > featureList = this->getEStructuralFeatures();
    eAllStructuralFeatures->insert(eAllStructuralFeatures->end(), featureList->begin(), featureList->end());
    std::shared_ptr<Bag<EClass> > classList = this->getESuperTypes();
    for (std::shared_ptr<EClass > c : *classList)
    {
    	std::shared_ptr<Bag<EStructuralFeature> > featureList = c->getEAllStructuralFeatures();
        eAllStructuralFeatures->insert(eAllStructuralFeatures->end(), featureList->begin(), featureList->end());
    }
    return eAllStructuralFeatures;
	//end of body
}

/* Getter & Setter for reference eAllSuperTypes */
std::shared_ptr<Bag<ecore::EClass>> EClassImpl::getEAllSuperTypes() const
{
	//generated from getterBody annotation
std::shared_ptr< Bag<ecore::EClass> > eAllSuperTypes(new Bag<ecore::EClass>  ());

	std::shared_ptr<Bag<EClass> > classList = this->getESuperTypes();
    eAllSuperTypes->insert(eAllSuperTypes->end(), classList->begin(), classList->end());
    for (std::shared_ptr<EClass > c : *classList)
    {
    	std::shared_ptr<Bag<EClass> > classList = c->getEAllSuperTypes();
        eAllSuperTypes->insert(eAllSuperTypes->end(), classList->begin(), classList->end());
    }
    return eAllSuperTypes;
	//end of body
}

/* Getter & Setter for reference eAttributes */
std::shared_ptr<Subset<ecore::EAttribute, ecore::EStructuralFeature>> EClassImpl::getEAttributes() const
{
	if(m_eAttributes == nullptr)
	{
		/*Subset*/
		m_eAttributes.reset(new Subset<ecore::EAttribute, ecore::EStructuralFeature >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_eAttributes - Subset<ecore::EAttribute, ecore::EStructuralFeature >()" << std::endl;
		#endif
		
		/*Subset*/
		getEAttributes()->initSubset(getEStructuralFeatures());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_eAttributes - Subset<ecore::EAttribute, ecore::EStructuralFeature >(getEStructuralFeatures())" << std::endl;
		#endif
		
	}
    return m_eAttributes;
}

/* Getter & Setter for reference eGenericSuperTypes */
std::shared_ptr<Bag<ecore::EGenericType>> EClassImpl::getEGenericSuperTypes() const
{
	if(m_eGenericSuperTypes == nullptr)
	{
		m_eGenericSuperTypes.reset(new Bag<ecore::EGenericType>());
		
		
	}
    return m_eGenericSuperTypes;
}

/* Getter & Setter for reference eIDAttribute */
std::shared_ptr<ecore::EAttribute> EClassImpl::getEIDAttribute() const
{
    return m_eIDAttribute;
}
void EClassImpl::setEIDAttribute(std::shared_ptr<ecore::EAttribute> _eIDAttribute)
{
    m_eIDAttribute = _eIDAttribute;
	
}

/* Getter & Setter for reference eOperations */
std::shared_ptr<Subset<ecore::EOperation, ecore::EObject>> EClassImpl::getEOperations() const
{
	if(m_eOperations == nullptr)
	{
		/*Subset*/
		m_eOperations.reset(new Subset<ecore::EOperation, ecore::EObject >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_eOperations - Subset<ecore::EOperation, ecore::EObject >()" << std::endl;
		#endif
		
		/*Subset*/
		getEOperations()->initSubset(getEContens());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_eOperations - Subset<ecore::EOperation, ecore::EObject >(getEContens())" << std::endl;
		#endif
		
	}
    return m_eOperations;
}

/* Getter & Setter for reference eReferences */
std::shared_ptr<Subset<ecore::EReference, ecore::EStructuralFeature>> EClassImpl::getEReferences() const
{
	if(m_eReferences == nullptr)
	{
		/*Subset*/
		m_eReferences.reset(new Subset<ecore::EReference, ecore::EStructuralFeature >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_eReferences - Subset<ecore::EReference, ecore::EStructuralFeature >()" << std::endl;
		#endif
		
		/*Subset*/
		getEReferences()->initSubset(getEStructuralFeatures());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_eReferences - Subset<ecore::EReference, ecore::EStructuralFeature >(getEStructuralFeatures())" << std::endl;
		#endif
		
	}
    return m_eReferences;
}

/* Getter & Setter for reference eStructuralFeatures */

/* Getter & Setter for reference eSuperTypes */
std::shared_ptr<Bag<ecore::EClass>> EClassImpl::getESuperTypes() const
{
	if(m_eSuperTypes == nullptr)
	{
		m_eSuperTypes.reset(new Bag<ecore::EClass>());
		
		
	}
    return m_eSuperTypes;
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<ecore::EObject>> EClassImpl::getEContens() const
{
	if(m_eContens == nullptr)
	{
		/*Union*/
		m_eContens.reset(new Union<ecore::EObject>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_eContens - Union<ecore::EObject>()" << std::endl;
		#endif
		
		
	}
	return m_eContens;
}

std::shared_ptr<SubsetUnion<ecore::EStructuralFeature, ecore::EObject>> EClassImpl::getEStructuralFeatures() const
{
	if(m_eStructuralFeatures == nullptr)
	{
		/*SubsetUnion*/
		m_eStructuralFeatures.reset(new SubsetUnion<ecore::EStructuralFeature, ecore::EObject >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_eStructuralFeatures - SubsetUnion<ecore::EStructuralFeature, ecore::EObject >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getEStructuralFeatures()->initSubsetUnion(getEContens());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_eStructuralFeatures - SubsetUnion<ecore::EStructuralFeature, ecore::EObject >(getEContens())" << std::endl;
		#endif
		
	}
	return m_eStructuralFeatures;
}

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> EClassImpl::eContainer() const
{
	if(auto wp = m_eContainer.lock())
	{
		return wp;
	}

	if(auto wp = m_ePackage.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void EClassImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get ecoreFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void EClassImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("abstract");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setAbstract(value);
		}

		iter = attr_list.find("interface");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setInterface(value);
		}
		std::shared_ptr<EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("eAttributes");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eAttributes")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eIDAttribute");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eIDAttribute")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eReferences");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eReferences")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eSuperTypes");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eSuperTypes")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	EClassifierImpl::loadAttributes(loadHandler, attr_list);
}

void EClassImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("eGenericSuperTypes") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "EGenericType";
			}
			loadHandler->handleChildContainer<ecore::EGenericType>(this->getEGenericSuperTypes());  

			return; 
		}

		if ( nodeName.compare("eOperations") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "EOperation";
			}
			loadHandler->handleChildContainer<ecore::EOperation>(this->getEOperations());  

			return; 
		}

		if ( nodeName.compare("eStructuralFeatures") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChildContainer<ecore::EStructuralFeature>(this->getEStructuralFeatures());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	EClassifierImpl::loadNode(nodeName, loadHandler);
}

void EClassImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references)
{
	switch(featureID)
	{
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EATTRIBUTES:
		{
			std::shared_ptr<Subset<ecore::EAttribute, ecore::EStructuralFeature>> _eAttributes = getEAttributes();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<ecore::EAttribute>  _r = std::dynamic_pointer_cast<ecore::EAttribute>(ref);
				if (_r != nullptr)
				{
					_eAttributes->push_back(_r);
				}
			}
			return;
		}

		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EIDATTRIBUTE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::EAttribute> _eIDAttribute = std::dynamic_pointer_cast<ecore::EAttribute>( references.front() );
				setEIDAttribute(_eIDAttribute);
			}
			
			return;
		}

		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EREFERENCES:
		{
			std::shared_ptr<Subset<ecore::EReference, ecore::EStructuralFeature>> _eReferences = getEReferences();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<ecore::EReference>  _r = std::dynamic_pointer_cast<ecore::EReference>(ref);
				if (_r != nullptr)
				{
					_eReferences->push_back(_r);
				}
			}
			return;
		}

		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESUPERTYPES:
		{
			std::shared_ptr<Bag<ecore::EClass>> _eSuperTypes = getESuperTypes();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<ecore::EClass>  _r = std::dynamic_pointer_cast<ecore::EClass>(ref);
				if (_r != nullptr)
				{
					_eSuperTypes->push_back(_r);
				}
			}
			return;
		}
	}
	EClassifierImpl::resolveReferences(featureID, references);
}

void EClassImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	EClassifierImpl::saveContent(saveHandler);
	
	ENamedElementImpl::saveContent(saveHandler);
	
	EModelElementImpl::saveContent(saveHandler);
	
	EObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void EClassImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<ecore::ecorePackage> package = ecore::ecorePackage::eInstance();
		// Save 'eOperations'
		for (std::shared_ptr<ecore::EOperation> eOperations : *this->getEOperations()) 
		{
			saveHandler->addReference(eOperations, "eOperations", eOperations->eClass() != package->getEOperation_Class());
		}
		// Add attributes
		if ( this->eIsSet(package->getEClass_Attribute_abstract()) )
		{
			saveHandler->addAttribute("abstract", this->isAbstract());
		}

		if ( this->eIsSet(package->getEClass_Attribute_interface()) )
		{
			saveHandler->addAttribute("interface", this->isInterface());
		}
	// Add references
		saveHandler->addReferences<ecore::EAttribute>("eAttributes", this->getEAttributes());
		saveHandler->addReference(this->getEIDAttribute(),"eIDAttribute", getEIDAttribute()->eClass() != ecore::ecorePackage::eInstance()->getEAttribute_Class());
		saveHandler->addReferences<ecore::EReference>("eReferences", this->getEReferences());
		saveHandler->addReferences<ecore::EClass>("eSuperTypes", this->getESuperTypes());
		//
		// Add new tags (from references)
		//
		std::shared_ptr<EClass> metaClass = this->eClass();
		// Save 'eGenericSuperTypes'

		saveHandler->addReferences<ecore::EGenericType>("eGenericSuperTypes", this->getEGenericSuperTypes());

		// Save 'eStructuralFeatures'

		saveHandler->addReferences<ecore::EStructuralFeature>("eStructuralFeatures", this->getEStructuralFeatures());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}


std::shared_ptr<EClass> EClassImpl::eStaticClass() const
{
	return ecore::ecorePackage::eInstance()->getEClass_Class();
}


//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any EClassImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ABSTRACT:
			return eAny(isAbstract()); //1211
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLATTRIBUTES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EAttribute>::iterator iter = getEAllAttributes()->begin();
			Bag<ecore::EAttribute>::iterator end = getEAllAttributes()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1215			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLCONTAINMENTS:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EReference>::iterator iter = getEAllContainments()->begin();
			Bag<ecore::EReference>::iterator end = getEAllContainments()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1219			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLGENERICSUPERTYPES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EGenericType>::iterator iter = getEAllGenericSuperTypes()->begin();
			Bag<ecore::EGenericType>::iterator end = getEAllGenericSuperTypes()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1226			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLOPERATIONS:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EOperation>::iterator iter = getEAllOperations()->begin();
			Bag<ecore::EOperation>::iterator end = getEAllOperations()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1220			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLREFERENCES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EReference>::iterator iter = getEAllReferences()->begin();
			Bag<ecore::EReference>::iterator end = getEAllReferences()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1216			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLSTRUCTURALFEATURES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EStructuralFeature>::iterator iter = getEAllStructuralFeatures()->begin();
			Bag<ecore::EStructuralFeature>::iterator end = getEAllStructuralFeatures()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1221			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLSUPERTYPES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EClass>::iterator iter = getEAllSuperTypes()->begin();
			Bag<ecore::EClass>::iterator end = getEAllSuperTypes()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1222			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EATTRIBUTES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EAttribute>::iterator iter = getEAttributes()->begin();
			Bag<ecore::EAttribute>::iterator end = getEAttributes()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1218			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EGENERICSUPERTYPES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EGenericType>::iterator iter = getEGenericSuperTypes()->begin();
			Bag<ecore::EGenericType>::iterator end = getEGenericSuperTypes()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1225			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EIDATTRIBUTE:
			{
				std::shared_ptr<ecore::EObject> returnValue=getEIDAttribute();
				return eAny(returnValue); //1223
			}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EOPERATIONS:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EOperation>::iterator iter = getEOperations()->begin();
			Bag<ecore::EOperation>::iterator end = getEOperations()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1214			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EREFERENCES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EReference>::iterator iter = getEReferences()->begin();
			Bag<ecore::EReference>::iterator end = getEReferences()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1217			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESTRUCTURALFEATURES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EStructuralFeature>::iterator iter = getEStructuralFeatures()->begin();
			Bag<ecore::EStructuralFeature>::iterator end = getEStructuralFeatures()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1224			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESUPERTYPES:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EClass>::iterator iter = getESuperTypes()->begin();
			Bag<ecore::EClass>::iterator end = getESuperTypes()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //1213			
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_INTERFACE:
			return eAny(isInterface()); //1212
	}
	return EClassifierImpl::eGet(featureID, resolve, coreType);
}

bool EClassImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ABSTRACT:
			return isAbstract() != false; //1211
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLATTRIBUTES:
			return getEAllAttributes() != nullptr; //1215
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLCONTAINMENTS:
			return getEAllContainments() != nullptr; //1219
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLGENERICSUPERTYPES:
			return getEAllGenericSuperTypes() != nullptr; //1226
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLOPERATIONS:
			return getEAllOperations() != nullptr; //1220
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLREFERENCES:
			return getEAllReferences() != nullptr; //1216
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLSTRUCTURALFEATURES:
			return getEAllStructuralFeatures() != nullptr; //1221
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EALLSUPERTYPES:
			return getEAllSuperTypes() != nullptr; //1222
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EATTRIBUTES:
			return getEAttributes() != nullptr; //1218
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EGENERICSUPERTYPES:
			return getEGenericSuperTypes() != nullptr; //1225
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EIDATTRIBUTE:
			return getEIDAttribute() != nullptr; //1223
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EOPERATIONS:
			return getEOperations() != nullptr; //1214
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EREFERENCES:
			return getEReferences() != nullptr; //1217
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESTRUCTURALFEATURES:
			return getEStructuralFeatures() != nullptr; //1224
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESUPERTYPES:
			return getESuperTypes() != nullptr; //1213
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_INTERFACE:
			return isInterface() != false; //1212
	}
	return EClassifierImpl::internalEIsSet(featureID);
}

bool EClassImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ABSTRACT:
		{
			// BOOST CAST
			bool _abstract = newValue->get<bool>();
			setAbstract(_abstract); //1211
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EATTRIBUTES:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EAttribute>> eAttributesList(new Bag<ecore::EAttribute>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eAttributesList->add(std::dynamic_pointer_cast<ecore::EAttribute>(*iter));
				iter++;
			}
			
			Bag<ecore::EAttribute>::iterator iterEAttributes = getEAttributes()->begin();
			Bag<ecore::EAttribute>::iterator endEAttributes = getEAttributes()->end();
			while (iterEAttributes != endEAttributes)
			{
				if (eAttributesList->find(*iterEAttributes) == -1)
				{
					getEAttributes()->erase(*iterEAttributes);
				}
				iterEAttributes++;
			}
 
			iterEAttributes = eAttributesList->begin();
			endEAttributes = eAttributesList->end();
			while (iterEAttributes != endEAttributes)
			{
				if (getEAttributes()->find(*iterEAttributes) == -1)
				{
					getEAttributes()->add(*iterEAttributes);
				}
				iterEAttributes++;			
			}
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EGENERICSUPERTYPES:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EGenericType>> eGenericSuperTypesList(new Bag<ecore::EGenericType>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eGenericSuperTypesList->add(std::dynamic_pointer_cast<ecore::EGenericType>(*iter));
				iter++;
			}
			
			Bag<ecore::EGenericType>::iterator iterEGenericSuperTypes = getEGenericSuperTypes()->begin();
			Bag<ecore::EGenericType>::iterator endEGenericSuperTypes = getEGenericSuperTypes()->end();
			while (iterEGenericSuperTypes != endEGenericSuperTypes)
			{
				if (eGenericSuperTypesList->find(*iterEGenericSuperTypes) == -1)
				{
					getEGenericSuperTypes()->erase(*iterEGenericSuperTypes);
				}
				iterEGenericSuperTypes++;
			}
 
			iterEGenericSuperTypes = eGenericSuperTypesList->begin();
			endEGenericSuperTypes = eGenericSuperTypesList->end();
			while (iterEGenericSuperTypes != endEGenericSuperTypes)
			{
				if (getEGenericSuperTypes()->find(*iterEGenericSuperTypes) == -1)
				{
					getEGenericSuperTypes()->add(*iterEGenericSuperTypes);
				}
				iterEGenericSuperTypes++;			
			}
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EIDATTRIBUTE:
		{
			// BOOST CAST
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<ecore::EAttribute> _eIDAttribute = std::dynamic_pointer_cast<ecore::EAttribute>(_temp);
			setEIDAttribute(_eIDAttribute); //1223
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EOPERATIONS:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EOperation>> eOperationsList(new Bag<ecore::EOperation>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eOperationsList->add(std::dynamic_pointer_cast<ecore::EOperation>(*iter));
				iter++;
			}
			
			Bag<ecore::EOperation>::iterator iterEOperations = getEOperations()->begin();
			Bag<ecore::EOperation>::iterator endEOperations = getEOperations()->end();
			while (iterEOperations != endEOperations)
			{
				if (eOperationsList->find(*iterEOperations) == -1)
				{
					getEOperations()->erase(*iterEOperations);
				}
				iterEOperations++;
			}
 
			iterEOperations = eOperationsList->begin();
			endEOperations = eOperationsList->end();
			while (iterEOperations != endEOperations)
			{
				if (getEOperations()->find(*iterEOperations) == -1)
				{
					getEOperations()->add(*iterEOperations);
				}
				iterEOperations++;			
			}
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_EREFERENCES:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EReference>> eReferencesList(new Bag<ecore::EReference>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eReferencesList->add(std::dynamic_pointer_cast<ecore::EReference>(*iter));
				iter++;
			}
			
			Bag<ecore::EReference>::iterator iterEReferences = getEReferences()->begin();
			Bag<ecore::EReference>::iterator endEReferences = getEReferences()->end();
			while (iterEReferences != endEReferences)
			{
				if (eReferencesList->find(*iterEReferences) == -1)
				{
					getEReferences()->erase(*iterEReferences);
				}
				iterEReferences++;
			}
 
			iterEReferences = eReferencesList->begin();
			endEReferences = eReferencesList->end();
			while (iterEReferences != endEReferences)
			{
				if (getEReferences()->find(*iterEReferences) == -1)
				{
					getEReferences()->add(*iterEReferences);
				}
				iterEReferences++;			
			}
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESTRUCTURALFEATURES:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EStructuralFeature>> eStructuralFeaturesList(new Bag<ecore::EStructuralFeature>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eStructuralFeaturesList->add(std::dynamic_pointer_cast<ecore::EStructuralFeature>(*iter));
				iter++;
			}
			
			Bag<ecore::EStructuralFeature>::iterator iterEStructuralFeatures = getEStructuralFeatures()->begin();
			Bag<ecore::EStructuralFeature>::iterator endEStructuralFeatures = getEStructuralFeatures()->end();
			while (iterEStructuralFeatures != endEStructuralFeatures)
			{
				if (eStructuralFeaturesList->find(*iterEStructuralFeatures) == -1)
				{
					getEStructuralFeatures()->erase(*iterEStructuralFeatures);
				}
				iterEStructuralFeatures++;
			}
 
			iterEStructuralFeatures = eStructuralFeaturesList->begin();
			endEStructuralFeatures = eStructuralFeaturesList->end();
			while (iterEStructuralFeatures != endEStructuralFeatures)
			{
				if (getEStructuralFeatures()->find(*iterEStructuralFeatures) == -1)
				{
					getEStructuralFeatures()->add(*iterEStructuralFeatures);
				}
				iterEStructuralFeatures++;			
			}
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_ESUPERTYPES:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EClass>> eSuperTypesList(new Bag<ecore::EClass>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eSuperTypesList->add(std::dynamic_pointer_cast<ecore::EClass>(*iter));
				iter++;
			}
			
			Bag<ecore::EClass>::iterator iterESuperTypes = getESuperTypes()->begin();
			Bag<ecore::EClass>::iterator endESuperTypes = getESuperTypes()->end();
			while (iterESuperTypes != endESuperTypes)
			{
				if (eSuperTypesList->find(*iterESuperTypes) == -1)
				{
					getESuperTypes()->erase(*iterESuperTypes);
				}
				iterESuperTypes++;
			}
 
			iterESuperTypes = eSuperTypesList->begin();
			endESuperTypes = eSuperTypesList->end();
			while (iterESuperTypes != endESuperTypes)
			{
				if (getESuperTypes()->find(*iterESuperTypes) == -1)
				{
					getESuperTypes()->add(*iterESuperTypes);
				}
				iterESuperTypes++;			
			}
			return true;
		}
		case ecore::ecorePackage::ECLASS_ATTRIBUTE_INTERFACE:
		{
			// BOOST CAST
			bool _interface = newValue->get<bool>();
			setInterface(_interface); //1212
			return true;
		}
	}

	return EClassifierImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
Any EClassImpl::eInvoke(int operationID, std::shared_ptr<std::list < std::shared_ptr<Any>>> arguments)
{
	Any result;

  	switch(operationID)
	{
		
		// 1526673885
		case ecorePackage::ECLASS_OPERATION_GETEOPERATION_EINT:
		{
			//Retrieve input parameter 'operationID'
			//parameter 0
			int incoming_param_operationID;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_operationID_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_operationID = (*incoming_param_operationID_arguments_citer)->get()->get<int >();
			result = eAny(this->getEOperation(incoming_param_operationID));
			break;
		}
		
		// 1143915648
		case ecorePackage::ECLASS_OPERATION_GETESTRUCTURALFEATURE_EINT:
		{
			//Retrieve input parameter 'featureID'
			//parameter 0
			int incoming_param_featureID;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_featureID_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_featureID = (*incoming_param_featureID_arguments_citer)->get()->get<int >();
			result = eAny(this->getEStructuralFeature(incoming_param_featureID));
			break;
		}
		
		// 927658850
		case ecorePackage::ECLASS_OPERATION_GETESTRUCTURALFEATURE_ESTRING:
		{
			//Retrieve input parameter 'featureName'
			//parameter 0
			std::string incoming_param_featureName;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_featureName_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_featureName = (*incoming_param_featureName_arguments_citer)->get()->get<std::string >();
			result = eAny(this->getEStructuralFeature(incoming_param_featureName));
			break;
		}
		
		// 663421227
		case ecorePackage::ECLASS_OPERATION_GETFEATURECOUNT:
		{
			result = eAny(this->getFeatureCount());
			break;
		}
		
		// 118348729
		case ecorePackage::ECLASS_OPERATION_GETFEATUREID_ESTRUCTURALFEATURE:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get()->get<std::shared_ptr<ecore::EStructuralFeature> >();
			result = eAny(this->getFeatureID(incoming_param_feature));
			break;
		}
		
		// 1392350498
		case ecorePackage::ECLASS_OPERATION_GETFEATURETYPE_ESTRUCTURALFEATURE:
		{
			//Retrieve input parameter 'feature'
			//parameter 0
			std::shared_ptr<ecore::EStructuralFeature> incoming_param_feature;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_feature_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_feature = (*incoming_param_feature_arguments_citer)->get()->get<std::shared_ptr<ecore::EStructuralFeature> >();
			result = eAny(this->getFeatureType(incoming_param_feature));
			break;
		}
		
		// 2008923785
		case ecorePackage::ECLASS_OPERATION_GETOPERATIONCOUNT:
		{
			result = eAny(this->getOperationCount());
			break;
		}
		
		// 88181657
		case ecorePackage::ECLASS_OPERATION_GETOPERATIONID_EOPERATION:
		{
			//Retrieve input parameter 'operation'
			//parameter 0
			std::shared_ptr<ecore::EOperation> incoming_param_operation;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_operation_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_operation = (*incoming_param_operation_arguments_citer)->get()->get<std::shared_ptr<ecore::EOperation> >();
			result = eAny(this->getOperationID(incoming_param_operation));
			break;
		}
		
		// 280340408
		case ecorePackage::ECLASS_OPERATION_GETOVERRIDE_EOPERATION:
		{
			//Retrieve input parameter 'operation'
			//parameter 0
			std::shared_ptr<ecore::EOperation> incoming_param_operation;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_operation_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_operation = (*incoming_param_operation_arguments_citer)->get()->get<std::shared_ptr<ecore::EOperation> >();
			result = eAny(this->getOverride(incoming_param_operation));
			break;
		}
		
		// 253558657
		case ecorePackage::ECLASS_OPERATION_ISSUPERTYPEOF_ECLASS:
		{
			//Retrieve input parameter 'someClass'
			//parameter 0
			std::shared_ptr<ecore::EClass> incoming_param_someClass;
			std::list<std::shared_ptr<Any>>::const_iterator incoming_param_someClass_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_someClass = (*incoming_param_someClass_arguments_citer)->get()->get<std::shared_ptr<ecore::EClass> >();
			result = eAny(this->isSuperTypeOf(incoming_param_someClass));
			break;
		}

		default:
		{
			// call superTypes
			result = EClassifierImpl::eInvoke(operationID, arguments);
			if (!result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}


std::shared_ptr<ecore::EClass> EClassImpl::getThisEClassPtr() const
{
	return m_thisEClassPtr.lock();
}
void EClassImpl::setThisEClassPtr(std::weak_ptr<ecore::EClass> thisEClassPtr)
{
	m_thisEClassPtr = thisEClassPtr;
	setThisEClassifierPtr(thisEClassPtr);
}
