[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClassifierObjectSource('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[query public supportedTypes(type : Type) : Boolean = (type.name = 'Integer') or (type.name = 'Boolean') /]
[query public getStructuralFeaturesFromRSTA(aPackage : Package, aClassifier : Classifier) : OrderedSet(StructuralFeature) = aPackage.allOwnedElements()->filter(ReadStructuralFeatureAction)->select(object.type=aClassifier).structuralFeature->asOrderedSet()->sortedBy(name)/]
[query public getStructuralFeaturesFromASTVA(aPackage : Package, aClassifier : Classifier) : OrderedSet(StructuralFeature) = aPackage.allOwnedElements()->filter(AddStructuralFeatureValueAction)->select(object.type=aClassifier).structuralFeature->asOrderedSet()->sortedBy(name)/]
[query public getStructuralFeaturesFromRSTVA(aPackage : Package, aClassifier : Classifier) : OrderedSet(StructuralFeature) = aPackage.allOwnedElements()->filter(RemoveStructuralFeatureValueAction)->select(object.type=aClassifier).structuralFeature->asOrderedSet()->sortedBy(name)/]

[template public generateClassifierObjectSource(aClassifier : Classifier, aPackage:Package) {
	className : String = objectClassName();
	pointerName : String = pointerName(aPackage);
}]
[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]Exec/[className/].hpp"

#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aClassifier.getNearestPackage().myNamespaceName()/]/[aClassifier.name.toUpperFirst()/].hpp"
[let attributes : OrderedSet(Property)= aPackage.getStructuralFeaturesFromRSTA(aClassifier)->addAll(aPackage.getStructuralFeaturesFromASTVA(aClassifier))->addAll(aPackage.getStructuralFeaturesFromRSTVA(aClassifier).oclAsType(Property)->flatten()->sortedBy(qualifiedName))]
[if (attributes->size() > 0)]

#include "abstractDataTypes/Any.hpp"
[if (aPackage.getStructuralFeaturesFromRSTA(aClassifier)->size() > 0)]
#include "fUML/FUMLFactory.hpp"
[/if]
#include "fUML/Semantics/StructuredClassifiers/Reference.hpp"
#include "fUML/Semantics/Values/Value.hpp"
[for (property : Property | attributes->sortedBy(qualifiedName))]
[if (property.type.oclIsKindOf(PrimitiveType))]
#include "fUML/Semantics/SimpleClassifiers/[property.type.name.toUpperFirst()/]Value.hpp"
[else]
#include "[aPackage.getPackageName()/]Exec/[property.type.oclAsType(Classifier).objectClassName()/].hpp"
#include "[if (aClassifier._package.name = 'UML')]uml[else][aClassifier._package.name/][/if]/[aClassifier.name/].hpp"
[/if]
[/for]
#include "uml/Property.hpp"

[for (aPack : Package | attributes.getNearestPackage()->asSet()->flatten()->sortedBy(name))]
#include "[aPack.getPackageName()/]/[aPack.name/]Package.hpp"
[/for]
[/if]
[/let]

using namespace [aPackage.name/];

[className/]::[className/](std::shared_ptr<[pointerName/]> _element):
	m_umlValue(_element)
{
}

[className/]::[className/]([className/] &obj):
	ObjectImpl(obj)
{
}

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}

std::shared_ptr<ecore::EObject> [className/]::copy()
{
	std::shared_ptr<[className/]> element(new [className/](*this));
	element->setThis[className/]Ptr(element);
	return element;
}

std::shared_ptr<[pointerName/]> [className/]::getUmlValue() const
{
	return m_umlValue;
}

void [className/]::setUmlValue(std::shared_ptr<[pointerName/]> _element)
{
	m_umlValue = _element;
}

void [className/]::setThis[className/]Ptr(std::weak_ptr<[className/]> thisObjectPtr)
{
	setThisObjectPtr(thisObjectPtr);
}
[if (aPackage.getStructuralFeaturesFromRSTVA(aClassifier)->size() > 0)]

void [className/]::removeValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<fUML::Semantics::Values::Value> value)
{
	std::shared_ptr<uml::Property> property = std::dynamic_pointer_cast<uml::Property>(feature);
	if (property == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": feature is null or not kind of uml::Property" << std::endl;
		throw "feature is null or not kind of uml::Property";
	}

	if (m_umlValue == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": not implemented for object lists" << std::endl;
		throw "UnsupportedParameterException";	
	}

[for (aProperty : Property | aPackage.getStructuralFeaturesFromRSTVA(aClassifier).oclAsType(Property))]
	if (property == [aProperty.getModelPackage()/][aProperty.generatePackageGetterCall(aProperty)/])
	{
[if (aProperty.upper = 1)]
[if (aProperty.isPrimitiveTypedProperty())]
[if (aProperty.default->notEmpty())]
				m_umlValue->[aProperty.setterName()/]([aProperty.genDefault()/]);
[else]
				// no default value defined, clear not realized
[/if]
[else]
				m_umlValue->[aProperty.setterName()/](nullptr);
[/if]

[else]
		if (value == nullptr) // clear mode
		{
			m_umlValue->[aProperty.getterName()/]()->clear();
		}
		else
		{
[if (aProperty.isPrimitiveTypedProperty())]
			std::shared_ptr<[aProperty.type.getValueClass()/]> inputValue = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(value);
			if (inputValue != nullptr)
			{
				[aProperty.type.generateCppType(true)/] specificValue = inputValue->getValue();
				std::shared_ptr<Bag<[aProperty.type.generateCppType(true)/]>> valueList = m_umlValue->[aProperty.getterName()/];
				Bag<int>::iterator iter = valueList->begin();
				Bag<int>::iterator end = valueList->end();
				while (iter != end)
				{
					if (specificValue == *iter)
					{
						valueList->erase(iter);
						break;
					}
					iter++;
				}
			}
[else]
			std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> reference = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>(value);
			std::shared_ptr<[aProperty.type.getValueClass()/]> inputValue = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(reference->getReferent());
			if (inputValue != nullptr)
			{
				m_umlValue->[aProperty.getterName()/]()->erase(inputValue->getUmlValue());
[/if]
			}
		}
[/if]
	}
[/for]
}
[/if]
[if (aPackage.getStructuralFeaturesFromRSTA(aClassifier)->size() > 0)]

std::shared_ptr<Bag<fUML::Semantics::Values::Value>> [className/]::getValues(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues)
{
	std::shared_ptr<uml::Property> property = std::dynamic_pointer_cast<uml::Property>(feature);
	if (property == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": feature is null or not kind of uml::Property" << std::endl;
		throw "feature is null or not kind of uml::Property";
	}

	if (m_umlValue == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": no value stored inside [className/]" << std::endl;
		throw "NullPointerException";	
	}

	std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values(new Bag<fUML::Semantics::Values::Value>());
[for (aProperty : Property | aPackage.getStructuralFeaturesFromRSTA(aClassifier).oclAsType(Property))]
	if (property == [aProperty.getModelPackage()/][aProperty.generatePackageGetterCall(aProperty)/])
	{
[if (aProperty.isPrimitiveTypedProperty())]
[if (aProperty.upper = 1)]
		std::shared_ptr<[aProperty.type.getValueClass()/]> value = fUML::FUMLFactory::eInstance()->create[aProperty.type.name.toUpperFirst()/]Value();
		value->setValue(m_umlValue->[aProperty.getterName()/]());
		values->add(value);
[else]
		std::shared_ptr<Bag<[aProperty.type.generateCppType(true)/]>> valueList = m_umlValue->[aProperty.getterName()/]();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator iter = valueList->begin();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator end = valueList->end();
		while (iter != end)
		{
			std::shared_ptr<[aProperty.type.getValueClass()/]> value = fUML::FUMLFactory::eInstance()->create[aProperty.type.name.toUpperFirst()/]Value();
			value->setValue(*(*iter));
			values->push_back(value);
			iter++;
		}
[/if]
[else]
[if (aProperty.upper = 1)]
		std::shared_ptr<[aProperty.type.getValueClass()/]> value(new [aProperty.type.oclAsType(Classifier).objectClassName()/]());
		value->setThis[aProperty.type.oclAsType(Classifier).objectClassName()/]Ptr(value);
		value->setLocus(this->getLocus());
		value->setUmlValue(m_umlValue->[aProperty.getterName()/]());
		std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> reference= fUML::FUMLFactory::eInstance()->createReference();
		reference->setReferent(value);
		values->add(reference);
[else]
		[aProperty.generateCppType()/] [aProperty.name.toLowerFirst()/]List = m_umlValue->[aProperty.getterName()/]();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator iter = [aProperty.name.toLowerFirst()/]List->begin();
		Bag<[aProperty.type.generateCppType(true)/]>::iterator end = [aProperty.name.toLowerFirst()/]List->end();
		while (iter != end)
		{
			std::shared_ptr<[aProperty.type.getValueClass()/]> value(new [aProperty.type.oclAsType(Classifier).objectClassName()/]());
			value->setThis[aProperty.type.oclAsType(Classifier).objectClassName()/]Ptr(value);
			value->setLocus(this->getLocus());
			value->setUmlValue(*iter);
			std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> reference= fUML::FUMLFactory::eInstance()->createReference();
			reference->setReferent(value);
			values->add(reference);
			iter++;
		} 
[/if]
[/if]
	}
[/for]	
	return values;
}
[/if]
[if (aPackage.getStructuralFeaturesFromASTVA(aClassifier)->size() > 0)]

void [className/]::setFeatureValue(std::shared_ptr<uml::StructuralFeature> feature, std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values, int position)
{
	std::shared_ptr<uml::Property> property = std::dynamic_pointer_cast<uml::Property>(feature);
	if (property == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": feature is null or not kind of uml::Property" << std::endl;
		throw "feature is null or not kind of uml::Property";
	}

	if (m_umlValue == nullptr)
	{
		std::cerr << __PRETTY_FUNCTION__ << ": not implemented for object lists" << std::endl;
		throw "UnsupportedParameterException";
	}

	if (values->size() == 0)
	{
		std::cout << __PRETTY_FUNCTION__ << ": no input value given" << std::endl;
		return;
	}
[for (aProperty : Property | aPackage.getStructuralFeaturesFromASTVA(aClassifier).oclAsType(Property))]
	if (property == [aProperty.getModelPackage()/][aProperty.generatePackageGetterCall(aProperty)/])
	{
[if (aProperty.upper = 1)]
		std::shared_ptr<Value> inputValue = values->at(0);
		[aProperty.generateSetFeatureValue()/]
[else]
		Bag<fUML::Semantics::Values::Value>::iterator iter = values->begin();
		Bag<fUML::Semantics::Values::Value>::iterator end = values->end();
		while (iter != end)
		{
			std::shared_ptr<Value> inputValue = *iter;
			[aProperty.generateSetFeatureValue()/]
			iter++;
		}
[/if]
	}
[/for]
}
[/if]
[/file]
[/template]

[template private generateSetFeatureValue(aProperty : Property)]
[if (aProperty.isPrimitiveTypedProperty())]
std::shared_ptr<[aProperty.type.getValueClass()/]> valueObject = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(inputValue);
if (valueObject != nullptr)
{
[if (aProperty.upper = 1)]
	m_umlValue->[aProperty.setterName()/](valueObject->[aProperty.getterPrefix()/]Value());
[else]
	std::shared_ptr<[aProperty.type.generateCppType(true)/]> value(new [aProperty.type.generateCppType(true)/](valueObject->getValue()));
	m_umlValue->[aProperty.getterName()/]()->push_back(value);
[/if]
}
[else]
std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> reference = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>(inputValue);
std::shared_ptr<[aProperty.type.getValueClass()/]> value = std::dynamic_pointer_cast<[aProperty.type.getValueClass()/]>(reference->getReferent());
if (value != nullptr)
{
[if (aProperty.upper = 1)]
	m_umlValue->[aProperty.setterName()/](value->getUmlValue());
[else]
	m_umlValue->[aProperty.getterName()/]()->push_back(value->getUmlValue());
[/if]
}
[/if]
[/template]

[query private isPrimitiveTypedProperty(aProperty : Property) : Boolean = aProperty.type.oclIsKindOf(PrimitiveType) /] 