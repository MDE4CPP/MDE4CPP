//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_VALUES_OCLMESSAGEVALUEOCLMESSAGEVALUEIMPL_HPP
#define OCL_VALUES_OCLMESSAGEVALUEOCLMESSAGEVALUEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "ocl/ocl.hpp" 

// model includes
#include "../OclMessageValue.hpp"

#include "ocl/Values/impl/ValuesFactoryImpl.hpp"
#include "fUML/Semantics/Values/impl/ValueImpl.hpp"

//*********************************
namespace ocl::Values 
{
	class OCL_API OclMessageValueImpl : virtual public fUML::Semantics::Values::ValueImpl, virtual public OclMessageValue 
	{
		public: 
			OclMessageValueImpl(const OclMessageValueImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			OclMessageValueImpl& operator=(OclMessageValueImpl const&); 

		protected:
			friend class ocl::Values::ValuesFactoryImpl;
			OclMessageValueImpl();
			virtual std::shared_ptr<ocl::Values::OclMessageValue> getThisOclMessageValuePtr() const;
			virtual void setThisOclMessageValuePtr(std::weak_ptr<ocl::Values::OclMessageValue> thisOclMessageValuePtr);


		public:
			//destructor
			virtual ~OclMessageValueImpl();
			
			//*********************************
			// Operations
			//*********************************
			virtual std::string toString() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual bool getIsAsyncOperation() const ;
			virtual void setIsAsyncOperation (bool _isAsyncOperation);
			virtual bool getIsSignal() const ;
			virtual void setIsSignal (bool _isSignal);
			virtual bool getIsSyncOperation() const ;
			virtual void setIsSyncOperation (bool _isSyncOperation);
			virtual std::string getName() const ;
			virtual void setName (std::string _name);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<Bag<ocl::Values::NameValueBinding>> getArguments() const ;
			virtual std::shared_ptr<ocl::Values::OclMessageValue> getReturnMessage() const ;
			virtual void setReturnMessage(std::shared_ptr<ocl::Values::OclMessageValue>) ;
			virtual std::shared_ptr<ocl::Values::ObjectValue> getSource() const ;
			virtual void setSource(std::shared_ptr<ocl::Values::ObjectValue>) ;
			virtual std::shared_ptr<ocl::Values::ObjectValue> getTarget() const ;
			virtual void setTarget(std::shared_ptr<ocl::Values::ObjectValue>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, Any newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual Any eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments) ;

		private:
			std::weak_ptr<ocl::Values::OclMessageValue> m_thisOclMessageValuePtr;
	};
}
#endif /* end of include guard: OCL_VALUES_OCLMESSAGEVALUEOCLMESSAGEVALUEIMPL_HPP */
