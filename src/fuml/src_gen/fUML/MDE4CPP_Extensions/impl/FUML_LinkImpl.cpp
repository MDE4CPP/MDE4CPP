
#include "fUML/MDE4CPP_Extensions/impl/FUML_LinkImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsFactory.hpp"
#include "uml/umlFactory.hpp"
#include "uml/Association.hpp"
#include "fUML/MDE4CPP_Extensions/FUML_LinkEnd.hpp"
#include "fUML/MDE4CPP_Extensions/FUML_Object.hpp"
#include "uml/Property.hpp"
//Factories and Package includes
#include "fUML/fUMLPackage.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace fUML::MDE4CPP_Extensions;

//*********************************
// Constructor / Destructor
//*********************************
FUML_LinkImpl::FUML_LinkImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

FUML_LinkImpl::~FUML_LinkImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete FUML_Link "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


FUML_LinkImpl::FUML_LinkImpl(const FUML_LinkImpl & obj): FUML_LinkImpl()
{
	*this = obj;
}

FUML_LinkImpl& FUML_LinkImpl::operator=(const FUML_LinkImpl & obj)
{
	//call overloaded =Operator for each base class
	ecore::EModelElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of FUML_Link 
	 * which is generated by the compiler (as FUML_Link is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//FUML_Link::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy FUML_Link "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_type  = obj.getType();
	//Clone references with containment (deep copy)
	//clone reference 'linkEnds'
	const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>>& linkEndsList = obj.getLinkEnds();
	if(linkEndsList)
	{
		m_linkEnds.reset(new Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>());
		
		
		for(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd>& linkEndsindexElem: *linkEndsList) 
		{
			const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd>& temp = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_LinkEnd>((linkEndsindexElem)->copy());
			m_linkEnds->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for linkEnds.")
	}
	
	return *this;
}

std::shared_ptr<ecore::EObject> FUML_LinkImpl::copy() const
{
	std::shared_ptr<FUML_LinkImpl> element(new FUML_LinkImpl());
	*element =(*this);
	element->setThisFUML_LinkPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
void FUML_LinkImpl::add(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& object, const std::shared_ptr<uml::Property>& end)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		// If a link end already exists for the given end property, remove this link from the links of the current link end value
	// and replace it with the given object.
	// If no link end exists for the given end property, create a new one and add it to this link's link ends.
	// Finally, add this link to the links of the given object.

	const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>>& linkEnds = this->getLinkEnds();
	std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> matchingLinkEnd;

	for(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd>& linkEnd : *linkEnds)
	{
		if(linkEnd->getEnd() == end)
		{
			matchingLinkEnd = linkEnd;
			break;
		}
	}

	if(matchingLinkEnd)
	{
		const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& oldEndValue = matchingLinkEnd->getEndValue();
		const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_Link>>& oldEndValueLinks = oldEndValue->getLinks();
		oldEndValueLinks->erase(this->getThisFUML_LinkPtr());

		matchingLinkEnd->setEndValue(object);
	}
	else
	{
		std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> newLinkEnd = fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsFactory::eInstance()->createFUML_LinkEnd();
		newLinkEnd->setEnd(end);
		newLinkEnd->setEndValue(object);
		this->getLinkEnds()->add(newLinkEnd);
	}

	object->getLinks()->add(this->getThisFUML_LinkPtr());
	//end of body
}

void FUML_LinkImpl::destroy()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>>& linkEnds = this->getLinkEnds();	

	for(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd>& linkEnd : *linkEnds)
	{
		const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& endValue = linkEnd->getEndValue();
		const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_Link>>& endValueLinks = endValue->getLinks();
		endValueLinks->erase(this->getThisFUML_LinkPtr());
	}
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference linkEnds */
const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>>& FUML_LinkImpl::getLinkEnds() const
{
	if(m_linkEnds == nullptr)
	{
		m_linkEnds.reset(new Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>());
		
		
	}
    return m_linkEnds;
}

/* Getter & Setter for reference type */
const std::shared_ptr<uml::Association>& FUML_LinkImpl::getType() const
{
    return m_type;
}
void FUML_LinkImpl::setType(const std::shared_ptr<uml::Association>& _type)
{
    m_type = _type;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> FUML_LinkImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void FUML_LinkImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get fUMLFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void FUML_LinkImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("type");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("type")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void FUML_LinkImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("linkEnds") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "fUML::MDE4CPP_Extensions::FUML_LinkEnd";
			}
			else
			{
				if (std::string::npos == typeName.find("fUML::MDE4CPP_Extensions/]"))
				{
					typeName = "fUML::MDE4CPP_Extensions::"+typeName;
				}
			}
			std::shared_ptr<ecore::ecoreFactory> modelFactory = ecore::ecoreFactory::eInstance();		
			std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> new_linkEnds = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_LinkEnd>(modelFactory->create(typeName, loadHandler->getCurrentObject(), fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_LINKENDS));
			if(new_linkEnds)
			{
				loadHandler->handleChild(new_linkEnds);
				getLinkEnds()->push_back(new_linkEnds);
			} 

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
}

void FUML_LinkImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_TYPE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::Association> _type = std::dynamic_pointer_cast<uml::Association>( references.front() );
				setType(_type);
			}
			
			return;
		}
	}
	ecore::EObjectImpl::resolveReferences(featureID, references);
}

void FUML_LinkImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void FUML_LinkImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage> package = fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance();
	// Add references
	if ( this->eIsSet(package->getFUML_Link_Attribute_type()) )
	{
		saveHandler->addReference(this->getType(), "type", getType()->eClass() != uml::umlPackage::eInstance()->getAssociation_Class()); 
	}
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'linkEnds'
	    if ( this->eIsSet(package->getFUML_Link_Attribute_linkEnds()) )
	    {
		saveHandler->addReferences<fUML::MDE4CPP_Extensions::FUML_LinkEnd>("linkEnds", this->getLinkEnds());
	    }
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& FUML_LinkImpl::eStaticClass() const
{
	return fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance()->getFUML_Link_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> FUML_LinkImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_LINKENDS:
			return eEcoreContainerAny(getLinkEnds(),fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINKEND_CLASS); //540
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_TYPE:
			return eAny(getType(),uml::umlPackage::ASSOCIATION_CLASS,false); //541
	}
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
}

bool FUML_LinkImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_LINKENDS:
			return getLinkEnds() != nullptr; //540
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_TYPE:
			return getType() != nullptr; //541
	}
	return ecore::EObjectImpl::internalEIsSet(featureID);
}

bool FUML_LinkImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_LINKENDS:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<fUML::MDE4CPP_Extensions::FUML_LinkEnd>>& _linkEnds = getLinkEnds();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_LinkEnd> valueToAdd = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_LinkEnd>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_linkEnds->includes(valueToAdd)))
								{
									_linkEnds->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'linkEnds'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'linkEnds'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_LINK_ATTRIBUTE_TYPE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Association> _type = std::dynamic_pointer_cast<uml::Association>(eObject);
					if(_type)
					{
						setType(_type); //541
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'type'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'type'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ecore::EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> FUML_LinkImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// fUML::MDE4CPP_Extensions::FUML_Link::add(fUML::MDE4CPP_Extensions::FUML_Object, uml::Property): 2782434456
		case MDE4CPP_ExtensionsPackage::FUML_LINK_OPERATION_ADD_FUML_OBJECT_PROPERTY:
		{
			//Retrieve input parameter 'object'
			//parameter 0
			std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> incoming_param_object;
			Bag<Any>::const_iterator incoming_param_object_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_object_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_object = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_Object>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'object'. Failed to invoke operation 'add'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'object'. Failed to invoke operation 'add'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'end'
			//parameter 1
			std::shared_ptr<uml::Property> incoming_param_end;
			Bag<Any>::const_iterator incoming_param_end_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_end_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_end = std::dynamic_pointer_cast<uml::Property>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'end'. Failed to invoke operation 'add'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'end'. Failed to invoke operation 'add'!")
					return nullptr;
				}
			}
		
			this->add(incoming_param_object,incoming_param_end);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Link::destroy(): 1266427544
		case MDE4CPP_ExtensionsPackage::FUML_LINK_OPERATION_DESTROY:
		{
			this->destroy();
			break;
		}

		default:
		{
			// call superTypes
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Link> FUML_LinkImpl::getThisFUML_LinkPtr() const
{
	return m_thisFUML_LinkPtr.lock();
}
void FUML_LinkImpl::setThisFUML_LinkPtr(std::weak_ptr<fUML::MDE4CPP_Extensions::FUML_Link> thisFUML_LinkPtr)
{
	m_thisFUML_LinkPtr = thisFUML_LinkPtr;
}


