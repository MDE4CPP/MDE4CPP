plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.5"
	id "de.undercouch.download" version "3.4.2"
}

description 'Parser library'

def antlr4Version = "4.9.1"

task downloadAntlr4(type: Download) {
	description 'download antlr4'
    src "https://www.antlr.org/download/antlr4-cpp-runtime-${antlr4Version}-source.zip"
    dest new File(file("./antlr4/antlr4-cpp-runtime-${antlr4Version}-source.zip").absolutePath)
    onlyIfModified true
}

task downloadAndUnzipAntlr4(dependsOn: downloadAntlr4, type: Copy) {
	description 'download and unzip antlr4'
	from zipTree("antlr4/antlr4-cpp-runtime-${antlr4Version}-source.zip")
	into file("antlr4/antlr4-cpp-runtime-${antlr4Version}-source").absolutePath
}

task compileAntlr4(dependsOn: downloadAndUnzipAntlr4) {
	group "Antlr4"
	description 'download, unzip and compile antlr4'

	def folder = new File(file("./antlr4/antlr4-cpp-runtime-${antlr4Version}-source/.cmake").absolutePath)
	if( !folder.exists()) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir "antlr4/antlr4-cpp-runtime-${antlr4Version}-source/.cmake"
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=' + file("./antlr4/bin") + ' ' + file("./antlr4/antlr4-cpp-runtime-${antlr4Version}-source").absolutePath
			} else {
				commandLine '/bin/sh', '-c', 'cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=' + file("./antlr4/bin") + ' ' + file("./antlr4/antlr4-cpp-runtime-${antlr4Version}-source").absolutePath
			}
		}
		exec {
			workingDir "antlr4/antlr4-cpp-runtime-${antlr4Version}-source/.cmake"
			def count = findProperty('WORKER') ?: 1
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'mingw32-make install -j' + count
			} else {
			   commandLine '/bin/sh', '-c', 'make install -j' + count
			}
		}
		copy {
			from "antlr4/bin/include"
			into System.getenv('MDE4CPP_HOME')+"/application/include"
			include "**/*.hpp", "**/*.h", "**/*.c"
		}
		copy {
			from "antlr4/bin/lib"
			into System.getenv('MDE4CPP_HOME')+"/application/bin"
			include "**/*.dll", "**/*.so", "**/*.dylib"
		}
		copy {
			from "antlr4/bin/lib"
			into System.getenv('MDE4CPP_HOME')+"/application/lib"
			include "**/*.a"
		}
	}

	inputs.files(fileTree(".${File.separator}antlr4${File.separator}antlr4-cpp-runtime-${antlr4Version}-source") {
        exclude '.cmake/**'
    })
	if(!file('.' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'libantlr4-runtime.dll')
	outputs.dir file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'include' + File.separator + 'antlr4-runtime')
}

task clean {
	doFirst {
		def cmakeFolder = file('.' + File.separator + '.cmake' + File.separator)
		if(cmakeFolder.exists()) {
			delete cmakeFolder.absolutePath
			println "deleting folder " + cmakeFolder.absolutePath
		}

		cmakeFolder = file(".${File.separator}antlr4${File.separator}antlr4-cpp-runtime-${antlr4Version}-source${File.separator}.cmake${File.separator}")
		if(cmakeFolder.exists()) {
			delete cmakeFolder.absolutePath
			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
