[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[**FERTIG*/]
[module generateExpansionRegionActiviationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateExpansionRegionActivationSource(anExpansionRegion : ExpansionRegion, aPackage :Package) {
	behaviorName : String = anExpansionRegion.getExpansionRegionActivationName();
	packageName : String = aPackage.getPackageName();
}]
[file (packageName.concat('Exec/').concat(behaviorName).concat('.cpp'), false, 'UTF-8')]
#include "[packageName/]Exec/[behaviorName/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include <memory>

using namespace [packageName/];

[behaviorName/]::[behaviorName/]()
{
}

[behaviorName/]::~[behaviorName/]()
{
}

[behaviorName/]::[behaviorName/](const [behaviorName/] &obj)
:ExpansionRegionActivationImpl(obj)
{
}

std::shared_ptr<ecore::EObject> [behaviorName/]::copy() const
{
	std::shared_ptr<[behaviorName/]> element(new [behaviorName/](*this));
	element->setThisExecutionPtr(element);
	return element;
}

void [behaviorName/]::doAction()
{
    std::cout << "Hi, I am still unimplemented :-) " << std::endl;
	throw "unimplemented operation";
}

void [behaviorName/]::setThisExecutionPtr(std::weak_ptr<[behaviorName/]> thisExecutionPtr)
{
	setThisExpansionRegionActivationPtr(thisExecutionPtr);
}
[/file]
[/template]