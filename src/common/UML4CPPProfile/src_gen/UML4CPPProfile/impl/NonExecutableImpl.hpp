//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef UML4CPPPROFILE_NONEXECUTABLE_NONEXECUTABLEIMPL_HPP
#define UML4CPPPROFILE_NONEXECUTABLE_NONEXECUTABLEIMPL_HPP

#include <functional>

//Model includes
#include "../NonExecutable.hpp"
#include "uml/impl/StereotypeImpl.hpp"
#include "uml/Property.hpp"

class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

namespace uml
{
	class Property;
}

//*********************************
namespace UML4CPPProfile
{
	class NonExecutableImpl : virtual public uml::StereotypeImpl, virtual public NonExecutable
	{
		public: 
			NonExecutableImpl(const NonExecutableImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;  
			NonExecutableImpl& operator=(NonExecutableImpl const&);

		protected:
			friend class UML4CPPProfileFactoryImpl;
			//constructor
			NonExecutableImpl();
			virtual std::shared_ptr<NonExecutable> getThisNonExecutablePtr();
			virtual void setThisNonExecutablePtr(std::weak_ptr<NonExecutable> thisNonExecutablePtr);


		public:

			//destructor
			virtual ~NonExecutableImpl();

			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			virtual std::weak_ptr<uml::NamedElement> getBase_NamedElement() const ;
			virtual void setBase_NamedElement(std::weak_ptr<uml::NamedElement> _base_NamedElement);
			
			
			

		protected:
			virtual std::shared_ptr<uml::Class> getMetaClass();
			virtual void instantiate();
			virtual void destroy();

		public:
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			virtual Any get(std::shared_ptr<uml::Property> _property) const ;
			virtual void set(std::shared_ptr<uml::Property> _property, Any value) ;
			virtual void unset(std::shared_ptr<uml::Property> _property) ;
			
		
		private:
			std::weak_ptr<NonExecutable> m_thisNonExecutablePtr;
			std::map<std::string,std::function<Any()>> m_getterMap;
			std::map<std::string,std::function<void(Any)>> m_setterMap;
			std::map<std::string,std::function<void()>> m_unsetterMap;
	};
}
#endif /* end of include guard: UML4CPPPROFILE_NONEXECUTABLE_NONEXECUTABLEIMPL_HPP */
