
#include "uml/impl/LiteralBooleanImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "uml/Comment.hpp"
#include "uml/Dependency.hpp"
#include "uml/Element.hpp"
#include "uml/LiteralSpecification.hpp"
#include "uml/Namespace.hpp"
#include "uml/Package.hpp"
#include "uml/Slot.hpp"
#include "uml/StringExpression.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/Type.hpp"
#include "uml/ValueSpecificationAction.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
LiteralBooleanImpl::LiteralBooleanImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

LiteralBooleanImpl::~LiteralBooleanImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete LiteralBoolean "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
LiteralBooleanImpl::LiteralBooleanImpl(std::weak_ptr<uml::Namespace> par_namespace)
:LiteralBooleanImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
LiteralBooleanImpl::LiteralBooleanImpl(std::weak_ptr<uml::Element> par_owner)
:LiteralBooleanImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
LiteralBooleanImpl::LiteralBooleanImpl(std::weak_ptr<uml::Package> par_owningPackage)
:LiteralBooleanImpl()
{
	m_owningPackage = par_owningPackage;
	m_namespace = par_owningPackage;
}

//Additional constructor for the containments back reference
LiteralBooleanImpl::LiteralBooleanImpl(std::weak_ptr<uml::Slot> par_owningSlot)
:LiteralBooleanImpl()
{
	m_owningSlot = par_owningSlot;
	m_owner = par_owningSlot;
}

//Additional constructor for the containments back reference
LiteralBooleanImpl::LiteralBooleanImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:LiteralBooleanImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}

//Additional constructor for the containments back reference
LiteralBooleanImpl::LiteralBooleanImpl(std::weak_ptr<uml::ValueSpecificationAction> par_valueSpecificationAction)
:LiteralBooleanImpl()
{
	m_valueSpecificationAction = par_valueSpecificationAction;
	m_owner = par_valueSpecificationAction;
}

LiteralBooleanImpl::LiteralBooleanImpl(const LiteralBooleanImpl & obj): LiteralBooleanImpl()
{
	*this = obj;
}

LiteralBooleanImpl& LiteralBooleanImpl::operator=(const LiteralBooleanImpl & obj)
{
	//call overloaded =Operator for each base class
	LiteralSpecificationImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of LiteralBoolean 
	 * which is generated by the compiler (as LiteralBoolean is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//LiteralBoolean::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy LiteralBoolean "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_value = obj.getValue();

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> LiteralBooleanImpl::copy() const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	*element =(*this);
	element->setThisLiteralBooleanPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
bool LiteralBooleanImpl::booleanValue()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return m_value;
	//end of body
}

bool LiteralBooleanImpl::isComputable()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return true;
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute value */
bool LiteralBooleanImpl::getValue() const 
{
	return m_value;
}
void LiteralBooleanImpl::setValue(bool _value)
{
	m_value = _value;
	
}

//*********************************
// Reference Getters & Setters
//*********************************

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> LiteralBooleanImpl::eContainer() const
{
	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_owningPackage.lock())
	{
		return wp;
	}

	if(auto wp = m_owningSlot.lock())
	{
		return wp;
	}

	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}

	if(auto wp = m_valueSpecificationAction.lock())
	{
		return wp;
	}
	return nullptr;
}

std::shared_ptr<ecore::EClass> LiteralBooleanImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getLiteralBoolean_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> LiteralBooleanImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::LITERALBOOLEAN_ATTRIBUTE_VALUE:
			return eAny(getValue(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //13715
	}
	return LiteralSpecificationImpl::eGet(featureID, resolve, coreType);
}

bool LiteralBooleanImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::LITERALBOOLEAN_ATTRIBUTE_VALUE:
			return getValue() != false; //13715
	}
	return LiteralSpecificationImpl::internalEIsSet(featureID);
}

bool LiteralBooleanImpl::eSet(int featureID, std::shared_ptr<Any> newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::LITERALBOOLEAN_ATTRIBUTE_VALUE:
		{
			try
			{
				bool _value = newValue->get<bool>();
				setValue(_value); //13715
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'value'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return LiteralSpecificationImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> LiteralBooleanImpl::eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// uml::LiteralBoolean::booleanValue() : bool: 1974710047
		case umlPackage::LITERALBOOLEAN_OPERATION_BOOLEANVALUE:
		{
			result = eAny(this->booleanValue(), 0, false);
			break;
		}
		// uml::LiteralBoolean::isComputable() : bool: 243741030
		case umlPackage::LITERALBOOLEAN_OPERATION_ISCOMPUTABLE:
		{
			result = eAny(this->isComputable(), 0, false);
			break;
		}

		default:
		{
			// call superTypes
			result = LiteralSpecificationImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::LiteralBoolean> LiteralBooleanImpl::getThisLiteralBooleanPtr() const
{
	return m_thisLiteralBooleanPtr.lock();
}
void LiteralBooleanImpl::setThisLiteralBooleanPtr(std::weak_ptr<uml::LiteralBoolean> thisLiteralBooleanPtr)
{
	m_thisLiteralBooleanPtr = thisLiteralBooleanPtr;
	setThisLiteralSpecificationPtr(thisLiteralBooleanPtr);
}


