//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_LIFELINE_HPP
#define UML_LIFELINE_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 
template<class T, class ... U> class Subset;


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class ConnectableElement;
	class Dependency;
	class Interaction;
	class InteractionFragment;
	class Namespace;
	class PartDecomposition;
	class StringExpression;
	class ValueSpecification;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/NamedElement.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A Lifeline represents an individual participant in the Interaction. While parts and structural features may have multiplicity greater than 1, Lifelines represent only one interacting entity.
	<p>From package UML::Interactions.</p>
	*/
	
	class UML_API Lifeline : virtual public NamedElement
	{
		public:
 			Lifeline(const Lifeline &) {}

		protected:
			Lifeline(){}
			//Additional constructors for the containments back reference
			Lifeline(std::weak_ptr<uml::Interaction> par_interaction);

			//Additional constructors for the containments back reference
			Lifeline(std::weak_ptr<uml::Namespace> par_namespace);

			//Additional constructors for the containments back reference
			Lifeline(std::weak_ptr<uml::Element> par_owner);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Lifeline() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References the InteractionFragments in which this Lifeline takes part.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::InteractionFragment>>& getCoveredBy() const = 0;
			/*!
			References the Interaction that represents the decomposition.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<uml::PartDecomposition>& getDecomposedAs() const = 0;
			/*!
			References the Interaction that represents the decomposition.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setDecomposedAs(const std::shared_ptr<uml::PartDecomposition>&) = 0;
			/*!
			References the Interaction enclosing this Lifeline.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::weak_ptr<uml::Interaction> getInteraction() const = 0;
			/*!
			References the Interaction enclosing this Lifeline.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setInteraction(std::weak_ptr<uml::Interaction>) = 0;
			/*!
			References the ConnectableElement within the classifier that contains the enclosing interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<uml::ConnectableElement>& getRepresents() const = 0;
			/*!
			References the ConnectableElement within the classifier that contains the enclosing interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setRepresents(const std::shared_ptr<uml::ConnectableElement>&) = 0;
			/*!
			If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<uml::ValueSpecification>& getSelector() const = 0;
			/*!
			If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setSelector(const std::shared_ptr<uml::ValueSpecification>&) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			References the InteractionFragments in which this Lifeline takes part.
			<p>From package UML::Interactions.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::InteractionFragment>> m_coveredBy;
			/*!
			References the Interaction that represents the decomposition.
			<p>From package UML::Interactions.</p>
			*/
			
			std::shared_ptr<uml::PartDecomposition> m_decomposedAs;
			/*!
			References the Interaction enclosing this Lifeline.
			<p>From package UML::Interactions.</p>
			*/
			
			std::weak_ptr<uml::Interaction> m_interaction;
			/*!
			References the ConnectableElement within the classifier that contains the enclosing interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			std::shared_ptr<uml::ConnectableElement> m_represents;
			/*!
			If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
			<p>From package UML::Interactions.</p>
			*/
			
			std::shared_ptr<uml::ValueSpecification> m_selector;
	};
}
#endif /* end of include guard: UML_LIFELINE_HPP */
