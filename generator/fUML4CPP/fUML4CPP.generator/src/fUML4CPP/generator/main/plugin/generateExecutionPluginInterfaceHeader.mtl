[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateExecutionPluginInterfaceHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::plugin::generateExecutionPluginImplementationSource /]
[import fUML4CPP::generator::main::fUMLKeywords /]
[import UML4CPP::generator::main::profiles::profileHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]


[template public generateExecutionPluginInterfaceHeader(aPackage : Package){packageName : String = aPackage.name.concat('ExecPlugin');}]
[file (aPackage.generateNamespacePath(false).concat('Exec/').concat(packageName).concat('.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'Plugin')/]

#include "pluginFramework/UMLExecutionModelPlugin.hpp"

[if(aPackage.allOwnedElements()->filter(Operation)->reject(isDoNotGenerateElement())->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE()))->size() > 0 or 
aPackage.allOwnedElements()->filter(CallOperationAction).operation->reject(isDoNotGenerateElement())->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE()))->size() > 0)]
namespace uml
{
	class OpaqueBehavior;
}
[/if]

namespace fUML::Semantics::Loci
{
	class Executor;
	class ExecutionFactory;
}

namespace [aPackage.generateNamespace(false).sanitize()/]
{
	class [aPackage.generateNamespace(false).sanitize()/]Locus;
	class [aPackage.generateNamespace(false).sanitize()/]Executor;
}


namespace [aPackage.generateNamespace(false)/]
{
	class [packageName/] : virtual public UMLExecutionModelPlugin
	{
		public:
			static std::shared_ptr<MDE4CPPPlugin> eInstance();
	
			virtual std::string eclipseURI() = 0;
			virtual std::string eNAME() = 0;
			virtual std::string eNS_URI() = 0;
			virtual std::string eNS_PREFIX() = 0;
	
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID = -1) const = 0;
			virtual std::shared_ptr<Any> executeActivity(std::shared_ptr<uml::Activity> activity, std::shared_ptr<std::vector<Any>> parameterList, std::shared_ptr<uml::Element> element) = 0;

		protected:
			[packageName/](){};
			virtual ~[packageName/](){};
	
		private:
			static std::shared_ptr<MDE4CPPPlugin> instance;
[if (not aPackage.isReflectionModel())]

		protected:
			//Execution Environment
			std::shared_ptr<[aPackage.generateNamespace(false).sanitize() + 'Locus'/]> m_locus;
			std::shared_ptr<[aPackage.generateNamespace(false).sanitize() + 'Executor'/]> m_executor;
			std::shared_ptr<fUML::Semantics::Loci::ExecutionFactory> m_factory;
[/if]		
	};
}
[endGuard(aPackage,'ExecPlugin')/]
[/file]
[/template]