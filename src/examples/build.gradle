/*
 * MDE4CPP - Model Driven Engineering for C++
 *
 * Copyright (c) TU Ilmenau, Systems and Software Engineering Group
 * All rights reserved.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

description 'Example collection'

import org.gradle.internal.os.OperatingSystem;

// global variables
//project.ext.gradle_mde4cpp_compile_plugin_version  = '0.6.0-rc1'
//project.ext.gradle_mde4cpp_generate_plugin_version = '0.6.0-rc1'

task generateAllExamples() {
	group 'Examples'
	description 'generate all examples'	
	doLast {	
		def generate_file = './generate'
		def generate_interp = '/bin/sh' 
		def generate_interp_option = '-c'
		
		if(OperatingSystem.current().isWindows()){
			generate_file = 'generate.bat'
			generate_interp = 'cmd'
			generate_interp_option = '/C'
		}
		
		def examples = []
		// common examples --------------------------------
			
		// ecore examples ---------------------------------
	
		examples.add('./ecoreExamples/TestSuite/eInvokeTest/')
		//examples.add('./ecoreExamples/TestSuite/templateTest/')
		examples.add('./ecoreExamples/ecoreModelExample/')
		
		// UML examples -----------------------------------
			//UMLExamples/TestSuite/copyTestUML
			examples.add('./UMLExamples/TestSuite/copyTestUML/')
			//UMLExamples/UMLModelExample
			examples.add('./UMLExamples/UMLModelExample/')
	
	
		// fUML examples ----------------------------------
		examples.add('./fUMLExamples/Calculator/')
		examples.add('./fUMLExamples/ThreePhilosophers/')
	
		// ocl examples -----------------------------------
		examples.add('./oclExamples/oclEcoreModelExample/')
		examples.add('./oclExamples/oclQueryEcoreModelExample/')
		//examples.add('./oclExamples/Connect4/')
		//examples.add('./oclExamples/oclFumlModelExample/')
	
		// PSCS examples ----------------------------------
		//if(OperatingSystem.current().isWindows()){
		//	examples.add('./PSCSExamples/Ampelsteuerung_Example/model')
		//}
	
		examples.each { String path -> 
			def buildModelFile = file(path+'model'+ File.separator +'build.gradle')
			def buildSrcFile = file(path+'src_gen'+ File.separator +'build.gradle')
			println "\n\n----- Generating example: $buildSrcFile\n"
			if(!(buildFile.exists() && buildSrcFile.exists()))
			{
				exec {
					println "\n\n----- Generating example: $path\n"
					workingDir = file("${path}"+'model'+ File.separator)
					commandLine = [
						generate_interp, 
						generate_interp_option,
						generate_file
					]
				}
			}		
		}
	}
}

task compileAllExamples() {
	group 'Examples'
	description 'compile applications for all examples without generating the models'

	// common examples ------------------------------------
		//commonExamples/persistenceExample
		dependsOn getRootProject().getTasksByName('compileExamplePersistence', true)
		//commonExamples/pluginFrameworkExample
		dependsOn getRootProject().getTasksByName('compileExamplePluginFramework', true)
	
	// ecore examples -------------------------------------
		//ecoreExamples/TestSuite/SubsetUnionExample/SubsetUnion
		dependsOn getRootProject().getTasksByName('compileApplicationForSubsetUnion', true)
		//ecoreExamples/TestSuite/SubsetUnionExample/SubsetUnionDepth
		dependsOn getRootProject().getTasksByName('compileApplicationForSubsetUnionDepth', true)
		//ecoreExamples/TestSuite/copyTest
		dependsOn getRootProject().getTasksByName('compileApplicationForCopyTest', true)
		//ecoreExamples/TestSuite/eInvokeTest
		dependsOn getRootProject().getTasksByName('compileApplicationForEInvokeTest', true)
		//ecoreExamples/ecoreExample
		dependsOn getRootProject().getTasksByName('compileEcoreExample', true)
		//ecoreExamples/ecoreModelExample/application
		dependsOn getRootProject().getTasksByName('compileApplicationForLibraryModel_ecore', true) 
		//ecoreExamples/TestSuite/templateTest
		//dependsOn getRootProject().getTasksByName('compileApplicationForTemplateTest', true)

	// UML examples ---------------------------------------
		//UMLExamples/TestSuite/copyTestUML
		dependsOn getRootProject().getTasksByName('compileApplicationForCopyTestUML', true)
		//UMLExamples/UMLExample
		dependsOn getRootProject().getTasksByName('compileUMLExample', true)
		//UMLExamples/UMLModelExample
		dependsOn getRootProject().getTasksByName('compileApplicationForLibraryModel_uml', true)
	
	// fUML examples --------------------------------------
		//fUMLExamples/Calculator
		dependsOn getRootProject().getTasksByName('compileApplicationForCalcModel', true)
		//fUMLExamples/ThreePhilosophers
		dependsOn getRootProject().getTasksByName('compileApplicationForPhilosophers', true)
	
	// OCL examples ---------------------------------------
		//oclExamples/oclEcoreModelExample
		dependsOn getRootProject().getTasksByName('compileLibrary_ecore', true)
		dependsOn getRootProject().getTasksByName('compileApplicationForLibrary_ecore',true)
		//oclExamples/oclQueryEcoreModelExample
		dependsOn getRootProject().getTasksByName('compileLibrary_QueryEcore', true)
		dependsOn getRootProject().getTasksByName('compileApplicationForLibrary_QueryEcore', true)
		//oclExamples/Connect4
		//oclExamples/applications/oclUmlExample
		// dependsOn getRootProject().getTasksByName('compileOclUmlExample', true)

		//oclExamples/oclModelExample/oclFumlModelExample
		// dependsOn getRootProject().getTasksByName('compileApplicationForConnect4', true)
		
		//examples.add('./oclExamples/oclModelExample/oclFumlModelExample/model')

		// PSCS examples ----------------------------------
		
	
	// PSCS examples --------------------------------------
		//if(OperatingSystem.current().isWindows()){
		//	dependsOn getRootProject().getTasksByName('compileApplicationForAmpelsteuerung_Example', true)
		//}

}

task buildAllExamples(){
	group 'Examples'
	description 'generate and compile all example applications'
	
	def tasks = [
		generateAllExamples,
		compileAllExamples
	]
	
	for (int i = 0; i < tasks.size() - 1; i++) {
        tasks[i + 1].mustRunAfter(tasks[i])
    }
    
    dependsOn(tasks)
}

task cleanAllExamples(type: Exec){
	group 'Examples'
	description 'Removes all generated files in examples directory'
	
    workingDir System.env.MDE4CPP_HOME
    
    if(OperatingSystem.current().isWindows()){
    	commandLine 'cmd', '/c', 'git clean -d -f -X', 'src\\examples'
	} else if(OperatingSystem.current().isLinux() || OperatingSystem.current().isMacOsX()){
		commandLine '/bin/sh', '-c', 'git clean -d -f -X src/examples'
	}
}

task compileAllBenchmarks() {
	group 'Benchmarks'
	description 'compile applications for all benchmarks'	
	
	// benchmarks
	dependsOn getRootProject().getTasksByName('compileEcoreBenchmark', true)
	dependsOn getRootProject().getTasksByName('compileMemoryBenchmarkEcore', true)
	dependsOn getRootProject().getTasksByName('compileUMLBenchmark', true)
}

task generateEcoreTestSuite() {
	group 'Tests'
	description 'generate test suite for ecore'	
	doLast {	
		def tool = '/bin/sh'
		def command = '-c'
		def prefix = './'
		
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			tool = 'cmd'
			command = '/C'
			prefix = ''
		}
	
		[  	 './ecoreExamples/TestSuite/SubsetUnionExample/SubsetUnion/'
			,'./ecoreExamples/TestSuite/SubsetUnionExample/SubsetUnionDepth/'
			,'./ecoreExamples/TestSuite/SubPackagetest'						
			,'./ecoreExamples/TestSuite/copyTest/'
			,'./ecoreExamples/templateTest'
		].each { path ->
			def buildModelFile = file(path+'model'+ File.separator +'build.gradle')
			def buildSrcFile = file(path+'src_gen'+ File.separator +'build.gradle')
			if(!(buildFile.exists() && buildSrcFile.exists()))
			{
				exec
				{
					workingDir = file("${path}"+ File.separator)
					commandLine = [tool, command, prefix + 'generate']
				}
			}
		}
	} 			
}

task generateFUMLTestSuite() {
	group 'Tests'
	description 'generate test suite for fUML'	
	doLast {	
		def tool = '/bin/sh'
		def command = '-c'
		def prefix = './'
		
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			tool = 'cmd'
			command = '/C'
			prefix = ''
		}
	
		[  	'./fUMLExamples/TestSuite/ActionTest/model/',
			'./fUMLExamples/TestSuite/ForkNodeTest/model/',
			'./fUMLExamples/TestSuite/JoinNodeTest/model/',	
			'./fUMLExamples/TestSuite/MultiplePins/model/',
			'./fUMLExamples/TestSuite/RegionTest/model/',
			'./fUMLExamples/TestSuite/SimpleBehaviorTest/model/',
			'./fUMLExamples/TestSuite/TargetPinTest/model/',
			'./fUMLExamples/TestSuite/TestModelImport/model/',
			'./fUMLExamples/TestSuite/TestModelMain/model/'
		].each { path ->
			def buildModelFile = file(path+'model'+ File.separator +'build.gradle')
			def buildSrcFile = file(path+'src_gen'+ File.separator +'build.gradle')
			if(!(buildFile.exists() && buildSrcFile.exists()))
			{
				exec
				{
					workingDir = file("${path}"+ File.separator)
					commandLine = [tool, command, prefix + 'generate']
				}
			}
		}
	} 		
}

task compileEcoreTestSuite() {
	group 'Tests'
	description 'compile applications for ecore test suite'

	// ecore tests
	dependsOn getRootProject().getTasksByName('compileApplicationForCopyTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForEInvokeTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForSubsetUnion', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForSubsetUnionDepth', true)

	//templateTest	
	
	//SubPackagetest

//		./ecoreExamples/TestSuite/SubsetUnionExample/SubsetUnion/'
//		,'./ecoreExamples/TestSuite/SubsetUnionExample/SubsetUnionDepth/'
//		,'./ecoreExamples/TestSuite/copyTest/'	
}	
	

task buildEcoreTestSuite() {
	group 'Tests'
	description 'generate and compile applications for ecore test suite'
	
	// ecore tests
	dependsOn getRootProject().getTasksByName('buildCopyTest', true)
	dependsOn getRootProject().getTasksByName('buildEInvokeTest', true)
	dependsOn getRootProject().getTasksByName('buildSubsetUnion', true)
	dependsOn getRootProject().getTasksByName('buildSubsetUnionDepth', true)	
	//templateTest
	//SubPackagetest	
}

task compileFUMLTestSuite() {
	group 'Tests'
	description 'compile applications for fUML test suite'
	
	// fUML tests
	dependsOn getRootProject().getTasksByName('compileApplicationForActionTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForForkNodeTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForJoinNodeTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForFUMLMultiplePins', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForRegionTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForSimpleBehaviorTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForTargetPinTest', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForTestModelMain', true)	
}

task buildFUMLTestSuite() {
	group 'Tests'
	description 'generate and compile applications for fUML test suite'
	
	// fUML tests
	dependsOn getRootProject().getTasksByName('buildActionTest', true)
	dependsOn getRootProject().getTasksByName('buildForkNodeTest', true)
	dependsOn getRootProject().getTasksByName('buildJoinNodeTest', true)
	dependsOn getRootProject().getTasksByName('buildFUMLMultiplePins', true)
	dependsOn getRootProject().getTasksByName('buildRegionTest', true)
	dependsOn getRootProject().getTasksByName('buildSimpleBehaviorTest', true)
	dependsOn getRootProject().getTasksByName('buildTargetPinTest', true)
	dependsOn getRootProject().getTasksByName('buildTestModelMain', true)	
}

task compileOCLTestSuite() {
	group 'Tests'
	description 'compile applications for OCL test suite'
	
	dependsOn getRootProject().getTasksByName('compileSimpleOCLExample', true)
	//oclExamples/applications/oclUmlExample
	// dependsOn getRootProject().getTasksByName('compileOclUmlExample', true)
	// dependsOn getRootProject().getTasksByName('compileApplicationForOCLModelExample', true)
}

task buildOCLTestSuite() {
	group 'Tests'
	description 'generate and compile applications for fUML test suite'
	
	//examples.add('./oclExamples/TestSuite/oclUmlModelExample/model')	
}

/*
TODO
These tasks are currently not executable since the amount of produced tasks (around 100)
causes gradlew to crash

task generatePSCSTestSuite() {
	group 'Tests'
	description 'generate test suite for PSCS'	
	
	dependsOn getRootProject().getTasksByName('createAllGenerators', true)
		
	doLast {				
		def tool = '/bin/sh'
		def command = '-c'
		def prefix = './'
		
		if (System.properties['os.name'].toLowerCase().contains('windows')) {
			tool = 'cmd'
			command = '/C'
			prefix = ''
		}
	
		[  	'./PSCSExamples/TestSuite/01_Inst_01_AssemblyConnectors_P_P/model/',
			'./PSCSExamples/TestSuite/01_Inst_02_AssemblyConnectors_PWP_P/model/',
			'./PSCSExamples/TestSuite/01_Inst_03_AssemblyConnectors_PWP_PWP/model/',
			'./PSCSExamples/TestSuite/01_Inst_04_DefaultPrimitives/model/',
			'./PSCSExamples/TestSuite/01_Inst_05_DefaultStructures/model/',
			'./PSCSExamples/TestSuite/01_Inst_06_DelegationPort_P/model/',
			'./PSCSExamples/TestSuite/01_Inst_07_DelegationPort_PWP/model/',
			'./PSCSExamples/TestSuite/01_Inst_08_Hierarchy/model/',
			'./PSCSExamples/TestSuite/02_Comm_01_MessageLoss/model/',
			'./PSCSExamples/TestSuite/02_Comm_02_SingleDeleg_P_P_Op/model/',
			'./PSCSExamples/TestSuite/02_Comm_03_SingleDeleg_PWP_P_Op/model/',
			'./PSCSExamples/TestSuite/02_Comm_04_MultDelegSameCon_P_P_Op/model/',
			'./PSCSExamples/TestSuite/02_Comm_05_MultDelegSameCon_PWP_P_Op/model/',
			'./PSCSExamples/TestSuite/02_Comm_06_MultDelegMultCon_P_P_Op/model/',
			'./PSCSExamples/TestSuite/02_Comm_07_MultDelegMultCon_PWP_P_Op/model/',
			'./PSCSExamples/TestSuite/03_onPort_01_Op_ProvInterface/model/',
			'./PSCSExamples/TestSuite/03_onPort_02_Op_ReqInterface/model/',
			'./PSCSExamples/TestSuite/03_onPort_03_Op_Prov_Req_Interface/model/',
			'./PSCSExamples/TestSuite/03_onPort_04_Op_Req_Deleg/model/',
			'./PSCSExamples/TestSuite/04_Dest_01_RecursiveDestruction/model/',
			'./PSCSExamples/TestSuite/04_Dest_02_DestructionPart/model/',
			'./PSCSExamples/TestSuite/04_Dest_03_DestructionPort/model/',
			'./PSCSExamples/TestSuite/04_Dest_04_DestructionInstances/model/'
		].each { path ->
			exec
			{
				workingDir = file("${path}")
				commandLine = [tool, command, prefix + 'generate']
			}
		} 		
    }
}

task compilePSCSTestSuite() {
	group 'Tests'
	description 'compile applications for PSCS test suite'
	
	// PSCS tests
	dependsOn getRootProject().getTasksByName('compileApplicationForAssemblyConnectors_P_P', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForAssemblyConnectors_PWP_P', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForAssemblyConnectors_PWP_PWP', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDefaultPrimitives', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDefaultStructures', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDelegationPort_P', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDelegationPort_PWP', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForHierarchy', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForMessageLoss', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForSingleDeleg_P_P_Op', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForSingleDeleg_PWP_P_Op', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForMultDelegSameCon_P_P_Op', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForMultDelegSameCon_PWP_P_Op', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForMultDelegMultCon_P_P_Op', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForMultDelegMultCon_PWP_P_Op', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForOp_ProvInterface', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForOp_ReqInterface', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForOp_Prov_Req_Interface', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForOp_Req_Deleg', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForRecursiveDestruction', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDestructionPart', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDestructionPort', true)
	dependsOn getRootProject().getTasksByName('compileApplicationForDestructionInstances', true)
}

task buildPSCSTestSuite() {
	group 'Tests'
	description 'generate and compile applications for PSCS test suite'
	
	// PSCS tests
	dependsOn getRootProject().getTasksByName('buildAssemblyConnectors_P_P', true)
	dependsOn getRootProject().getTasksByName('buildAssemblyConnectors_PWP_P', true)
	dependsOn getRootProject().getTasksByName('buildAssemblyConnectors_PWP_PWP', true)
	dependsOn getRootProject().getTasksByName('buildDefaultPrimitives', true)
	dependsOn getRootProject().getTasksByName('buildDefaultStructures', true)
	dependsOn getRootProject().getTasksByName('buildDelegationPort_P', true)
	dependsOn getRootProject().getTasksByName('buildDelegationPort_PWP', true)
	dependsOn getRootProject().getTasksByName('buildHierarchy', true)
	dependsOn getRootProject().getTasksByName('buildMessageLoss', true)
	dependsOn getRootProject().getTasksByName('buildSingleDeleg_P_P_Op', true)
	dependsOn getRootProject().getTasksByName('buildSingleDeleg_PWP_P_Op', true)
	dependsOn getRootProject().getTasksByName('buildMultDelegSameCon_P_P_Op', true)
	dependsOn getRootProject().getTasksByName('buildMultDelegSameCon_PWP_P_Op', true)
	dependsOn getRootProject().getTasksByName('buildMultDelegMultCon_P_P_Op', true)
	dependsOn getRootProject().getTasksByName('buildMultDelegMultCon_PWP_P_Op', true)
	dependsOn getRootProject().getTasksByName('buildOp_ProvInterface', true)
	dependsOn getRootProject().getTasksByName('buildOp_ReqInterface', true)
	dependsOn getRootProject().getTasksByName('buildOp_Prov_Req_Interface', true)
	dependsOn getRootProject().getTasksByName('buildOp_Req_Deleg', true)
	dependsOn getRootProject().getTasksByName('buildRecursiveDestruction', true)
	dependsOn getRootProject().getTasksByName('buildDestructionPart', true)
	dependsOn getRootProject().getTasksByName('buildDestructionPort', true)
	dependsOn getRootProject().getTasksByName('buildDestructionInstances', true)
}
*/

task generateAllTests() {
	group 'Tests'
	description 'generate all test suites (currently only fUML test suite can be generated automatically)'
	
	dependsOn getRootProject().getTasksByName('generateEcoreTestSuite', true)
	dependsOn getRootProject().getTasksByName('generateFUMLTestSuite', true)
	//dependsOn getRootProject().getTasksByName('generatePSCSTestSuite', true)
}

task compileAllTests() {
	group 'Tests'
	description 'compile applications for all test suites (currently only fUML test suite can be compiled automatically)'
	
	dependsOn getRootProject().getTasksByName('compileEcoreTestSuite', true)
	dependsOn getRootProject().getTasksByName('compileFUMLTestSuite', true)
	//dependsOn getRootProject().getTasksByName('compilePSCSTestSuite', true)
}

task buildAllTests() {
	group 'Tests'
	description 'generate and compile applictions for all test suites (currently only fUML test suite can be built automatically)'
	
	dependsOn getRootProject().getTasksByName('buildFUMLTestSuite', true)
	//dependsOn getRootProject().getTasksByName('buildPSCSTestSuite', true)
}