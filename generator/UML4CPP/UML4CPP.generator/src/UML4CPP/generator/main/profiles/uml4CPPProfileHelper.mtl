[comment encoding = UTF-8 /]
[module uml4CPPProfileHelper('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::profiles::profileHelper /]

[**
 * queries for handling of the 'UML4CPPPackage' stereotype
*/]
[query public getEclipseURI(anElement : Element) : String = if(isUML4CPPPackage()) then getValue(anElement.getAppliedStereotype(QN_STEREOTYPE_UML4CPPPACKAGE()), keyEclipseURI()) else '' endif/] [** get the packages Eclipse URI if present./]
[query public isIgnoreNamespace(anElement : Element) : Boolean = if(isUML4CPPPackage()) then getValue(anElement.getAppliedStereotype(QN_STEREOTYPE_UML4CPPPACKAGE()), keyIgnoreNamespace()) else false endif/] [** check, if namespace should be igored./]
[query public isPackageOnly(anElement : Element) : Boolean = if(isUML4CPPPackage()) then getValue(anElement.getAppliedStereotype(QN_STEREOTYPE_UML4CPPPACKAGE()), keyPackagOnly()) else false endif/] [** check, if only the model package should be generated./]
[query public isSingleton(anElement : Element) : Boolean = anElement.hasStereotypeApplied(QN_STEREOTYPE_SINGLETON()) /]	[** check, if a singleton construct should be generated /]
[query private isUML4CPPPackage(anElement : Element) : Boolean = anElement.hasStereotypeApplied(QN_STEREOTYPE_UML4CPPPACKAGE())/] [** check, if additional generation information exist./]

[**
 * queries for handling of the 'ExternalLibrary' stereotype
*/]
[query public hasIncludePath(ePackage : Package) : Boolean = hasStereotypeApplied(QN_STEREOTYPE_EXTERNALLIBRARY()) /]
[query public getIncludePath(ePackage : Package) : String = getValue(ePackage.getAppliedStereotype(QN_STEREOTYPE_EXTERNALLIBRARY()), keyIncludePath()) /]

[**
 * queries for handling of the 'GetterName' stereotype
*/]
[query public hasGetterName(anElement : Element) : Boolean = hasStereotypeApplied(QN_STEREOTYPE_GETTERNAME()) /]
[query public getGetterName(anElement : Element) : String = getValue(anElement.getAppliedStereotype(QN_STEREOTYPE_GETTERNAME()), keyGetterName()) /]

[**
 * queries for handling of the 'MainBehavior' stereotype
*/]
[query public hasMainBehavior(aPackage : Package) : Boolean = aPackage.eAllContents(Behavior)->select(hasStereotypeApplied(QN_STEREOTYPE_MAINBEHAVIOR()))->reject(isDoNotGenerateElement())->size() > 0 /]
[query public getMainBehavior(aPackage : Package) : Behavior = if(hasMainBehavior()) then aPackage.eAllContents(Behavior)->select(hasStereotypeApplied(QN_STEREOTYPE_MAINBEHAVIOR()))->reject(isDoNotGenerateElement())->asOrderedSet()->first() else null endif/]
[query public hasMainOpaqueBehavior(aPackage : Package) : Boolean = if(hasMainBehavior() and getMainBehavior().oclIsKindOf(OpaqueBehavior)) then true else false endif /]
[query public getMainOpaqueBehavior(aPackage : Package) : OpaqueBehavior = if(hasMainOpaqueBehavior()) then getMainBehavior().oclAsType(OpaqueBehavior) else null endif /]
[query public hasMainActivity(aPackage : Package) : Boolean = if(hasMainBehavior() and getMainBehavior().oclIsKindOf(Activity)) then true else false endif /]
[query public getMainActivity(aPackage : Package) : Activity = if(hasMainActivity()) then getMainBehavior().oclAsType(Activity) else null endif /]
[query public hasMainStateMachine(aPackage : Package) : Boolean = if(hasMainBehavior() and getMainBehavior().oclIsKindOf(StateMachine)) then true else false endif /]
[query public getMainStateMachine(aPackage : Package) : StateMachine = if(hasMainStateMachine()) then getMainBehavior().oclAsType(StateMachine) else null endif /]
[query public hasMainSourceCode(ePackage : Package) : Boolean = true /]
[query public getMainSourceCode(ePackage : Package) : String = '' /]
[query public hasMainIncludes(ePackage : Package) : Boolean = true /]
[query public getMainIncludes(ePackage : Package) : String = '' /]

[**
 * queries for handling of the 'DoNotGenerate' stereotype
*/]
[query private _isDoNotGenerateElement(anElement : Element) : Boolean = hasStereotypeApplied(QN_STEREOTYPE_DONOTGENERATE()) /]
[query public isDoNotGenerateElement(anElement : Element) : Boolean = 
if _isDoNotGenerateElement() 
then true 
else 
	if owner.oclIsUndefined()
	then false
	else owner.isDoNotGenerateElement()
	endif	
endif /]
[query public isDoNotGenerate(aPackage : Package) : Boolean = if(aPackage.isRootPackage()) then aPackage.isDoNotGenerateElement() else aPackage.getSuperPackage().isDoNotGenerate() endif /]
[query public isDoNotGenerate(aClassifier : Classifier) : Boolean = isDoNotGenerateElement() or aClassifier.getNearestPackage().isDoNotGenerate() /]
[query public isDoNotGenerate(aFeature : Feature) : Boolean = isDoNotGenerateElement() or aFeature.owner.isDoNotGenerateElement() or aFeature.getNearestPackage().isDoNotGenerate() /]

[**
 * queries for handling of the 'SetterName' stereotype
*/]
[query public hasSetterName(anElement : Element) : Boolean = hasStereotypeApplied(QN_STEREOTYPE_SETTERNAME()) /]
[query public getSetterName(anElement : Element) : String = getValue(anElement.getAppliedStereotype(QN_STEREOTYPE_SETTERNAME()), keySetterName()) /]

[**
 * additional private helper queries to avoid recursive imports
*/]
[query private getSuperPackage(aPackage : Package) : Package = if((not owner.oclIsUndefined()) and (owner.oclIsKindOf(Package))) then owner.oclAsType(Package) else null endif /]
[query private isRootPackage(aPackage : Package) : Boolean = getSuperPackage().oclIsUndefined() /]
[query private getRootPackage(anElement : Element) : Package = anElement.getNearestPackage().getRootPackage() /]