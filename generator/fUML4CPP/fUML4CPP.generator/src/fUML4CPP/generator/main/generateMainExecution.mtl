[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateMainExecution('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateMain(aPackage : Package)]
[file (aPackage.getPackageName().concat('Exec/').concat('main.cpp'), false, 'UTF-8')]

[defineDebugMacro()/]

#include <iostream>
#include <memory>
#include <vector>

[generateMainIncludes()/]
[if (not aPackage.allOwnedElements()->filter(Activity)->isEmpty())]
[let act : Activity = aPackage.allOwnedElements()->filter(Activity)->asOrderedSet()->first()]
[generateActivityRelatedIncludes(act, aPackage)/]
[if (act.owner.oclIsKindOf(Classifier))]
#include "[act.owner.oclAsType(Classifier).namespace.myNamespaceName()/]Exec/[act.owner.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
#include "[act.owner.oclAsType(Classifier).namespace.myNamespaceName()/]/[act.owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[act.owner.oclAsType(Classifier).namespace.myNamespaceName()/]/[act.owner.oclAsType(Classifier).namespace.myNamespaceName().toUpperFirst()/]Factory.hpp"
[/if]
[/let]
[else]
//No main activity found (place one activity as child of the module to set it as a main activity).
[/if]

using namespace [aPackage.getPackageName()/];

int main()
{	
	[generateLocusInitialization()/]

	[if (not aPackage.allOwnedElements()->filter(Activity)->isEmpty())]
    //Executor will execute the first Activity
	[let act : Activity = aPackage.allOwnedElements()->filter(Activity)->asOrderedSet()->first()]
	[act.generateParameterInstances(aPackage)/]
[if (act.owner.oclIsKindOf(Classifier))]
	std::shared_ptr<[act.owner.oclAsType(Classifier).name.toUpperFirst()/]> element = [act.owner.oclAsType(Classifier).namespace.myNamespaceName()/]::[act.owner.oclAsType(Classifier).namespace.myNamespaceName().toUpperFirst()/]Factory::eInstance()->create[act.owner.oclAsType(Classifier).name.toUpperFirst()/]();
[/if]
	[act.generateStartActivityExecution(aPackage, act.owner.oclIsKindOf(Classifier))/]   
	[/let]

	if(nullptr == resultPList)
	{
        std::cerr << "resultPList is null" << std::endl;
        return EXIT_FAILURE;
	}
    if(resultPList->empty())
    {
        DEBUG_MESSAGE(std::cout << "The activity did not return any result." << std::endl;)
    }
    else{
        DEBUG_MESSAGE(std::cout << resultPList->size() << std::endl;)
        for(unsigned int parIndex=0; parIndex< resultPList->size(); parIndex++)
    {
            DEBUG_MESSAGE(std::cout << "Parameter " << parIndex <<" name: "<<resultPList->at(parIndex)->getParameter()->getName() << std::endl;)
            if(resultPList->at(parIndex)->getValues()->empty())
            {
                DEBUG_MESSAGE(std::cout<<"\tThe parameter is empty.";)
            }
            else
            {
                DEBUG_MESSAGE(std::cout << "\tsize: " << resultPList->at(parIndex)->getValues()->size() << std::endl;)
                DEBUG_MESSAGE(std::cout << "\tvalue of the first element: " << resultPList->at(parIndex)->getValues()->front()->toString() << std::endl;)
            }
        }
    }
	[else]
	//Info: no main activity found! Place one activity as a child of the Model element to mark it as a main activity.
	[/if]
    return EXIT_SUCCESS;
}
[/file]
[/template]

[template public generateMainIncludes(aPackage : Package)]
#include "abstractDataTypes/SubsetUnion.hpp"
#include "fUML/FUMLFactory.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "fUML/Semantics/Loci/ExecutionFactory.hpp"
#include "fUML/Semantics/Loci/Executor.hpp"
#include "fUML/Semantics/Loci/FirstChoiceStrategy.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/StructuredClassifiers/DispatchStrategy.hpp"
#include "fUML/Semantics/Values/Value.hpp"
#include "uml/Activity.hpp"
#include "uml/FunctionBehavior.hpp"
#include "uml/Interface.hpp"
#include "uml/Operation.hpp"
#include "uml/Parameter.hpp"
#include "uml/PrimitiveType.hpp"
#include "uml/UmlFactory.hpp"


//include Model locus and package
#include "[aPackage.getPackageName()/]Exec/[aPackage.getPackageName().toUpperFirst()/]Locus.hpp"
#include "[aPackage.getPackageName()/]Exec/impl/[aPackage.getPackageName().toUpperFirst()/]LocusImpl.hpp"
#include "[aPackage.getPackageName()/]/[aPackage.getPackageName().toUpperFirst().concat('Package')/].hpp"

[for (anotherPackage : Package | aPackage.getOpaqueBehaviors().getNearestPackage()->asSet()->sortedBy(name))]
#include "[anotherPackage.getPackageName()/]/[anotherPackage.getPackageName().toUpperFirst().concat('Package')/].hpp" 
[/for] 
[for (pack : Package | aPackage.getCallOperationActions().operation.ownedParameter.type.getNearestPackage()->asSet()->sortedBy(name))]
[if (not (pack.name='StandardProfile'))]
#include "[pack.getPackageName()/]/[pack.name.concat('Package').toUpperFirst()/].hpp"
[/if]
[/for]

[if (aPackage.getOpaqueBehaviors()->size()>0)]
//OpaqueBehaviourExecutions
[aPackage.getOpaqueBehaviors()->sortedBy(myQualifiedName()).generateInclude()/]
[/if]

[if (aPackage.getCallOperationActions()->size()>0)]
//OpaqueBehaviourExecutions
[for (aCOA : CallOperationAction | aPackage.getCallOperationActions()->sortedBy(myQualifiedName()))]
[aCOA.generateInclude()/]
[/for]
[/if]
[/template]

[template public generateActivityRelatedIncludes(anActivity : Activity, aPackage : Package)]
#include "fUML/Semantics/StructuredClassifiers/Reference.hpp"
#include "[aPackage.getPackageName()/]/[aPackage.getPackageName().toUpperFirst()/]Factory.hpp"
#include "[aPackage.getPackageName()/]/[aPackage.getPackageName().toUpperFirst()/]Package.hpp"

[for ( type : Type | anActivity->asOrderedSet()->first().ownedParameter.type->asOrderedSet())]
[type.generateTypeInclude(aPackage)/]
[/for]

[/template]

[template public generateLocusInitialization(aPackage : Package) {locusName : String = aPackage.getPackageName().sanitize().toUpperFirst() + 'Locus' ;}]
DEBUG_MESSAGE(std::cout<<"Main function is executing"<<std::endl;)
std::shared_ptr<fUML::FUMLFactory> fumlFac(fUML::FUMLFactory::eInstance());

std::shared_ptr<[locusName/]Impl> locus(new [locusName/]Impl);
locus->setThisLocusPtr(locus);

std::shared_ptr<fUML::Semantics::Loci::Executor> executor(fumlFac->createExecutor());
executor->setLocus(locus);
locus->setExecutor(executor);

std::shared_ptr<fUML::Semantics::Loci::ExecutionFactory> factory(fumlFac->createExecutionFactory_in_Locus(locus));
locus->setExecutor(executor);

locus->getFactory()->assignStrategy(std::shared_ptr<fUML::Semantics::Loci::FirstChoiceStrategy>(fumlFac->createFirstChoiceStrategy()));
locus->getFactory()->assignStrategy(std::shared_ptr<fUML::Semantics::StructuredClassifiers::DispatchStrategy>(fumlFac->createDispatchStrategy()));
[/template]

[template public generateParameterInstances(anActivity : Activity, aPackage : Package)]
[for (par : Parameter | anActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
[if(par.type.supportedTypes())]
[par.generateCppType(true)/] [par.name.toLowerFirst()/] = [par.default/];
[else]
[par.generateCppType(true)/] [par.name.toLowerFirst()/]([aPackage.getPackageName()/]::[aPackage.getPackageName().toUpperFirst()/]Factory::eInstance()->create[par.type.name.toUpperFirst()/]());
[/if]

[/for]
[/template]

[template public generateStartActivityExecution(anActivity : Activity, aPackage : Package, objectUsed : Boolean)]
[if (aPackage.getOpaqueBehaviors()->size() > 0)]
[aPackage.getOpaqueBehaviors()->sortedBy(myQualifiedName()).generateOpaqueBehaviorCreation()/]
[/if]

[if (aPackage.getCallOperationActions()->size() > 0)]
[aPackage.getCallOperationActions()->sortedBy(myQualifiedName()).generateCallOperationActionCreation()/]
[/if]

std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue> > pList(new Bag<fUML::Semantics::CommonBehavior::ParameterValue>());
[for (par : Parameter | anActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name))]
//INput parameter [par.name/] 
std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> [par.name/]P(fumlFac->createParameterValue());
[par.name/]P->setParameter([par.generatePackageGetterCall()/]);
[if (par.upper = 1)]
[par.generateValue()/]
[else]

Bag<[par.type.generateCppType(true)/]>::iterator [par.name.toLowerFirst()/]Iter = [par.name.toLowerFirst()/]List->begin();
Bag<[par.type.generateCppType(true)/]>::iterator [par.name.toLowerFirst()/]End = [par.name.toLowerFirst()/]List->end();
while ([par.name.toLowerFirst()/]Iter != [par.name.toLowerFirst()/]End)
{
	[par.type.generateCppType(false)/] [par.name.toLowerFirst()/][if (par.upper <> 1)]Temp[/if] = *[par.name.toLowerFirst()/]Iter;
	[par.generateValue()/]
	[par.name.toLowerFirst()/]Iter++;
}
[/if]
pList->push_back([par.name/]P);

[/for]
[if (objectUsed and anActivity.owner.oclIsKindOf(Class))]
std::shared_ptr<[anActivity.owner.oclAsType(Classifier).name.toUpperFirst()/]Object> object(new [anActivity.owner.oclAsType(Classifier).name.toUpperFirst()/]Object());
object->setThis[anActivity.owner.oclAsType(Classifier).name.toUpperFirst()/]ObjectPtr(object);
object->setUmlValue(std::dynamic_pointer_cast<[anActivity.owner.oclAsType(Classifier).namespace.myNamespaceName()/]::[anActivity.owner.oclAsType(Classifier).name.toUpperFirst()/]>(element));
object->setLocus(locus);
[/if]
std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> resultPList = locus->getExecutor()->execute([anActivity.generatePackageGetterCall()/], [if (objectUsed)]object[else]nullptr[/if], pList);

[if (aPackage.getCallOperationActions()->size() > 0)]
[aPackage.getCallOperationActions().generateCallOperationActionClearing()/]
[/if]

[/template]

[template private generateValue(aParameter : Parameter)]
[aParameter.generateOutputParameter()/]
[if(aParameter.type.supportedTypes())]
[aParameter.name/]Value->setValue([aParameter.name.toLowerFirst()/]);
[else]
[aParameter.name/]UmlLinker->setLocus(locus);
[aParameter.name/]Value->setReferent([aParameter.name/]UmlLinker);
[/if]
[aParameter.name/]P->getValues()->push_back([aParameter.name/]Value);
[/template]