// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: ecore4cpp::generator::main::generateBuildFile
import tui.sse.mde4cpp.MDE4CPPCompile;
import org.gradle.internal.os.OperatingSystem;

description 'Compile task for project: ocl'

task compileOcl(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'ocl'
	description 'compile ocl'

	projectFolder = file('.' + File.separator + 'ocl')

	inputs.files(fileTree('.') {
        exclude 'ocl/.cmake/**'
    })

   	if(!file(['ocl','.cmake'].join(File.separator)).exists()){
   	    outputs.upToDateWhen { false }
   	}

	if(OperatingSystem.current().isWindows()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','ocl' +       '.dll'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','ocl' + 'd' + '.dll'].join(File.separator))}
	}
	else if(OperatingSystem.current().isLinux()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','ocl' +       '.so'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','ocl' + 'd' + '.so'].join(File.separator))}
	}
	else if(OperatingSystem.current().isMacOsX()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file([rootDir,'application','bin','ocl' +       '.dylib'].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))  {outputs.file file([rootDir,'application','bin','ocl' + 'd' + '.dylib'].join(File.separator))}
	}
	else {
	    //not supported os
	}

	outputs.files(fileTree([rootDir,'application','include','ocl'].join(File.separator)))
	outputs.dir([rootDir,'application','include','ocl'].join(File.separator))


	dependsOn getRootProject().getTasksByName('deliverBasicInterfaces', true)


	// dependency to model 'fUML'
	def fUML = getRootProject().getTasksByName('compileFUML', true)
	dependsOn fUML
	inputs.files(fUML.outputs)

	// dependency to model 'uml'
	def uml = getRootProject().getTasksByName('compileUml', true)
	dependsOn uml
	inputs.files(uml.outputs)

	// dependency to model 'ecore'
	def ecore = getRootProject().getTasksByName('compileEcore', true)
	dependsOn ecore
	inputs.files(ecore.outputs)

	// dependency to model 'types'
	def types = getRootProject().getTasksByName('compileTypes', true)
	dependsOn types
	inputs.files(types.outputs)
}

task clean {
	// Extension of gradle built-in task:clean
	doLast {
		def dot_cmake = file('ocl/.cmake')
		if(dot_cmake.exists()){
			delete dot_cmake.absolutePath
			println "deleting: " + dot_cmake.absolutePath
		}
		
		compileOcl.outputs.files.each{
			if(it.exists()){
				delete it.absolutePath
			    println "deleting: " + it
			}
  		}
	}
}
