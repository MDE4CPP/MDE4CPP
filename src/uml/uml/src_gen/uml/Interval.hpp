//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INTERVAL_HPP
#define UML_INTERVAL_HPP


#include <memory>
#include <string>
// forward declarations


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class Namespace;
	class Package;
	class Slot;
	class StringExpression;
	class TemplateParameter;
	class Type;
	class ValueSpecificationAction;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/ValueSpecification.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	An Interval defines the range between two ValueSpecifications.
	<p>From package UML::Values.</p>
	*/
	
	class UML_API Interval : virtual public ValueSpecification
	{
		public:
 			Interval(const Interval &) {}

		protected:
			Interval(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Interval() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Refers to the ValueSpecification denoting the maximum value of the range.
			<p>From package UML::Values.</p>
			*/
			
			virtual std::shared_ptr<uml::ValueSpecification> getMax() const = 0;
			/*!
			Refers to the ValueSpecification denoting the maximum value of the range.
			<p>From package UML::Values.</p>
			*/
			
			virtual void setMax(std::shared_ptr<uml::ValueSpecification>) = 0;
			/*!
			Refers to the ValueSpecification denoting the minimum value of the range.
			<p>From package UML::Values.</p>
			*/
			
			virtual std::shared_ptr<uml::ValueSpecification> getMin() const = 0;
			/*!
			Refers to the ValueSpecification denoting the minimum value of the range.
			<p>From package UML::Values.</p>
			*/
			
			virtual void setMin(std::shared_ptr<uml::ValueSpecification>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			Refers to the ValueSpecification denoting the maximum value of the range.
			<p>From package UML::Values.</p>
			*/
			
			std::shared_ptr<uml::ValueSpecification> m_max;
			/*!
			Refers to the ValueSpecification denoting the minimum value of the range.
			<p>From package UML::Values.</p>
			*/
			
			std::shared_ptr<uml::ValueSpecification> m_min;
	};
}
#endif /* end of include guard: UML_INTERVAL_HPP */
