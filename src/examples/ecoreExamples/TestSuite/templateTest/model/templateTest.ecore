<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="templateTest" nsURI="http://sse.tu-ilmenau.de/example/templateTest"
    nsPrefix="templateTest">
  <eAnnotations source="http://tu-ilmenau.de/see/prepareApplication">
    <details key="includes" value="#include &lt;string>&#xA;#include &lt;list>&#xA;#include &lt;memory>"/>
    <details key="body" value="&#x9;std::cout &lt;&lt; &quot;Create TemplateTestClass properties:&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;std::shared_ptr&lt;TemplateTestClass> templateTestClass= factory->createTemplateTestClass();&#xA;&#x9;std::shared_ptr&lt;NumberProperty> newNumber;&#xA;&#x9;std::shared_ptr&lt;StringProperty> newString;&#xA;&#x9;// Create lists / vectors&#xA;&#x9;templateTestClass->setCppListOfProperty(std::make_shared&lt;std::list&lt;std::shared_ptr&lt;templateTest::Property>>>());&#xA;&#x9;templateTestClass->setCppVectorOfProperty(std::make_shared&lt;std::vector&lt;std::shared_ptr&lt;templateTest::Property>>>());&#xA;&#x9;templateTestClass->setPropertyList(std::make_shared&lt;std::list&lt;std::shared_ptr&lt;templateTest::Property>>>());&#xA;//&#x9;templateTestClass->getUnorderedTaggedValueList();&#xA;&#x9;// Create maps&#xA;&#x9;templateTestClass->setCppMapOfProperties(std::make_shared&lt;std::map&lt;std::string,std::shared_ptr&lt;templateTest::Property>>>());&#xA;&#x9;templateTestClass->setOrderedPropertyMap(std::make_shared&lt;std::map&lt; std::string, std::shared_ptr&lt;templateTest::Property>>>());&#xA;&#x9;templateTestClass->setUnorderedPropertyMap(std::make_shared&lt;std::unordered_map &lt; std::string, std::shared_ptr&lt;templateTest::Property>>>());&#xA;&#xA;&#x9;std::cout &lt;&lt; &quot;success...&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;set values for TemplateTestClass properties:&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;auto addProperties = [](auto list, auto number, auto str)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;list->push_back(number);&#xA;&#x9;&#x9;&#x9;list->push_back(str);&#xA;&#x9;&#x9;};&#xA;&#x9;auto addMapProperties = [](auto map, auto number, auto str)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;map->insert(number);&#xA;&#x9;&#x9;&#x9;map->insert(str);&#xA;&#x9;&#x9;};&#xA;&#xA;&#x9;for(int i=3; i>=0;i--)&#xA;&#x9;{&#xA;&#x9;&#x9;newNumber=factory->createNumberProperty();&#xA;&#x9;&#x9;std::string s;&#xA;&#x9;&#x9;s=((char)(65+i));&#xA;&#x9;&#x9;newNumber->setName(s);&#xA;&#x9;&#x9;newNumber->setValue(i);&#xA;&#x9;&#x9;newString=factory->createStringProperty();&#xA;&#x9;&#x9;newString->setName(s);&#xA;&#x9;&#x9;newString->setString(s);&#xA;&#x9;&#x9;auto numberPair=std::make_pair(newNumber->getName(), newNumber);&#xA;&#x9;&#x9;auto strPair=std::make_pair(newString->getName(),newString);&#xA;&#x9;&#x9;std::cout &lt;&lt; templateTestClass->getCppListOfProperty() &lt;&lt; std::endl;&#xA;&#x9;&#x9;addProperties(templateTestClass->getCppListOfProperty(), newNumber, newString);&#xA;&#x9;&#x9;addProperties(templateTestClass->getCppVectorOfProperty(), newNumber, newString);&#xA;&#x9;&#x9;addProperties(templateTestClass->getUnorderedTaggedValueList(), newNumber, newString);&#xA;&#xA;&#x9;&#x9;addMapProperties(templateTestClass->getCppMapOfProperties(), numberPair, strPair);&#xA;&#x9;&#x9;addMapProperties(templateTestClass->getOrderedPropertyMap(), numberPair, strPair);&#xA;&#x9;&#x9;addMapProperties(templateTestClass->getUnorderedPropertyMap(), numberPair, strPair);&#xA;&#x9;}&#xA;&#x9;// Add last twice&#xA;&#x9;auto numberPair=std::make_pair(newNumber->getName(), newNumber);&#xA;&#x9;auto strPair=std::make_pair(newString->getName(),newString);&#xA;&#xA;&#x9;addProperties(templateTestClass->getCppListOfProperty(), newNumber, newString);&#xA;&#x9;addProperties(templateTestClass->getCppVectorOfProperty(), newNumber, newString);&#xA;&#x9;addProperties(templateTestClass->getPropertyList(), newNumber, newString);&#xA;&#x9;addProperties(templateTestClass->getUnorderedTaggedValueList(), newNumber, newString);&#xA;&#xA;&#x9;addMapProperties(templateTestClass->getCppMapOfProperties(), numberPair, strPair);&#xA;&#x9;addMapProperties(templateTestClass->getOrderedPropertyMap(),numberPair, strPair);&#xA;&#x9;addMapProperties(templateTestClass->getUnorderedPropertyMap(), numberPair, strPair);&#xA;&#xA;&#xA;&#x9;std::cout &lt;&lt; &quot;success...&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;auto printProperties = [](auto list)&#xA;&#x9;{&#xA;&#x9;&#x9;for(auto iter: *list)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;switch (iter->getMetaElementID())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;case templateTestPackage::STRINGPROPERTY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; iter->getName() &lt;&lt; &quot;:&quot; &lt;&lt; std::dynamic_pointer_cast&lt;StringProperty>(iter)->getString() &lt;&lt; &quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case templateTestPackage::NUMBERPROPERTY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; iter->getName() &lt;&lt; &quot;:&quot; &lt;&lt; std::dynamic_pointer_cast&lt;NumberProperty>(iter)->getValue() &lt;&lt; &quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; iter->getName() &lt;&lt; &quot;:&quot; &lt;&lt; &quot;no Value&quot; &lt;&lt; &quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;std::cout &lt;&lt; std::endl;&#xA;&#x9;};&#xA;&#xA;&#x9;auto printMap = [](auto list)&#xA;&#x9;{&#xA;&#x9;&#x9;for(auto iter: *list)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;switch (iter.second->getMetaElementID())&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;case templateTestPackage::STRINGPROPERTY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;name:&quot; &lt;&lt; iter.first &lt;&lt;&quot;-&quot;&lt;&lt;iter.second->getName() &lt;&lt; &quot;:&quot; &lt;&lt; std::dynamic_pointer_cast&lt;StringProperty>(iter.second)->getString() &lt;&lt; &quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;case templateTestPackage::NUMBERPROPERTY_CLASS:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;name:&quot; &lt;&lt; iter.first &lt;&lt;&quot;-&quot;&lt;&lt;iter.second->getName() &lt;&lt; &quot;:&quot; &lt;&lt; std::dynamic_pointer_cast&lt;NumberProperty>(iter.second)->getValue() &lt;&lt; &quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;default:&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;name:&quot; &lt;&lt; iter.first &lt;&lt;&quot;-&quot; &lt;&lt; iter.second->getName() &lt;&lt; &quot;:&quot; &lt;&lt; &quot;no Value&quot; &lt;&lt; &quot;;&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;std::cout &lt;&lt; std::endl;&#xA;&#x9;};&#xA;&#xA;&#x9;std::cout &lt;&lt; &quot;------------------ printout list or vector properties ------------------&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;std::cout &lt;&lt; &quot;printout property cppListOfProperty:&quot; &lt;&lt; std::endl;&#xA;&#x9;printProperties(templateTestClass->getCppListOfProperty());&#xA;&#x9;std::cout &lt;&lt; &quot;printout property cppVectorOfProperty:&quot; &lt;&lt; std::endl;&#xA;&#x9;printProperties(templateTestClass->getCppVectorOfProperty());&#xA;&#x9;std::cout &lt;&lt; &quot;printout property propertyList:&quot; &lt;&lt; std::endl;&#xA;&#x9;printProperties(templateTestClass->getPropertyList());&#xA;&#x9;std::cout &lt;&lt; &quot;printout property unorderedTaggedValueList:&quot; &lt;&lt; std::endl;&#xA;&#x9;printProperties(templateTestClass->getUnorderedTaggedValueList());&#xA;&#xA;&#x9;std::cout &lt;&lt; &quot;------------------ printout map properties ------------------&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;std::cout &lt;&lt; &quot;printout property cppMapOfProperties:&quot; &lt;&lt; std::endl;&#xA;&#x9;printMap(templateTestClass->getCppMapOfProperties());&#xA;&#x9;std::cout &lt;&lt; &quot;printout property orderedPropertyMap:&quot; &lt;&lt; std::endl;&#xA;&#x9;printMap(templateTestClass->getOrderedPropertyMap());&#xA;&#x9;std::cout &lt;&lt; &quot;printout property unorderedPropertyMap:&quot; &lt;&lt; std::endl;&#xA;&#x9;printMap(templateTestClass->getUnorderedPropertyMap());"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Property">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="templatetestclass" eType="#//TemplateTestClass"
        eOpposite="#//TemplateTestClass/unorderedTaggedValueList"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="NumberProperty" eSuperTypes="#//Property">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDouble"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StringProperty" eSuperTypes="#//Property">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="string" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TemplateTestClass">
    <eOperations name="testCppMapOfProperties" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="map" eType="#//CPPMapOfStringAndProperty"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="unorderedTaggedValueList"
        upperBound="-1" eType="#//Property" containment="true" eOpposite="#//Property/templatetestclass"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="cppMapOfProperties" eType="#//CPPMapOfStringAndProperty"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="orderedPropertyMap" transient="true">
      <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
        <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eTypeArguments eClassifier="#//Property"/>
      </eGenericType>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="unorderedPropertyMap" ordered="false"
        transient="true">
      <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EMap">
        <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
        <eTypeArguments eClassifier="#//Property"/>
      </eGenericType>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="propertyList" ordered="false"
        transient="true">
      <eGenericType eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EEList">
        <eTypeArguments eClassifier="#//Property"/>
      </eGenericType>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="cppVectorOfProperty" eType="#//CPPVectorOfProperty"
        containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="cppListOfProperty" eType="#//CPPListOfProperty"
        containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MySimpleList">
    <eAnnotations source="http://tu-ilmenau.de/see/codegen">
      <details key="doNotGenerate"/>
    </eAnnotations>
    <eTypeParameters name="T"/>
    <eOperations name="next"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="next">
      <eGenericType eClassifier="#//MySimpleList">
        <eTypeArguments/>
      </eGenericType>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MySimplePropertyList" instanceTypeName="MySimplePropertyList">
    <eAnnotations source="http://tu-ilmenau.de/see/codegen">
      <details key="doNotGenerate"/>
    </eAnnotations>
    <eGenericSuperTypes eClassifier="#//MySimpleList">
      <eTypeArguments eClassifier="#//Property"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CPPMapOfStringAndProperty" instanceTypeName="CPPMapOfStringAndProperty">
    <eAnnotations source="http://tu-ilmenau.de/see/codegen">
      <details key="doNotGenerate"/>
    </eAnnotations>
    <eGenericSuperTypes eClassifier="ecore:EClass std.ecore#//map">
      <eTypeArguments eClassifier="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
      <eTypeArguments eClassifier="#//Property"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CPPListOfProperty" instanceTypeName="list&lt;Property>">
    <eAnnotations source="http://tu-ilmenau.de/see/codegen">
      <details key="doNotGenerate"/>
    </eAnnotations>
    <eGenericSuperTypes eClassifier="ecore:EClass std.ecore#//list">
      <eTypeArguments eClassifier="#//Property"/>
    </eGenericSuperTypes>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CPPVectorOfProperty" instanceTypeName="vector&lt;Property>">
    <eAnnotations source="http://tu-ilmenau.de/see/codegen">
      <details key="doNotGenerate"/>
    </eAnnotations>
    <eGenericSuperTypes eClassifier="ecore:EClass std.ecore#//vector">
      <eTypeArguments eClassifier="#//Property"/>
    </eGenericSuperTypes>
  </eClassifiers>
</ecore:EPackage>
