[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClassImplementationHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute /]
[import ecore4CPP::generator::main::generateEClass /]
[import ecore4CPP::generator::main::generateOperation /]
[import ecore4CPP::generator::main::generatePersistence/]
[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::generateStructuralFeatureSetGet /]
[import ecore4CPP::generator::main::generateBehavioralFeatureInvoke /]
[import ecore4CPP::generator::main::generateUnion /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::helpers::keywords /]
[import ecore4CPP::generator::main::validation::validation /]

[template public generateClassImplementationHeader(anEClass : EClass){ 
	className : String = anEClass.name.toUpperFirst().concat('Impl');
	fileName : String = anEClass.generateNamespacePath().concat('/impl/').concat(className).concat('.hpp');
}]
[printInfo(fileGenerationMessage(fileName, 'implementation header file'), 2)/]
[file (fileName, false, 'UTF-8')]
[startGuard(className)/]
[printInfo(includeGenerationMessage(), 3)/]
//*********************************
// generated Includes

// namespace macro header include
#include "[anEClass.ePackage.getRootPackage().name/]/[anEClass.ePackage.getRootPackage().name/].hpp" 

// model includes
#include "../[anEClass.name.toUpperFirst().concat('.hpp')/]"

[if (not (anEClass.ePackage = anEClass.getRootPackage()))]
#include "[anEClass.getRootPackage().name/]/[anEClass.getNamespacePathWithoutRoot()/]impl/[anEClass.ePackage.name/]FactoryImpl.hpp"
[/if]
[for (aEClass : EClass | anEClass.eSuperTypes->reject(doNotGenerateEClassifier())->asOrderedSet()->sortedBy(name)) separator ('\n')]
#include "[aEClass.generateNamespacePath()/]/impl/[aEClass.name.toUpperFirst()/]Impl.hpp"[/for]

[if (not(anEClass.name='EObject') and (anEClass.eSuperTypes->reject(doNotGenerateEClassifier())->isEmpty()))]
#include "ecore/impl/EModelElementImpl.hpp"
[/if]

[if (anEClass.hasKey(keyIncludes()))]
//Includes from codegen annotation
[anEClass.valueKey(keyIncludes())/]

[/if]
//*********************************
[comment namespace /]
namespace [anEClass.generateNamespaceDefinition()/] 
{
	class [anEClass.ePackage.getRootPackage().name.toUpper()/]_API [className/] : [for (sClass : EClass | anEClass.eSuperTypes->reject(doNotGenerateEClassifier())->asOrderedSet()->sortedBy(name)) separator (', ') after (', ')]
virtual public [ClassWithNamespace(anEClass, sClass)/]Impl[/for][if (anEClass.eSuperTypes->reject(doNotGenerateEClassifier())->isEmpty())]
[if (not(anEClass.name='EObject'))]virtual public ecore::EModelElementImpl,[/if]
[/if]virtual public [anEClass.name.toUpperFirst()/] 
	{
		public: 
			[className/](const [className/] & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const[if(anEClass.abstract)] = 0[/if];
			[className/]& operator=([className/] const&); [comment partial =operator is possible/]

		protected:
			[if (not (anEClass.ePackage = anEClass.getRootPackage()))]
			friend class [anEClass.getRootPackage().name/][anEClass.getPackageAccess(true)/]::[anEClass.ePackage.name/]FactoryImpl;
			[else]
			friend class [anEClass.ePackage.name/]FactoryImpl;
			[/if]
			[className/]();
			[anEClass.generateGetThisPtrDeclarations()/]

			[let ref:OrderedSet(EReference) = anEClass.getAllContainers()]
				[for(aReference:EReference | ref->reject(doNotGenerateEStructuralFeature())->sortedBy(name)) before(printInfo('Generating additional constructors for containments', 3)) ]
			//Additional constructors for the containments back reference
					[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
						[if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
			[className/]([aReference.generateReferenceType(true)/] par_[aReference.eType.name/], const int reference_id);
						[/if]
					[else]
			[className/]([aReference.generateReferenceType(true)/] par_[aReference.name/]);
					[/if]
				[/for]
			[/let]

		public:
			//destructor
			virtual ~[className/]()[if(anEClass.abstract)] = 0[/if];
			
			//*********************************
			// Operations
			//*********************************
			[for (anEOperation : EOperation | anEClass.eOperations->sortedBy(name)) before(printInfo('Generating method declarations for EOperations', 3))]
			[anEOperation.generateOperationDeclaration(true)/]
			[/for]
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			[for (anEAttribute : EAttribute | anEClass.eAttributes->sortedBy(name)) before(printInfo('Generating member-Getter/Setter declarations for EAttributes', 3))]
			[anEAttribute.generateAttributeAccessorsDeclaration(true)/]
			[/for]
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			[for (anEReference : EReference | anEClass.eReferences->sortedBy(name)) before(printInfo('Generating member-Getter/Setter declarations for EReferences', 3))]
			[anEReference.generateReferenceAccessorsDeclaration(true)/]
			[/for]
			
			//*********************************
			// Union Reference Getters
			//*********************************
			[for (aUnionReference : EReference | anEClass.getUnionsReference()->sortedBy(name)) before(printInfo('Generating Getter declarations for union references', 3))]
			[aUnionReference.generateUnionGetterDeclaration(true)/]
			[/for]
			
			//*********************************
			// Container Getter
			//*********************************
			[anEClass.generateEContainerOperation(true)/] 

			//*********************************
			// Persistence Functions
			//*********************************
			[anEClass.generatePersistenceFunctionsDeclarations(true)/]

		protected:
			virtual const std::shared_ptr<[needNamespace(anEClass.ePackage, 'EClass')/]>& eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			[anEClass.generateeGetDeclaration(true)/]
			[anEClass.generateeSetDeclaration(true)/]
			[anEClass.generateeIsSetDeclaration(true)/]

			//*********************************
			// EOperation Invoke
			//*********************************
			[anEClass.generateeInvokeByIDDeclaration(true)/]

		private:
			std::weak_ptr<[anEClass.generateNamespaceDefinition()/]::[anEClass.name.toUpperFirst()/]> m_[generateGetThisPtrPropertyName()/];
	};
}
[endGuard(className)/]
[/file]
[/template]