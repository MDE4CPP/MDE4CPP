
#include "uml/impl/ClassifierImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/SubsetUnion.hpp"


#include "abstractDataTypes/AnyEObject.hpp"
#include "abstractDataTypes/AnyEObjectBag.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Includes from codegen annotation
#include "uml/BehavioredClassifier.hpp"
#include "uml/InterfaceRealization.hpp"
#include "uml/Interface.hpp"
#include "uml/Usage.hpp"
#include "uml/Class.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Classifier.hpp"
#include "uml/CollaborationUse.hpp"
#include "uml/Comment.hpp"
#include "uml/Constraint.hpp"
#include "uml/Dependency.hpp"
#include "uml/Element.hpp"
#include "uml/ElementImport.hpp"
#include "uml/Feature.hpp"
#include "uml/Generalization.hpp"
#include "uml/GeneralizationSet.hpp"
#include "uml/Interface.hpp"
#include "uml/NamedElement.hpp"
#include "uml/Namespace.hpp"
#include "uml/Operation.hpp"
#include "uml/Package.hpp"
#include "uml/PackageImport.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/Property.hpp"
#include "uml/RedefinableElement.hpp"
#include "uml/StringExpression.hpp"
#include "uml/StructuralFeature.hpp"
#include "uml/Substitution.hpp"
#include "uml/TemplateBinding.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/TemplateSignature.hpp"
#include "uml/TemplateableElement.hpp"
#include "uml/Type.hpp"
#include "uml/UseCase.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
ClassifierImpl::ClassifierImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

ClassifierImpl::~ClassifierImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Classifier "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
ClassifierImpl::ClassifierImpl(std::weak_ptr<uml::Namespace> par_namespace)
:ClassifierImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
ClassifierImpl::ClassifierImpl(std::weak_ptr<uml::Element> par_owner)
:ClassifierImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
ClassifierImpl::ClassifierImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id)
:ClassifierImpl()
{
	switch(reference_id)
	{	
	case uml::umlPackage::PACKAGEABLEELEMENT_ATTRIBUTE_OWNINGPACKAGE:
		m_owningPackage = par_Package;
		m_namespace = par_Package;
		 return;
	case uml::umlPackage::TYPE_ATTRIBUTE_PACKAGE:
		m_package = par_Package;
		m_namespace = par_Package;
		 return;
	default:
	std::cerr << __PRETTY_FUNCTION__ <<" Reference not found in class with the given ID" << std::endl;
	}
   
}

//Additional constructor for the containments back reference
ClassifierImpl::ClassifierImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:ClassifierImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}


ClassifierImpl::ClassifierImpl(const ClassifierImpl & obj): ClassifierImpl()
{
	*this = obj;
}

ClassifierImpl& ClassifierImpl::operator=(const ClassifierImpl & obj)
{
	//call overloaded =Operator for each base class
	NamespaceImpl::operator=(obj);
	RedefinableElementImpl::operator=(obj);
	TypeImpl::operator=(obj);
	TemplateableElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Classifier 
	 * which is generated by the compiler (as Classifier is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Classifier::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Classifier "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_isAbstract = obj.getIsAbstract();
	m_isFinalSpecialization = obj.getIsFinalSpecialization();

	//copy references with no containment (soft copy)
	m_general  = obj.getGeneral();
	m_powertypeExtent  = obj.getPowertypeExtent();
	m_useCase  = obj.getUseCase();
	//Clone references with containment (deep copy)
	//clone reference 'collaborationUse'
	std::shared_ptr<SubsetUnion<uml::CollaborationUse, uml::Element>> collaborationUseList = obj.getCollaborationUse();
	if(collaborationUseList)
	{
		/*SubsetUnion*/
		m_collaborationUse.reset(new SubsetUnion<uml::CollaborationUse, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_collaborationUse - SubsetUnion<uml::CollaborationUse, uml::Element >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getCollaborationUse()->initSubsetUnion(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_collaborationUse - SubsetUnion<uml::CollaborationUse, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::CollaborationUse> collaborationUseindexElem: *collaborationUseList) 
		{
			std::shared_ptr<uml::CollaborationUse> temp = std::dynamic_pointer_cast<uml::CollaborationUse>((collaborationUseindexElem)->copy());
			m_collaborationUse->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr collaborationUse."<< std::endl;)
	}

	//clone reference 'generalization'
	std::shared_ptr<Subset<uml::Generalization, uml::Element>> generalizationList = obj.getGeneralization();
	if(generalizationList)
	{
		/*Subset*/
		m_generalization.reset(new Subset<uml::Generalization, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_generalization - Subset<uml::Generalization, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getGeneralization()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_generalization - Subset<uml::Generalization, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Generalization> generalizationindexElem: *generalizationList) 
		{
			std::shared_ptr<uml::Generalization> temp = std::dynamic_pointer_cast<uml::Generalization>((generalizationindexElem)->copy());
			m_generalization->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr generalization."<< std::endl;)
	}

	//clone reference 'inheritedMember'
	std::shared_ptr<Subset<uml::NamedElement, uml::NamedElement>> inheritedMemberList = obj.getInheritedMember();
	if(inheritedMemberList)
	{
		/*Subset*/
		m_inheritedMember.reset(new Subset<uml::NamedElement, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_inheritedMember - Subset<uml::NamedElement, uml::NamedElement >()" << std::endl;
		#endif
		
		/*Subset*/
		getInheritedMember()->initSubset(getMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_inheritedMember - Subset<uml::NamedElement, uml::NamedElement >(getMember())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::NamedElement> inheritedMemberindexElem: *inheritedMemberList) 
		{
			std::shared_ptr<uml::NamedElement> temp = std::dynamic_pointer_cast<uml::NamedElement>((inheritedMemberindexElem)->copy());
			m_inheritedMember->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr inheritedMember."<< std::endl;)
	}

	//clone reference 'ownedUseCase'
	std::shared_ptr<Subset<uml::UseCase, uml::NamedElement>> ownedUseCaseList = obj.getOwnedUseCase();
	if(ownedUseCaseList)
	{
		/*Subset*/
		m_ownedUseCase.reset(new Subset<uml::UseCase, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedUseCase - Subset<uml::UseCase, uml::NamedElement >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedUseCase()->initSubset(getOwnedMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedUseCase - Subset<uml::UseCase, uml::NamedElement >(getOwnedMember())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::UseCase> ownedUseCaseindexElem: *ownedUseCaseList) 
		{
			std::shared_ptr<uml::UseCase> temp = std::dynamic_pointer_cast<uml::UseCase>((ownedUseCaseindexElem)->copy());
			m_ownedUseCase->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr ownedUseCase."<< std::endl;)
	}

	//clone reference 'redefinedClassifier'
	std::shared_ptr<SubsetUnion<uml::Classifier, uml::RedefinableElement>> redefinedClassifierList = obj.getRedefinedClassifier();
	if(redefinedClassifierList)
	{
		/*SubsetUnion*/
		m_redefinedClassifier.reset(new SubsetUnion<uml::Classifier, uml::RedefinableElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_redefinedClassifier - SubsetUnion<uml::Classifier, uml::RedefinableElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getRedefinedClassifier()->initSubsetUnion(getRedefinedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_redefinedClassifier - SubsetUnion<uml::Classifier, uml::RedefinableElement >(getRedefinedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Classifier> redefinedClassifierindexElem: *redefinedClassifierList) 
		{
			std::shared_ptr<uml::Classifier> temp = std::dynamic_pointer_cast<uml::Classifier>((redefinedClassifierindexElem)->copy());
			m_redefinedClassifier->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr redefinedClassifier."<< std::endl;)
	}

	//clone reference 'representation'
	if(obj.getRepresentation()!=nullptr)
	{
		m_representation = std::dynamic_pointer_cast<uml::CollaborationUse>(obj.getRepresentation()->copy());
	}

	//clone reference 'substitution'
	std::shared_ptr<Subset<uml::Substitution, uml::Element>> substitutionList = obj.getSubstitution();
	if(substitutionList)
	{
		/*Subset*/
		m_substitution.reset(new Subset<uml::Substitution, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_substitution - Subset<uml::Substitution, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getSubstitution()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_substitution - Subset<uml::Substitution, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Substitution> substitutionindexElem: *substitutionList) 
		{
			std::shared_ptr<uml::Substitution> temp = std::dynamic_pointer_cast<uml::Substitution>((substitutionindexElem)->copy());
			m_substitution->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr substitution."<< std::endl;)
	}
	/*SubsetUnion*/
	getCollaborationUse()->initSubsetUnion(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value SubsetUnion: " << "m_collaborationUse - SubsetUnion<uml::CollaborationUse, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	/*Subset*/
	getGeneralization()->initSubset(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_generalization - Subset<uml::Generalization, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	/*Subset*/
	getOwnedUseCase()->initSubset(getOwnedMember());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_ownedUseCase - Subset<uml::UseCase, uml::NamedElement >(getOwnedMember())" << std::endl;
	#endif
	
	/*Subset*/
	getSubstitution()->initSubset(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_substitution - Subset<uml::Substitution, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	return *this;
}

//*********************************
// Operations
//*********************************
std::shared_ptr<Bag<uml::Property> > ClassifierImpl::allAttributes()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Feature> > ClassifierImpl::allFeatures()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Classifier> > ClassifierImpl::allParents()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Interface> > ClassifierImpl::allRealizedInterfaces()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr<Bag<uml::Interface>> allRealizedInterface(new Bag<uml::Interface>());
std::shared_ptr<Bag<uml::Interface>> directlyRealizedInterfaces = this->directlyRealizedInterfaces();
	
allRealizedInterface->insert(allRealizedInterface->end(), directlyRealizedInterfaces->begin(), directlyRealizedInterfaces->end());
	
std::shared_ptr<Bag<uml::Classifier>> superClasses = this->getGenerals();
for(unsigned int i = 0; i < superClasses->size(); i++)
{
	std::shared_ptr<Bag<uml::Interface>> superRealizedInterfaces = superClasses->at(i)->allRealizedInterfaces();
	allRealizedInterface->insert(allRealizedInterface->end(), superRealizedInterfaces->begin(), superRealizedInterfaces->end());
}

return allRealizedInterface;
	//end of body
}

std::shared_ptr<Bag<uml::StructuralFeature> > ClassifierImpl::allSlottableFeatures()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Interface> > ClassifierImpl::allUsedInterfaces()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		std::shared_ptr<Bag<uml::Interface>> allUsedInterfaces(new Bag<uml::Interface>());
	std::shared_ptr<Bag<uml::Interface>> directlyUsedInterfaces = this->directlyUsedInterfaces();
	
	allUsedInterfaces->insert(allUsedInterfaces->end(), directlyUsedInterfaces->begin(), directlyUsedInterfaces->end());
	
	std::shared_ptr<Bag<uml::Classifier>> superClasses = this->getGenerals();
	for(unsigned int i = 0; i < superClasses->size(); i++)
	{
		std::shared_ptr<Bag<uml::Interface>> superUsedInterfaces = superClasses->at(i)->allUsedInterfaces();
		allUsedInterfaces->insert(allUsedInterfaces->end(), superUsedInterfaces->begin(), superUsedInterfaces->end());
	}

	return allUsedInterfaces;
	//end of body
}

std::shared_ptr<Bag<uml::Interface> > ClassifierImpl::directlyRealizedInterfaces()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr<Bag<uml::Interface>> directlyRealizedInterfaces(new Bag<uml::Interface>());
std::shared_ptr<uml::BehavioredClassifier> bClassifier = std::dynamic_pointer_cast<uml::BehavioredClassifier>(getThisClassifierPtr());

if(bClassifier != nullptr)
{
	const std::shared_ptr<Bag<uml::InterfaceRealization>>& interfaceRealizations = bClassifier->getInterfaceRealization();
	for(const std::shared_ptr<uml::InterfaceRealization>& interfaceRealization : *interfaceRealizations)
	{
		const std::shared_ptr<uml::Interface>& contract = interfaceRealization->getContract();

		if(contract != nullptr)
		{
			directlyRealizedInterfaces->add(contract);
		}
	}
}

return directlyRealizedInterfaces;
	//end of body
}

std::shared_ptr<Bag<uml::Interface> > ClassifierImpl::directlyUsedInterfaces()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		std::shared_ptr<Bag<uml::Interface>> directlyUsedInterfaces(new Bag<uml::Interface>());

	const std::shared_ptr<Bag<uml::Dependency>>& clientDependencies = this->getClientDependency();
	
	for(const std::shared_ptr<uml::Dependency>& clientDependency : *clientDependencies)
	{
		std::shared_ptr<uml::Usage> usage = std::dynamic_pointer_cast<uml::Usage>(clientDependency);
		if(usage != nullptr)
		{
			const std::shared_ptr<Bag<uml::NamedElement>>& suppliers = usage->getSupplier();
			std::shared_ptr<Bag<uml::Interface>> interfacesInSuppliers(new Bag<uml::Interface>());
			
			for(const std::shared_ptr<uml::NamedElement>& supplier : *suppliers)
			{
				std::shared_ptr<uml::Interface> supplyingInterface = std::dynamic_pointer_cast<uml::Interface>(supplier);
				if(supplyingInterface != nullptr)
				{
					interfacesInSuppliers->add(supplyingInterface);
				}
			}
			
			directlyUsedInterfaces->insert(directlyUsedInterfaces->end(), interfacesInSuppliers->begin(), interfacesInSuppliers->end());
		}
	}
	
	return directlyUsedInterfaces;
	//end of body
}

std::shared_ptr<Bag<uml::Property> > ClassifierImpl::getAllAttributes()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    std::shared_ptr<Bag<uml::Property>> eAllAttributes(new Bag<uml::Property>());

    const std::shared_ptr<Bag<uml::Property>>& attributeList = this->getAttribute();
    eAllAttributes->insert(eAllAttributes->end(), attributeList->begin(), attributeList->end());

    std::shared_ptr<Bag<Classifier> > classList = this->getGenerals();
    for (std::shared_ptr<Classifier> c : *classList)
    {
        std::shared_ptr<Bag<Property> > attributeList = c->getAllAttributes();
        eAllAttributes->insert(eAllAttributes->end(), attributeList->begin(), attributeList->end());
    }
    return eAllAttributes;
	//end of body
}

std::shared_ptr<Bag<uml::Operation> > ClassifierImpl::getAllOperations()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		std::shared_ptr<Bag<uml::Operation>> allOperations(new Bag<uml::Operation>());
	const std::shared_ptr<Bag<uml::Feature>>& allDirectFeatures = this->getFeature();
	
	for(const std::shared_ptr<uml::Feature>& directFeature : *allDirectFeatures)
	{
		std::shared_ptr<uml::Operation> operation = std::dynamic_pointer_cast<uml::Operation>(directFeature);
		if(operation != nullptr){ allOperations->add(operation); }
	}
	
	const std::shared_ptr<Bag<uml::Classifier>>& superTypes = this->getGenerals();
	
	for(const std::shared_ptr<uml::Classifier>& superType : *superTypes)
	{
		std::shared_ptr<Bag<uml::Operation>> superTypeOperations = superType ->getAllOperations();
		allOperations->insert(allOperations->end(), superTypeOperations->begin(), superTypeOperations->end());
	}
	
	return allOperations;
	//end of body
}

std::shared_ptr<Bag<uml::Interface> > ClassifierImpl::getAllUsedInterfaces()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Classifier> > ClassifierImpl::getGenerals()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return parents();
	//end of body
}

std::shared_ptr<Bag<uml::NamedElement> > ClassifierImpl::getInheritedMembers()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Operation> ClassifierImpl::getOperation(std::string name, const std::shared_ptr<Bag<std::string>>& parameterNames, const std::shared_ptr<Bag<uml::Type>>& parameterTypes)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<uml::Operation> ClassifierImpl::getOperation(std::string name, const std::shared_ptr<Bag<std::string>>& parameterNames, const std::shared_ptr<Bag<uml::Type>>& parameterTypes, bool ignoreCase)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Operation> > ClassifierImpl::getOperations()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

Any ClassifierImpl::getPropertyValue(std::string propertyName)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		const std::shared_ptr<Bag<uml::Property>>& propertyList = this->getMetaClass()->getAttribute();
	for(const std::shared_ptr<uml::Property>& p: *propertyList)
	{
		if(p->getName()==propertyName)
		{
			return this->get(p);
		}
	}
	return Any();
	//end of body
}

std::shared_ptr<Bag<uml::Interface> > ClassifierImpl::getUsedInterfaces()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClassifierImpl::hasVisibilityOf(const std::shared_ptr<uml::NamedElement>& n)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::NamedElement> > ClassifierImpl::inherit(const std::shared_ptr<Bag<uml::NamedElement>>& inhs)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::NamedElement> > ClassifierImpl::inheritableMembers(const std::shared_ptr<uml::Classifier>& c)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClassifierImpl::isSubstitutableFor(const std::shared_ptr<uml::Classifier>& contract)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClassifierImpl::maps_to_generalization_set(const Any& diagnostics, std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClassifierImpl::maySpecializeType(const std::shared_ptr<uml::Classifier>& c)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClassifierImpl::no_cycles_in_generalization(const Any& diagnostics, std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool ClassifierImpl::non_final_parents(const Any& diagnostics, std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Classifier> > ClassifierImpl::parents()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	std::shared_ptr< Bag<uml::Classifier> > returnList(new Bag<uml::Classifier>());

	for(std::shared_ptr<Generalization> gen : *getGeneralization())
	{
		returnList->push_back(gen->getGeneral());
	}

	return returnList;
	//end of body
}

bool ClassifierImpl::specialize_type(const Any& diagnostics, std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute isAbstract */
bool ClassifierImpl::getIsAbstract() const
{
	return m_isAbstract;
}
void ClassifierImpl::setIsAbstract(bool _isAbstract)
{
	m_isAbstract = _isAbstract;
	
}

/* Getter & Setter for attribute isFinalSpecialization */
bool ClassifierImpl::getIsFinalSpecialization() const
{
	return m_isFinalSpecialization;
}
void ClassifierImpl::setIsFinalSpecialization(bool _isFinalSpecialization)
{
	m_isFinalSpecialization = _isFinalSpecialization;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference attribute */

/* Getter & Setter for reference collaborationUse */
const std::shared_ptr<SubsetUnion<uml::CollaborationUse, uml::Element>>& ClassifierImpl::getCollaborationUse() const
{
	if(m_collaborationUse == nullptr)
	{
		/*SubsetUnion*/
		m_collaborationUse.reset(new SubsetUnion<uml::CollaborationUse, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_collaborationUse - SubsetUnion<uml::CollaborationUse, uml::Element >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getCollaborationUse()->initSubsetUnion(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_collaborationUse - SubsetUnion<uml::CollaborationUse, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_collaborationUse;
}

/* Getter & Setter for reference feature */

/* Getter & Setter for reference general */
const std::shared_ptr<Bag<uml::Classifier>>& ClassifierImpl::getGeneral() const
{
	if(m_general == nullptr)
	{
		m_general.reset(new Bag<uml::Classifier>());
		
		
	}
    return m_general;
}

/* Getter & Setter for reference generalization */
const std::shared_ptr<Subset<uml::Generalization, uml::Element>>& ClassifierImpl::getGeneralization() const
{
	if(m_generalization == nullptr)
	{
		/*Subset*/
		m_generalization.reset(new Subset<uml::Generalization, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_generalization - Subset<uml::Generalization, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getGeneralization()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_generalization - Subset<uml::Generalization, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_generalization;
}

/* Getter & Setter for reference inheritedMember */
const std::shared_ptr<Subset<uml::NamedElement, uml::NamedElement>>& ClassifierImpl::getInheritedMember() const
{
	if(m_inheritedMember == nullptr)
	{
		/*Subset*/
		m_inheritedMember.reset(new Subset<uml::NamedElement, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_inheritedMember - Subset<uml::NamedElement, uml::NamedElement >()" << std::endl;
		#endif
		
		/*Subset*/
		getInheritedMember()->initSubset(getMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_inheritedMember - Subset<uml::NamedElement, uml::NamedElement >(getMember())" << std::endl;
		#endif
		
	}
    return m_inheritedMember;
}

/* Getter & Setter for reference ownedUseCase */
const std::shared_ptr<Subset<uml::UseCase, uml::NamedElement>>& ClassifierImpl::getOwnedUseCase() const
{
	if(m_ownedUseCase == nullptr)
	{
		/*Subset*/
		m_ownedUseCase.reset(new Subset<uml::UseCase, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedUseCase - Subset<uml::UseCase, uml::NamedElement >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedUseCase()->initSubset(getOwnedMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedUseCase - Subset<uml::UseCase, uml::NamedElement >(getOwnedMember())" << std::endl;
		#endif
		
	}
    return m_ownedUseCase;
}

/* Getter & Setter for reference powertypeExtent */
const std::shared_ptr<Bag<uml::GeneralizationSet>>& ClassifierImpl::getPowertypeExtent() const
{
	if(m_powertypeExtent == nullptr)
	{
		m_powertypeExtent.reset(new Bag<uml::GeneralizationSet>());
		
		
	}
    return m_powertypeExtent;
}

/* Getter & Setter for reference redefinedClassifier */
const std::shared_ptr<SubsetUnion<uml::Classifier, uml::RedefinableElement>>& ClassifierImpl::getRedefinedClassifier() const
{
	if(m_redefinedClassifier == nullptr)
	{
		/*SubsetUnion*/
		m_redefinedClassifier.reset(new SubsetUnion<uml::Classifier, uml::RedefinableElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_redefinedClassifier - SubsetUnion<uml::Classifier, uml::RedefinableElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getRedefinedClassifier()->initSubsetUnion(getRedefinedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_redefinedClassifier - SubsetUnion<uml::Classifier, uml::RedefinableElement >(getRedefinedElement())" << std::endl;
		#endif
		
	}
    return m_redefinedClassifier;
}

/* Getter & Setter for reference representation */
const std::shared_ptr<uml::CollaborationUse>& ClassifierImpl::getRepresentation() const
{
    return m_representation;
}
void ClassifierImpl::setRepresentation(const std::shared_ptr<uml::CollaborationUse>& _representation)
{
    m_representation = _representation;
	
}

/* Getter & Setter for reference substitution */
const std::shared_ptr<Subset<uml::Substitution, uml::Element>>& ClassifierImpl::getSubstitution() const
{
	if(m_substitution == nullptr)
	{
		/*Subset*/
		m_substitution.reset(new Subset<uml::Substitution, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_substitution - Subset<uml::Substitution, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getSubstitution()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_substitution - Subset<uml::Substitution, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_substitution;
}

/* Getter & Setter for reference useCase */
const std::shared_ptr<Bag<uml::UseCase>>& ClassifierImpl::getUseCase() const
{
	if(m_useCase == nullptr)
	{
		m_useCase.reset(new Bag<uml::UseCase>());
		
		
	}
    return m_useCase;
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<SubsetUnion<uml::Property, uml::Feature>> ClassifierImpl::getAttribute() const
{
	if(m_attribute == nullptr)
	{
		/*SubsetUnion*/
		m_attribute.reset(new SubsetUnion<uml::Property, uml::Feature >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_attribute - SubsetUnion<uml::Property, uml::Feature >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getAttribute()->initSubsetUnion(getFeature());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_attribute - SubsetUnion<uml::Property, uml::Feature >(getFeature())" << std::endl;
		#endif
		
	}
	return m_attribute;
}

std::shared_ptr<SubsetUnion<uml::Feature, uml::NamedElement>> ClassifierImpl::getFeature() const
{
	if(m_feature == nullptr)
	{
		/*SubsetUnion*/
		m_feature.reset(new SubsetUnion<uml::Feature, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_feature - SubsetUnion<uml::Feature, uml::NamedElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getFeature()->initSubsetUnion(getMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_feature - SubsetUnion<uml::Feature, uml::NamedElement >(getMember())" << std::endl;
		#endif
		
	}
	return m_feature;
}

std::shared_ptr<Union<uml::NamedElement>> ClassifierImpl::getMember() const
{
	if(m_member == nullptr)
	{
		/*Union*/
		m_member.reset(new Union<uml::NamedElement>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_member - Union<uml::NamedElement>()" << std::endl;
		#endif
		
		
	}
	return m_member;
}

std::weak_ptr<uml::Namespace> ClassifierImpl::getNamespace() const
{
	return m_namespace;
}

std::shared_ptr<Union<uml::Element>> ClassifierImpl::getOwnedElement() const
{
	if(m_ownedElement == nullptr)
	{
		/*Union*/
		m_ownedElement.reset(new Union<uml::Element>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_ownedElement - Union<uml::Element>()" << std::endl;
		#endif
		
		
	}
	return m_ownedElement;
}

std::shared_ptr<SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement>> ClassifierImpl::getOwnedMember() const
{
	if(m_ownedMember == nullptr)
	{
		/*SubsetUnion*/
		m_ownedMember.reset(new SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_ownedMember - SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getOwnedMember()->initSubsetUnion(getOwnedElement(), getMember());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_ownedMember - SubsetUnion<uml::NamedElement, uml::Element, uml::NamedElement >(getOwnedElement(), getMember())" << std::endl;
		#endif
		
	}
	return m_ownedMember;
}

std::weak_ptr<uml::Element> ClassifierImpl::getOwner() const
{
	return m_owner;
}

std::shared_ptr<Union<uml::RedefinableElement>> ClassifierImpl::getRedefinedElement() const
{
	if(m_redefinedElement == nullptr)
	{
		/*Union*/
		m_redefinedElement.reset(new Union<uml::RedefinableElement>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_redefinedElement - Union<uml::RedefinableElement>()" << std::endl;
		#endif
		
		
	}
	return m_redefinedElement;
}



//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> ClassifierImpl::eContainer() const
{
	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_owningPackage.lock())
	{
		return wp;
	}
	if(auto wp = m_package.lock())
	{
		return wp;
	}

	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}

	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void ClassifierImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void ClassifierImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("isAbstract");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsAbstract(value);
		}

		iter = attr_list.find("isFinalSpecialization");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsFinalSpecialization(value);
		}
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("general");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("general")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("powertypeExtent");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("powertypeExtent")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("redefinedClassifier");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("redefinedClassifier")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("representation");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("representation")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("useCase");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("useCase")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	NamespaceImpl::loadAttributes(loadHandler, attr_list);
	RedefinableElementImpl::loadAttributes(loadHandler, attr_list);
	TemplateableElementImpl::loadAttributes(loadHandler, attr_list);
	TypeImpl::loadAttributes(loadHandler, attr_list);
}

void ClassifierImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("collaborationUse") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "CollaborationUse";
			}
			loadHandler->handleChildContainer<uml::CollaborationUse>(this->getCollaborationUse());  

			return; 
		}

		if ( nodeName.compare("generalization") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "Generalization";
			}
			loadHandler->handleChildContainer<uml::Generalization>(this->getGeneralization());  

			return; 
		}

		if ( nodeName.compare("ownedUseCase") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "UseCase";
			}
			loadHandler->handleChildContainer<uml::UseCase>(this->getOwnedUseCase());  

			return; 
		}

		if ( nodeName.compare("substitution") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "Substitution";
			}
			loadHandler->handleChildContainer<uml::Substitution>(this->getSubstitution());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	NamespaceImpl::loadNode(nodeName, loadHandler);
	RedefinableElementImpl::loadNode(nodeName, loadHandler);
	TemplateableElementImpl::loadNode(nodeName, loadHandler);
	TypeImpl::loadNode(nodeName, loadHandler);
}

void ClassifierImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	switch(featureID)
	{
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERAL:
		{
			const std::shared_ptr<Bag<uml::Classifier>>& _general = getGeneral();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<uml::Classifier>  _r = std::dynamic_pointer_cast<uml::Classifier>(ref);
				if (_r != nullptr)
				{
					_general->push_back(_r);
				}
			}
			return;
		}

		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_POWERTYPEEXTENT:
		{
			const std::shared_ptr<Bag<uml::GeneralizationSet>>& _powertypeExtent = getPowertypeExtent();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<uml::GeneralizationSet>  _r = std::dynamic_pointer_cast<uml::GeneralizationSet>(ref);
				if (_r != nullptr)
				{
					_powertypeExtent->push_back(_r);
				}
			}
			return;
		}

		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REDEFINEDCLASSIFIER:
		{
			const std::shared_ptr<SubsetUnion<uml::Classifier, uml::RedefinableElement>>& _redefinedClassifier = getRedefinedClassifier();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<uml::Classifier>  _r = std::dynamic_pointer_cast<uml::Classifier>(ref);
				if (_r != nullptr)
				{
					_redefinedClassifier->push_back(_r);
				}
			}
			return;
		}

		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REPRESENTATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::CollaborationUse> _representation = std::dynamic_pointer_cast<uml::CollaborationUse>( references.front() );
				setRepresentation(_representation);
			}
			
			return;
		}

		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_USECASE:
		{
			const std::shared_ptr<Bag<uml::UseCase>>& _useCase = getUseCase();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<uml::UseCase>  _r = std::dynamic_pointer_cast<uml::UseCase>(ref);
				if (_r != nullptr)
				{
					_useCase->push_back(_r);
				}
			}
			return;
		}
	}
	NamespaceImpl::resolveReferences(featureID, references);
	RedefinableElementImpl::resolveReferences(featureID, references);
	TemplateableElementImpl::resolveReferences(featureID, references);
	TypeImpl::resolveReferences(featureID, references);
}

void ClassifierImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	NamespaceImpl::saveContent(saveHandler);
	RedefinableElementImpl::saveContent(saveHandler);
	TemplateableElementImpl::saveContent(saveHandler);
	TypeImpl::saveContent(saveHandler);
	
	PackageableElementImpl::saveContent(saveHandler);
	
	NamedElementImpl::saveContent(saveHandler);
	ParameterableElementImpl::saveContent(saveHandler);
	
	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void ClassifierImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Save 'generalization'
		for (std::shared_ptr<uml::Generalization> generalization : *this->getGeneralization()) 
		{
			saveHandler->addReference(generalization, "generalization", generalization->eClass() != package->getGeneralization_Class());
		}

		// Save 'ownedUseCase'
		for (std::shared_ptr<uml::UseCase> ownedUseCase : *this->getOwnedUseCase()) 
		{
			saveHandler->addReference(ownedUseCase, "ownedUseCase", ownedUseCase->eClass() != package->getUseCase_Class());
		}

		// Save 'substitution'
		for (std::shared_ptr<uml::Substitution> substitution : *this->getSubstitution()) 
		{
			saveHandler->addReference(substitution, "substitution", substitution->eClass() != package->getSubstitution_Class());
		}
		// Add attributes
		if ( this->eIsSet(package->getClassifier_Attribute_isAbstract()) )
		{
			saveHandler->addAttribute("isAbstract", this->getIsAbstract());
		}

		if ( this->eIsSet(package->getClassifier_Attribute_isFinalSpecialization()) )
		{
			saveHandler->addAttribute("isFinalSpecialization", this->getIsFinalSpecialization());
		}
	// Add references
		saveHandler->addReferences<uml::Classifier>("general", this->getGeneral());
		saveHandler->addReferences<uml::GeneralizationSet>("powertypeExtent", this->getPowertypeExtent());
		saveHandler->addReferences<uml::Classifier>("redefinedClassifier", this->getRedefinedClassifier());
		saveHandler->addReference(this->getRepresentation(), "representation", getRepresentation()->eClass() != uml::umlPackage::eInstance()->getCollaborationUse_Class()); 
		saveHandler->addReferences<uml::UseCase>("useCase", this->getUseCase());
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'collaborationUse'

		saveHandler->addReferences<uml::CollaborationUse>("collaborationUse", this->getCollaborationUse());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& ClassifierImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getClassifier_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any ClassifierImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ATTRIBUTE:
			return eAnyBag(getAttribute(),uml::umlPackage::PROPERTY_CLASS); //3625
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_COLLABORATIONUSE:
			return eAnyBag(getCollaborationUse(),uml::umlPackage::COLLABORATIONUSE_CLASS); //3626
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_FEATURE:
			return eAnyBag(getFeature(),uml::umlPackage::FEATURE_CLASS); //3624
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERAL:
			return eAnyBag(getGeneral(),uml::umlPackage::CLASSIFIER_CLASS); //3627
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERALIZATION:
			return eAnyBag(getGeneralization(),uml::umlPackage::GENERALIZATION_CLASS); //3628
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_INHERITEDMEMBER:
			return eAnyBag(getInheritedMember(),uml::umlPackage::NAMEDELEMENT_CLASS); //3630
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ISABSTRACT:
			return eAny(getIsAbstract(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //3631
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ISFINALSPECIALIZATION:
			return eAny(getIsFinalSpecialization(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //3632
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_OWNEDUSECASE:
			return eAnyBag(getOwnedUseCase(),uml::umlPackage::USECASE_CLASS); //3633
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_POWERTYPEEXTENT:
			return eAnyBag(getPowertypeExtent(),uml::umlPackage::GENERALIZATIONSET_CLASS); //3629
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REDEFINEDCLASSIFIER:
			return eAnyBag(getRedefinedClassifier(),uml::umlPackage::CLASSIFIER_CLASS); //3635
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REPRESENTATION:
			return eAny(getRepresentation(),uml::umlPackage::COLLABORATIONUSE_CLASS,false); //3636
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_SUBSTITUTION:
			return eAnyBag(getSubstitution(),uml::umlPackage::SUBSTITUTION_CLASS); //3637
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_USECASE:
			return eAnyBag(getUseCase(),uml::umlPackage::USECASE_CLASS); //3634
	}
	Any result;
	result = NamespaceImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = RedefinableElementImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = TemplateableElementImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = TypeImpl::eGet(featureID, resolve, coreType);
	return result;
}

bool ClassifierImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ATTRIBUTE:
			return getAttribute() != nullptr; //3625
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_COLLABORATIONUSE:
			return getCollaborationUse() != nullptr; //3626
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_FEATURE:
			return getFeature() != nullptr; //3624
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERAL:
			return getGeneral() != nullptr; //3627
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERALIZATION:
			return getGeneralization() != nullptr; //3628
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_INHERITEDMEMBER:
			return getInheritedMember() != nullptr; //3630
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ISABSTRACT:
			return getIsAbstract() != false; //3631
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ISFINALSPECIALIZATION:
			return getIsFinalSpecialization() != false; //3632
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_OWNEDUSECASE:
			return getOwnedUseCase() != nullptr; //3633
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_POWERTYPEEXTENT:
			return getPowertypeExtent() != nullptr; //3629
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REDEFINEDCLASSIFIER:
			return getRedefinedClassifier() != nullptr; //3635
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REPRESENTATION:
			return getRepresentation() != nullptr; //3636
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_SUBSTITUTION:
			return getSubstitution() != nullptr; //3637
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_USECASE:
			return getUseCase() != nullptr; //3634
	}
	bool result = false;
	result = NamespaceImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = RedefinableElementImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = TemplateableElementImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = TypeImpl::internalEIsSet(featureID);
	return result;
}

bool ClassifierImpl::eSet(int featureID, const Any& newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_COLLABORATIONUSE:
		{
			// CAST Any to Bag<uml::CollaborationUse>
			if((newValue->isContainer()) && (uml::umlPackage::COLLABORATIONUSE_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::CollaborationUse>> collaborationUseList= newValue->get<std::shared_ptr<Bag<uml::CollaborationUse>>>();
					std::shared_ptr<Bag<uml::CollaborationUse>> _collaborationUse=getCollaborationUse();
					for(const std::shared_ptr<uml::CollaborationUse> indexCollaborationUse: *_collaborationUse)
					{
						if (!(collaborationUseList->includes(indexCollaborationUse)))
						{
							_collaborationUse->erase(indexCollaborationUse);
						}
					}

					for(const std::shared_ptr<uml::CollaborationUse> indexCollaborationUse: *collaborationUseList)
					{
						if (!(_collaborationUse->includes(indexCollaborationUse)))
						{
							_collaborationUse->add(indexCollaborationUse);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERAL:
		{
			// CAST Any to Bag<uml::Classifier>
			if((newValue->isContainer()) && (uml::umlPackage::CLASSIFIER_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::Classifier>> generalList= newValue->get<std::shared_ptr<Bag<uml::Classifier>>>();
					std::shared_ptr<Bag<uml::Classifier>> _general=getGeneral();
					for(const std::shared_ptr<uml::Classifier> indexGeneral: *_general)
					{
						if (!(generalList->includes(indexGeneral)))
						{
							_general->erase(indexGeneral);
						}
					}

					for(const std::shared_ptr<uml::Classifier> indexGeneral: *generalList)
					{
						if (!(_general->includes(indexGeneral)))
						{
							_general->add(indexGeneral);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_GENERALIZATION:
		{
			// CAST Any to Bag<uml::Generalization>
			if((newValue->isContainer()) && (uml::umlPackage::GENERALIZATION_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::Generalization>> generalizationList= newValue->get<std::shared_ptr<Bag<uml::Generalization>>>();
					std::shared_ptr<Bag<uml::Generalization>> _generalization=getGeneralization();
					for(const std::shared_ptr<uml::Generalization> indexGeneralization: *_generalization)
					{
						if (!(generalizationList->includes(indexGeneralization)))
						{
							_generalization->erase(indexGeneralization);
						}
					}

					for(const std::shared_ptr<uml::Generalization> indexGeneralization: *generalizationList)
					{
						if (!(_generalization->includes(indexGeneralization)))
						{
							_generalization->add(indexGeneralization);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ISABSTRACT:
		{
			// CAST Any to bool
			bool _isAbstract = newValue->get<bool>();
			setIsAbstract(_isAbstract); //3631
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_ISFINALSPECIALIZATION:
		{
			// CAST Any to bool
			bool _isFinalSpecialization = newValue->get<bool>();
			setIsFinalSpecialization(_isFinalSpecialization); //3632
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_OWNEDUSECASE:
		{
			// CAST Any to Bag<uml::UseCase>
			if((newValue->isContainer()) && (uml::umlPackage::USECASE_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::UseCase>> ownedUseCaseList= newValue->get<std::shared_ptr<Bag<uml::UseCase>>>();
					std::shared_ptr<Bag<uml::UseCase>> _ownedUseCase=getOwnedUseCase();
					for(const std::shared_ptr<uml::UseCase> indexOwnedUseCase: *_ownedUseCase)
					{
						if (!(ownedUseCaseList->includes(indexOwnedUseCase)))
						{
							_ownedUseCase->erase(indexOwnedUseCase);
						}
					}

					for(const std::shared_ptr<uml::UseCase> indexOwnedUseCase: *ownedUseCaseList)
					{
						if (!(_ownedUseCase->includes(indexOwnedUseCase)))
						{
							_ownedUseCase->add(indexOwnedUseCase);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_POWERTYPEEXTENT:
		{
			// CAST Any to Bag<uml::GeneralizationSet>
			if((newValue->isContainer()) && (uml::umlPackage::GENERALIZATIONSET_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::GeneralizationSet>> powertypeExtentList= newValue->get<std::shared_ptr<Bag<uml::GeneralizationSet>>>();
					std::shared_ptr<Bag<uml::GeneralizationSet>> _powertypeExtent=getPowertypeExtent();
					for(const std::shared_ptr<uml::GeneralizationSet> indexPowertypeExtent: *_powertypeExtent)
					{
						if (!(powertypeExtentList->includes(indexPowertypeExtent)))
						{
							_powertypeExtent->erase(indexPowertypeExtent);
						}
					}

					for(const std::shared_ptr<uml::GeneralizationSet> indexPowertypeExtent: *powertypeExtentList)
					{
						if (!(_powertypeExtent->includes(indexPowertypeExtent)))
						{
							_powertypeExtent->add(indexPowertypeExtent);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REDEFINEDCLASSIFIER:
		{
			// CAST Any to Bag<uml::Classifier>
			if((newValue->isContainer()) && (uml::umlPackage::CLASSIFIER_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::Classifier>> redefinedClassifierList= newValue->get<std::shared_ptr<Bag<uml::Classifier>>>();
					std::shared_ptr<Bag<uml::Classifier>> _redefinedClassifier=getRedefinedClassifier();
					for(const std::shared_ptr<uml::Classifier> indexRedefinedClassifier: *_redefinedClassifier)
					{
						if (!(redefinedClassifierList->includes(indexRedefinedClassifier)))
						{
							_redefinedClassifier->erase(indexRedefinedClassifier);
						}
					}

					for(const std::shared_ptr<uml::Classifier> indexRedefinedClassifier: *redefinedClassifierList)
					{
						if (!(_redefinedClassifier->includes(indexRedefinedClassifier)))
						{
							_redefinedClassifier->add(indexRedefinedClassifier);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_REPRESENTATION:
		{
			// CAST Any to uml::CollaborationUse
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<uml::CollaborationUse> _representation = std::dynamic_pointer_cast<uml::CollaborationUse>(_temp);
			setRepresentation(_representation); //3636
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_SUBSTITUTION:
		{
			// CAST Any to Bag<uml::Substitution>
			if((newValue->isContainer()) && (uml::umlPackage::SUBSTITUTION_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::Substitution>> substitutionList= newValue->get<std::shared_ptr<Bag<uml::Substitution>>>();
					std::shared_ptr<Bag<uml::Substitution>> _substitution=getSubstitution();
					for(const std::shared_ptr<uml::Substitution> indexSubstitution: *_substitution)
					{
						if (!(substitutionList->includes(indexSubstitution)))
						{
							_substitution->erase(indexSubstitution);
						}
					}

					for(const std::shared_ptr<uml::Substitution> indexSubstitution: *substitutionList)
					{
						if (!(_substitution->includes(indexSubstitution)))
						{
							_substitution->add(indexSubstitution);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
		case uml::umlPackage::CLASSIFIER_ATTRIBUTE_USECASE:
		{
			// CAST Any to Bag<uml::UseCase>
			if((newValue->isContainer()) && (uml::umlPackage::USECASE_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<uml::UseCase>> useCaseList= newValue->get<std::shared_ptr<Bag<uml::UseCase>>>();
					std::shared_ptr<Bag<uml::UseCase>> _useCase=getUseCase();
					for(const std::shared_ptr<uml::UseCase> indexUseCase: *_useCase)
					{
						if (!(useCaseList->includes(indexUseCase)))
						{
							_useCase->erase(indexUseCase);
						}
					}

					for(const std::shared_ptr<uml::UseCase> indexUseCase: *useCaseList)
					{
						if (!(_useCase->includes(indexUseCase)))
						{
							_useCase->add(indexUseCase);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
	}

	bool result = false;
	result = NamespaceImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = RedefinableElementImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = TemplateableElementImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = TypeImpl::eSet(featureID, newValue);
	return result;
}

//*********************************
// EOperation Invoke
//*********************************
Any ClassifierImpl::eInvoke(int operationID, const std::shared_ptr<std::list<Any>>& arguments)
{
	Any result;
 
  	switch(operationID)
	{
		// uml::Classifier::allAttributes() : uml::Property[*]: 3067782479
		case umlPackage::CLASSIFIER_OPERATION_ALLATTRIBUTES:
		{
			std::shared_ptr<Bag<uml::Property> > resultList = this->allAttributes();
			return eAnyBag(resultList,uml::umlPackage::PROPERTY_CLASS);
			break;
		}
		// uml::Classifier::allFeatures() : uml::Feature[*]: 2625373874
		case umlPackage::CLASSIFIER_OPERATION_ALLFEATURES:
		{
			std::shared_ptr<Bag<uml::Feature> > resultList = this->allFeatures();
			return eAnyBag(resultList,uml::umlPackage::FEATURE_CLASS);
			break;
		}
		// uml::Classifier::allParents() : uml::Classifier[*]: 299467449
		case umlPackage::CLASSIFIER_OPERATION_ALLPARENTS:
		{
			std::shared_ptr<Bag<uml::Classifier> > resultList = this->allParents();
			return eAnyBag(resultList,uml::umlPackage::CLASSIFIER_CLASS);
			break;
		}
		// uml::Classifier::allRealizedInterfaces() : uml::Interface[*]: 1667853328
		case umlPackage::CLASSIFIER_OPERATION_ALLREALIZEDINTERFACES:
		{
			std::shared_ptr<Bag<uml::Interface> > resultList = this->allRealizedInterfaces();
			return eAnyBag(resultList,uml::umlPackage::INTERFACE_CLASS);
			break;
		}
		// uml::Classifier::allSlottableFeatures() : uml::StructuralFeature[*]: 1526814209
		case umlPackage::CLASSIFIER_OPERATION_ALLSLOTTABLEFEATURES:
		{
			std::shared_ptr<Bag<uml::StructuralFeature> > resultList = this->allSlottableFeatures();
			return eAnyBag(resultList,uml::umlPackage::STRUCTURALFEATURE_CLASS);
			break;
		}
		// uml::Classifier::allUsedInterfaces() : uml::Interface[*]: 703777961
		case umlPackage::CLASSIFIER_OPERATION_ALLUSEDINTERFACES:
		{
			std::shared_ptr<Bag<uml::Interface> > resultList = this->allUsedInterfaces();
			return eAnyBag(resultList,uml::umlPackage::INTERFACE_CLASS);
			break;
		}
		// uml::Classifier::directlyRealizedInterfaces() : uml::Interface[*]: 2958885839
		case umlPackage::CLASSIFIER_OPERATION_DIRECTLYREALIZEDINTERFACES:
		{
			std::shared_ptr<Bag<uml::Interface> > resultList = this->directlyRealizedInterfaces();
			return eAnyBag(resultList,uml::umlPackage::INTERFACE_CLASS);
			break;
		}
		// uml::Classifier::directlyUsedInterfaces() : uml::Interface[*]: 2666848748
		case umlPackage::CLASSIFIER_OPERATION_DIRECTLYUSEDINTERFACES:
		{
			std::shared_ptr<Bag<uml::Interface> > resultList = this->directlyUsedInterfaces();
			return eAnyBag(resultList,uml::umlPackage::INTERFACE_CLASS);
			break;
		}
		// uml::Classifier::getAllAttributes() : uml::Property[*]: 385172867
		case umlPackage::CLASSIFIER_OPERATION_GETALLATTRIBUTES:
		{
			std::shared_ptr<Bag<uml::Property> > resultList = this->getAllAttributes();
			return eAnyBag(resultList,uml::umlPackage::PROPERTY_CLASS);
			break;
		}
		// uml::Classifier::getAllOperations() : uml::Operation[*]: 3362998652
		case umlPackage::CLASSIFIER_OPERATION_GETALLOPERATIONS:
		{
			std::shared_ptr<Bag<uml::Operation> > resultList = this->getAllOperations();
			return eAnyBag(resultList,uml::umlPackage::OPERATION_CLASS);
			break;
		}
		// uml::Classifier::getAllUsedInterfaces() : uml::Interface[*]: 1284650005
		case umlPackage::CLASSIFIER_OPERATION_GETALLUSEDINTERFACES:
		{
			std::shared_ptr<Bag<uml::Interface> > resultList = this->getAllUsedInterfaces();
			return eAnyBag(resultList,uml::umlPackage::INTERFACE_CLASS);
			break;
		}
		// uml::Classifier::getGenerals() : uml::Classifier[*]: 3949457156
		case umlPackage::CLASSIFIER_OPERATION_GETGENERALS:
		{
			std::shared_ptr<Bag<uml::Classifier> > resultList = this->getGenerals();
			return eAnyBag(resultList,uml::umlPackage::CLASSIFIER_CLASS);
			break;
		}
		// uml::Classifier::getInheritedMembers() : uml::NamedElement[*]: 4185121864
		case umlPackage::CLASSIFIER_OPERATION_GETINHERITEDMEMBERS:
		{
			std::shared_ptr<Bag<uml::NamedElement> > resultList = this->getInheritedMembers();
			return eAnyBag(resultList,uml::umlPackage::NAMEDELEMENT_CLASS);
			break;
		}
		// uml::Classifier::getOperation(std::string, std::string[*], uml::Type[*]) : uml::Operation: 119886986
		case umlPackage::CLASSIFIER_OPERATION_GETOPERATION_STRING_TYPE:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			//Retrieve input parameter 'parameterNames'
			//parameter 1
			std::shared_ptr<Bag<std::string>> incoming_param_parameterNames;
			std::list<Any>::const_iterator incoming_param_parameterNames_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_parameterNames = (*incoming_param_parameterNames_arguments_citer)->get<std::shared_ptr<Bag<std::string>> >();
			//Retrieve input parameter 'parameterTypes'
			//parameter 2
			std::shared_ptr<Bag<uml::Type>> incoming_param_parameterTypes;
			std::list<Any>::const_iterator incoming_param_parameterTypes_arguments_citer = std::next(arguments->begin(), 2);
			incoming_param_parameterTypes = (*incoming_param_parameterTypes_arguments_citer)->get<std::shared_ptr<Bag<uml::Type>> >();
			result = eAnyObject(this->getOperation(incoming_param_name,incoming_param_parameterNames,incoming_param_parameterTypes), uml::umlPackage::OPERATION_CLASS);
			break;
		}
		// uml::Classifier::getOperation(std::string, std::string[*], uml::Type[*], bool) : uml::Operation: 3635929158
		case umlPackage::CLASSIFIER_OPERATION_GETOPERATION_STRING_BOOLEAN:
		{
			//Retrieve input parameter 'name'
			//parameter 0
			std::string incoming_param_name;
			std::list<Any>::const_iterator incoming_param_name_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_name = (*incoming_param_name_arguments_citer)->get<std::string >();
			//Retrieve input parameter 'parameterNames'
			//parameter 1
			std::shared_ptr<Bag<std::string>> incoming_param_parameterNames;
			std::list<Any>::const_iterator incoming_param_parameterNames_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_parameterNames = (*incoming_param_parameterNames_arguments_citer)->get<std::shared_ptr<Bag<std::string>> >();
			//Retrieve input parameter 'parameterTypes'
			//parameter 2
			std::shared_ptr<Bag<uml::Type>> incoming_param_parameterTypes;
			std::list<Any>::const_iterator incoming_param_parameterTypes_arguments_citer = std::next(arguments->begin(), 2);
			incoming_param_parameterTypes = (*incoming_param_parameterTypes_arguments_citer)->get<std::shared_ptr<Bag<uml::Type>> >();
			//Retrieve input parameter 'ignoreCase'
			//parameter 3
			bool incoming_param_ignoreCase;
			std::list<Any>::const_iterator incoming_param_ignoreCase_arguments_citer = std::next(arguments->begin(), 3);
			incoming_param_ignoreCase = (*incoming_param_ignoreCase_arguments_citer)->get<bool >();
			result = eAnyObject(this->getOperation(incoming_param_name,incoming_param_parameterNames,incoming_param_parameterTypes,incoming_param_ignoreCase), uml::umlPackage::OPERATION_CLASS);
			break;
		}
		// uml::Classifier::getOperations() : uml::Operation[*]: 1789810819
		case umlPackage::CLASSIFIER_OPERATION_GETOPERATIONS:
		{
			std::shared_ptr<Bag<uml::Operation> > resultList = this->getOperations();
			return eAnyBag(resultList,uml::umlPackage::OPERATION_CLASS);
			break;
		}
		// uml::Classifier::getPropertyValue(std::string) : Any: 1124921106
		case umlPackage::CLASSIFIER_OPERATION_GETPROPERTYVALUE_STRING:
		{
			//Retrieve input parameter 'propertyName'
			//parameter 0
			std::string incoming_param_propertyName;
			std::list<Any>::const_iterator incoming_param_propertyName_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_propertyName = (*incoming_param_propertyName_arguments_citer)->get<std::string >();
			result = this->getPropertyValue(incoming_param_propertyName);
			break;
		}
		// uml::Classifier::getUsedInterfaces() : uml::Interface[*]: 2875330752
		case umlPackage::CLASSIFIER_OPERATION_GETUSEDINTERFACES:
		{
			std::shared_ptr<Bag<uml::Interface> > resultList = this->getUsedInterfaces();
			return eAnyBag(resultList,uml::umlPackage::INTERFACE_CLASS);
			break;
		}
		// uml::Classifier::hasVisibilityOf(uml::NamedElement) : bool: 3476094388
		case umlPackage::CLASSIFIER_OPERATION_HASVISIBILITYOF_NAMEDELEMENT:
		{
			//Retrieve input parameter 'n'
			//parameter 0
			std::shared_ptr<uml::NamedElement> incoming_param_n;
			std::list<Any>::const_iterator incoming_param_n_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_n = (*incoming_param_n_arguments_citer)->get<std::shared_ptr<uml::NamedElement> >();
			result = eAny(this->hasVisibilityOf(incoming_param_n),0,false);
			break;
		}
		// uml::Classifier::inherit(uml::NamedElement[*]) : uml::NamedElement[*]: 1076598219
		case umlPackage::CLASSIFIER_OPERATION_INHERIT_NAMEDELEMENT:
		{
			//Retrieve input parameter 'inhs'
			//parameter 0
			std::shared_ptr<Bag<uml::NamedElement>> incoming_param_inhs;
			std::list<Any>::const_iterator incoming_param_inhs_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_inhs = (*incoming_param_inhs_arguments_citer)->get<std::shared_ptr<Bag<uml::NamedElement>> >();
			std::shared_ptr<Bag<uml::NamedElement> > resultList = this->inherit(incoming_param_inhs);
			return eAnyBag(resultList,uml::umlPackage::NAMEDELEMENT_CLASS);
			break;
		}
		// uml::Classifier::inheritableMembers(uml::Classifier) : uml::NamedElement[*]: 2989880290
		case umlPackage::CLASSIFIER_OPERATION_INHERITABLEMEMBERS_CLASSIFIER:
		{
			//Retrieve input parameter 'c'
			//parameter 0
			std::shared_ptr<uml::Classifier> incoming_param_c;
			std::list<Any>::const_iterator incoming_param_c_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_c = (*incoming_param_c_arguments_citer)->get<std::shared_ptr<uml::Classifier> >();
			std::shared_ptr<Bag<uml::NamedElement> > resultList = this->inheritableMembers(incoming_param_c);
			return eAnyBag(resultList,uml::umlPackage::NAMEDELEMENT_CLASS);
			break;
		}
		// uml::Classifier::isSubstitutableFor(uml::Classifier) : bool: 2463563559
		case umlPackage::CLASSIFIER_OPERATION_ISSUBSTITUTABLEFOR_CLASSIFIER:
		{
			//Retrieve input parameter 'contract'
			//parameter 0
			std::shared_ptr<uml::Classifier> incoming_param_contract;
			std::list<Any>::const_iterator incoming_param_contract_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_contract = (*incoming_param_contract_arguments_citer)->get<std::shared_ptr<uml::Classifier> >();
			result = eAny(this->isSubstitutableFor(incoming_param_contract),0,false);
			break;
		}
		// uml::Classifier::maps_to_generalization_set(Any, std::map) : bool: 2990336940
		case umlPackage::CLASSIFIER_OPERATION_MAPS_TO_GENERALIZATION_SET_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->maps_to_generalization_set(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::Classifier::maySpecializeType(uml::Classifier) : bool: 211370547
		case umlPackage::CLASSIFIER_OPERATION_MAYSPECIALIZETYPE_CLASSIFIER:
		{
			//Retrieve input parameter 'c'
			//parameter 0
			std::shared_ptr<uml::Classifier> incoming_param_c;
			std::list<Any>::const_iterator incoming_param_c_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_c = (*incoming_param_c_arguments_citer)->get<std::shared_ptr<uml::Classifier> >();
			result = eAny(this->maySpecializeType(incoming_param_c),0,false);
			break;
		}
		// uml::Classifier::no_cycles_in_generalization(Any, std::map) : bool: 3444230139
		case umlPackage::CLASSIFIER_OPERATION_NO_CYCLES_IN_GENERALIZATION_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->no_cycles_in_generalization(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::Classifier::non_final_parents(Any, std::map) : bool: 3265360227
		case umlPackage::CLASSIFIER_OPERATION_NON_FINAL_PARENTS_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->non_final_parents(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::Classifier::parents() : uml::Classifier[*]: 3079307280
		case umlPackage::CLASSIFIER_OPERATION_PARENTS:
		{
			std::shared_ptr<Bag<uml::Classifier> > resultList = this->parents();
			return eAnyBag(resultList,uml::umlPackage::CLASSIFIER_CLASS);
			break;
		}
		// uml::Classifier::specialize_type(Any, std::map) : bool: 1700667753
		case umlPackage::CLASSIFIER_OPERATION_SPECIALIZE_TYPE_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->specialize_type(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}

		default:
		{
			// call superTypes
			result = TemplateableElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			result = TypeImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			result = RedefinableElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			result = NamespaceImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Classifier> ClassifierImpl::getThisClassifierPtr() const
{
	return m_thisClassifierPtr.lock();
}
void ClassifierImpl::setThisClassifierPtr(std::weak_ptr<uml::Classifier> thisClassifierPtr)
{
	m_thisClassifierPtr = thisClassifierPtr;
	setThisNamespacePtr(thisClassifierPtr);
	setThisRedefinableElementPtr(thisClassifierPtr);
	setThisTemplateableElementPtr(thisClassifierPtr);
	setThisTypePtr(thisClassifierPtr);
}


