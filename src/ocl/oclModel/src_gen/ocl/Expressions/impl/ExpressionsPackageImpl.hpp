//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_EXPRESSIONSPACKAGEIMPL_HPP
#define OCL_EXPRESSIONSPACKAGEIMPL_HPP

#include "ecore/ecorePackage.hpp"
#include "ecore/impl/EPackageImpl.hpp"

#include "ocl/Expressions/ExpressionsPackage.hpp" 


namespace ocl::Expressions 
{
	class AssociationClassCallExp;
	class BooleanLiteralExp;
	class CallExp;
	class CollectionItem;
	class CollectionLiteralExp;
	class CollectionLiteralPart;
	class CollectionRange;
	class EnumLiteralExp;
	class ExpressionInOcl;
	class FeatureCallExp;
	class IfExp;
	class InfixedExp;
	class IntegerLiteralExp;
	class InvalidLiteralExp;
	class IterateExp;
	class IteratorExp;
	class LetExp;
	class LiteralExp;
	class LoopExp;
	class MessageExp;
	class NavigationCallExp;
	class NullLiteralExp;
	class NumericLiteralExp;
	class OclExpression;
	class OperationCallExp;
	class PrimitiveLiteralExp;
	class PropertyCallExp;
	class RealLiteralExp;
	class StateExp;
	class StringLiteralExp;
	class TupleLiteralExp;
	class TupleLiteralPart;
	class TypeExp;
	class UnlimitedNaturalExp;
	class UnspecifiedValueExp;
	class Variable;
	class VariableExp;}

namespace ecore
{
	class ecoreFactory;
}

namespace ocl::Expressions
{
	class ExpressionsPackageImpl : public ecore::EPackageImpl ,virtual public ExpressionsPackage
	{
		private:    
			ExpressionsPackageImpl(ExpressionsPackageImpl const&) = delete;
			ExpressionsPackageImpl& operator=(ExpressionsPackageImpl const&) = delete;

		protected:
			ExpressionsPackageImpl();

		public:
			virtual ~ExpressionsPackageImpl();

			// Begin Class AssociationClassCallExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getAssociationClassCallExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getAssociationClassCallExp_Attribute_referredAssociationClass() const ;
			
			
			// End Class AssociationClassCallExp

			// Begin Class BooleanLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getBooleanLiteralExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getBooleanLiteralExp_Attribute_booleanSymbol() const ;
			
			
			
			// End Class BooleanLiteralExp

			// Begin Class CallExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCallExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getCallExp_Attribute_source() const ;
			
			
			// End Class CallExp

			// Begin Class CollectionItem
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCollectionItem_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getCollectionItem_Attribute_item() const ;
			
			
			// End Class CollectionItem

			// Begin Class CollectionLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCollectionLiteralExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getCollectionLiteralExp_Attribute_kind() const ;
			
			virtual std::shared_ptr<ecore::EReference> getCollectionLiteralExp_Attribute_part() const ;
			
			
			// End Class CollectionLiteralExp

			// Begin Class CollectionLiteralPart
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCollectionLiteralPart_Class() const ;
			
			
			
			
			// End Class CollectionLiteralPart

			// Begin Class CollectionRange
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getCollectionRange_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getCollectionRange_Attribute_first() const ;
			virtual std::shared_ptr<ecore::EReference> getCollectionRange_Attribute_last() const ;
			
			
			// End Class CollectionRange

			// Begin Class EnumLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getEnumLiteralExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getEnumLiteralExp_Attribute_referredEnumLiteral() const ;
			
			
			// End Class EnumLiteralExp

			// Begin Class ExpressionInOcl
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getExpressionInOcl_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getExpressionInOcl_Attribute_bodyExpression() const ;
			virtual std::shared_ptr<ecore::EReference> getExpressionInOcl_Attribute_contextVariable() const ;
			virtual std::shared_ptr<ecore::EReference> getExpressionInOcl_Attribute_parameterVariable() const ;
			virtual std::shared_ptr<ecore::EReference> getExpressionInOcl_Attribute_resultVariable() const ;
			
			
			// End Class ExpressionInOcl

			// Begin Class FeatureCallExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getFeatureCallExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getFeatureCallExp_Attribute_isPre() const ;
			
			
			
			// End Class FeatureCallExp

			// Begin Class IfExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getIfExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getIfExp_Attribute_condition() const ;
			virtual std::shared_ptr<ecore::EReference> getIfExp_Attribute_elseExpression() const ;
			virtual std::shared_ptr<ecore::EReference> getIfExp_Attribute_thenExpression() const ;
			
			
			// End Class IfExp

			// Begin Class InfixedExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getInfixedExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getInfixedExp_Attribute_source() const ;
			
			
			// End Class InfixedExp

			// Begin Class IntegerLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getIntegerLiteralExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getIntegerLiteralExp_Attribute_integerSymbol() const ;
			
			
			
			// End Class IntegerLiteralExp

			// Begin Class InvalidLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getInvalidLiteralExp_Class() const ;
			
			
			
			
			// End Class InvalidLiteralExp

			// Begin Class IterateExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getIterateExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getIterateExp_Attribute_result() const ;
			
			
			// End Class IterateExp

			// Begin Class IteratorExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getIteratorExp_Class() const ;
			
			
			
			
			// End Class IteratorExp

			// Begin Class LetExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getLetExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getLetExp_Attribute_in() const ;
			virtual std::shared_ptr<ecore::EReference> getLetExp_Attribute_variable() const ;
			
			
			// End Class LetExp

			// Begin Class LiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getLiteralExp_Class() const ;
			
			
			
			
			// End Class LiteralExp

			// Begin Class LoopExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getLoopExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getLoopExp_Attribute_body() const ;
			virtual std::shared_ptr<ecore::EReference> getLoopExp_Attribute_iterator() const ;
			
			
			// End Class LoopExp

			// Begin Class MessageExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getMessageExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getMessageExp_Attribute_argument() const ;
			virtual std::shared_ptr<ecore::EReference> getMessageExp_Attribute_calledOperation() const ;
			virtual std::shared_ptr<ecore::EReference> getMessageExp_Attribute_sentSignal() const ;
			virtual std::shared_ptr<ecore::EReference> getMessageExp_Attribute_target() const ;
			
			
			// End Class MessageExp

			// Begin Class NavigationCallExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getNavigationCallExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getNavigationCallExp_Attribute_navigationSource() const ;
			virtual std::shared_ptr<ecore::EReference> getNavigationCallExp_Attribute_qualifier() const ;
			
			
			// End Class NavigationCallExp

			// Begin Class NullLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getNullLiteralExp_Class() const ;
			
			
			
			
			// End Class NullLiteralExp

			// Begin Class NumericLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getNumericLiteralExp_Class() const ;
			
			
			
			
			// End Class NumericLiteralExp

			// Begin Class OclExpression
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getOclExpression_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_appliedElement() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_elseOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_firstOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_ifOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_initializedElement() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_instance() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_lastOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_loopBodyOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_parentCall() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_parentNav() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_thenOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getOclExpression_Attribute_topExpression() const ;
			
			
			// End Class OclExpression

			// Begin Class OperationCallExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getOperationCallExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getOperationCallExp_Attribute_argument() const ;
			virtual std::shared_ptr<ecore::EReference> getOperationCallExp_Attribute_referredOperation() const ;
			
			
			// End Class OperationCallExp

			// Begin Class PrimitiveLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getPrimitiveLiteralExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getPrimitiveLiteralExp_Attribute_symbol() const ;
			
			
			
			// End Class PrimitiveLiteralExp

			// Begin Class PropertyCallExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getPropertyCallExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getPropertyCallExp_Attribute_referredProperty() const ;
			
			
			// End Class PropertyCallExp

			// Begin Class RealLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getRealLiteralExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getRealLiteralExp_Attribute_realSymbol() const ;
			
			
			
			// End Class RealLiteralExp

			// Begin Class StateExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getStateExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getStateExp_Attribute_referredState() const ;
			
			
			// End Class StateExp

			// Begin Class StringLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getStringLiteralExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getStringLiteralExp_Attribute_stringSymbol() const ;
			
			
			
			// End Class StringLiteralExp

			// Begin Class TupleLiteralExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getTupleLiteralExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getTupleLiteralExp_Attribute_part() const ;
			
			
			// End Class TupleLiteralExp

			// Begin Class TupleLiteralPart
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getTupleLiteralPart_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getTupleLiteralPart_Attribute_attribute() const ;
			
			
			// End Class TupleLiteralPart

			// Begin Class TypeExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getTypeExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getTypeExp_Attribute_referredType() const ;
			
			
			// End Class TypeExp

			// Begin Class UnlimitedNaturalExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getUnlimitedNaturalExp_Class() const ;
			
			virtual std::shared_ptr<ecore::EAttribute> getUnlimitedNaturalExp_Attribute_unlimitedNaturalSymbol() const ;
			
			
			
			// End Class UnlimitedNaturalExp

			// Begin Class UnspecifiedValueExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getUnspecifiedValueExp_Class() const ;
			
			
			
			
			// End Class UnspecifiedValueExp

			// Begin Class Variable
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getVariable_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_baseExp() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_initExpression() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_loopExp() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_referringExp() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_representedParameter() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_resultOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_selfOwner() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_value() const ;
			virtual std::shared_ptr<ecore::EReference> getVariable_Attribute_varOwner() const ;
			
			
			// End Class Variable

			// Begin Class VariableExp
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getVariableExp_Class() const ;
			
			
			virtual std::shared_ptr<ecore::EReference> getVariableExp_Attribute_referredVariable() const ;
			
			
			// End Class VariableExp

			virtual std::shared_ptr<ecore::EEnum> getCollectionKind_Class() const ;
			
			// SubPackages Getters
			

		private:
			std::shared_ptr<ecore::EClass> m_associationClassCallExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_booleanLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_callExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_collectionItem_Class = nullptr;std::shared_ptr<ecore::EClass> m_collectionLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_collectionLiteralPart_Class = nullptr;std::shared_ptr<ecore::EClass> m_collectionRange_Class = nullptr;std::shared_ptr<ecore::EClass> m_enumLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_expressionInOcl_Class = nullptr;std::shared_ptr<ecore::EClass> m_featureCallExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_ifExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_infixedExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_integerLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_invalidLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_iterateExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_iteratorExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_letExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_literalExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_loopExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_messageExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_navigationCallExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_nullLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_numericLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_oclExpression_Class = nullptr;std::shared_ptr<ecore::EClass> m_operationCallExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_primitiveLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_propertyCallExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_realLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_stateExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_stringLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_tupleLiteralExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_tupleLiteralPart_Class = nullptr;std::shared_ptr<ecore::EClass> m_typeExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_unlimitedNaturalExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_unspecifiedValueExp_Class = nullptr;std::shared_ptr<ecore::EClass> m_variable_Class = nullptr;std::shared_ptr<ecore::EClass> m_variableExp_Class = nullptr;
			std::shared_ptr<ecore::EEnum> m_collectionKind_Class = nullptr;
			std::shared_ptr<ecore::EAttribute> m_booleanLiteralExp_Attribute_booleanSymbol = nullptr;std::shared_ptr<ecore::EAttribute> m_integerLiteralExp_Attribute_integerSymbol = nullptr;std::shared_ptr<ecore::EAttribute> m_featureCallExp_Attribute_isPre = nullptr;std::shared_ptr<ecore::EAttribute> m_collectionLiteralExp_Attribute_kind = nullptr;std::shared_ptr<ecore::EAttribute> m_realLiteralExp_Attribute_realSymbol = nullptr;std::shared_ptr<ecore::EAttribute> m_stringLiteralExp_Attribute_stringSymbol = nullptr;std::shared_ptr<ecore::EAttribute> m_primitiveLiteralExp_Attribute_symbol = nullptr;std::shared_ptr<ecore::EAttribute> m_unlimitedNaturalExp_Attribute_unlimitedNaturalSymbol = nullptr;
			std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_appliedElement = nullptr;std::shared_ptr<ecore::EReference> m_operationCallExp_Attribute_argument = nullptr;std::shared_ptr<ecore::EReference> m_messageExp_Attribute_argument = nullptr;std::shared_ptr<ecore::EReference> m_tupleLiteralPart_Attribute_attribute = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_baseExp = nullptr;std::shared_ptr<ecore::EReference> m_loopExp_Attribute_body = nullptr;std::shared_ptr<ecore::EReference> m_expressionInOcl_Attribute_bodyExpression = nullptr;std::shared_ptr<ecore::EReference> m_messageExp_Attribute_calledOperation = nullptr;std::shared_ptr<ecore::EReference> m_ifExp_Attribute_condition = nullptr;std::shared_ptr<ecore::EReference> m_expressionInOcl_Attribute_contextVariable = nullptr;std::shared_ptr<ecore::EReference> m_ifExp_Attribute_elseExpression = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_elseOwner = nullptr;std::shared_ptr<ecore::EReference> m_collectionRange_Attribute_first = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_firstOwner = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_ifOwner = nullptr;std::shared_ptr<ecore::EReference> m_letExp_Attribute_in = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_initExpression = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_initializedElement = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_instance = nullptr;std::shared_ptr<ecore::EReference> m_collectionItem_Attribute_item = nullptr;std::shared_ptr<ecore::EReference> m_loopExp_Attribute_iterator = nullptr;std::shared_ptr<ecore::EReference> m_collectionRange_Attribute_last = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_lastOwner = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_loopBodyOwner = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_loopExp = nullptr;std::shared_ptr<ecore::EReference> m_navigationCallExp_Attribute_navigationSource = nullptr;std::shared_ptr<ecore::EReference> m_expressionInOcl_Attribute_parameterVariable = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_parentCall = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_parentNav = nullptr;std::shared_ptr<ecore::EReference> m_collectionLiteralExp_Attribute_part = nullptr;std::shared_ptr<ecore::EReference> m_tupleLiteralExp_Attribute_part = nullptr;std::shared_ptr<ecore::EReference> m_navigationCallExp_Attribute_qualifier = nullptr;std::shared_ptr<ecore::EReference> m_associationClassCallExp_Attribute_referredAssociationClass = nullptr;std::shared_ptr<ecore::EReference> m_enumLiteralExp_Attribute_referredEnumLiteral = nullptr;std::shared_ptr<ecore::EReference> m_operationCallExp_Attribute_referredOperation = nullptr;std::shared_ptr<ecore::EReference> m_propertyCallExp_Attribute_referredProperty = nullptr;std::shared_ptr<ecore::EReference> m_stateExp_Attribute_referredState = nullptr;std::shared_ptr<ecore::EReference> m_typeExp_Attribute_referredType = nullptr;std::shared_ptr<ecore::EReference> m_variableExp_Attribute_referredVariable = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_referringExp = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_representedParameter = nullptr;std::shared_ptr<ecore::EReference> m_iterateExp_Attribute_result = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_resultOwner = nullptr;std::shared_ptr<ecore::EReference> m_expressionInOcl_Attribute_resultVariable = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_selfOwner = nullptr;std::shared_ptr<ecore::EReference> m_messageExp_Attribute_sentSignal = nullptr;std::shared_ptr<ecore::EReference> m_callExp_Attribute_source = nullptr;std::shared_ptr<ecore::EReference> m_infixedExp_Attribute_source = nullptr;std::shared_ptr<ecore::EReference> m_messageExp_Attribute_target = nullptr;std::shared_ptr<ecore::EReference> m_ifExp_Attribute_thenExpression = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_thenOwner = nullptr;std::shared_ptr<ecore::EReference> m_oclExpression_Attribute_topExpression = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_value = nullptr;std::shared_ptr<ecore::EReference> m_variable_Attribute_varOwner = nullptr;std::shared_ptr<ecore::EReference> m_letExp_Attribute_variable = nullptr;
			

			friend class ExpressionsPackage;

			static bool isInited;
			static ExpressionsPackage* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init(std::shared_ptr<ecore::EPackage> package);

		public:
			void createPackageContents(std::shared_ptr<ecore::EPackage> package);
			void initializePackageContents();

		private:
			void createAssociationClassCallExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createBooleanLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createCallExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createCollectionItemContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createCollectionLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createCollectionLiteralPartContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createCollectionRangeContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createEnumLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createExpressionInOclContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createFeatureCallExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createIfExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createInfixedExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createIntegerLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createInvalidLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createIterateExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createIteratorExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createLetExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createLoopExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createMessageExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createNavigationCallExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createNullLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createNumericLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createOclExpressionContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createOperationCallExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createPrimitiveLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createPropertyCallExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createRealLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createStateExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createStringLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createTupleLiteralExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createTupleLiteralPartContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createTypeExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createUnlimitedNaturalExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createUnspecifiedValueExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createVariableContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createVariableExpContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);

			void initializeAssociationClassCallExpContent();
			void initializeBooleanLiteralExpContent();
			void initializeCallExpContent();
			void initializeCollectionItemContent();
			void initializeCollectionLiteralExpContent();
			void initializeCollectionLiteralPartContent();
			void initializeCollectionRangeContent();
			void initializeEnumLiteralExpContent();
			void initializeExpressionInOclContent();
			void initializeFeatureCallExpContent();
			void initializeIfExpContent();
			void initializeInfixedExpContent();
			void initializeIntegerLiteralExpContent();
			void initializeInvalidLiteralExpContent();
			void initializeIterateExpContent();
			void initializeIteratorExpContent();
			void initializeLetExpContent();
			void initializeLiteralExpContent();
			void initializeLoopExpContent();
			void initializeMessageExpContent();
			void initializeNavigationCallExpContent();
			void initializeNullLiteralExpContent();
			void initializeNumericLiteralExpContent();
			void initializeOclExpressionContent();
			void initializeOperationCallExpContent();
			void initializePrimitiveLiteralExpContent();
			void initializePropertyCallExpContent();
			void initializeRealLiteralExpContent();
			void initializeStateExpContent();
			void initializeStringLiteralExpContent();
			void initializeTupleLiteralExpContent();
			void initializeTupleLiteralPartContent();
			void initializeTypeExpContent();
			void initializeUnlimitedNaturalExpContent();
			void initializeUnspecifiedValueExpContent();
			void initializeVariableContent();
			void initializeVariableExpContent();
			void initializePackageEDataTypes();



	};
}
#endif /* end of include guard: OCL_EXPRESSIONSPACKAGEIMPL_HPP */
