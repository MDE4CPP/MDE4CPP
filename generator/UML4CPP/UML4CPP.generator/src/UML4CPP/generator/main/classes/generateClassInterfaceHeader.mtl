[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of class model file
 * 
 */]
[module generateClassInterfaceHeader('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import UML4CPP::generator::main::components::generateInterfaceRealization /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateOpaqueBehavior /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::singletonHelper /]
[import UML4CPP::generator::main::validation::validation/]
[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::model_execution::model_execution /]

[query private includes(aClass : Class) : Set(Type) = Set(Type)
{
	aClass.ownedAttribute.type, 
	aClass.ownedOperation.ownedParameter.type, 
	aClass.collectOpaqueBehaviorsContexedByClass().ownedParameter.type,
	aClass.getImplicitCompositeOwners()
}->flatten() /]

[template public generateClassInterfaceHeader(aClass : Class) {aPackage:Package = aClass.ancestors()->filter(Package)->first();}]
[file (aPackage.generateNamespacePath(false).concat('/').concat(aClass.name.toUpperFirst()).concat('.hpp'), false, 'UTF-8')]
[startGuard(aClass)/]

[generateAbstractDataTypesForwardDeclaration()/]

[if (not aClass.getRootPackage().allOwnedElements()->filter(Usage)->isEmpty())]
//********************
// usage
[for (usages : Usage| aClass.getRootPackage().allOwnedElements()->filter(Usage)->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (not (usages.supplier.name->asOrderedSet()->first() = aClass.name.toString()))]
#include "[usages.getNearestPackage().generateNamespacePath(false)/]/[usages.supplier.name/].hpp"
[/if][/for][/if]

[let classifiersForForwardDeclaration : Set(Classifier) = Set
{
	aClass.includes()->filter(Class),
	aClass.includes()->filter(Interface),
	aClass.includes()->selectByType(DataType)
}->flatten()]
	[if (classifiersForForwardDeclaration->size() > 0)]
//Forward declarations for used types
		[for (aPackage : Package | classifiersForForwardDeclaration.getNearestPackage()->sortedBy(name))]
			[if (not aPackage.isIgnoreNamespace())]
namespace [aPackage.generateNamespace(true)/] 
{
			[/if]
			[for (aClassifier : Classifier | classifiersForForwardDeclaration->select(c : Classifier | getNearestPackage() = aPackage))]
[if (not aPackage.isIgnoreNamespace())]['\t'/][/if][if (aClassifier.oclIsTypeOf(DataType))]struct[else]class[/if] [aClassifier.name.toUpperFirst()/];
			[/for]
			[if (not aPackage.isIgnoreNamespace())]
}
			[/if]
		[/for]
	[/if]
[/let]

// base class includes
[if (aClass.superClass->isEmpty())]
#include "[aClass.getGeneralSuperClassInterfaceInclude()/]"
[else]
[for (elements : Classifier| aClass.superClass->asOrderedSet()->sortedBy(myQualifiedName()))]
#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.toUpperFirst().concat('.hpp')/]"
[/for]
[/if]

[if (not aClass.interfaceRealization->isEmpty())]
// Interface realization
[for (anInterfaceRealization : InterfaceRealization | aClass.interfaceRealization->asOrderedSet()->sortedBy(myQualifiedName()))]
[for (aNamedElement : NamedElement | anInterfaceRealization.supplier->select(not oclIsUndefined() and not name.oclIsUndefined()))]
#include "[aNamedElement.getNearestPackage().generateNamespacePath(false)/]/[aNamedElement.name.toUpperFirst()/].hpp"
[/for]
[/for]
[/if]

[if (aClass.includes()->selectByKind(Enumeration)->size() > 0)]
// enum includes
[for (elements : Enumeration | aClass.includes()->selectByKind(Enumeration)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
#include "[elements.getNearestPackage().generateNamespacePath(false)/]/[elements.name.toUpperFirst().concat('.hpp')/]"[/for]
[/if]

[if (not aClass.getNearestPackage().isIgnoreNamespace())]
namespace [aPackage.generateNamespace(false)/]
{
[/if]
	class [aClass.name.toUpperFirst()/] [if (aClass.superClass->isEmpty())] : virtual public [aClass.getGeneralSuperClassName()/] [aClass.generateInterfaceExtensions()/]
[else][for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined())->asOrderedSet()->sortedBy(myQualifiedName())) before (':') separator (',')]
virtual public [sClass.getClassifierName(aClass, false, sClass.getNearestPackage().isIgnoreNamespace())/][/for]
[/if]
	{
		protected:
			[aClass.name.toUpperFirst()/](){}

		public:
			//destructor
			virtual ~[aClass.name.toUpperFirst()/]() {}

			//*********************************
			// Getter Setter
			//*********************************
			[aClass.ownedAttribute->sortedBy(name).generateAttributeAccessorsDeclaration(false)/]
			[aClass.getImplicitCompositeOwners()->sortedBy(name).generateCompositeOwnerAttributeAccessorsDeclaration(false)/]
			
			//*********************************
			// Operations
			//*********************************
			[for (anOperation : Operation | aClass.ownedOperation->sortedBy(name)) before('\t\t\t//Methods defined by Operations\n') after('\n')]
			[anOperation.generateOperationDecl(false)/]
			[/for]
			[comment OpaqueBehaviors directly or indirectly owned by aClass that have no defined specification
			(i.e. they do not define the method for any Operation) are treated as normal C++ methods/]
			[for (anOpaqueBehavior : OpaqueBehavior | aClass.collectOpaqueBehaviorsContexedByClass()->sortedBy(name)) before('\t\t\t//Methods defined by OpaqueBehaviors\n') after('\n')]
			[anOpaqueBehavior.generateMethodDeclaration(false)/]
			[/for]
			[if (isFUMLExecutable())]
			// fUML-specific Operations
			const std::shared_ptr<Bag<uml::Classifier>>& getTypes() const = 0;

			[/if]
		protected:
			//*********************************
			// Members
			//*********************************
			[aClass.ownedAttribute->sortedBy(name).generateAttributeProtectedMember()/]
			[aClass.getImplicitCompositeOwners()->sortedBy(name).generateCompositeOwnerAttributeProtectedMember() /]

		public:
			//*********************************
			// Union Getter
			//*********************************
			[aClass.generateUnionGetterDeclaretaion(false)/]
[if (isSingleton())]

			//Singleton Instance and Getter
		[generateSingletonDecl(aClass.name)/]
[/if]	
	};
[if (not aClass.getNearestPackage().isIgnoreNamespace())]}[/if]
[endGuard(aClass)/]
[/file]
[/template]