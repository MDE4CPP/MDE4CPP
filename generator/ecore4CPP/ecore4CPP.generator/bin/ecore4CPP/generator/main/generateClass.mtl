[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClass('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[**
 * Operation to generate create operation in model factory
*/]
[template public generateClassCreate(aEClass : EClass,impl : Boolean) ? (aEClass.abstract=false)]
virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/](const int metaElementID=-1)[if (not generateObjectMonitoring())] const[/if] [abstractSufix(impl)/];
[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
//Add containing object
virtual std::shared_ptr<[aEClass.generateTypeClass()/]> create[aEClass.name/]_in_[aReference.name.toUpperFirst()/]([aReference.generateReferenceType(true)/] par_[aReference.name/], const int metaElementID=-1)[if (not generateObjectMonitoring())] const[/if] [abstractSufix(impl)/];
[/for]

[/let]
[/template]

[template public generateEContainerOperation(aClass : EClass, impl : EBoolean)]
virtual std::shared_ptr<ecore::EObject> eContainer() const [abstractSufix(impl)/];
[/template]

[template public generateEContainerOperationCPP(aClass: EClass)]
std::shared_ptr<ecore::EObject> [aClass.name.toUpperFirst()/]Impl::eContainer() const
{
[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
	[if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
		[for(multipleRef : EReference | ref->select(eType.name = aReference.eType.name)->sortedBy(name))]
	if(auto wp = m_[multipleRef.name/].lock())
	{
		return wp;
	}
		[/for]
	[/if]
	[else]
	if(auto wp = m_[aReference.name/].lock())
	{
		return wp;
	}
	[/if]
[/for]
[/let]
	return nullptr;
}
[/template]

[template public generateGetThisPtr(aClass : EClass)]
virtual std::shared_ptr<[aClass.name/]> [generateGetThisPtrPropertyGetterName()/]() const;
virtual void [generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/]);
[/template]

[template public generateGetThisPtrCPP(aClass: EClass)]
std::shared_ptr<[aClass.name.toUpperFirst()/]> [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertyGetterName()/]() const
{
	return m_[generateGetThisPtrPropertyName()/].lock();
}
void [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/])
{
	m_[generateGetThisPtrPropertyName()/] = [generateGetThisPtrPropertyName()/];
	[for (superClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
	[superClass.generateGetThisPtrPropertySetterName()/]([aClass.generateGetThisPtrPropertyName()/]);
	[/for]	
}
[/template]

[query public generateGetThisPtrPropertyName(anEClass : EClass) : String = 'this'.concat(anEClass.name.toUpperFirst()).concat('Ptr')/]
[query public generateGetThisPtrPropertySetterName(anEClass : EClass) : String = 'set'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]
[query public generateGetThisPtrPropertyGetterName(anEClass : EClass) : String = 'get'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]

[***###########################################################################################
 * Section for creating the Attribute elements in the metamodel package
*/]

[template public generateClassCreation(aEClass : EClass)]
[aEClass.getClassMemberName()/] = factory->createEClass_in_EPackage(package, [aEClass.getStaticAttributeIDName()/]);
[/template]

[template public generateClassInit(aEClass : EClass)]
[aEClass.getClassMemberName()/]->setName("[aEClass.name/]");
[aEClass.getClassMemberName()/]->setAbstract([aEClass.abstract.toString()/]);
[aEClass.getClassMemberName()/]->setInterface([aEClass.interface.toString()/]);

[/template]

[template public generateStaticClassID(aEClass : EClass)]
static const unsigned int [aEClass.getStaticAttributeIDName()/] = [aEClass.getMyClassifierID()/];
static const unsigned int [aEClass.getStaticAttributeIDName()/]_FEATURE_COUNT = [aEClass.getFeatureCount()/];
static const unsigned int [aEClass.getStaticAttributeIDName()/]_OPERATION_COUNT = [aEClass.getOperationCount()/];
[/template]

[template public initSuperTypes(aEClass : EClass)]
[for (superClass : EClass | aEClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
[aEClass.getClassMemberName()/]->getESuperTypes()->push_back([aEClass.packageGetter(superClass)/]);
[/for]
[/template]