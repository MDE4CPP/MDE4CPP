//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_REMOVEVARIABLEVALUEACTIONREMOVEVARIABLEVALUEACTIONIMPL_HPP
#define UML_REMOVEVARIABLEVALUEACTIONREMOVEVARIABLEVALUEACTIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../RemoveVariableValueAction.hpp"

#include "uml/impl/WriteVariableActionImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API RemoveVariableValueActionImpl : virtual public WriteVariableActionImpl, virtual public RemoveVariableValueAction 
	{
		public: 
			RemoveVariableValueActionImpl(const RemoveVariableValueActionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			RemoveVariableValueActionImpl& operator=(RemoveVariableValueActionImpl const&); 

		protected:
			friend class umlFactoryImpl;
			RemoveVariableValueActionImpl();
			virtual std::shared_ptr<uml::RemoveVariableValueAction> getThisRemoveVariableValueActionPtr() const;
			virtual void setThisRemoveVariableValueActionPtr(std::weak_ptr<uml::RemoveVariableValueAction> thisRemoveVariableValueActionPtr);

			//Additional constructors for the containments back reference
			RemoveVariableValueActionImpl(std::weak_ptr<uml::Activity> par_activity);
			//Additional constructors for the containments back reference
			RemoveVariableValueActionImpl(std::weak_ptr<uml::StructuredActivityNode> par_inStructuredNode);
			//Additional constructors for the containments back reference
			RemoveVariableValueActionImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			RemoveVariableValueActionImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~RemoveVariableValueActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Specifies whether to remove duplicates of the value in nonunique Variables.
			<p>From package UML::Actions.</p>
			*/
			 
			virtual bool getIsRemoveDuplicates() const ;
			/*!
			Specifies whether to remove duplicates of the value in nonunique Variables.
			<p>From package UML::Actions.</p>
			*/
			 
			virtual void setIsRemoveDuplicates (bool _isRemoveDuplicates);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			An InputPin that provides the position of an existing value to remove in ordered, nonunique Variables. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.
			<p>From package UML::Actions.</p>
			*/
			
			virtual std::shared_ptr<uml::InputPin> getRemoveAt() const ;
			/*!
			An InputPin that provides the position of an existing value to remove in ordered, nonunique Variables. The type of the removeAt InputPin is UnlimitedNatural, but the value cannot be zero or unlimited.
			<p>From package UML::Actions.</p>
			*/
			
			virtual void setRemoveAt(std::shared_ptr<uml::InputPin>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::RemoveVariableValueAction> m_thisRemoveVariableValueActionPtr;
	};
}
#endif /* end of include guard: UML_REMOVEVARIABLEVALUEACTIONREMOVEVARIABLEVALUEACTIONIMPL_HPP */
