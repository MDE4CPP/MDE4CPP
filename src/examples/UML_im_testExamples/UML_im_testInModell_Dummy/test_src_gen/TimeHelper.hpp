//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef TIMEHELPER_HPP
#define TIMEHELPER_HPP

#include <chrono>

extern std::chrono::time_point<std::chrono::high_resolution_clock> getCurrentTime() {

	return std::chrono::high_resolution_clock::now();
}

extern std::chrono::duration<double, std::nano> getTimeDiffInNanos( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
	std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {

	return t2 - t1;
}

extern std::chrono::duration<double, std::micro> getTimeDiffInMicros( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
	std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {

	return t2 - t1;
}

extern std::chrono::duration<double, std::milli> getTimeDiffInMillis( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
	std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {

	return t2 - t1;
}

extern std::chrono::duration<double> getTimeDiffInSecs( std::chrono::time_point<std::chrono::high_resolution_clock> t1,
	std::chrono::time_point<std::chrono::high_resolution_clock> t2 ) {

	return t2 - t1;
}

#endif /* end of include guard: TIMEHELPER_HPP */
