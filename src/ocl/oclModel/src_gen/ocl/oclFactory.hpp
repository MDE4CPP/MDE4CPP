//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCLFACTORY_HPP
#define OCLFACTORY_HPP
// namespace macro header include
#include "ocl/ocl.hpp"

#include <map>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EFactory.hpp"
#include "ocl/oclPackage.hpp"

namespace ocl 
{
	class oclPackage;
}




namespace ecore
{
	class EPackage;
}


namespace fUML::Semantics::Activities
{
	class ObjectToken;
}
namespace fUML::Semantics::CommonBehavior
{
	class ParameterValue;
}
namespace fUML::Semantics::SimpleClassifiers
{
	class FeatureValue;
}




namespace ocl 
{
	class oclFactoryPluginImpl;
}
namespace ocl 
{
	class OCL_API oclFactory : virtual public ecore::EFactory 
	{
		private:    
			oclFactory(oclFactory const&) = delete;
			oclFactory& operator=(oclFactory const&) = delete;
		protected:
			oclFactory(){}
		private:    	
			friend class oclPluginImpl; 
		// Header only sinleton like implemenation for oclFactory eInstance()
		private: 
			static std::shared_ptr<oclFactory>* getoclFactoryStaticPtr()
			{
				static std::shared_ptr<oclFactory> local_instance; 
				return &(local_instance);
			}
		    static void seteInstance(std::shared_ptr<oclFactory> _instance) {*(getoclFactoryStaticPtr())=_instance;}; 
		public:
			static std::shared_ptr<oclFactory> eInstance(){return *(getoclFactoryStaticPtr());}
		
		public:    		
			//Creator functions
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const = 0;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const = 0;

			
	};
}
#endif /* end of include guard: OCLFACTORY_HPP */
