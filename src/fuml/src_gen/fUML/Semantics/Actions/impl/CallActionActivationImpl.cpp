
#include "fUML/Semantics/Actions/impl/CallActionActivationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Subset.hpp"


#include "abstractDataTypes/AnyEObject.hpp"
#include "abstractDataTypes/AnyEObjectBag.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Includes from codegen annotation
#include "fUML/fUMLFactory.hpp"
#include "fUML/Semantics/Activities/ObjectToken.hpp"
#include "fUML/Semantics/CommonBehavior/Execution.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp"
#include "fUML/Semantics/StructuredClassifiers/Reference.hpp"
#include "uml/Behavior.hpp"
#include "uml/CallAction.hpp"
#include "uml/InputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/Parameter.hpp"
#include "uml/Property.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "fUML/Semantics/Activities/ActivitiesFactory.hpp"
#include "fUML/Semantics/Actions/ActionsFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "uml/Action.hpp"
#include "fUML/Semantics/Activities/ActivityEdgeInstance.hpp"
#include "uml/ActivityNode.hpp"
#include "fUML/Semantics/Activities/ActivityNodeActivationGroup.hpp"
#include "uml/CallAction.hpp"
#include "fUML/Semantics/CommonBehavior/Execution.hpp"
#include "fUML/Semantics/Actions/InputPinActivation.hpp"
#include "fUML/Semantics/Actions/InvocationActionActivation.hpp"
#include "fUML/Semantics/Actions/OutputPinActivation.hpp"
#include "fUML/Semantics/Actions/PinActivation.hpp"
#include "fUML/Semantics/Activities/Token.hpp"
//Factories and Package includes
#include "fUML/Semantics/SemanticsPackage.hpp"
#include "fUML/fUMLPackage.hpp"
#include "fUML/Semantics/Actions/ActionsPackage.hpp"
#include "fUML/Semantics/Activities/ActivitiesPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace fUML::Semantics::Actions;

//*********************************
// Constructor / Destructor
//*********************************
CallActionActivationImpl::CallActionActivationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

CallActionActivationImpl::~CallActionActivationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete CallActionActivation "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
CallActionActivationImpl::CallActionActivationImpl(std::weak_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> par_group)
:CallActionActivationImpl()
{
	m_group = par_group;
}

CallActionActivationImpl::CallActionActivationImpl(const CallActionActivationImpl & obj): CallActionActivationImpl()
{
	*this = obj;
}

CallActionActivationImpl& CallActionActivationImpl::operator=(const CallActionActivationImpl & obj)
{
	//call overloaded =Operator for each base class
	InvocationActionActivationImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of CallActionActivation 
	 * which is generated by the compiler (as CallActionActivation is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//CallActionActivation::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy CallActionActivation "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_callAction  = obj.getCallAction();
	//Clone references with containment (deep copy)
	//clone reference 'callExecutions'
	const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::Execution>>& callExecutionsList = obj.getCallExecutions();
	if(callExecutionsList)
	{
		m_callExecutions.reset(new Bag<fUML::Semantics::CommonBehavior::Execution>());
		
		
		for(const std::shared_ptr<fUML::Semantics::CommonBehavior::Execution>& callExecutionsindexElem: *callExecutionsList) 
		{
			const std::shared_ptr<fUML::Semantics::CommonBehavior::Execution>& temp = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::Execution>((callExecutionsindexElem)->copy());
			m_callExecutions->push_back(temp);
		}
	}
	else
	{
		DEBUG_MESSAGE(std::cout << "Warning: container is nullptr callExecutions."<< std::endl;)
	}
	
	return *this;
}

//*********************************
// Operations
//*********************************
void CallActionActivationImpl::doAction()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
		std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> callExecution = this->getCallExecution();

    if (callExecution != nullptr)
    {
        this->getCallExecutions()->push_back(callExecution);

        const std::shared_ptr<uml::CallAction>& callAction = this->getCallAction();
        const std::shared_ptr<Bag<uml::InputPin>>& argumentPins = callAction->getArgument();
        const std::shared_ptr<Subset<fUML::Semantics::Actions::InputPinActivation, fUML::Semantics::Actions::PinActivation>>& inputActivationList=this->getInputPinActivation();

        unsigned int pinNumber = 0;
        //std::shared_ptr<uml::Behavior> beh = callExecution->getBehavior();
        std::shared_ptr<Bag<uml::Parameter>> parameterList = callExecution->getBehavior()->getOwnedParameter();
        unsigned int size = parameterList->size();
        for (unsigned int i=0; i<size; i++)
        {
        	const std::shared_ptr<uml::Parameter>& parameter = parameterList->at(i);
        	uml::ParameterDirectionKind direction=parameter->getDirection();
            if (direction == uml::ParameterDirectionKind::IN || direction == uml::ParameterDirectionKind::INOUT)
            {
            	std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> parameterValue(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createParameterValue());
                parameterValue->setParameter(parameter);
                std::shared_ptr<Bag<fUML::Semantics::Values::Value>> values = parameterValue->getValues();

                // get corresponding pin (pin and parameter list should be synchronized)
                const std::shared_ptr<uml::InputPin>& correspondingInputpin = argumentPins->at(i);
                std::string pinName = correspondingInputpin->getName();

                // if pin name starts with 'self', get values from context attribute
                if (pinName.find("self.") == 0)
                {
                	std::string attributeName = pinName.substr (5, std::string::npos);
					DEBUG_MESSAGE(std::cout << "change context to " << attributeName << std::endl;)

                	std::shared_ptr<fUML::Semantics::StructuredClassifiers::Object> context = getExecutionContext();

					std::shared_ptr<uml::Property> attribute = nullptr;
					std::shared_ptr<Bag<uml::Classifier>> contextTypes = context->getTypes();
					Bag<uml::Classifier>::iterator contextTypesIter = contextTypes->begin();
					Bag<uml::Classifier>::iterator contextTypesEnd = contextTypes->end();

					while (attribute == nullptr || contextTypesIter < contextTypesEnd)
					{
						std::shared_ptr<uml::Classifier> classifier = *contextTypesIter;
						contextTypesIter++;

						std::shared_ptr<Bag<uml::Property>> attributes = classifier->getAllAttributes();
						Bag<uml::Property>::iterator attributeIter = attributes->begin();
						Bag<uml::Property>::iterator attributeEnd = attributes->end();
						while (attribute == nullptr || attributeIter < attributeEnd)
						{
							if ((*attributeIter)->getName() == attributeName)
							{
								attribute = *attributeIter;
							}
							attributeIter++;
						}
					}

					if(nullptr == attribute)
					{
						std::cerr << "Could not find the attribute in the current context for the input pin " << pinName << std::endl;
						exit(EXIT_FAILURE);
					}

					DEBUG_MESSAGE(std::cout << "Self attribute found for target pin" <<std::endl;)

					if (context != nullptr)
					{
						std::shared_ptr<Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>> featureValues(new Bag<fUML::Semantics::SimpleClassifiers::FeatureValue>());
						std::shared_ptr<Bag<fUML::Semantics::Values::Value>> attributeValues = context->getValues(attribute, featureValues);
						values->insert(values->end(), attributeValues->begin(), attributeValues->end());
					}
                }
                // if pin name starts with 'self', use context as value
                else if (pinName.find("self") == 0)
				{
					std::shared_ptr<fUML::Semantics::StructuredClassifiers::Object> context = getExecutionContext();

					std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> contextReference = fUML::Semantics::StructuredClassifiers::StructuredClassifiersFactory::eInstance()->createReference();
					contextReference->setReferent(context);
					values->push_back(contextReference);
				}
                else
                {
					std::shared_ptr<fUML::Semantics::Actions::InputPinActivation> activation =inputActivationList->at(pinNumber);
					std::shared_ptr<Bag<fUML::Semantics::Activities::Token>> tokenList = activation->takeUnofferedTokens();
					for(const std::shared_ptr<fUML::Semantics::Activities::Token>& token : *tokenList)
					{
						const std::shared_ptr<fUML::Semantics::Values::Value>& value = token->getValue();
						if(value != nullptr)
						{
							DEBUG_MESSAGE(std::cout<<"ActionActivation - takeTokens value"<<value->toString()<<std::endl;)
							values->push_back(value);
						}
					}
                }

                callExecution->setParameterValue(parameterValue);
                pinNumber++;
            }
        }

        callExecution->execute();


        const std::shared_ptr<Bag<uml::OutputPin>>& resultPins = callAction->getResult();
        std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> outputParameterValues = callExecution->getOutputParameterValues();
        const std::shared_ptr<Subset<fUML::Semantics::Actions::OutputPinActivation, fUML::Semantics::Actions::PinActivation>>& outputActivationList=this->getOutputPinActivation();
        pinNumber = 0;
        parameterList = callExecution->getBehavior()->getOwnedParameter();
        for (const std::shared_ptr<uml::Parameter>& parameter : *parameterList)
        {
            if (!(parameter->getDirection() == uml::ParameterDirectionKind::IN))
            {
                for (const std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue>& outputParameterValue : *outputParameterValues)
                {
                    if (outputParameterValue->getParameter() == parameter)
                    {
    					const std::shared_ptr<fUML::Semantics::Actions::OutputPinActivation>& resultPinActivation = outputActivationList->at(pinNumber);
        				const std::shared_ptr<Bag<fUML::Semantics::Values::Value>>& values = outputParameterValue->getValues();

        				for (const std::shared_ptr<fUML::Semantics::Values::Value>& value : *values)
        			    {
        					DEBUG_MESSAGE(std::cout<<("[putToken] node = " + this->getNode()->getName())<<std::endl;)

        					std::shared_ptr<fUML::Semantics::Activities::ObjectToken> token = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createObjectToken();
        					token->setValue(value);

        					resultPinActivation->addToken(token);
        					ACT_DEBUG(std::cout<<"SET_TOKEN;NODE:"<< resultPinActivation->getNode()->getQualifiedName() <<";TOKEN:"<<token->getValue() << ";CURRENT_TOKENS:"<< (this->getHeldTokens()->size()+1) <<";DIRECTION:add"<<std::endl;)
        			    }
            			pinNumber++;
        				break;
        			}
        		}
            }
        }

        callExecution->destroy();
        this->removeCallExecution(callExecution);
    }
	//end of body
}

std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> CallActionActivationImpl::getCallExecution()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    //TODO verify!
    return this->m_callExecutions->front();
	//end of body
}

void CallActionActivationImpl::removeCallExecution(const std::shared_ptr<fUML::Semantics::CommonBehavior::Execution>& execution)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    bool notFound = true;
    unsigned int i = 0;
    while (notFound && (i < this->getCallExecutions()->size())) {
        if (this->getCallExecutions()->at(i) == execution) {
            this->getCallExecutions()->erase(this->getCallExecutions()->begin() + i);
            notFound = false;
        }
    }
	//end of body
}

void CallActionActivationImpl::terminate()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::Execution>>& executionList = this->getCallExecutions();
	for (const std::shared_ptr<fUML::Semantics::CommonBehavior::Execution>&  execution: *executionList)
    {
        execution->terminate();
    }

    fUML::Semantics::Actions::InvocationActionActivationImpl::terminate();
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference callAction */
const std::shared_ptr<uml::CallAction>& CallActionActivationImpl::getCallAction() const
{
    return m_callAction;
}
void CallActionActivationImpl::setCallAction(const std::shared_ptr<uml::CallAction>& _callAction)
{
    m_callAction = _callAction;
	//additional setter call for redefined reference ActionActivation::action
	fUML::Semantics::Actions::ActionActivationImpl::setAction(_callAction);
}
/*Additional Setter for redefined reference 'ActionActivation::action'*/
void CallActionActivationImpl::setAction(const std::shared_ptr<uml::Action>& _action)
{
	std::shared_ptr<uml::CallAction> _callAction = std::dynamic_pointer_cast<uml::CallAction>(_action);
	if(_callAction)
	{
		m_callAction = _callAction;

		//additional setter call for redefined reference ActionActivation::action
		fUML::Semantics::Actions::ActionActivationImpl::setAction(_callAction);
	}
	else
	{
		std::cerr<<"[CallActionActivation::setAction] : Could not set action because provided action was not of type 'std::shared_ptr<uml::CallAction>'"<<std::endl;
	}
}
/*Additional Setter for redefined reference 'ActivityNodeActivation::node'*/
void CallActionActivationImpl::setNode(const std::shared_ptr<uml::ActivityNode>& _node)
{
	std::shared_ptr<uml::CallAction> _callAction = std::dynamic_pointer_cast<uml::CallAction>(_node);
	if(_callAction)
	{
		m_callAction = _callAction;

		//additional setter call for redefined reference ActionActivation::action
		fUML::Semantics::Actions::ActionActivationImpl::setNode(_node);
	}
	else
	{
		std::cerr<<"[CallActionActivation::setNode] : Could not set node because provided node was not of type 'std::shared_ptr<uml::CallAction>'"<<std::endl;
	}
}

/* Getter & Setter for reference callExecutions */
const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::Execution>>& CallActionActivationImpl::getCallExecutions() const
{
	if(m_callExecutions == nullptr)
	{
		m_callExecutions.reset(new Bag<fUML::Semantics::CommonBehavior::Execution>());
		
		
	}
    return m_callExecutions;
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<fUML::Semantics::Actions::PinActivation>> CallActionActivationImpl::getPinActivation() const
{
	if(m_pinActivation == nullptr)
	{
		/*Union*/
		m_pinActivation.reset(new Union<fUML::Semantics::Actions::PinActivation>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_pinActivation - Union<fUML::Semantics::Actions::PinActivation>()" << std::endl;
		#endif
		
		
	}
	return m_pinActivation;
}

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> CallActionActivationImpl::eContainer() const
{
	if(auto wp = m_group.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void CallActionActivationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get fUMLFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void CallActionActivationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("callAction");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("callAction")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	InvocationActionActivationImpl::loadAttributes(loadHandler, attr_list);
}

void CallActionActivationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("callExecutions") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChildContainer<fUML::Semantics::CommonBehavior::Execution>(this->getCallExecutions());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	InvocationActionActivationImpl::loadNode(nodeName, loadHandler);
}

void CallActionActivationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLACTION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::CallAction> _callAction = std::dynamic_pointer_cast<uml::CallAction>( references.front() );
				setCallAction(_callAction);
			}
			
			return;
		}
	}
	InvocationActionActivationImpl::resolveReferences(featureID, references);
}

void CallActionActivationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	InvocationActionActivationImpl::saveContent(saveHandler);
	
	ActionActivationImpl::saveContent(saveHandler);
	
	fUML::Semantics::Activities::ActivityNodeActivationImpl::saveContent(saveHandler);
	
	fUML::Semantics::Loci::SemanticVisitorImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void CallActionActivationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<fUML::Semantics::Actions::ActionsPackage> package = fUML::Semantics::Actions::ActionsPackage::eInstance();
	// Add references
		saveHandler->addReference(this->getCallAction(), "callAction", getCallAction()->eClass() != uml::umlPackage::eInstance()->getCallAction_Class()); 
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'callExecutions'

		saveHandler->addReferences<fUML::Semantics::CommonBehavior::Execution>("callExecutions", this->getCallExecutions());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& CallActionActivationImpl::eStaticClass() const
{
	return fUML::Semantics::Actions::ActionsPackage::eInstance()->getCallActionActivation_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any CallActionActivationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLACTION:
			return eAny(getCallAction(),uml::umlPackage::CALLACTION_CLASS,false); //1412
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLEXECUTIONS:
			return eAnyBag(getCallExecutions(),fUML::Semantics::CommonBehavior::CommonBehaviorPackage::EXECUTION_CLASS); //1411
	}
	return InvocationActionActivationImpl::eGet(featureID, resolve, coreType);
}

bool CallActionActivationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLACTION:
			return getCallAction() != nullptr; //1412
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLEXECUTIONS:
			return getCallExecutions() != nullptr; //1411
	}
	return InvocationActionActivationImpl::internalEIsSet(featureID);
}

bool CallActionActivationImpl::eSet(int featureID, const Any& newValue)
{
	switch(featureID)
	{
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLACTION:
		{
			// CAST Any to uml::CallAction
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<uml::CallAction> _callAction = std::dynamic_pointer_cast<uml::CallAction>(_temp);
			setCallAction(_callAction); //1412
			return true;
		}
		case fUML::Semantics::Actions::ActionsPackage::CALLACTIONACTIVATION_ATTRIBUTE_CALLEXECUTIONS:
		{
			// CAST Any to Bag<fUML::Semantics::CommonBehavior::Execution>
			if((newValue->isContainer()) && (fUML::Semantics::CommonBehavior::CommonBehaviorPackage::EXECUTION_CLASS ==newValue->getTypeId()))
			{ 
				try
				{
					std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::Execution>> callExecutionsList= newValue->get<std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::Execution>>>();
					const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::Execution>>& _callExecutions=getCallExecutions();
					for(const std::shared_ptr<fUML::Semantics::CommonBehavior::Execution>& indexCallExecutions: *_callExecutions)
					{
						if (!(callExecutionsList->includes(indexCallExecutions)))
						{
							_callExecutions->erase(indexCallExecutions);
						}
					}

					for(const std::shared_ptr<fUML::Semantics::CommonBehavior::Execution>& indexCallExecutions: *callExecutionsList)
					{
						if (!(_callExecutions->includes(indexCallExecutions)))
						{
							_callExecutions->add(indexCallExecutions);
						}
					}
				}
				catch(...)
				{
					DEBUG_MESSAGE(std::cout << "invalid Type to set of eAttributes."<< std::endl;)
					return false;
				}
			}
			else
			{
				return false;
			}
			return true;
		}
	}

	return InvocationActionActivationImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
Any CallActionActivationImpl::eInvoke(int operationID, const std::shared_ptr<std::list<Any>>& arguments)
{
	Any result;
 
  	switch(operationID)
	{
		// fUML::Semantics::Actions::CallActionActivation::doAction(): 3531200850
		case ActionsPackage::CALLACTIONACTIVATION_OPERATION_DOACTION:
		{
			this->doAction();
			break;
		}
		// fUML::Semantics::Actions::CallActionActivation::getCallExecution() : fUML::Semantics::CommonBehavior::Execution: 910408163
		case ActionsPackage::CALLACTIONACTIVATION_OPERATION_GETCALLEXECUTION:
		{
			result = eAnyObject(this->getCallExecution(), fUML::Semantics::CommonBehavior::CommonBehaviorPackage::EXECUTION_CLASS);
			break;
		}
		// fUML::Semantics::Actions::CallActionActivation::removeCallExecution(fUML::Semantics::CommonBehavior::Execution): 3901665011
		case ActionsPackage::CALLACTIONACTIVATION_OPERATION_REMOVECALLEXECUTION_EXECUTION:
		{
			//Retrieve input parameter 'execution'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> incoming_param_execution;
			std::list<Any>::const_iterator incoming_param_execution_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_execution = (*incoming_param_execution_arguments_citer)->get<std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> >();
			this->removeCallExecution(incoming_param_execution);
			break;
		}
		// fUML::Semantics::Actions::CallActionActivation::terminate(): 2819746834
		case ActionsPackage::CALLACTIONACTIVATION_OPERATION_TERMINATE:
		{
			this->terminate();
			break;
		}

		default:
		{
			// call superTypes
			result = InvocationActionActivationImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<fUML::Semantics::Actions::CallActionActivation> CallActionActivationImpl::getThisCallActionActivationPtr() const
{
	return m_thisCallActionActivationPtr.lock();
}
void CallActionActivationImpl::setThisCallActionActivationPtr(std::weak_ptr<fUML::Semantics::Actions::CallActionActivation> thisCallActionActivationPtr)
{
	m_thisCallActionActivationPtr = thisCallActionActivationPtr;
	setThisInvocationActionActivationPtr(thisCallActionActivationPtr);
}


