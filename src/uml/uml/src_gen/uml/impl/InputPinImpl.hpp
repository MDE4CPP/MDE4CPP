//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INPUTPININPUTPINIMPL_HPP
#define UML_INPUTPININPUTPINIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../InputPin.hpp"

#include "uml/impl/PinImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API InputPinImpl : virtual public PinImpl, virtual public InputPin 
	{
		public: 
			InputPinImpl(const InputPinImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			InputPinImpl& operator=(InputPinImpl const&); 

		protected:
			friend class umlFactoryImpl;
			InputPinImpl();
			virtual std::shared_ptr<uml::InputPin> getThisInputPinPtr() const;
			virtual void setThisInputPinPtr(std::weak_ptr<uml::InputPin> thisInputPinPtr);

			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::Action> par_action);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::Activity> par_activity);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::AddStructuralFeatureValueAction> par_addStructuralFeatureValueAction);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::CallOperationAction> par_callOperationAction);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::DestroyObjectAction> par_destroyObjectAction);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::StructuredActivityNode> par_inStructuredNode);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::InvocationAction> par_invocationAction);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::RemoveStructuralFeatureValueAction> par_removeStructuralFeatureValueAction);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::StructuralFeatureAction> par_structuralFeatureAction);
			//Additional constructors for the containments back reference
			InputPinImpl(std::weak_ptr<uml::WriteStructuralFeatureAction> par_writeStructuralFeatureAction);

		public:
			//destructor
			virtual ~InputPinImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::weak_ptr<uml::Action> getAction() const ;
			virtual std::weak_ptr<uml::AddStructuralFeatureValueAction> getAddStructuralFeatureValueAction() const ;
			virtual void setAddStructuralFeatureValueAction(std::weak_ptr<uml::AddStructuralFeatureValueAction>) ;
			virtual std::weak_ptr<uml::CallOperationAction> getCallOperationAction() const ;
			virtual void setCallOperationAction(std::weak_ptr<uml::CallOperationAction>) ;
			virtual std::weak_ptr<uml::DestroyObjectAction> getDestroyObjectAction() const ;
			virtual void setDestroyObjectAction(std::weak_ptr<uml::DestroyObjectAction>) ;
			virtual std::weak_ptr<uml::InvocationAction> getInvocationAction() const ;
			virtual void setInvocationAction(std::weak_ptr<uml::InvocationAction>) ;
			virtual std::weak_ptr<uml::RemoveStructuralFeatureValueAction> getRemoveStructuralFeatureValueAction() const ;
			virtual void setRemoveStructuralFeatureValueAction(std::weak_ptr<uml::RemoveStructuralFeatureValueAction>) ;
			virtual std::weak_ptr<uml::StructuralFeatureAction> getStructuralFeatureAction() const ;
			virtual void setStructuralFeatureAction(std::weak_ptr<uml::StructuralFeatureAction>) ;
			virtual std::weak_ptr<uml::WriteStructuralFeatureAction> getWriteStructuralFeatureAction() const ;
			virtual void setWriteStructuralFeatureAction(std::weak_ptr<uml::WriteStructuralFeatureAction>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::InputPin> m_thisInputPinPtr;
	};
}
#endif /* end of include guard: UML_INPUTPININPUTPINIMPL_HPP */
