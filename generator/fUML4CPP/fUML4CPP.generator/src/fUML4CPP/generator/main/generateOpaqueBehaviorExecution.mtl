[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateOpaqueBehaviorExecution('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::collectionHelper /]

[template public generateOpaqueBehaviorExecutionName(opaqueBehavior : OpaqueBehavior)]
[opaqueBehavior.name.sanitize().toUpperFirst().concat('Execution')/]
[/template]

[template public generateCallOperationActionClearing(aCallOperationAction : CallOperationAction)]
[aCallOperationAction.operation->asOrderedSet()->first().generatePackageGetterCall()/]->getMethod()->erase([aCallOperationAction.getFBPackageElement()/]);
[/template]

[template public generateInclude(anActivity : Activity)]
[if (not anActivity.name.oclIsUndefined())]
#include "[anActivity.getNearestPackage().generateNamespacePath()/]Exec/[anActivity.name.toUpperFirst()/]Execution.hpp"
[/if]
[/template]

[template public generateInclude(aCallBehaviorAction : CallBehaviorAction)]
[if (not aCallBehaviorAction.behavior.oclIsUndefined())]
[if (not aCallBehaviorAction.behavior.name.oclIsUndefined())]
#include "[aCallBehaviorAction.behavior.getNearestPackage().generateNamespacePath()/]Exec/[aCallBehaviorAction.behavior.oclAsType(OpaqueBehavior).generateOpaqueBehaviorExecutionName()/].hpp"
[/if]
[/if]
[/template]

[template public generateInclude(aCallOperationAction : CallOperationAction)]
[if (not aCallOperationAction.oclIsUndefined())]
[if (not aCallOperationAction.name.oclIsUndefined())]
#include "[aCallOperationAction.operation.getNearestPackage().generateNamespacePath()/]Exec/[aCallOperationAction.generateOperationExecutionName()/].hpp"
[/if]
[/if]
[/template]

[template public generateOperationExecutionName(aNamedElement : NamedElement) ? (aNamedElement.oclIsKindOf(CallOperationAction))]
[aNamedElement.oclAsType(CallOperationAction).name.sanitize().toUpperFirst().concat('Execution')/]
[/template] 

[template public generateInclude(aDecisionNode : DecisionNode)]
[if (not aDecisionNode.decisionInput.oclIsUndefined())]
[if (not aDecisionNode.decisionInput.name.oclIsUndefined())]
#include "[aDecisionNode.decisionInput.getNearestPackage().generateNamespacePath()/]Exec/[aDecisionNode.decisionInput.oclAsType(OpaqueBehavior).generateOpaqueBehaviorExecutionName()/].hpp"
[/if]
[/if]
[/template]

[query public getPackageOpaqueBehaviors(aPackage : Package) : OrderedSet(OpaqueBehavior) = aPackage.getElementsBelongingToPackage()->filter(OpaqueBehavior)->sortedBy(name)/]

[query public getFBPackageElement(aCOA : CallOperationAction) : String = 'ob_'.concat(aCOA.owner.oclAsType(NamedElement).name.replaceAll(' ', '')).concat('_').concat(aCOA.myName().sanitize())/]

[query public getDecisionNodesWithOB(aPackage : Package) : OrderedSet(DecisionNode) = OrderedSet{
		aPackage.getElementsBelongingToPackage()->filter(Activity).getDecisionNodesWithOB()
	}->flatten()->reject(decisionInput.oclIsUndefined())->select(decisionInput.oclIsKindOf(OpaqueBehavior))->sortedBy(name)
 /]

[query public getDecisionNodesWithOB(anActivity : Activity) : OrderedSet(DecisionNode) = OrderedSet{
		anActivity.allOwnedElements()->selectByKind(DecisionNode),
		anActivity.allOwnedElements()->filter(CallBehaviorAction).behavior->selectByKind(Activity)->reject(oclIsUndefined()).getDecisionNodesWithOB()
	}->flatten()->reject(decisionInput.oclIsUndefined())->select(node : DecisionNode | node.decisionInput.oclIsKindOf(OpaqueBehavior))->sortedBy(name)
/]

[query public getCallBehaviorActionsWithOB(aPackage : Package) : OrderedSet(CallBehaviorAction) = OrderedSet{
		aPackage.getElementsBelongingToPackage()->selectByKind(Activity).getCallBehaviorActionsWithOB(),
		aPackage.getElementsBelongingToPackage()->selectByKind(Activity).allOwnedElements()->selectByKind(ExpansionRegion).node->filter(CallBehaviorAction),
		aPackage.getElementsBelongingToPackage()->selectByKind(Activity).allOwnedElements()->filter(CallBehaviorAction).behavior->selectByKind(Activity)->reject(oclIsUndefined()).getCallBehaviorActionsWithOB()
	}->flatten()->reject(behavior.oclIsUndefined())->select(behavior.oclIsKindOf(OpaqueBehavior))->sortedBy(name)
/]

[query public getCallBehaviorActionsWithOB(anActivity : Activity) : OrderedSet(CallBehaviorAction) = OrderedSet{
		anActivity.allOwnedElements()->filter(CallBehaviorAction),
		anActivity.allOwnedElements()->filter(CallBehaviorAction).behavior->selectByKind(Activity)->reject(oclIsUndefined()).getCallBehaviorActionsWithOB()
	}->flatten()->reject(behavior.oclIsUndefined())->select(behavior.oclIsKindOf(OpaqueBehavior))->sortedBy(name)
/]

[query public getCallOperationActions(aPackage : Package) : OrderedSet(CallOperationAction) = OrderedSet{
		aPackage.allOwnedElements()->selectByKind(Activity).ownedNode->filter(CallOperationAction),
		aPackage.allOwnedElements()->selectByKind(ExpansionRegion).node->filter(CallOperationAction),
		aPackage.allOwnedElements()->filter(CallBehaviorAction).behavior->selectByKind(Activity)->reject(oclIsUndefined()).getCallOperationActions()
	}->flatten()->sortedBy(name)
/]

[query public getCallOperationActions(anActivity : Activity) : OrderedSet(CallOperationAction) = OrderedSet{
		anActivity.allOwnedElements()->filter(CallOperationAction),
		anActivity.allOwnedElements()->filter(CallBehaviorAction).behavior->selectByKind(Activity)->reject(oclIsUndefined()).getCallOperationActions()
	}->flatten()->sortedBy(name)
/]