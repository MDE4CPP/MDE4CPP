//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef TYPESFACTORYIMPL_HPP
#define TYPESFACTORYIMPL_HPP

// namespace macro header include
#include "types/types.hpp"

#include "ecore/impl/EFactoryImpl.hpp"

#include "types/typesFactory.hpp"

namespace types 
{	class typesPluginImpl;
}

namespace types 
{
	class TYPES_API typesFactoryImpl : virtual public ecore::EFactoryImpl , virtual public typesFactory 
	{
		private:    
			typesFactoryImpl(typesFactoryImpl const&) = delete;
			typesFactoryImpl& operator=(typesFactoryImpl const&) = delete;

		protected:
			friend class typesPluginImpl;  
			// Constructor
			typesFactoryImpl();

		public:
			virtual ~typesFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			 

		private:
			static typesFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: TYPESFACTORYIMPL_HPP */
