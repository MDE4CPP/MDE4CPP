
#include "PSSM/Semantics/StateMachines/impl/DoActivityContextObjectImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/Subset.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Includes from codegen annotation
#include "fUML/MDE4CPP_Extensions/impl/FUML_ObjectImpl.hpp"
#include "PSSM/Semantics/CommonBehavior/SM_ObjectActivation.hpp"
#include "PSSM/Semantics/StateMachines/DeferredEventOccurrence.hpp"
#include "PSSM/Semantics/StateMachines/DoActivityExecutionEventAccepter.hpp"
#include "PSSM/Semantics/StateMachines/DoActivityContextObjectActivation.hpp"
#include "PSSM/Semantics/StateMachines/StateActivation.hpp"
#include "uml/Element.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "ecore/ecoreFactory.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/Semantics/Loci/LociFactory.hpp"
#include "uml/Class.hpp"
#include "uml/Comment.hpp"
#include "ecore/EAnnotation.hpp"
#include "uml/Element.hpp"
#include "fUML/Semantics/CommonBehavior/EventAccepter.hpp"
#include "fUML/Semantics/CommonBehavior/EventOccurrence.hpp"
#include "fUML/Semantics/CommonBehavior/Execution.hpp"
#include "fUML/MDE4CPP_Extensions/FUML_Object.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/CommonBehavior/ObjectActivation.hpp"
#include "uml/Operation.hpp"
#include "PSSM/MDE4CPP_Extensions/PSSM_Object.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "uml/StructuralFeature.hpp"
//Factories and Package includes
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "PSSM/PSSMPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "fUML/Semantics/Loci/LociPackage.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsPackage.hpp"
#include "PSSM/MDE4CPP_Extensions/MDE4CPP_ExtensionsPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"
#include "ecore/ecorePackage.hpp"
#include "uml/umlPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
DoActivityContextObjectImpl::DoActivityContextObjectImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

DoActivityContextObjectImpl::~DoActivityContextObjectImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete DoActivityContextObject "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


DoActivityContextObjectImpl::DoActivityContextObjectImpl(const DoActivityContextObjectImpl & obj): DoActivityContextObjectImpl()
{
	*this = obj;
}

DoActivityContextObjectImpl& DoActivityContextObjectImpl::operator=(const DoActivityContextObjectImpl & obj)
{
	//call overloaded =Operator for each base class
	PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of DoActivityContextObject 
	 * which is generated by the compiler (as DoActivityContextObject is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//DoActivityContextObject::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy DoActivityContextObject "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_context  = obj.getContext();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> DoActivityContextObjectImpl::copy() const
{
	std::shared_ptr<DoActivityContextObjectImpl> element(new DoActivityContextObjectImpl());
	*element =(*this);
	element->setThisDoActivityContextObjectPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
void DoActivityContextObjectImpl::_register(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& accepter)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// When the executing doActivity registers an Accepter with this DoActivityContextObject's Activation,
	// it searches through the deferred Event Pool of the ObjectActivation associated to the StateMachine context.
	// 1. If the Accepter being registered matches one of the deferred Events, then this Event is
	//    transferred into the Event Pool of the doActivity ObjectActivation. This implies the
	//    Event will be dispatched in a RTC step performed by the doActivity ObjectActivation. 
	// 2. If the Accepter being registered does not match one of the deferred Events, then this latter
	//    is wrapped in a DoActivityExecutionEventAccepter which is registered with the State Machine context ObjectActivation.
	//    This is realized in order to guarantee that the doActivity will have a chance to match an Event
	//    received by the StateMachine context object.
	fUML::MDE4CPP_Extensions::FUML_ObjectImpl::FUML_ObjectImpl::_register(accepter);
	const auto& contextObjectActivation = std::dynamic_pointer_cast<PSSM::Semantics::CommonBehavior::SM_ObjectActivation>(this->m_context->getObjectActivation());

	auto matchedDeferredEventOccurrence = PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createDeferredEventOccurrence();
	for (const auto& eventOccurrence : *(contextObjectActivation->getDeferredEventPool()))
	{
		auto owner = std::shared_ptr<uml::Element> (this->getOwner());
		if (owner == std::dynamic_pointer_cast<uml::Element>(eventOccurrence->getConstrainingStateActivation()) && accepter->match(eventOccurrence->getDeferredEventOccurrence()))
		{
			matchedDeferredEventOccurrence = eventOccurrence;
			break;
		}
	}

	if (matchedDeferredEventOccurrence == nullptr)
	{
		auto encapsulatingAccepter = PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createDoActivityExecutionEventAccepter();
		encapsulatingAccepter->setEncapsulatedAccepter(accepter);
		encapsulatingAccepter->setContext(this->getThisDoActivityContextObjectPtr());
		this->m_context->_register(encapsulatingAccepter);
	}
	else
	{
		contextObjectActivation->getDeferredEventPool()->erase(matchedDeferredEventOccurrence);
		this->m_objectActivation->getEventPool()->add(matchedDeferredEventOccurrence->getDeferredEventOccurrence());
	}
	//end of body
}

void DoActivityContextObjectImpl::destroy()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// When a DoActivityContextObject ist destroyed, it must remove all encapsulating DoActivityExecutionEventAccepters
	// it has registered from the context's ObjectActivation in addition to the regular destruction behavior.
	for (const auto& waitingEventAccepter : *this->m_objectActivation->getWaitingEventAccepters())
	{
		this->unregisterFromContext(waitingEventAccepter);
	}
	fUML::MDE4CPP_Extensions::FUML_ObjectImpl::FUML_ObjectImpl::destroy();
	//end of body
}





void DoActivityContextObjectImpl::initialize(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& context)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// The context Object of this DoActivityContextObject is the context
	// of the State Machine which has invoked the doActivity
	if (context != nullptr)
	{
		this->m_context = context;
	}

	//end of body
}

void DoActivityContextObjectImpl::send(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Delegate the sending of an EventOccurrence to the StateMachine context
	if (this->m_context != nullptr)
	{
		this->m_context->send(eventOccurrence);
	}
	//end of body
}



void DoActivityContextObjectImpl::startBehavior(const std::shared_ptr<uml::Class>& classifier, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>& inputs)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Starts the Behavior of a DoActivityContextObject. It behaves the
	// same as in fUML except that its Object is associated to a DoActivityContextObjectActivation
	// as a specific type of ObjectActivation
	if (this->m_objectActivation == nullptr)
	{
		this->setObjectActivation(PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createDoActivityContextObjectActivation());
		this->m_objectActivation->setObject(this->getThisFUML_ObjectPtr());
	}
	this->m_objectActivation->startBehavior(classifier, inputs);
	//end of body
}

void DoActivityContextObjectImpl::unregister(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& accepter)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Unregistering an EventAccepter from a DoActivityContextObject includes 
	// - unregistering its encapsulating DoActivityExecutionEventAccepter from the Event Pool of the contex's ObjectActivation of this Object if given
	// - unregistering the EventAccepter from the Event Pool of this Object's Activation
	this->unregisterFromContext(accepter);
	fUML::MDE4CPP_Extensions::FUML_ObjectImpl::FUML_ObjectImpl::unregister(accepter);
	//end of body
}

void DoActivityContextObjectImpl::unregisterFromContext(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& encapsulatedAccepter)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Unregister the encapsulating DoActivityExecutionEventAccepter in the contex's ObjectActivation if given.
	if (const auto& contextObjectActivation = this->m_context->getObjectActivation())
	{
		auto encapsulatingAccepter = PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createDoActivityExecutionEventAccepter();
		for (const auto& waitingAccepter : *contextObjectActivation->getWaitingEventAccepters())
		{
			if (auto waitingDoActExeEvAcc = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::DoActivityExecutionEventAccepter>(waitingAccepter))
			{
				if (waitingDoActExeEvAcc->getEncapsulatedAccepter() == encapsulatedAccepter)
				{
					encapsulatingAccepter = waitingDoActExeEvAcc;
					break;
				}
			}
		}

		if (encapsulatingAccepter != nullptr)
		{
			contextObjectActivation->unregister(encapsulatingAccepter);
		}
	}
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference context */
const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& DoActivityContextObjectImpl::getContext() const
{
    return m_context;
}
void DoActivityContextObjectImpl::setContext(const std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object>& _context)
{
    m_context = _context;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> DoActivityContextObjectImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void DoActivityContextObjectImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void DoActivityContextObjectImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("context");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("context")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::loadAttributes(loadHandler, attr_list);
}

void DoActivityContextObjectImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::loadNode(nodeName, loadHandler);
}

void DoActivityContextObjectImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_ATTRIBUTE_CONTEXT:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> _context = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_Object>( references.front() );
				setContext(_context);
			}
			
			return;
		}
	}
	PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::resolveReferences(featureID, references);
}

void DoActivityContextObjectImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::saveContent(saveHandler);
	
	fUML::MDE4CPP_Extensions::FUML_ObjectImpl::saveContent(saveHandler);
	
	uml::ElementImpl::saveContent(saveHandler);
	
	ecore::EModelElementImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void DoActivityContextObjectImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
	// Add references
	if ( this->eIsSet(package->getDoActivityContextObject_Attribute_context()) )
	{
		saveHandler->addReference(this->getContext(), "context", getContext()->eClass() != fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance()->getFUML_Object_Class()); 
	}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& DoActivityContextObjectImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getDoActivityContextObject_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> DoActivityContextObjectImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_ATTRIBUTE_CONTEXT:
			return eAny(getContext(),fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_CLASS,false); //96
	}
	return PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::eGet(featureID, resolve, coreType);
}

bool DoActivityContextObjectImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_ATTRIBUTE_CONTEXT:
			return getContext() != nullptr; //96
	}
	return PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::internalEIsSet(featureID);
}

bool DoActivityContextObjectImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_ATTRIBUTE_CONTEXT:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> _context = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_Object>(eObject);
					if(_context)
					{
						setContext(_context); //96
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'context'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'context'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> DoActivityContextObjectImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::DoActivityContextObject::_register(fUML::Semantics::CommonBehavior::EventAccepter): 3248234953
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION__REGISTER_EVENTACCEPTER:
		{
			//Retrieve input parameter 'accepter'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter> incoming_param_accepter;
			Bag<Any>::const_iterator incoming_param_accepter_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_accepter_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_accepter = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventAccepter>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation '_register'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation '_register'!")
					return nullptr;
				}
			}
		
			this->_register(incoming_param_accepter);
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObject::destroy(): 2307655086
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION_DESTROY:
		{
			this->destroy();
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObject::initialize(fUML::MDE4CPP_Extensions::FUML_Object): 9524128
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION_INITIALIZE_FUML_OBJECT:
		{
			//Retrieve input parameter 'context'
			//parameter 0
			std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> incoming_param_context;
			Bag<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_context_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_context = std::dynamic_pointer_cast<fUML::MDE4CPP_Extensions::FUML_Object>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'context'. Failed to invoke operation 'initialize'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'context'. Failed to invoke operation 'initialize'!")
					return nullptr;
				}
			}
		
			this->initialize(incoming_param_context);
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObject::send(fUML::Semantics::CommonBehavior::EventOccurrence): 1377676493
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION_SEND_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'send'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'send'!")
					return nullptr;
				}
			}
		
			this->send(incoming_param_eventOccurrence);
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObject::startBehavior(uml::Class, fUML::Semantics::CommonBehavior::ParameterValue[*]): 2559364222
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION_STARTBEHAVIOR_CLASS_PARAMETERVALUE:
		{
			//Retrieve input parameter 'classifier'
			//parameter 0
			std::shared_ptr<uml::Class> incoming_param_classifier;
			Bag<Any>::const_iterator incoming_param_classifier_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_classifier_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_classifier = std::dynamic_pointer_cast<uml::Class>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'classifier'. Failed to invoke operation 'startBehavior'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'classifier'. Failed to invoke operation 'startBehavior'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'inputs'
			//parameter 1
			std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> incoming_param_inputs;
			Bag<Any>::const_iterator incoming_param_inputs_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>((*incoming_param_inputs_arguments_citer));
				if(ecoreContainerAny)
				{
					try
					{
						std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
				
						if(eObjectList)
						{
							incoming_param_inputs.reset();
							for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
							{
								std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> _temp = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::ParameterValue>(anEObject);
								incoming_param_inputs->add(_temp);
							}
						}
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreContainerAny' for parameter 'inputs'. Failed to invoke operation 'startBehavior'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreContainerAny' for parameter 'inputs'. Failed to invoke operation 'startBehavior'!")
					return nullptr;
				}
			}
		
			this->startBehavior(incoming_param_classifier,incoming_param_inputs);
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObject::unregister(fUML::Semantics::CommonBehavior::EventAccepter): 3687530305
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION_UNREGISTER_EVENTACCEPTER:
		{
			//Retrieve input parameter 'accepter'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter> incoming_param_accepter;
			Bag<Any>::const_iterator incoming_param_accepter_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_accepter_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_accepter = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventAccepter>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation 'unregister'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation 'unregister'!")
					return nullptr;
				}
			}
		
			this->unregister(incoming_param_accepter);
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObject::unregisterFromContext(fUML::Semantics::CommonBehavior::EventAccepter): 3626524662
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECT_OPERATION_UNREGISTERFROMCONTEXT_EVENTACCEPTER:
		{
			//Retrieve input parameter 'encapsulatedAccepter'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter> incoming_param_encapsulatedAccepter;
			Bag<Any>::const_iterator incoming_param_encapsulatedAccepter_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_encapsulatedAccepter_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_encapsulatedAccepter = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventAccepter>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'encapsulatedAccepter'. Failed to invoke operation 'unregisterFromContext'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'encapsulatedAccepter'. Failed to invoke operation 'unregisterFromContext'!")
					return nullptr;
				}
			}
		
			this->unregisterFromContext(incoming_param_encapsulatedAccepter);
			break;
		}

		default:
		{
			// call superTypes
			result = PSSM::MDE4CPP_Extensions::PSSM_ObjectImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject> DoActivityContextObjectImpl::getThisDoActivityContextObjectPtr() const
{
	return m_thisDoActivityContextObjectPtr.lock();
}
void DoActivityContextObjectImpl::setThisDoActivityContextObjectPtr(std::weak_ptr<PSSM::Semantics::StateMachines::DoActivityContextObject> thisDoActivityContextObjectPtr)
{
	m_thisDoActivityContextObjectPtr = thisDoActivityContextObjectPtr;
	setThisPSSM_ObjectPtr(thisDoActivityContextObjectPtr);
}


