//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_USECASEUSECASEIMPL_HPP
#define UML_USECASEUSECASEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../UseCase.hpp"

#include "uml/impl/BehavioredClassifierImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API UseCaseImpl : virtual public BehavioredClassifierImpl, virtual public UseCase 
	{
		public: 
			UseCaseImpl(const UseCaseImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			UseCaseImpl& operator=(UseCaseImpl const&); 

		protected:
			friend class umlFactoryImpl;
			UseCaseImpl();
			virtual std::shared_ptr<uml::UseCase> getThisUseCasePtr() const;
			virtual void setThisUseCasePtr(std::weak_ptr<uml::UseCase> thisUseCasePtr);

			//Additional constructors for the containments back reference
			UseCaseImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			UseCaseImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			UseCaseImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id);
			//Additional constructors for the containments back reference
			UseCaseImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);
			//Additional constructors for the containments back reference

		public:
			//destructor
			virtual ~UseCaseImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase.
			result = (self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet())
			<p>From package UML::UseCases.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::UseCase>> allIncludedUseCases() ;
			/*!
			UseCases can only be involved in binary Associations.
			Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)
			*/
			 
			virtual bool binary_associations(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			/*!
			A UseCase cannot include UseCases that directly or indirectly include it.
			not allIncludedUseCases()->includes(self)
			*/
			 
			virtual bool cannot_include_self(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			/*!
			A UseCase must have a name.
			name -> notEmpty ()
			*/
			 
			virtual bool must_have_name(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			/*!
			UseCases cannot have Associations to UseCases specifying the same subject.
			Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies 
			   (
			   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in
			   usecases->size() > 1 implies usecases->collect(subject)->size() > 1
			   )
			)
			*/
			 
			virtual bool no_association_to_use_case(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The Extend relationships owned by this UseCase.
			<p>From package UML::UseCases.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Extend, uml::NamedElement>> getExtend() const ;
			/*!
			The ExtensionPoints owned by this UseCase.
			<p>From package UML::UseCases.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::ExtensionPoint, uml::NamedElement>> getExtensionPoint() const ;
			/*!
			The Include relationships owned by this UseCase.
			<p>From package UML::UseCases.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Include, uml::NamedElement>> getInclude() const ;
			/*!
			The subjects to which this UseCase applies. Each subject or its parts realize all the UseCases that apply to it.
			<p>From package UML::UseCases.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Classifier>> getSubject() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::UseCase> m_thisUseCasePtr;
	};
}
#endif /* end of include guard: UML_USECASEUSECASEIMPL_HPP */
