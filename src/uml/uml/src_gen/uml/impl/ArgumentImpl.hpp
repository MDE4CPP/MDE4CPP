//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ARGUMENTARGUMENTIMPL_HPP
#define UML_ARGUMENTARGUMENTIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Argument.hpp"


#include "ecore/impl/EModelElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ArgumentImpl : virtual public ecore::EModelElementImpl,
virtual public Argument 
	{
		public: 
			ArgumentImpl(const ArgumentImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ArgumentImpl& operator=(ArgumentImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ArgumentImpl();
			virtual std::shared_ptr<uml::Argument> getThisArgumentPtr() const;
			virtual void setThisArgumentPtr(std::weak_ptr<uml::Argument> thisArgumentPtr);


		public:
			//destructor
			virtual ~ArgumentImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual std::string getName() const ;
			virtual void setName (std::string _name);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::shared_ptr<uml::Object> getValue() const ;
			virtual void setValue(std::shared_ptr<uml::Object>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::Argument> m_thisArgumentPtr;
	};
}
#endif /* end of include guard: UML_ARGUMENTARGUMENTIMPL_HPP */
