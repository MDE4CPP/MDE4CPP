//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CLEARSTRUCTURALFEATUREACTIONCLEARSTRUCTURALFEATUREACTIONIMPL_HPP
#define UML_CLEARSTRUCTURALFEATUREACTIONCLEARSTRUCTURALFEATUREACTIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../ClearStructuralFeatureAction.hpp"

#include "uml/impl/StructuralFeatureActionImpl.hpp"

//*********************************
namespace uml 
{
	class ClearStructuralFeatureActionImpl :virtual public StructuralFeatureActionImpl, virtual public ClearStructuralFeatureAction 
	{
		public: 
			ClearStructuralFeatureActionImpl(const ClearStructuralFeatureActionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			ClearStructuralFeatureActionImpl& operator=(ClearStructuralFeatureActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ClearStructuralFeatureActionImpl();
			virtual std::shared_ptr<ClearStructuralFeatureAction> getThisClearStructuralFeatureActionPtr() const;
			virtual void setThisClearStructuralFeatureActionPtr(std::weak_ptr<ClearStructuralFeatureAction> thisClearStructuralFeatureActionPtr);

			//Additional constructors for the containments back reference
			ClearStructuralFeatureActionImpl(std::weak_ptr<uml::Activity > par_activity);


			//Additional constructors for the containments back reference
			ClearStructuralFeatureActionImpl(std::weak_ptr<uml::StructuredActivityNode > par_inStructuredNode);


			//Additional constructors for the containments back reference
			ClearStructuralFeatureActionImpl(std::weak_ptr<uml::Namespace > par_namespace);


			//Additional constructors for the containments back reference
			ClearStructuralFeatureActionImpl(std::weak_ptr<uml::Element > par_owner);




		public:
			//destructor
			virtual ~ClearStructuralFeatureActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The multiplicity of the result OutputPin must be 1..1.
			result<>null implies result.is(1,1) */ 
			virtual bool multiplicity_of_result(Any diagnostics,std::map <   Any, Any >  context) ;
			
			/*!
			 The type of the result OutputPin is the same as the type of the inherited object InputPin.
			result<>null implies result.type = object.type */ 
			virtual bool type_of_result(Any diagnostics,std::map <   Any, Any >  context) ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The OutputPin on which is put the input object as modified by the ClearStructuralFeatureAction.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<uml::OutputPin > getResult() const ;
			
			/*!
			 The OutputPin on which is put the input object as modified by the ClearStructuralFeatureAction.
			<p>From package UML::Actions.</p> */
			virtual void setResult(std::shared_ptr<uml::OutputPin> _result_result) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<Union<uml::ActivityGroup>> getInGroup() const ;/*!
			 The ordered set of InputPins representing the inputs to the Action.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<SubsetUnion<uml::InputPin, uml::Element>> getInput() const ;/*!
			 The ordered set of OutputPins representing outputs from the Action.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<SubsetUnion<uml::OutputPin, uml::Element>> getOutput() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<Union<uml::Element>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Element > getOwner() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<Union<uml::RedefinableElement>> getRedefinedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<ClearStructuralFeatureAction> m_thisClearStructuralFeatureActionPtr;
	};
}
#endif /* end of include guard: UML_CLEARSTRUCTURALFEATUREACTIONCLEARSTRUCTURALFEATUREACTIONIMPL_HPP */
