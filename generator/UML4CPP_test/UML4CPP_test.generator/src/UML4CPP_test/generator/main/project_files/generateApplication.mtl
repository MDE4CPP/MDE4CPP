[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of application files
 * 
 * this includes following files:
 * - main.cpp
 * - CMakeList.txt
 * - build.gradle
 * 
 */]
[module generateApplication('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateApplication( aPackage : Package ) { 
	packageName : String = getPackageName().toUpperFirst(); 
} ]
[file( 'application/main.cpp', false, 'UTF-8' )]

#include <iostream>

#include "cute.h"
#include "ide_listener.h"
#include "xml_listener.h"
#include "cute_runner.h"
#include "helper/TestSuiteMainHelper.hpp"


[for( aClass : Class | aPackage.allOwnedElements()->select( e | e.oclIsKindOf( uml::Class ) )->select( e | not ( e.oclIsKindOf(FunctionBehavior ) or e.oclIsKindOf( Activity ) ) ).oclAsType( uml::Class )->sortedBy( name ) )]
#include "[aClass.ancestors()->filter(Package)->first().getPackageName()/]/[aClass.name.toUpperFirst()/].hpp"
[/for]

bool runSuite( int argc, char const *argv['[]'/] ) {

	bool success = true;	
	cute::xml_file_opener xmlfile( argc, argv );
	cute::xml_listener<cute::ide_listener<>> lis( xmlfile.out );
	cute::runner<cute::xml_listener<cute::ide_listener<cute::null_listener> > > runner = cute::makeRunner( lis, argc, argv );
[for( aClass : Class | aPackage.allOwnedElements()->select( e | e.oclIsKindOf( uml::Class ) )->select( e | not ( e.oclIsKindOf( FunctionBehavior ) or e.oclIsKindOf( Activity ) ) ).oclAsType( uml::Class )->sortedBy( name ) )]
	cute::suite suite_[aClass.name.toUpperFirst()/] = make_suite_[aClass.name.toUpperFirst()/]();
[/for]

[for( aClass : Class | aPackage.allOwnedElements()->select( e | e.oclIsKindOf( uml::Class ) )->select( e | not ( e.oclIsKindOf( FunctionBehavior ) or e.oclIsKindOf( Activity ) ) ).oclAsType( uml::Class )->sortedBy( name ) )]
	success &= runner( suite_[aClass.name.toUpperFirst()/], "[aClass.name.toUpperFirst()/]" );
[/for]

	TestSuiteMainHelper::PrintTestsCountStatistic();

	return success;
}

int main( int argc, char const *argv['[]'/] ) {

    return runSuite( argc, argv ) ? EXIT_SUCCESS : EXIT_FAILURE;
}
[/file]
[/template]





