
#include "PSSM/Semantics/StateMachines/impl/StateMachineConfigurationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "PSSM/Semantics/StateMachines/StateMachinesFactory.hpp"
#include "PSSM/Semantics/StateMachines/StateActivation.hpp"
#include "PSSM/Semantics/StateMachines/StateConfiguration.hpp"
#include "PSSM/Semantics/StateMachines/StateMachineExecution.hpp"
#include "PSSM/Semantics/StateMachines/VertexActivation.hpp"
//Factories and Package includes
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "PSSM/PSSMPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
StateMachineConfigurationImpl::StateMachineConfigurationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

StateMachineConfigurationImpl::~StateMachineConfigurationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete StateMachineConfiguration "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
StateMachineConfigurationImpl::StateMachineConfigurationImpl(std::weak_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> par_execution)
:StateMachineConfigurationImpl()
{
	m_execution = par_execution;
}

StateMachineConfigurationImpl::StateMachineConfigurationImpl(const StateMachineConfigurationImpl & obj): StateMachineConfigurationImpl()
{
	*this = obj;
}

StateMachineConfigurationImpl& StateMachineConfigurationImpl::operator=(const StateMachineConfigurationImpl & obj)
{
	//call overloaded =Operator for each base class
	ecore::EModelElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of StateMachineConfiguration 
	 * which is generated by the compiler (as StateMachineConfiguration is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//StateMachineConfiguration::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy StateMachineConfiguration "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_execution  = obj.getExecution();
	m_rootConfiguration  = obj.getRootConfiguration();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> StateMachineConfigurationImpl::copy() const
{
	std::shared_ptr<StateMachineConfigurationImpl> element(new StateMachineConfigurationImpl());
	*element =(*this);
	element->setThisStateMachineConfigurationPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
bool StateMachineConfigurationImpl::_register(const std::shared_ptr<PSSM::Semantics::StateMachines::StateActivation>& stateActivation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Register the given StateActivation in the Configuration of its StateMachine as a StateConfiguration. This occurs when the StateActivation is entered.
	// If the Configuration does not contain any StateConfigurations yet, the given one is referenced to as the rootConfiguration of the StateConfiguration tree.
	if (this->m_rootConfiguration == nullptr)
	{
		auto rootStateConfig = PSSM::Semantics::StateMachines::StateMachinesFactory::eInstance()->createStateConfiguration();
		rootStateConfig->setVertexActivation(stateActivation);
		rootStateConfig->setLevel(0);
		rootStateConfig->setCompleteConfiguration(this->getThisStateMachineConfigurationPtr());
		this->setRootConfiguration(rootStateConfig);
		return true;
	}
	return this->add(stateActivation);
	//end of body
}

bool StateMachineConfigurationImpl::add(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->m_rootConfiguration->addChild(activation);
	//end of body
}





std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> StateMachineConfigurationImpl::getVertexActivationsAtLevel(int level)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Traverse all StateConfigurations registert in this StateMachineConfiguration and collect those of the given level.
	auto vertexActivationsAtLevel = std::make_shared<Bag<PSSM::Semantics::StateMachines::VertexActivation>>();
	if (this->m_rootConfiguration->getLevel() == level) 
	{
		vertexActivationsAtLevel->add(m_rootConfiguration->getVertexActivation());
	}
	for (const auto& child : *(this->m_rootConfiguration->getChildren()))
	{
		if (child->getLevel() == level)
		{
			vertexActivationsAtLevel->add(child->getVertexActivation());
		}
	}
	return vertexActivationsAtLevel;
	//end of body
}

bool StateMachineConfigurationImpl::isActive(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& activation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// A State registers itself in the StateMachineConfiguration as soon as it becomes active.
	// Therefore, a State can easily be checked for being active by finding it in the Configuration tree.
	bool found = false;
	if (this->m_rootConfiguration->isActive(activation)) return true;
	else
	{
		for (const auto& child : *this->m_rootConfiguration->getChildren())
		{
			found = child->isActive(activation);
			if (found) break;
		}
		return found;
	}
	//end of body
}

bool StateMachineConfigurationImpl::isStable()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool StateMachineConfigurationImpl::remove(const std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation>& vertexActivation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return this->m_rootConfiguration->removeChild(vertexActivation);
	//end of body
}

bool StateMachineConfigurationImpl::unregister(const std::shared_ptr<PSSM::Semantics::StateMachines::StateActivation>& stateActivation)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// Unregister the given StateActivation in the Configuration of its StateMachine as a StateConfiguration. This occurs when the StateActivation is exited.
	// If the last remaining StateConfiguration is to be removed, the reference to it as the rootConfiguration must be reset.
	// If the removal process is successful, all possibly deferred events related to that state activation are released.
	if (this->m_rootConfiguration->getChildren()->empty())
	{
		stateActivation->releaseDeferredEvents();
		this->setRootConfiguration(nullptr);
		return true;
	}
	else
	{
		bool removed = this->remove(stateActivation);
		if (removed) stateActivation->releaseDeferredEvents();
		return removed;
	}
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference execution */
std::weak_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> StateMachineConfigurationImpl::getExecution() const
{
    return m_execution;
}
void StateMachineConfigurationImpl::setExecution(std::weak_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> _execution)
{
    m_execution = _execution;
	
}

/* Getter & Setter for reference rootConfiguration */
const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& StateMachineConfigurationImpl::getRootConfiguration() const
{
    return m_rootConfiguration;
}
void StateMachineConfigurationImpl::setRootConfiguration(const std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration>& _rootConfiguration)
{
    m_rootConfiguration = _rootConfiguration;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> StateMachineConfigurationImpl::eContainer() const
{
	if(auto wp = m_execution.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void StateMachineConfigurationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void StateMachineConfigurationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("rootConfiguration");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("rootConfiguration")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
}

void StateMachineConfigurationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
}

void StateMachineConfigurationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_EXECUTION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> _execution = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineExecution>( references.front() );
				setExecution(_execution);
			}
			
			return;
		}

		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_ROOTCONFIGURATION:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> _rootConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>( references.front() );
				setRootConfiguration(_rootConfiguration);
			}
			
			return;
		}
	}
	ecore::EObjectImpl::resolveReferences(featureID, references);
}

void StateMachineConfigurationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ecore::EObjectImpl::saveContent(saveHandler);
}

void StateMachineConfigurationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
	// Add references
		saveHandler->addReference(this->getRootConfiguration(), "rootConfiguration", getRootConfiguration()->eClass() != PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateConfiguration_Class()); 
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& StateMachineConfigurationImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getStateMachineConfiguration_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> StateMachineConfigurationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_EXECUTION:
		{
			std::shared_ptr<ecore::EObject> returnValue=getExecution().lock();
			return eEcoreAny(returnValue,PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINEEXECUTION_CLASS); //371
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_ROOTCONFIGURATION:
			return eAny(getRootConfiguration(),PSSM::Semantics::StateMachines::StateMachinesPackage::STATECONFIGURATION_CLASS,false); //370
	}
	return ecore::EObjectImpl::eGet(featureID, resolve, coreType);
}

bool StateMachineConfigurationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_EXECUTION:
			return getExecution().lock() != nullptr; //371
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_ROOTCONFIGURATION:
			return getRootConfiguration() != nullptr; //370
	}
	return ecore::EObjectImpl::internalEIsSet(featureID);
}

bool StateMachineConfigurationImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_EXECUTION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineExecution> _execution = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateMachineExecution>(eObject);
					if(_execution)
					{
						setExecution(_execution); //371
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'execution'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'execution'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case PSSM::Semantics::StateMachines::StateMachinesPackage::STATEMACHINECONFIGURATION_ATTRIBUTE_ROOTCONFIGURATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<PSSM::Semantics::StateMachines::StateConfiguration> _rootConfiguration = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateConfiguration>(eObject);
					if(_rootConfiguration)
					{
						setRootConfiguration(_rootConfiguration); //370
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'rootConfiguration'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'rootConfiguration'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ecore::EObjectImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> StateMachineConfigurationImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::_register(PSSM::Semantics::StateMachines::StateActivation) : bool: 3090247554
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION__REGISTER_STATEACTIVATION:
		{
			//Retrieve input parameter 'stateActivation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::StateActivation> incoming_param_stateActivation;
			Bag<Any>::const_iterator incoming_param_stateActivation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_stateActivation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_stateActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'stateActivation'. Failed to invoke operation '_register'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'stateActivation'. Failed to invoke operation '_register'!")
					return nullptr;
				}
			}
		
			result = eAny(this->_register(incoming_param_stateActivation), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::add(PSSM::Semantics::StateMachines::VertexActivation) : bool: 4204021320
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION_ADD_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'add'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'add'!")
					return nullptr;
				}
			}
		
			result = eAny(this->add(incoming_param_activation), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::getVertexActivationsAtLevel(int) : PSSM::Semantics::StateMachines::VertexActivation[*]: 1599922688
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION_GETVERTEXACTIVATIONSATLEVEL_INTEGER:
		{
			//Retrieve input parameter 'level'
			//parameter 0
			int incoming_param_level;
			Bag<Any>::const_iterator incoming_param_level_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_level = (*incoming_param_level_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'level'. Failed to invoke operation 'getVertexActivationsAtLevel'!")
				return nullptr;
			}
		
			std::shared_ptr<Bag<PSSM::Semantics::StateMachines::VertexActivation>> resultList = this->getVertexActivationsAtLevel(incoming_param_level);
			return eEcoreContainerAny(resultList,PSSM::Semantics::StateMachines::StateMachinesPackage::VERTEXACTIVATION_CLASS);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::isActive(PSSM::Semantics::StateMachines::VertexActivation) : bool: 4004681035
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION_ISACTIVE_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'activation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_activation;
			Bag<Any>::const_iterator incoming_param_activation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_activation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_activation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'isActive'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'activation'. Failed to invoke operation 'isActive'!")
					return nullptr;
				}
			}
		
			result = eAny(this->isActive(incoming_param_activation), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::isStable() : bool: 3154968571
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION_ISSTABLE:
		{
			result = eAny(this->isStable(), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::remove(PSSM::Semantics::StateMachines::VertexActivation) : bool: 3971456309
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION_REMOVE_VERTEXACTIVATION:
		{
			//Retrieve input parameter 'vertexActivation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::VertexActivation> incoming_param_vertexActivation;
			Bag<Any>::const_iterator incoming_param_vertexActivation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_vertexActivation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_vertexActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::VertexActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'vertexActivation'. Failed to invoke operation 'remove'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'vertexActivation'. Failed to invoke operation 'remove'!")
					return nullptr;
				}
			}
		
			result = eAny(this->remove(incoming_param_vertexActivation), 0, false);
			break;
		}
		// PSSM::Semantics::StateMachines::StateMachineConfiguration::unregister(PSSM::Semantics::StateMachines::StateActivation) : bool: 1784249558
		case StateMachinesPackage::STATEMACHINECONFIGURATION_OPERATION_UNREGISTER_STATEACTIVATION:
		{
			//Retrieve input parameter 'stateActivation'
			//parameter 0
			std::shared_ptr<PSSM::Semantics::StateMachines::StateActivation> incoming_param_stateActivation;
			Bag<Any>::const_iterator incoming_param_stateActivation_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_stateActivation_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_stateActivation = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateActivation>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'stateActivation'. Failed to invoke operation 'unregister'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'stateActivation'. Failed to invoke operation 'unregister'!")
					return nullptr;
				}
			}
		
			result = eAny(this->unregister(incoming_param_stateActivation), 0, false);
			break;
		}

		default:
		{
			// call superTypes
			result = ecore::EModelElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration> StateMachineConfigurationImpl::getThisStateMachineConfigurationPtr() const
{
	return m_thisStateMachineConfigurationPtr.lock();
}
void StateMachineConfigurationImpl::setThisStateMachineConfigurationPtr(std::weak_ptr<PSSM::Semantics::StateMachines::StateMachineConfiguration> thisStateMachineConfigurationPtr)
{
	m_thisStateMachineConfigurationPtr = thisStateMachineConfigurationPtr;
}


