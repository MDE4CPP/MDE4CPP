[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateType( 'http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::helpers::keywords /]


[template public generateParameterList(aOperation:EOperation) post(trim())]
[for (sParameter : EParameter | aOperation.eParameters->select(p:EParameter | not p.doNotGenerate())) separator (',')]
[sParameter.generateParameterType()/] [sParameter.name/][/for]
[/template]


[template public generateCppType(anEDataType : EGenericType)]
[if (anEDataType.oclIsUndefined())]
void[else]
[if (anEDataType.eTypeArguments->notEmpty())]
[anEDataType.generateGenericType()/][else]
[anEDataType.eClassifier.transformType()/][/if]
[/if]
[/template]

[template public generateGenericType(anEDataType : EGenericType)]
[if (anEDataType.eClassifier.name = 'EJavaClass')] [anEDataType.eClassifier.transformType()/][else]
[anEDataType.eClassifier.transformType()/] <  [for (g : EGenericType | anEDataType.eTypeArguments) separator (',')] [g.eClassifier.generateType()/][/for] > [/if]
[/template]

[template public generateType(anEDataType : EClassifier)]
[if (anEDataType.oclIsUndefined())]
Any[else]
[anEDataType.transformType()/][/if]
[/template]

[template public generateParameterType(eParameter : EParameter)]
[if (not(eParameter.upperBound = 1))]
std::shared_ptr<Bag<[eParameter.eGenericType.generateCppType()/]> > [elseif (not eParameter.eType.oclIsKindOf(EDataType))]
std::shared_ptr<[eParameter.eGenericType.generateCppType()/]> [else]
[eParameter.eGenericType.generateCppType()/] [/if]
[/template]

[query private getPointerType(anOperation : EOperation) : String = if (anOperation.hasKey(anOperation.keyWeakptr())) then 'std::weak_ptr' else 'std::shared_ptr' endif /]

[template public generateOperationType(eOperation : EOperation) post(trim())]
[if (not (eOperation.upperBound = 1))]
[if (not eOperation.eGenericType.oclIsKindOf(EDataType))]
std::shared_ptr<Bag<[eOperation.eGenericType.generateCppType()/]> >[/if]
[elseif ((not eOperation.eType.oclIsUndefined()) and ((not eOperation.eType.oclIsKindOf(EDataType)) or (eOperation.eType.name = 'EEList') or (eOperation.eType.name = 'ETreeIterator') ))]
[eOperation.getPointerType()/]<[eOperation.eGenericType.generateCppType()/]> [else] 
[eOperation.eGenericType.generateCppType()/] [/if]

[/template]

[template public generateReferenceType(eReference : EReference) post(trim())]
[generateReferenceType(true)/]
[/template]


[template public generateSubsetType(eReference : EReference) post(trim())]
[let subsets : OrderedSet(EModelElement) = eReference.oclAsType(EModelElement).Subset()->asOrderedSet()]
[for (m : EModelElement | subsets) separator(',')]
[if(m.isUnion())][m.oclAsType(EReference).eGenericType.generateCppType()/][else]
[m.oclAsType(EReference).eGenericType.generateCppType()/] /*Subset does not reference a union*/[comment][m.oclAsType(EReference).eReferenceType.eReferences->at(0).eGenericType.generateCppType()/][/comment][/if][/for][/let]
[/template]



[template public generateSubsetElements(eReference : EReference)]
[let subsets : OrderedSet(EModelElement) = eReference.oclAsType(EModelElement).Subset()->asOrderedSet()]
[for (m : EModelElement | subsets) separator(',')]
m_[m.oclAsType(EReference).name/][/for][/let]
[/template]

[template public generateReferenceType(eReference : EReference, pointer : Boolean) post(trim())]
[if (eReference.upperBound = 1)]
	[if(pointer)][eReference.pointertype()/]<[/if][eReference.eGenericType.generateCppType()/] [if(pointer)]>[/if]
[else]
	[if(eReference.isSubsetUnion())]
		[if(pointer)]std::shared_ptr<[/if]SubsetUnion<[eReference.eGenericType.generateCppType()/], [generateSubsetType(eReference)/]>[if(pointer)]>[/if]
	[elseif(eReference.hasSubset())]
		[if(pointer)]std::shared_ptr<[/if]Subset<[eReference.eGenericType.generateCppType()/], [generateSubsetType(eReference)/]>[if(pointer)]>[/if]
	[elseif(eReference.isUnion())]
		[if(pointer)]std::shared_ptr<[/if]Union<[eReference.eGenericType.generateCppType()/]>[if(pointer)]>[/if]
	[else]
		[if(pointer)]std::shared_ptr<[/if]Bag<[eReference.eGenericType.generateCppType()/]>[if(pointer)]>[/if]
	[/if]
[/if]
[/template]

[query private isShared(aReference : EReference) : Boolean = if (aReference.hasKey(keyAggregationKind())) then aReference.valueKey(keyAggregationKind())='shared' else false endif/]
[query public isBackReference(aReference:EReference) : Boolean = aReference.container or isShared()/]
[query public hasAbstractType(aReference : EReference) : Boolean = if (aReference.eType.oclIsKindOf(EClass)) then eType.oclAsType(EClass).abstract else false endif /]

[template public pointertype(aReference : EReference) post(trim())]
[if(isBackReference())]
std::weak_ptr
[else]
std::shared_ptr
[/if]
[/template]


[template public generateReferenceTypeBag(eReference : EReference)]
[if (not(eReference.upperBound = 1))]
std::shared_ptr<[eReference.eGenericType.generateCppType()/] >[else]
std::shared_ptr<[eReference.eGenericType.generateCppType()/]>[/if]
[/template]

[template public generateAttributeType(eAttribute : EAttribute)]
[if (not(eAttribute.upperBound = 1))]
std::shared_ptr<Bag<[eAttribute.eGenericType.generateCppType()/]> >[elseif ((not eAttribute.eType.oclIsUndefined()) and (not eAttribute.eType.oclIsKindOf(EDataType)))]
std::shared_ptr<[eAttribute.eGenericType.generateCppType()/]> [else]
[eAttribute.eGenericType.generateCppType()/] [/if]
[/template]

[**
 * Transformation Javatypes to C++
*/]
[template public transformType(anEClassifier : EClassifier) ? (oclIsUndefined())]
Any
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EBoolean') or (name = 'EBooleanObject') or (name = 'Boolean'))]
bool
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'UnlimitedNatural' ))]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EResource')]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EInt') or (name = 'EIntegerObject') or (name = 'EBigInteger') or (name = 'Integer'))]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EDouble') or (name = 'EDoubleObject')or (name = 'EBigDecimal') or (name = 'Real'))]
double
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'ELong') or (name = 'ELongObject') )]
long
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EByte') or (name = 'EByteObject') )]
char
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EByteArray'))]
char
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EChar') or (name = 'ECharacterObject') )]
char
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EFloat') or (name = 'EFloatObject') )]
float
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EEList')]
Bag
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EDate')]
int
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EMap')]
std::map
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EJavaObject')]
Any
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'ETreeIterator')]
Bag
[/template]

[template public transformType(anEClassifier : EClassifier) ? (name = 'EJavaClass')]
void * 
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EEnumerator') or (name = 'EDiagnosticChain'))]
Any
[/template]

[template public transformType(anEClassifier : EClassifier) ? ((name = 'EString') or (name = 'String'))]
std::string
[/template]

[template public transformType(anEClassifier : EClassifier) ? (not oclIsKindOf(EDataType))]
[anEClassifier.generateNamespaceDefinition()/]::[anEClassifier.name/]
[/template]

[template public transformType(anEClassifier : EClassifier) ? (oclIsKindOf(EEnum))]
[anEClassifier.generateNamespaceDefinition()/]::[anEClassifier.name/]
[/template]

[query public getDefaultValue(anEClassifier : EClassifier) : String = 
		if ((name = 'EBoolean' ) or 
			(name = 'EBooleanObject' ) or 
			(name = 'Boolean' )) 
		then getDefaultBooleanValue()
		else getDefaultValueCheckString()
		endif
/]
[query private getDefaultValueCheckString(anEClassifier : EClassifier) : String = 
		if ((name = 'EString') or 
			(name = 'String')) 
		then getDefaultStringValue() 
		else getDefaultValueCheckInteger()
		endif
/]
[query private getDefaultValueCheckInteger(anEClassifier : EClassifier) : String = 
		if ((name = 'UnlimitedNatural') or 
			(name = 'EResource') or 
			(name = 'EInt') or 
			(name = 'EIntegerObject') or 
			(name = 'EBigInteger') or 
			(name = 'Integer') or 
			(name = 'EDouble') or 
			(name = 'EDoubleObject') or 
			(name = 'EBigDecimal') or 
			(name = 'Real') or 
			(name = 'ELong') or 
			(name = 'ELongObject') or 
			(name = 'EFloat') or 
			(name = 'EFloatObject') or 
			(name = 'EDate')) 
		then getDefaultNumberValue() 
		else getDefaultValueCheckChar() 
		endif
/]
[query private getDefaultValueCheckChar(anEClassifier : EClassifier) : String = 
		if ((name = 'EByte') or 
			(name = 'EByteObject') or 
			(name = 'EByteArray') or 
			(name = 'EChar') or 
			(name = 'ECharacterObject')) 
		then getDefaultCharValue() 
		else getDefaultPointerValue()
		endif
/]

[query private getDefaultBooleanValue(anEClassifier : EClassifier) : String = 'false'/]
[query private getDefaultCharValue(anEClassifier : EClassifier) : String = '\'\\0\''/]
[query private getDefaultNumberValue(anEClassifier : EClassifier) : String = '0'/]
[query private getDefaultPointerValue(anEClassifier : EClassifier) : String = 'nullptr'/]
[query private getDefaultStringValue(anEClassifier : EClassifier) : String = '""'/]

[query public requiresAny(anEClassifier : EClassifier) : Boolean = if (oclIsUndefined()) then true else (name = 'EEnumerator' or name = 'EDiagnosticChain' or name = 'EJavaObject') endif/]