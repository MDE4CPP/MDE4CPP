//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_LIFELINELIFELINEIMPL_HPP
#define UML_LIFELINELIFELINEIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../Lifeline.hpp"

#include "uml/impl/NamedElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API LifelineImpl : virtual public NamedElementImpl, virtual public Lifeline 
	{
		public: 
			LifelineImpl(const LifelineImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			LifelineImpl& operator=(LifelineImpl const&); 

		protected:
			friend class umlFactoryImpl;
			LifelineImpl();
			virtual std::shared_ptr<uml::Lifeline> getThisLifelinePtr() const;
			virtual void setThisLifelinePtr(std::weak_ptr<uml::Lifeline> thisLifelinePtr);

			//Additional constructors for the containments back reference
			LifelineImpl(std::weak_ptr<uml::Interaction> par_interaction);
			//Additional constructors for the containments back reference
			LifelineImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			LifelineImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~LifelineImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References the InteractionFragments in which this Lifeline takes part.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<Bag<uml::InteractionFragment>>& getCoveredBy() const ;
			/*!
			References the Interaction that represents the decomposition.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<uml::PartDecomposition>& getDecomposedAs() const ;
			/*!
			References the Interaction that represents the decomposition.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setDecomposedAs(const std::shared_ptr<uml::PartDecomposition>&) ;
			/*!
			References the Interaction enclosing this Lifeline.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::weak_ptr<uml::Interaction> getInteraction() const ;
			/*!
			References the Interaction enclosing this Lifeline.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setInteraction(std::weak_ptr<uml::Interaction>) ;
			/*!
			References the ConnectableElement within the classifier that contains the enclosing interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<uml::ConnectableElement>& getRepresents() const ;
			/*!
			References the ConnectableElement within the classifier that contains the enclosing interaction.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setRepresents(const std::shared_ptr<uml::ConnectableElement>&) ;
			/*!
			If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual const std::shared_ptr<uml::ValueSpecification>& getSelector() const ;
			/*!
			If the referenced ConnectableElement is multivalued, then this specifies the specific individual part within that set.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setSelector(const std::shared_ptr<uml::ValueSpecification>&) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, const std::shared_ptr<Any>& newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID,const std::shared_ptr<Bag<Any>>& arguments) ;

		private:
			std::weak_ptr<uml::Lifeline> m_thisLifelinePtr;
	};
}
#endif /* end of include guard: UML_LIFELINELIFELINEIMPL_HPP */
