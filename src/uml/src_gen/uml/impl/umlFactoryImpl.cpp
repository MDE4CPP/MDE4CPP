#include "uml/impl/umlFactoryImpl.hpp"

#include <cassert>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EClass.hpp"
#include "uml/impl/ElementImpl.hpp"
#include "uml/impl/AbstractionImpl.hpp"
#include "uml/impl/AcceptCallActionImpl.hpp"
#include "uml/impl/AcceptEventActionImpl.hpp"
#include "uml/impl/ActionImpl.hpp"
#include "uml/impl/ActionExecutionSpecificationImpl.hpp"
#include "uml/impl/ActionInputPinImpl.hpp"
#include "uml/impl/ActivityImpl.hpp"
#include "uml/impl/ActivityEdgeImpl.hpp"
#include "uml/impl/ActivityFinalNodeImpl.hpp"
#include "uml/impl/ActivityGroupImpl.hpp"
#include "uml/impl/ActivityNodeImpl.hpp"
#include "uml/impl/ActivityParameterNodeImpl.hpp"
#include "uml/impl/ActivityPartitionImpl.hpp"
#include "uml/impl/ActorImpl.hpp"
#include "uml/impl/AddStructuralFeatureValueActionImpl.hpp"
#include "uml/impl/AddVariableValueActionImpl.hpp"
#include "uml/impl/AnyReceiveEventImpl.hpp"
#include "uml/impl/ArgumentImpl.hpp"
#include "uml/impl/ArtifactImpl.hpp"
#include "uml/impl/AssociationImpl.hpp"
#include "uml/impl/AssociationClassImpl.hpp"
#include "uml/impl/BehaviorImpl.hpp"
#include "uml/impl/BehaviorExecutionSpecificationImpl.hpp"
#include "uml/impl/BehavioralFeatureImpl.hpp"
#include "uml/impl/BehavioredClassifierImpl.hpp"
#include "uml/impl/BroadcastSignalActionImpl.hpp"
#include "uml/impl/CallActionImpl.hpp"
#include "uml/impl/CallBehaviorActionImpl.hpp"
#include "uml/impl/CallEventImpl.hpp"
#include "uml/impl/CallOperationActionImpl.hpp"
#include "uml/impl/CentralBufferNodeImpl.hpp"
#include "uml/impl/ChangeEventImpl.hpp"
#include "uml/impl/ClassImpl.hpp"
#include "uml/impl/ClassifierImpl.hpp"
#include "uml/impl/ClassifierTemplateParameterImpl.hpp"
#include "uml/impl/ClauseImpl.hpp"
#include "uml/impl/ClearAssociationActionImpl.hpp"
#include "uml/impl/ClearStructuralFeatureActionImpl.hpp"
#include "uml/impl/ClearVariableActionImpl.hpp"
#include "uml/impl/CollaborationImpl.hpp"
#include "uml/impl/CollaborationUseImpl.hpp"
#include "uml/impl/CombinedFragmentImpl.hpp"
#include "uml/impl/CommentImpl.hpp"
#include "uml/impl/CommunicationPathImpl.hpp"
#include "uml/impl/ComponentImpl.hpp"
#include "uml/impl/ComponentRealizationImpl.hpp"
#include "uml/impl/ConditionalNodeImpl.hpp"
#include "uml/impl/ConnectableElementImpl.hpp"
#include "uml/impl/ConnectableElementTemplateParameterImpl.hpp"
#include "uml/impl/ConnectionPointReferenceImpl.hpp"
#include "uml/impl/ConnectorImpl.hpp"
#include "uml/impl/ConnectorEndImpl.hpp"
#include "uml/impl/ConsiderIgnoreFragmentImpl.hpp"
#include "uml/impl/ConstraintImpl.hpp"
#include "uml/impl/ContinuationImpl.hpp"
#include "uml/impl/ControlFlowImpl.hpp"
#include "uml/impl/ControlNodeImpl.hpp"
#include "uml/impl/CreateLinkActionImpl.hpp"
#include "uml/impl/CreateLinkObjectActionImpl.hpp"
#include "uml/impl/CreateObjectActionImpl.hpp"
#include "uml/impl/DataStoreNodeImpl.hpp"
#include "uml/impl/DataTypeImpl.hpp"
#include "uml/impl/DecisionNodeImpl.hpp"
#include "uml/impl/DependencyImpl.hpp"
#include "uml/impl/DeployedArtifactImpl.hpp"
#include "uml/impl/DeploymentImpl.hpp"
#include "uml/impl/DeploymentSpecificationImpl.hpp"
#include "uml/impl/DeploymentTargetImpl.hpp"
#include "uml/impl/DestroyLinkActionImpl.hpp"
#include "uml/impl/DestroyObjectActionImpl.hpp"
#include "uml/impl/DestructionOccurrenceSpecificationImpl.hpp"
#include "uml/impl/DeviceImpl.hpp"
#include "uml/impl/DirectedRelationshipImpl.hpp"
#include "uml/impl/DurationImpl.hpp"
#include "uml/impl/DurationConstraintImpl.hpp"
#include "uml/impl/DurationIntervalImpl.hpp"
#include "uml/impl/DurationObservationImpl.hpp"
#include "uml/impl/ElementImpl.hpp"
#include "uml/impl/ElementImportImpl.hpp"
#include "uml/impl/EncapsulatedClassifierImpl.hpp"
#include "uml/impl/EnumerationImpl.hpp"
#include "uml/impl/EnumerationLiteralImpl.hpp"
#include "uml/impl/EventImpl.hpp"
#include "uml/impl/ExceptionHandlerImpl.hpp"
#include "uml/impl/ExecutableNodeImpl.hpp"
#include "uml/impl/ExecutionEnvironmentImpl.hpp"
#include "uml/impl/ExecutionOccurrenceSpecificationImpl.hpp"
#include "uml/impl/ExecutionSpecificationImpl.hpp"
#include "uml/impl/ExpansionNodeImpl.hpp"
#include "uml/impl/ExpansionRegionImpl.hpp"
#include "uml/impl/ExpressionImpl.hpp"
#include "uml/impl/ExtendImpl.hpp"
#include "uml/impl/ExtensionImpl.hpp"
#include "uml/impl/ExtensionEndImpl.hpp"
#include "uml/impl/ExtensionPointImpl.hpp"
#include "uml/impl/FactoryImpl.hpp"
#include "uml/impl/FeatureImpl.hpp"
#include "uml/impl/FinalNodeImpl.hpp"
#include "uml/impl/FinalStateImpl.hpp"
#include "uml/impl/FlowFinalNodeImpl.hpp"
#include "uml/impl/ForkNodeImpl.hpp"
#include "uml/impl/FunctionBehaviorImpl.hpp"
#include "uml/impl/GateImpl.hpp"
#include "uml/impl/GeneralOrderingImpl.hpp"
#include "uml/impl/GeneralizationImpl.hpp"
#include "uml/impl/GeneralizationSetImpl.hpp"
#include "uml/impl/ImageImpl.hpp"
#include "uml/impl/IncludeImpl.hpp"
#include "uml/impl/InformationFlowImpl.hpp"
#include "uml/impl/InformationItemImpl.hpp"
#include "uml/impl/InitialNodeImpl.hpp"
#include "uml/impl/InputPinImpl.hpp"
#include "uml/impl/InstanceSpecificationImpl.hpp"
#include "uml/impl/InstanceValueImpl.hpp"
#include "uml/impl/InteractionImpl.hpp"
#include "uml/impl/InteractionConstraintImpl.hpp"
#include "uml/impl/InteractionFragmentImpl.hpp"
#include "uml/impl/InteractionOperandImpl.hpp"
#include "uml/impl/InteractionUseImpl.hpp"
#include "uml/impl/InterfaceImpl.hpp"
#include "uml/impl/InterfaceRealizationImpl.hpp"
#include "uml/impl/InterruptibleActivityRegionImpl.hpp"
#include "uml/impl/IntervalImpl.hpp"
#include "uml/impl/IntervalConstraintImpl.hpp"
#include "uml/impl/InvocationActionImpl.hpp"
#include "uml/impl/JoinNodeImpl.hpp"
#include "uml/impl/LifelineImpl.hpp"
#include "uml/impl/LinkActionImpl.hpp"
#include "uml/impl/LinkEndCreationDataImpl.hpp"
#include "uml/impl/LinkEndDataImpl.hpp"
#include "uml/impl/LinkEndDestructionDataImpl.hpp"
#include "uml/impl/LiteralBooleanImpl.hpp"
#include "uml/impl/LiteralIntegerImpl.hpp"
#include "uml/impl/LiteralNullImpl.hpp"
#include "uml/impl/LiteralRealImpl.hpp"
#include "uml/impl/LiteralSpecificationImpl.hpp"
#include "uml/impl/LiteralStringImpl.hpp"
#include "uml/impl/LiteralUnlimitedNaturalImpl.hpp"
#include "uml/impl/LoopNodeImpl.hpp"
#include "uml/impl/ManifestationImpl.hpp"
#include "uml/impl/MergeNodeImpl.hpp"
#include "uml/impl/MessageImpl.hpp"
#include "uml/impl/MessageEndImpl.hpp"
#include "uml/impl/MessageEventImpl.hpp"
#include "uml/impl/MessageOccurrenceSpecificationImpl.hpp"
#include "uml/impl/ModelImpl.hpp"
#include "uml/impl/MultiplicityElementImpl.hpp"
#include "uml/impl/NamedElementImpl.hpp"
#include "uml/impl/NamespaceImpl.hpp"
#include "uml/impl/NodeImpl.hpp"
#include "uml/impl/ObjectImpl.hpp"
#include "uml/impl/ObjectFlowImpl.hpp"
#include "uml/impl/ObjectNodeImpl.hpp"
#include "uml/impl/ObservationImpl.hpp"
#include "uml/impl/OccurrenceSpecificationImpl.hpp"
#include "uml/impl/OpaqueActionImpl.hpp"
#include "uml/impl/OpaqueBehaviorImpl.hpp"
#include "uml/impl/OpaqueExpressionImpl.hpp"
#include "uml/impl/OperationImpl.hpp"
#include "uml/impl/OperationTemplateParameterImpl.hpp"
#include "uml/impl/OutputPinImpl.hpp"
#include "uml/impl/PackageImpl.hpp"
#include "uml/impl/PackageImportImpl.hpp"
#include "uml/impl/PackageMergeImpl.hpp"
#include "uml/impl/PackageableElementImpl.hpp"
#include "uml/impl/ParameterImpl.hpp"
#include "uml/impl/ParameterSetImpl.hpp"
#include "uml/impl/ParameterableElementImpl.hpp"
#include "uml/impl/PartDecompositionImpl.hpp"
#include "uml/impl/PinImpl.hpp"
#include "uml/impl/PortImpl.hpp"
#include "uml/impl/PrimitiveTypeImpl.hpp"
#include "uml/impl/ProfileImpl.hpp"
#include "uml/impl/ProfileApplicationImpl.hpp"
#include "uml/impl/PropertyImpl.hpp"
#include "uml/impl/ProtocolConformanceImpl.hpp"
#include "uml/impl/ProtocolStateMachineImpl.hpp"
#include "uml/impl/ProtocolTransitionImpl.hpp"
#include "uml/impl/PseudostateImpl.hpp"
#include "uml/impl/QualifierValueImpl.hpp"
#include "uml/impl/RaiseExceptionActionImpl.hpp"
#include "uml/impl/ReadExtentActionImpl.hpp"
#include "uml/impl/ReadIsClassifiedObjectActionImpl.hpp"
#include "uml/impl/ReadLinkActionImpl.hpp"
#include "uml/impl/ReadLinkObjectEndActionImpl.hpp"
#include "uml/impl/ReadLinkObjectEndQualifierActionImpl.hpp"
#include "uml/impl/ReadSelfActionImpl.hpp"
#include "uml/impl/ReadStructuralFeatureActionImpl.hpp"
#include "uml/impl/ReadVariableActionImpl.hpp"
#include "uml/impl/RealizationImpl.hpp"
#include "uml/impl/ReceptionImpl.hpp"
#include "uml/impl/ReclassifyObjectActionImpl.hpp"
#include "uml/impl/RedefinableElementImpl.hpp"
#include "uml/impl/RedefinableTemplateSignatureImpl.hpp"
#include "uml/impl/ReduceActionImpl.hpp"
#include "uml/impl/RegionImpl.hpp"
#include "uml/impl/RelationshipImpl.hpp"
#include "uml/impl/RemoveStructuralFeatureValueActionImpl.hpp"
#include "uml/impl/RemoveVariableValueActionImpl.hpp"
#include "uml/impl/ReplyActionImpl.hpp"
#include "uml/impl/SendObjectActionImpl.hpp"
#include "uml/impl/SendSignalActionImpl.hpp"
#include "uml/impl/SequenceNodeImpl.hpp"
#include "uml/impl/SignalImpl.hpp"
#include "uml/impl/SignalEventImpl.hpp"
#include "uml/impl/SlotImpl.hpp"
#include "uml/impl/StartClassifierBehaviorActionImpl.hpp"
#include "uml/impl/StartObjectBehaviorActionImpl.hpp"
#include "uml/impl/StateImpl.hpp"
#include "uml/impl/StateInvariantImpl.hpp"
#include "uml/impl/StateMachineImpl.hpp"
#include "uml/impl/StereotypeImpl.hpp"
#include "uml/impl/StringExpressionImpl.hpp"
#include "uml/impl/StructuralFeatureImpl.hpp"
#include "uml/impl/StructuralFeatureActionImpl.hpp"
#include "uml/impl/StructuredActivityNodeImpl.hpp"
#include "uml/impl/StructuredClassifierImpl.hpp"
#include "uml/impl/SubstitutionImpl.hpp"
#include "uml/impl/TemplateBindingImpl.hpp"
#include "uml/impl/TemplateParameterImpl.hpp"
#include "uml/impl/TemplateParameterSubstitutionImpl.hpp"
#include "uml/impl/TemplateSignatureImpl.hpp"
#include "uml/impl/TemplateableElementImpl.hpp"
#include "uml/impl/TestIdentityActionImpl.hpp"
#include "uml/impl/TimeConstraintImpl.hpp"
#include "uml/impl/TimeEventImpl.hpp"
#include "uml/impl/TimeExpressionImpl.hpp"
#include "uml/impl/TimeIntervalImpl.hpp"
#include "uml/impl/TimeObservationImpl.hpp"
#include "uml/impl/TransitionImpl.hpp"
#include "uml/impl/TriggerImpl.hpp"
#include "uml/impl/TypeImpl.hpp"
#include "uml/impl/TypedElementImpl.hpp"
#include "uml/impl/UnmarshallActionImpl.hpp"
#include "uml/impl/UsageImpl.hpp"
#include "uml/impl/UseCaseImpl.hpp"
#include "uml/impl/ValuePinImpl.hpp"
#include "uml/impl/ValueSpecificationImpl.hpp"
#include "uml/impl/ValueSpecificationActionImpl.hpp"
#include "uml/impl/VariableImpl.hpp"
#include "uml/impl/VariableActionImpl.hpp"
#include "uml/impl/VertexImpl.hpp"
#include "uml/impl/WriteLinkActionImpl.hpp"
#include "uml/impl/WriteStructuralFeatureActionImpl.hpp"
#include "uml/impl/WriteVariableActionImpl.hpp"

#include "uml/Action.hpp"
#include "uml/Gate.hpp"
#include "uml/InputPin.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Gate.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Clause.hpp"
#include "uml/CollaborationUse.hpp"
#include "uml/InputPin.hpp"
#include "uml/Constraint.hpp"
#include "uml/Constraint.hpp"
#include "uml/DeploymentSpecification.hpp"
#include "uml/ProtocolConformance.hpp"
#include "uml/ConnectionPointReference.hpp"
#include "uml/Pseudostate.hpp"
#include "uml/Pseudostate.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Trigger.hpp"
#include "uml/Deployment.hpp"
#include "uml/Behavior.hpp"
#include "uml/ActivityEdge.hpp"
#include "uml/ActivityEdge.hpp"
#include "uml/Behavior.hpp"
#include "uml/ElementImport.hpp"
#include "uml/ConnectorEnd.hpp"
#include "uml/LinkEndData.hpp"
#include "uml/Behavior.hpp"
#include "uml/InputPin.hpp"
#include "uml/ExecutableNode.hpp"
#include "uml/Behavior.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Extend.hpp"
#include "uml/ExtensionPoint.hpp"
#include "uml/InputPin.hpp"
#include "uml/Gate.hpp"
#include "uml/InteractionFragment.hpp"
#include "uml/InteractionFragment.hpp"
#include "uml/Action.hpp"
#include "uml/GeneralOrdering.hpp"
#include "uml/Generalization.hpp"
#include "uml/ActivityGroup.hpp"
#include "uml/InteractionConstraint.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ExceptionHandler.hpp"
#include "uml/Image.hpp"
#include "uml/Include.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InterfaceRealization.hpp"
#include "uml/Constraint.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Lifeline.hpp"
#include "uml/Constraint.hpp"
#include "uml/Constraint.hpp"
#include "uml/OutputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Manifestation.hpp"
#include "uml/OpaqueExpression.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Message.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/StringExpression.hpp"
#include "uml/Artifact.hpp"
#include "uml/Classifier.hpp"
#include "uml/Classifier.hpp"
#include "uml/Node.hpp"
#include "uml/Package.hpp"
#include "uml/ActivityNode.hpp"
#include "uml/ActivityNode.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/InteractionOperand.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/ParameterableElement.hpp"
#include "uml/Property.hpp"
#include "uml/Property.hpp"
#include "uml/Property.hpp"
#include "uml/Property.hpp"
#include "uml/Property.hpp"
#include "uml/Property.hpp"
#include "uml/Behavior.hpp"
#include "uml/Comment.hpp"
#include "uml/Connector.hpp"
#include "uml/ParameterableElement.hpp"
#include "uml/Element.hpp"
#include "uml/Property.hpp"
#include "uml/ActivityGroup.hpp"
#include "uml/EnumerationLiteral.hpp"
#include "uml/NamedElement.hpp"
#include "uml/ActivityNode.hpp"
#include "uml/Operation.hpp"
#include "uml/Operation.hpp"
#include "uml/Operation.hpp"
#include "uml/Operation.hpp"
#include "uml/Parameter.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/Parameter.hpp"
#include "uml/ParameterSet.hpp"
#include "uml/ParameterSet.hpp"
#include "uml/ParameterableElement.hpp"
#include "uml/Reception.hpp"
#include "uml/Reception.hpp"
#include "uml/Constraint.hpp"
#include "uml/Stereotype.hpp"
#include "uml/TemplateSignature.hpp"
#include "uml/Type.hpp"
#include "uml/UseCase.hpp"
#include "uml/PackageImport.hpp"
#include "uml/PackageMerge.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/TemplateParameterSubstitution.hpp"
#include "uml/ProfileApplication.hpp"
#include "uml/ProtocolStateMachine.hpp"
#include "uml/QualifierValue.hpp"
#include "uml/Property.hpp"
#include "uml/ComponentRealization.hpp"
#include "uml/Region.hpp"
#include "uml/Region.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Dependency.hpp"
#include "uml/InputPin.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Slot.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/StructuredActivityNode.hpp"
#include "uml/InputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/StringExpression.hpp"
#include "uml/ActivityGroup.hpp"
#include "uml/ActivityPartition.hpp"
#include "uml/Substitution.hpp"
#include "uml/Vertex.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/TemplateBinding.hpp"
#include "uml/Transition.hpp"
#include "uml/Trigger.hpp"
#include "uml/Trigger.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/InputPin.hpp"
#include "uml/InputPin.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/Variable.hpp"
#include "uml/Variable.hpp"
#include "uml/ValueSpecification.hpp"
#include "uml/TimeExpression.hpp"


using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************

umlFactoryImpl::umlFactoryImpl()
{
	m_idMap.insert(std::make_pair("Abstraction", umlPackage::ABSTRACTION_CLASS));
	m_idMap.insert(std::make_pair("AcceptCallAction", umlPackage::ACCEPTCALLACTION_CLASS));
	m_idMap.insert(std::make_pair("AcceptEventAction", umlPackage::ACCEPTEVENTACTION_CLASS));
	m_idMap.insert(std::make_pair("ActionExecutionSpecification", umlPackage::ACTIONEXECUTIONSPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("ActionInputPin", umlPackage::ACTIONINPUTPIN_CLASS));
	m_idMap.insert(std::make_pair("Activity", umlPackage::ACTIVITY_CLASS));
	m_idMap.insert(std::make_pair("ActivityFinalNode", umlPackage::ACTIVITYFINALNODE_CLASS));
	m_idMap.insert(std::make_pair("ActivityParameterNode", umlPackage::ACTIVITYPARAMETERNODE_CLASS));
	m_idMap.insert(std::make_pair("ActivityPartition", umlPackage::ACTIVITYPARTITION_CLASS));
	m_idMap.insert(std::make_pair("Actor", umlPackage::ACTOR_CLASS));
	m_idMap.insert(std::make_pair("AddStructuralFeatureValueAction", umlPackage::ADDSTRUCTURALFEATUREVALUEACTION_CLASS));
	m_idMap.insert(std::make_pair("AddVariableValueAction", umlPackage::ADDVARIABLEVALUEACTION_CLASS));
	m_idMap.insert(std::make_pair("AnyReceiveEvent", umlPackage::ANYRECEIVEEVENT_CLASS));
	m_idMap.insert(std::make_pair("Argument", umlPackage::ARGUMENT_CLASS));
	m_idMap.insert(std::make_pair("Artifact", umlPackage::ARTIFACT_CLASS));
	m_idMap.insert(std::make_pair("Association", umlPackage::ASSOCIATION_CLASS));
	m_idMap.insert(std::make_pair("AssociationClass", umlPackage::ASSOCIATIONCLASS_CLASS));
	m_idMap.insert(std::make_pair("BehaviorExecutionSpecification", umlPackage::BEHAVIOREXECUTIONSPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("BroadcastSignalAction", umlPackage::BROADCASTSIGNALACTION_CLASS));
	m_idMap.insert(std::make_pair("CallBehaviorAction", umlPackage::CALLBEHAVIORACTION_CLASS));
	m_idMap.insert(std::make_pair("CallEvent", umlPackage::CALLEVENT_CLASS));
	m_idMap.insert(std::make_pair("CallOperationAction", umlPackage::CALLOPERATIONACTION_CLASS));
	m_idMap.insert(std::make_pair("CentralBufferNode", umlPackage::CENTRALBUFFERNODE_CLASS));
	m_idMap.insert(std::make_pair("ChangeEvent", umlPackage::CHANGEEVENT_CLASS));
	m_idMap.insert(std::make_pair("Class", umlPackage::CLASS_CLASS));
	m_idMap.insert(std::make_pair("ClassifierTemplateParameter", umlPackage::CLASSIFIERTEMPLATEPARAMETER_CLASS));
	m_idMap.insert(std::make_pair("Clause", umlPackage::CLAUSE_CLASS));
	m_idMap.insert(std::make_pair("ClearAssociationAction", umlPackage::CLEARASSOCIATIONACTION_CLASS));
	m_idMap.insert(std::make_pair("ClearStructuralFeatureAction", umlPackage::CLEARSTRUCTURALFEATUREACTION_CLASS));
	m_idMap.insert(std::make_pair("ClearVariableAction", umlPackage::CLEARVARIABLEACTION_CLASS));
	m_idMap.insert(std::make_pair("Collaboration", umlPackage::COLLABORATION_CLASS));
	m_idMap.insert(std::make_pair("CollaborationUse", umlPackage::COLLABORATIONUSE_CLASS));
	m_idMap.insert(std::make_pair("CombinedFragment", umlPackage::COMBINEDFRAGMENT_CLASS));
	m_idMap.insert(std::make_pair("Comment", umlPackage::COMMENT_CLASS));
	m_idMap.insert(std::make_pair("CommunicationPath", umlPackage::COMMUNICATIONPATH_CLASS));
	m_idMap.insert(std::make_pair("Component", umlPackage::COMPONENT_CLASS));
	m_idMap.insert(std::make_pair("ComponentRealization", umlPackage::COMPONENTREALIZATION_CLASS));
	m_idMap.insert(std::make_pair("ConditionalNode", umlPackage::CONDITIONALNODE_CLASS));
	m_idMap.insert(std::make_pair("ConnectableElementTemplateParameter", umlPackage::CONNECTABLEELEMENTTEMPLATEPARAMETER_CLASS));
	m_idMap.insert(std::make_pair("ConnectionPointReference", umlPackage::CONNECTIONPOINTREFERENCE_CLASS));
	m_idMap.insert(std::make_pair("Connector", umlPackage::CONNECTOR_CLASS));
	m_idMap.insert(std::make_pair("ConnectorEnd", umlPackage::CONNECTOREND_CLASS));
	m_idMap.insert(std::make_pair("ConsiderIgnoreFragment", umlPackage::CONSIDERIGNOREFRAGMENT_CLASS));
	m_idMap.insert(std::make_pair("Constraint", umlPackage::CONSTRAINT_CLASS));
	m_idMap.insert(std::make_pair("Continuation", umlPackage::CONTINUATION_CLASS));
	m_idMap.insert(std::make_pair("ControlFlow", umlPackage::CONTROLFLOW_CLASS));
	m_idMap.insert(std::make_pair("CreateLinkAction", umlPackage::CREATELINKACTION_CLASS));
	m_idMap.insert(std::make_pair("CreateLinkObjectAction", umlPackage::CREATELINKOBJECTACTION_CLASS));
	m_idMap.insert(std::make_pair("CreateObjectAction", umlPackage::CREATEOBJECTACTION_CLASS));
	m_idMap.insert(std::make_pair("DataStoreNode", umlPackage::DATASTORENODE_CLASS));
	m_idMap.insert(std::make_pair("DataType", umlPackage::DATATYPE_CLASS));
	m_idMap.insert(std::make_pair("DecisionNode", umlPackage::DECISIONNODE_CLASS));
	m_idMap.insert(std::make_pair("Dependency", umlPackage::DEPENDENCY_CLASS));
	m_idMap.insert(std::make_pair("Deployment", umlPackage::DEPLOYMENT_CLASS));
	m_idMap.insert(std::make_pair("DeploymentSpecification", umlPackage::DEPLOYMENTSPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("DestroyLinkAction", umlPackage::DESTROYLINKACTION_CLASS));
	m_idMap.insert(std::make_pair("DestroyObjectAction", umlPackage::DESTROYOBJECTACTION_CLASS));
	m_idMap.insert(std::make_pair("DestructionOccurrenceSpecification", umlPackage::DESTRUCTIONOCCURRENCESPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("Device", umlPackage::DEVICE_CLASS));
	m_idMap.insert(std::make_pair("Duration", umlPackage::DURATION_CLASS));
	m_idMap.insert(std::make_pair("DurationConstraint", umlPackage::DURATIONCONSTRAINT_CLASS));
	m_idMap.insert(std::make_pair("DurationInterval", umlPackage::DURATIONINTERVAL_CLASS));
	m_idMap.insert(std::make_pair("DurationObservation", umlPackage::DURATIONOBSERVATION_CLASS));
	m_idMap.insert(std::make_pair("ElementImport", umlPackage::ELEMENTIMPORT_CLASS));
	m_idMap.insert(std::make_pair("Enumeration", umlPackage::ENUMERATION_CLASS));
	m_idMap.insert(std::make_pair("EnumerationLiteral", umlPackage::ENUMERATIONLITERAL_CLASS));
	m_idMap.insert(std::make_pair("ExceptionHandler", umlPackage::EXCEPTIONHANDLER_CLASS));
	m_idMap.insert(std::make_pair("ExecutionEnvironment", umlPackage::EXECUTIONENVIRONMENT_CLASS));
	m_idMap.insert(std::make_pair("ExecutionOccurrenceSpecification", umlPackage::EXECUTIONOCCURRENCESPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("ExpansionNode", umlPackage::EXPANSIONNODE_CLASS));
	m_idMap.insert(std::make_pair("ExpansionRegion", umlPackage::EXPANSIONREGION_CLASS));
	m_idMap.insert(std::make_pair("Expression", umlPackage::EXPRESSION_CLASS));
	m_idMap.insert(std::make_pair("Extend", umlPackage::EXTEND_CLASS));
	m_idMap.insert(std::make_pair("Extension", umlPackage::EXTENSION_CLASS));
	m_idMap.insert(std::make_pair("ExtensionEnd", umlPackage::EXTENSIONEND_CLASS));
	m_idMap.insert(std::make_pair("ExtensionPoint", umlPackage::EXTENSIONPOINT_CLASS));
	m_idMap.insert(std::make_pair("Factory", umlPackage::FACTORY_CLASS));
	m_idMap.insert(std::make_pair("FinalState", umlPackage::FINALSTATE_CLASS));
	m_idMap.insert(std::make_pair("FlowFinalNode", umlPackage::FLOWFINALNODE_CLASS));
	m_idMap.insert(std::make_pair("ForkNode", umlPackage::FORKNODE_CLASS));
	m_idMap.insert(std::make_pair("FunctionBehavior", umlPackage::FUNCTIONBEHAVIOR_CLASS));
	m_idMap.insert(std::make_pair("Gate", umlPackage::GATE_CLASS));
	m_idMap.insert(std::make_pair("GeneralOrdering", umlPackage::GENERALORDERING_CLASS));
	m_idMap.insert(std::make_pair("Generalization", umlPackage::GENERALIZATION_CLASS));
	m_idMap.insert(std::make_pair("GeneralizationSet", umlPackage::GENERALIZATIONSET_CLASS));
	m_idMap.insert(std::make_pair("Image", umlPackage::IMAGE_CLASS));
	m_idMap.insert(std::make_pair("Include", umlPackage::INCLUDE_CLASS));
	m_idMap.insert(std::make_pair("InformationFlow", umlPackage::INFORMATIONFLOW_CLASS));
	m_idMap.insert(std::make_pair("InformationItem", umlPackage::INFORMATIONITEM_CLASS));
	m_idMap.insert(std::make_pair("InitialNode", umlPackage::INITIALNODE_CLASS));
	m_idMap.insert(std::make_pair("InputPin", umlPackage::INPUTPIN_CLASS));
	m_idMap.insert(std::make_pair("InstanceSpecification", umlPackage::INSTANCESPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("InstanceValue", umlPackage::INSTANCEVALUE_CLASS));
	m_idMap.insert(std::make_pair("Interaction", umlPackage::INTERACTION_CLASS));
	m_idMap.insert(std::make_pair("InteractionConstraint", umlPackage::INTERACTIONCONSTRAINT_CLASS));
	m_idMap.insert(std::make_pair("InteractionOperand", umlPackage::INTERACTIONOPERAND_CLASS));
	m_idMap.insert(std::make_pair("InteractionUse", umlPackage::INTERACTIONUSE_CLASS));
	m_idMap.insert(std::make_pair("Interface", umlPackage::INTERFACE_CLASS));
	m_idMap.insert(std::make_pair("InterfaceRealization", umlPackage::INTERFACEREALIZATION_CLASS));
	m_idMap.insert(std::make_pair("InterruptibleActivityRegion", umlPackage::INTERRUPTIBLEACTIVITYREGION_CLASS));
	m_idMap.insert(std::make_pair("Interval", umlPackage::INTERVAL_CLASS));
	m_idMap.insert(std::make_pair("IntervalConstraint", umlPackage::INTERVALCONSTRAINT_CLASS));
	m_idMap.insert(std::make_pair("JoinNode", umlPackage::JOINNODE_CLASS));
	m_idMap.insert(std::make_pair("Lifeline", umlPackage::LIFELINE_CLASS));
	m_idMap.insert(std::make_pair("LinkEndCreationData", umlPackage::LINKENDCREATIONDATA_CLASS));
	m_idMap.insert(std::make_pair("LinkEndData", umlPackage::LINKENDDATA_CLASS));
	m_idMap.insert(std::make_pair("LinkEndDestructionData", umlPackage::LINKENDDESTRUCTIONDATA_CLASS));
	m_idMap.insert(std::make_pair("LiteralBoolean", umlPackage::LITERALBOOLEAN_CLASS));
	m_idMap.insert(std::make_pair("LiteralInteger", umlPackage::LITERALINTEGER_CLASS));
	m_idMap.insert(std::make_pair("LiteralNull", umlPackage::LITERALNULL_CLASS));
	m_idMap.insert(std::make_pair("LiteralReal", umlPackage::LITERALREAL_CLASS));
	m_idMap.insert(std::make_pair("LiteralString", umlPackage::LITERALSTRING_CLASS));
	m_idMap.insert(std::make_pair("LiteralUnlimitedNatural", umlPackage::LITERALUNLIMITEDNATURAL_CLASS));
	m_idMap.insert(std::make_pair("LoopNode", umlPackage::LOOPNODE_CLASS));
	m_idMap.insert(std::make_pair("Manifestation", umlPackage::MANIFESTATION_CLASS));
	m_idMap.insert(std::make_pair("MergeNode", umlPackage::MERGENODE_CLASS));
	m_idMap.insert(std::make_pair("Message", umlPackage::MESSAGE_CLASS));
	m_idMap.insert(std::make_pair("MessageOccurrenceSpecification", umlPackage::MESSAGEOCCURRENCESPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("Model", umlPackage::MODEL_CLASS));
	m_idMap.insert(std::make_pair("Node", umlPackage::NODE_CLASS));
	m_idMap.insert(std::make_pair("Object", umlPackage::OBJECT_CLASS));
	m_idMap.insert(std::make_pair("ObjectFlow", umlPackage::OBJECTFLOW_CLASS));
	m_idMap.insert(std::make_pair("OccurrenceSpecification", umlPackage::OCCURRENCESPECIFICATION_CLASS));
	m_idMap.insert(std::make_pair("OpaqueAction", umlPackage::OPAQUEACTION_CLASS));
	m_idMap.insert(std::make_pair("OpaqueBehavior", umlPackage::OPAQUEBEHAVIOR_CLASS));
	m_idMap.insert(std::make_pair("OpaqueExpression", umlPackage::OPAQUEEXPRESSION_CLASS));
	m_idMap.insert(std::make_pair("Operation", umlPackage::OPERATION_CLASS));
	m_idMap.insert(std::make_pair("OperationTemplateParameter", umlPackage::OPERATIONTEMPLATEPARAMETER_CLASS));
	m_idMap.insert(std::make_pair("OutputPin", umlPackage::OUTPUTPIN_CLASS));
	m_idMap.insert(std::make_pair("Package", umlPackage::PACKAGE_CLASS));
	m_idMap.insert(std::make_pair("PackageImport", umlPackage::PACKAGEIMPORT_CLASS));
	m_idMap.insert(std::make_pair("PackageMerge", umlPackage::PACKAGEMERGE_CLASS));
	m_idMap.insert(std::make_pair("Parameter", umlPackage::PARAMETER_CLASS));
	m_idMap.insert(std::make_pair("ParameterSet", umlPackage::PARAMETERSET_CLASS));
	m_idMap.insert(std::make_pair("PartDecomposition", umlPackage::PARTDECOMPOSITION_CLASS));
	m_idMap.insert(std::make_pair("Port", umlPackage::PORT_CLASS));
	m_idMap.insert(std::make_pair("PrimitiveType", umlPackage::PRIMITIVETYPE_CLASS));
	m_idMap.insert(std::make_pair("Profile", umlPackage::PROFILE_CLASS));
	m_idMap.insert(std::make_pair("ProfileApplication", umlPackage::PROFILEAPPLICATION_CLASS));
	m_idMap.insert(std::make_pair("Property", umlPackage::PROPERTY_CLASS));
	m_idMap.insert(std::make_pair("ProtocolConformance", umlPackage::PROTOCOLCONFORMANCE_CLASS));
	m_idMap.insert(std::make_pair("ProtocolStateMachine", umlPackage::PROTOCOLSTATEMACHINE_CLASS));
	m_idMap.insert(std::make_pair("ProtocolTransition", umlPackage::PROTOCOLTRANSITION_CLASS));
	m_idMap.insert(std::make_pair("Pseudostate", umlPackage::PSEUDOSTATE_CLASS));
	m_idMap.insert(std::make_pair("QualifierValue", umlPackage::QUALIFIERVALUE_CLASS));
	m_idMap.insert(std::make_pair("RaiseExceptionAction", umlPackage::RAISEEXCEPTIONACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadExtentAction", umlPackage::READEXTENTACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadIsClassifiedObjectAction", umlPackage::READISCLASSIFIEDOBJECTACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadLinkAction", umlPackage::READLINKACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadLinkObjectEndAction", umlPackage::READLINKOBJECTENDACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadLinkObjectEndQualifierAction", umlPackage::READLINKOBJECTENDQUALIFIERACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadSelfAction", umlPackage::READSELFACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadStructuralFeatureAction", umlPackage::READSTRUCTURALFEATUREACTION_CLASS));
	m_idMap.insert(std::make_pair("ReadVariableAction", umlPackage::READVARIABLEACTION_CLASS));
	m_idMap.insert(std::make_pair("Realization", umlPackage::REALIZATION_CLASS));
	m_idMap.insert(std::make_pair("Reception", umlPackage::RECEPTION_CLASS));
	m_idMap.insert(std::make_pair("ReclassifyObjectAction", umlPackage::RECLASSIFYOBJECTACTION_CLASS));
	m_idMap.insert(std::make_pair("RedefinableTemplateSignature", umlPackage::REDEFINABLETEMPLATESIGNATURE_CLASS));
	m_idMap.insert(std::make_pair("ReduceAction", umlPackage::REDUCEACTION_CLASS));
	m_idMap.insert(std::make_pair("Region", umlPackage::REGION_CLASS));
	m_idMap.insert(std::make_pair("RemoveStructuralFeatureValueAction", umlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_CLASS));
	m_idMap.insert(std::make_pair("RemoveVariableValueAction", umlPackage::REMOVEVARIABLEVALUEACTION_CLASS));
	m_idMap.insert(std::make_pair("ReplyAction", umlPackage::REPLYACTION_CLASS));
	m_idMap.insert(std::make_pair("SendObjectAction", umlPackage::SENDOBJECTACTION_CLASS));
	m_idMap.insert(std::make_pair("SendSignalAction", umlPackage::SENDSIGNALACTION_CLASS));
	m_idMap.insert(std::make_pair("SequenceNode", umlPackage::SEQUENCENODE_CLASS));
	m_idMap.insert(std::make_pair("Signal", umlPackage::SIGNAL_CLASS));
	m_idMap.insert(std::make_pair("SignalEvent", umlPackage::SIGNALEVENT_CLASS));
	m_idMap.insert(std::make_pair("Slot", umlPackage::SLOT_CLASS));
	m_idMap.insert(std::make_pair("StartClassifierBehaviorAction", umlPackage::STARTCLASSIFIERBEHAVIORACTION_CLASS));
	m_idMap.insert(std::make_pair("StartObjectBehaviorAction", umlPackage::STARTOBJECTBEHAVIORACTION_CLASS));
	m_idMap.insert(std::make_pair("State", umlPackage::STATE_CLASS));
	m_idMap.insert(std::make_pair("StateInvariant", umlPackage::STATEINVARIANT_CLASS));
	m_idMap.insert(std::make_pair("StateMachine", umlPackage::STATEMACHINE_CLASS));
	m_idMap.insert(std::make_pair("Stereotype", umlPackage::STEREOTYPE_CLASS));
	m_idMap.insert(std::make_pair("StringExpression", umlPackage::STRINGEXPRESSION_CLASS));
	m_idMap.insert(std::make_pair("StructuredActivityNode", umlPackage::STRUCTUREDACTIVITYNODE_CLASS));
	m_idMap.insert(std::make_pair("Substitution", umlPackage::SUBSTITUTION_CLASS));
	m_idMap.insert(std::make_pair("TemplateBinding", umlPackage::TEMPLATEBINDING_CLASS));
	m_idMap.insert(std::make_pair("TemplateParameter", umlPackage::TEMPLATEPARAMETER_CLASS));
	m_idMap.insert(std::make_pair("TemplateParameterSubstitution", umlPackage::TEMPLATEPARAMETERSUBSTITUTION_CLASS));
	m_idMap.insert(std::make_pair("TemplateSignature", umlPackage::TEMPLATESIGNATURE_CLASS));
	m_idMap.insert(std::make_pair("TestIdentityAction", umlPackage::TESTIDENTITYACTION_CLASS));
	m_idMap.insert(std::make_pair("TimeConstraint", umlPackage::TIMECONSTRAINT_CLASS));
	m_idMap.insert(std::make_pair("TimeEvent", umlPackage::TIMEEVENT_CLASS));
	m_idMap.insert(std::make_pair("TimeExpression", umlPackage::TIMEEXPRESSION_CLASS));
	m_idMap.insert(std::make_pair("TimeInterval", umlPackage::TIMEINTERVAL_CLASS));
	m_idMap.insert(std::make_pair("TimeObservation", umlPackage::TIMEOBSERVATION_CLASS));
	m_idMap.insert(std::make_pair("Transition", umlPackage::TRANSITION_CLASS));
	m_idMap.insert(std::make_pair("Trigger", umlPackage::TRIGGER_CLASS));
	m_idMap.insert(std::make_pair("UnmarshallAction", umlPackage::UNMARSHALLACTION_CLASS));
	m_idMap.insert(std::make_pair("Usage", umlPackage::USAGE_CLASS));
	m_idMap.insert(std::make_pair("UseCase", umlPackage::USECASE_CLASS));
	m_idMap.insert(std::make_pair("ValuePin", umlPackage::VALUEPIN_CLASS));
	m_idMap.insert(std::make_pair("ValueSpecificationAction", umlPackage::VALUESPECIFICATIONACTION_CLASS));
	m_idMap.insert(std::make_pair("Variable", umlPackage::VARIABLE_CLASS));
}

umlFactoryImpl::~umlFactoryImpl()
{
}

umlFactory* umlFactoryImpl::create()
{
	return new umlFactoryImpl();
}

//*********************************
// creators
//*********************************

std::shared_ptr<ecore::EObject> umlFactoryImpl::create(const int metaElementID, std::shared_ptr<ecore::EObject> container /*= nullptr*/, const int referenceID/* = -1*/) const
{
	switch(metaElementID)
	{
		case umlPackage::ABSTRACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAbstraction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Abstraction has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createAbstraction_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Abstraction has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAbstraction_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Abstraction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAbstraction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Abstraction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAbstraction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Abstraction has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAbstraction_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Abstraction has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createAbstraction_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Abstraction has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createAbstraction_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Abstraction has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createAbstraction_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACCEPTCALLACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAcceptCallAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//AcceptCallAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createAcceptCallAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//AcceptCallAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createAcceptCallAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//AcceptCallAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createAcceptCallAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//AcceptCallAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAcceptCallAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//AcceptCallAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createAcceptCallAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//AcceptCallAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAcceptCallAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//AcceptCallAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAcceptCallAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//AcceptCallAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAcceptCallAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACCEPTEVENTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAcceptEventAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//AcceptEventAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createAcceptEventAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//AcceptEventAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createAcceptEventAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//AcceptEventAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createAcceptEventAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//AcceptEventAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAcceptEventAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//AcceptEventAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createAcceptEventAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//AcceptEventAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAcceptEventAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//AcceptEventAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAcceptEventAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//AcceptEventAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAcceptEventAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTIONEXECUTIONSPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActionExecutionSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ActionExecutionSpecification has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createActionExecutionSpecification_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//ActionExecutionSpecification has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createActionExecutionSpecification_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//ActionExecutionSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActionExecutionSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ActionExecutionSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActionExecutionSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTIONINPUTPIN_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActionInputPin(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ActionInputPin has argument as a containment
					case  umlPackage::INVOCATIONACTION_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InvocationAction>(container);
						return this->createActionInputPin_as_argument_in_InvocationAction(castedContainer,metaElementID);
					}
					//ActionInputPin has collection as a containment
					case  umlPackage::REDUCEACTION_ATTRIBUTE_COLLECTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReduceAction>(container);
						return this->createActionInputPin_as_collection_in_ReduceAction(castedContainer,metaElementID);
					}
					//ActionInputPin has exception as a containment
					case  umlPackage::RAISEEXCEPTIONACTION_ATTRIBUTE_EXCEPTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RaiseExceptionAction>(container);
						return this->createActionInputPin_as_exception_in_RaiseExceptionAction(castedContainer,metaElementID);
					}
					//ActionInputPin has first as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_FIRST:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createActionInputPin_as_first_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//ActionInputPin has input as a containment
					case  umlPackage::ACTION_ATTRIBUTE_INPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createActionInputPin_as_input_in_Action(castedContainer,metaElementID);
					}
					//ActionInputPin has inputValue as a containment
					case  umlPackage::LINKACTION_ATTRIBUTE_INPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkAction>(container);
						return this->createActionInputPin_as_inputValue_in_LinkAction(castedContainer,metaElementID);
					}
					//ActionInputPin has inputValue as a containment
					case  umlPackage::OPAQUEACTION_ATTRIBUTE_INPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<OpaqueAction>(container);
						return this->createActionInputPin_as_inputValue_in_OpaqueAction(castedContainer,metaElementID);
					}
					//ActionInputPin has insertAt as a containment
					case  umlPackage::ADDSTRUCTURALFEATUREVALUEACTION_ATTRIBUTE_INSERTAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AddStructuralFeatureValueAction>(container);
						return this->createActionInputPin_as_insertAt_in_AddStructuralFeatureValueAction(castedContainer,metaElementID);
					}
					//ActionInputPin has insertAt as a containment
					case  umlPackage::ADDVARIABLEVALUEACTION_ATTRIBUTE_INSERTAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AddVariableValueAction>(container);
						return this->createActionInputPin_as_insertAt_in_AddVariableValueAction(castedContainer,metaElementID);
					}
					//ActionInputPin has loopVariableInput as a containment
					case  umlPackage::LOOPNODE_ATTRIBUTE_LOOPVARIABLEINPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LoopNode>(container);
						return this->createActionInputPin_as_loopVariableInput_in_LoopNode(castedContainer,metaElementID);
					}
					//ActionInputPin has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActionInputPin_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ActionInputPin has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createActionInputPin_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::STRUCTURALFEATUREACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuralFeatureAction>(container);
						return this->createActionInputPin_as_object_in_StructuralFeatureAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::CLEARASSOCIATIONACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ClearAssociationAction>(container);
						return this->createActionInputPin_as_object_in_ClearAssociationAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::READISCLASSIFIEDOBJECTACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadIsClassifiedObjectAction>(container);
						return this->createActionInputPin_as_object_in_ReadIsClassifiedObjectAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::READLINKOBJECTENDACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndAction>(container);
						return this->createActionInputPin_as_object_in_ReadLinkObjectEndAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::READLINKOBJECTENDQUALIFIERACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndQualifierAction>(container);
						return this->createActionInputPin_as_object_in_ReadLinkObjectEndQualifierAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::RECLASSIFYOBJECTACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReclassifyObjectAction>(container);
						return this->createActionInputPin_as_object_in_ReclassifyObjectAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::STARTCLASSIFIERBEHAVIORACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StartClassifierBehaviorAction>(container);
						return this->createActionInputPin_as_object_in_StartClassifierBehaviorAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::STARTOBJECTBEHAVIORACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StartObjectBehaviorAction>(container);
						return this->createActionInputPin_as_object_in_StartObjectBehaviorAction(castedContainer,metaElementID);
					}
					//ActionInputPin has object as a containment
					case  umlPackage::UNMARSHALLACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UnmarshallAction>(container);
						return this->createActionInputPin_as_object_in_UnmarshallAction(castedContainer,metaElementID);
					}
					//ActionInputPin has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActionInputPin_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ActionInputPin has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActionInputPin_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ActionInputPin has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActionInputPin_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//ActionInputPin has removeAt as a containment
					case  umlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_ATTRIBUTE_REMOVEAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RemoveStructuralFeatureValueAction>(container);
						return this->createActionInputPin_as_removeAt_in_RemoveStructuralFeatureValueAction(castedContainer,metaElementID);
					}
					//ActionInputPin has removeAt as a containment
					case  umlPackage::REMOVEVARIABLEVALUEACTION_ATTRIBUTE_REMOVEAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RemoveVariableValueAction>(container);
						return this->createActionInputPin_as_removeAt_in_RemoveVariableValueAction(castedContainer,metaElementID);
					}
					//ActionInputPin has replyValue as a containment
					case  umlPackage::REPLYACTION_ATTRIBUTE_REPLYVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReplyAction>(container);
						return this->createActionInputPin_as_replyValue_in_ReplyAction(castedContainer,metaElementID);
					}
					//ActionInputPin has request as a containment
					case  umlPackage::SENDOBJECTACTION_ATTRIBUTE_REQUEST:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendObjectAction>(container);
						return this->createActionInputPin_as_request_in_SendObjectAction(castedContainer,metaElementID);
					}
					//ActionInputPin has returnInformation as a containment
					case  umlPackage::REPLYACTION_ATTRIBUTE_RETURNINFORMATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReplyAction>(container);
						return this->createActionInputPin_as_returnInformation_in_ReplyAction(castedContainer,metaElementID);
					}
					//ActionInputPin has second as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_SECOND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createActionInputPin_as_second_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//ActionInputPin has structuredNodeInput as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_STRUCTUREDNODEINPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createActionInputPin_as_structuredNodeInput_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ActionInputPin has target as a containment
					case  umlPackage::CALLOPERATIONACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CallOperationAction>(container);
						return this->createActionInputPin_as_target_in_CallOperationAction(castedContainer,metaElementID);
					}
					//ActionInputPin has target as a containment
					case  umlPackage::DESTROYOBJECTACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DestroyObjectAction>(container);
						return this->createActionInputPin_as_target_in_DestroyObjectAction(castedContainer,metaElementID);
					}
					//ActionInputPin has target as a containment
					case  umlPackage::SENDOBJECTACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendObjectAction>(container);
						return this->createActionInputPin_as_target_in_SendObjectAction(castedContainer,metaElementID);
					}
					//ActionInputPin has target as a containment
					case  umlPackage::SENDSIGNALACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendSignalAction>(container);
						return this->createActionInputPin_as_target_in_SendSignalAction(castedContainer,metaElementID);
					}
					//ActionInputPin has value as a containment
					case  umlPackage::WRITESTRUCTURALFEATUREACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteStructuralFeatureAction>(container);
						return this->createActionInputPin_as_value_in_WriteStructuralFeatureAction(castedContainer,metaElementID);
					}
					//ActionInputPin has value as a containment
					case  umlPackage::WRITEVARIABLEACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteVariableAction>(container);
						return this->createActionInputPin_as_value_in_WriteVariableAction(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTIVITY_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActivity(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Activity has doActivity as a containment
					case  umlPackage::STATE_ATTRIBUTE_DOACTIVITY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createActivity_as_doActivity_in_State(castedContainer,metaElementID);
					}
					//Activity has effect as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_EFFECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createActivity_as_effect_in_Transition(castedContainer,metaElementID);
					}
					//Activity has entry as a containment
					case  umlPackage::STATE_ATTRIBUTE_ENTRY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createActivity_as_entry_in_State(castedContainer,metaElementID);
					}
					//Activity has exit as a containment
					case  umlPackage::STATE_ATTRIBUTE_EXIT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createActivity_as_exit_in_State(castedContainer,metaElementID);
					}
					//Activity has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createActivity_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Activity has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createActivity_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Activity has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createActivity_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Activity has ownedBehavior as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_OWNEDBEHAVIOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createActivity_as_ownedBehavior_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//Activity has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createActivity_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Activity has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActivity_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Activity has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActivity_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Activity has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createActivity_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Activity has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createActivity_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Activity has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createActivity_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Activity has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createActivity_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTIVITYFINALNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActivityFinalNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ActivityFinalNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActivityFinalNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ActivityFinalNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createActivityFinalNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ActivityFinalNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActivityFinalNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ActivityFinalNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActivityFinalNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ActivityFinalNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActivityFinalNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTIVITYPARAMETERNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActivityParameterNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ActivityParameterNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActivityParameterNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ActivityParameterNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createActivityParameterNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ActivityParameterNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActivityParameterNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ActivityParameterNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActivityParameterNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ActivityParameterNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActivityParameterNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTIVITYPARTITION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActivityPartition(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ActivityPartition has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActivityPartition_as_group_in_Activity(castedContainer,metaElementID);
					}
					//ActivityPartition has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActivityPartition_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ActivityPartition has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createActivityPartition_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//ActivityPartition has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActivityPartition_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ActivityPartition has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createActivityPartition_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					//ActivityPartition has subpartition as a containment
					case  umlPackage::ACTIVITYPARTITION_ATTRIBUTE_SUBPARTITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityPartition>(container);
						return this->createActivityPartition_as_subpartition_in_ActivityPartition(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ACTOR_CLASS:
		{
			if (nullptr == container)
			{
				return this->createActor(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Actor has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createActor_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Actor has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createActor_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Actor has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createActor_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Actor has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createActor_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Actor has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createActor_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Actor has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createActor_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Actor has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createActor_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Actor has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createActor_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Actor has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createActor_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Actor has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createActor_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ADDSTRUCTURALFEATUREVALUEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAddStructuralFeatureValueAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//AddStructuralFeatureValueAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createAddStructuralFeatureValueAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createAddStructuralFeatureValueAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createAddStructuralFeatureValueAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAddStructuralFeatureValueAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createAddStructuralFeatureValueAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAddStructuralFeatureValueAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAddStructuralFeatureValueAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//AddStructuralFeatureValueAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAddStructuralFeatureValueAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ADDVARIABLEVALUEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAddVariableValueAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//AddVariableValueAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createAddVariableValueAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//AddVariableValueAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createAddVariableValueAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//AddVariableValueAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createAddVariableValueAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//AddVariableValueAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAddVariableValueAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//AddVariableValueAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createAddVariableValueAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//AddVariableValueAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAddVariableValueAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//AddVariableValueAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAddVariableValueAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//AddVariableValueAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createAddVariableValueAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ANYRECEIVEEVENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAnyReceiveEvent(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//AnyReceiveEvent has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createAnyReceiveEvent_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//AnyReceiveEvent has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAnyReceiveEvent_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//AnyReceiveEvent has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAnyReceiveEvent_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//AnyReceiveEvent has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAnyReceiveEvent_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//AnyReceiveEvent has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAnyReceiveEvent_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//AnyReceiveEvent has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createAnyReceiveEvent_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//AnyReceiveEvent has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createAnyReceiveEvent_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ARGUMENT_CLASS:
		{
				return this->createArgument(metaElementID);
			
			break;
		}
		case umlPackage::ARTIFACT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createArtifact(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Artifact has nestedArtifact as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_NESTEDARTIFACT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createArtifact_as_nestedArtifact_in_Artifact(castedContainer,metaElementID);
					}
					//Artifact has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createArtifact_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Artifact has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createArtifact_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Artifact has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createArtifact_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Artifact has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createArtifact_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Artifact has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createArtifact_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Artifact has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createArtifact_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Artifact has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createArtifact_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Artifact has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createArtifact_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Artifact has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createArtifact_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Artifact has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createArtifact_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ASSOCIATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAssociation(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Association has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createAssociation_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Association has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createAssociation_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Association has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createAssociation_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Association has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAssociation_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Association has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAssociation_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Association has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAssociation_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Association has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAssociation_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Association has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createAssociation_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Association has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createAssociation_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Association has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createAssociation_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ASSOCIATIONCLASS_CLASS:
		{
			if (nullptr == container)
			{
				return this->createAssociationClass(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//AssociationClass has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createAssociationClass_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//AssociationClass has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createAssociationClass_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//AssociationClass has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createAssociationClass_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//AssociationClass has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAssociationClass_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//AssociationClass has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createAssociationClass_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//AssociationClass has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createAssociationClass_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//AssociationClass has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createAssociationClass_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//AssociationClass has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createAssociationClass_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//AssociationClass has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createAssociationClass_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//AssociationClass has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createAssociationClass_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::BEHAVIOREXECUTIONSPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createBehaviorExecutionSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//BehaviorExecutionSpecification has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createBehaviorExecutionSpecification_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//BehaviorExecutionSpecification has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createBehaviorExecutionSpecification_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//BehaviorExecutionSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createBehaviorExecutionSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//BehaviorExecutionSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createBehaviorExecutionSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::BROADCASTSIGNALACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createBroadcastSignalAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//BroadcastSignalAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createBroadcastSignalAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createBroadcastSignalAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createBroadcastSignalAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createBroadcastSignalAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createBroadcastSignalAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createBroadcastSignalAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createBroadcastSignalAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//BroadcastSignalAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createBroadcastSignalAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CALLBEHAVIORACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCallBehaviorAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CallBehaviorAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createCallBehaviorAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//CallBehaviorAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createCallBehaviorAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//CallBehaviorAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createCallBehaviorAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//CallBehaviorAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCallBehaviorAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//CallBehaviorAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createCallBehaviorAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//CallBehaviorAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCallBehaviorAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CallBehaviorAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCallBehaviorAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CallBehaviorAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCallBehaviorAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CALLEVENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCallEvent(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CallEvent has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createCallEvent_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//CallEvent has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createCallEvent_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//CallEvent has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCallEvent_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CallEvent has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCallEvent_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CallEvent has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createCallEvent_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//CallEvent has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createCallEvent_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//CallEvent has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createCallEvent_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CALLOPERATIONACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCallOperationAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CallOperationAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createCallOperationAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//CallOperationAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createCallOperationAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//CallOperationAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createCallOperationAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//CallOperationAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCallOperationAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//CallOperationAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createCallOperationAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//CallOperationAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCallOperationAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CallOperationAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCallOperationAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CallOperationAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCallOperationAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CENTRALBUFFERNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCentralBufferNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CentralBufferNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCentralBufferNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//CentralBufferNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createCentralBufferNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//CentralBufferNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCentralBufferNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CentralBufferNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCentralBufferNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CentralBufferNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCentralBufferNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CHANGEEVENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createChangeEvent(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ChangeEvent has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createChangeEvent_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//ChangeEvent has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createChangeEvent_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ChangeEvent has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createChangeEvent_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ChangeEvent has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createChangeEvent_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ChangeEvent has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createChangeEvent_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ChangeEvent has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createChangeEvent_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//ChangeEvent has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createChangeEvent_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CLASS_CLASS:
		{
			if (nullptr == container)
			{
				return this->createClass(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Class has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createClass_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Class has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createClass_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Class has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createClass_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Class has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createClass_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Class has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createClass_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Class has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createClass_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Class has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createClass_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Class has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createClass_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Class has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createClass_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Class has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createClass_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CLASSIFIERTEMPLATEPARAMETER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createClassifierTemplateParameter(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ClassifierTemplateParameter has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createClassifierTemplateParameter_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ClassifierTemplateParameter has ownedParameter as a containment
					case  umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateSignature>(container);
						return this->createClassifierTemplateParameter_as_ownedParameter_in_TemplateSignature(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CLAUSE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createClause(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Clause has clause as a containment
					case  umlPackage::CONDITIONALNODE_ATTRIBUTE_CLAUSE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ConditionalNode>(container);
						return this->createClause_as_clause_in_ConditionalNode(castedContainer,metaElementID);
					}
					//Clause has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createClause_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CLEARASSOCIATIONACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createClearAssociationAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ClearAssociationAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createClearAssociationAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ClearAssociationAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createClearAssociationAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ClearAssociationAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createClearAssociationAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ClearAssociationAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createClearAssociationAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ClearAssociationAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createClearAssociationAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ClearAssociationAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createClearAssociationAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ClearAssociationAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createClearAssociationAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ClearAssociationAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createClearAssociationAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CLEARSTRUCTURALFEATUREACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createClearStructuralFeatureAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ClearStructuralFeatureAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createClearStructuralFeatureAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createClearStructuralFeatureAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createClearStructuralFeatureAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createClearStructuralFeatureAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createClearStructuralFeatureAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createClearStructuralFeatureAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createClearStructuralFeatureAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ClearStructuralFeatureAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createClearStructuralFeatureAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CLEARVARIABLEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createClearVariableAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ClearVariableAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createClearVariableAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ClearVariableAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createClearVariableAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ClearVariableAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createClearVariableAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ClearVariableAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createClearVariableAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ClearVariableAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createClearVariableAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ClearVariableAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createClearVariableAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ClearVariableAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createClearVariableAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ClearVariableAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createClearVariableAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COLLABORATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCollaboration(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Collaboration has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createCollaboration_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Collaboration has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createCollaboration_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Collaboration has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createCollaboration_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Collaboration has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createCollaboration_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Collaboration has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCollaboration_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Collaboration has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCollaboration_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Collaboration has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createCollaboration_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Collaboration has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createCollaboration_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Collaboration has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createCollaboration_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Collaboration has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createCollaboration_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COLLABORATIONUSE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCollaborationUse(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CollaborationUse has collaborationUse as a containment
					case  umlPackage::CLASSIFIER_ATTRIBUTE_COLLABORATIONUSE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Classifier>(container);
						return this->createCollaborationUse_as_collaborationUse_in_Classifier(castedContainer,metaElementID);
					}
					//CollaborationUse has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCollaborationUse_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CollaborationUse has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCollaborationUse_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COMBINEDFRAGMENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCombinedFragment(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CombinedFragment has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createCombinedFragment_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//CombinedFragment has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createCombinedFragment_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//CombinedFragment has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCombinedFragment_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CombinedFragment has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCombinedFragment_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COMMENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createComment(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Comment has ownedComment as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDCOMMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createComment_as_ownedComment_in_Element(castedContainer,metaElementID);
					}
					//Comment has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createComment_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COMMUNICATIONPATH_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCommunicationPath(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CommunicationPath has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createCommunicationPath_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//CommunicationPath has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createCommunicationPath_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//CommunicationPath has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createCommunicationPath_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//CommunicationPath has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createCommunicationPath_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//CommunicationPath has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCommunicationPath_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CommunicationPath has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCommunicationPath_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CommunicationPath has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createCommunicationPath_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//CommunicationPath has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createCommunicationPath_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//CommunicationPath has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createCommunicationPath_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//CommunicationPath has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createCommunicationPath_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COMPONENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createComponent(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Component has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createComponent_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Component has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createComponent_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Component has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createComponent_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Component has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createComponent_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Component has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createComponent_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Component has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createComponent_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Component has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createComponent_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Component has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createComponent_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Component has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createComponent_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Component has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createComponent_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::COMPONENTREALIZATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createComponentRealization(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ComponentRealization has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createComponentRealization_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//ComponentRealization has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createComponentRealization_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ComponentRealization has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createComponentRealization_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ComponentRealization has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createComponentRealization_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ComponentRealization has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createComponentRealization_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ComponentRealization has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createComponentRealization_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//ComponentRealization has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createComponentRealization_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//ComponentRealization has realization as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_REALIZATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createComponentRealization_as_realization_in_Component(castedContainer,metaElementID);
					}
					//ComponentRealization has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createComponentRealization_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONDITIONALNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConditionalNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ConditionalNode has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createConditionalNode_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ConditionalNode has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createConditionalNode_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ConditionalNode has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createConditionalNode_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ConditionalNode has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createConditionalNode_as_group_in_Activity(castedContainer,metaElementID);
					}
					//ConditionalNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createConditionalNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ConditionalNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createConditionalNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ConditionalNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConditionalNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ConditionalNode has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createConditionalNode_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//ConditionalNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createConditionalNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ConditionalNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createConditionalNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//ConditionalNode has structuredNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_STRUCTUREDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createConditionalNode_as_structuredNode_in_Activity(castedContainer,metaElementID);
					}
					//ConditionalNode has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createConditionalNode_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONNECTABLEELEMENTTEMPLATEPARAMETER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConnectableElementTemplateParameter(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ConnectableElementTemplateParameter has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConnectableElementTemplateParameter_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ConnectableElementTemplateParameter has ownedParameter as a containment
					case  umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateSignature>(container);
						return this->createConnectableElementTemplateParameter_as_ownedParameter_in_TemplateSignature(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONNECTIONPOINTREFERENCE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConnectionPointReference(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ConnectionPointReference has connection as a containment
					case  umlPackage::STATE_ATTRIBUTE_CONNECTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createConnectionPointReference_as_connection_in_State(castedContainer,metaElementID);
					}
					//ConnectionPointReference has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConnectionPointReference_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ConnectionPointReference has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createConnectionPointReference_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ConnectionPointReference has subvertex as a containment
					case  umlPackage::REGION_ATTRIBUTE_SUBVERTEX:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Region>(container);
						return this->createConnectionPointReference_as_subvertex_in_Region(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONNECTOR_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConnector(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Connector has ownedConnector as a containment
					case  umlPackage::STRUCTUREDCLASSIFIER_ATTRIBUTE_OWNEDCONNECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredClassifier>(container);
						return this->createConnector_as_ownedConnector_in_StructuredClassifier(castedContainer,metaElementID);
					}
					//Connector has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConnector_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Connector has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createConnector_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONNECTOREND_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConnectorEnd(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ConnectorEnd has end as a containment
					case  umlPackage::CONNECTOR_ATTRIBUTE_END:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Connector>(container);
						return this->createConnectorEnd_as_end_in_Connector(castedContainer,metaElementID);
					}
					//ConnectorEnd has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConnectorEnd_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONSIDERIGNOREFRAGMENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConsiderIgnoreFragment(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ConsiderIgnoreFragment has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createConsiderIgnoreFragment_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//ConsiderIgnoreFragment has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createConsiderIgnoreFragment_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//ConsiderIgnoreFragment has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConsiderIgnoreFragment_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ConsiderIgnoreFragment has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createConsiderIgnoreFragment_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONSTRAINT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createConstraint(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Constraint has condition as a containment
					case  umlPackage::PARAMETERSET_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ParameterSet>(container);
						return this->createConstraint_as_condition_in_ParameterSet(castedContainer,metaElementID);
					}
					//Constraint has condition as a containment
					case  umlPackage::EXTEND_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Extend>(container);
						return this->createConstraint_as_condition_in_Extend(castedContainer,metaElementID);
					}
					//Constraint has invariant as a containment
					case  umlPackage::STATEINVARIANT_ATTRIBUTE_INVARIANT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateInvariant>(container);
						return this->createConstraint_as_invariant_in_StateInvariant(castedContainer,metaElementID);
					}
					//Constraint has localPostcondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPOSTCONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createConstraint_as_localPostcondition_in_Action(castedContainer,metaElementID);
					}
					//Constraint has localPrecondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPRECONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createConstraint_as_localPrecondition_in_Action(castedContainer,metaElementID);
					}
					//Constraint has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createConstraint_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Constraint has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createConstraint_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Constraint has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createConstraint_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Constraint has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createConstraint_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Constraint has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createConstraint_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Constraint has ownedRule as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDRULE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createConstraint_as_ownedRule_in_Namespace(castedContainer,metaElementID);
					}
					//Constraint has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createConstraint_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Constraint has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createConstraint_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONTINUATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createContinuation(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Continuation has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createContinuation_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//Continuation has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createContinuation_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//Continuation has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createContinuation_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Continuation has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createContinuation_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CONTROLFLOW_CLASS:
		{
			if (nullptr == container)
			{
				return this->createControlFlow(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ControlFlow has edge as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_EDGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createControlFlow_as_edge_in_Activity(castedContainer,metaElementID);
					}
					//ControlFlow has edge as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_EDGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createControlFlow_as_edge_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ControlFlow has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createControlFlow_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ControlFlow has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createControlFlow_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CREATELINKACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCreateLinkAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CreateLinkAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createCreateLinkAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//CreateLinkAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createCreateLinkAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//CreateLinkAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createCreateLinkAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//CreateLinkAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCreateLinkAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//CreateLinkAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createCreateLinkAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//CreateLinkAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCreateLinkAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CreateLinkAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCreateLinkAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CreateLinkAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCreateLinkAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CREATELINKOBJECTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCreateLinkObjectAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CreateLinkObjectAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createCreateLinkObjectAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createCreateLinkObjectAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createCreateLinkObjectAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCreateLinkObjectAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createCreateLinkObjectAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCreateLinkObjectAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCreateLinkObjectAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CreateLinkObjectAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCreateLinkObjectAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::CREATEOBJECTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createCreateObjectAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//CreateObjectAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createCreateObjectAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//CreateObjectAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createCreateObjectAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//CreateObjectAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createCreateObjectAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//CreateObjectAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCreateObjectAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//CreateObjectAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createCreateObjectAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//CreateObjectAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createCreateObjectAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//CreateObjectAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createCreateObjectAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//CreateObjectAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createCreateObjectAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DATASTORENODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDataStoreNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DataStoreNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDataStoreNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//DataStoreNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createDataStoreNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//DataStoreNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDataStoreNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DataStoreNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDataStoreNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DataStoreNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDataStoreNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DATATYPE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDataType(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DataType has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createDataType_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//DataType has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createDataType_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//DataType has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDataType_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//DataType has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDataType_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DataType has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDataType_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DataType has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDataType_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DataType has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDataType_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DataType has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDataType_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//DataType has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDataType_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//DataType has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDataType_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DECISIONNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDecisionNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DecisionNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDecisionNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//DecisionNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createDecisionNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//DecisionNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDecisionNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DecisionNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDecisionNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DecisionNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDecisionNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DEPENDENCY_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDependency(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Dependency has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDependency_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Dependency has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDependency_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Dependency has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDependency_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Dependency has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDependency_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Dependency has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDependency_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Dependency has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDependency_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Dependency has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDependency_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Dependency has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createDependency_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DEPLOYMENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDeployment(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Deployment has deployment as a containment
					case  umlPackage::DEPLOYMENTTARGET_ATTRIBUTE_DEPLOYMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DeploymentTarget>(container);
						return this->createDeployment_as_deployment_in_DeploymentTarget(castedContainer,metaElementID);
					}
					//Deployment has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDeployment_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Deployment has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDeployment_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Deployment has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDeployment_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Deployment has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDeployment_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Deployment has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDeployment_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Deployment has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDeployment_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Deployment has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDeployment_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Deployment has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createDeployment_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DEPLOYMENTSPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDeploymentSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DeploymentSpecification has configuration as a containment
					case  umlPackage::DEPLOYMENT_ATTRIBUTE_CONFIGURATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Deployment>(container);
						return this->createDeploymentSpecification_as_configuration_in_Deployment(castedContainer,metaElementID);
					}
					//DeploymentSpecification has nestedArtifact as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_NESTEDARTIFACT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createDeploymentSpecification_as_nestedArtifact_in_Artifact(castedContainer,metaElementID);
					}
					//DeploymentSpecification has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createDeploymentSpecification_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//DeploymentSpecification has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createDeploymentSpecification_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//DeploymentSpecification has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDeploymentSpecification_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//DeploymentSpecification has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDeploymentSpecification_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DeploymentSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDeploymentSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DeploymentSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDeploymentSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DeploymentSpecification has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDeploymentSpecification_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DeploymentSpecification has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDeploymentSpecification_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//DeploymentSpecification has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDeploymentSpecification_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//DeploymentSpecification has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDeploymentSpecification_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DESTROYLINKACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDestroyLinkAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DestroyLinkAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createDestroyLinkAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//DestroyLinkAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createDestroyLinkAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//DestroyLinkAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createDestroyLinkAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//DestroyLinkAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDestroyLinkAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//DestroyLinkAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createDestroyLinkAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//DestroyLinkAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDestroyLinkAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DestroyLinkAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDestroyLinkAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DestroyLinkAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDestroyLinkAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DESTROYOBJECTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDestroyObjectAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DestroyObjectAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createDestroyObjectAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//DestroyObjectAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createDestroyObjectAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//DestroyObjectAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createDestroyObjectAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//DestroyObjectAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDestroyObjectAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//DestroyObjectAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createDestroyObjectAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//DestroyObjectAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDestroyObjectAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DestroyObjectAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDestroyObjectAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DestroyObjectAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createDestroyObjectAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DESTRUCTIONOCCURRENCESPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDestructionOccurrenceSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DestructionOccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createDestructionOccurrenceSpecification_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//DestructionOccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createDestructionOccurrenceSpecification_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//DestructionOccurrenceSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDestructionOccurrenceSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DestructionOccurrenceSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDestructionOccurrenceSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DEVICE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDevice(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Device has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createDevice_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Device has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createDevice_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Device has nestedNode as a containment
					case  umlPackage::NODE_ATTRIBUTE_NESTEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Node>(container);
						return this->createDevice_as_nestedNode_in_Node(castedContainer,metaElementID);
					}
					//Device has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDevice_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Device has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDevice_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Device has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDevice_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Device has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDevice_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Device has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDevice_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Device has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDevice_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Device has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDevice_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Device has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDevice_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DURATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDuration(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Duration has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createDuration_as_argument_in_Message(castedContainer,metaElementID);
					}
					//Duration has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createDuration_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//Duration has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createDuration_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//Duration has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createDuration_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//Duration has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createDuration_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//Duration has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createDuration_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//Duration has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createDuration_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//Duration has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createDuration_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//Duration has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createDuration_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//Duration has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createDuration_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//Duration has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createDuration_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//Duration has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createDuration_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//Duration has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createDuration_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//Duration has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDuration_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Duration has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDuration_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Duration has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDuration_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Duration has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDuration_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Duration has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDuration_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Duration has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDuration_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Duration has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDuration_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Duration has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createDuration_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//Duration has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createDuration_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//Duration has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createDuration_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//Duration has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createDuration_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//Duration has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createDuration_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//Duration has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createDuration_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//Duration has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createDuration_as_value_in_Slot(castedContainer,metaElementID);
					}
					//Duration has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createDuration_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//Duration has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createDuration_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//Duration has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createDuration_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DURATIONCONSTRAINT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDurationConstraint(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DurationConstraint has condition as a containment
					case  umlPackage::PARAMETERSET_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ParameterSet>(container);
						return this->createDurationConstraint_as_condition_in_ParameterSet(castedContainer,metaElementID);
					}
					//DurationConstraint has condition as a containment
					case  umlPackage::EXTEND_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Extend>(container);
						return this->createDurationConstraint_as_condition_in_Extend(castedContainer,metaElementID);
					}
					//DurationConstraint has invariant as a containment
					case  umlPackage::STATEINVARIANT_ATTRIBUTE_INVARIANT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateInvariant>(container);
						return this->createDurationConstraint_as_invariant_in_StateInvariant(castedContainer,metaElementID);
					}
					//DurationConstraint has localPostcondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPOSTCONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createDurationConstraint_as_localPostcondition_in_Action(castedContainer,metaElementID);
					}
					//DurationConstraint has localPrecondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPRECONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createDurationConstraint_as_localPrecondition_in_Action(castedContainer,metaElementID);
					}
					//DurationConstraint has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDurationConstraint_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//DurationConstraint has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDurationConstraint_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DurationConstraint has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDurationConstraint_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DurationConstraint has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDurationConstraint_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DurationConstraint has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDurationConstraint_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DurationConstraint has ownedRule as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDRULE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDurationConstraint_as_ownedRule_in_Namespace(castedContainer,metaElementID);
					}
					//DurationConstraint has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDurationConstraint_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//DurationConstraint has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDurationConstraint_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DURATIONINTERVAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDurationInterval(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DurationInterval has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createDurationInterval_as_argument_in_Message(castedContainer,metaElementID);
					}
					//DurationInterval has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createDurationInterval_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//DurationInterval has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createDurationInterval_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//DurationInterval has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createDurationInterval_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//DurationInterval has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createDurationInterval_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//DurationInterval has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createDurationInterval_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//DurationInterval has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createDurationInterval_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//DurationInterval has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createDurationInterval_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//DurationInterval has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createDurationInterval_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//DurationInterval has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createDurationInterval_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//DurationInterval has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createDurationInterval_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//DurationInterval has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createDurationInterval_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//DurationInterval has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createDurationInterval_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//DurationInterval has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDurationInterval_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//DurationInterval has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDurationInterval_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DurationInterval has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDurationInterval_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DurationInterval has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDurationInterval_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DurationInterval has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDurationInterval_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DurationInterval has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDurationInterval_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//DurationInterval has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDurationInterval_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//DurationInterval has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createDurationInterval_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//DurationInterval has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createDurationInterval_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//DurationInterval has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createDurationInterval_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//DurationInterval has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createDurationInterval_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//DurationInterval has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createDurationInterval_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//DurationInterval has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createDurationInterval_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//DurationInterval has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createDurationInterval_as_value_in_Slot(castedContainer,metaElementID);
					}
					//DurationInterval has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createDurationInterval_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//DurationInterval has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createDurationInterval_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//DurationInterval has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createDurationInterval_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::DURATIONOBSERVATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createDurationObservation(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//DurationObservation has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createDurationObservation_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//DurationObservation has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDurationObservation_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DurationObservation has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createDurationObservation_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//DurationObservation has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createDurationObservation_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//DurationObservation has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createDurationObservation_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//DurationObservation has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createDurationObservation_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//DurationObservation has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createDurationObservation_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ELEMENTIMPORT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createElementImport(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ElementImport has elementImport as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_ELEMENTIMPORT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createElementImport_as_elementImport_in_Namespace(castedContainer,metaElementID);
					}
					//ElementImport has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createElementImport_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ENUMERATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createEnumeration(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Enumeration has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createEnumeration_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Enumeration has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createEnumeration_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Enumeration has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createEnumeration_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Enumeration has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createEnumeration_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Enumeration has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createEnumeration_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Enumeration has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createEnumeration_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Enumeration has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createEnumeration_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Enumeration has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createEnumeration_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Enumeration has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createEnumeration_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Enumeration has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createEnumeration_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::ENUMERATIONLITERAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createEnumerationLiteral(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//EnumerationLiteral has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createEnumerationLiteral_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//EnumerationLiteral has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createEnumerationLiteral_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//EnumerationLiteral has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createEnumerationLiteral_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//EnumerationLiteral has ownedLiteral as a containment
					case  umlPackage::ENUMERATION_ATTRIBUTE_OWNEDLITERAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Enumeration>(container);
						return this->createEnumerationLiteral_as_ownedLiteral_in_Enumeration(castedContainer,metaElementID);
					}
					//EnumerationLiteral has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createEnumerationLiteral_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//EnumerationLiteral has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createEnumerationLiteral_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//EnumerationLiteral has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createEnumerationLiteral_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//EnumerationLiteral has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createEnumerationLiteral_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXCEPTIONHANDLER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExceptionHandler(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExceptionHandler has handler as a containment
					case  umlPackage::EXECUTABLENODE_ATTRIBUTE_HANDLER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ExecutableNode>(container);
						return this->createExceptionHandler_as_handler_in_ExecutableNode(castedContainer,metaElementID);
					}
					//ExceptionHandler has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExceptionHandler_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXECUTIONENVIRONMENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExecutionEnvironment(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExecutionEnvironment has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createExecutionEnvironment_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createExecutionEnvironment_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has nestedNode as a containment
					case  umlPackage::NODE_ATTRIBUTE_NESTEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Node>(container);
						return this->createExecutionEnvironment_as_nestedNode_in_Node(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createExecutionEnvironment_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExecutionEnvironment_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExecutionEnvironment_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExecutionEnvironment_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExecutionEnvironment_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createExecutionEnvironment_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createExecutionEnvironment_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//ExecutionEnvironment has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createExecutionEnvironment_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXECUTIONOCCURRENCESPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExecutionOccurrenceSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExecutionOccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createExecutionOccurrenceSpecification_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//ExecutionOccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createExecutionOccurrenceSpecification_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//ExecutionOccurrenceSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExecutionOccurrenceSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ExecutionOccurrenceSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExecutionOccurrenceSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXPANSIONNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExpansionNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExpansionNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ExpansionNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createExpansionNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ExpansionNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExpansionNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ExpansionNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExpansionNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ExpansionNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXPANSIONREGION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExpansionRegion(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExpansionRegion has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createExpansionRegion_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ExpansionRegion has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createExpansionRegion_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ExpansionRegion has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createExpansionRegion_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ExpansionRegion has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionRegion_as_group_in_Activity(castedContainer,metaElementID);
					}
					//ExpansionRegion has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionRegion_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ExpansionRegion has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createExpansionRegion_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ExpansionRegion has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExpansionRegion_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ExpansionRegion has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionRegion_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//ExpansionRegion has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExpansionRegion_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ExpansionRegion has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionRegion_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//ExpansionRegion has structuredNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_STRUCTUREDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createExpansionRegion_as_structuredNode_in_Activity(castedContainer,metaElementID);
					}
					//ExpansionRegion has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createExpansionRegion_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXPRESSION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExpression(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Expression has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createExpression_as_argument_in_Message(castedContainer,metaElementID);
					}
					//Expression has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createExpression_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//Expression has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createExpression_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//Expression has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createExpression_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//Expression has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createExpression_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//Expression has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createExpression_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//Expression has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createExpression_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//Expression has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createExpression_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//Expression has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createExpression_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//Expression has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createExpression_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//Expression has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createExpression_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//Expression has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createExpression_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//Expression has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createExpression_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//Expression has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createExpression_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Expression has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExpression_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Expression has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExpression_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Expression has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExpression_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Expression has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExpression_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Expression has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createExpression_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Expression has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createExpression_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Expression has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createExpression_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//Expression has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createExpression_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//Expression has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createExpression_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//Expression has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createExpression_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//Expression has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createExpression_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//Expression has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createExpression_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//Expression has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createExpression_as_value_in_Slot(castedContainer,metaElementID);
					}
					//Expression has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createExpression_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//Expression has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createExpression_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//Expression has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createExpression_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXTEND_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExtend(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Extend has extend as a containment
					case  umlPackage::USECASE_ATTRIBUTE_EXTEND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UseCase>(container);
						return this->createExtend_as_extend_in_UseCase(castedContainer,metaElementID);
					}
					//Extend has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExtend_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Extend has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExtend_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXTENSION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExtension(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Extension has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createExtension_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Extension has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createExtension_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Extension has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createExtension_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Extension has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExtension_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Extension has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExtension_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Extension has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExtension_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Extension has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExtension_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Extension has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createExtension_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Extension has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createExtension_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Extension has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createExtension_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXTENSIONEND_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExtensionEnd(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExtensionEnd has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createExtensionEnd_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedAttribute as a containment
					case  umlPackage::CLASS_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createExtensionEnd_as_ownedAttribute_in_Class(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedAttribute as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createExtensionEnd_as_ownedAttribute_in_Artifact(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedAttribute as a containment
					case  umlPackage::DATATYPE_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DataType>(container);
						return this->createExtensionEnd_as_ownedAttribute_in_DataType(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedAttribute as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createExtensionEnd_as_ownedAttribute_in_Interface(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedAttribute as a containment
					case  umlPackage::SIGNAL_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Signal>(container);
						return this->createExtensionEnd_as_ownedAttribute_in_Signal(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedAttribute as a containment
					case  umlPackage::STRUCTUREDCLASSIFIER_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredClassifier>(container);
						return this->createExtensionEnd_as_ownedAttribute_in_StructuredClassifier(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExtensionEnd_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExtensionEnd_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedEnd as a containment
					case  umlPackage::ASSOCIATION_ATTRIBUTE_OWNEDEND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Association>(container);
						return this->createExtensionEnd_as_ownedEnd_in_Association(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExtensionEnd_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ExtensionEnd has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createExtensionEnd_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ExtensionEnd has qualifier as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_QUALIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createExtensionEnd_as_qualifier_in_Property(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::EXTENSIONPOINT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createExtensionPoint(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ExtensionPoint has extensionPoint as a containment
					case  umlPackage::USECASE_ATTRIBUTE_EXTENSIONPOINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UseCase>(container);
						return this->createExtensionPoint_as_extensionPoint_in_UseCase(castedContainer,metaElementID);
					}
					//ExtensionPoint has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createExtensionPoint_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ExtensionPoint has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createExtensionPoint_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::FACTORY_CLASS:
		{
			if (nullptr == container)
			{
				return this->createFactory(metaElementID);
			}
			else
			{
				std::shared_ptr<Element> castedContainer = std::dynamic_pointer_cast<Element>(container);
				assert(castedContainer);
				return std::shared_ptr<uml::Factory>(this->createFactory_as_ownedElement_in_Element(castedContainer,metaElementID));
			}
			break;
		}
		case umlPackage::FINALSTATE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createFinalState(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//FinalState has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createFinalState_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//FinalState has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createFinalState_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//FinalState has subvertex as a containment
					case  umlPackage::REGION_ATTRIBUTE_SUBVERTEX:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Region>(container);
						return this->createFinalState_as_subvertex_in_Region(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::FLOWFINALNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createFlowFinalNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//FlowFinalNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createFlowFinalNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//FlowFinalNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createFlowFinalNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//FlowFinalNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createFlowFinalNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//FlowFinalNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createFlowFinalNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//FlowFinalNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createFlowFinalNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::FORKNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createForkNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ForkNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createForkNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ForkNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createForkNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ForkNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createForkNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ForkNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createForkNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ForkNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createForkNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::FUNCTIONBEHAVIOR_CLASS:
		{
			if (nullptr == container)
			{
				return this->createFunctionBehavior(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//FunctionBehavior has doActivity as a containment
					case  umlPackage::STATE_ATTRIBUTE_DOACTIVITY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createFunctionBehavior_as_doActivity_in_State(castedContainer,metaElementID);
					}
					//FunctionBehavior has effect as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_EFFECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createFunctionBehavior_as_effect_in_Transition(castedContainer,metaElementID);
					}
					//FunctionBehavior has entry as a containment
					case  umlPackage::STATE_ATTRIBUTE_ENTRY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createFunctionBehavior_as_entry_in_State(castedContainer,metaElementID);
					}
					//FunctionBehavior has exit as a containment
					case  umlPackage::STATE_ATTRIBUTE_EXIT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createFunctionBehavior_as_exit_in_State(castedContainer,metaElementID);
					}
					//FunctionBehavior has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createFunctionBehavior_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//FunctionBehavior has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createFunctionBehavior_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createFunctionBehavior_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedBehavior as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_OWNEDBEHAVIOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createFunctionBehavior_as_ownedBehavior_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createFunctionBehavior_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createFunctionBehavior_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createFunctionBehavior_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createFunctionBehavior_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//FunctionBehavior has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createFunctionBehavior_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//FunctionBehavior has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createFunctionBehavior_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//FunctionBehavior has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createFunctionBehavior_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::GATE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createGate(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Gate has actualGate as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ACTUALGATE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createGate_as_actualGate_in_InteractionUse(castedContainer,metaElementID);
					}
					//Gate has cfragmentGate as a containment
					case  umlPackage::COMBINEDFRAGMENT_ATTRIBUTE_CFRAGMENTGATE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CombinedFragment>(container);
						return this->createGate_as_cfragmentGate_in_CombinedFragment(castedContainer,metaElementID);
					}
					//Gate has formalGate as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FORMALGATE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createGate_as_formalGate_in_Interaction(castedContainer,metaElementID);
					}
					//Gate has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createGate_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Gate has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createGate_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::GENERALORDERING_CLASS:
		{
			if (nullptr == container)
			{
				return this->createGeneralOrdering(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//GeneralOrdering has generalOrdering as a containment
					case  umlPackage::INTERACTIONFRAGMENT_ATTRIBUTE_GENERALORDERING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionFragment>(container);
						return this->createGeneralOrdering_as_generalOrdering_in_InteractionFragment(castedContainer,metaElementID);
					}
					//GeneralOrdering has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createGeneralOrdering_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//GeneralOrdering has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createGeneralOrdering_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::GENERALIZATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createGeneralization(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Generalization has generalization as a containment
					case  umlPackage::CLASSIFIER_ATTRIBUTE_GENERALIZATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Classifier>(container);
						return this->createGeneralization_as_generalization_in_Classifier(castedContainer,metaElementID);
					}
					//Generalization has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createGeneralization_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::GENERALIZATIONSET_CLASS:
		{
			if (nullptr == container)
			{
				return this->createGeneralizationSet(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//GeneralizationSet has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createGeneralizationSet_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//GeneralizationSet has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createGeneralizationSet_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//GeneralizationSet has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createGeneralizationSet_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//GeneralizationSet has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createGeneralizationSet_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//GeneralizationSet has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createGeneralizationSet_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//GeneralizationSet has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createGeneralizationSet_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//GeneralizationSet has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createGeneralizationSet_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::IMAGE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createImage(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Image has icon as a containment
					case  umlPackage::STEREOTYPE_ATTRIBUTE_ICON:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Stereotype>(container);
						return this->createImage_as_icon_in_Stereotype(castedContainer,metaElementID);
					}
					//Image has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createImage_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INCLUDE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInclude(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Include has include as a containment
					case  umlPackage::USECASE_ATTRIBUTE_INCLUDE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UseCase>(container);
						return this->createInclude_as_include_in_UseCase(castedContainer,metaElementID);
					}
					//Include has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInclude_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Include has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInclude_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INFORMATIONFLOW_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInformationFlow(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InformationFlow has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInformationFlow_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//InformationFlow has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInformationFlow_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InformationFlow has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInformationFlow_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InformationFlow has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInformationFlow_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InformationFlow has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInformationFlow_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InformationFlow has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInformationFlow_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//InformationFlow has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInformationFlow_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INFORMATIONITEM_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInformationItem(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InformationItem has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createInformationItem_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//InformationItem has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createInformationItem_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//InformationItem has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInformationItem_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//InformationItem has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInformationItem_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InformationItem has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInformationItem_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InformationItem has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInformationItem_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InformationItem has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInformationItem_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InformationItem has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInformationItem_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//InformationItem has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInformationItem_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//InformationItem has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInformationItem_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INITIALNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInitialNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InitialNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createInitialNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//InitialNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createInitialNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//InitialNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInitialNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InitialNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInitialNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InitialNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createInitialNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INPUTPIN_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInputPin(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InputPin has argument as a containment
					case  umlPackage::INVOCATIONACTION_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InvocationAction>(container);
						return this->createInputPin_as_argument_in_InvocationAction(castedContainer,metaElementID);
					}
					//InputPin has collection as a containment
					case  umlPackage::REDUCEACTION_ATTRIBUTE_COLLECTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReduceAction>(container);
						return this->createInputPin_as_collection_in_ReduceAction(castedContainer,metaElementID);
					}
					//InputPin has exception as a containment
					case  umlPackage::RAISEEXCEPTIONACTION_ATTRIBUTE_EXCEPTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RaiseExceptionAction>(container);
						return this->createInputPin_as_exception_in_RaiseExceptionAction(castedContainer,metaElementID);
					}
					//InputPin has first as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_FIRST:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createInputPin_as_first_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//InputPin has input as a containment
					case  umlPackage::ACTION_ATTRIBUTE_INPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createInputPin_as_input_in_Action(castedContainer,metaElementID);
					}
					//InputPin has inputValue as a containment
					case  umlPackage::LINKACTION_ATTRIBUTE_INPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkAction>(container);
						return this->createInputPin_as_inputValue_in_LinkAction(castedContainer,metaElementID);
					}
					//InputPin has inputValue as a containment
					case  umlPackage::OPAQUEACTION_ATTRIBUTE_INPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<OpaqueAction>(container);
						return this->createInputPin_as_inputValue_in_OpaqueAction(castedContainer,metaElementID);
					}
					//InputPin has insertAt as a containment
					case  umlPackage::ADDSTRUCTURALFEATUREVALUEACTION_ATTRIBUTE_INSERTAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AddStructuralFeatureValueAction>(container);
						return this->createInputPin_as_insertAt_in_AddStructuralFeatureValueAction(castedContainer,metaElementID);
					}
					//InputPin has insertAt as a containment
					case  umlPackage::ADDVARIABLEVALUEACTION_ATTRIBUTE_INSERTAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AddVariableValueAction>(container);
						return this->createInputPin_as_insertAt_in_AddVariableValueAction(castedContainer,metaElementID);
					}
					//InputPin has loopVariableInput as a containment
					case  umlPackage::LOOPNODE_ATTRIBUTE_LOOPVARIABLEINPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LoopNode>(container);
						return this->createInputPin_as_loopVariableInput_in_LoopNode(castedContainer,metaElementID);
					}
					//InputPin has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createInputPin_as_node_in_Activity(castedContainer,metaElementID);
					}
					//InputPin has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createInputPin_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::STRUCTURALFEATUREACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuralFeatureAction>(container);
						return this->createInputPin_as_object_in_StructuralFeatureAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::CLEARASSOCIATIONACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ClearAssociationAction>(container);
						return this->createInputPin_as_object_in_ClearAssociationAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::READISCLASSIFIEDOBJECTACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadIsClassifiedObjectAction>(container);
						return this->createInputPin_as_object_in_ReadIsClassifiedObjectAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::READLINKOBJECTENDACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndAction>(container);
						return this->createInputPin_as_object_in_ReadLinkObjectEndAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::READLINKOBJECTENDQUALIFIERACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndQualifierAction>(container);
						return this->createInputPin_as_object_in_ReadLinkObjectEndQualifierAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::RECLASSIFYOBJECTACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReclassifyObjectAction>(container);
						return this->createInputPin_as_object_in_ReclassifyObjectAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::STARTCLASSIFIERBEHAVIORACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StartClassifierBehaviorAction>(container);
						return this->createInputPin_as_object_in_StartClassifierBehaviorAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::STARTOBJECTBEHAVIORACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StartObjectBehaviorAction>(container);
						return this->createInputPin_as_object_in_StartObjectBehaviorAction(castedContainer,metaElementID);
					}
					//InputPin has object as a containment
					case  umlPackage::UNMARSHALLACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UnmarshallAction>(container);
						return this->createInputPin_as_object_in_UnmarshallAction(castedContainer,metaElementID);
					}
					//InputPin has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInputPin_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InputPin has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInputPin_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InputPin has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createInputPin_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//InputPin has removeAt as a containment
					case  umlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_ATTRIBUTE_REMOVEAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RemoveStructuralFeatureValueAction>(container);
						return this->createInputPin_as_removeAt_in_RemoveStructuralFeatureValueAction(castedContainer,metaElementID);
					}
					//InputPin has removeAt as a containment
					case  umlPackage::REMOVEVARIABLEVALUEACTION_ATTRIBUTE_REMOVEAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RemoveVariableValueAction>(container);
						return this->createInputPin_as_removeAt_in_RemoveVariableValueAction(castedContainer,metaElementID);
					}
					//InputPin has replyValue as a containment
					case  umlPackage::REPLYACTION_ATTRIBUTE_REPLYVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReplyAction>(container);
						return this->createInputPin_as_replyValue_in_ReplyAction(castedContainer,metaElementID);
					}
					//InputPin has request as a containment
					case  umlPackage::SENDOBJECTACTION_ATTRIBUTE_REQUEST:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendObjectAction>(container);
						return this->createInputPin_as_request_in_SendObjectAction(castedContainer,metaElementID);
					}
					//InputPin has returnInformation as a containment
					case  umlPackage::REPLYACTION_ATTRIBUTE_RETURNINFORMATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReplyAction>(container);
						return this->createInputPin_as_returnInformation_in_ReplyAction(castedContainer,metaElementID);
					}
					//InputPin has second as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_SECOND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createInputPin_as_second_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//InputPin has structuredNodeInput as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_STRUCTUREDNODEINPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createInputPin_as_structuredNodeInput_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//InputPin has target as a containment
					case  umlPackage::CALLOPERATIONACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CallOperationAction>(container);
						return this->createInputPin_as_target_in_CallOperationAction(castedContainer,metaElementID);
					}
					//InputPin has target as a containment
					case  umlPackage::DESTROYOBJECTACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DestroyObjectAction>(container);
						return this->createInputPin_as_target_in_DestroyObjectAction(castedContainer,metaElementID);
					}
					//InputPin has target as a containment
					case  umlPackage::SENDOBJECTACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendObjectAction>(container);
						return this->createInputPin_as_target_in_SendObjectAction(castedContainer,metaElementID);
					}
					//InputPin has target as a containment
					case  umlPackage::SENDSIGNALACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendSignalAction>(container);
						return this->createInputPin_as_target_in_SendSignalAction(castedContainer,metaElementID);
					}
					//InputPin has value as a containment
					case  umlPackage::WRITESTRUCTURALFEATUREACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteStructuralFeatureAction>(container);
						return this->createInputPin_as_value_in_WriteStructuralFeatureAction(castedContainer,metaElementID);
					}
					//InputPin has value as a containment
					case  umlPackage::WRITEVARIABLEACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteVariableAction>(container);
						return this->createInputPin_as_value_in_WriteVariableAction(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INSTANCESPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInstanceSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InstanceSpecification has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInstanceSpecification_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//InstanceSpecification has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInstanceSpecification_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InstanceSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInstanceSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InstanceSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInstanceSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InstanceSpecification has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInstanceSpecification_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InstanceSpecification has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInstanceSpecification_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//InstanceSpecification has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInstanceSpecification_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INSTANCEVALUE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInstanceValue(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InstanceValue has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createInstanceValue_as_argument_in_Message(castedContainer,metaElementID);
					}
					//InstanceValue has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createInstanceValue_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//InstanceValue has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createInstanceValue_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//InstanceValue has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createInstanceValue_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//InstanceValue has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createInstanceValue_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//InstanceValue has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createInstanceValue_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//InstanceValue has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createInstanceValue_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//InstanceValue has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createInstanceValue_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//InstanceValue has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createInstanceValue_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//InstanceValue has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createInstanceValue_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//InstanceValue has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createInstanceValue_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//InstanceValue has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createInstanceValue_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//InstanceValue has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createInstanceValue_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//InstanceValue has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInstanceValue_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//InstanceValue has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInstanceValue_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InstanceValue has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInstanceValue_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InstanceValue has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInstanceValue_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InstanceValue has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInstanceValue_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InstanceValue has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInstanceValue_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//InstanceValue has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInstanceValue_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//InstanceValue has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createInstanceValue_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//InstanceValue has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createInstanceValue_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//InstanceValue has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createInstanceValue_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//InstanceValue has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createInstanceValue_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//InstanceValue has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createInstanceValue_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//InstanceValue has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createInstanceValue_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//InstanceValue has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createInstanceValue_as_value_in_Slot(castedContainer,metaElementID);
					}
					//InstanceValue has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createInstanceValue_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//InstanceValue has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createInstanceValue_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//InstanceValue has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createInstanceValue_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInteraction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Interaction has doActivity as a containment
					case  umlPackage::STATE_ATTRIBUTE_DOACTIVITY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createInteraction_as_doActivity_in_State(castedContainer,metaElementID);
					}
					//Interaction has effect as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_EFFECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createInteraction_as_effect_in_Transition(castedContainer,metaElementID);
					}
					//Interaction has entry as a containment
					case  umlPackage::STATE_ATTRIBUTE_ENTRY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createInteraction_as_entry_in_State(castedContainer,metaElementID);
					}
					//Interaction has exit as a containment
					case  umlPackage::STATE_ATTRIBUTE_EXIT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createInteraction_as_exit_in_State(castedContainer,metaElementID);
					}
					//Interaction has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createInteraction_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//Interaction has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createInteraction_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//Interaction has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createInteraction_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Interaction has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createInteraction_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Interaction has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInteraction_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Interaction has ownedBehavior as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_OWNEDBEHAVIOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createInteraction_as_ownedBehavior_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//Interaction has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInteraction_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Interaction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInteraction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Interaction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInteraction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Interaction has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInteraction_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Interaction has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInteraction_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Interaction has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInteraction_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Interaction has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInteraction_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERACTIONCONSTRAINT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInteractionConstraint(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InteractionConstraint has condition as a containment
					case  umlPackage::PARAMETERSET_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ParameterSet>(container);
						return this->createInteractionConstraint_as_condition_in_ParameterSet(castedContainer,metaElementID);
					}
					//InteractionConstraint has condition as a containment
					case  umlPackage::EXTEND_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Extend>(container);
						return this->createInteractionConstraint_as_condition_in_Extend(castedContainer,metaElementID);
					}
					//InteractionConstraint has guard as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createInteractionConstraint_as_guard_in_InteractionOperand(castedContainer,metaElementID);
					}
					//InteractionConstraint has invariant as a containment
					case  umlPackage::STATEINVARIANT_ATTRIBUTE_INVARIANT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateInvariant>(container);
						return this->createInteractionConstraint_as_invariant_in_StateInvariant(castedContainer,metaElementID);
					}
					//InteractionConstraint has localPostcondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPOSTCONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createInteractionConstraint_as_localPostcondition_in_Action(castedContainer,metaElementID);
					}
					//InteractionConstraint has localPrecondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPRECONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createInteractionConstraint_as_localPrecondition_in_Action(castedContainer,metaElementID);
					}
					//InteractionConstraint has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInteractionConstraint_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//InteractionConstraint has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInteractionConstraint_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InteractionConstraint has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInteractionConstraint_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InteractionConstraint has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInteractionConstraint_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InteractionConstraint has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInteractionConstraint_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InteractionConstraint has ownedRule as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDRULE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInteractionConstraint_as_ownedRule_in_Namespace(castedContainer,metaElementID);
					}
					//InteractionConstraint has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInteractionConstraint_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//InteractionConstraint has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInteractionConstraint_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERACTIONOPERAND_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInteractionOperand(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InteractionOperand has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createInteractionOperand_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//InteractionOperand has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createInteractionOperand_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//InteractionOperand has operand as a containment
					case  umlPackage::COMBINEDFRAGMENT_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CombinedFragment>(container);
						return this->createInteractionOperand_as_operand_in_CombinedFragment(castedContainer,metaElementID);
					}
					//InteractionOperand has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInteractionOperand_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InteractionOperand has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInteractionOperand_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERACTIONUSE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInteractionUse(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InteractionUse has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createInteractionUse_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//InteractionUse has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createInteractionUse_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//InteractionUse has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInteractionUse_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InteractionUse has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInteractionUse_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERFACE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInterface(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Interface has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createInterface_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Interface has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createInterface_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Interface has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInterface_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Interface has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInterface_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Interface has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInterface_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Interface has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInterface_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Interface has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInterface_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Interface has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInterface_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Interface has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInterface_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Interface has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInterface_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERFACEREALIZATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInterfaceRealization(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InterfaceRealization has interfaceRealization as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_INTERFACEREALIZATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createInterfaceRealization_as_interfaceRealization_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//InterfaceRealization has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInterfaceRealization_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//InterfaceRealization has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInterfaceRealization_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InterfaceRealization has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInterfaceRealization_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InterfaceRealization has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInterfaceRealization_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InterfaceRealization has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInterfaceRealization_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//InterfaceRealization has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInterfaceRealization_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//InterfaceRealization has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInterfaceRealization_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//InterfaceRealization has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createInterfaceRealization_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERRUPTIBLEACTIVITYREGION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInterruptibleActivityRegion(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//InterruptibleActivityRegion has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createInterruptibleActivityRegion_as_group_in_Activity(castedContainer,metaElementID);
					}
					//InterruptibleActivityRegion has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInterruptibleActivityRegion_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//InterruptibleActivityRegion has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createInterruptibleActivityRegion_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//InterruptibleActivityRegion has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInterruptibleActivityRegion_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//InterruptibleActivityRegion has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createInterruptibleActivityRegion_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERVAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createInterval(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Interval has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createInterval_as_argument_in_Message(castedContainer,metaElementID);
					}
					//Interval has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createInterval_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//Interval has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createInterval_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//Interval has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createInterval_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//Interval has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createInterval_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//Interval has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createInterval_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//Interval has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createInterval_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//Interval has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createInterval_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//Interval has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createInterval_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//Interval has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createInterval_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//Interval has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createInterval_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//Interval has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createInterval_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//Interval has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createInterval_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//Interval has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createInterval_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Interval has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInterval_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Interval has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createInterval_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Interval has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createInterval_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Interval has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createInterval_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Interval has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createInterval_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Interval has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createInterval_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Interval has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createInterval_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//Interval has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createInterval_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//Interval has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createInterval_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//Interval has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createInterval_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//Interval has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createInterval_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//Interval has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createInterval_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//Interval has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createInterval_as_value_in_Slot(castedContainer,metaElementID);
					}
					//Interval has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createInterval_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//Interval has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createInterval_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//Interval has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createInterval_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::INTERVALCONSTRAINT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createIntervalConstraint(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//IntervalConstraint has condition as a containment
					case  umlPackage::PARAMETERSET_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ParameterSet>(container);
						return this->createIntervalConstraint_as_condition_in_ParameterSet(castedContainer,metaElementID);
					}
					//IntervalConstraint has condition as a containment
					case  umlPackage::EXTEND_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Extend>(container);
						return this->createIntervalConstraint_as_condition_in_Extend(castedContainer,metaElementID);
					}
					//IntervalConstraint has invariant as a containment
					case  umlPackage::STATEINVARIANT_ATTRIBUTE_INVARIANT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateInvariant>(container);
						return this->createIntervalConstraint_as_invariant_in_StateInvariant(castedContainer,metaElementID);
					}
					//IntervalConstraint has localPostcondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPOSTCONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createIntervalConstraint_as_localPostcondition_in_Action(castedContainer,metaElementID);
					}
					//IntervalConstraint has localPrecondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPRECONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createIntervalConstraint_as_localPrecondition_in_Action(castedContainer,metaElementID);
					}
					//IntervalConstraint has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createIntervalConstraint_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//IntervalConstraint has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createIntervalConstraint_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//IntervalConstraint has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createIntervalConstraint_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//IntervalConstraint has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createIntervalConstraint_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//IntervalConstraint has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createIntervalConstraint_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//IntervalConstraint has ownedRule as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDRULE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createIntervalConstraint_as_ownedRule_in_Namespace(castedContainer,metaElementID);
					}
					//IntervalConstraint has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createIntervalConstraint_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//IntervalConstraint has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createIntervalConstraint_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::JOINNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createJoinNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//JoinNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createJoinNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//JoinNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createJoinNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//JoinNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createJoinNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//JoinNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createJoinNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//JoinNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createJoinNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LIFELINE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLifeline(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Lifeline has lifeline as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_LIFELINE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createLifeline_as_lifeline_in_Interaction(castedContainer,metaElementID);
					}
					//Lifeline has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLifeline_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Lifeline has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLifeline_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LINKENDCREATIONDATA_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLinkEndCreationData(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LinkEndCreationData has endData as a containment
					case  umlPackage::LINKACTION_ATTRIBUTE_ENDDATA:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkAction>(container);
						return this->createLinkEndCreationData_as_endData_in_LinkAction(castedContainer,metaElementID);
					}
					//LinkEndCreationData has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLinkEndCreationData_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LINKENDDATA_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLinkEndData(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LinkEndData has endData as a containment
					case  umlPackage::LINKACTION_ATTRIBUTE_ENDDATA:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkAction>(container);
						return this->createLinkEndData_as_endData_in_LinkAction(castedContainer,metaElementID);
					}
					//LinkEndData has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLinkEndData_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LINKENDDESTRUCTIONDATA_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLinkEndDestructionData(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LinkEndDestructionData has endData as a containment
					case  umlPackage::LINKACTION_ATTRIBUTE_ENDDATA:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkAction>(container);
						return this->createLinkEndDestructionData_as_endData_in_LinkAction(castedContainer,metaElementID);
					}
					//LinkEndDestructionData has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLinkEndDestructionData_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LITERALBOOLEAN_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLiteralBoolean(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LiteralBoolean has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createLiteralBoolean_as_argument_in_Message(castedContainer,metaElementID);
					}
					//LiteralBoolean has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralBoolean_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralBoolean has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createLiteralBoolean_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//LiteralBoolean has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createLiteralBoolean_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//LiteralBoolean has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createLiteralBoolean_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//LiteralBoolean has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createLiteralBoolean_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//LiteralBoolean has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createLiteralBoolean_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//LiteralBoolean has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralBoolean_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//LiteralBoolean has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createLiteralBoolean_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//LiteralBoolean has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralBoolean_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralBoolean has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralBoolean_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralBoolean has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralBoolean_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralBoolean has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createLiteralBoolean_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//LiteralBoolean has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createLiteralBoolean_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//LiteralBoolean has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralBoolean_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralBoolean has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLiteralBoolean_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LiteralBoolean has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLiteralBoolean_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LiteralBoolean has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralBoolean_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralBoolean has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createLiteralBoolean_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//LiteralBoolean has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createLiteralBoolean_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//LiteralBoolean has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralBoolean_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralBoolean has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createLiteralBoolean_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//LiteralBoolean has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createLiteralBoolean_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//LiteralBoolean has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createLiteralBoolean_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//LiteralBoolean has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createLiteralBoolean_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//LiteralBoolean has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralBoolean_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralBoolean has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createLiteralBoolean_as_value_in_Slot(castedContainer,metaElementID);
					}
					//LiteralBoolean has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createLiteralBoolean_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//LiteralBoolean has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createLiteralBoolean_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//LiteralBoolean has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralBoolean_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LITERALINTEGER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLiteralInteger(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LiteralInteger has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createLiteralInteger_as_argument_in_Message(castedContainer,metaElementID);
					}
					//LiteralInteger has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralInteger_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralInteger has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createLiteralInteger_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//LiteralInteger has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createLiteralInteger_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//LiteralInteger has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createLiteralInteger_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//LiteralInteger has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createLiteralInteger_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//LiteralInteger has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createLiteralInteger_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//LiteralInteger has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralInteger_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//LiteralInteger has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createLiteralInteger_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//LiteralInteger has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralInteger_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralInteger has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralInteger_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralInteger has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralInteger_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralInteger has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createLiteralInteger_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//LiteralInteger has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createLiteralInteger_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//LiteralInteger has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralInteger_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralInteger has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLiteralInteger_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LiteralInteger has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLiteralInteger_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LiteralInteger has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralInteger_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralInteger has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createLiteralInteger_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//LiteralInteger has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createLiteralInteger_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//LiteralInteger has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralInteger_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralInteger has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createLiteralInteger_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//LiteralInteger has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createLiteralInteger_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//LiteralInteger has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createLiteralInteger_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//LiteralInteger has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createLiteralInteger_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//LiteralInteger has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralInteger_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralInteger has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createLiteralInteger_as_value_in_Slot(castedContainer,metaElementID);
					}
					//LiteralInteger has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createLiteralInteger_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//LiteralInteger has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createLiteralInteger_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//LiteralInteger has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralInteger_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LITERALNULL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLiteralNull(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LiteralNull has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createLiteralNull_as_argument_in_Message(castedContainer,metaElementID);
					}
					//LiteralNull has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralNull_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralNull has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createLiteralNull_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//LiteralNull has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createLiteralNull_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//LiteralNull has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createLiteralNull_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//LiteralNull has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createLiteralNull_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//LiteralNull has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createLiteralNull_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//LiteralNull has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralNull_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//LiteralNull has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createLiteralNull_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//LiteralNull has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralNull_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralNull has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralNull_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralNull has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralNull_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralNull has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createLiteralNull_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//LiteralNull has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createLiteralNull_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//LiteralNull has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralNull_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralNull has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLiteralNull_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LiteralNull has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLiteralNull_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LiteralNull has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralNull_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralNull has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createLiteralNull_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//LiteralNull has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createLiteralNull_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//LiteralNull has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralNull_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralNull has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createLiteralNull_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//LiteralNull has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createLiteralNull_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//LiteralNull has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createLiteralNull_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//LiteralNull has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createLiteralNull_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//LiteralNull has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralNull_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralNull has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createLiteralNull_as_value_in_Slot(castedContainer,metaElementID);
					}
					//LiteralNull has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createLiteralNull_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//LiteralNull has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createLiteralNull_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//LiteralNull has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralNull_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LITERALREAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLiteralReal(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LiteralReal has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createLiteralReal_as_argument_in_Message(castedContainer,metaElementID);
					}
					//LiteralReal has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralReal_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralReal has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createLiteralReal_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//LiteralReal has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createLiteralReal_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//LiteralReal has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createLiteralReal_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//LiteralReal has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createLiteralReal_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//LiteralReal has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createLiteralReal_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//LiteralReal has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralReal_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//LiteralReal has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createLiteralReal_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//LiteralReal has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralReal_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralReal has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralReal_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralReal has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralReal_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralReal has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createLiteralReal_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//LiteralReal has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createLiteralReal_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//LiteralReal has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralReal_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralReal has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLiteralReal_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LiteralReal has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLiteralReal_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LiteralReal has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralReal_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralReal has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createLiteralReal_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//LiteralReal has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createLiteralReal_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//LiteralReal has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralReal_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralReal has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createLiteralReal_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//LiteralReal has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createLiteralReal_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//LiteralReal has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createLiteralReal_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//LiteralReal has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createLiteralReal_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//LiteralReal has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralReal_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralReal has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createLiteralReal_as_value_in_Slot(castedContainer,metaElementID);
					}
					//LiteralReal has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createLiteralReal_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//LiteralReal has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createLiteralReal_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//LiteralReal has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralReal_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LITERALSTRING_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLiteralString(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LiteralString has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createLiteralString_as_argument_in_Message(castedContainer,metaElementID);
					}
					//LiteralString has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralString_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralString has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createLiteralString_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//LiteralString has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createLiteralString_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//LiteralString has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createLiteralString_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//LiteralString has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createLiteralString_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//LiteralString has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createLiteralString_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//LiteralString has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralString_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//LiteralString has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createLiteralString_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//LiteralString has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralString_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralString has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralString_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralString has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralString_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralString has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createLiteralString_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//LiteralString has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createLiteralString_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//LiteralString has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralString_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralString has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLiteralString_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LiteralString has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLiteralString_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LiteralString has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralString_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralString has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createLiteralString_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//LiteralString has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createLiteralString_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//LiteralString has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralString_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralString has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createLiteralString_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//LiteralString has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createLiteralString_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//LiteralString has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createLiteralString_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//LiteralString has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createLiteralString_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//LiteralString has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralString_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralString has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createLiteralString_as_value_in_Slot(castedContainer,metaElementID);
					}
					//LiteralString has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createLiteralString_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//LiteralString has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createLiteralString_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//LiteralString has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralString_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LITERALUNLIMITEDNATURAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLiteralUnlimitedNatural(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LiteralUnlimitedNatural has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createLiteralUnlimitedNatural_as_argument_in_Message(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralUnlimitedNatural_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createLiteralUnlimitedNatural_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createLiteralUnlimitedNatural_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createLiteralUnlimitedNatural_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createLiteralUnlimitedNatural_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createLiteralUnlimitedNatural_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralUnlimitedNatural_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createLiteralUnlimitedNatural_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralUnlimitedNatural_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralUnlimitedNatural_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createLiteralUnlimitedNatural_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createLiteralUnlimitedNatural_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createLiteralUnlimitedNatural_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralUnlimitedNatural_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLiteralUnlimitedNatural_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLiteralUnlimitedNatural_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createLiteralUnlimitedNatural_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createLiteralUnlimitedNatural_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createLiteralUnlimitedNatural_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createLiteralUnlimitedNatural_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createLiteralUnlimitedNatural_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createLiteralUnlimitedNatural_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createLiteralUnlimitedNatural_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createLiteralUnlimitedNatural_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createLiteralUnlimitedNatural_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createLiteralUnlimitedNatural_as_value_in_Slot(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createLiteralUnlimitedNatural_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createLiteralUnlimitedNatural_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//LiteralUnlimitedNatural has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createLiteralUnlimitedNatural_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::LOOPNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createLoopNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//LoopNode has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createLoopNode_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//LoopNode has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createLoopNode_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//LoopNode has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createLoopNode_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//LoopNode has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createLoopNode_as_group_in_Activity(castedContainer,metaElementID);
					}
					//LoopNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createLoopNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//LoopNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createLoopNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//LoopNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createLoopNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//LoopNode has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createLoopNode_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//LoopNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createLoopNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//LoopNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createLoopNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//LoopNode has structuredNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_STRUCTUREDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createLoopNode_as_structuredNode_in_Activity(castedContainer,metaElementID);
					}
					//LoopNode has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createLoopNode_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::MANIFESTATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createManifestation(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Manifestation has manifestation as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_MANIFESTATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createManifestation_as_manifestation_in_Artifact(castedContainer,metaElementID);
					}
					//Manifestation has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createManifestation_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Manifestation has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createManifestation_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Manifestation has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createManifestation_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Manifestation has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createManifestation_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Manifestation has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createManifestation_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Manifestation has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createManifestation_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Manifestation has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createManifestation_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Manifestation has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createManifestation_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::MERGENODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createMergeNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//MergeNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createMergeNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//MergeNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createMergeNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//MergeNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createMergeNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//MergeNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createMergeNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//MergeNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createMergeNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::MESSAGE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createMessage(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Message has message as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_MESSAGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createMessage_as_message_in_Interaction(castedContainer,metaElementID);
					}
					//Message has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createMessage_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Message has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createMessage_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::MESSAGEOCCURRENCESPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createMessageOccurrenceSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//MessageOccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createMessageOccurrenceSpecification_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//MessageOccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createMessageOccurrenceSpecification_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//MessageOccurrenceSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createMessageOccurrenceSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//MessageOccurrenceSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createMessageOccurrenceSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::MODEL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createModel(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Model has nestedPackage as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_NESTEDPACKAGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createModel_as_nestedPackage_in_Package(castedContainer,metaElementID);
					}
					//Model has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createModel_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Model has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createModel_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Model has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createModel_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Model has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createModel_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Model has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createModel_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Model has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createModel_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Model has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createModel_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::NODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Node has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createNode_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Node has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createNode_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Node has nestedNode as a containment
					case  umlPackage::NODE_ATTRIBUTE_NESTEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Node>(container);
						return this->createNode_as_nestedNode_in_Node(castedContainer,metaElementID);
					}
					//Node has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createNode_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Node has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createNode_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Node has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Node has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Node has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createNode_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Node has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createNode_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Node has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createNode_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Node has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createNode_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OBJECT_CLASS:
		{
				return this->createObject(metaElementID);
			
			break;
		}
		case umlPackage::OBJECTFLOW_CLASS:
		{
			if (nullptr == container)
			{
				return this->createObjectFlow(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ObjectFlow has edge as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_EDGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createObjectFlow_as_edge_in_Activity(castedContainer,metaElementID);
					}
					//ObjectFlow has edge as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_EDGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createObjectFlow_as_edge_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ObjectFlow has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createObjectFlow_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ObjectFlow has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createObjectFlow_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OCCURRENCESPECIFICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOccurrenceSpecification(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//OccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createOccurrenceSpecification_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//OccurrenceSpecification has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createOccurrenceSpecification_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//OccurrenceSpecification has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOccurrenceSpecification_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//OccurrenceSpecification has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createOccurrenceSpecification_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OPAQUEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOpaqueAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//OpaqueAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createOpaqueAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//OpaqueAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createOpaqueAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//OpaqueAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createOpaqueAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//OpaqueAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createOpaqueAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//OpaqueAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createOpaqueAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//OpaqueAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOpaqueAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//OpaqueAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createOpaqueAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//OpaqueAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createOpaqueAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OPAQUEBEHAVIOR_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOpaqueBehavior(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//OpaqueBehavior has doActivity as a containment
					case  umlPackage::STATE_ATTRIBUTE_DOACTIVITY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createOpaqueBehavior_as_doActivity_in_State(castedContainer,metaElementID);
					}
					//OpaqueBehavior has effect as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_EFFECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createOpaqueBehavior_as_effect_in_Transition(castedContainer,metaElementID);
					}
					//OpaqueBehavior has entry as a containment
					case  umlPackage::STATE_ATTRIBUTE_ENTRY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createOpaqueBehavior_as_entry_in_State(castedContainer,metaElementID);
					}
					//OpaqueBehavior has exit as a containment
					case  umlPackage::STATE_ATTRIBUTE_EXIT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createOpaqueBehavior_as_exit_in_State(castedContainer,metaElementID);
					}
					//OpaqueBehavior has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createOpaqueBehavior_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//OpaqueBehavior has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createOpaqueBehavior_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createOpaqueBehavior_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedBehavior as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_OWNEDBEHAVIOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createOpaqueBehavior_as_ownedBehavior_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createOpaqueBehavior_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOpaqueBehavior_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createOpaqueBehavior_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createOpaqueBehavior_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//OpaqueBehavior has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createOpaqueBehavior_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//OpaqueBehavior has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createOpaqueBehavior_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//OpaqueBehavior has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createOpaqueBehavior_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OPAQUEEXPRESSION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOpaqueExpression(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//OpaqueExpression has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createOpaqueExpression_as_argument_in_Message(castedContainer,metaElementID);
					}
					//OpaqueExpression has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createOpaqueExpression_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//OpaqueExpression has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createOpaqueExpression_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//OpaqueExpression has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createOpaqueExpression_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//OpaqueExpression has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createOpaqueExpression_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//OpaqueExpression has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createOpaqueExpression_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//OpaqueExpression has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createOpaqueExpression_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//OpaqueExpression has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createOpaqueExpression_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//OpaqueExpression has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createOpaqueExpression_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//OpaqueExpression has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createOpaqueExpression_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//OpaqueExpression has mapping as a containment
					case  umlPackage::ABSTRACTION_ATTRIBUTE_MAPPING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Abstraction>(container);
						return this->createOpaqueExpression_as_mapping_in_Abstraction(castedContainer,metaElementID);
					}
					//OpaqueExpression has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createOpaqueExpression_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//OpaqueExpression has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createOpaqueExpression_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//OpaqueExpression has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createOpaqueExpression_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//OpaqueExpression has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createOpaqueExpression_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//OpaqueExpression has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createOpaqueExpression_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//OpaqueExpression has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOpaqueExpression_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//OpaqueExpression has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createOpaqueExpression_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//OpaqueExpression has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createOpaqueExpression_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//OpaqueExpression has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createOpaqueExpression_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//OpaqueExpression has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createOpaqueExpression_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//OpaqueExpression has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createOpaqueExpression_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//OpaqueExpression has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createOpaqueExpression_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//OpaqueExpression has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createOpaqueExpression_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//OpaqueExpression has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createOpaqueExpression_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//OpaqueExpression has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createOpaqueExpression_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//OpaqueExpression has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createOpaqueExpression_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//OpaqueExpression has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createOpaqueExpression_as_value_in_Slot(castedContainer,metaElementID);
					}
					//OpaqueExpression has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createOpaqueExpression_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//OpaqueExpression has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createOpaqueExpression_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//OpaqueExpression has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createOpaqueExpression_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OPERATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOperation(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Operation has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createOperation_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Operation has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createOperation_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Operation has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOperation_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Operation has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createOperation_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Operation has ownedOperation as a containment
					case  umlPackage::CLASS_ATTRIBUTE_OWNEDOPERATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createOperation_as_ownedOperation_in_Class(castedContainer,metaElementID);
					}
					//Operation has ownedOperation as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_OWNEDOPERATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createOperation_as_ownedOperation_in_Artifact(castedContainer,metaElementID);
					}
					//Operation has ownedOperation as a containment
					case  umlPackage::DATATYPE_ATTRIBUTE_OWNEDOPERATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DataType>(container);
						return this->createOperation_as_ownedOperation_in_DataType(castedContainer,metaElementID);
					}
					//Operation has ownedOperation as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_OWNEDOPERATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createOperation_as_ownedOperation_in_Interface(castedContainer,metaElementID);
					}
					//Operation has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createOperation_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OPERATIONTEMPLATEPARAMETER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOperationTemplateParameter(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//OperationTemplateParameter has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOperationTemplateParameter_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//OperationTemplateParameter has ownedParameter as a containment
					case  umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateSignature>(container);
						return this->createOperationTemplateParameter_as_ownedParameter_in_TemplateSignature(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::OUTPUTPIN_CLASS:
		{
			if (nullptr == container)
			{
				return this->createOutputPin(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//OutputPin has loopVariable as a containment
					case  umlPackage::LOOPNODE_ATTRIBUTE_LOOPVARIABLE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LoopNode>(container);
						return this->createOutputPin_as_loopVariable_in_LoopNode(castedContainer,metaElementID);
					}
					//OutputPin has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createOutputPin_as_node_in_Activity(castedContainer,metaElementID);
					}
					//OutputPin has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createOutputPin_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//OutputPin has output as a containment
					case  umlPackage::ACTION_ATTRIBUTE_OUTPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createOutputPin_as_output_in_Action(castedContainer,metaElementID);
					}
					//OutputPin has outputValue as a containment
					case  umlPackage::OPAQUEACTION_ATTRIBUTE_OUTPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<OpaqueAction>(container);
						return this->createOutputPin_as_outputValue_in_OpaqueAction(castedContainer,metaElementID);
					}
					//OutputPin has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createOutputPin_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//OutputPin has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createOutputPin_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//OutputPin has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createOutputPin_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createOutputPin_as_result_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::WRITESTRUCTURALFEATUREACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteStructuralFeatureAction>(container);
						return this->createOutputPin_as_result_in_WriteStructuralFeatureAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::ACCEPTEVENTACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AcceptEventAction>(container);
						return this->createOutputPin_as_result_in_AcceptEventAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::CALLACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CallAction>(container);
						return this->createOutputPin_as_result_in_CallAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::CLEARSTRUCTURALFEATUREACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ClearStructuralFeatureAction>(container);
						return this->createOutputPin_as_result_in_ClearStructuralFeatureAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::CONDITIONALNODE_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ConditionalNode>(container);
						return this->createOutputPin_as_result_in_ConditionalNode(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::CREATELINKOBJECTACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CreateLinkObjectAction>(container);
						return this->createOutputPin_as_result_in_CreateLinkObjectAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::CREATEOBJECTACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CreateObjectAction>(container);
						return this->createOutputPin_as_result_in_CreateObjectAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::LOOPNODE_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LoopNode>(container);
						return this->createOutputPin_as_result_in_LoopNode(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READEXTENTACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadExtentAction>(container);
						return this->createOutputPin_as_result_in_ReadExtentAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READISCLASSIFIEDOBJECTACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadIsClassifiedObjectAction>(container);
						return this->createOutputPin_as_result_in_ReadIsClassifiedObjectAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READLINKACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkAction>(container);
						return this->createOutputPin_as_result_in_ReadLinkAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READLINKOBJECTENDACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndAction>(container);
						return this->createOutputPin_as_result_in_ReadLinkObjectEndAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READLINKOBJECTENDQUALIFIERACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndQualifierAction>(container);
						return this->createOutputPin_as_result_in_ReadLinkObjectEndQualifierAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READSELFACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadSelfAction>(container);
						return this->createOutputPin_as_result_in_ReadSelfAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READSTRUCTURALFEATUREACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadStructuralFeatureAction>(container);
						return this->createOutputPin_as_result_in_ReadStructuralFeatureAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::READVARIABLEACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadVariableAction>(container);
						return this->createOutputPin_as_result_in_ReadVariableAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::REDUCEACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReduceAction>(container);
						return this->createOutputPin_as_result_in_ReduceAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createOutputPin_as_result_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//OutputPin has result as a containment
					case  umlPackage::UNMARSHALLACTION_ATTRIBUTE_RESULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UnmarshallAction>(container);
						return this->createOutputPin_as_result_in_UnmarshallAction(castedContainer,metaElementID);
					}
					//OutputPin has returnInformation as a containment
					case  umlPackage::ACCEPTCALLACTION_ATTRIBUTE_RETURNINFORMATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AcceptCallAction>(container);
						return this->createOutputPin_as_returnInformation_in_AcceptCallAction(castedContainer,metaElementID);
					}
					//OutputPin has structuredNodeOutput as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_STRUCTUREDNODEOUTPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createOutputPin_as_structuredNodeOutput_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PACKAGE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPackage(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Package has nestedPackage as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_NESTEDPACKAGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createPackage_as_nestedPackage_in_Package(castedContainer,metaElementID);
					}
					//Package has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createPackage_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Package has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createPackage_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Package has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPackage_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Package has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createPackage_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Package has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createPackage_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Package has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createPackage_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Package has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createPackage_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PACKAGEIMPORT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPackageImport(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//PackageImport has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPackageImport_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//PackageImport has packageImport as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_PACKAGEIMPORT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createPackageImport_as_packageImport_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PACKAGEMERGE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPackageMerge(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//PackageMerge has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPackageMerge_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//PackageMerge has packageMerge as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEMERGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createPackageMerge_as_packageMerge_in_Package(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PARAMETER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createParameter(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Parameter has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createParameter_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Parameter has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createParameter_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Parameter has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createParameter_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Parameter has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createParameter_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Parameter has ownedParameter as a containment
					case  umlPackage::BEHAVIOR_ATTRIBUTE_OWNEDPARAMETER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Behavior>(container);
						return this->createParameter_as_ownedParameter_in_Behavior(castedContainer,metaElementID);
					}
					//Parameter has ownedParameter as a containment
					case  umlPackage::BEHAVIORALFEATURE_ATTRIBUTE_OWNEDPARAMETER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioralFeature>(container);
						return this->createParameter_as_ownedParameter_in_BehavioralFeature(castedContainer,metaElementID);
					}
					//Parameter has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createParameter_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PARAMETERSET_CLASS:
		{
			if (nullptr == container)
			{
				return this->createParameterSet(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ParameterSet has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createParameterSet_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ParameterSet has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createParameterSet_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ParameterSet has ownedParameterSet as a containment
					case  umlPackage::BEHAVIOR_ATTRIBUTE_OWNEDPARAMETERSET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Behavior>(container);
						return this->createParameterSet_as_ownedParameterSet_in_Behavior(castedContainer,metaElementID);
					}
					//ParameterSet has ownedParameterSet as a containment
					case  umlPackage::BEHAVIORALFEATURE_ATTRIBUTE_OWNEDPARAMETERSET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioralFeature>(container);
						return this->createParameterSet_as_ownedParameterSet_in_BehavioralFeature(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PARTDECOMPOSITION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPartDecomposition(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//PartDecomposition has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createPartDecomposition_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//PartDecomposition has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createPartDecomposition_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//PartDecomposition has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPartDecomposition_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//PartDecomposition has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createPartDecomposition_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PORT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPort(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Port has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createPort_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Port has ownedAttribute as a containment
					case  umlPackage::CLASS_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createPort_as_ownedAttribute_in_Class(castedContainer,metaElementID);
					}
					//Port has ownedAttribute as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createPort_as_ownedAttribute_in_Artifact(castedContainer,metaElementID);
					}
					//Port has ownedAttribute as a containment
					case  umlPackage::DATATYPE_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DataType>(container);
						return this->createPort_as_ownedAttribute_in_DataType(castedContainer,metaElementID);
					}
					//Port has ownedAttribute as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createPort_as_ownedAttribute_in_Interface(castedContainer,metaElementID);
					}
					//Port has ownedAttribute as a containment
					case  umlPackage::SIGNAL_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Signal>(container);
						return this->createPort_as_ownedAttribute_in_Signal(castedContainer,metaElementID);
					}
					//Port has ownedAttribute as a containment
					case  umlPackage::STRUCTUREDCLASSIFIER_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredClassifier>(container);
						return this->createPort_as_ownedAttribute_in_StructuredClassifier(castedContainer,metaElementID);
					}
					//Port has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createPort_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Port has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPort_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Port has ownedEnd as a containment
					case  umlPackage::ASSOCIATION_ATTRIBUTE_OWNEDEND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Association>(container);
						return this->createPort_as_ownedEnd_in_Association(castedContainer,metaElementID);
					}
					//Port has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createPort_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Port has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createPort_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Port has qualifier as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_QUALIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createPort_as_qualifier_in_Property(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PRIMITIVETYPE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPrimitiveType(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//PrimitiveType has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createPrimitiveType_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//PrimitiveType has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createPrimitiveType_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//PrimitiveType has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createPrimitiveType_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//PrimitiveType has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createPrimitiveType_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//PrimitiveType has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPrimitiveType_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//PrimitiveType has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createPrimitiveType_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//PrimitiveType has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createPrimitiveType_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//PrimitiveType has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createPrimitiveType_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//PrimitiveType has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createPrimitiveType_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//PrimitiveType has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createPrimitiveType_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PROFILE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createProfile(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Profile has nestedPackage as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_NESTEDPACKAGE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createProfile_as_nestedPackage_in_Package(castedContainer,metaElementID);
					}
					//Profile has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createProfile_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Profile has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createProfile_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Profile has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createProfile_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Profile has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createProfile_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Profile has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createProfile_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Profile has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createProfile_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Profile has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createProfile_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PROFILEAPPLICATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createProfileApplication(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ProfileApplication has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createProfileApplication_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ProfileApplication has profileApplication as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PROFILEAPPLICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createProfileApplication_as_profileApplication_in_Package(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PROPERTY_CLASS:
		{
			if (nullptr == container)
			{
				return this->createProperty(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Property has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createProperty_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Property has ownedAttribute as a containment
					case  umlPackage::CLASS_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createProperty_as_ownedAttribute_in_Class(castedContainer,metaElementID);
					}
					//Property has ownedAttribute as a containment
					case  umlPackage::ARTIFACT_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Artifact>(container);
						return this->createProperty_as_ownedAttribute_in_Artifact(castedContainer,metaElementID);
					}
					//Property has ownedAttribute as a containment
					case  umlPackage::DATATYPE_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DataType>(container);
						return this->createProperty_as_ownedAttribute_in_DataType(castedContainer,metaElementID);
					}
					//Property has ownedAttribute as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createProperty_as_ownedAttribute_in_Interface(castedContainer,metaElementID);
					}
					//Property has ownedAttribute as a containment
					case  umlPackage::SIGNAL_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Signal>(container);
						return this->createProperty_as_ownedAttribute_in_Signal(castedContainer,metaElementID);
					}
					//Property has ownedAttribute as a containment
					case  umlPackage::STRUCTUREDCLASSIFIER_ATTRIBUTE_OWNEDATTRIBUTE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredClassifier>(container);
						return this->createProperty_as_ownedAttribute_in_StructuredClassifier(castedContainer,metaElementID);
					}
					//Property has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createProperty_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Property has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createProperty_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Property has ownedEnd as a containment
					case  umlPackage::ASSOCIATION_ATTRIBUTE_OWNEDEND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Association>(container);
						return this->createProperty_as_ownedEnd_in_Association(castedContainer,metaElementID);
					}
					//Property has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createProperty_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Property has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createProperty_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Property has qualifier as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_QUALIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createProperty_as_qualifier_in_Property(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PROTOCOLCONFORMANCE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createProtocolConformance(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ProtocolConformance has conformance as a containment
					case  umlPackage::PROTOCOLSTATEMACHINE_ATTRIBUTE_CONFORMANCE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ProtocolStateMachine>(container);
						return this->createProtocolConformance_as_conformance_in_ProtocolStateMachine(castedContainer,metaElementID);
					}
					//ProtocolConformance has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createProtocolConformance_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PROTOCOLSTATEMACHINE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createProtocolStateMachine(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ProtocolStateMachine has doActivity as a containment
					case  umlPackage::STATE_ATTRIBUTE_DOACTIVITY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createProtocolStateMachine_as_doActivity_in_State(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has effect as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_EFFECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createProtocolStateMachine_as_effect_in_Transition(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has entry as a containment
					case  umlPackage::STATE_ATTRIBUTE_ENTRY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createProtocolStateMachine_as_entry_in_State(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has exit as a containment
					case  umlPackage::STATE_ATTRIBUTE_EXIT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createProtocolStateMachine_as_exit_in_State(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createProtocolStateMachine_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createProtocolStateMachine_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createProtocolStateMachine_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedBehavior as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_OWNEDBEHAVIOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createProtocolStateMachine_as_ownedBehavior_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createProtocolStateMachine_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createProtocolStateMachine_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createProtocolStateMachine_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createProtocolStateMachine_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createProtocolStateMachine_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createProtocolStateMachine_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createProtocolStateMachine_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//ProtocolStateMachine has protocol as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_PROTOCOL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createProtocolStateMachine_as_protocol_in_Interface(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PROTOCOLTRANSITION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createProtocolTransition(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ProtocolTransition has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createProtocolTransition_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ProtocolTransition has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createProtocolTransition_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ProtocolTransition has transition as a containment
					case  umlPackage::REGION_ATTRIBUTE_TRANSITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Region>(container);
						return this->createProtocolTransition_as_transition_in_Region(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::PSEUDOSTATE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createPseudostate(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Pseudostate has connectionPoint as a containment
					case  umlPackage::STATEMACHINE_ATTRIBUTE_CONNECTIONPOINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateMachine>(container);
						return this->createPseudostate_as_connectionPoint_in_StateMachine(castedContainer,metaElementID);
					}
					//Pseudostate has connectionPoint as a containment
					case  umlPackage::STATE_ATTRIBUTE_CONNECTIONPOINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createPseudostate_as_connectionPoint_in_State(castedContainer,metaElementID);
					}
					//Pseudostate has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createPseudostate_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Pseudostate has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createPseudostate_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Pseudostate has subvertex as a containment
					case  umlPackage::REGION_ATTRIBUTE_SUBVERTEX:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Region>(container);
						return this->createPseudostate_as_subvertex_in_Region(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::QUALIFIERVALUE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createQualifierValue(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//QualifierValue has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createQualifierValue_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//QualifierValue has qualifier as a containment
					case  umlPackage::LINKENDDATA_ATTRIBUTE_QUALIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkEndData>(container);
						return this->createQualifierValue_as_qualifier_in_LinkEndData(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::RAISEEXCEPTIONACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createRaiseExceptionAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//RaiseExceptionAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createRaiseExceptionAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createRaiseExceptionAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createRaiseExceptionAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createRaiseExceptionAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createRaiseExceptionAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createRaiseExceptionAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createRaiseExceptionAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//RaiseExceptionAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createRaiseExceptionAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READEXTENTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadExtentAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadExtentAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadExtentAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadExtentAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadExtentAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadExtentAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadExtentAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadExtentAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadExtentAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadExtentAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadExtentAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadExtentAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadExtentAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadExtentAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadExtentAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadExtentAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadExtentAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READISCLASSIFIEDOBJECTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadIsClassifiedObjectAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadIsClassifiedObjectAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadIsClassifiedObjectAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadIsClassifiedObjectAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadIsClassifiedObjectAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadIsClassifiedObjectAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadIsClassifiedObjectAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadIsClassifiedObjectAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadIsClassifiedObjectAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadIsClassifiedObjectAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadIsClassifiedObjectAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READLINKACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadLinkAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadLinkAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadLinkAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadLinkAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadLinkAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadLinkAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadLinkAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadLinkAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadLinkAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadLinkAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadLinkAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadLinkAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadLinkAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadLinkAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadLinkAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadLinkAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadLinkAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READLINKOBJECTENDACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadLinkObjectEndAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadLinkObjectEndAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadLinkObjectEndAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadLinkObjectEndAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadLinkObjectEndAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadLinkObjectEndAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadLinkObjectEndAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadLinkObjectEndAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadLinkObjectEndAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadLinkObjectEndAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READLINKOBJECTENDQUALIFIERACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadLinkObjectEndQualifierAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadLinkObjectEndQualifierAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadLinkObjectEndQualifierAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadLinkObjectEndQualifierAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadLinkObjectEndQualifierAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadLinkObjectEndQualifierAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadLinkObjectEndQualifierAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadLinkObjectEndQualifierAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadLinkObjectEndQualifierAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadLinkObjectEndQualifierAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadLinkObjectEndQualifierAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READSELFACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadSelfAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadSelfAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadSelfAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadSelfAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadSelfAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadSelfAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadSelfAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadSelfAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadSelfAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadSelfAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadSelfAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadSelfAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadSelfAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadSelfAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadSelfAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadSelfAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadSelfAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READSTRUCTURALFEATUREACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadStructuralFeatureAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadStructuralFeatureAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadStructuralFeatureAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadStructuralFeatureAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadStructuralFeatureAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadStructuralFeatureAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadStructuralFeatureAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadStructuralFeatureAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadStructuralFeatureAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadStructuralFeatureAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadStructuralFeatureAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::READVARIABLEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReadVariableAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReadVariableAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReadVariableAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReadVariableAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReadVariableAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReadVariableAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReadVariableAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReadVariableAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadVariableAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReadVariableAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReadVariableAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReadVariableAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReadVariableAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReadVariableAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReadVariableAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReadVariableAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReadVariableAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REALIZATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createRealization(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Realization has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createRealization_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Realization has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createRealization_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Realization has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createRealization_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Realization has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createRealization_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Realization has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createRealization_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Realization has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createRealization_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Realization has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createRealization_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Realization has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createRealization_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::RECEPTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReception(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Reception has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReception_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Reception has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReception_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Reception has ownedReception as a containment
					case  umlPackage::CLASS_ATTRIBUTE_OWNEDRECEPTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createReception_as_ownedReception_in_Class(castedContainer,metaElementID);
					}
					//Reception has ownedReception as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_OWNEDRECEPTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createReception_as_ownedReception_in_Interface(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::RECLASSIFYOBJECTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReclassifyObjectAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReclassifyObjectAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReclassifyObjectAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReclassifyObjectAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReclassifyObjectAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReclassifyObjectAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReclassifyObjectAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReclassifyObjectAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReclassifyObjectAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReclassifyObjectAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReclassifyObjectAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REDEFINABLETEMPLATESIGNATURE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createRedefinableTemplateSignature(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//RedefinableTemplateSignature has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createRedefinableTemplateSignature_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//RedefinableTemplateSignature has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createRedefinableTemplateSignature_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//RedefinableTemplateSignature has ownedTemplateSignature as a containment
					case  umlPackage::TEMPLATEABLEELEMENT_ATTRIBUTE_OWNEDTEMPLATESIGNATURE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateableElement>(container);
						return this->createRedefinableTemplateSignature_as_ownedTemplateSignature_in_TemplateableElement(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REDUCEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReduceAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReduceAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReduceAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReduceAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReduceAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReduceAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReduceAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReduceAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReduceAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReduceAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReduceAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReduceAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReduceAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReduceAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReduceAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReduceAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReduceAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REGION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createRegion(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Region has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createRegion_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Region has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createRegion_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Region has region as a containment
					case  umlPackage::STATEMACHINE_ATTRIBUTE_REGION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateMachine>(container);
						return this->createRegion_as_region_in_StateMachine(castedContainer,metaElementID);
					}
					//Region has region as a containment
					case  umlPackage::STATE_ATTRIBUTE_REGION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createRegion_as_region_in_State(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createRemoveStructuralFeatureValueAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//RemoveStructuralFeatureValueAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createRemoveStructuralFeatureValueAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createRemoveStructuralFeatureValueAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createRemoveStructuralFeatureValueAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createRemoveStructuralFeatureValueAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createRemoveStructuralFeatureValueAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createRemoveStructuralFeatureValueAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createRemoveStructuralFeatureValueAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//RemoveStructuralFeatureValueAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createRemoveStructuralFeatureValueAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REMOVEVARIABLEVALUEACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createRemoveVariableValueAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//RemoveVariableValueAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createRemoveVariableValueAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createRemoveVariableValueAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createRemoveVariableValueAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createRemoveVariableValueAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createRemoveVariableValueAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createRemoveVariableValueAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createRemoveVariableValueAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//RemoveVariableValueAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createRemoveVariableValueAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::REPLYACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createReplyAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ReplyAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createReplyAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ReplyAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createReplyAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ReplyAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createReplyAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ReplyAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReplyAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ReplyAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createReplyAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ReplyAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createReplyAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ReplyAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createReplyAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ReplyAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createReplyAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SENDOBJECTACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSendObjectAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//SendObjectAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createSendObjectAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//SendObjectAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createSendObjectAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//SendObjectAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createSendObjectAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//SendObjectAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSendObjectAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//SendObjectAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createSendObjectAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//SendObjectAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSendObjectAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//SendObjectAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createSendObjectAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//SendObjectAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSendObjectAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SENDSIGNALACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSendSignalAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//SendSignalAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createSendSignalAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//SendSignalAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createSendSignalAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//SendSignalAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createSendSignalAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//SendSignalAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSendSignalAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//SendSignalAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createSendSignalAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//SendSignalAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSendSignalAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//SendSignalAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createSendSignalAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//SendSignalAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSendSignalAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SEQUENCENODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSequenceNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//SequenceNode has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createSequenceNode_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//SequenceNode has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createSequenceNode_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//SequenceNode has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createSequenceNode_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//SequenceNode has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSequenceNode_as_group_in_Activity(castedContainer,metaElementID);
					}
					//SequenceNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSequenceNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//SequenceNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createSequenceNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//SequenceNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSequenceNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//SequenceNode has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSequenceNode_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//SequenceNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createSequenceNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//SequenceNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSequenceNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//SequenceNode has structuredNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_STRUCTUREDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createSequenceNode_as_structuredNode_in_Activity(castedContainer,metaElementID);
					}
					//SequenceNode has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createSequenceNode_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SIGNAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSignal(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Signal has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createSignal_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Signal has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createSignal_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Signal has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createSignal_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Signal has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createSignal_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Signal has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSignal_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Signal has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createSignal_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Signal has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createSignal_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Signal has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createSignal_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Signal has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createSignal_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Signal has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createSignal_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SIGNALEVENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSignalEvent(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//SignalEvent has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createSignalEvent_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//SignalEvent has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createSignalEvent_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//SignalEvent has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSignalEvent_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//SignalEvent has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createSignalEvent_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//SignalEvent has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createSignalEvent_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//SignalEvent has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createSignalEvent_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//SignalEvent has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createSignalEvent_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SLOT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSlot(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Slot has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSlot_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Slot has slot as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SLOT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createSlot_as_slot_in_InstanceSpecification(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STARTCLASSIFIERBEHAVIORACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStartClassifierBehaviorAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//StartClassifierBehaviorAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createStartClassifierBehaviorAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createStartClassifierBehaviorAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createStartClassifierBehaviorAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStartClassifierBehaviorAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createStartClassifierBehaviorAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStartClassifierBehaviorAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStartClassifierBehaviorAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//StartClassifierBehaviorAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStartClassifierBehaviorAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STARTOBJECTBEHAVIORACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStartObjectBehaviorAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//StartObjectBehaviorAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createStartObjectBehaviorAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createStartObjectBehaviorAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createStartObjectBehaviorAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStartObjectBehaviorAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createStartObjectBehaviorAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStartObjectBehaviorAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStartObjectBehaviorAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//StartObjectBehaviorAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStartObjectBehaviorAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STATE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createState(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//State has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createState_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//State has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createState_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//State has subvertex as a containment
					case  umlPackage::REGION_ATTRIBUTE_SUBVERTEX:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Region>(container);
						return this->createState_as_subvertex_in_Region(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STATEINVARIANT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStateInvariant(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//StateInvariant has fragment as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createStateInvariant_as_fragment_in_Interaction(castedContainer,metaElementID);
					}
					//StateInvariant has fragment as a containment
					case  umlPackage::INTERACTIONOPERAND_ATTRIBUTE_FRAGMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionOperand>(container);
						return this->createStateInvariant_as_fragment_in_InteractionOperand(castedContainer,metaElementID);
					}
					//StateInvariant has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStateInvariant_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//StateInvariant has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStateInvariant_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STATEMACHINE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStateMachine(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//StateMachine has doActivity as a containment
					case  umlPackage::STATE_ATTRIBUTE_DOACTIVITY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createStateMachine_as_doActivity_in_State(castedContainer,metaElementID);
					}
					//StateMachine has effect as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_EFFECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createStateMachine_as_effect_in_Transition(castedContainer,metaElementID);
					}
					//StateMachine has entry as a containment
					case  umlPackage::STATE_ATTRIBUTE_ENTRY:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createStateMachine_as_entry_in_State(castedContainer,metaElementID);
					}
					//StateMachine has exit as a containment
					case  umlPackage::STATE_ATTRIBUTE_EXIT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createStateMachine_as_exit_in_State(castedContainer,metaElementID);
					}
					//StateMachine has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createStateMachine_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//StateMachine has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createStateMachine_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//StateMachine has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createStateMachine_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//StateMachine has ownedBehavior as a containment
					case  umlPackage::BEHAVIOREDCLASSIFIER_ATTRIBUTE_OWNEDBEHAVIOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<BehavioredClassifier>(container);
						return this->createStateMachine_as_ownedBehavior_in_BehavioredClassifier(castedContainer,metaElementID);
					}
					//StateMachine has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createStateMachine_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//StateMachine has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStateMachine_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//StateMachine has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStateMachine_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//StateMachine has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createStateMachine_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//StateMachine has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createStateMachine_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//StateMachine has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createStateMachine_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//StateMachine has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createStateMachine_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STEREOTYPE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStereotype(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Stereotype has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createStereotype_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//Stereotype has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createStereotype_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//Stereotype has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createStereotype_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Stereotype has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createStereotype_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Stereotype has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStereotype_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Stereotype has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStereotype_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Stereotype has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createStereotype_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Stereotype has ownedStereotype as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDSTEREOTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createStereotype_as_ownedStereotype_in_Package(castedContainer,metaElementID);
					}
					//Stereotype has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createStereotype_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//Stereotype has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createStereotype_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Stereotype has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createStereotype_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STRINGEXPRESSION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStringExpression(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//StringExpression has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createStringExpression_as_argument_in_Message(castedContainer,metaElementID);
					}
					//StringExpression has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createStringExpression_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//StringExpression has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createStringExpression_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//StringExpression has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createStringExpression_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//StringExpression has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createStringExpression_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//StringExpression has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createStringExpression_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//StringExpression has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createStringExpression_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//StringExpression has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createStringExpression_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//StringExpression has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createStringExpression_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//StringExpression has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createStringExpression_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//StringExpression has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createStringExpression_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//StringExpression has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createStringExpression_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//StringExpression has nameExpression as a containment
					case  umlPackage::NAMEDELEMENT_ATTRIBUTE_NAMEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<NamedElement>(container);
						return this->createStringExpression_as_nameExpression_in_NamedElement(castedContainer,metaElementID);
					}
					//StringExpression has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createStringExpression_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//StringExpression has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createStringExpression_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//StringExpression has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createStringExpression_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//StringExpression has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStringExpression_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//StringExpression has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStringExpression_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//StringExpression has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createStringExpression_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//StringExpression has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createStringExpression_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//StringExpression has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createStringExpression_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//StringExpression has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createStringExpression_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//StringExpression has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createStringExpression_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//StringExpression has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createStringExpression_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//StringExpression has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createStringExpression_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//StringExpression has subExpression as a containment
					case  umlPackage::STRINGEXPRESSION_ATTRIBUTE_SUBEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StringExpression>(container);
						return this->createStringExpression_as_subExpression_in_StringExpression(castedContainer,metaElementID);
					}
					//StringExpression has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createStringExpression_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//StringExpression has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createStringExpression_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//StringExpression has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createStringExpression_as_value_in_Slot(castedContainer,metaElementID);
					}
					//StringExpression has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createStringExpression_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//StringExpression has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createStringExpression_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//StringExpression has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createStringExpression_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::STRUCTUREDACTIVITYNODE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createStructuredActivityNode(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//StructuredActivityNode has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createStructuredActivityNode_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//StructuredActivityNode has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createStructuredActivityNode_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//StructuredActivityNode has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createStructuredActivityNode_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//StructuredActivityNode has group as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_GROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStructuredActivityNode_as_group_in_Activity(castedContainer,metaElementID);
					}
					//StructuredActivityNode has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStructuredActivityNode_as_node_in_Activity(castedContainer,metaElementID);
					}
					//StructuredActivityNode has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createStructuredActivityNode_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//StructuredActivityNode has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createStructuredActivityNode_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//StructuredActivityNode has ownedGroup as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStructuredActivityNode_as_ownedGroup_in_Activity(castedContainer,metaElementID);
					}
					//StructuredActivityNode has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createStructuredActivityNode_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//StructuredActivityNode has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStructuredActivityNode_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//StructuredActivityNode has structuredNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_STRUCTUREDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createStructuredActivityNode_as_structuredNode_in_Activity(castedContainer,metaElementID);
					}
					//StructuredActivityNode has subgroup as a containment
					case  umlPackage::ACTIVITYGROUP_ATTRIBUTE_SUBGROUP:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityGroup>(container);
						return this->createStructuredActivityNode_as_subgroup_in_ActivityGroup(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::SUBSTITUTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createSubstitution(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Substitution has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createSubstitution_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Substitution has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createSubstitution_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Substitution has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createSubstitution_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Substitution has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createSubstitution_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Substitution has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createSubstitution_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Substitution has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createSubstitution_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Substitution has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createSubstitution_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Substitution has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createSubstitution_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					//Substitution has substitution as a containment
					case  umlPackage::CLASSIFIER_ATTRIBUTE_SUBSTITUTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Classifier>(container);
						return this->createSubstitution_as_substitution_in_Classifier(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TEMPLATEBINDING_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTemplateBinding(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TemplateBinding has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTemplateBinding_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TemplateBinding has templateBinding as a containment
					case  umlPackage::TEMPLATEABLEELEMENT_ATTRIBUTE_TEMPLATEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateableElement>(container);
						return this->createTemplateBinding_as_templateBinding_in_TemplateableElement(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TEMPLATEPARAMETER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTemplateParameter(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TemplateParameter has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTemplateParameter_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TemplateParameter has ownedParameter as a containment
					case  umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateSignature>(container);
						return this->createTemplateParameter_as_ownedParameter_in_TemplateSignature(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TEMPLATEPARAMETERSUBSTITUTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTemplateParameterSubstitution(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TemplateParameterSubstitution has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTemplateParameterSubstitution_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TemplateParameterSubstitution has parameterSubstitution as a containment
					case  umlPackage::TEMPLATEBINDING_ATTRIBUTE_PARAMETERSUBSTITUTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateBinding>(container);
						return this->createTemplateParameterSubstitution_as_parameterSubstitution_in_TemplateBinding(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TEMPLATESIGNATURE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTemplateSignature(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TemplateSignature has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTemplateSignature_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TemplateSignature has ownedTemplateSignature as a containment
					case  umlPackage::TEMPLATEABLEELEMENT_ATTRIBUTE_OWNEDTEMPLATESIGNATURE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateableElement>(container);
						return this->createTemplateSignature_as_ownedTemplateSignature_in_TemplateableElement(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TESTIDENTITYACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTestIdentityAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TestIdentityAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createTestIdentityAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//TestIdentityAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createTestIdentityAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//TestIdentityAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createTestIdentityAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//TestIdentityAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createTestIdentityAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//TestIdentityAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createTestIdentityAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//TestIdentityAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTestIdentityAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TestIdentityAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTestIdentityAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//TestIdentityAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createTestIdentityAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TIMECONSTRAINT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTimeConstraint(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TimeConstraint has condition as a containment
					case  umlPackage::PARAMETERSET_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ParameterSet>(container);
						return this->createTimeConstraint_as_condition_in_ParameterSet(castedContainer,metaElementID);
					}
					//TimeConstraint has condition as a containment
					case  umlPackage::EXTEND_ATTRIBUTE_CONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Extend>(container);
						return this->createTimeConstraint_as_condition_in_Extend(castedContainer,metaElementID);
					}
					//TimeConstraint has invariant as a containment
					case  umlPackage::STATEINVARIANT_ATTRIBUTE_INVARIANT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StateInvariant>(container);
						return this->createTimeConstraint_as_invariant_in_StateInvariant(castedContainer,metaElementID);
					}
					//TimeConstraint has localPostcondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPOSTCONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createTimeConstraint_as_localPostcondition_in_Action(castedContainer,metaElementID);
					}
					//TimeConstraint has localPrecondition as a containment
					case  umlPackage::ACTION_ATTRIBUTE_LOCALPRECONDITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createTimeConstraint_as_localPrecondition_in_Action(castedContainer,metaElementID);
					}
					//TimeConstraint has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createTimeConstraint_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//TimeConstraint has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeConstraint_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeConstraint has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTimeConstraint_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TimeConstraint has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTimeConstraint_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//TimeConstraint has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeConstraint_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeConstraint has ownedRule as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDRULE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTimeConstraint_as_ownedRule_in_Namespace(castedContainer,metaElementID);
					}
					//TimeConstraint has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createTimeConstraint_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//TimeConstraint has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createTimeConstraint_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TIMEEVENT_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTimeEvent(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TimeEvent has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createTimeEvent_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//TimeEvent has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeEvent_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeEvent has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTimeEvent_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TimeEvent has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTimeEvent_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//TimeEvent has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeEvent_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeEvent has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createTimeEvent_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//TimeEvent has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createTimeEvent_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TIMEEXPRESSION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTimeExpression(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TimeExpression has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createTimeExpression_as_argument_in_Message(castedContainer,metaElementID);
					}
					//TimeExpression has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createTimeExpression_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//TimeExpression has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createTimeExpression_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//TimeExpression has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createTimeExpression_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//TimeExpression has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createTimeExpression_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//TimeExpression has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createTimeExpression_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//TimeExpression has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createTimeExpression_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//TimeExpression has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createTimeExpression_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//TimeExpression has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createTimeExpression_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//TimeExpression has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createTimeExpression_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//TimeExpression has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createTimeExpression_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//TimeExpression has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createTimeExpression_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//TimeExpression has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createTimeExpression_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//TimeExpression has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createTimeExpression_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//TimeExpression has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeExpression_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeExpression has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTimeExpression_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TimeExpression has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTimeExpression_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//TimeExpression has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeExpression_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeExpression has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createTimeExpression_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//TimeExpression has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createTimeExpression_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//TimeExpression has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createTimeExpression_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//TimeExpression has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createTimeExpression_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//TimeExpression has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createTimeExpression_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//TimeExpression has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createTimeExpression_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//TimeExpression has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createTimeExpression_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//TimeExpression has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createTimeExpression_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//TimeExpression has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createTimeExpression_as_value_in_Slot(castedContainer,metaElementID);
					}
					//TimeExpression has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createTimeExpression_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//TimeExpression has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createTimeExpression_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//TimeExpression has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createTimeExpression_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					//TimeExpression has when as a containment
					case  umlPackage::TIMEEVENT_ATTRIBUTE_WHEN:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeEvent>(container);
						return this->createTimeExpression_as_when_in_TimeEvent(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TIMEINTERVAL_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTimeInterval(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TimeInterval has argument as a containment
					case  umlPackage::MESSAGE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Message>(container);
						return this->createTimeInterval_as_argument_in_Message(castedContainer,metaElementID);
					}
					//TimeInterval has argument as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createTimeInterval_as_argument_in_InteractionUse(castedContainer,metaElementID);
					}
					//TimeInterval has changeExpression as a containment
					case  umlPackage::CHANGEEVENT_ATTRIBUTE_CHANGEEXPRESSION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ChangeEvent>(container);
						return this->createTimeInterval_as_changeExpression_in_ChangeEvent(castedContainer,metaElementID);
					}
					//TimeInterval has defaultValue as a containment
					case  umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Property>(container);
						return this->createTimeInterval_as_defaultValue_in_Property(castedContainer,metaElementID);
					}
					//TimeInterval has defaultValue as a containment
					case  umlPackage::PARAMETER_ATTRIBUTE_DEFAULTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Parameter>(container);
						return this->createTimeInterval_as_defaultValue_in_Parameter(castedContainer,metaElementID);
					}
					//TimeInterval has expr as a containment
					case  umlPackage::TIMEEXPRESSION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TimeExpression>(container);
						return this->createTimeInterval_as_expr_in_TimeExpression(castedContainer,metaElementID);
					}
					//TimeInterval has expr as a containment
					case  umlPackage::DURATION_ATTRIBUTE_EXPR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Duration>(container);
						return this->createTimeInterval_as_expr_in_Duration(castedContainer,metaElementID);
					}
					//TimeInterval has guard as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_GUARD:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createTimeInterval_as_guard_in_ActivityEdge(castedContainer,metaElementID);
					}
					//TimeInterval has joinSpec as a containment
					case  umlPackage::JOINNODE_ATTRIBUTE_JOINSPEC:	
					{
						auto castedContainer = std::dynamic_pointer_cast<JoinNode>(container);
						return this->createTimeInterval_as_joinSpec_in_JoinNode(castedContainer,metaElementID);
					}
					//TimeInterval has lowerValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createTimeInterval_as_lowerValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//TimeInterval has maxint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MAXINT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createTimeInterval_as_maxint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//TimeInterval has minint as a containment
					case  umlPackage::INTERACTIONCONSTRAINT_ATTRIBUTE_MININT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionConstraint>(container);
						return this->createTimeInterval_as_minint_in_InteractionConstraint(castedContainer,metaElementID);
					}
					//TimeInterval has operand as a containment
					case  umlPackage::EXPRESSION_ATTRIBUTE_OPERAND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Expression>(container);
						return this->createTimeInterval_as_operand_in_Expression(castedContainer,metaElementID);
					}
					//TimeInterval has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createTimeInterval_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//TimeInterval has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeInterval_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeInterval has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTimeInterval_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TimeInterval has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTimeInterval_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//TimeInterval has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeInterval_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeInterval has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createTimeInterval_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//TimeInterval has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createTimeInterval_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//TimeInterval has returnValue as a containment
					case  umlPackage::INTERACTIONUSE_ATTRIBUTE_RETURNVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InteractionUse>(container);
						return this->createTimeInterval_as_returnValue_in_InteractionUse(castedContainer,metaElementID);
					}
					//TimeInterval has selector as a containment
					case  umlPackage::LIFELINE_ATTRIBUTE_SELECTOR:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Lifeline>(container);
						return this->createTimeInterval_as_selector_in_Lifeline(castedContainer,metaElementID);
					}
					//TimeInterval has specification as a containment
					case  umlPackage::CONSTRAINT_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Constraint>(container);
						return this->createTimeInterval_as_specification_in_Constraint(castedContainer,metaElementID);
					}
					//TimeInterval has specification as a containment
					case  umlPackage::INSTANCESPECIFICATION_ATTRIBUTE_SPECIFICATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InstanceSpecification>(container);
						return this->createTimeInterval_as_specification_in_InstanceSpecification(castedContainer,metaElementID);
					}
					//TimeInterval has upperBound as a containment
					case  umlPackage::OBJECTNODE_ATTRIBUTE_UPPERBOUND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ObjectNode>(container);
						return this->createTimeInterval_as_upperBound_in_ObjectNode(castedContainer,metaElementID);
					}
					//TimeInterval has upperValue as a containment
					case  umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<MultiplicityElement>(container);
						return this->createTimeInterval_as_upperValue_in_MultiplicityElement(castedContainer,metaElementID);
					}
					//TimeInterval has value as a containment
					case  umlPackage::SLOT_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Slot>(container);
						return this->createTimeInterval_as_value_in_Slot(castedContainer,metaElementID);
					}
					//TimeInterval has value as a containment
					case  umlPackage::VALUESPECIFICATIONACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValueSpecificationAction>(container);
						return this->createTimeInterval_as_value_in_ValueSpecificationAction(castedContainer,metaElementID);
					}
					//TimeInterval has value as a containment
					case  umlPackage::VALUEPIN_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ValuePin>(container);
						return this->createTimeInterval_as_value_in_ValuePin(castedContainer,metaElementID);
					}
					//TimeInterval has weight as a containment
					case  umlPackage::ACTIVITYEDGE_ATTRIBUTE_WEIGHT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActivityEdge>(container);
						return this->createTimeInterval_as_weight_in_ActivityEdge(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TIMEOBSERVATION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTimeObservation(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//TimeObservation has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createTimeObservation_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//TimeObservation has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeObservation_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeObservation has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTimeObservation_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//TimeObservation has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTimeObservation_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//TimeObservation has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createTimeObservation_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//TimeObservation has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createTimeObservation_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//TimeObservation has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createTimeObservation_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TRANSITION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTransition(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Transition has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTransition_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Transition has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTransition_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Transition has transition as a containment
					case  umlPackage::REGION_ATTRIBUTE_TRANSITION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Region>(container);
						return this->createTransition_as_transition_in_Region(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::TRIGGER_CLASS:
		{
			if (nullptr == container)
			{
				return this->createTrigger(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Trigger has deferrableTrigger as a containment
					case  umlPackage::STATE_ATTRIBUTE_DEFERRABLETRIGGER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<State>(container);
						return this->createTrigger_as_deferrableTrigger_in_State(castedContainer,metaElementID);
					}
					//Trigger has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createTrigger_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Trigger has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createTrigger_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Trigger has trigger as a containment
					case  umlPackage::TRANSITION_ATTRIBUTE_TRIGGER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Transition>(container);
						return this->createTrigger_as_trigger_in_Transition(castedContainer,metaElementID);
					}
					//Trigger has trigger as a containment
					case  umlPackage::ACCEPTEVENTACTION_ATTRIBUTE_TRIGGER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AcceptEventAction>(container);
						return this->createTrigger_as_trigger_in_AcceptEventAction(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::UNMARSHALLACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createUnmarshallAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//UnmarshallAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createUnmarshallAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//UnmarshallAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createUnmarshallAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//UnmarshallAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createUnmarshallAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//UnmarshallAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createUnmarshallAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//UnmarshallAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createUnmarshallAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//UnmarshallAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createUnmarshallAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//UnmarshallAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createUnmarshallAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//UnmarshallAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createUnmarshallAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::USAGE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createUsage(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Usage has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createUsage_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Usage has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createUsage_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Usage has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createUsage_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Usage has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createUsage_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Usage has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createUsage_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Usage has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createUsage_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//Usage has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createUsage_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					//Usage has roleBinding as a containment
					case  umlPackage::COLLABORATIONUSE_ATTRIBUTE_ROLEBINDING:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CollaborationUse>(container);
						return this->createUsage_as_roleBinding_in_CollaborationUse(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::USECASE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createUseCase(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//UseCase has nestedClassifier as a containment
					case  umlPackage::CLASS_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Class>(container);
						return this->createUseCase_as_nestedClassifier_in_Class(castedContainer,metaElementID);
					}
					//UseCase has nestedClassifier as a containment
					case  umlPackage::INTERFACE_ATTRIBUTE_NESTEDCLASSIFIER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interface>(container);
						return this->createUseCase_as_nestedClassifier_in_Interface(castedContainer,metaElementID);
					}
					//UseCase has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createUseCase_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//UseCase has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createUseCase_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//UseCase has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createUseCase_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//UseCase has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createUseCase_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//UseCase has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createUseCase_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//UseCase has ownedType as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_OWNEDTYPE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createUseCase_as_ownedType_in_Package(castedContainer,metaElementID);
					}
					//UseCase has ownedUseCase as a containment
					case  umlPackage::CLASSIFIER_ATTRIBUTE_OWNEDUSECASE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Classifier>(container);
						return this->createUseCase_as_ownedUseCase_in_Classifier(castedContainer,metaElementID);
					}
					//UseCase has packagedElement as a containment
					case  umlPackage::PACKAGE_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Package>(container);
						return this->createUseCase_as_packagedElement_in_Package(castedContainer,metaElementID);
					}
					//UseCase has packagedElement as a containment
					case  umlPackage::COMPONENT_ATTRIBUTE_PACKAGEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Component>(container);
						return this->createUseCase_as_packagedElement_in_Component(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::VALUEPIN_CLASS:
		{
			if (nullptr == container)
			{
				return this->createValuePin(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ValuePin has argument as a containment
					case  umlPackage::INVOCATIONACTION_ATTRIBUTE_ARGUMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<InvocationAction>(container);
						return this->createValuePin_as_argument_in_InvocationAction(castedContainer,metaElementID);
					}
					//ValuePin has collection as a containment
					case  umlPackage::REDUCEACTION_ATTRIBUTE_COLLECTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReduceAction>(container);
						return this->createValuePin_as_collection_in_ReduceAction(castedContainer,metaElementID);
					}
					//ValuePin has exception as a containment
					case  umlPackage::RAISEEXCEPTIONACTION_ATTRIBUTE_EXCEPTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RaiseExceptionAction>(container);
						return this->createValuePin_as_exception_in_RaiseExceptionAction(castedContainer,metaElementID);
					}
					//ValuePin has first as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_FIRST:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createValuePin_as_first_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//ValuePin has input as a containment
					case  umlPackage::ACTION_ATTRIBUTE_INPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Action>(container);
						return this->createValuePin_as_input_in_Action(castedContainer,metaElementID);
					}
					//ValuePin has inputValue as a containment
					case  umlPackage::LINKACTION_ATTRIBUTE_INPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LinkAction>(container);
						return this->createValuePin_as_inputValue_in_LinkAction(castedContainer,metaElementID);
					}
					//ValuePin has inputValue as a containment
					case  umlPackage::OPAQUEACTION_ATTRIBUTE_INPUTVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<OpaqueAction>(container);
						return this->createValuePin_as_inputValue_in_OpaqueAction(castedContainer,metaElementID);
					}
					//ValuePin has insertAt as a containment
					case  umlPackage::ADDSTRUCTURALFEATUREVALUEACTION_ATTRIBUTE_INSERTAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AddStructuralFeatureValueAction>(container);
						return this->createValuePin_as_insertAt_in_AddStructuralFeatureValueAction(castedContainer,metaElementID);
					}
					//ValuePin has insertAt as a containment
					case  umlPackage::ADDVARIABLEVALUEACTION_ATTRIBUTE_INSERTAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<AddVariableValueAction>(container);
						return this->createValuePin_as_insertAt_in_AddVariableValueAction(castedContainer,metaElementID);
					}
					//ValuePin has loopVariableInput as a containment
					case  umlPackage::LOOPNODE_ATTRIBUTE_LOOPVARIABLEINPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<LoopNode>(container);
						return this->createValuePin_as_loopVariableInput_in_LoopNode(castedContainer,metaElementID);
					}
					//ValuePin has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createValuePin_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ValuePin has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createValuePin_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::STRUCTURALFEATUREACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuralFeatureAction>(container);
						return this->createValuePin_as_object_in_StructuralFeatureAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::CLEARASSOCIATIONACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ClearAssociationAction>(container);
						return this->createValuePin_as_object_in_ClearAssociationAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::READISCLASSIFIEDOBJECTACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadIsClassifiedObjectAction>(container);
						return this->createValuePin_as_object_in_ReadIsClassifiedObjectAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::READLINKOBJECTENDACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndAction>(container);
						return this->createValuePin_as_object_in_ReadLinkObjectEndAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::READLINKOBJECTENDQUALIFIERACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReadLinkObjectEndQualifierAction>(container);
						return this->createValuePin_as_object_in_ReadLinkObjectEndQualifierAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::RECLASSIFYOBJECTACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReclassifyObjectAction>(container);
						return this->createValuePin_as_object_in_ReclassifyObjectAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::STARTCLASSIFIERBEHAVIORACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StartClassifierBehaviorAction>(container);
						return this->createValuePin_as_object_in_StartClassifierBehaviorAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::STARTOBJECTBEHAVIORACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StartObjectBehaviorAction>(container);
						return this->createValuePin_as_object_in_StartObjectBehaviorAction(castedContainer,metaElementID);
					}
					//ValuePin has object as a containment
					case  umlPackage::UNMARSHALLACTION_ATTRIBUTE_OBJECT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<UnmarshallAction>(container);
						return this->createValuePin_as_object_in_UnmarshallAction(castedContainer,metaElementID);
					}
					//ValuePin has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createValuePin_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ValuePin has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createValuePin_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ValuePin has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createValuePin_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					//ValuePin has removeAt as a containment
					case  umlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_ATTRIBUTE_REMOVEAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RemoveStructuralFeatureValueAction>(container);
						return this->createValuePin_as_removeAt_in_RemoveStructuralFeatureValueAction(castedContainer,metaElementID);
					}
					//ValuePin has removeAt as a containment
					case  umlPackage::REMOVEVARIABLEVALUEACTION_ATTRIBUTE_REMOVEAT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<RemoveVariableValueAction>(container);
						return this->createValuePin_as_removeAt_in_RemoveVariableValueAction(castedContainer,metaElementID);
					}
					//ValuePin has replyValue as a containment
					case  umlPackage::REPLYACTION_ATTRIBUTE_REPLYVALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReplyAction>(container);
						return this->createValuePin_as_replyValue_in_ReplyAction(castedContainer,metaElementID);
					}
					//ValuePin has request as a containment
					case  umlPackage::SENDOBJECTACTION_ATTRIBUTE_REQUEST:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendObjectAction>(container);
						return this->createValuePin_as_request_in_SendObjectAction(castedContainer,metaElementID);
					}
					//ValuePin has returnInformation as a containment
					case  umlPackage::REPLYACTION_ATTRIBUTE_RETURNINFORMATION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ReplyAction>(container);
						return this->createValuePin_as_returnInformation_in_ReplyAction(castedContainer,metaElementID);
					}
					//ValuePin has second as a containment
					case  umlPackage::TESTIDENTITYACTION_ATTRIBUTE_SECOND:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TestIdentityAction>(container);
						return this->createValuePin_as_second_in_TestIdentityAction(castedContainer,metaElementID);
					}
					//ValuePin has structuredNodeInput as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_STRUCTUREDNODEINPUT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createValuePin_as_structuredNodeInput_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ValuePin has target as a containment
					case  umlPackage::CALLOPERATIONACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<CallOperationAction>(container);
						return this->createValuePin_as_target_in_CallOperationAction(castedContainer,metaElementID);
					}
					//ValuePin has target as a containment
					case  umlPackage::DESTROYOBJECTACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<DestroyObjectAction>(container);
						return this->createValuePin_as_target_in_DestroyObjectAction(castedContainer,metaElementID);
					}
					//ValuePin has target as a containment
					case  umlPackage::SENDOBJECTACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendObjectAction>(container);
						return this->createValuePin_as_target_in_SendObjectAction(castedContainer,metaElementID);
					}
					//ValuePin has target as a containment
					case  umlPackage::SENDSIGNALACTION_ATTRIBUTE_TARGET:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SendSignalAction>(container);
						return this->createValuePin_as_target_in_SendSignalAction(castedContainer,metaElementID);
					}
					//ValuePin has value as a containment
					case  umlPackage::WRITESTRUCTURALFEATUREACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteStructuralFeatureAction>(container);
						return this->createValuePin_as_value_in_WriteStructuralFeatureAction(castedContainer,metaElementID);
					}
					//ValuePin has value as a containment
					case  umlPackage::WRITEVARIABLEACTION_ATTRIBUTE_VALUE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<WriteVariableAction>(container);
						return this->createValuePin_as_value_in_WriteVariableAction(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::VALUESPECIFICATIONACTION_CLASS:
		{
			if (nullptr == container)
			{
				return this->createValueSpecificationAction(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//ValueSpecificationAction has action as a containment
					case  umlPackage::INTERACTION_ATTRIBUTE_ACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Interaction>(container);
						return this->createValueSpecificationAction_as_action_in_Interaction(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has executableNode as a containment
					case  umlPackage::SEQUENCENODE_ATTRIBUTE_EXECUTABLENODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<SequenceNode>(container);
						return this->createValueSpecificationAction_as_executableNode_in_SequenceNode(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has fromAction as a containment
					case  umlPackage::ACTIONINPUTPIN_ATTRIBUTE_FROMACTION:	
					{
						auto castedContainer = std::dynamic_pointer_cast<ActionInputPin>(container);
						return this->createValueSpecificationAction_as_fromAction_in_ActionInputPin(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has node as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createValueSpecificationAction_as_node_in_Activity(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has node as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_NODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createValueSpecificationAction_as_node_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createValueSpecificationAction_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createValueSpecificationAction_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//ValueSpecificationAction has ownedNode as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_OWNEDNODE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createValueSpecificationAction_as_ownedNode_in_Activity(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
		case umlPackage::VARIABLE_CLASS:
		{
			if (nullptr == container)
			{
				return this->createVariable(metaElementID);
			}
			else
			{
				switch(referenceID)
				{
					//Variable has ownedActual as a containment
					case  umlPackage::TEMPLATEPARAMETERSUBSTITUTION_ATTRIBUTE_OWNEDACTUAL:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameterSubstitution>(container);
						return this->createVariable_as_ownedActual_in_TemplateParameterSubstitution(castedContainer,metaElementID);
					}
					//Variable has ownedDefault as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDDEFAULT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createVariable_as_ownedDefault_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Variable has ownedElement as a containment
					case  umlPackage::ELEMENT_ATTRIBUTE_OWNEDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Element>(container);
						return this->createVariable_as_ownedElement_in_Element(castedContainer,metaElementID);
					}
					//Variable has ownedMember as a containment
					case  umlPackage::NAMESPACE_ATTRIBUTE_OWNEDMEMBER:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Namespace>(container);
						return this->createVariable_as_ownedMember_in_Namespace(castedContainer,metaElementID);
					}
					//Variable has ownedParameteredElement as a containment
					case  umlPackage::TEMPLATEPARAMETER_ATTRIBUTE_OWNEDPARAMETEREDELEMENT:	
					{
						auto castedContainer = std::dynamic_pointer_cast<TemplateParameter>(container);
						return this->createVariable_as_ownedParameteredElement_in_TemplateParameter(castedContainer,metaElementID);
					}
					//Variable has variable as a containment
					case  umlPackage::ACTIVITY_ATTRIBUTE_VARIABLE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<Activity>(container);
						return this->createVariable_as_variable_in_Activity(castedContainer,metaElementID);
					}
					//Variable has variable as a containment
					case  umlPackage::STRUCTUREDACTIVITYNODE_ATTRIBUTE_VARIABLE:	
					{
						auto castedContainer = std::dynamic_pointer_cast<StructuredActivityNode>(container);
						return this->createVariable_as_variable_in_StructuredActivityNode(castedContainer,metaElementID);
					}
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}	
			}
			break;
		}
	default:
	   	    std::cerr << __PRETTY_FUNCTION__ << " ID " << metaElementID <<" not found" << std::endl;
	}
	return nullptr;
}

std::shared_ptr<ecore::EObject> umlFactoryImpl::create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<ecore::EObject> container /*= nullptr*/, const int referenceID/* = -1*/) const
{
	if(_class->isAbstract())
    {
    	return nullptr;
   	}
	int _elementID = _class->getMetaElementID();
	return create(_elementID, container, referenceID);
}

std::shared_ptr<ecore::EObject> umlFactoryImpl::create(std::string _className, std::shared_ptr<ecore::EObject> container /*= nullptr*/, const int referenceID/* = -1*/) const
{
	auto iter = m_idMap.find(_className);
	if(iter != m_idMap.end())
    {
		//get the ID
        int id = iter->second;
		return create(id,container,referenceID);
    }
    return nullptr;
}

std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAbstractionPtr(element);
	return element;
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<Abstraction> umlFactoryImpl::createAbstraction_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<AbstractionImpl> element(new AbstractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisAbstractionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAcceptCallActionPtr(element);
	return element;
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptCallAction> umlFactoryImpl::createAcceptCallAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AcceptCallActionImpl> element(new AcceptCallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisAcceptCallActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAcceptEventActionPtr(element);
	return element;
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<AcceptEventAction> umlFactoryImpl::createAcceptEventAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AcceptEventActionImpl> element(new AcceptEventActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisAcceptEventActionPtr(element);
	return element;
	
}
std::shared_ptr<ActionExecutionSpecification> umlFactoryImpl::createActionExecutionSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActionExecutionSpecificationImpl> element(new ActionExecutionSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActionExecutionSpecificationPtr(element);
	return element;
}
std::shared_ptr<ActionExecutionSpecification> umlFactoryImpl::createActionExecutionSpecification_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ActionExecutionSpecificationImpl> element(new ActionExecutionSpecificationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisActionExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ActionExecutionSpecification> umlFactoryImpl::createActionExecutionSpecification_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<ActionExecutionSpecificationImpl> element(new ActionExecutionSpecificationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisActionExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ActionExecutionSpecification> umlFactoryImpl::createActionExecutionSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActionExecutionSpecificationImpl> element(new ActionExecutionSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActionExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ActionExecutionSpecification> umlFactoryImpl::createActionExecutionSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActionExecutionSpecificationImpl> element(new ActionExecutionSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActionExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActionInputPinPtr(element);
	return element;
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_argument_in_InvocationAction(std::weak_ptr<uml::InvocationAction> par_InvocationAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_InvocationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InvocationAction.lock())
	{
		wp->getArgument()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_collection_in_ReduceAction(std::shared_ptr<ReduceAction> par_ReduceAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReduceAction)
	{
		par_ReduceAction->setCollection(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_exception_in_RaiseExceptionAction(std::shared_ptr<RaiseExceptionAction> par_RaiseExceptionAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_RaiseExceptionAction)
	{
		par_RaiseExceptionAction->setException(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_first_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setFirst(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_input_in_Action(std::weak_ptr<uml::Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_Action));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Action.lock())
	{
		wp->getInput()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_inputValue_in_LinkAction(std::shared_ptr<LinkAction> par_LinkAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkAction)
	{
		par_LinkAction->getInputValue()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_inputValue_in_OpaqueAction(std::shared_ptr<OpaqueAction> par_OpaqueAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_OpaqueAction)
	{
		par_OpaqueAction->getInputValue()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_insertAt_in_AddStructuralFeatureValueAction(std::weak_ptr<uml::AddStructuralFeatureValueAction> par_AddStructuralFeatureValueAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_AddStructuralFeatureValueAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_AddStructuralFeatureValueAction.lock())
	{
		wp->setInsertAt(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_insertAt_in_AddVariableValueAction(std::shared_ptr<AddVariableValueAction> par_AddVariableValueAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_AddVariableValueAction)
	{
		par_AddVariableValueAction->setInsertAt(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_loopVariableInput_in_LoopNode(std::shared_ptr<LoopNode> par_LoopNode, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LoopNode)
	{
		par_LoopNode->getLoopVariableInput()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_StructuralFeatureAction(std::weak_ptr<uml::StructuralFeatureAction> par_StructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_StructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuralFeatureAction.lock())
	{
		wp->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_ClearAssociationAction(std::shared_ptr<ClearAssociationAction> par_ClearAssociationAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ClearAssociationAction)
	{
		par_ClearAssociationAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_ReadIsClassifiedObjectAction(std::shared_ptr<ReadIsClassifiedObjectAction> par_ReadIsClassifiedObjectAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadIsClassifiedObjectAction)
	{
		par_ReadIsClassifiedObjectAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_ReadLinkObjectEndAction(std::shared_ptr<ReadLinkObjectEndAction> par_ReadLinkObjectEndAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndAction)
	{
		par_ReadLinkObjectEndAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_ReadLinkObjectEndQualifierAction(std::shared_ptr<ReadLinkObjectEndQualifierAction> par_ReadLinkObjectEndQualifierAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndQualifierAction)
	{
		par_ReadLinkObjectEndQualifierAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_ReclassifyObjectAction(std::shared_ptr<ReclassifyObjectAction> par_ReclassifyObjectAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReclassifyObjectAction)
	{
		par_ReclassifyObjectAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_StartClassifierBehaviorAction(std::shared_ptr<StartClassifierBehaviorAction> par_StartClassifierBehaviorAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StartClassifierBehaviorAction)
	{
		par_StartClassifierBehaviorAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_StartObjectBehaviorAction(std::shared_ptr<StartObjectBehaviorAction> par_StartObjectBehaviorAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StartObjectBehaviorAction)
	{
		par_StartObjectBehaviorAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_object_in_UnmarshallAction(std::shared_ptr<UnmarshallAction> par_UnmarshallAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_UnmarshallAction)
	{
		par_UnmarshallAction->setObject(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_removeAt_in_RemoveStructuralFeatureValueAction(std::weak_ptr<uml::RemoveStructuralFeatureValueAction> par_RemoveStructuralFeatureValueAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_RemoveStructuralFeatureValueAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_RemoveStructuralFeatureValueAction.lock())
	{
		wp->setRemoveAt(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_removeAt_in_RemoveVariableValueAction(std::shared_ptr<RemoveVariableValueAction> par_RemoveVariableValueAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_RemoveVariableValueAction)
	{
		par_RemoveVariableValueAction->setRemoveAt(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_replyValue_in_ReplyAction(std::shared_ptr<ReplyAction> par_ReplyAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReplyAction)
	{
		par_ReplyAction->getReplyValue()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_request_in_SendObjectAction(std::shared_ptr<SendObjectAction> par_SendObjectAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendObjectAction)
	{
		par_SendObjectAction->setRequest(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_returnInformation_in_ReplyAction(std::shared_ptr<ReplyAction> par_ReplyAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReplyAction)
	{
		par_ReplyAction->setReturnInformation(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_second_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setSecond(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_structuredNodeInput_in_StructuredActivityNode(std::shared_ptr<StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredActivityNode)
	{
		par_StructuredActivityNode->getStructuredNodeInput()->push_back(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_target_in_CallOperationAction(std::weak_ptr<uml::CallOperationAction> par_CallOperationAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_CallOperationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_CallOperationAction.lock())
	{
		wp->setTarget(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_target_in_DestroyObjectAction(std::weak_ptr<uml::DestroyObjectAction> par_DestroyObjectAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_DestroyObjectAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DestroyObjectAction.lock())
	{
		wp->setTarget(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_target_in_SendObjectAction(std::shared_ptr<SendObjectAction> par_SendObjectAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendObjectAction)
	{
		par_SendObjectAction->setTarget(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_target_in_SendSignalAction(std::shared_ptr<SendSignalAction> par_SendSignalAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendSignalAction)
	{
		par_SendSignalAction->setTarget(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_value_in_WriteStructuralFeatureAction(std::weak_ptr<uml::WriteStructuralFeatureAction> par_WriteStructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl(par_WriteStructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_WriteStructuralFeatureAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<ActionInputPin> umlFactoryImpl::createActionInputPin_as_value_in_WriteVariableAction(std::shared_ptr<WriteVariableAction> par_WriteVariableAction, const int metaElementID) const
{
	std::shared_ptr<ActionInputPinImpl> element(new ActionInputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_WriteVariableAction)
	{
		par_WriteVariableAction->setValue(element);
	
	}
	element->setThisActionInputPinPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActivityPtr(element);
	return element;
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_doActivity_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setDoActivity(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_effect_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->setEffect(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_entry_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setEntry(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_exit_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setExit(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedBehavior_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getOwnedBehavior()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<Activity> umlFactoryImpl::createActivity_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ActivityImpl> element(new ActivityImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisActivityPtr(element);
	return element;
	
}
std::shared_ptr<ActivityFinalNode> umlFactoryImpl::createActivityFinalNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActivityFinalNodeImpl> element(new ActivityFinalNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActivityFinalNodePtr(element);
	return element;
}
std::shared_ptr<ActivityFinalNode> umlFactoryImpl::createActivityFinalNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActivityFinalNodeImpl> element(new ActivityFinalNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisActivityFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityFinalNode> umlFactoryImpl::createActivityFinalNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ActivityFinalNodeImpl> element(new ActivityFinalNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisActivityFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityFinalNode> umlFactoryImpl::createActivityFinalNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActivityFinalNodeImpl> element(new ActivityFinalNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActivityFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityFinalNode> umlFactoryImpl::createActivityFinalNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActivityFinalNodeImpl> element(new ActivityFinalNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActivityFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityFinalNode> umlFactoryImpl::createActivityFinalNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActivityFinalNodeImpl> element(new ActivityFinalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisActivityFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityParameterNode> umlFactoryImpl::createActivityParameterNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActivityParameterNodeImpl> element(new ActivityParameterNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActivityParameterNodePtr(element);
	return element;
}
std::shared_ptr<ActivityParameterNode> umlFactoryImpl::createActivityParameterNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActivityParameterNodeImpl> element(new ActivityParameterNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisActivityParameterNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityParameterNode> umlFactoryImpl::createActivityParameterNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ActivityParameterNodeImpl> element(new ActivityParameterNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisActivityParameterNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityParameterNode> umlFactoryImpl::createActivityParameterNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActivityParameterNodeImpl> element(new ActivityParameterNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActivityParameterNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityParameterNode> umlFactoryImpl::createActivityParameterNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActivityParameterNodeImpl> element(new ActivityParameterNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActivityParameterNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityParameterNode> umlFactoryImpl::createActivityParameterNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActivityParameterNodeImpl> element(new ActivityParameterNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisActivityParameterNodePtr(element);
	return element;
	
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActivityPartitionPtr(element);
	return element;
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisActivityPartitionPtr(element);
	return element;
	
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActivityPartitionPtr(element);
	return element;
	
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisActivityPartitionPtr(element);
	return element;
	
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActivityPartitionPtr(element);
	return element;
	
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisActivityPartitionPtr(element);
	return element;
	
}
std::shared_ptr<ActivityPartition> umlFactoryImpl::createActivityPartition_as_subpartition_in_ActivityPartition(std::weak_ptr<uml::ActivityPartition> par_ActivityPartition, const int metaElementID) const
{
	std::shared_ptr<ActivityPartitionImpl> element(new ActivityPartitionImpl(par_ActivityPartition));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityPartition.lock())
	{
		wp->getSubpartition()->push_back(element);
	
	}
	element->setThisActivityPartitionPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl());
	element->setMetaElementID(metaElementID);
	element->setThisActorPtr(element);
	return element;
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<Actor> umlFactoryImpl::createActor_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ActorImpl> element(new ActorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisActorPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddStructuralFeatureValueAction> umlFactoryImpl::createAddStructuralFeatureValueAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AddStructuralFeatureValueActionImpl> element(new AddStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisAddStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAddVariableValueActionPtr(element);
	return element;
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AddVariableValueAction> umlFactoryImpl::createAddVariableValueAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<AddVariableValueActionImpl> element(new AddVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisAddVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAnyReceiveEventPtr(element);
	return element;
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<AnyReceiveEvent> umlFactoryImpl::createAnyReceiveEvent_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<AnyReceiveEventImpl> element(new AnyReceiveEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisAnyReceiveEventPtr(element);
	return element;
	
}
std::shared_ptr<Argument> umlFactoryImpl::createArgument(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ArgumentImpl> element(new ArgumentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisArgumentPtr(element);
	return element;
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	element->setThisArtifactPtr(element);
	return element;
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_nestedArtifact_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getNestedArtifact()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Artifact> umlFactoryImpl::createArtifact_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ArtifactImpl> element(new ArtifactImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisArtifactPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAssociationPtr(element);
	return element;
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<Association> umlFactoryImpl::createAssociation_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<AssociationImpl> element(new AssociationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisAssociationPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl());
	element->setMetaElementID(metaElementID);
	element->setThisAssociationClassPtr(element);
	return element;
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<AssociationClass> umlFactoryImpl::createAssociationClass_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<AssociationClassImpl> element(new AssociationClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisAssociationClassPtr(element);
	return element;
	
}
std::shared_ptr<BehaviorExecutionSpecification> umlFactoryImpl::createBehaviorExecutionSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<BehaviorExecutionSpecificationImpl> element(new BehaviorExecutionSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisBehaviorExecutionSpecificationPtr(element);
	return element;
}
std::shared_ptr<BehaviorExecutionSpecification> umlFactoryImpl::createBehaviorExecutionSpecification_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<BehaviorExecutionSpecificationImpl> element(new BehaviorExecutionSpecificationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisBehaviorExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<BehaviorExecutionSpecification> umlFactoryImpl::createBehaviorExecutionSpecification_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<BehaviorExecutionSpecificationImpl> element(new BehaviorExecutionSpecificationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisBehaviorExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<BehaviorExecutionSpecification> umlFactoryImpl::createBehaviorExecutionSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<BehaviorExecutionSpecificationImpl> element(new BehaviorExecutionSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisBehaviorExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<BehaviorExecutionSpecification> umlFactoryImpl::createBehaviorExecutionSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<BehaviorExecutionSpecificationImpl> element(new BehaviorExecutionSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisBehaviorExecutionSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisBroadcastSignalActionPtr(element);
	return element;
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<BroadcastSignalAction> umlFactoryImpl::createBroadcastSignalAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<BroadcastSignalActionImpl> element(new BroadcastSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisBroadcastSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCallBehaviorActionPtr(element);
	return element;
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallBehaviorAction> umlFactoryImpl::createCallBehaviorAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CallBehaviorActionImpl> element(new CallBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisCallBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCallEventPtr(element);
	return element;
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallEvent> umlFactoryImpl::createCallEvent_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<CallEventImpl> element(new CallEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisCallEventPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCallOperationActionPtr(element);
	return element;
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CallOperationAction> umlFactoryImpl::createCallOperationAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CallOperationActionImpl> element(new CallOperationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisCallOperationActionPtr(element);
	return element;
	
}
std::shared_ptr<CentralBufferNode> umlFactoryImpl::createCentralBufferNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CentralBufferNodeImpl> element(new CentralBufferNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCentralBufferNodePtr(element);
	return element;
}
std::shared_ptr<CentralBufferNode> umlFactoryImpl::createCentralBufferNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CentralBufferNodeImpl> element(new CentralBufferNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCentralBufferNodePtr(element);
	return element;
	
}
std::shared_ptr<CentralBufferNode> umlFactoryImpl::createCentralBufferNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<CentralBufferNodeImpl> element(new CentralBufferNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCentralBufferNodePtr(element);
	return element;
	
}
std::shared_ptr<CentralBufferNode> umlFactoryImpl::createCentralBufferNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CentralBufferNodeImpl> element(new CentralBufferNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCentralBufferNodePtr(element);
	return element;
	
}
std::shared_ptr<CentralBufferNode> umlFactoryImpl::createCentralBufferNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CentralBufferNodeImpl> element(new CentralBufferNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCentralBufferNodePtr(element);
	return element;
	
}
std::shared_ptr<CentralBufferNode> umlFactoryImpl::createCentralBufferNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CentralBufferNodeImpl> element(new CentralBufferNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisCentralBufferNodePtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl());
	element->setMetaElementID(metaElementID);
	element->setThisChangeEventPtr(element);
	return element;
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<ChangeEvent> umlFactoryImpl::createChangeEvent_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ChangeEventImpl> element(new ChangeEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisChangeEventPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl());
	element->setMetaElementID(metaElementID);
	element->setThisClassPtr(element);
	return element;
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<Class> umlFactoryImpl::createClass_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ClassImpl> element(new ClassImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisClassPtr(element);
	return element;
	
}
std::shared_ptr<ClassifierTemplateParameter> umlFactoryImpl::createClassifierTemplateParameter(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ClassifierTemplateParameterImpl> element(new ClassifierTemplateParameterImpl());
	element->setMetaElementID(metaElementID);
	element->setThisClassifierTemplateParameterPtr(element);
	return element;
}
std::shared_ptr<ClassifierTemplateParameter> umlFactoryImpl::createClassifierTemplateParameter_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ClassifierTemplateParameterImpl> element(new ClassifierTemplateParameterImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisClassifierTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<ClassifierTemplateParameter> umlFactoryImpl::createClassifierTemplateParameter_as_ownedParameter_in_TemplateSignature(std::weak_ptr<uml::TemplateSignature> par_TemplateSignature, const int metaElementID) const
{
	std::shared_ptr<ClassifierTemplateParameterImpl> element(new ClassifierTemplateParameterImpl(par_TemplateSignature));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateSignature.lock())
	{
		wp->getOwnedParameter()->push_back(element);
	
	}
	element->setThisClassifierTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<Clause> umlFactoryImpl::createClause(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ClauseImpl> element(new ClauseImpl());
	element->setMetaElementID(metaElementID);
	element->setThisClausePtr(element);
	return element;
}
std::shared_ptr<Clause> umlFactoryImpl::createClause_as_clause_in_ConditionalNode(std::shared_ptr<ConditionalNode> par_ConditionalNode, const int metaElementID) const
{
	std::shared_ptr<ClauseImpl> element(new ClauseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ConditionalNode)
	{
		par_ConditionalNode->getClause()->push_back(element);
	
	}
	element->setThisClausePtr(element);
	return element;
	
}
std::shared_ptr<Clause> umlFactoryImpl::createClause_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ClauseImpl> element(new ClauseImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisClausePtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisClearAssociationActionPtr(element);
	return element;
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearAssociationAction> umlFactoryImpl::createClearAssociationAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ClearAssociationActionImpl> element(new ClearAssociationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisClearAssociationActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearStructuralFeatureAction> umlFactoryImpl::createClearStructuralFeatureAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ClearStructuralFeatureActionImpl> element(new ClearStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisClearStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisClearVariableActionPtr(element);
	return element;
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ClearVariableAction> umlFactoryImpl::createClearVariableAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ClearVariableActionImpl> element(new ClearVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisClearVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCollaborationPtr(element);
	return element;
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<Collaboration> umlFactoryImpl::createCollaboration_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<CollaborationImpl> element(new CollaborationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisCollaborationPtr(element);
	return element;
	
}
std::shared_ptr<CollaborationUse> umlFactoryImpl::createCollaborationUse(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CollaborationUseImpl> element(new CollaborationUseImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCollaborationUsePtr(element);
	return element;
}
std::shared_ptr<CollaborationUse> umlFactoryImpl::createCollaborationUse_as_collaborationUse_in_Classifier(std::shared_ptr<Classifier> par_Classifier, const int metaElementID) const
{
	std::shared_ptr<CollaborationUseImpl> element(new CollaborationUseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Classifier)
	{
		par_Classifier->getCollaborationUse()->push_back(element);
	
	}
	element->setThisCollaborationUsePtr(element);
	return element;
	
}
std::shared_ptr<CollaborationUse> umlFactoryImpl::createCollaborationUse_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CollaborationUseImpl> element(new CollaborationUseImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCollaborationUsePtr(element);
	return element;
	
}
std::shared_ptr<CollaborationUse> umlFactoryImpl::createCollaborationUse_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CollaborationUseImpl> element(new CollaborationUseImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCollaborationUsePtr(element);
	return element;
	
}
std::shared_ptr<CombinedFragment> umlFactoryImpl::createCombinedFragment(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CombinedFragmentImpl> element(new CombinedFragmentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCombinedFragmentPtr(element);
	return element;
}
std::shared_ptr<CombinedFragment> umlFactoryImpl::createCombinedFragment_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<CombinedFragmentImpl> element(new CombinedFragmentImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisCombinedFragmentPtr(element);
	return element;
	
}
std::shared_ptr<CombinedFragment> umlFactoryImpl::createCombinedFragment_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<CombinedFragmentImpl> element(new CombinedFragmentImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisCombinedFragmentPtr(element);
	return element;
	
}
std::shared_ptr<CombinedFragment> umlFactoryImpl::createCombinedFragment_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CombinedFragmentImpl> element(new CombinedFragmentImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCombinedFragmentPtr(element);
	return element;
	
}
std::shared_ptr<CombinedFragment> umlFactoryImpl::createCombinedFragment_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CombinedFragmentImpl> element(new CombinedFragmentImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCombinedFragmentPtr(element);
	return element;
	
}
std::shared_ptr<Comment> umlFactoryImpl::createComment(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CommentImpl> element(new CommentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCommentPtr(element);
	return element;
}
std::shared_ptr<Comment> umlFactoryImpl::createComment_as_ownedComment_in_Element(std::shared_ptr<Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CommentImpl> element(new CommentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Element)
	{
		par_Element->getOwnedComment()->push_back(element);
	
	}
	element->setThisCommentPtr(element);
	return element;
	
}
std::shared_ptr<Comment> umlFactoryImpl::createComment_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CommentImpl> element(new CommentImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCommentPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCommunicationPathPtr(element);
	return element;
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<CommunicationPath> umlFactoryImpl::createCommunicationPath_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<CommunicationPathImpl> element(new CommunicationPathImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisCommunicationPathPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisComponentPtr(element);
	return element;
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<Component> umlFactoryImpl::createComponent_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ComponentImpl> element(new ComponentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisComponentPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisComponentRealizationPtr(element);
	return element;
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_realization_in_Component(std::weak_ptr<uml::Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl(par_Component));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Component.lock())
	{
		wp->getRealization()->push_back(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ComponentRealization> umlFactoryImpl::createComponentRealization_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<ComponentRealizationImpl> element(new ComponentRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisComponentRealizationPtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConditionalNodePtr(element);
	return element;
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_structuredNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getStructuredNode()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConditionalNode> umlFactoryImpl::createConditionalNode_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<ConditionalNodeImpl> element(new ConditionalNodeImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisConditionalNodePtr(element);
	return element;
	
}
std::shared_ptr<ConnectableElementTemplateParameter> umlFactoryImpl::createConnectableElementTemplateParameter(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConnectableElementTemplateParameterImpl> element(new ConnectableElementTemplateParameterImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConnectableElementTemplateParameterPtr(element);
	return element;
}
std::shared_ptr<ConnectableElementTemplateParameter> umlFactoryImpl::createConnectableElementTemplateParameter_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConnectableElementTemplateParameterImpl> element(new ConnectableElementTemplateParameterImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConnectableElementTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<ConnectableElementTemplateParameter> umlFactoryImpl::createConnectableElementTemplateParameter_as_ownedParameter_in_TemplateSignature(std::weak_ptr<uml::TemplateSignature> par_TemplateSignature, const int metaElementID) const
{
	std::shared_ptr<ConnectableElementTemplateParameterImpl> element(new ConnectableElementTemplateParameterImpl(par_TemplateSignature));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateSignature.lock())
	{
		wp->getOwnedParameter()->push_back(element);
	
	}
	element->setThisConnectableElementTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<ConnectionPointReference> umlFactoryImpl::createConnectionPointReference(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConnectionPointReferenceImpl> element(new ConnectionPointReferenceImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConnectionPointReferencePtr(element);
	return element;
}
std::shared_ptr<ConnectionPointReference> umlFactoryImpl::createConnectionPointReference_as_connection_in_State(std::weak_ptr<uml::State> par_State, const int metaElementID) const
{
	std::shared_ptr<ConnectionPointReferenceImpl> element(new ConnectionPointReferenceImpl(par_State));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_State.lock())
	{
		wp->getConnection()->push_back(element);
	
	}
	element->setThisConnectionPointReferencePtr(element);
	return element;
	
}
std::shared_ptr<ConnectionPointReference> umlFactoryImpl::createConnectionPointReference_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConnectionPointReferenceImpl> element(new ConnectionPointReferenceImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConnectionPointReferencePtr(element);
	return element;
	
}
std::shared_ptr<ConnectionPointReference> umlFactoryImpl::createConnectionPointReference_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ConnectionPointReferenceImpl> element(new ConnectionPointReferenceImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisConnectionPointReferencePtr(element);
	return element;
	
}
std::shared_ptr<ConnectionPointReference> umlFactoryImpl::createConnectionPointReference_as_subvertex_in_Region(std::weak_ptr<uml::Region> par_Region, const int metaElementID) const
{
	std::shared_ptr<ConnectionPointReferenceImpl> element(new ConnectionPointReferenceImpl(par_Region));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Region.lock())
	{
		wp->getSubvertex()->push_back(element);
	
	}
	element->setThisConnectionPointReferencePtr(element);
	return element;
	
}
std::shared_ptr<Connector> umlFactoryImpl::createConnector(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConnectorImpl> element(new ConnectorImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConnectorPtr(element);
	return element;
}
std::shared_ptr<Connector> umlFactoryImpl::createConnector_as_ownedConnector_in_StructuredClassifier(std::weak_ptr<uml::StructuredClassifier> par_StructuredClassifier, const int metaElementID) const
{
	std::shared_ptr<ConnectorImpl> element(new ConnectorImpl(par_StructuredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredClassifier.lock())
	{
		wp->getOwnedConnector()->push_back(element);
	
	}
	element->setThisConnectorPtr(element);
	return element;
	
}
std::shared_ptr<Connector> umlFactoryImpl::createConnector_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConnectorImpl> element(new ConnectorImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConnectorPtr(element);
	return element;
	
}
std::shared_ptr<Connector> umlFactoryImpl::createConnector_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ConnectorImpl> element(new ConnectorImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisConnectorPtr(element);
	return element;
	
}
std::shared_ptr<ConnectorEnd> umlFactoryImpl::createConnectorEnd(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConnectorEndImpl> element(new ConnectorEndImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConnectorEndPtr(element);
	return element;
}
std::shared_ptr<ConnectorEnd> umlFactoryImpl::createConnectorEnd_as_end_in_Connector(std::weak_ptr<uml::Connector> par_Connector, const int metaElementID) const
{
	std::shared_ptr<ConnectorEndImpl> element(new ConnectorEndImpl(par_Connector));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Connector.lock())
	{
		wp->getEnd()->push_back(element);
	
	}
	element->setThisConnectorEndPtr(element);
	return element;
	
}
std::shared_ptr<ConnectorEnd> umlFactoryImpl::createConnectorEnd_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConnectorEndImpl> element(new ConnectorEndImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConnectorEndPtr(element);
	return element;
	
}
std::shared_ptr<ConsiderIgnoreFragment> umlFactoryImpl::createConsiderIgnoreFragment(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConsiderIgnoreFragmentImpl> element(new ConsiderIgnoreFragmentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConsiderIgnoreFragmentPtr(element);
	return element;
}
std::shared_ptr<ConsiderIgnoreFragment> umlFactoryImpl::createConsiderIgnoreFragment_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ConsiderIgnoreFragmentImpl> element(new ConsiderIgnoreFragmentImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisConsiderIgnoreFragmentPtr(element);
	return element;
	
}
std::shared_ptr<ConsiderIgnoreFragment> umlFactoryImpl::createConsiderIgnoreFragment_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<ConsiderIgnoreFragmentImpl> element(new ConsiderIgnoreFragmentImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisConsiderIgnoreFragmentPtr(element);
	return element;
	
}
std::shared_ptr<ConsiderIgnoreFragment> umlFactoryImpl::createConsiderIgnoreFragment_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConsiderIgnoreFragmentImpl> element(new ConsiderIgnoreFragmentImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConsiderIgnoreFragmentPtr(element);
	return element;
	
}
std::shared_ptr<ConsiderIgnoreFragment> umlFactoryImpl::createConsiderIgnoreFragment_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ConsiderIgnoreFragmentImpl> element(new ConsiderIgnoreFragmentImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisConsiderIgnoreFragmentPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	element->setThisConstraintPtr(element);
	return element;
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_condition_in_ParameterSet(std::shared_ptr<ParameterSet> par_ParameterSet, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ParameterSet)
	{
		par_ParameterSet->getCondition()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_condition_in_Extend(std::shared_ptr<Extend> par_Extend, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Extend)
	{
		par_Extend->setCondition(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_invariant_in_StateInvariant(std::shared_ptr<StateInvariant> par_StateInvariant, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StateInvariant)
	{
		par_StateInvariant->setInvariant(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_localPostcondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPostcondition()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_localPrecondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPrecondition()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_ownedRule_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedRule()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Constraint> umlFactoryImpl::createConstraint_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ConstraintImpl> element(new ConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisConstraintPtr(element);
	return element;
	
}
std::shared_ptr<Continuation> umlFactoryImpl::createContinuation(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ContinuationImpl> element(new ContinuationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisContinuationPtr(element);
	return element;
}
std::shared_ptr<Continuation> umlFactoryImpl::createContinuation_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ContinuationImpl> element(new ContinuationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisContinuationPtr(element);
	return element;
	
}
std::shared_ptr<Continuation> umlFactoryImpl::createContinuation_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<ContinuationImpl> element(new ContinuationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisContinuationPtr(element);
	return element;
	
}
std::shared_ptr<Continuation> umlFactoryImpl::createContinuation_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ContinuationImpl> element(new ContinuationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisContinuationPtr(element);
	return element;
	
}
std::shared_ptr<Continuation> umlFactoryImpl::createContinuation_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ContinuationImpl> element(new ContinuationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisContinuationPtr(element);
	return element;
	
}
std::shared_ptr<ControlFlow> umlFactoryImpl::createControlFlow(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ControlFlowImpl> element(new ControlFlowImpl());
	element->setMetaElementID(metaElementID);
	element->setThisControlFlowPtr(element);
	return element;
}
std::shared_ptr<ControlFlow> umlFactoryImpl::createControlFlow_as_edge_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ControlFlowImpl> element(new ControlFlowImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getEdge()->push_back(element);
	
	}
	element->setThisControlFlowPtr(element);
	return element;
	
}
std::shared_ptr<ControlFlow> umlFactoryImpl::createControlFlow_as_edge_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ControlFlowImpl> element(new ControlFlowImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getEdge()->push_back(element);
	
	}
	element->setThisControlFlowPtr(element);
	return element;
	
}
std::shared_ptr<ControlFlow> umlFactoryImpl::createControlFlow_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ControlFlowImpl> element(new ControlFlowImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisControlFlowPtr(element);
	return element;
	
}
std::shared_ptr<ControlFlow> umlFactoryImpl::createControlFlow_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ControlFlowImpl> element(new ControlFlowImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisControlFlowPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCreateLinkActionPtr(element);
	return element;
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkAction> umlFactoryImpl::createCreateLinkAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CreateLinkActionImpl> element(new CreateLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisCreateLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateLinkObjectAction> umlFactoryImpl::createCreateLinkObjectAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CreateLinkObjectActionImpl> element(new CreateLinkObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisCreateLinkObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisCreateObjectActionPtr(element);
	return element;
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<CreateObjectAction> umlFactoryImpl::createCreateObjectAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<CreateObjectActionImpl> element(new CreateObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisCreateObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DataStoreNode> umlFactoryImpl::createDataStoreNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DataStoreNodeImpl> element(new DataStoreNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDataStoreNodePtr(element);
	return element;
}
std::shared_ptr<DataStoreNode> umlFactoryImpl::createDataStoreNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DataStoreNodeImpl> element(new DataStoreNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDataStoreNodePtr(element);
	return element;
	
}
std::shared_ptr<DataStoreNode> umlFactoryImpl::createDataStoreNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<DataStoreNodeImpl> element(new DataStoreNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDataStoreNodePtr(element);
	return element;
	
}
std::shared_ptr<DataStoreNode> umlFactoryImpl::createDataStoreNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DataStoreNodeImpl> element(new DataStoreNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDataStoreNodePtr(element);
	return element;
	
}
std::shared_ptr<DataStoreNode> umlFactoryImpl::createDataStoreNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DataStoreNodeImpl> element(new DataStoreNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDataStoreNodePtr(element);
	return element;
	
}
std::shared_ptr<DataStoreNode> umlFactoryImpl::createDataStoreNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DataStoreNodeImpl> element(new DataStoreNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisDataStoreNodePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDataTypePtr(element);
	return element;
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DataType> umlFactoryImpl::createDataType_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DataTypeImpl> element(new DataTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDataTypePtr(element);
	return element;
	
}
std::shared_ptr<DecisionNode> umlFactoryImpl::createDecisionNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DecisionNodeImpl> element(new DecisionNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDecisionNodePtr(element);
	return element;
}
std::shared_ptr<DecisionNode> umlFactoryImpl::createDecisionNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DecisionNodeImpl> element(new DecisionNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDecisionNodePtr(element);
	return element;
	
}
std::shared_ptr<DecisionNode> umlFactoryImpl::createDecisionNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<DecisionNodeImpl> element(new DecisionNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDecisionNodePtr(element);
	return element;
	
}
std::shared_ptr<DecisionNode> umlFactoryImpl::createDecisionNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DecisionNodeImpl> element(new DecisionNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDecisionNodePtr(element);
	return element;
	
}
std::shared_ptr<DecisionNode> umlFactoryImpl::createDecisionNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DecisionNodeImpl> element(new DecisionNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDecisionNodePtr(element);
	return element;
	
}
std::shared_ptr<DecisionNode> umlFactoryImpl::createDecisionNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DecisionNodeImpl> element(new DecisionNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisDecisionNodePtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDependencyPtr(element);
	return element;
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Dependency> umlFactoryImpl::createDependency_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<DependencyImpl> element(new DependencyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisDependencyPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDeploymentPtr(element);
	return element;
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_deployment_in_DeploymentTarget(std::weak_ptr<uml::DeploymentTarget> par_DeploymentTarget, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl(par_DeploymentTarget));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DeploymentTarget.lock())
	{
		wp->getDeployment()->push_back(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<Deployment> umlFactoryImpl::createDeployment_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<DeploymentImpl> element(new DeploymentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisDeploymentPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDeploymentSpecificationPtr(element);
	return element;
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_configuration_in_Deployment(std::weak_ptr<uml::Deployment> par_Deployment, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl(par_Deployment));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Deployment.lock())
	{
		wp->getConfiguration()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_nestedArtifact_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getNestedArtifact()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DeploymentSpecification> umlFactoryImpl::createDeploymentSpecification_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DeploymentSpecificationImpl> element(new DeploymentSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDeploymentSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDestroyLinkActionPtr(element);
	return element;
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyLinkAction> umlFactoryImpl::createDestroyLinkAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DestroyLinkActionImpl> element(new DestroyLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisDestroyLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDestroyObjectActionPtr(element);
	return element;
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestroyObjectAction> umlFactoryImpl::createDestroyObjectAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<DestroyObjectActionImpl> element(new DestroyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisDestroyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<DestructionOccurrenceSpecification> umlFactoryImpl::createDestructionOccurrenceSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DestructionOccurrenceSpecificationImpl> element(new DestructionOccurrenceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDestructionOccurrenceSpecificationPtr(element);
	return element;
}
std::shared_ptr<DestructionOccurrenceSpecification> umlFactoryImpl::createDestructionOccurrenceSpecification_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<DestructionOccurrenceSpecificationImpl> element(new DestructionOccurrenceSpecificationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisDestructionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DestructionOccurrenceSpecification> umlFactoryImpl::createDestructionOccurrenceSpecification_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<DestructionOccurrenceSpecificationImpl> element(new DestructionOccurrenceSpecificationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisDestructionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DestructionOccurrenceSpecification> umlFactoryImpl::createDestructionOccurrenceSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DestructionOccurrenceSpecificationImpl> element(new DestructionOccurrenceSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDestructionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<DestructionOccurrenceSpecification> umlFactoryImpl::createDestructionOccurrenceSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DestructionOccurrenceSpecificationImpl> element(new DestructionOccurrenceSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDestructionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDevicePtr(element);
	return element;
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_nestedNode_in_Node(std::shared_ptr<Node> par_Node, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Node)
	{
		par_Node->getNestedNode()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Device> umlFactoryImpl::createDevice_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DeviceImpl> element(new DeviceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDevicePtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDurationPtr(element);
	return element;
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<Duration> umlFactoryImpl::createDuration_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<DurationImpl> element(new DurationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisDurationPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDurationConstraintPtr(element);
	return element;
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_condition_in_ParameterSet(std::shared_ptr<ParameterSet> par_ParameterSet, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ParameterSet)
	{
		par_ParameterSet->getCondition()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_condition_in_Extend(std::shared_ptr<Extend> par_Extend, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Extend)
	{
		par_Extend->setCondition(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_invariant_in_StateInvariant(std::shared_ptr<StateInvariant> par_StateInvariant, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StateInvariant)
	{
		par_StateInvariant->setInvariant(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_localPostcondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPostcondition()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_localPrecondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPrecondition()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_ownedRule_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedRule()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationConstraint> umlFactoryImpl::createDurationConstraint_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DurationConstraintImpl> element(new DurationConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationConstraintPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDurationIntervalPtr(element);
	return element;
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationInterval> umlFactoryImpl::createDurationInterval_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<DurationIntervalImpl> element(new DurationIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisDurationIntervalPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisDurationObservationPtr(element);
	return element;
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<DurationObservation> umlFactoryImpl::createDurationObservation_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<DurationObservationImpl> element(new DurationObservationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisDurationObservationPtr(element);
	return element;
	
}
std::shared_ptr<ElementImport> umlFactoryImpl::createElementImport(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ElementImportImpl> element(new ElementImportImpl());
	element->setMetaElementID(metaElementID);
	element->setThisElementImportPtr(element);
	return element;
}
std::shared_ptr<ElementImport> umlFactoryImpl::createElementImport_as_elementImport_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ElementImportImpl> element(new ElementImportImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getElementImport()->push_back(element);
	
	}
	element->setThisElementImportPtr(element);
	return element;
	
}
std::shared_ptr<ElementImport> umlFactoryImpl::createElementImport_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ElementImportImpl> element(new ElementImportImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisElementImportPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisEnumerationPtr(element);
	return element;
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<Enumeration> umlFactoryImpl::createEnumeration_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<EnumerationImpl> element(new EnumerationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisEnumerationPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl());
	element->setMetaElementID(metaElementID);
	element->setThisEnumerationLiteralPtr(element);
	return element;
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_ownedLiteral_in_Enumeration(std::weak_ptr<uml::Enumeration> par_Enumeration, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl(par_Enumeration));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Enumeration.lock())
	{
		wp->getOwnedLiteral()->push_back(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<EnumerationLiteral> umlFactoryImpl::createEnumerationLiteral_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<EnumerationLiteralImpl> element(new EnumerationLiteralImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisEnumerationLiteralPtr(element);
	return element;
	
}
std::shared_ptr<ExceptionHandler> umlFactoryImpl::createExceptionHandler(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExceptionHandlerImpl> element(new ExceptionHandlerImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExceptionHandlerPtr(element);
	return element;
}
std::shared_ptr<ExceptionHandler> umlFactoryImpl::createExceptionHandler_as_handler_in_ExecutableNode(std::weak_ptr<uml::ExecutableNode> par_ExecutableNode, const int metaElementID) const
{
	std::shared_ptr<ExceptionHandlerImpl> element(new ExceptionHandlerImpl(par_ExecutableNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ExecutableNode.lock())
	{
		wp->getHandler()->push_back(element);
	
	}
	element->setThisExceptionHandlerPtr(element);
	return element;
	
}
std::shared_ptr<ExceptionHandler> umlFactoryImpl::createExceptionHandler_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExceptionHandlerImpl> element(new ExceptionHandlerImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExceptionHandlerPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExecutionEnvironmentPtr(element);
	return element;
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_nestedNode_in_Node(std::shared_ptr<Node> par_Node, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Node)
	{
		par_Node->getNestedNode()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionEnvironment> umlFactoryImpl::createExecutionEnvironment_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ExecutionEnvironmentImpl> element(new ExecutionEnvironmentImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisExecutionEnvironmentPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionOccurrenceSpecification> umlFactoryImpl::createExecutionOccurrenceSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExecutionOccurrenceSpecificationImpl> element(new ExecutionOccurrenceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExecutionOccurrenceSpecificationPtr(element);
	return element;
}
std::shared_ptr<ExecutionOccurrenceSpecification> umlFactoryImpl::createExecutionOccurrenceSpecification_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ExecutionOccurrenceSpecificationImpl> element(new ExecutionOccurrenceSpecificationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisExecutionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionOccurrenceSpecification> umlFactoryImpl::createExecutionOccurrenceSpecification_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<ExecutionOccurrenceSpecificationImpl> element(new ExecutionOccurrenceSpecificationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisExecutionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionOccurrenceSpecification> umlFactoryImpl::createExecutionOccurrenceSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExecutionOccurrenceSpecificationImpl> element(new ExecutionOccurrenceSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExecutionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ExecutionOccurrenceSpecification> umlFactoryImpl::createExecutionOccurrenceSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExecutionOccurrenceSpecificationImpl> element(new ExecutionOccurrenceSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExecutionOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionNode> umlFactoryImpl::createExpansionNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExpansionNodeImpl> element(new ExpansionNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExpansionNodePtr(element);
	return element;
}
std::shared_ptr<ExpansionNode> umlFactoryImpl::createExpansionNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionNodeImpl> element(new ExpansionNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisExpansionNodePtr(element);
	return element;
	
}
std::shared_ptr<ExpansionNode> umlFactoryImpl::createExpansionNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ExpansionNodeImpl> element(new ExpansionNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisExpansionNodePtr(element);
	return element;
	
}
std::shared_ptr<ExpansionNode> umlFactoryImpl::createExpansionNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExpansionNodeImpl> element(new ExpansionNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExpansionNodePtr(element);
	return element;
	
}
std::shared_ptr<ExpansionNode> umlFactoryImpl::createExpansionNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExpansionNodeImpl> element(new ExpansionNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExpansionNodePtr(element);
	return element;
	
}
std::shared_ptr<ExpansionNode> umlFactoryImpl::createExpansionNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionNodeImpl> element(new ExpansionNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisExpansionNodePtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExpansionRegionPtr(element);
	return element;
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_structuredNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getStructuredNode()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<ExpansionRegion> umlFactoryImpl::createExpansionRegion_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<ExpansionRegionImpl> element(new ExpansionRegionImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisExpansionRegionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExpressionPtr(element);
	return element;
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Expression> umlFactoryImpl::createExpression_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<ExpressionImpl> element(new ExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Extend> umlFactoryImpl::createExtend(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExtendImpl> element(new ExtendImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExtendPtr(element);
	return element;
}
std::shared_ptr<Extend> umlFactoryImpl::createExtend_as_extend_in_UseCase(std::weak_ptr<uml::UseCase> par_UseCase, const int metaElementID) const
{
	std::shared_ptr<ExtendImpl> element(new ExtendImpl(par_UseCase));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_UseCase.lock())
	{
		wp->getExtend()->push_back(element);
	
	}
	element->setThisExtendPtr(element);
	return element;
	
}
std::shared_ptr<Extend> umlFactoryImpl::createExtend_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExtendImpl> element(new ExtendImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExtendPtr(element);
	return element;
	
}
std::shared_ptr<Extend> umlFactoryImpl::createExtend_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExtendImpl> element(new ExtendImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExtendPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExtensionPtr(element);
	return element;
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<Extension> umlFactoryImpl::createExtension_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ExtensionImpl> element(new ExtensionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisExtensionPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExtensionEndPtr(element);
	return element;
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedAttribute_in_Class(std::weak_ptr<uml::Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_Class));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Class.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedAttribute_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedAttribute_in_DataType(std::weak_ptr<uml::DataType> par_DataType, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_DataType));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DataType.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedAttribute_in_Interface(std::weak_ptr<uml::Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_Interface));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interface.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedAttribute_in_Signal(std::shared_ptr<Signal> par_Signal, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Signal)
	{
		par_Signal->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedAttribute_in_StructuredClassifier(std::shared_ptr<StructuredClassifier> par_StructuredClassifier, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredClassifier)
	{
		par_StructuredClassifier->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedEnd_in_Association(std::weak_ptr<uml::Association> par_Association, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_Association));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Association.lock())
	{
		wp->getOwnedEnd()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionEnd> umlFactoryImpl::createExtensionEnd_as_qualifier_in_Property(std::weak_ptr<uml::Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<ExtensionEndImpl> element(new ExtensionEndImpl(par_Property));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Property.lock())
	{
		wp->getQualifier()->push_back(element);
	
	}
	element->setThisExtensionEndPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionPoint> umlFactoryImpl::createExtensionPoint(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ExtensionPointImpl> element(new ExtensionPointImpl());
	element->setMetaElementID(metaElementID);
	element->setThisExtensionPointPtr(element);
	return element;
}
std::shared_ptr<ExtensionPoint> umlFactoryImpl::createExtensionPoint_as_extensionPoint_in_UseCase(std::weak_ptr<uml::UseCase> par_UseCase, const int metaElementID) const
{
	std::shared_ptr<ExtensionPointImpl> element(new ExtensionPointImpl(par_UseCase));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_UseCase.lock())
	{
		wp->getExtensionPoint()->push_back(element);
	
	}
	element->setThisExtensionPointPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionPoint> umlFactoryImpl::createExtensionPoint_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ExtensionPointImpl> element(new ExtensionPointImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisExtensionPointPtr(element);
	return element;
	
}
std::shared_ptr<ExtensionPoint> umlFactoryImpl::createExtensionPoint_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ExtensionPointImpl> element(new ExtensionPointImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisExtensionPointPtr(element);
	return element;
	
}
std::shared_ptr<Factory> umlFactoryImpl::createFactory(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<FactoryImpl> element(new FactoryImpl());
	element->setMetaElementID(metaElementID);
	element->setThisFactoryPtr(element);
	return element;
}
std::shared_ptr<Factory> umlFactoryImpl::createFactory_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<FactoryImpl> element(new FactoryImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisFactoryPtr(element);
	return element;
	
}
std::shared_ptr<FinalState> umlFactoryImpl::createFinalState(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<FinalStateImpl> element(new FinalStateImpl());
	element->setMetaElementID(metaElementID);
	element->setThisFinalStatePtr(element);
	return element;
}
std::shared_ptr<FinalState> umlFactoryImpl::createFinalState_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<FinalStateImpl> element(new FinalStateImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisFinalStatePtr(element);
	return element;
	
}
std::shared_ptr<FinalState> umlFactoryImpl::createFinalState_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<FinalStateImpl> element(new FinalStateImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisFinalStatePtr(element);
	return element;
	
}
std::shared_ptr<FinalState> umlFactoryImpl::createFinalState_as_subvertex_in_Region(std::weak_ptr<uml::Region> par_Region, const int metaElementID) const
{
	std::shared_ptr<FinalStateImpl> element(new FinalStateImpl(par_Region));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Region.lock())
	{
		wp->getSubvertex()->push_back(element);
	
	}
	element->setThisFinalStatePtr(element);
	return element;
	
}
std::shared_ptr<FlowFinalNode> umlFactoryImpl::createFlowFinalNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<FlowFinalNodeImpl> element(new FlowFinalNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisFlowFinalNodePtr(element);
	return element;
}
std::shared_ptr<FlowFinalNode> umlFactoryImpl::createFlowFinalNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<FlowFinalNodeImpl> element(new FlowFinalNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisFlowFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<FlowFinalNode> umlFactoryImpl::createFlowFinalNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<FlowFinalNodeImpl> element(new FlowFinalNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisFlowFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<FlowFinalNode> umlFactoryImpl::createFlowFinalNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<FlowFinalNodeImpl> element(new FlowFinalNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisFlowFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<FlowFinalNode> umlFactoryImpl::createFlowFinalNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<FlowFinalNodeImpl> element(new FlowFinalNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisFlowFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<FlowFinalNode> umlFactoryImpl::createFlowFinalNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<FlowFinalNodeImpl> element(new FlowFinalNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisFlowFinalNodePtr(element);
	return element;
	
}
std::shared_ptr<ForkNode> umlFactoryImpl::createForkNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ForkNodeImpl> element(new ForkNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisForkNodePtr(element);
	return element;
}
std::shared_ptr<ForkNode> umlFactoryImpl::createForkNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ForkNodeImpl> element(new ForkNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisForkNodePtr(element);
	return element;
	
}
std::shared_ptr<ForkNode> umlFactoryImpl::createForkNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ForkNodeImpl> element(new ForkNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisForkNodePtr(element);
	return element;
	
}
std::shared_ptr<ForkNode> umlFactoryImpl::createForkNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ForkNodeImpl> element(new ForkNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisForkNodePtr(element);
	return element;
	
}
std::shared_ptr<ForkNode> umlFactoryImpl::createForkNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ForkNodeImpl> element(new ForkNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisForkNodePtr(element);
	return element;
	
}
std::shared_ptr<ForkNode> umlFactoryImpl::createForkNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ForkNodeImpl> element(new ForkNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisForkNodePtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	element->setThisFunctionBehaviorPtr(element);
	return element;
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_doActivity_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setDoActivity(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_effect_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->setEffect(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_entry_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setEntry(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_exit_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setExit(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedBehavior_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getOwnedBehavior()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<FunctionBehavior> umlFactoryImpl::createFunctionBehavior_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<FunctionBehaviorImpl> element(new FunctionBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisFunctionBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<Gate> umlFactoryImpl::createGate(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<GateImpl> element(new GateImpl());
	element->setMetaElementID(metaElementID);
	element->setThisGatePtr(element);
	return element;
}
std::shared_ptr<Gate> umlFactoryImpl::createGate_as_actualGate_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<GateImpl> element(new GateImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getActualGate()->push_back(element);
	
	}
	element->setThisGatePtr(element);
	return element;
	
}
std::shared_ptr<Gate> umlFactoryImpl::createGate_as_cfragmentGate_in_CombinedFragment(std::shared_ptr<CombinedFragment> par_CombinedFragment, const int metaElementID) const
{
	std::shared_ptr<GateImpl> element(new GateImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CombinedFragment)
	{
		par_CombinedFragment->getCfragmentGate()->push_back(element);
	
	}
	element->setThisGatePtr(element);
	return element;
	
}
std::shared_ptr<Gate> umlFactoryImpl::createGate_as_formalGate_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<GateImpl> element(new GateImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getFormalGate()->push_back(element);
	
	}
	element->setThisGatePtr(element);
	return element;
	
}
std::shared_ptr<Gate> umlFactoryImpl::createGate_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<GateImpl> element(new GateImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisGatePtr(element);
	return element;
	
}
std::shared_ptr<Gate> umlFactoryImpl::createGate_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<GateImpl> element(new GateImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisGatePtr(element);
	return element;
	
}
std::shared_ptr<GeneralOrdering> umlFactoryImpl::createGeneralOrdering(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<GeneralOrderingImpl> element(new GeneralOrderingImpl());
	element->setMetaElementID(metaElementID);
	element->setThisGeneralOrderingPtr(element);
	return element;
}
std::shared_ptr<GeneralOrdering> umlFactoryImpl::createGeneralOrdering_as_generalOrdering_in_InteractionFragment(std::shared_ptr<InteractionFragment> par_InteractionFragment, const int metaElementID) const
{
	std::shared_ptr<GeneralOrderingImpl> element(new GeneralOrderingImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionFragment)
	{
		par_InteractionFragment->getGeneralOrdering()->push_back(element);
	
	}
	element->setThisGeneralOrderingPtr(element);
	return element;
	
}
std::shared_ptr<GeneralOrdering> umlFactoryImpl::createGeneralOrdering_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<GeneralOrderingImpl> element(new GeneralOrderingImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisGeneralOrderingPtr(element);
	return element;
	
}
std::shared_ptr<GeneralOrdering> umlFactoryImpl::createGeneralOrdering_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<GeneralOrderingImpl> element(new GeneralOrderingImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisGeneralOrderingPtr(element);
	return element;
	
}
std::shared_ptr<Generalization> umlFactoryImpl::createGeneralization(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<GeneralizationImpl> element(new GeneralizationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisGeneralizationPtr(element);
	return element;
}
std::shared_ptr<Generalization> umlFactoryImpl::createGeneralization_as_generalization_in_Classifier(std::weak_ptr<uml::Classifier> par_Classifier, const int metaElementID) const
{
	std::shared_ptr<GeneralizationImpl> element(new GeneralizationImpl(par_Classifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Classifier.lock())
	{
		wp->getGeneralization()->push_back(element);
	
	}
	element->setThisGeneralizationPtr(element);
	return element;
	
}
std::shared_ptr<Generalization> umlFactoryImpl::createGeneralization_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<GeneralizationImpl> element(new GeneralizationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisGeneralizationPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl());
	element->setMetaElementID(metaElementID);
	element->setThisGeneralizationSetPtr(element);
	return element;
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<GeneralizationSet> umlFactoryImpl::createGeneralizationSet_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<GeneralizationSetImpl> element(new GeneralizationSetImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisGeneralizationSetPtr(element);
	return element;
	
}
std::shared_ptr<Image> umlFactoryImpl::createImage(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ImageImpl> element(new ImageImpl());
	element->setMetaElementID(metaElementID);
	element->setThisImagePtr(element);
	return element;
}
std::shared_ptr<Image> umlFactoryImpl::createImage_as_icon_in_Stereotype(std::shared_ptr<Stereotype> par_Stereotype, const int metaElementID) const
{
	std::shared_ptr<ImageImpl> element(new ImageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Stereotype)
	{
		par_Stereotype->getIcon()->push_back(element);
	
	}
	element->setThisImagePtr(element);
	return element;
	
}
std::shared_ptr<Image> umlFactoryImpl::createImage_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ImageImpl> element(new ImageImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisImagePtr(element);
	return element;
	
}
std::shared_ptr<Include> umlFactoryImpl::createInclude(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<IncludeImpl> element(new IncludeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisIncludePtr(element);
	return element;
}
std::shared_ptr<Include> umlFactoryImpl::createInclude_as_include_in_UseCase(std::weak_ptr<uml::UseCase> par_UseCase, const int metaElementID) const
{
	std::shared_ptr<IncludeImpl> element(new IncludeImpl(par_UseCase));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_UseCase.lock())
	{
		wp->getInclude()->push_back(element);
	
	}
	element->setThisIncludePtr(element);
	return element;
	
}
std::shared_ptr<Include> umlFactoryImpl::createInclude_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<IncludeImpl> element(new IncludeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisIncludePtr(element);
	return element;
	
}
std::shared_ptr<Include> umlFactoryImpl::createInclude_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<IncludeImpl> element(new IncludeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisIncludePtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInformationFlowPtr(element);
	return element;
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationFlow> umlFactoryImpl::createInformationFlow_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InformationFlowImpl> element(new InformationFlowImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInformationFlowPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInformationItemPtr(element);
	return element;
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InformationItem> umlFactoryImpl::createInformationItem_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InformationItemImpl> element(new InformationItemImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInformationItemPtr(element);
	return element;
	
}
std::shared_ptr<InitialNode> umlFactoryImpl::createInitialNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InitialNodeImpl> element(new InitialNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInitialNodePtr(element);
	return element;
}
std::shared_ptr<InitialNode> umlFactoryImpl::createInitialNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<InitialNodeImpl> element(new InitialNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisInitialNodePtr(element);
	return element;
	
}
std::shared_ptr<InitialNode> umlFactoryImpl::createInitialNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<InitialNodeImpl> element(new InitialNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisInitialNodePtr(element);
	return element;
	
}
std::shared_ptr<InitialNode> umlFactoryImpl::createInitialNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InitialNodeImpl> element(new InitialNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInitialNodePtr(element);
	return element;
	
}
std::shared_ptr<InitialNode> umlFactoryImpl::createInitialNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InitialNodeImpl> element(new InitialNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInitialNodePtr(element);
	return element;
	
}
std::shared_ptr<InitialNode> umlFactoryImpl::createInitialNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<InitialNodeImpl> element(new InitialNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisInitialNodePtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInputPinPtr(element);
	return element;
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_argument_in_InvocationAction(std::weak_ptr<uml::InvocationAction> par_InvocationAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_InvocationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InvocationAction.lock())
	{
		wp->getArgument()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_collection_in_ReduceAction(std::shared_ptr<ReduceAction> par_ReduceAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReduceAction)
	{
		par_ReduceAction->setCollection(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_exception_in_RaiseExceptionAction(std::shared_ptr<RaiseExceptionAction> par_RaiseExceptionAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_RaiseExceptionAction)
	{
		par_RaiseExceptionAction->setException(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_first_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setFirst(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_input_in_Action(std::weak_ptr<uml::Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_Action));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Action.lock())
	{
		wp->getInput()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_inputValue_in_LinkAction(std::shared_ptr<LinkAction> par_LinkAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkAction)
	{
		par_LinkAction->getInputValue()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_inputValue_in_OpaqueAction(std::shared_ptr<OpaqueAction> par_OpaqueAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_OpaqueAction)
	{
		par_OpaqueAction->getInputValue()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_insertAt_in_AddStructuralFeatureValueAction(std::weak_ptr<uml::AddStructuralFeatureValueAction> par_AddStructuralFeatureValueAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_AddStructuralFeatureValueAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_AddStructuralFeatureValueAction.lock())
	{
		wp->setInsertAt(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_insertAt_in_AddVariableValueAction(std::shared_ptr<AddVariableValueAction> par_AddVariableValueAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_AddVariableValueAction)
	{
		par_AddVariableValueAction->setInsertAt(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_loopVariableInput_in_LoopNode(std::shared_ptr<LoopNode> par_LoopNode, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LoopNode)
	{
		par_LoopNode->getLoopVariableInput()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_StructuralFeatureAction(std::weak_ptr<uml::StructuralFeatureAction> par_StructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_StructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuralFeatureAction.lock())
	{
		wp->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_ClearAssociationAction(std::shared_ptr<ClearAssociationAction> par_ClearAssociationAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ClearAssociationAction)
	{
		par_ClearAssociationAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_ReadIsClassifiedObjectAction(std::shared_ptr<ReadIsClassifiedObjectAction> par_ReadIsClassifiedObjectAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadIsClassifiedObjectAction)
	{
		par_ReadIsClassifiedObjectAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_ReadLinkObjectEndAction(std::shared_ptr<ReadLinkObjectEndAction> par_ReadLinkObjectEndAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndAction)
	{
		par_ReadLinkObjectEndAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_ReadLinkObjectEndQualifierAction(std::shared_ptr<ReadLinkObjectEndQualifierAction> par_ReadLinkObjectEndQualifierAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndQualifierAction)
	{
		par_ReadLinkObjectEndQualifierAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_ReclassifyObjectAction(std::shared_ptr<ReclassifyObjectAction> par_ReclassifyObjectAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReclassifyObjectAction)
	{
		par_ReclassifyObjectAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_StartClassifierBehaviorAction(std::shared_ptr<StartClassifierBehaviorAction> par_StartClassifierBehaviorAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StartClassifierBehaviorAction)
	{
		par_StartClassifierBehaviorAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_StartObjectBehaviorAction(std::shared_ptr<StartObjectBehaviorAction> par_StartObjectBehaviorAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StartObjectBehaviorAction)
	{
		par_StartObjectBehaviorAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_object_in_UnmarshallAction(std::shared_ptr<UnmarshallAction> par_UnmarshallAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_UnmarshallAction)
	{
		par_UnmarshallAction->setObject(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_removeAt_in_RemoveStructuralFeatureValueAction(std::weak_ptr<uml::RemoveStructuralFeatureValueAction> par_RemoveStructuralFeatureValueAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_RemoveStructuralFeatureValueAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_RemoveStructuralFeatureValueAction.lock())
	{
		wp->setRemoveAt(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_removeAt_in_RemoveVariableValueAction(std::shared_ptr<RemoveVariableValueAction> par_RemoveVariableValueAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_RemoveVariableValueAction)
	{
		par_RemoveVariableValueAction->setRemoveAt(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_replyValue_in_ReplyAction(std::shared_ptr<ReplyAction> par_ReplyAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReplyAction)
	{
		par_ReplyAction->getReplyValue()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_request_in_SendObjectAction(std::shared_ptr<SendObjectAction> par_SendObjectAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendObjectAction)
	{
		par_SendObjectAction->setRequest(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_returnInformation_in_ReplyAction(std::shared_ptr<ReplyAction> par_ReplyAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReplyAction)
	{
		par_ReplyAction->setReturnInformation(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_second_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setSecond(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_structuredNodeInput_in_StructuredActivityNode(std::shared_ptr<StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredActivityNode)
	{
		par_StructuredActivityNode->getStructuredNodeInput()->push_back(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_target_in_CallOperationAction(std::weak_ptr<uml::CallOperationAction> par_CallOperationAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_CallOperationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_CallOperationAction.lock())
	{
		wp->setTarget(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_target_in_DestroyObjectAction(std::weak_ptr<uml::DestroyObjectAction> par_DestroyObjectAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_DestroyObjectAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DestroyObjectAction.lock())
	{
		wp->setTarget(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_target_in_SendObjectAction(std::shared_ptr<SendObjectAction> par_SendObjectAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendObjectAction)
	{
		par_SendObjectAction->setTarget(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_target_in_SendSignalAction(std::shared_ptr<SendSignalAction> par_SendSignalAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendSignalAction)
	{
		par_SendSignalAction->setTarget(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_value_in_WriteStructuralFeatureAction(std::weak_ptr<uml::WriteStructuralFeatureAction> par_WriteStructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl(par_WriteStructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_WriteStructuralFeatureAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InputPin> umlFactoryImpl::createInputPin_as_value_in_WriteVariableAction(std::shared_ptr<WriteVariableAction> par_WriteVariableAction, const int metaElementID) const
{
	std::shared_ptr<InputPinImpl> element(new InputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_WriteVariableAction)
	{
		par_WriteVariableAction->setValue(element);
	
	}
	element->setThisInputPinPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInstanceSpecificationPtr(element);
	return element;
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceSpecification> umlFactoryImpl::createInstanceSpecification_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InstanceSpecificationImpl> element(new InstanceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInstanceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInstanceValuePtr(element);
	return element;
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<InstanceValue> umlFactoryImpl::createInstanceValue_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<InstanceValueImpl> element(new InstanceValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisInstanceValuePtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInteractionPtr(element);
	return element;
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_doActivity_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setDoActivity(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_effect_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->setEffect(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_entry_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setEntry(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_exit_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setExit(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedBehavior_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getOwnedBehavior()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<Interaction> umlFactoryImpl::createInteraction_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InteractionImpl> element(new InteractionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInteractionPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInteractionConstraintPtr(element);
	return element;
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_condition_in_ParameterSet(std::shared_ptr<ParameterSet> par_ParameterSet, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ParameterSet)
	{
		par_ParameterSet->getCondition()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_condition_in_Extend(std::shared_ptr<Extend> par_Extend, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Extend)
	{
		par_Extend->setCondition(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_guard_in_InteractionOperand(std::shared_ptr<InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionOperand)
	{
		par_InteractionOperand->setGuard(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_invariant_in_StateInvariant(std::shared_ptr<StateInvariant> par_StateInvariant, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StateInvariant)
	{
		par_StateInvariant->setInvariant(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_localPostcondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPostcondition()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_localPrecondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPrecondition()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_ownedRule_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedRule()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionConstraint> umlFactoryImpl::createInteractionConstraint_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InteractionConstraintImpl> element(new InteractionConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInteractionConstraintPtr(element);
	return element;
	
}
std::shared_ptr<InteractionOperand> umlFactoryImpl::createInteractionOperand(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InteractionOperandImpl> element(new InteractionOperandImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInteractionOperandPtr(element);
	return element;
}
std::shared_ptr<InteractionOperand> umlFactoryImpl::createInteractionOperand_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<InteractionOperandImpl> element(new InteractionOperandImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisInteractionOperandPtr(element);
	return element;
	
}
std::shared_ptr<InteractionOperand> umlFactoryImpl::createInteractionOperand_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<InteractionOperandImpl> element(new InteractionOperandImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisInteractionOperandPtr(element);
	return element;
	
}
std::shared_ptr<InteractionOperand> umlFactoryImpl::createInteractionOperand_as_operand_in_CombinedFragment(std::shared_ptr<CombinedFragment> par_CombinedFragment, const int metaElementID) const
{
	std::shared_ptr<InteractionOperandImpl> element(new InteractionOperandImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CombinedFragment)
	{
		par_CombinedFragment->getOperand()->push_back(element);
	
	}
	element->setThisInteractionOperandPtr(element);
	return element;
	
}
std::shared_ptr<InteractionOperand> umlFactoryImpl::createInteractionOperand_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InteractionOperandImpl> element(new InteractionOperandImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInteractionOperandPtr(element);
	return element;
	
}
std::shared_ptr<InteractionOperand> umlFactoryImpl::createInteractionOperand_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InteractionOperandImpl> element(new InteractionOperandImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInteractionOperandPtr(element);
	return element;
	
}
std::shared_ptr<InteractionUse> umlFactoryImpl::createInteractionUse(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InteractionUseImpl> element(new InteractionUseImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInteractionUsePtr(element);
	return element;
}
std::shared_ptr<InteractionUse> umlFactoryImpl::createInteractionUse_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<InteractionUseImpl> element(new InteractionUseImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisInteractionUsePtr(element);
	return element;
	
}
std::shared_ptr<InteractionUse> umlFactoryImpl::createInteractionUse_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<InteractionUseImpl> element(new InteractionUseImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisInteractionUsePtr(element);
	return element;
	
}
std::shared_ptr<InteractionUse> umlFactoryImpl::createInteractionUse_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InteractionUseImpl> element(new InteractionUseImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInteractionUsePtr(element);
	return element;
	
}
std::shared_ptr<InteractionUse> umlFactoryImpl::createInteractionUse_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InteractionUseImpl> element(new InteractionUseImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInteractionUsePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInterfacePtr(element);
	return element;
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<Interface> umlFactoryImpl::createInterface_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InterfaceImpl> element(new InterfaceImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInterfacePtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInterfaceRealizationPtr(element);
	return element;
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_interfaceRealization_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getInterfaceRealization()->push_back(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterfaceRealization> umlFactoryImpl::createInterfaceRealization_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<InterfaceRealizationImpl> element(new InterfaceRealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisInterfaceRealizationPtr(element);
	return element;
	
}
std::shared_ptr<InterruptibleActivityRegion> umlFactoryImpl::createInterruptibleActivityRegion(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<InterruptibleActivityRegionImpl> element(new InterruptibleActivityRegionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisInterruptibleActivityRegionPtr(element);
	return element;
}
std::shared_ptr<InterruptibleActivityRegion> umlFactoryImpl::createInterruptibleActivityRegion_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<InterruptibleActivityRegionImpl> element(new InterruptibleActivityRegionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisInterruptibleActivityRegionPtr(element);
	return element;
	
}
std::shared_ptr<InterruptibleActivityRegion> umlFactoryImpl::createInterruptibleActivityRegion_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<InterruptibleActivityRegionImpl> element(new InterruptibleActivityRegionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisInterruptibleActivityRegionPtr(element);
	return element;
	
}
std::shared_ptr<InterruptibleActivityRegion> umlFactoryImpl::createInterruptibleActivityRegion_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<InterruptibleActivityRegionImpl> element(new InterruptibleActivityRegionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisInterruptibleActivityRegionPtr(element);
	return element;
	
}
std::shared_ptr<InterruptibleActivityRegion> umlFactoryImpl::createInterruptibleActivityRegion_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<InterruptibleActivityRegionImpl> element(new InterruptibleActivityRegionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisInterruptibleActivityRegionPtr(element);
	return element;
	
}
std::shared_ptr<InterruptibleActivityRegion> umlFactoryImpl::createInterruptibleActivityRegion_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<InterruptibleActivityRegionImpl> element(new InterruptibleActivityRegionImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisInterruptibleActivityRegionPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	element->setThisIntervalPtr(element);
	return element;
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<Interval> umlFactoryImpl::createInterval_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<IntervalImpl> element(new IntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisIntervalPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	element->setThisIntervalConstraintPtr(element);
	return element;
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_condition_in_ParameterSet(std::shared_ptr<ParameterSet> par_ParameterSet, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ParameterSet)
	{
		par_ParameterSet->getCondition()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_condition_in_Extend(std::shared_ptr<Extend> par_Extend, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Extend)
	{
		par_Extend->setCondition(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_invariant_in_StateInvariant(std::shared_ptr<StateInvariant> par_StateInvariant, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StateInvariant)
	{
		par_StateInvariant->setInvariant(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_localPostcondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPostcondition()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_localPrecondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPrecondition()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_ownedRule_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedRule()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<IntervalConstraint> umlFactoryImpl::createIntervalConstraint_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<IntervalConstraintImpl> element(new IntervalConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisIntervalConstraintPtr(element);
	return element;
	
}
std::shared_ptr<JoinNode> umlFactoryImpl::createJoinNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<JoinNodeImpl> element(new JoinNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisJoinNodePtr(element);
	return element;
}
std::shared_ptr<JoinNode> umlFactoryImpl::createJoinNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<JoinNodeImpl> element(new JoinNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisJoinNodePtr(element);
	return element;
	
}
std::shared_ptr<JoinNode> umlFactoryImpl::createJoinNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<JoinNodeImpl> element(new JoinNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisJoinNodePtr(element);
	return element;
	
}
std::shared_ptr<JoinNode> umlFactoryImpl::createJoinNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<JoinNodeImpl> element(new JoinNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisJoinNodePtr(element);
	return element;
	
}
std::shared_ptr<JoinNode> umlFactoryImpl::createJoinNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<JoinNodeImpl> element(new JoinNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisJoinNodePtr(element);
	return element;
	
}
std::shared_ptr<JoinNode> umlFactoryImpl::createJoinNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<JoinNodeImpl> element(new JoinNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisJoinNodePtr(element);
	return element;
	
}
std::shared_ptr<Lifeline> umlFactoryImpl::createLifeline(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LifelineImpl> element(new LifelineImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLifelinePtr(element);
	return element;
}
std::shared_ptr<Lifeline> umlFactoryImpl::createLifeline_as_lifeline_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<LifelineImpl> element(new LifelineImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getLifeline()->push_back(element);
	
	}
	element->setThisLifelinePtr(element);
	return element;
	
}
std::shared_ptr<Lifeline> umlFactoryImpl::createLifeline_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LifelineImpl> element(new LifelineImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLifelinePtr(element);
	return element;
	
}
std::shared_ptr<Lifeline> umlFactoryImpl::createLifeline_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LifelineImpl> element(new LifelineImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLifelinePtr(element);
	return element;
	
}
std::shared_ptr<LinkEndCreationData> umlFactoryImpl::createLinkEndCreationData(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LinkEndCreationDataImpl> element(new LinkEndCreationDataImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLinkEndCreationDataPtr(element);
	return element;
}
std::shared_ptr<LinkEndCreationData> umlFactoryImpl::createLinkEndCreationData_as_endData_in_LinkAction(std::shared_ptr<LinkAction> par_LinkAction, const int metaElementID) const
{
	std::shared_ptr<LinkEndCreationDataImpl> element(new LinkEndCreationDataImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkAction)
	{
		par_LinkAction->getEndData()->push_back(element);
	
	}
	element->setThisLinkEndCreationDataPtr(element);
	return element;
	
}
std::shared_ptr<LinkEndCreationData> umlFactoryImpl::createLinkEndCreationData_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LinkEndCreationDataImpl> element(new LinkEndCreationDataImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLinkEndCreationDataPtr(element);
	return element;
	
}
std::shared_ptr<LinkEndData> umlFactoryImpl::createLinkEndData(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LinkEndDataImpl> element(new LinkEndDataImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLinkEndDataPtr(element);
	return element;
}
std::shared_ptr<LinkEndData> umlFactoryImpl::createLinkEndData_as_endData_in_LinkAction(std::shared_ptr<LinkAction> par_LinkAction, const int metaElementID) const
{
	std::shared_ptr<LinkEndDataImpl> element(new LinkEndDataImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkAction)
	{
		par_LinkAction->getEndData()->push_back(element);
	
	}
	element->setThisLinkEndDataPtr(element);
	return element;
	
}
std::shared_ptr<LinkEndData> umlFactoryImpl::createLinkEndData_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LinkEndDataImpl> element(new LinkEndDataImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLinkEndDataPtr(element);
	return element;
	
}
std::shared_ptr<LinkEndDestructionData> umlFactoryImpl::createLinkEndDestructionData(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LinkEndDestructionDataImpl> element(new LinkEndDestructionDataImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLinkEndDestructionDataPtr(element);
	return element;
}
std::shared_ptr<LinkEndDestructionData> umlFactoryImpl::createLinkEndDestructionData_as_endData_in_LinkAction(std::shared_ptr<LinkAction> par_LinkAction, const int metaElementID) const
{
	std::shared_ptr<LinkEndDestructionDataImpl> element(new LinkEndDestructionDataImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkAction)
	{
		par_LinkAction->getEndData()->push_back(element);
	
	}
	element->setThisLinkEndDestructionDataPtr(element);
	return element;
	
}
std::shared_ptr<LinkEndDestructionData> umlFactoryImpl::createLinkEndDestructionData_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LinkEndDestructionDataImpl> element(new LinkEndDestructionDataImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLinkEndDestructionDataPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLiteralBooleanPtr(element);
	return element;
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralBoolean> umlFactoryImpl::createLiteralBoolean_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralBooleanImpl> element(new LiteralBooleanImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisLiteralBooleanPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLiteralIntegerPtr(element);
	return element;
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralInteger> umlFactoryImpl::createLiteralInteger_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralIntegerImpl> element(new LiteralIntegerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisLiteralIntegerPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLiteralNullPtr(element);
	return element;
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralNull> umlFactoryImpl::createLiteralNull_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralNullImpl> element(new LiteralNullImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisLiteralNullPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLiteralRealPtr(element);
	return element;
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralReal> umlFactoryImpl::createLiteralReal_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralRealImpl> element(new LiteralRealImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisLiteralRealPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLiteralStringPtr(element);
	return element;
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralString> umlFactoryImpl::createLiteralString_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralStringImpl> element(new LiteralStringImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisLiteralStringPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LiteralUnlimitedNatural> umlFactoryImpl::createLiteralUnlimitedNatural_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<LiteralUnlimitedNaturalImpl> element(new LiteralUnlimitedNaturalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisLiteralUnlimitedNaturalPtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisLoopNodePtr(element);
	return element;
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_structuredNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getStructuredNode()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<LoopNode> umlFactoryImpl::createLoopNode_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<LoopNodeImpl> element(new LoopNodeImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisLoopNodePtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisManifestationPtr(element);
	return element;
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_manifestation_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getManifestation()->push_back(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<Manifestation> umlFactoryImpl::createManifestation_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<ManifestationImpl> element(new ManifestationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisManifestationPtr(element);
	return element;
	
}
std::shared_ptr<MergeNode> umlFactoryImpl::createMergeNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<MergeNodeImpl> element(new MergeNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisMergeNodePtr(element);
	return element;
}
std::shared_ptr<MergeNode> umlFactoryImpl::createMergeNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<MergeNodeImpl> element(new MergeNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisMergeNodePtr(element);
	return element;
	
}
std::shared_ptr<MergeNode> umlFactoryImpl::createMergeNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<MergeNodeImpl> element(new MergeNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisMergeNodePtr(element);
	return element;
	
}
std::shared_ptr<MergeNode> umlFactoryImpl::createMergeNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<MergeNodeImpl> element(new MergeNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisMergeNodePtr(element);
	return element;
	
}
std::shared_ptr<MergeNode> umlFactoryImpl::createMergeNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<MergeNodeImpl> element(new MergeNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisMergeNodePtr(element);
	return element;
	
}
std::shared_ptr<MergeNode> umlFactoryImpl::createMergeNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<MergeNodeImpl> element(new MergeNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisMergeNodePtr(element);
	return element;
	
}
std::shared_ptr<Message> umlFactoryImpl::createMessage(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<MessageImpl> element(new MessageImpl());
	element->setMetaElementID(metaElementID);
	element->setThisMessagePtr(element);
	return element;
}
std::shared_ptr<Message> umlFactoryImpl::createMessage_as_message_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<MessageImpl> element(new MessageImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getMessage()->push_back(element);
	
	}
	element->setThisMessagePtr(element);
	return element;
	
}
std::shared_ptr<Message> umlFactoryImpl::createMessage_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<MessageImpl> element(new MessageImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisMessagePtr(element);
	return element;
	
}
std::shared_ptr<Message> umlFactoryImpl::createMessage_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<MessageImpl> element(new MessageImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisMessagePtr(element);
	return element;
	
}
std::shared_ptr<MessageOccurrenceSpecification> umlFactoryImpl::createMessageOccurrenceSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<MessageOccurrenceSpecificationImpl> element(new MessageOccurrenceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisMessageOccurrenceSpecificationPtr(element);
	return element;
}
std::shared_ptr<MessageOccurrenceSpecification> umlFactoryImpl::createMessageOccurrenceSpecification_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<MessageOccurrenceSpecificationImpl> element(new MessageOccurrenceSpecificationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisMessageOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<MessageOccurrenceSpecification> umlFactoryImpl::createMessageOccurrenceSpecification_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<MessageOccurrenceSpecificationImpl> element(new MessageOccurrenceSpecificationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisMessageOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<MessageOccurrenceSpecification> umlFactoryImpl::createMessageOccurrenceSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<MessageOccurrenceSpecificationImpl> element(new MessageOccurrenceSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisMessageOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<MessageOccurrenceSpecification> umlFactoryImpl::createMessageOccurrenceSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<MessageOccurrenceSpecificationImpl> element(new MessageOccurrenceSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisMessageOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl());
	element->setMetaElementID(metaElementID);
	element->setThisModelPtr(element);
	return element;
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_nestedPackage_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getNestedPackage()->push_back(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Model> umlFactoryImpl::createModel_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ModelImpl> element(new ModelImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisModelPtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisNodePtr(element);
	return element;
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_nestedNode_in_Node(std::shared_ptr<Node> par_Node, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Node)
	{
		par_Node->getNestedNode()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Node> umlFactoryImpl::createNode_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<NodeImpl> element(new NodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisNodePtr(element);
	return element;
	
}
std::shared_ptr<Object> umlFactoryImpl::createObject(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ObjectImpl> element(new ObjectImpl());
	element->setMetaElementID(metaElementID);
	element->setThisObjectPtr(element);
	return element;
}
std::shared_ptr<ObjectFlow> umlFactoryImpl::createObjectFlow(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ObjectFlowImpl> element(new ObjectFlowImpl());
	element->setMetaElementID(metaElementID);
	element->setThisObjectFlowPtr(element);
	return element;
}
std::shared_ptr<ObjectFlow> umlFactoryImpl::createObjectFlow_as_edge_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ObjectFlowImpl> element(new ObjectFlowImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getEdge()->push_back(element);
	
	}
	element->setThisObjectFlowPtr(element);
	return element;
	
}
std::shared_ptr<ObjectFlow> umlFactoryImpl::createObjectFlow_as_edge_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ObjectFlowImpl> element(new ObjectFlowImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getEdge()->push_back(element);
	
	}
	element->setThisObjectFlowPtr(element);
	return element;
	
}
std::shared_ptr<ObjectFlow> umlFactoryImpl::createObjectFlow_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ObjectFlowImpl> element(new ObjectFlowImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisObjectFlowPtr(element);
	return element;
	
}
std::shared_ptr<ObjectFlow> umlFactoryImpl::createObjectFlow_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ObjectFlowImpl> element(new ObjectFlowImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisObjectFlowPtr(element);
	return element;
	
}
std::shared_ptr<OccurrenceSpecification> umlFactoryImpl::createOccurrenceSpecification(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OccurrenceSpecificationImpl> element(new OccurrenceSpecificationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOccurrenceSpecificationPtr(element);
	return element;
}
std::shared_ptr<OccurrenceSpecification> umlFactoryImpl::createOccurrenceSpecification_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<OccurrenceSpecificationImpl> element(new OccurrenceSpecificationImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<OccurrenceSpecification> umlFactoryImpl::createOccurrenceSpecification_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<OccurrenceSpecificationImpl> element(new OccurrenceSpecificationImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<OccurrenceSpecification> umlFactoryImpl::createOccurrenceSpecification_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OccurrenceSpecificationImpl> element(new OccurrenceSpecificationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<OccurrenceSpecification> umlFactoryImpl::createOccurrenceSpecification_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<OccurrenceSpecificationImpl> element(new OccurrenceSpecificationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisOccurrenceSpecificationPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOpaqueActionPtr(element);
	return element;
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueAction> umlFactoryImpl::createOpaqueAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<OpaqueActionImpl> element(new OpaqueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisOpaqueActionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOpaqueBehaviorPtr(element);
	return element;
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_doActivity_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setDoActivity(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_effect_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->setEffect(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_entry_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setEntry(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_exit_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setExit(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedBehavior_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getOwnedBehavior()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueBehavior> umlFactoryImpl::createOpaqueBehavior_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<OpaqueBehaviorImpl> element(new OpaqueBehaviorImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisOpaqueBehaviorPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOpaqueExpressionPtr(element);
	return element;
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_mapping_in_Abstraction(std::shared_ptr<Abstraction> par_Abstraction, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Abstraction)
	{
		par_Abstraction->setMapping(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<OpaqueExpression> umlFactoryImpl::createOpaqueExpression_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<OpaqueExpressionImpl> element(new OpaqueExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisOpaqueExpressionPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOperationPtr(element);
	return element;
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedOperation_in_Class(std::weak_ptr<uml::Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl(par_Class));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Class.lock())
	{
		wp->getOwnedOperation()->push_back(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedOperation_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getOwnedOperation()->push_back(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedOperation_in_DataType(std::weak_ptr<uml::DataType> par_DataType, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl(par_DataType));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DataType.lock())
	{
		wp->getOwnedOperation()->push_back(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedOperation_in_Interface(std::weak_ptr<uml::Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl(par_Interface));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interface.lock())
	{
		wp->getOwnedOperation()->push_back(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<Operation> umlFactoryImpl::createOperation_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<OperationImpl> element(new OperationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisOperationPtr(element);
	return element;
	
}
std::shared_ptr<OperationTemplateParameter> umlFactoryImpl::createOperationTemplateParameter(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OperationTemplateParameterImpl> element(new OperationTemplateParameterImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOperationTemplateParameterPtr(element);
	return element;
}
std::shared_ptr<OperationTemplateParameter> umlFactoryImpl::createOperationTemplateParameter_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OperationTemplateParameterImpl> element(new OperationTemplateParameterImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOperationTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<OperationTemplateParameter> umlFactoryImpl::createOperationTemplateParameter_as_ownedParameter_in_TemplateSignature(std::weak_ptr<uml::TemplateSignature> par_TemplateSignature, const int metaElementID) const
{
	std::shared_ptr<OperationTemplateParameterImpl> element(new OperationTemplateParameterImpl(par_TemplateSignature));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateSignature.lock())
	{
		wp->getOwnedParameter()->push_back(element);
	
	}
	element->setThisOperationTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	element->setThisOutputPinPtr(element);
	return element;
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_loopVariable_in_LoopNode(std::shared_ptr<LoopNode> par_LoopNode, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LoopNode)
	{
		par_LoopNode->getLoopVariable()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_output_in_Action(std::weak_ptr<uml::Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_Action));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Action.lock())
	{
		wp->getOutput()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_outputValue_in_OpaqueAction(std::shared_ptr<OpaqueAction> par_OpaqueAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_OpaqueAction)
	{
		par_OpaqueAction->getOutputValue()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_WriteStructuralFeatureAction(std::weak_ptr<uml::WriteStructuralFeatureAction> par_WriteStructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_WriteStructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_WriteStructuralFeatureAction.lock())
	{
		wp->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_AcceptEventAction(std::shared_ptr<AcceptEventAction> par_AcceptEventAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_AcceptEventAction)
	{
		par_AcceptEventAction->getResult()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_CallAction(std::weak_ptr<uml::CallAction> par_CallAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_CallAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_CallAction.lock())
	{
		wp->getResult()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ClearStructuralFeatureAction(std::weak_ptr<uml::ClearStructuralFeatureAction> par_ClearStructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_ClearStructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ClearStructuralFeatureAction.lock())
	{
		wp->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ConditionalNode(std::shared_ptr<ConditionalNode> par_ConditionalNode, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ConditionalNode)
	{
		par_ConditionalNode->getResult()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_CreateLinkObjectAction(std::shared_ptr<CreateLinkObjectAction> par_CreateLinkObjectAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CreateLinkObjectAction)
	{
		par_CreateLinkObjectAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_CreateObjectAction(std::weak_ptr<uml::CreateObjectAction> par_CreateObjectAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_CreateObjectAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_CreateObjectAction.lock())
	{
		wp->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_LoopNode(std::shared_ptr<LoopNode> par_LoopNode, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LoopNode)
	{
		par_LoopNode->getResult()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadExtentAction(std::shared_ptr<ReadExtentAction> par_ReadExtentAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadExtentAction)
	{
		par_ReadExtentAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadIsClassifiedObjectAction(std::shared_ptr<ReadIsClassifiedObjectAction> par_ReadIsClassifiedObjectAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadIsClassifiedObjectAction)
	{
		par_ReadIsClassifiedObjectAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadLinkAction(std::shared_ptr<ReadLinkAction> par_ReadLinkAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkAction)
	{
		par_ReadLinkAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadLinkObjectEndAction(std::shared_ptr<ReadLinkObjectEndAction> par_ReadLinkObjectEndAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndAction)
	{
		par_ReadLinkObjectEndAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadLinkObjectEndQualifierAction(std::shared_ptr<ReadLinkObjectEndQualifierAction> par_ReadLinkObjectEndQualifierAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndQualifierAction)
	{
		par_ReadLinkObjectEndQualifierAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadSelfAction(std::weak_ptr<uml::ReadSelfAction> par_ReadSelfAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_ReadSelfAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ReadSelfAction.lock())
	{
		wp->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadStructuralFeatureAction(std::weak_ptr<uml::ReadStructuralFeatureAction> par_ReadStructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl(par_ReadStructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ReadStructuralFeatureAction.lock())
	{
		wp->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReadVariableAction(std::shared_ptr<ReadVariableAction> par_ReadVariableAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadVariableAction)
	{
		par_ReadVariableAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_ReduceAction(std::shared_ptr<ReduceAction> par_ReduceAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReduceAction)
	{
		par_ReduceAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setResult(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_result_in_UnmarshallAction(std::shared_ptr<UnmarshallAction> par_UnmarshallAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_UnmarshallAction)
	{
		par_UnmarshallAction->getResult()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_returnInformation_in_AcceptCallAction(std::shared_ptr<AcceptCallAction> par_AcceptCallAction, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_AcceptCallAction)
	{
		par_AcceptCallAction->setReturnInformation(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<OutputPin> umlFactoryImpl::createOutputPin_as_structuredNodeOutput_in_StructuredActivityNode(std::shared_ptr<StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<OutputPinImpl> element(new OutputPinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredActivityNode)
	{
		par_StructuredActivityNode->getStructuredNodeOutput()->push_back(element);
	
	}
	element->setThisOutputPinPtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPackagePtr(element);
	return element;
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_nestedPackage_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getNestedPackage()->push_back(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<Package> umlFactoryImpl::createPackage_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<PackageImpl> element(new PackageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisPackagePtr(element);
	return element;
	
}
std::shared_ptr<PackageImport> umlFactoryImpl::createPackageImport(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PackageImportImpl> element(new PackageImportImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPackageImportPtr(element);
	return element;
}
std::shared_ptr<PackageImport> umlFactoryImpl::createPackageImport_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PackageImportImpl> element(new PackageImportImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPackageImportPtr(element);
	return element;
	
}
std::shared_ptr<PackageImport> umlFactoryImpl::createPackageImport_as_packageImport_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PackageImportImpl> element(new PackageImportImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getPackageImport()->push_back(element);
	
	}
	element->setThisPackageImportPtr(element);
	return element;
	
}
std::shared_ptr<PackageMerge> umlFactoryImpl::createPackageMerge(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PackageMergeImpl> element(new PackageMergeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPackageMergePtr(element);
	return element;
}
std::shared_ptr<PackageMerge> umlFactoryImpl::createPackageMerge_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PackageMergeImpl> element(new PackageMergeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPackageMergePtr(element);
	return element;
	
}
std::shared_ptr<PackageMerge> umlFactoryImpl::createPackageMerge_as_packageMerge_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<PackageMergeImpl> element(new PackageMergeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackageMerge()->push_back(element);
	
	}
	element->setThisPackageMergePtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl());
	element->setMetaElementID(metaElementID);
	element->setThisParameterPtr(element);
	return element;
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedParameter_in_Behavior(std::weak_ptr<uml::Behavior> par_Behavior, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl(par_Behavior));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Behavior.lock())
	{
		wp->getOwnedParameter()->push_back(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedParameter_in_BehavioralFeature(std::weak_ptr<uml::Operation> par_BehavioralFeature, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl(par_BehavioralFeature));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioralFeature.lock())
	{
		wp->getOwnedParameter()->push_back(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<Parameter> umlFactoryImpl::createParameter_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ParameterImpl> element(new ParameterImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisParameterPtr(element);
	return element;
	
}
std::shared_ptr<ParameterSet> umlFactoryImpl::createParameterSet(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ParameterSetImpl> element(new ParameterSetImpl());
	element->setMetaElementID(metaElementID);
	element->setThisParameterSetPtr(element);
	return element;
}
std::shared_ptr<ParameterSet> umlFactoryImpl::createParameterSet_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ParameterSetImpl> element(new ParameterSetImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisParameterSetPtr(element);
	return element;
	
}
std::shared_ptr<ParameterSet> umlFactoryImpl::createParameterSet_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ParameterSetImpl> element(new ParameterSetImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisParameterSetPtr(element);
	return element;
	
}
std::shared_ptr<ParameterSet> umlFactoryImpl::createParameterSet_as_ownedParameterSet_in_Behavior(std::shared_ptr<Behavior> par_Behavior, const int metaElementID) const
{
	std::shared_ptr<ParameterSetImpl> element(new ParameterSetImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Behavior)
	{
		par_Behavior->getOwnedParameterSet()->push_back(element);
	
	}
	element->setThisParameterSetPtr(element);
	return element;
	
}
std::shared_ptr<ParameterSet> umlFactoryImpl::createParameterSet_as_ownedParameterSet_in_BehavioralFeature(std::shared_ptr<BehavioralFeature> par_BehavioralFeature, const int metaElementID) const
{
	std::shared_ptr<ParameterSetImpl> element(new ParameterSetImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_BehavioralFeature)
	{
		par_BehavioralFeature->getOwnedParameterSet()->push_back(element);
	
	}
	element->setThisParameterSetPtr(element);
	return element;
	
}
std::shared_ptr<PartDecomposition> umlFactoryImpl::createPartDecomposition(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PartDecompositionImpl> element(new PartDecompositionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPartDecompositionPtr(element);
	return element;
}
std::shared_ptr<PartDecomposition> umlFactoryImpl::createPartDecomposition_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<PartDecompositionImpl> element(new PartDecompositionImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisPartDecompositionPtr(element);
	return element;
	
}
std::shared_ptr<PartDecomposition> umlFactoryImpl::createPartDecomposition_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<PartDecompositionImpl> element(new PartDecompositionImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisPartDecompositionPtr(element);
	return element;
	
}
std::shared_ptr<PartDecomposition> umlFactoryImpl::createPartDecomposition_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PartDecompositionImpl> element(new PartDecompositionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPartDecompositionPtr(element);
	return element;
	
}
std::shared_ptr<PartDecomposition> umlFactoryImpl::createPartDecomposition_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PartDecompositionImpl> element(new PartDecompositionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisPartDecompositionPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PortImpl> element(new PortImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPortPtr(element);
	return element;
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedAttribute_in_Class(std::weak_ptr<uml::Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_Class));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Class.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedAttribute_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedAttribute_in_DataType(std::weak_ptr<uml::DataType> par_DataType, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_DataType));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DataType.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedAttribute_in_Interface(std::weak_ptr<uml::Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_Interface));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interface.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedAttribute_in_Signal(std::shared_ptr<Signal> par_Signal, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Signal)
	{
		par_Signal->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedAttribute_in_StructuredClassifier(std::shared_ptr<StructuredClassifier> par_StructuredClassifier, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredClassifier)
	{
		par_StructuredClassifier->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedEnd_in_Association(std::weak_ptr<uml::Association> par_Association, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_Association));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Association.lock())
	{
		wp->getOwnedEnd()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<Port> umlFactoryImpl::createPort_as_qualifier_in_Property(std::weak_ptr<uml::Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<PortImpl> element(new PortImpl(par_Property));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Property.lock())
	{
		wp->getQualifier()->push_back(element);
	
	}
	element->setThisPortPtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPrimitiveTypePtr(element);
	return element;
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<PrimitiveType> umlFactoryImpl::createPrimitiveType_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<PrimitiveTypeImpl> element(new PrimitiveTypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisPrimitiveTypePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl());
	element->setMetaElementID(metaElementID);
	element->setThisProfilePtr(element);
	return element;
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_nestedPackage_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getNestedPackage()->push_back(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<Profile> umlFactoryImpl::createProfile_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ProfileImpl> element(new ProfileImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisProfilePtr(element);
	return element;
	
}
std::shared_ptr<ProfileApplication> umlFactoryImpl::createProfileApplication(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ProfileApplicationImpl> element(new ProfileApplicationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisProfileApplicationPtr(element);
	return element;
}
std::shared_ptr<ProfileApplication> umlFactoryImpl::createProfileApplication_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ProfileApplicationImpl> element(new ProfileApplicationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisProfileApplicationPtr(element);
	return element;
	
}
std::shared_ptr<ProfileApplication> umlFactoryImpl::createProfileApplication_as_profileApplication_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ProfileApplicationImpl> element(new ProfileApplicationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getProfileApplication()->push_back(element);
	
	}
	element->setThisProfileApplicationPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPropertyPtr(element);
	return element;
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedAttribute_in_Class(std::weak_ptr<uml::Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_Class));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Class.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedAttribute_in_Artifact(std::shared_ptr<Artifact> par_Artifact, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Artifact)
	{
		par_Artifact->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedAttribute_in_DataType(std::weak_ptr<uml::DataType> par_DataType, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_DataType));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DataType.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedAttribute_in_Interface(std::weak_ptr<uml::Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_Interface));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interface.lock())
	{
		wp->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedAttribute_in_Signal(std::shared_ptr<Signal> par_Signal, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Signal)
	{
		par_Signal->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedAttribute_in_StructuredClassifier(std::shared_ptr<StructuredClassifier> par_StructuredClassifier, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredClassifier)
	{
		par_StructuredClassifier->getOwnedAttribute()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedEnd_in_Association(std::weak_ptr<uml::Association> par_Association, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_Association));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Association.lock())
	{
		wp->getOwnedEnd()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<Property> umlFactoryImpl::createProperty_as_qualifier_in_Property(std::weak_ptr<uml::Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl(par_Property));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Property.lock())
	{
		wp->getQualifier()->push_back(element);
	
	}
	element->setThisPropertyPtr(element);
	return element;
	
}
std::shared_ptr<ProtocolConformance> umlFactoryImpl::createProtocolConformance(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ProtocolConformanceImpl> element(new ProtocolConformanceImpl());
	element->setMetaElementID(metaElementID);
	element->setThisProtocolConformancePtr(element);
	return element;
}
std::shared_ptr<ProtocolConformance> umlFactoryImpl::createProtocolConformance_as_conformance_in_ProtocolStateMachine(std::weak_ptr<uml::ProtocolStateMachine> par_ProtocolStateMachine, const int metaElementID) const
{
	std::shared_ptr<ProtocolConformanceImpl> element(new ProtocolConformanceImpl(par_ProtocolStateMachine));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ProtocolStateMachine.lock())
	{
		wp->getConformance()->push_back(element);
	
	}
	element->setThisProtocolConformancePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolConformance> umlFactoryImpl::createProtocolConformance_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ProtocolConformanceImpl> element(new ProtocolConformanceImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisProtocolConformancePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	element->setThisProtocolStateMachinePtr(element);
	return element;
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_doActivity_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setDoActivity(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_effect_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->setEffect(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_entry_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setEntry(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_exit_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setExit(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedBehavior_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getOwnedBehavior()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolStateMachine> umlFactoryImpl::createProtocolStateMachine_as_protocol_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ProtocolStateMachineImpl> element(new ProtocolStateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->setProtocol(element);
	
	}
	element->setThisProtocolStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<ProtocolTransition> umlFactoryImpl::createProtocolTransition(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ProtocolTransitionImpl> element(new ProtocolTransitionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisProtocolTransitionPtr(element);
	return element;
}
std::shared_ptr<ProtocolTransition> umlFactoryImpl::createProtocolTransition_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ProtocolTransitionImpl> element(new ProtocolTransitionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisProtocolTransitionPtr(element);
	return element;
	
}
std::shared_ptr<ProtocolTransition> umlFactoryImpl::createProtocolTransition_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ProtocolTransitionImpl> element(new ProtocolTransitionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisProtocolTransitionPtr(element);
	return element;
	
}
std::shared_ptr<ProtocolTransition> umlFactoryImpl::createProtocolTransition_as_transition_in_Region(std::weak_ptr<uml::Region> par_Region, const int metaElementID) const
{
	std::shared_ptr<ProtocolTransitionImpl> element(new ProtocolTransitionImpl(par_Region));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Region.lock())
	{
		wp->getTransition()->push_back(element);
	
	}
	element->setThisProtocolTransitionPtr(element);
	return element;
	
}
std::shared_ptr<Pseudostate> umlFactoryImpl::createPseudostate(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl());
	element->setMetaElementID(metaElementID);
	element->setThisPseudostatePtr(element);
	return element;
}
std::shared_ptr<Pseudostate> umlFactoryImpl::createPseudostate_as_connectionPoint_in_StateMachine(std::weak_ptr<uml::StateMachine> par_StateMachine, const int metaElementID) const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl(par_StateMachine));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StateMachine.lock())
	{
		wp->getConnectionPoint()->push_back(element);
	
	}
	element->setThisPseudostatePtr(element);
	return element;
	
}
std::shared_ptr<Pseudostate> umlFactoryImpl::createPseudostate_as_connectionPoint_in_State(std::weak_ptr<uml::State> par_State, const int metaElementID) const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl(par_State));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_State.lock())
	{
		wp->getConnectionPoint()->push_back(element);
	
	}
	element->setThisPseudostatePtr(element);
	return element;
	
}
std::shared_ptr<Pseudostate> umlFactoryImpl::createPseudostate_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisPseudostatePtr(element);
	return element;
	
}
std::shared_ptr<Pseudostate> umlFactoryImpl::createPseudostate_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisPseudostatePtr(element);
	return element;
	
}
std::shared_ptr<Pseudostate> umlFactoryImpl::createPseudostate_as_subvertex_in_Region(std::weak_ptr<uml::Region> par_Region, const int metaElementID) const
{
	std::shared_ptr<PseudostateImpl> element(new PseudostateImpl(par_Region));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Region.lock())
	{
		wp->getSubvertex()->push_back(element);
	
	}
	element->setThisPseudostatePtr(element);
	return element;
	
}
std::shared_ptr<QualifierValue> umlFactoryImpl::createQualifierValue(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<QualifierValueImpl> element(new QualifierValueImpl());
	element->setMetaElementID(metaElementID);
	element->setThisQualifierValuePtr(element);
	return element;
}
std::shared_ptr<QualifierValue> umlFactoryImpl::createQualifierValue_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<QualifierValueImpl> element(new QualifierValueImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisQualifierValuePtr(element);
	return element;
	
}
std::shared_ptr<QualifierValue> umlFactoryImpl::createQualifierValue_as_qualifier_in_LinkEndData(std::shared_ptr<LinkEndData> par_LinkEndData, const int metaElementID) const
{
	std::shared_ptr<QualifierValueImpl> element(new QualifierValueImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkEndData)
	{
		par_LinkEndData->getQualifier()->push_back(element);
	
	}
	element->setThisQualifierValuePtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisRaiseExceptionActionPtr(element);
	return element;
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<RaiseExceptionAction> umlFactoryImpl::createRaiseExceptionAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<RaiseExceptionActionImpl> element(new RaiseExceptionActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisRaiseExceptionActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadExtentActionPtr(element);
	return element;
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadExtentAction> umlFactoryImpl::createReadExtentAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadExtentActionImpl> element(new ReadExtentActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadExtentActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadIsClassifiedObjectAction> umlFactoryImpl::createReadIsClassifiedObjectAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadIsClassifiedObjectActionImpl> element(new ReadIsClassifiedObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadIsClassifiedObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadLinkActionPtr(element);
	return element;
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkAction> umlFactoryImpl::createReadLinkAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadLinkActionImpl> element(new ReadLinkActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadLinkActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndAction> umlFactoryImpl::createReadLinkObjectEndAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndActionImpl> element(new ReadLinkObjectEndActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadLinkObjectEndQualifierAction> umlFactoryImpl::createReadLinkObjectEndQualifierAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadLinkObjectEndQualifierActionImpl> element(new ReadLinkObjectEndQualifierActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadLinkObjectEndQualifierActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadSelfActionPtr(element);
	return element;
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadSelfAction> umlFactoryImpl::createReadSelfAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadSelfActionImpl> element(new ReadSelfActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadSelfActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadStructuralFeatureAction> umlFactoryImpl::createReadStructuralFeatureAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadStructuralFeatureActionImpl> element(new ReadStructuralFeatureActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadStructuralFeatureActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReadVariableActionPtr(element);
	return element;
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<ReadVariableAction> umlFactoryImpl::createReadVariableAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReadVariableActionImpl> element(new ReadVariableActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReadVariableActionPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisRealizationPtr(element);
	return element;
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Realization> umlFactoryImpl::createRealization_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<RealizationImpl> element(new RealizationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisRealizationPtr(element);
	return element;
	
}
std::shared_ptr<Reception> umlFactoryImpl::createReception(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReceptionImpl> element(new ReceptionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReceptionPtr(element);
	return element;
}
std::shared_ptr<Reception> umlFactoryImpl::createReception_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReceptionImpl> element(new ReceptionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReceptionPtr(element);
	return element;
	
}
std::shared_ptr<Reception> umlFactoryImpl::createReception_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReceptionImpl> element(new ReceptionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReceptionPtr(element);
	return element;
	
}
std::shared_ptr<Reception> umlFactoryImpl::createReception_as_ownedReception_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<ReceptionImpl> element(new ReceptionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getOwnedReception()->push_back(element);
	
	}
	element->setThisReceptionPtr(element);
	return element;
	
}
std::shared_ptr<Reception> umlFactoryImpl::createReception_as_ownedReception_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<ReceptionImpl> element(new ReceptionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getOwnedReception()->push_back(element);
	
	}
	element->setThisReceptionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReclassifyObjectActionPtr(element);
	return element;
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<ReclassifyObjectAction> umlFactoryImpl::createReclassifyObjectAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReclassifyObjectActionImpl> element(new ReclassifyObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReclassifyObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<RedefinableTemplateSignature> umlFactoryImpl::createRedefinableTemplateSignature(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<RedefinableTemplateSignatureImpl> element(new RedefinableTemplateSignatureImpl());
	element->setMetaElementID(metaElementID);
	element->setThisRedefinableTemplateSignaturePtr(element);
	return element;
}
std::shared_ptr<RedefinableTemplateSignature> umlFactoryImpl::createRedefinableTemplateSignature_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<RedefinableTemplateSignatureImpl> element(new RedefinableTemplateSignatureImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisRedefinableTemplateSignaturePtr(element);
	return element;
	
}
std::shared_ptr<RedefinableTemplateSignature> umlFactoryImpl::createRedefinableTemplateSignature_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<RedefinableTemplateSignatureImpl> element(new RedefinableTemplateSignatureImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisRedefinableTemplateSignaturePtr(element);
	return element;
	
}
std::shared_ptr<RedefinableTemplateSignature> umlFactoryImpl::createRedefinableTemplateSignature_as_ownedTemplateSignature_in_TemplateableElement(std::weak_ptr<uml::TemplateableElement> par_TemplateableElement, const int metaElementID) const
{
	std::shared_ptr<RedefinableTemplateSignatureImpl> element(new RedefinableTemplateSignatureImpl(par_TemplateableElement));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateableElement.lock())
	{
		wp->setOwnedTemplateSignature(element);
	
	}
	element->setThisRedefinableTemplateSignaturePtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReduceActionPtr(element);
	return element;
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<ReduceAction> umlFactoryImpl::createReduceAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReduceActionImpl> element(new ReduceActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReduceActionPtr(element);
	return element;
	
}
std::shared_ptr<Region> umlFactoryImpl::createRegion(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<RegionImpl> element(new RegionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisRegionPtr(element);
	return element;
}
std::shared_ptr<Region> umlFactoryImpl::createRegion_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<RegionImpl> element(new RegionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisRegionPtr(element);
	return element;
	
}
std::shared_ptr<Region> umlFactoryImpl::createRegion_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<RegionImpl> element(new RegionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisRegionPtr(element);
	return element;
	
}
std::shared_ptr<Region> umlFactoryImpl::createRegion_as_region_in_StateMachine(std::weak_ptr<uml::StateMachine> par_StateMachine, const int metaElementID) const
{
	std::shared_ptr<RegionImpl> element(new RegionImpl(par_StateMachine));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StateMachine.lock())
	{
		wp->getRegion()->push_back(element);
	
	}
	element->setThisRegionPtr(element);
	return element;
	
}
std::shared_ptr<Region> umlFactoryImpl::createRegion_as_region_in_State(std::weak_ptr<uml::State> par_State, const int metaElementID) const
{
	std::shared_ptr<RegionImpl> element(new RegionImpl(par_State));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_State.lock())
	{
		wp->getRegion()->push_back(element);
	
	}
	element->setThisRegionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveStructuralFeatureValueAction> umlFactoryImpl::createRemoveStructuralFeatureValueAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<RemoveStructuralFeatureValueActionImpl> element(new RemoveStructuralFeatureValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisRemoveStructuralFeatureValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<RemoveVariableValueAction> umlFactoryImpl::createRemoveVariableValueAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<RemoveVariableValueActionImpl> element(new RemoveVariableValueActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisRemoveVariableValueActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisReplyActionPtr(element);
	return element;
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<ReplyAction> umlFactoryImpl::createReplyAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ReplyActionImpl> element(new ReplyActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisReplyActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSendObjectActionPtr(element);
	return element;
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendObjectAction> umlFactoryImpl::createSendObjectAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SendObjectActionImpl> element(new SendObjectActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisSendObjectActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSendSignalActionPtr(element);
	return element;
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SendSignalAction> umlFactoryImpl::createSendSignalAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SendSignalActionImpl> element(new SendSignalActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisSendSignalActionPtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSequenceNodePtr(element);
	return element;
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_structuredNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getStructuredNode()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<SequenceNode> umlFactoryImpl::createSequenceNode_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<SequenceNodeImpl> element(new SequenceNodeImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisSequenceNodePtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSignalPtr(element);
	return element;
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<Signal> umlFactoryImpl::createSignal_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<SignalImpl> element(new SignalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisSignalPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSignalEventPtr(element);
	return element;
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<SignalEvent> umlFactoryImpl::createSignalEvent_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<SignalEventImpl> element(new SignalEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisSignalEventPtr(element);
	return element;
	
}
std::shared_ptr<Slot> umlFactoryImpl::createSlot(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SlotImpl> element(new SlotImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSlotPtr(element);
	return element;
}
std::shared_ptr<Slot> umlFactoryImpl::createSlot_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SlotImpl> element(new SlotImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSlotPtr(element);
	return element;
	
}
std::shared_ptr<Slot> umlFactoryImpl::createSlot_as_slot_in_InstanceSpecification(std::weak_ptr<uml::InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<SlotImpl> element(new SlotImpl(par_InstanceSpecification));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InstanceSpecification.lock())
	{
		wp->getSlot()->push_back(element);
	
	}
	element->setThisSlotPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartClassifierBehaviorAction> umlFactoryImpl::createStartClassifierBehaviorAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StartClassifierBehaviorActionImpl> element(new StartClassifierBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisStartClassifierBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<StartObjectBehaviorAction> umlFactoryImpl::createStartObjectBehaviorAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StartObjectBehaviorActionImpl> element(new StartObjectBehaviorActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisStartObjectBehaviorActionPtr(element);
	return element;
	
}
std::shared_ptr<State> umlFactoryImpl::createState(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StateImpl> element(new StateImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStatePtr(element);
	return element;
}
std::shared_ptr<State> umlFactoryImpl::createState_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StateImpl> element(new StateImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStatePtr(element);
	return element;
	
}
std::shared_ptr<State> umlFactoryImpl::createState_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StateImpl> element(new StateImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStatePtr(element);
	return element;
	
}
std::shared_ptr<State> umlFactoryImpl::createState_as_subvertex_in_Region(std::weak_ptr<uml::Region> par_Region, const int metaElementID) const
{
	std::shared_ptr<StateImpl> element(new StateImpl(par_Region));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Region.lock())
	{
		wp->getSubvertex()->push_back(element);
	
	}
	element->setThisStatePtr(element);
	return element;
	
}
std::shared_ptr<StateInvariant> umlFactoryImpl::createStateInvariant(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StateInvariantImpl> element(new StateInvariantImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStateInvariantPtr(element);
	return element;
}
std::shared_ptr<StateInvariant> umlFactoryImpl::createStateInvariant_as_fragment_in_Interaction(std::weak_ptr<uml::Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<StateInvariantImpl> element(new StateInvariantImpl(par_Interaction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Interaction.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisStateInvariantPtr(element);
	return element;
	
}
std::shared_ptr<StateInvariant> umlFactoryImpl::createStateInvariant_as_fragment_in_InteractionOperand(std::weak_ptr<uml::InteractionOperand> par_InteractionOperand, const int metaElementID) const
{
	std::shared_ptr<StateInvariantImpl> element(new StateInvariantImpl(par_InteractionOperand));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InteractionOperand.lock())
	{
		wp->getFragment()->push_back(element);
	
	}
	element->setThisStateInvariantPtr(element);
	return element;
	
}
std::shared_ptr<StateInvariant> umlFactoryImpl::createStateInvariant_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StateInvariantImpl> element(new StateInvariantImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStateInvariantPtr(element);
	return element;
	
}
std::shared_ptr<StateInvariant> umlFactoryImpl::createStateInvariant_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StateInvariantImpl> element(new StateInvariantImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStateInvariantPtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStateMachinePtr(element);
	return element;
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_doActivity_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setDoActivity(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_effect_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->setEffect(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_entry_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setEntry(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_exit_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->setExit(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedBehavior_in_BehavioredClassifier(std::weak_ptr<uml::BehavioredClassifier> par_BehavioredClassifier, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl(par_BehavioredClassifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_BehavioredClassifier.lock())
	{
		wp->getOwnedBehavior()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<StateMachine> umlFactoryImpl::createStateMachine_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<StateMachineImpl> element(new StateMachineImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisStateMachinePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStereotypePtr(element);
	return element;
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedStereotype_in_Package(std::shared_ptr<Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Package)
	{
		par_Package->getOwnedStereotype()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<Stereotype> umlFactoryImpl::createStereotype_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<StereotypeImpl> element(new StereotypeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisStereotypePtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStringExpressionPtr(element);
	return element;
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_nameExpression_in_NamedElement(std::shared_ptr<NamedElement> par_NamedElement, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_NamedElement)
	{
		par_NamedElement->setNameExpression(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_subExpression_in_StringExpression(std::weak_ptr<uml::StringExpression> par_StringExpression, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_StringExpression));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StringExpression.lock())
	{
		wp->getSubExpression()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StringExpression> umlFactoryImpl::createStringExpression_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<StringExpressionImpl> element(new StringExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisStringExpressionPtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	element->setThisStructuredActivityNodePtr(element);
	return element;
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_group_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getGroup()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_ownedGroup_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedGroup()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_structuredNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getStructuredNode()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<StructuredActivityNode> umlFactoryImpl::createStructuredActivityNode_as_subgroup_in_ActivityGroup(std::weak_ptr<uml::ActivityGroup> par_ActivityGroup, const int metaElementID) const
{
	std::shared_ptr<StructuredActivityNodeImpl> element(new StructuredActivityNodeImpl(par_ActivityGroup));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ActivityGroup.lock())
	{
		wp->getSubgroup()->push_back(element);
	
	}
	element->setThisStructuredActivityNodePtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisSubstitutionPtr(element);
	return element;
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<Substitution> umlFactoryImpl::createSubstitution_as_substitution_in_Classifier(std::weak_ptr<uml::Classifier> par_Classifier, const int metaElementID) const
{
	std::shared_ptr<SubstitutionImpl> element(new SubstitutionImpl(par_Classifier));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Classifier.lock())
	{
		wp->getSubstitution()->push_back(element);
	
	}
	element->setThisSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<TemplateBinding> umlFactoryImpl::createTemplateBinding(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TemplateBindingImpl> element(new TemplateBindingImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTemplateBindingPtr(element);
	return element;
}
std::shared_ptr<TemplateBinding> umlFactoryImpl::createTemplateBinding_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TemplateBindingImpl> element(new TemplateBindingImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTemplateBindingPtr(element);
	return element;
	
}
std::shared_ptr<TemplateBinding> umlFactoryImpl::createTemplateBinding_as_templateBinding_in_TemplateableElement(std::weak_ptr<uml::TemplateableElement> par_TemplateableElement, const int metaElementID) const
{
	std::shared_ptr<TemplateBindingImpl> element(new TemplateBindingImpl(par_TemplateableElement));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateableElement.lock())
	{
		wp->getTemplateBinding()->push_back(element);
	
	}
	element->setThisTemplateBindingPtr(element);
	return element;
	
}
std::shared_ptr<TemplateParameter> umlFactoryImpl::createTemplateParameter(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TemplateParameterImpl> element(new TemplateParameterImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTemplateParameterPtr(element);
	return element;
}
std::shared_ptr<TemplateParameter> umlFactoryImpl::createTemplateParameter_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TemplateParameterImpl> element(new TemplateParameterImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<TemplateParameter> umlFactoryImpl::createTemplateParameter_as_ownedParameter_in_TemplateSignature(std::weak_ptr<uml::TemplateSignature> par_TemplateSignature, const int metaElementID) const
{
	std::shared_ptr<TemplateParameterImpl> element(new TemplateParameterImpl(par_TemplateSignature));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateSignature.lock())
	{
		wp->getOwnedParameter()->push_back(element);
	
	}
	element->setThisTemplateParameterPtr(element);
	return element;
	
}
std::shared_ptr<TemplateParameterSubstitution> umlFactoryImpl::createTemplateParameterSubstitution(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TemplateParameterSubstitutionImpl> element(new TemplateParameterSubstitutionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTemplateParameterSubstitutionPtr(element);
	return element;
}
std::shared_ptr<TemplateParameterSubstitution> umlFactoryImpl::createTemplateParameterSubstitution_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TemplateParameterSubstitutionImpl> element(new TemplateParameterSubstitutionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTemplateParameterSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<TemplateParameterSubstitution> umlFactoryImpl::createTemplateParameterSubstitution_as_parameterSubstitution_in_TemplateBinding(std::weak_ptr<uml::TemplateBinding> par_TemplateBinding, const int metaElementID) const
{
	std::shared_ptr<TemplateParameterSubstitutionImpl> element(new TemplateParameterSubstitutionImpl(par_TemplateBinding));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateBinding.lock())
	{
		wp->getParameterSubstitution()->push_back(element);
	
	}
	element->setThisTemplateParameterSubstitutionPtr(element);
	return element;
	
}
std::shared_ptr<TemplateSignature> umlFactoryImpl::createTemplateSignature(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TemplateSignatureImpl> element(new TemplateSignatureImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTemplateSignaturePtr(element);
	return element;
}
std::shared_ptr<TemplateSignature> umlFactoryImpl::createTemplateSignature_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TemplateSignatureImpl> element(new TemplateSignatureImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTemplateSignaturePtr(element);
	return element;
	
}
std::shared_ptr<TemplateSignature> umlFactoryImpl::createTemplateSignature_as_ownedTemplateSignature_in_TemplateableElement(std::weak_ptr<uml::TemplateableElement> par_TemplateableElement, const int metaElementID) const
{
	std::shared_ptr<TemplateSignatureImpl> element(new TemplateSignatureImpl(par_TemplateableElement));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateableElement.lock())
	{
		wp->setOwnedTemplateSignature(element);
	
	}
	element->setThisTemplateSignaturePtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTestIdentityActionPtr(element);
	return element;
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TestIdentityAction> umlFactoryImpl::createTestIdentityAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<TestIdentityActionImpl> element(new TestIdentityActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisTestIdentityActionPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTimeConstraintPtr(element);
	return element;
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_condition_in_ParameterSet(std::shared_ptr<ParameterSet> par_ParameterSet, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ParameterSet)
	{
		par_ParameterSet->getCondition()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_condition_in_Extend(std::shared_ptr<Extend> par_Extend, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Extend)
	{
		par_Extend->setCondition(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_invariant_in_StateInvariant(std::shared_ptr<StateInvariant> par_StateInvariant, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StateInvariant)
	{
		par_StateInvariant->setInvariant(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_localPostcondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPostcondition()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_localPrecondition_in_Action(std::shared_ptr<Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Action)
	{
		par_Action->getLocalPrecondition()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_ownedRule_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedRule()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeConstraint> umlFactoryImpl::createTimeConstraint_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<TimeConstraintImpl> element(new TimeConstraintImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeConstraintPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTimeEventPtr(element);
	return element;
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeEvent> umlFactoryImpl::createTimeEvent_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<TimeEventImpl> element(new TimeEventImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeEventPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTimeExpressionPtr(element);
	return element;
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeExpression> umlFactoryImpl::createTimeExpression_as_when_in_TimeEvent(std::shared_ptr<TimeEvent> par_TimeEvent, const int metaElementID) const
{
	std::shared_ptr<TimeExpressionImpl> element(new TimeExpressionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeEvent)
	{
		par_TimeEvent->setWhen(element);
	
	}
	element->setThisTimeExpressionPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTimeIntervalPtr(element);
	return element;
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_argument_in_Message(std::shared_ptr<Message> par_Message, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Message)
	{
		par_Message->getArgument()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_argument_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->getArgument()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_changeExpression_in_ChangeEvent(std::shared_ptr<ChangeEvent> par_ChangeEvent, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ChangeEvent)
	{
		par_ChangeEvent->setChangeExpression(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_defaultValue_in_Property(std::shared_ptr<Property> par_Property, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Property)
	{
		par_Property->setDefaultValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_defaultValue_in_Parameter(std::shared_ptr<Parameter> par_Parameter, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Parameter)
	{
		par_Parameter->setDefaultValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_expr_in_TimeExpression(std::shared_ptr<TimeExpression> par_TimeExpression, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TimeExpression)
	{
		par_TimeExpression->setExpr(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_expr_in_Duration(std::shared_ptr<Duration> par_Duration, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Duration)
	{
		par_Duration->setExpr(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_guard_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setGuard(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_joinSpec_in_JoinNode(std::shared_ptr<JoinNode> par_JoinNode, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_JoinNode)
	{
		par_JoinNode->setJoinSpec(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_lowerValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setLowerValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_maxint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMaxint(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_minint_in_InteractionConstraint(std::shared_ptr<InteractionConstraint> par_InteractionConstraint, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionConstraint)
	{
		par_InteractionConstraint->setMinint(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_operand_in_Expression(std::shared_ptr<Expression> par_Expression, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Expression)
	{
		par_Expression->getOperand()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_returnValue_in_InteractionUse(std::shared_ptr<InteractionUse> par_InteractionUse, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InteractionUse)
	{
		par_InteractionUse->setReturnValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_selector_in_Lifeline(std::shared_ptr<Lifeline> par_Lifeline, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Lifeline)
	{
		par_Lifeline->setSelector(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_specification_in_Constraint(std::shared_ptr<Constraint> par_Constraint, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Constraint)
	{
		par_Constraint->setSpecification(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_specification_in_InstanceSpecification(std::shared_ptr<InstanceSpecification> par_InstanceSpecification, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_InstanceSpecification)
	{
		par_InstanceSpecification->setSpecification(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_upperBound_in_ObjectNode(std::shared_ptr<ObjectNode> par_ObjectNode, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ObjectNode)
	{
		par_ObjectNode->setUpperBound(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_upperValue_in_MultiplicityElement(std::shared_ptr<MultiplicityElement> par_MultiplicityElement, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_MultiplicityElement)
	{
		par_MultiplicityElement->setUpperValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_value_in_Slot(std::weak_ptr<uml::Slot> par_Slot, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl(par_Slot));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Slot.lock())
	{
		wp->getValue()->push_back(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_value_in_ValueSpecificationAction(std::weak_ptr<uml::ValueSpecificationAction> par_ValueSpecificationAction, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl(par_ValueSpecificationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_ValueSpecificationAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_value_in_ValuePin(std::shared_ptr<ValuePin> par_ValuePin, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ValuePin)
	{
		par_ValuePin->setValue(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeInterval> umlFactoryImpl::createTimeInterval_as_weight_in_ActivityEdge(std::shared_ptr<ActivityEdge> par_ActivityEdge, const int metaElementID) const
{
	std::shared_ptr<TimeIntervalImpl> element(new TimeIntervalImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActivityEdge)
	{
		par_ActivityEdge->setWeight(element);
	
	}
	element->setThisTimeIntervalPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTimeObservationPtr(element);
	return element;
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<TimeObservation> umlFactoryImpl::createTimeObservation_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<TimeObservationImpl> element(new TimeObservationImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisTimeObservationPtr(element);
	return element;
	
}
std::shared_ptr<Transition> umlFactoryImpl::createTransition(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TransitionImpl> element(new TransitionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTransitionPtr(element);
	return element;
}
std::shared_ptr<Transition> umlFactoryImpl::createTransition_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TransitionImpl> element(new TransitionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTransitionPtr(element);
	return element;
	
}
std::shared_ptr<Transition> umlFactoryImpl::createTransition_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TransitionImpl> element(new TransitionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTransitionPtr(element);
	return element;
	
}
std::shared_ptr<Transition> umlFactoryImpl::createTransition_as_transition_in_Region(std::weak_ptr<uml::Region> par_Region, const int metaElementID) const
{
	std::shared_ptr<TransitionImpl> element(new TransitionImpl(par_Region));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Region.lock())
	{
		wp->getTransition()->push_back(element);
	
	}
	element->setThisTransitionPtr(element);
	return element;
	
}
std::shared_ptr<Trigger> umlFactoryImpl::createTrigger(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<TriggerImpl> element(new TriggerImpl());
	element->setMetaElementID(metaElementID);
	element->setThisTriggerPtr(element);
	return element;
}
std::shared_ptr<Trigger> umlFactoryImpl::createTrigger_as_deferrableTrigger_in_State(std::shared_ptr<State> par_State, const int metaElementID) const
{
	std::shared_ptr<TriggerImpl> element(new TriggerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_State)
	{
		par_State->getDeferrableTrigger()->push_back(element);
	
	}
	element->setThisTriggerPtr(element);
	return element;
	
}
std::shared_ptr<Trigger> umlFactoryImpl::createTrigger_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<TriggerImpl> element(new TriggerImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisTriggerPtr(element);
	return element;
	
}
std::shared_ptr<Trigger> umlFactoryImpl::createTrigger_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<TriggerImpl> element(new TriggerImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisTriggerPtr(element);
	return element;
	
}
std::shared_ptr<Trigger> umlFactoryImpl::createTrigger_as_trigger_in_Transition(std::shared_ptr<Transition> par_Transition, const int metaElementID) const
{
	std::shared_ptr<TriggerImpl> element(new TriggerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Transition)
	{
		par_Transition->getTrigger()->push_back(element);
	
	}
	element->setThisTriggerPtr(element);
	return element;
	
}
std::shared_ptr<Trigger> umlFactoryImpl::createTrigger_as_trigger_in_AcceptEventAction(std::shared_ptr<AcceptEventAction> par_AcceptEventAction, const int metaElementID) const
{
	std::shared_ptr<TriggerImpl> element(new TriggerImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_AcceptEventAction)
	{
		par_AcceptEventAction->getTrigger()->push_back(element);
	
	}
	element->setThisTriggerPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisUnmarshallActionPtr(element);
	return element;
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<UnmarshallAction> umlFactoryImpl::createUnmarshallAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<UnmarshallActionImpl> element(new UnmarshallActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisUnmarshallActionPtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl());
	element->setMetaElementID(metaElementID);
	element->setThisUsagePtr(element);
	return element;
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<Usage> umlFactoryImpl::createUsage_as_roleBinding_in_CollaborationUse(std::shared_ptr<CollaborationUse> par_CollaborationUse, const int metaElementID) const
{
	std::shared_ptr<UsageImpl> element(new UsageImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_CollaborationUse)
	{
		par_CollaborationUse->getRoleBinding()->push_back(element);
	
	}
	element->setThisUsagePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	element->setThisUseCasePtr(element);
	return element;
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_nestedClassifier_in_Class(std::shared_ptr<Class> par_Class, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Class)
	{
		par_Class->getNestedClassifier()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_nestedClassifier_in_Interface(std::shared_ptr<Interface> par_Interface, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interface)
	{
		par_Interface->getNestedClassifier()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedType_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getOwnedType()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_ownedUseCase_in_Classifier(std::shared_ptr<Classifier> par_Classifier, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Classifier)
	{
		par_Classifier->getOwnedUseCase()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_packagedElement_in_Package(std::weak_ptr<uml::Package> par_Package, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl(par_Package));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Package.lock())
	{
		wp->getPackagedElement()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<UseCase> umlFactoryImpl::createUseCase_as_packagedElement_in_Component(std::shared_ptr<Component> par_Component, const int metaElementID) const
{
	std::shared_ptr<UseCaseImpl> element(new UseCaseImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Component)
	{
		par_Component->getPackagedElement()->push_back(element);
	
	}
	element->setThisUseCasePtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	element->setThisValuePinPtr(element);
	return element;
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_argument_in_InvocationAction(std::weak_ptr<uml::InvocationAction> par_InvocationAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_InvocationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_InvocationAction.lock())
	{
		wp->getArgument()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_collection_in_ReduceAction(std::shared_ptr<ReduceAction> par_ReduceAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReduceAction)
	{
		par_ReduceAction->setCollection(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_exception_in_RaiseExceptionAction(std::shared_ptr<RaiseExceptionAction> par_RaiseExceptionAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_RaiseExceptionAction)
	{
		par_RaiseExceptionAction->setException(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_first_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setFirst(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_input_in_Action(std::weak_ptr<uml::Action> par_Action, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_Action));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Action.lock())
	{
		wp->getInput()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_inputValue_in_LinkAction(std::shared_ptr<LinkAction> par_LinkAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LinkAction)
	{
		par_LinkAction->getInputValue()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_inputValue_in_OpaqueAction(std::shared_ptr<OpaqueAction> par_OpaqueAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_OpaqueAction)
	{
		par_OpaqueAction->getInputValue()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_insertAt_in_AddStructuralFeatureValueAction(std::weak_ptr<uml::AddStructuralFeatureValueAction> par_AddStructuralFeatureValueAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_AddStructuralFeatureValueAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_AddStructuralFeatureValueAction.lock())
	{
		wp->setInsertAt(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_insertAt_in_AddVariableValueAction(std::shared_ptr<AddVariableValueAction> par_AddVariableValueAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_AddVariableValueAction)
	{
		par_AddVariableValueAction->setInsertAt(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_loopVariableInput_in_LoopNode(std::shared_ptr<LoopNode> par_LoopNode, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_LoopNode)
	{
		par_LoopNode->getLoopVariableInput()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_StructuralFeatureAction(std::weak_ptr<uml::StructuralFeatureAction> par_StructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_StructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuralFeatureAction.lock())
	{
		wp->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_ClearAssociationAction(std::shared_ptr<ClearAssociationAction> par_ClearAssociationAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ClearAssociationAction)
	{
		par_ClearAssociationAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_ReadIsClassifiedObjectAction(std::shared_ptr<ReadIsClassifiedObjectAction> par_ReadIsClassifiedObjectAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadIsClassifiedObjectAction)
	{
		par_ReadIsClassifiedObjectAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_ReadLinkObjectEndAction(std::shared_ptr<ReadLinkObjectEndAction> par_ReadLinkObjectEndAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndAction)
	{
		par_ReadLinkObjectEndAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_ReadLinkObjectEndQualifierAction(std::shared_ptr<ReadLinkObjectEndQualifierAction> par_ReadLinkObjectEndQualifierAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReadLinkObjectEndQualifierAction)
	{
		par_ReadLinkObjectEndQualifierAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_ReclassifyObjectAction(std::shared_ptr<ReclassifyObjectAction> par_ReclassifyObjectAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReclassifyObjectAction)
	{
		par_ReclassifyObjectAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_StartClassifierBehaviorAction(std::shared_ptr<StartClassifierBehaviorAction> par_StartClassifierBehaviorAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StartClassifierBehaviorAction)
	{
		par_StartClassifierBehaviorAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_StartObjectBehaviorAction(std::shared_ptr<StartObjectBehaviorAction> par_StartObjectBehaviorAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StartObjectBehaviorAction)
	{
		par_StartObjectBehaviorAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_object_in_UnmarshallAction(std::shared_ptr<UnmarshallAction> par_UnmarshallAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_UnmarshallAction)
	{
		par_UnmarshallAction->setObject(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_removeAt_in_RemoveStructuralFeatureValueAction(std::weak_ptr<uml::RemoveStructuralFeatureValueAction> par_RemoveStructuralFeatureValueAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_RemoveStructuralFeatureValueAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_RemoveStructuralFeatureValueAction.lock())
	{
		wp->setRemoveAt(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_removeAt_in_RemoveVariableValueAction(std::shared_ptr<RemoveVariableValueAction> par_RemoveVariableValueAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_RemoveVariableValueAction)
	{
		par_RemoveVariableValueAction->setRemoveAt(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_replyValue_in_ReplyAction(std::shared_ptr<ReplyAction> par_ReplyAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReplyAction)
	{
		par_ReplyAction->getReplyValue()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_request_in_SendObjectAction(std::shared_ptr<SendObjectAction> par_SendObjectAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendObjectAction)
	{
		par_SendObjectAction->setRequest(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_returnInformation_in_ReplyAction(std::shared_ptr<ReplyAction> par_ReplyAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ReplyAction)
	{
		par_ReplyAction->setReturnInformation(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_second_in_TestIdentityAction(std::shared_ptr<TestIdentityAction> par_TestIdentityAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TestIdentityAction)
	{
		par_TestIdentityAction->setSecond(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_structuredNodeInput_in_StructuredActivityNode(std::shared_ptr<StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_StructuredActivityNode)
	{
		par_StructuredActivityNode->getStructuredNodeInput()->push_back(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_target_in_CallOperationAction(std::weak_ptr<uml::CallOperationAction> par_CallOperationAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_CallOperationAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_CallOperationAction.lock())
	{
		wp->setTarget(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_target_in_DestroyObjectAction(std::weak_ptr<uml::DestroyObjectAction> par_DestroyObjectAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_DestroyObjectAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_DestroyObjectAction.lock())
	{
		wp->setTarget(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_target_in_SendObjectAction(std::shared_ptr<SendObjectAction> par_SendObjectAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendObjectAction)
	{
		par_SendObjectAction->setTarget(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_target_in_SendSignalAction(std::shared_ptr<SendSignalAction> par_SendSignalAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SendSignalAction)
	{
		par_SendSignalAction->setTarget(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_value_in_WriteStructuralFeatureAction(std::weak_ptr<uml::WriteStructuralFeatureAction> par_WriteStructuralFeatureAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl(par_WriteStructuralFeatureAction));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_WriteStructuralFeatureAction.lock())
	{
		wp->setValue(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValuePin> umlFactoryImpl::createValuePin_as_value_in_WriteVariableAction(std::shared_ptr<WriteVariableAction> par_WriteVariableAction, const int metaElementID) const
{
	std::shared_ptr<ValuePinImpl> element(new ValuePinImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_WriteVariableAction)
	{
		par_WriteVariableAction->setValue(element);
	
	}
	element->setThisValuePinPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl());
	element->setMetaElementID(metaElementID);
	element->setThisValueSpecificationActionPtr(element);
	return element;
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_action_in_Interaction(std::shared_ptr<Interaction> par_Interaction, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Interaction)
	{
		par_Interaction->getAction()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_executableNode_in_SequenceNode(std::shared_ptr<SequenceNode> par_SequenceNode, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_SequenceNode)
	{
		par_SequenceNode->getExecutableNode()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_fromAction_in_ActionInputPin(std::shared_ptr<ActionInputPin> par_ActionInputPin, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_ActionInputPin)
	{
		par_ActionInputPin->setFromAction(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_node_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_node_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getNode()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<ValueSpecificationAction> umlFactoryImpl::createValueSpecificationAction_as_ownedNode_in_Activity(std::shared_ptr<Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<ValueSpecificationActionImpl> element(new ValueSpecificationActionImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_Activity)
	{
		par_Activity->getOwnedNode()->push_back(element);
	
	}
	element->setThisValueSpecificationActionPtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable(const int metaElementID/*=-1*/) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl());
	element->setMetaElementID(metaElementID);
	element->setThisVariablePtr(element);
	return element;
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_ownedActual_in_TemplateParameterSubstitution(std::shared_ptr<TemplateParameterSubstitution> par_TemplateParameterSubstitution, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameterSubstitution)
	{
		par_TemplateParameterSubstitution->setOwnedActual(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_ownedDefault_in_TemplateParameter(std::shared_ptr<TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl());
	element->setMetaElementID(metaElementID);
	if(nullptr != par_TemplateParameter)
	{
		par_TemplateParameter->setOwnedDefault(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_ownedElement_in_Element(std::weak_ptr<uml::Element> par_Element, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl(par_Element));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Element.lock())
	{
		wp->getOwnedElement()->push_back(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_ownedMember_in_Namespace(std::weak_ptr<uml::Namespace> par_Namespace, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl(par_Namespace));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Namespace.lock())
	{
		wp->getOwnedMember()->push_back(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_ownedParameteredElement_in_TemplateParameter(std::weak_ptr<uml::TemplateParameter> par_TemplateParameter, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl(par_TemplateParameter));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_TemplateParameter.lock())
	{
		wp->setOwnedParameteredElement(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_variable_in_Activity(std::weak_ptr<uml::Activity> par_Activity, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl(par_Activity));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_Activity.lock())
	{
		wp->getVariable()->push_back(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}
std::shared_ptr<Variable> umlFactoryImpl::createVariable_as_variable_in_StructuredActivityNode(std::weak_ptr<uml::StructuredActivityNode> par_StructuredActivityNode, const int metaElementID) const
{
	std::shared_ptr<VariableImpl> element(new VariableImpl(par_StructuredActivityNode));
	element->setMetaElementID(metaElementID);
	if(auto wp = par_StructuredActivityNode.lock())
	{
		wp->getVariable()->push_back(element);
	
	}
	element->setThisVariablePtr(element);
	return element;
	
}

