
#include "PSSM/Semantics/StateMachines/impl/DoActivityContextObjectActivationImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Bag.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
#include "ecore/ecoreFactory.hpp"
//Includes from codegen annotation
#include "fUML/Semantics/CommonBehavior/impl/ObjectActivationImpl.hpp"
#include "PSSM/Semantics/StateMachines/DoActivityContextObject.hpp"
#include "PSSM/Semantics/StateMachines/StateActivation.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/Loci/Executor.hpp"
#include "uml/Behavior.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "fUML/Semantics/StructuredClassifiers/StructuredClassifiersFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsFactory.hpp"
#include "uml/Class.hpp"
#include "fUML/Semantics/CommonBehavior/ClassifierBehaviorExecution.hpp"
#include "fUML/Semantics/CommonBehavior/EventAccepter.hpp"
#include "fUML/Semantics/CommonBehavior/EventOccurrence.hpp"
#include "fUML/MDE4CPP_Extensions/FUML_Object.hpp"
#include "fUML/Semantics/CommonBehavior/ObjectActivation.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
//Factories and Package includes
#include "PSSM/PSSMPackage.hpp"
#include "PSSM/Semantics/SemanticsPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsPackage.hpp"
#include "PSSM/Semantics/StateMachines/StateMachinesPackage.hpp"
#include "uml/umlPackage.hpp"

using namespace PSSM::Semantics::StateMachines;

//*********************************
// Constructor / Destructor
//*********************************
DoActivityContextObjectActivationImpl::DoActivityContextObjectActivationImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

DoActivityContextObjectActivationImpl::~DoActivityContextObjectActivationImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete DoActivityContextObjectActivation "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


DoActivityContextObjectActivationImpl::DoActivityContextObjectActivationImpl(const DoActivityContextObjectActivationImpl & obj): DoActivityContextObjectActivationImpl()
{
	*this = obj;
}

DoActivityContextObjectActivationImpl& DoActivityContextObjectActivationImpl::operator=(const DoActivityContextObjectActivationImpl & obj)
{
	//call overloaded =Operator for each base class
	fUML::Semantics::CommonBehavior::ObjectActivationImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of DoActivityContextObjectActivation 
	 * which is generated by the compiler (as DoActivityContextObjectActivation is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//DoActivityContextObjectActivation::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy DoActivityContextObjectActivation "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> DoActivityContextObjectActivationImpl::copy() const
{
	std::shared_ptr<DoActivityContextObjectActivationImpl> element(new DoActivityContextObjectActivationImpl());
	*element =(*this);
	element->setThisDoActivityContextObjectActivationPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************
void DoActivityContextObjectActivationImpl::dispatchNextEvent()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// The dispatching process behaves exactly the same as specified in fUML.
	// In addition to this behavior, the dispatch sequence of an ObjectActivation
	// for a DoActivityContextObject notifies the owning State if the executed doActivity is now considered completed. 
	// This is the case if no EventAccepter is registered at this ObjectActivation after an RTC step.
	fUML::Semantics::CommonBehavior::ObjectActivationImpl::ObjectActivationImpl::dispatchNextEvent();
	if (this->m_waitingEventAccepters->size() == 0)
	{
		auto doActivityObject = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::DoActivityContextObject>(this->getObject());
		auto doActivityObjectOwner = std::shared_ptr<uml::Element> (doActivityObject->getOwner());
		if (auto owner = std::dynamic_pointer_cast<PSSM::Semantics::StateMachines::StateActivation>(doActivityObjectOwner))
		{
			owner->setIsDoActivityCompleted(true);
			if (owner->hasCompleted()) 
				owner->notifyCompletion();
		}
	}
	//end of body
}

void DoActivityContextObjectActivationImpl::startBehavior(const std::shared_ptr<uml::Class>& classifier, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>& inputs)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// The expected Classifier is the doActivity behavior. The doActivity
	// behavior is executed as if it was the Classifier of a Class typing
	// the doActivity context Object. It only exists one doActivity executed
	// as a classifier behavior for a DoActivityContextObject.

	// Start the Event Dispatch Loop of this DoActivityContextObjectActivation
	this->_startObjectBehavior();

	auto doActivityBehavior = std::dynamic_pointer_cast<uml::Behavior>(classifier);
	if (doActivityBehavior != nullptr && this->getClassifierBehaviorExecutions()->empty())
	{
		auto doActivityExecution = this->getObject()->getLocus()->getExecutor()->execute(doActivityBehavior, this->getObject(), inputs);
	}

	/* Not supported because MDE4CPP currently executes all Executions directly instead of using InvokationEventOccurrences and ClassifierBehaviorExecutions
	if(classifier != null 
		&& classifier instanceof Behavior
		&& this.classifierBehaviorInvocations.isEmpty()){
		ClassifierBehaviorInvocationEventAccepter newInvocation = new ClassifierBehaviorInvocationEventAccepter();
		newInvocation.objectActivation = this;
		newInvocation.classifier = classifier;
		Execution doActivityExecution = this.object.locus.factory.createExecution((Behavior)classifier, this.object); 
		if(inputs != null){
			for(int i = 0; i < inputs.size(); i++){
				doActivityExecution.setParameterValue(inputs.get(i));
			}
		}
		newInvocation.execution = doActivityExecution;
		this.classifierBehaviorInvocations.add(newInvocation);
		this.register(newInvocation);
		InvocationEventOccurrence invocationEventOccurrence = new InvocationEventOccurrence();
		invocationEventOccurrence.execution = newInvocation.execution;
		this.eventPool.add(invocationEventOccurrence);
		this._send(new ArrivalSignal());
	}*/
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> DoActivityContextObjectActivationImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void DoActivityContextObjectActivationImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get PSSMFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void DoActivityContextObjectActivationImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{

	fUML::Semantics::CommonBehavior::ObjectActivationImpl::loadAttributes(loadHandler, attr_list);
}

void DoActivityContextObjectActivationImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	fUML::Semantics::CommonBehavior::ObjectActivationImpl::loadNode(nodeName, loadHandler);
}

void DoActivityContextObjectActivationImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	fUML::Semantics::CommonBehavior::ObjectActivationImpl::resolveReferences(featureID, references);
}

void DoActivityContextObjectActivationImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	fUML::Semantics::CommonBehavior::ObjectActivationImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void DoActivityContextObjectActivationImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<PSSM::Semantics::StateMachines::StateMachinesPackage> package = PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance();
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& DoActivityContextObjectActivationImpl::eStaticClass() const
{
	return PSSM::Semantics::StateMachines::StateMachinesPackage::eInstance()->getDoActivityContextObjectActivation_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> DoActivityContextObjectActivationImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
	}
	return fUML::Semantics::CommonBehavior::ObjectActivationImpl::eGet(featureID, resolve, coreType);
}

bool DoActivityContextObjectActivationImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
	}
	return fUML::Semantics::CommonBehavior::ObjectActivationImpl::internalEIsSet(featureID);
}

bool DoActivityContextObjectActivationImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
	}

	return fUML::Semantics::CommonBehavior::ObjectActivationImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> DoActivityContextObjectActivationImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// PSSM::Semantics::StateMachines::DoActivityContextObjectActivation::dispatchNextEvent(): 1995144659
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECTACTIVATION_OPERATION_DISPATCHNEXTEVENT:
		{
			this->dispatchNextEvent();
			break;
		}
		// PSSM::Semantics::StateMachines::DoActivityContextObjectActivation::startBehavior(uml::Class, fUML::Semantics::CommonBehavior::ParameterValue[*]): 1489741616
		case StateMachinesPackage::DOACTIVITYCONTEXTOBJECTACTIVATION_OPERATION_STARTBEHAVIOR_CLASS_PARAMETERVALUE:
		{
			//Retrieve input parameter 'classifier'
			//parameter 0
			std::shared_ptr<uml::Class> incoming_param_classifier;
			Bag<Any>::const_iterator incoming_param_classifier_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_classifier_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_classifier = std::dynamic_pointer_cast<uml::Class>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'classifier'. Failed to invoke operation 'startBehavior'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'classifier'. Failed to invoke operation 'startBehavior'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'inputs'
			//parameter 1
			std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> incoming_param_inputs;
			Bag<Any>::const_iterator incoming_param_inputs_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>((*incoming_param_inputs_arguments_citer));
				if(ecoreContainerAny)
				{
					try
					{
						std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
				
						if(eObjectList)
						{
							incoming_param_inputs.reset();
							for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
							{
								std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> _temp = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::ParameterValue>(anEObject);
								incoming_param_inputs->add(_temp);
							}
						}
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreContainerAny' for parameter 'inputs'. Failed to invoke operation 'startBehavior'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreContainerAny' for parameter 'inputs'. Failed to invoke operation 'startBehavior'!")
					return nullptr;
				}
			}
		
			this->startBehavior(incoming_param_classifier,incoming_param_inputs);
			break;
		}

		default:
		{
			// call superTypes
			result = fUML::Semantics::CommonBehavior::ObjectActivationImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<PSSM::Semantics::StateMachines::DoActivityContextObjectActivation> DoActivityContextObjectActivationImpl::getThisDoActivityContextObjectActivationPtr() const
{
	return m_thisDoActivityContextObjectActivationPtr.lock();
}
void DoActivityContextObjectActivationImpl::setThisDoActivityContextObjectActivationPtr(std::weak_ptr<PSSM::Semantics::StateMachines::DoActivityContextObjectActivation> thisDoActivityContextObjectActivationPtr)
{
	m_thisDoActivityContextObjectActivationPtr = thisDoActivityContextObjectActivationPtr;
	setThisObjectActivationPtr(thisDoActivityContextObjectActivationPtr);
}


