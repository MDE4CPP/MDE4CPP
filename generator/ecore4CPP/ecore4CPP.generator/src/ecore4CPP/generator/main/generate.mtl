[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generate('http://www.eclipse.org/emf/2002/Ecore')/]

[import ecore4CPP::generator::main::factory::generateMetamodelFactory/]
[import ecore4CPP::generator::main::generateApplication/]
[import ecore4CPP::generator::main::generateBuildFile/]
[import ecore4CPP::generator::main::generateEnum /]
[import ecore4CPP::generator::main::generateModel/]
[import ecore4CPP::generator::main::generateProjectFiles/] 
[import ecore4CPP::generator::main::generatePackageHeaderFile/]
[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::impl::generateImplementation/]
[import ecore4CPP::generator::main::package::generateMetamodelPackage/]
[import ecore4CPP::generator::main::plugin::generateEcorePlugin/]
[import ecore4CPP::generator::main::validation::validation /]

[template public generateModel(aPackage : ecore::EPackage)]
[comment @main/]

[comment Model validation /]
[if (getValidationStatus() = false)]
[let modelRootPackage : EPackage = aPackage.getRootPackage()]
	[comment]
	 * If warning messages should be disabled during model validation and generation, uncomment the line below.
	 * NOTE: The generator will still inform you if warnings occured, but they won't be printed out anymore.
	[/comment]
	[comment] [disableWarnings()/] [/comment]
	[printInfo('Validating model...', '')/]
	[modelRootPackage.validateModel()/]
	[if (errorsExist())]
		[printErrors()/]
		[closeWithErrorExit(1)/]
	[elseif (warningsExist())]
		[printWarnings()/]
	[/if]
	[printInfo('Finished model validation', '')/]
	[printInfo('Generation startedcl', 'ecore4CPP.generator.main.generate:generteModel')/]
[/let]
[/if]

[if (not aPackage.doNotGenerateEPackage())]
[comment Package generation /]
	[for (aClass : EClass | aPackage.eAllContents(EClass))]
		[if (aClass.doNotGenerateEClassifier())]
			[printInfo('Skipping class ' + aClass.generateNamespaceDefinition() + '::' + aClass.name + ' because it is configured as doNotGenerate', 'ecore4CPP.generator.main.generate:generteModel')/]
		[else]
			[printInfo('Generating class ' + aClass.generateNamespaceDefinition() + '::' + aClass.name, 'ecore4CPP.generator.main.generate:generteModel')/]
			[aClass.generateModel()/]
			[aClass.generateImplementation()/]
		[/if]
	[/for]
	
	[for (anEEnum : EEnum | aPackage.eAllContents(EEnum))]
		[if (anEEnum.doNotGenerateEClassifier())]
			[printInfo('Skipping enumeration ' + anEEnum.generateNamespaceDefinition() + '::' + anEEnum.name + ' because it is configured as doNotGenerate', 'ecore4CPP.generator.main.generate:generteModel')/]
		[else]
		[printInfo('Generating enumeration ' + anEEnum.generateNamespaceDefinition() + '::' + anEEnum.name, 'ecore4CPP.generator.main.generate:generteModel')/]
		[anEEnum.generateEnum()/]
		[/if]
	[/for]
	
		[printInfo('Generating factory class for ' + aPackage.generateNamespaceDefinition(), 'ecore4CPP.generator.main.generate:generteModel')/]
		[aPackage.generateFactoryImpl()/]
		[printInfo('Generating package class for ' + aPackage.generateNamespaceDefinition(), 'ecore4CPP.generator.main.generate:generteModel')/]
		[aPackage.generatePackageImpl()/]

	[comment Model plugin, build files, project files and main application are only generated for the root package /]
	[if (aPackage.eSuperPackage.oclIsUndefined())]
		[printInfo('Generating plugin class for ' + aPackage.generateNamespaceDefinition(), 'ecore4CPP.generator.main.generate:generteModel')/]
		[aPackage.generateEcorePlugin()/]
	
		[aPackage.generateBuildFile()/]
		[aPackage.generateProjectsFiles()/]
		[aPackage.generatePackageHeaderFile()/]
	
		[if (aPackage.prepareApplication())]
			[printInfo('Generating main application for ' + aPackage.generateNamespaceDefinition(), 'ecore4CPP.generator.main.generate:generteModel')/]
			[aPackage.generateApplication()/]
		[/if]
	[/if]
[else]
	[printInfo('Skipping package ' + aPackage.generateNamespaceDefinition() + ' because it is configured as doNotGenerate', 'ecore4CPP.generator.main.generate:generteModel')/]
[/if]
[/template]