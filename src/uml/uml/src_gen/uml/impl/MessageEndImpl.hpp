//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_MESSAGEENDMESSAGEENDIMPL_HPP
#define UML_MESSAGEENDMESSAGEENDIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../MessageEnd.hpp"

#include "uml/impl/NamedElementImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API MessageEndImpl : virtual public NamedElementImpl, virtual public MessageEnd 
	{
		public: 
			MessageEndImpl(const MessageEndImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;
			MessageEndImpl& operator=(MessageEndImpl const&); 

		protected:
			friend class umlFactoryImpl;
			MessageEndImpl();
			virtual std::shared_ptr<uml::MessageEnd> getThisMessageEndPtr() const;
			virtual void setThisMessageEndPtr(std::weak_ptr<uml::MessageEnd> thisMessageEndPtr);

			//Additional constructors for the containments back reference
			MessageEndImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			MessageEndImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~MessageEndImpl() = 0;
			
			//*********************************
			// Operations
			//*********************************
			/*!
			This query returns a set including the enclosing InteractionFragment this MessageEnd is enclosed within.
			result = (if self->select(oclIsKindOf(Gate))->notEmpty() 
			then -- it is a Gate
			let endGate : Gate = 
			  self->select(oclIsKindOf(Gate)).oclAsType(Gate)->asOrderedSet()->first()
			  in
			  if endGate.isOutsideCF() 
			  then endGate.combinedFragment.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
			     union(endGate.combinedFragment.enclosingOperand.oclAsType(InteractionFragment)->asSet())
			  else if endGate.isInsideCF() 
			    then endGate.combinedFragment.oclAsType(InteractionFragment)->asSet()
			    else if endGate.isFormal() 
			      then endGate.interaction.oclAsType(InteractionFragment)->asSet()
			      else if endGate.isActual() 
			        then endGate.interactionUse.enclosingInteraction.oclAsType(InteractionFragment)->asSet()->
			     union(endGate.interactionUse.enclosingOperand.oclAsType(InteractionFragment)->asSet())
			        else null
			        endif
			      endif
			    endif
			  endif
			else -- it is a MessageOccurrenceSpecification
			let endMOS : MessageOccurrenceSpecification  = 
			  self->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() 
			  in
			  if endMOS.enclosingInteraction->notEmpty() 
			  then endMOS.enclosingInteraction.oclAsType(InteractionFragment)->asSet()
			  else endMOS.enclosingOperand.oclAsType(InteractionFragment)->asSet()
			  endif
			endif)
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::InteractionFragment>> enclosingFragment() ;
			/*!
			This query returns value true if this MessageEnd is a receiveEvent.
			message->notEmpty()
			result = (message.receiveEvent->asSet()->includes(self))
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual bool isReceive() ;
			/*!
			This query returns value true if this MessageEnd is a sendEvent.
			message->notEmpty()
			result = (message.sendEvent->asSet()->includes(self))
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual bool isSend() ;
			/*!
			This query returns a set including the MessageEnd (if exists) at the opposite end of the Message for this MessageEnd.
			result = (message->asSet().messageEnd->asSet()->excluding(self))
			message->notEmpty()
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::MessageEnd>> oppositeEnd() ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			References a Message.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<uml::Message> getMessage() const ;
			/*!
			References a Message.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual void setMessage(std::shared_ptr<uml::Message>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::MessageEnd> m_thisMessageEndPtr;
	};
}
#endif /* end of include guard: UML_MESSAGEENDMESSAGEENDIMPL_HPP */
