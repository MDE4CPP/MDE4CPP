//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef FOUNDATIONALMODELLIBRARY_METAMODELPACKAGEIMPL_HPP
#define FOUNDATIONALMODELLIBRARY_METAMODELPACKAGEIMPL_HPP

#include "FoundationalModelLibrary/FoundationalModelLibraryPackage.hpp"
#include "uml/impl/ModelImpl.hpp"

namespace uml
{
	class LiteralBoolean;
	class LiteralInteger;
	class LiteralUnlimitedNatural;
	class umlFactory;
}

namespace FoundationalModelLibrary::BasicInputOutput 
{
	class BasicInputOutputPackage;
}

namespace FoundationalModelLibrary::Common 
{
	class CommonPackage;
}

namespace FoundationalModelLibrary::PrimitiveBehaviors 
{
	class PrimitiveBehaviorsPackage;
}

namespace FoundationalModelLibrary
{
	class FoundationalModelLibraryPackageImpl : virtual public uml::ModelImpl, virtual public FoundationalModelLibraryPackage
	{
			friend class FoundationalModelLibraryPackage;
			// Constructor
			FoundationalModelLibraryPackageImpl();

		public:
			// destructor
			virtual ~FoundationalModelLibraryPackageImpl();

			//getter for the ownedMember
			
			
			

			//getter for subPackages
			virtual std::shared_ptr<BasicInputOutput::BasicInputOutputPackage> getBasicInputOutput_Package() const ;
			virtual std::shared_ptr<Common::CommonPackage> getCommon_Package() const ;
			virtual std::shared_ptr<PrimitiveBehaviors::PrimitiveBehaviorsPackage> getPrimitiveBehaviors_Package() const ;

		private:
			//private variables for ownedMember of the metamodel package
			
			
			

			static FoundationalModelLibraryPackage* create();
			static bool isInited;
			bool isInitialized = false;
			bool isCreated = false;

			void initMetaModel();
			virtual void init(std::shared_ptr<uml::Package> package);

		public:
 			void initializePackageContents(std::shared_ptr<uml::Package> foundationalModelLibrary);
			void createPackageContents(std::shared_ptr<uml::Package> foundationalModelLibrary);

		private:
			void createPackageActivities(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createActivity_foundationalModelLibrary_BasicInputOutput_ReadLine(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createActivity_foundationalModelLibrary_BasicInputOutput_WriteLine(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageClasses(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageDataTypes(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageAssociations(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageDependencies(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageEnumerationLiterals(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageEvents(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageInstanceSpecifications(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageInterfaceRealizations(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageInterfaces(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackagePrimitiveTypes(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageSignals(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageStereotypes(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);
			void createPackageValueSpecifications(std::shared_ptr<uml::Package> foundationalModelLibrary, std::shared_ptr<uml::umlFactory> factory);

			void initializePackageActivities();
			void initializeActivity_foundationalModelLibrary_BasicInputOutput_ReadLine();
			void initializeActivity_foundationalModelLibrary_BasicInputOutput_WriteLine();
			void initializePackageClasses();
			void initializePackageDataTypes();
			void initializePackageAssociations();
			void initializePackageDependencies();
			void initializePackageEvents();
			void initializePackageInstanceSpecifications();
			void initializePackageInterfaceRealizations();
			void initializePackageInterfaces();
			void initializePackageNestedPackages();
			void initializePackageSignals();
			void initializePackageStereotypes();
			void initializePackageValueSpecifications();
	};
}
#endif /* end of include guard: FOUNDATIONALMODELLIBRARY_METAMODELPACKAGEIMPL_HPP */
