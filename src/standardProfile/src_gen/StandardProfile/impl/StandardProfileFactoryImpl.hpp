//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef STANDARDPROFILEFACTORYIMPL_HPP
#define STANDARDPROFILEFACTORYIMPL_HPP

#include "ecore/impl/EFactoryImpl.hpp"

#include "StandardProfile/StandardProfileFactory.hpp"

namespace StandardProfile 
{	class Auxiliary;
	class BuildComponent;
	class Call;
	class Create;
	class Derive;
	class Destroy;
	class Document;
	class Entity;
	class Executable;
	class File;
	class Focus;
	class Framework;
	class Implement;
	class ImplementationClass;
	class Instantiate;
	class Library;
	class Metaclass;
	class Metamodel;
	class ModelLibrary;
	class Process;
	class Realization;
	class Refine;
	class Responsibility;
	class Script;
	class Send;
	class Service;
	class Source;
	class Specification;
	class Subsystem;
	class SystemModel;
	class Trace;
	class Type;
	class Utility;
}

namespace StandardProfile 
{
	class StandardProfileFactoryImpl : virtual public ecore::EFactoryImpl , virtual public StandardProfileFactory 
	{
		private:    
			StandardProfileFactoryImpl(StandardProfileFactoryImpl const&) = delete;
			StandardProfileFactoryImpl& operator=(StandardProfileFactoryImpl const&) = delete;

		protected:
			friend class StandardProfileFactory;
			// Constructor
			StandardProfileFactoryImpl();

		public:
			virtual ~StandardProfileFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(std::string _className,  std::shared_ptr<ecore::EObject> container=nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(const int classID,  std::shared_ptr<ecore::EObject> container = nullptr, const int referenceID = -1) const;
			virtual std::shared_ptr<ecore::EObject> create(std::shared_ptr<ecore::EClass> _class, std::shared_ptr<EObject> _container=nullptr, const int referenceID = -1) const;

			//Creator functions
			virtual std::shared_ptr<Auxiliary> createAuxiliary(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<BuildComponent> createBuildComponent(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Call> createCall(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Create> createCreate(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Derive> createDerive(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Destroy> createDestroy(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Document> createDocument(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Entity> createEntity(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Executable> createExecutable(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<File> createFile(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Focus> createFocus(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Framework> createFramework(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Implement> createImplement(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<ImplementationClass> createImplementationClass(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Instantiate> createInstantiate(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Library> createLibrary(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Metaclass> createMetaclass(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Metamodel> createMetamodel(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<ModelLibrary> createModelLibrary(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Process> createProcess(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Realization> createRealization(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Refine> createRefine(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Responsibility> createResponsibility(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Script> createScript(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Send> createSend(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Service> createService(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Source> createSource(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Specification> createSpecification(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Subsystem> createSubsystem(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<SystemModel> createSystemModel(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Trace> createTrace(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Type> createType(const int metaElementID=-1) const ;
			
			virtual std::shared_ptr<Utility> createUtility(const int metaElementID=-1) const ;
			
			

			//Package
			virtual std::shared_ptr<StandardProfilePackage> getStandardProfilePackage() const;

		private:
			static StandardProfileFactory* create();
            std::map<std::string,int> m_idMap;
	};
}
#endif /* end of include guard: STANDARDPROFILEFACTORYIMPL_HPP */
