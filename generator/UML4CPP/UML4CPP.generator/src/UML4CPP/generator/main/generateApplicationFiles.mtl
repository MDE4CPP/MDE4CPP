[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of application files
 * 
 * this includes following files:
 * - main.cpp
 * - CMakeList.txt
 * - build.gradle
 * 
 */]
[module generateApplicationFiles('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateParameter /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::configuration::generateEclipseFiles /]
[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]

[template public generateApplication(aPackage : Package)]
[let mainBehavior : Behavior = aPackage.getMainBehavior()]
	[if (mainBehavior.oclIsKindOf(OpaqueBehavior))]
		[aPackage.generateApplicationFromOpaqueBehavior()/]
	[elseif (mainBehavior.oclIsKindOf(Activity))]
		[aPackage.generateApplicationFromActivity()/]
	[elseif (mainBehavior.oclIsKindOf(StateMachine))]
		[comment To be implemented in the future /]
	[elseif (mainBehavior.oclIsKindOf(Interaction))]
		[comment To be implemented in the future /]
	[/if]
		[aPackage.generateApplicationCMakeLists()/]
		[aPackage.generateApplicationGradleFile()/]
		[aPackage.generateEclipseFiles(true)/]
[/let]
[/template]

[template private generateApplicationFromOpaqueBehavior(aPackage : Package) { packageName : String = getPackageName(); }]
[file ('../application/src/main.cpp', false, 'UTF-8')]
[let mainOpaqueBehavior : OpaqueBehavior = aPackage.getMainBehavior().oclAsType(OpaqueBehavior)]

#include <iostream>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[packageName/]Factory.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[packageName/]Package.hpp"

[for (aClass : Class | aPackage.allOwnedElements()->filter(Class)->reject(oclIsKindOf(Behavior))->reject(isDoNotGenerateElement())->sortedBy(name))]
#include "[aClass.getNearestPackage().generateNamespacePath(false)/]/[aClass.name.toUpperFirst()/].hpp"
[/for]
[for (anInterface : Interface | aPackage.allOwnedElements()->filter(Interface)->reject(isDoNotGenerateElement())->sortedBy(name))]
#include "[anInterface.getNearestPackage().generateNamespacePath(false)/]/[anInterface.name.toUpperFirst()/].hpp"
[/for]
[for (anEnumeration : Enumeration | aPackage.ownedMember->filter(Enumeration)->reject(isDoNotGenerateElement()))]
#include "[anEnumeration.getNearestPackage().generateNamespacePath(false)/]/[anEnumeration.name/].hpp"
[/for]

[if(mainOpaqueBehavior.language->notEmpty())]
[if (mainOpaqueBehavior.language->includes(keyInclude()))]
//Includes from main behavior [mainOpaqueBehavior.name/]
[let index : Integer = mainOpaqueBehavior.language->asOrderedSet()->indexOf(keyInclude()) ]
[if (0 < index and index <= mainOpaqueBehavior._body->size())]
[mainOpaqueBehavior._body->asOrderedSet()->at(index)/]
[/if][/let][/if]
[/if]

// [protected ('includes')] 
// You may manually edit additional includes, won't be overwritten upon generation.

// [/protected]

[if (not aPackage.isIgnoreNamespace())]using namespace [aPackage.generateNamespace(false)/];[/if]

// [protected ('functions')] 
// You may manually edit additional functions, won't be overwritten upon generation.

// [/protected]

int main ()
{
	//Create Model Factory and Package
	std::shared_ptr<[packageName/]Factory> factory = [packageName/]Factory::eInstance();
	std::shared_ptr<[packageName/]Package> package = [packageName/]Package::eInstance();

	[if(mainOpaqueBehavior.language->notEmpty())]
	[if (mainOpaqueBehavior.language->includes(keyCPP()))]
	[let index : Integer = mainOpaqueBehavior.language->asOrderedSet()->indexOf(keyCPP()) ]
	[if (0 < index and index <= mainOpaqueBehavior._body->size())]
	[mainOpaqueBehavior._body->asOrderedSet()->at(index)/]
	[/if][/let][/if]
	[/if]
	// [protected ('main')]
	// You may manually edit the following lines, won't be overwritten upon generation.

	// [/protected]

    return 0;
}
[/let]
[/file]
[/template]

[template private generateApplicationFromActivity(aPackage : Package) { packageName : String = getPackageName(); }]
[file ('../application/src/main.cpp', false, 'UTF-8')]
[let mainActivity : Activity = aPackage.getMainBehavior().oclAsType(Activity)]
#include <iostream>
#include <memory>
#include <vector>

#include "abstractDataTypes/Bag.hpp"
#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
[if (mainActivity.owner.oclIsKindOf(Classifier))]
#include "[mainActivity.owner.oclAsType(Classifier).getNearestPackage().generateNamespacePath(false)/]/[mainActivity.owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[mainActivity.owner.oclAsType(Classifier).getNearestPackage().generateNamespacePath(false)/]/[mainActivity.owner.oclAsType(Classifier).getNearestPackage().getPackageName()/]Package.hpp"
#include "[mainActivity.owner.oclAsType(Classifier).getNearestPackage().generateNamespacePath(false)/]/[mainActivity.owner.oclAsType(Classifier).getNearestPackage().getPackageName()/]Factory.hpp"
[else]
#include "[mainActivity.getNearestPackage().generateNamespacePath(false)/]/[mainActivity.getNearestPackage().getPackageName()/]Package.hpp"
[/if]
[for ( type : Type | mainActivity.ownedParameter.type->reject(isDoNotGenerateElement())->asOrderedSet())]
#include "[type.getNearestPackage().generateNamespacePath(false)/]/[type.name/].hpp"
[/for]
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"

using namespace [aPackage.generateNamespace(false)/];

int main()
{	
    //executing main activity
	[mainActivity.generateParameterInstances(aPackage)/]
	std::shared_ptr<[if (mainActivity.owner.oclIsKindOf(Classifier))][mainActivity.owner.oclAsType(Classifier).generateNamespaceName(false)/][else]uml::Element[/if]> element = [if (mainActivity.owner.oclIsKindOf(Classifier))][mainActivity.owner.oclAsType(Classifier).generateNamespace(false)/]::[mainActivity.owner.oclAsType(Classifier).getNearestPackage().getPackageName()/]Factory::eInstance()->create[mainActivity.owner.oclAsType(Classifier).name.toUpperFirst()/]()[else]nullptr[/if];

	std::shared_ptr<PluginFramework> pluginFramework = PluginFramework::eInstance();
	std::string pluginName = "[mainActivity.getRootPackage().getPackageName()/]Exec";
	std::shared_ptr<MDE4CPPPlugin> plugin = pluginFramework->findPluginByName(pluginName);
	if (plugin)
	{
		DEBUG_MESSAGE(std::cout << "plugin" << plugin->eNAME() << " found" << std::endl;)

		std::shared_ptr<UMLExecutionModelPlugin> executionPlugin = std::dynamic_pointer_cast<UMLExecutionModelPlugin>(plugin);
		if (executionPlugin)
		{
			DEBUG_MESSAGE(std::cout << "fumlplugin " << executionPlugin->eNAME() << " is accessable" << std::endl;)

			std::shared_ptr<std::vector<Any>> parameterList(new std::vector<Any>());
			[for (par : Parameter | mainActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
			parameterList->push_back(eAny([par.name/]));
			[/for]
			Any activityResult = executionPlugin->executeActivity([mainActivity.generatePackageGetterCall()/], parameterList, element);


			[if (mainActivity.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
			[let returnParameter : Parameter = mainActivity.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first()]
			[returnParameter.type.generateCppType(false)/] returnValue = activityResult->get<[returnParameter.type.generateCppType(false)/]>();
			DEBUG_MESSAGE(
			std::cout << "The activity has a return parameter" << std::endl;
			std::cout << "Parameter name: [returnParameter.name/]"<< std::endl;
			if(returnValue == nullptr)
			{
				std::cout << "The returned value was nullptr" << std::endl;
			}
			else
			{
				std::cout << "The returned value was " << returnValue << std::endl;
			}
			)
			[/let]
			[else]
			DEBUG_MESSAGE(std::cout << "The activity did not return any result." << std::endl;)
			[/if]
		}
		else
		{
			std::cout << "plugin " << plugin->eNAME() << " is not a fuml based plugin" << std::endl;
		}
	}
	else
	{ 
		std::cout << "plugin" << pluginName << " not found" << std::endl;
	}
    return EXIT_SUCCESS;
}
[/let]
[/file]
[/template]

[template private generateApplicationCMakeLists(aPackage : Package) { packageName : String = getPackageName(); }]

[comment ------------------------------------------------------------------- /]
[comment CMakeLists.txt file for application build                           /]
[comment ------------------------------------------------------------------- /]
[file ('../application/src/CMakeLists.txt', false, 'UTF-8')]
# DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
# @generator: uml4cpp::generator::main::generateApplicationFiles

# C++ project of application for [packageName/].uml, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

# [protected ('project_name')]
# You may manually edit the project name, won't be overwritten upon generation.
PROJECT(App_[packageName/])
# [/protected]

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(CMAKE_CXX_STANDARD 17)

[comment IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang") -> not necessary after removing openmp/]
SET(CMAKE_CXX_FLAGS "-Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fmax-errors=5")
IF(APPLE)
  string(APPEND CMAKE_CXX_FLAGS " -Qunused-arguments")
ENDIF(APPLE)
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	main.cpp
# [protected ('cpp')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

INCLUDE_DIRECTORIES(
	../
	${MDE4CPP_HOME}/application/include
# [protected ('includes')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

# Apple specific stuff
IF(APPLE)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
  SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup")
ENDIF(APPLE)

IF(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
	[generateCMakeFindLibraryCommands('.so', 'bin', 'Linux')/]
ELSEIF(APPLE)
	[generateCMakeFindLibraryCommands('.dylib', 'bin', 'Apple')/]
ELSE()
	[generateCMakeFindLibraryCommands('', 'lib', 'Win')/]
ENDIF()

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")

IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateLibraryLinking(true)/]
ELSE()
	[generateLibraryLinking(false)/]
ENDIF()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME} 
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
)
[/file]
[/template]

[template private generateApplicationGradleFile(aPackage : Package) { packageName : String = getPackageName(); }]

[comment ------------------------------------------------------------------- /]
[comment gradle file for compile command                                     /]
[comment ------------------------------------------------------------------- /]
[file ('../application/build.gradle', false, 'UTF-8')]
// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: uml4cpp::generator::main::generateApplicationFiles

plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "$gradle_mde4cpp_compile_plugin_version"
}

import org.gradle.internal.os.OperatingSystem;

description 'Compile task for project: App_[packageName/]'

task compileApplicationFor[packageName.toUpperFirst()/](type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group '[packageName/]'
	description 'compile ['ApplicationFor'.concat(packageName)/]'

	projectFolder = file('.' + File.separator + 'src')

	inputs.files(fileTree('.') {
        exclude 'src/.cmake/**'
    })

	if(!file('.' + File.separator + 'src' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}

	if(OperatingSystem.current().isWindows()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]' +       '.exe'[']'/].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))    {outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]' + 'd' + '.exe'[']'/].join(File.separator))}
	}
	else if(OperatingSystem.current().isLinux() || OperatingSystem.current().isMacOsX()){
		if(project.hasProperty('RELEASE') && !project.property('RELEASE').equals('0')){outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]'      [']'/].join(File.separator))}
		if(project.hasProperty('DEBUG') && !project.property('DEBUG').equals('0'))    {outputs.file file(['['/]rootDir,'application','bin','App_' + '[packageName/]' + 'd'[']'/].join(File.separator))}
	}

	// dependency to model '[packageName/]'
	def [packageName/] = getRootProject().getTasksByName('compile[packageName.toUpperFirst()/]', true)
	if (![packageName/].isEmpty()){
		dependsOn [packageName/]
		inputs.files([packageName/].outputs)
	}
}

task clean {
	doFirst {
		def cmakeFolder = file('.' + File.separator + 'src' + File.separator + '.cmake/')
		if(cmakeFolder.exists()) {
    		delete cmakeFolder.absolutePath
   			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
[/file]
[/template]

[template private generateCMakeFindLibraryCommands(aPackage : Package, ending : String, folderName : String, system : String)]
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, true, system)/]
ELSE()
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, false, system)/]
ENDIF()
[/template]

[template private generateCMakeFindLibraryCommand(aPackage : Package, ending : String, folderName : String, debugMode : Boolean, system : String)]
[for (packName : String | aPackage.collectIncludingModelNames())]
FIND_LIBRARY([packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [packName/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[/for]
FIND_LIBRARY([aPackage.getPackageName().toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [aPackage.getPackageName()/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[if (aPackage.hasMainActivity())]
FIND_LIBRARY(PLUGINFRAMEWORK_[libraryVariableNameSuffix(debugMode)/] pluginFramework[libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[/if]
# ['['/]protected ('library_[system/]_[buildModeCMakeProperty(debugMode)/]')[']'/]
# You may manually edit the following lines, won't be overwritten upon generation.

# ['[/protected]'/]
[/template]

[template private generateLibraryLinking(aPackage : Package, debugMode : Boolean)]
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
[for (packName : String | aPackage.collectIncludingModelNames())]
	[buildModeCMakeProperty(debugMode)/] ${[packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
[/for]
	[buildModeCMakeProperty(debugMode)/] ${[aPackage.getPackageName().toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
[if (aPackage.hasMainActivity())]
	[buildModeCMakeProperty(debugMode)/] ${PLUGINFRAMEWORK_[libraryVariableNameSuffix(debugMode)/]}
[/if]

	# ['['/]protected ('library_linking_[buildModeCMakeProperty(debugMode)/]')[']'/]
	# You may manually edit the following lines, won't be overwritten upon generation.
	
	# ['['/]/protected[']'/]
)
[/template]
[query private libraryVariableNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'DEBUG' else 'RELEASE' endif/]
[query private libraryNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'd' else '' endif/]
[query private buildModeCMakeProperty(debugMode : Boolean) : String = if (debugMode) then 'debug' else 'optimized' endif/]