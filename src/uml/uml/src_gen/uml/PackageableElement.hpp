//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PACKAGEABLEELEMENT_HPP
#define UML_PACKAGEABLEELEMENT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class Namespace;
	class Package;
	class StringExpression;
	class TemplateParameter;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/NamedElement.hpp"
#include "uml/ParameterableElement.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A PackageableElement is a NamedElement that may be owned directly by a Package. A PackageableElement is also able to serve as the parameteredElement of a TemplateParameter.
	<p>From package UML::CommonStructure.</p>
	*/
	
	class UML_API PackageableElement : virtual public NamedElement, virtual public ParameterableElement
	{
		public:
 			PackageableElement(const PackageableElement &) {}

		protected:
			PackageableElement(){}
			//Additional constructors for the containments back reference
			PackageableElement(std::weak_ptr<uml::Namespace> par_namespace);

			//Additional constructors for the containments back reference
			PackageableElement(std::weak_ptr<uml::Element> par_owner);

			//Additional constructors for the containments back reference
			PackageableElement(std::weak_ptr<uml::Package> par_owningPackage);

			//Additional constructors for the containments back reference
			PackageableElement(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~PackageableElement() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::weak_ptr<uml::Package> getOwningPackage() const = 0;
			virtual void setOwningPackage(std::weak_ptr<uml::Package>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			std::weak_ptr<uml::Package> m_owningPackage;
	};
}
#endif /* end of include guard: UML_PACKAGEABLEELEMENT_HPP */
