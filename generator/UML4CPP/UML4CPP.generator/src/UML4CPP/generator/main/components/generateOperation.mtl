[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Operation artefacts
 * 
 */]
[module generateOperation('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateParameter /]
[import UML4CPP::generator::main::components::generateStereotype /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::components::generateOpaqueBehavior /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * generate operation declaration
 */]
[template public generateOperationDecl(aOperation : Operation, impl: Boolean)]
virtual [aOperation.generateCppType()/] [aOperation.name/]([for (sParameter : Parameter | aOperation.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (', ')][sParameter.generateCppType(true)/] [sParameter.name/][if (sParameter.default->notEmpty())] = [sParameter.genDefault()/][/if][/for])[if (aOperation.isQuery)] const[/if] [abstractSuffix(impl)/];

[/template]

[**
 * generate operation implementation
 * 
 * body of operation contains one of the following points:
 * - content of FunctionBehavior -> if first method is FunctionBehavior
 * - calling an Activity by fUML execution engine -> if first method is Activity
 * - raise of UnsupportedOperationException -> if no method is defined
*/]
[template public generateOperationImplementation(anOperation : Operation)]
[anOperation.generateOperationImplementation(true)/]
[/template]

[template public generateOperationImplementation(aOperation : Operation, impl : Boolean)]
[aOperation.generateCppType()/] [aOperation.class.name.toUpperFirst()/][if(impl)]Impl[/if]::[aOperation.name/]([for (sParameter : Parameter | aOperation.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (',')]
[sParameter.generateCppType(true)/] [sParameter.name/][/for])[if (aOperation.isQuery)] const[/if] 
{
[if (aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
[let parameter : Parameter = aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first()]
	[aOperation.generateCppType()/] [if(parameter.name.oclIsUndefined())][parameter.myQualifiedName()/][else][parameter.name/][/if][if (parameter.upper <> 1)](new Bag<[parameter.type.generateCppType(true)/]>())[/if][if(parameter.type.isPrimitive())] = [parameter.genDefault()/][/if];
[/let]
[/if]

[comment TODO: the following if is somethimes undefined when the method is an activity instead of a function behaviour/] 
[if (aOperation.method->notEmpty())]
	[if(aOperation.method->filter(Activity)->notEmpty())]
	std::shared_ptr<PluginFramework> pluginFramework = PluginFramework::eInstance();
	std::string pluginName = "[aOperation.getRootPackage().getPackageName()/]Exec";
	std::shared_ptr<MDE4CPPPlugin> plugin = pluginFramework->findPluginByName(pluginName);
	if (plugin)
	{
		DEBUG_MESSAGE(std::cout << "plugin" << plugin->eNAME() << " found" << std::endl;)

		std::shared_ptr<UMLExecutionModelPlugin> executionPlugin = std::dynamic_pointer_cast<UMLExecutionModelPlugin>(plugin);
		if (executionPlugin)
		{
			DEBUG_MESSAGE(std::cout << "fumlplugin " << executionPlugin->eNAME() << " is accessable" << std::endl;)

			std::shared_ptr<std::vector<Any>> parameterList(new std::vector<Any>());
		[for (par : Parameter | aOperation.method->filter(Activity)->asOrderedSet()->first().ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
		[let anyBagRequired : Boolean = ((par.upper <> 1) and not(par.type.oclIsKindOf(PrimitiveType) or par.type.oclIsKindOf(Enumeration)))]
			parameterList->push_back([if(anyBagRequired)]eAnyBag[else]eAny[/if]([par.name/], [par.type.oclAsType(Classifier).generateStaticClassifierIDAccess()/][if(not anyBagRequired)], [if(par.upper = 1)]false[else]true[/if][/if]));
		[/let]
		[/for]
		[let anActivity : Activity = aOperation.method->filter(Activity)->asOrderedSet()->first()]
			std::shared_ptr<Any> activityResult = executionPlugin->executeActivity([anActivity.generatePackageGetterCall()/], parameterList, getThis[aOperation.class.name.toUpperFirst()/]Ptr());
		[/let]

		[if (aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
			[aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return).name/] = activityResult->get<[aOperation.generateCppType()/]>();
		[/if]
		}
		else
		{
			std::cout << "plugin " << plugin->eNAME() << " is not a fuml based plugin" << std::endl;
		}
	}
	else
	{ 
		std::cout << "plugin" << pluginName << " not found" << std::endl;
	}
	[elseif(aOperation.method->filter(OpaqueBehavior)->notEmpty())]
	[let anOpaqueBehavior : OpaqueBehavior = aOperation.method->filter(OpaqueBehavior)->asOrderedSet()->first()]
		[if (anOpaqueBehavior.hasLanguage(keyCPP()))]
	//Implemented as OpaqueBehaviour [anOpaqueBehavior.name/]
	[anOpaqueBehavior.getEntryForLanguage(keyCPP())/]
		[else]
	//No source code found for behavior '[anOpaqueBehavior.name/]'
	//Make sure that '[keyCPP()/]' is contained in the 'language' property of behavior '[anOpaqueBehavior.name/]'
		[/if]
	[/let]
	[else]
	//Unknown type of Behavior: Currently only Activity and OpaqueBehavior are supported
	[/if]
[else]
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
[/if]

[if (aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
	return [if(aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first().name.oclIsUndefined())][aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first().myQualifiedName()/][else][aOperation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return).name/][/if];
[/if]
}
[/template]

[**
 * generate creation of meta model instance for an Operation element
 * 
 * this includes:
 * - creation of operation
 * - creation of operation parameter
*/]
[template public generateOperationCreation(aOperation : Operation) post(trim())]
[if (not aOperation.class.oclIsUndefined())]
[memberName(aOperation)/] = factory->createOperation_as_ownedOperation_in_Class([memberName(aOperation.class)/]);
[elseif (not aOperation.interface.oclIsUndefined())]
[memberName(aOperation)/] = factory->createOperation_as_ownedOperation_in_Interface([memberName(aOperation.interface)/]);
[/if]
[aOperation.ownedParameter.generateParameterCreation()/]
[/template]

[**
 * generate initialization of meta model instance for an aOperation element
 * 
 * this includes:
 * - set operation name
 * - set methods
 * - initialize operation parameter
*/]
[template public initalizeOperation(aOperation : Operation)]
[memberName(aOperation)/]->setName("[aOperation.name/]");
[if(not aOperation.type.oclIsUndefined())]
[memberName(aOperation)/]->setType([aOperation.type.generatePackageGetterCall(aOperation)/]);
[/if]
[for (beh : Behavior | aOperation.method) separator ('\n')]
[memberName(aOperation)/]->getMethod()->push_back([beh.generatePackageGetterCall(aOperation)/]);[/for]

[for (anOwnedParameter : Parameter | aOperation.ownedParameter) separator ('\n')]
[anOwnedParameter.generateParameterInitialization()/]
[/for]
[aOperation.generateStereotypeApplication()/]
[/template]

[**
 * generates the full name of an Operation (qualified name + signature)
*/]
[template public generateQualifiedNameWithSignature(anOperation : Operation)]
[anOperation.generateNamespaceName(true)/]([for (aParameter : Parameter | anOperation.ownedParameter->select(not (direction = ParameterDirectionKind::return))) separator(', ')][aParameter.generateParameterForOperationQualifiedNameWithSignature()/][/for])[anOperation.generateReturnTypeForOperationQualifiedNameWithSignature()/][if(anOperation.isQuery)] {const}[/if]
[/template]

[template private generateParameterForOperationQualifiedNameWithSignature(aParameter : Parameter)]
[aParameter.type.transformType()/][if(aParameter.upper<>1)]['[*]'/][/if]
[/template]

[template private generateReturnTypeForOperationQualifiedNameWithSignature(anOperation : Operation)]
[if(not anOperation.ownedParameter->select(direction = ParameterDirectionKind::return)->isEmpty())] : [anOperation.ownedParameter->select(direction = ParameterDirectionKind::return)->first().generateParameterForOperationQualifiedNameWithSignature()/][/if]
[/template]

[**
 * checks if 'matchingOperation' matches 'baseOperation'
 * 
 * operations match if:
 * - they have the sme name
 * - they have the same number of input parameters
 * - the input parameter lists have the same types in the same order
*/]
[query public matches(baseOperation : Operation, matchingOperation : Operation) : Boolean = 
	if(baseOperation.name <> matchingOperation.name) then false
		else 	(baseOperation.ownedParameter->select(direction = ParameterDirectionKind::_in or direction = ParameterDirectionKind::_inout).type 
				= matchingOperation.ownedParameter->select(direction = ParameterDirectionKind::_in or direction = ParameterDirectionKind::_inout).type)
		endif
/]
