/*
 * MDE4CPP - Model Driven Engineering for C++
 *
 * Copyright (c) TU Ilmenau, Systems and Software Engineering Group
 * All rights reserved.
 *
 * MIT License
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this
 * software and associated documentation files (the "Software"), to deal in the Software
 * without restriction, including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons
 * to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
 * PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
 * FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
 * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'net.robyf.jarinjar' version '1.0.9'
}

apply plugin: 'java'

description 'fUML4CPP generator project'

dependencies {
   runtime fileTree(dir: System.getenv('MDE4CPP_ECLIPSE_HOME') + '/plugins', include: [
   
   		'org.eclipse.acceleo.common_*.jar',
		'org.eclipse.acceleo.engine_*.jar',
		'org.eclipse.acceleo.model_*.jar',
		'org.eclipse.acceleo.parser_*.jar',

		'org.eclipse.emf.common_*.jar',
		'org.eclipse.emf.ecore_*.jar',
		'org.eclipse.emf.ecore.xmi_*.jar',
		
		'org.eclipse.core.contenttype_*.jar',
		'org.eclipse.core.runtime_*.jar',
		
		'org.eclipse.osgi_*.jar',
		
		'org.eclipse.uml2.common_*.jar',
		'org.eclipse.uml2.types_*.jar',
		'org.eclipse.uml2.uml_*.jar',
		'org.eclipse.uml2.uml.resources_*.jar',
		
		'com.google.guava_*.jar',
		'javax.inject_*.jar',
		'lpg.runtime.java_*.jar',

		'org.eclipse.equinox.app_*.jar',
		'org.eclipse.equinox.common_*.jar',
		'org.eclipse.equinox.preferences_*.jar',
		'org.eclipse.equinox.registry_*.jar',
		
		'org.eclipse.ocl.common_*.jar',
		'org.eclipse.ocl.ecore_*.jar',
		'org.eclipse.ocl_*.jar',
		
		'org.osgi.service.prefs_*.jar',

		'guava_*.jar'
	])
	
    implementation fileTree(dir: System.getenv('MDE4CPP_ECLIPSE_HOME') + '/plugins', include: [

		'org.eclipse.acceleo.common_*.jar',
		'org.eclipse.acceleo.engine_*.jar',
		'org.eclipse.acceleo.model_*.jar',
		'org.eclipse.acceleo.parser_*.jar',
		
		'org.eclipse.emf.common_*.jar',
		'org.eclipse.emf.ecore_*.jar',
		'org.eclipse.emf.ecore.xmi_*.jar',
		
		'org.eclipse.core.runtime_*.jar',
		
		'org.eclipse.osgi_*.jar',
		
		'org.eclipse.uml2.uml_*.jar',
		'org.eclipse.uml2.types_*.jar'
	])
}

sourceSets {
	main {
		java {
			srcDirs = ['src', '../../UML4CPP/UML4CPP.generator/src']
			excludes = ['UML4CPP/generator/Activator.java', 'UML4CPP/generator/main/Generate.java']
		}
	}
}

jar.archiveFileName = 'fUML4CPP.jar'

executableJar {
   mainClass 'fUML4CPP.generator.main.GenerateFUML'
}

task deliverfUML4CPP(dependsOn: jar) {
	description 'deliver fUML4CPP.jar to application/generator'
 
	doLast {
    	copy {
    		from([buildDir,'libs'].join(File.separator)){
    	   		include jar.archiveFileName.get()
    	   	}
    	   	
    	   	into([rootDir,'application','generator'].join(File.separator))
    	}
    }
    
    outputs.upToDateWhen{false}
}

//EOF
