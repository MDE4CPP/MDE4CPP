[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModelApiHeader('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]
[import ecore4CPP::generator::main::validation::validation /]

[template public generateModelApiHeader(anEPackage : EPackage){
	packageName : String = anEPackage.name.concat('Api');
    fileName : String = anEPackage.generateNamespacePath().concat('/').concat(packageName).concat('.hpp');
}]
[printInfo(fileGenerationMessage(fileName, 'model api header file'), 2)/]
[file (fileName, false, 'UTF-8')]
#include "util/crow_all.h"
#include "ecore/EClass.hpp"
#include "[anEPackage.name/]/[anEPackage.name/]Factory.hpp"
#include "[anEPackage.name/]/[anEPackage.name/]Package.hpp"
[for (elements : EClassifier| anEPackage.eClassifiers->selectByKind(EClass)->reject(doNotGenerateEClassifier())->asOrderedSet()->sortedBy(name))]
#include "[elements.generateNamespacePath()/]/impl/[elements.name.toUpperFirst().concat('Impl.hpp')/]"
[/for]

//using namespace ecore;

namespace [anEPackage.name/]
{
	class [anEPackage.getRootPackage().name.toUpper()/]_API [packageName/]{
	public:
	    static std::shared_ptr<[packageName/]> eInstance(const std::shared_ptr<[anEPackage.name/]Factory>& factory);
	    crow::json::wvalue writeValue(const std::shared_ptr<Any>& any);
	    std::shared_ptr<Any> readValue(const crow::json::rvalue& content, const long& metaElementId);
	
	private:
	    explicit [packageName/](const std::shared_ptr<[anEPackage.name/]::[anEPackage.name/]Factory>& factory);
	    template <typename T> T convert_to(const crow::json::rvalue& value);
	    bool keyIsAvailable(const crow::json::rvalue& content, const std::string& key);
	    std::shared_ptr<[anEPackage.name/]::[anEPackage.name/]Factory> m_factory;
	    std::map<std::string,std::shared_ptr<Any>> m_objects{};
	};
}
[/file]
[/template]