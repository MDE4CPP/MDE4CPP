
#include "uml/impl/TemplateSignatureImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/Subset.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Comment.hpp"
#include "uml/Element.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/TemplateableElement.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
TemplateSignatureImpl::TemplateSignatureImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

TemplateSignatureImpl::~TemplateSignatureImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete TemplateSignature "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
TemplateSignatureImpl::TemplateSignatureImpl(std::weak_ptr<uml::Element> par_owner)
:TemplateSignatureImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
TemplateSignatureImpl::TemplateSignatureImpl(std::weak_ptr<uml::TemplateableElement> par_template)
:TemplateSignatureImpl()
{
	m_template = par_template;
	m_owner = par_template;
}

TemplateSignatureImpl::TemplateSignatureImpl(const TemplateSignatureImpl & obj): TemplateSignatureImpl()
{
	*this = obj;
}

TemplateSignatureImpl& TemplateSignatureImpl::operator=(const TemplateSignatureImpl & obj)
{
	//call overloaded =Operator for each base class
	ElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of TemplateSignature 
	 * which is generated by the compiler (as TemplateSignature is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//TemplateSignature::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy TemplateSignature "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_parameter  = obj.getParameter();
	m_template  = obj.getTemplate();
	//Clone references with containment (deep copy)
	//clone reference 'ownedParameter'
	const std::shared_ptr<Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter>>& ownedParameterList = obj.getOwnedParameter();
	if(ownedParameterList)
	{
		/*Subset*/
		m_ownedParameter.reset(new Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedParameter - Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedParameter()->initSubset(getOwnedElement(), getParameter());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedParameter - Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >(getOwnedElement(), getParameter())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::TemplateParameter>& ownedParameterindexElem: *ownedParameterList) 
		{
			const std::shared_ptr<uml::TemplateParameter>& temp = std::dynamic_pointer_cast<uml::TemplateParameter>((ownedParameterindexElem)->copy());
			m_ownedParameter->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for ownedParameter.")
	}
	/*Subset*/
	getOwnedParameter()->initSubset(getOwnedElement(), getParameter());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_ownedParameter - Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >(getOwnedElement(), getParameter())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> TemplateSignatureImpl::copy() const
{
	std::shared_ptr<TemplateSignatureImpl> element(new TemplateSignatureImpl());
	*element =(*this);
	element->setThisTemplateSignaturePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference ownedParameter */
const std::shared_ptr<Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter>>& TemplateSignatureImpl::getOwnedParameter() const
{
	if(m_ownedParameter == nullptr)
	{
		/*Subset*/
		m_ownedParameter.reset(new Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_ownedParameter - Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >()" << std::endl;
		#endif
		
		/*Subset*/
		getOwnedParameter()->initSubset(getOwnedElement(), getParameter());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_ownedParameter - Subset<uml::TemplateParameter, uml::Element, uml::TemplateParameter >(getOwnedElement(), getParameter())" << std::endl;
		#endif
		
	}
    return m_ownedParameter;
}

/* Getter & Setter for reference parameter */

/* Getter & Setter for reference template */
std::weak_ptr<uml::TemplateableElement> TemplateSignatureImpl::getTemplate() const
{
    return m_template;
}
void TemplateSignatureImpl::setTemplate(std::weak_ptr<uml::TemplateableElement> _template)
{
    m_template = _template;
	
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<uml::TemplateParameter>> TemplateSignatureImpl::getParameter() const
{
	if(m_parameter == nullptr)
	{
		/*Union*/
		m_parameter.reset(new Union<uml::TemplateParameter>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_parameter - Union<uml::TemplateParameter>()" << std::endl;
		#endif
		
		
	}
	return m_parameter;
}

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> TemplateSignatureImpl::eContainer() const
{
	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_template.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void TemplateSignatureImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void TemplateSignatureImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("parameter");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("parameter")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ElementImpl::loadAttributes(loadHandler, attr_list);
}

void TemplateSignatureImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("ownedParameter") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "TemplateParameter";
			}
			loadHandler->handleChildContainer<uml::TemplateParameter>(this->getOwnedParameter());  

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	ElementImpl::loadNode(nodeName, loadHandler);
}

void TemplateSignatureImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_PARAMETER:
		{
			const std::shared_ptr<Union<uml::TemplateParameter>>& _parameter = getParameter();
			for(const std::shared_ptr<ecore::EObject>& ref : references)
			{
				std::shared_ptr<uml::TemplateParameter>  _r = std::dynamic_pointer_cast<uml::TemplateParameter>(ref);
				if (_r != nullptr)
				{
					_parameter->push_back(_r);
				}
			}
			return;
		}

		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_TEMPLATE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<uml::TemplateableElement> _template = std::dynamic_pointer_cast<uml::TemplateableElement>( references.front() );
				setTemplate(_template);
			}
			
			return;
		}
	}
	ElementImpl::resolveReferences(featureID, references);
}

void TemplateSignatureImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void TemplateSignatureImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Save 'ownedParameter'
		for (const std::shared_ptr<uml::TemplateParameter>& ownedParameter : *this->getOwnedParameter()) 
		{
			saveHandler->addReference(ownedParameter, "ownedParameter", ownedParameter->eClass() != package->getTemplateParameter_Class());
		}
	// Add references
		saveHandler->addReferences<uml::TemplateParameter>("parameter", this->getParameter());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& TemplateSignatureImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getTemplateSignature_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> TemplateSignatureImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:
			return eEcoreContainerAny(getOwnedParameter(),uml::umlPackage::TEMPLATEPARAMETER_CLASS); //2335
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_PARAMETER:
			return eEcoreContainerAny(getParameter(),uml::umlPackage::TEMPLATEPARAMETER_CLASS); //2333
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_TEMPLATE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getTemplate().lock();
			return eEcoreAny(returnValue,uml::umlPackage::TEMPLATEABLEELEMENT_CLASS); //2334
		}
	}
	return ElementImpl::eGet(featureID, resolve, coreType);
}

bool TemplateSignatureImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:
			return getOwnedParameter() != nullptr; //2335
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_PARAMETER:
			return getParameter() != nullptr; //2333
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_TEMPLATE:
			return getTemplate().lock() != nullptr; //2334
	}
	return ElementImpl::internalEIsSet(featureID);
}

bool TemplateSignatureImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_OWNEDPARAMETER:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<uml::TemplateParameter>>& _ownedParameter = getOwnedParameter();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<uml::TemplateParameter> valueToAdd = std::dynamic_pointer_cast<uml::TemplateParameter>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_ownedParameter->includes(valueToAdd)))
								{
									_ownedParameter->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'ownedParameter'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'ownedParameter'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_PARAMETER:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						const std::shared_ptr<Bag<uml::TemplateParameter>>& _parameter = getParameter();
	
						for(const std::shared_ptr<ecore::EObject>& anEObject: *eObjectList)
						{
							std::shared_ptr<uml::TemplateParameter> valueToAdd = std::dynamic_pointer_cast<uml::TemplateParameter>(anEObject);
	
							if (valueToAdd)
							{
								if(!(_parameter->includes(valueToAdd)))
								{
									_parameter->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'parameter'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'parameter'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::TEMPLATESIGNATURE_ATTRIBUTE_TEMPLATE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::TemplateableElement> _template = std::dynamic_pointer_cast<uml::TemplateableElement>(eObject);
					if(_template)
					{
						setTemplate(_template); //2334
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'template'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'template'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return ElementImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> TemplateSignatureImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = ElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::TemplateSignature> TemplateSignatureImpl::getThisTemplateSignaturePtr() const
{
	return m_thisTemplateSignaturePtr.lock();
}
void TemplateSignatureImpl::setThisTemplateSignaturePtr(std::weak_ptr<uml::TemplateSignature> thisTemplateSignaturePtr)
{
	m_thisTemplateSignaturePtr = thisTemplateSignaturePtr;
	setThisElementPtr(thisTemplateSignaturePtr);
}


