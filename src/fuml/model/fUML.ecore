<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="fUML" nsURI="http://www.eclipse.org/emf/2002/fUML" nsPrefix="fUML">
  <eClassifiers xsi:type="ecore:EClass" name="Locus">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;algorithm>&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExtensionalValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/Executor.hpp&quot;&#xD;&#xA;#include &quot;fUML/Object.hpp&quot;&#xD;&#xA;#include &quot;fUML/Execution.hpp&quot;&#xD;&#xA;"/>
    </eAnnotations>
    <eOperations name="conforms" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool doesConform = false;&#xD;&#xA;    if(type == classifier)&#xD;&#xA;    {&#xD;&#xA;        doesConform = true;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while(!doesConform &amp;&amp; (i &lt; type->getGeneral()->size()))&#xD;&#xA;        {&#xD;&#xA;            doesConform = this->conforms(type->getGeneral()->at(i), classifier);&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return doesConform;"/>
      </eAnnotations>
      <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
      <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
    </eOperations>
    <eOperations name="assignExecutor" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->setExecutor(executor);&#xD;&#xA;&#x9;this->getExecutor()->setLocus(getThisLocusPtr());"/>
      </eAnnotations>
      <eParameters name="executor" ordered="false" lowerBound="1" eType="#//Executor"/>
    </eOperations>
    <eOperations name="assignFactory" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->setFactory(factory);&#xD;&#xA;&#x9;this->getFactory()->setLocus(getThisLocusPtr());"/>
      </eAnnotations>
      <eParameters name="factory" ordered="false" lowerBound="1" eType="#//ExecutionFactory"/>
    </eOperations>
    <eOperations name="retrieveExtent" ordered="false" upperBound="-1" eType="#//ExtensionalValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::ExtensionalValue> > extent =this->getExtensionalValues();&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::ExtensionalValue> > extensionalValues = this->getExtensionalValues();&#xD;&#xA;&#xD;&#xA;&#x9;for (unsigned int i=0; i &lt; extensionalValues->size();i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::ExtensionalValue> value = extensionalValues->at(i);&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = value->getTypes();&#xD;&#xA;&#x9;&#x9;bool conforms = false;&#xD;&#xA;&#x9;&#x9;unsigned int j = 0;&#xD;&#xA;&#x9;&#x9;while(!conforms &amp;&amp; j &lt; types->size())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;conforms = this->conforms(types->at(j), classifier);&#xD;&#xA;&#x9;&#x9;&#x9;j = j + 1;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;if(conforms)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;extent->push_back(value);&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return extent;"/>
      </eAnnotations>
      <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
    </eOperations>
    <eOperations name="add" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="value->setLocus(getThisLocusPtr());&#xD;&#xA;&#x9;this->getExtensionalValues()->push_back(value);"/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//ExtensionalValue"/>
    </eOperations>
    <eOperations name="remove" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="value->setLocus(nullptr);&#xD;&#xA;&#x9;this->getExtensionalValues()->erase(value);"/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//ExtensionalValue"/>
    </eOperations>
    <eOperations name="instantiate" ordered="false" lowerBound="1" eType="#//Object">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;fUML::Object> object = nullptr;&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::Behavior> behavior = std::dynamic_pointer_cast&lt;uml::Behavior>(type);&#xD;&#xA;    if(behavior != nullptr)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;fUML::Object>  context = nullptr;&#xD;&#xA;        object = std::dynamic_pointer_cast&lt;Object>(this->getFactory()->createExecution(behavior, nullptr));&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        object = FUMLFactory::eInstance()->createObject();&#xD;&#xA;        object->getTypes()->push_back(type);&#xD;&#xA;        object->createFeatureValues();&#xD;&#xA;        this->add(object);&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    return object;"/>
      </eAnnotations>
      <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="executor" ordered="false"
        eType="#//Executor" containment="true" eOpposite="#//Executor/locus"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="factory" lowerBound="1"
        eType="#//ExecutionFactory" containment="true" eOpposite="#//ExecutionFactory/locus"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="extensionalValues" ordered="false"
        upperBound="-1" eType="#//ExtensionalValue" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExecutionFactory" abstract="true">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLPackage.hpp&quot;&#xD;&#xA;#include &quot;uml/OpaqueBehavior.hpp&quot;&#xD;&#xA;#include &quot;fUML/OpaqueBehaviorExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/Value.hpp&quot;&#xD;&#xA;#include &quot;fUML/Evaluation.hpp&quot;&#xD;&#xA;#include &quot;uml/Element.hpp&quot;&#xD;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="createExecution" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=" std::shared_ptr &lt;fUML::Execution> execution;&#xD;&#xA;&#xD;&#xA;    std::shared_ptr &lt;uml::OpaqueBehavior> opaqueBehavior = std::dynamic_pointer_cast&lt;uml::OpaqueBehavior>(behavior);&#xD;&#xA;    if(opaqueBehavior != nullptr)&#xD;&#xA;    {&#xD;&#xA;        execution = this->instantiateOpaqueBehaviorExecution(opaqueBehavior);&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        execution = std::dynamic_pointer_cast&lt;fUML::Execution>(this->instantiateVisitor(behavior));&#xD;&#xA;        if(execution != nullptr)&#xD;&#xA;        {&#xD;&#xA;            execution->getTypes()->push_back(behavior);&#xD;&#xA;            execution->createFeatureValues();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if(nullptr == execution)&#xD;&#xA;    {&#xD;&#xA;        std::cerr &lt;&lt; &quot;[createExecution] Execution is null&quot; &lt;&lt; std::endl;&#xD;&#xA;        return nullptr;&#xD;&#xA;    }&#xD;&#xA;    this->getLocus().lock()->add(execution);&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    if(context == nullptr)&#xD;&#xA;    {&#xD;&#xA;        if(execution != nullptr)&#xD;&#xA;        {&#xD;&#xA;            execution->setContext(execution);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        if(execution != nullptr)&#xD;&#xA;        {&#xD;&#xA;            execution->setContext(context);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return execution;"/>
      </eAnnotations>
      <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior"/>
      <eParameters name="context" ordered="false" eType="#//Object"/>
    </eOperations>
    <eOperations name="createEvaluation" ordered="false" lowerBound="1" eType="#//Evaluation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Evaluation> evaluation = std::dynamic_pointer_cast&lt;fUML::Evaluation>(this->instantiateVisitor(specification));&#xD;&#xA;&#xD;&#xA;    evaluation->setSpecification(specification);&#xD;&#xA;    evaluation->setLocus(this->getLocus().lock()) /*TODO: it can be dangerous to use the weak pointer!*/;&#xD;&#xA;&#xD;&#xA;    return evaluation;"/>
      </eAnnotations>
      <eParameters name="specification" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
    </eOperations>
    <eOperations name="instantiateVisitor" ordered="false" lowerBound="1" eType="#//SemanticVisitor">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
      <eParameters name="element" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
    </eOperations>
    <eOperations name="instantiateOpaqueBehaviorExecution" ordered="false" lowerBound="1"
        eType="#//OpaqueBehaviorExecution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;fUML::OpaqueBehaviorExecution> execution = nullptr;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;SIZE PROTOTYPES &quot;&lt;&lt; this->getPrimitiveBehaviorPrototypes()->size()&lt;&lt;std::endl;)&#xD;&#xA;    auto primitiveBehaviorPrototypes = this->getPrimitiveBehaviorPrototypes();&#xD;&#xA;    while(execution == nullptr &amp;&amp; (i &lt; this->getPrimitiveBehaviorPrototypes()->size()))&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;fUML::OpaqueBehaviorExecution> prototype = primitiveBehaviorPrototypes->at(i);&#xD;&#xA;        //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;BEHAVIOUR NAME:&quot;&lt;&lt;prototype->getBehavior()->getName()&lt;&lt;&quot;AND&quot;&lt;&lt;behavior->getName()&lt;&lt;std::endl;)&#xD;&#xA;        if( prototype->getTypes()->front() == behavior)&#xD;&#xA;        {&#xD;&#xA;            execution = std::dynamic_pointer_cast&lt;OpaqueBehaviorExecution>(prototype->copy());&#xD;&#xA;        }&#xD;&#xA;        i++;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if(execution == nullptr)&#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[instantiateOpaqueExecution] No prototype execution found for &quot; &lt;&lt; behavior->getName() &lt;&lt;std::endl;)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return execution;"/>
      </eAnnotations>
      <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OpaqueBehavior"/>
    </eOperations>
    <eOperations name="addPrimitiveBehaviorPrototype" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;OpaqueBehaviorExecution> > primBehaviorExecution = this->getPrimitiveBehaviorPrototypes();&#xD;&#xA;    primBehaviorExecution->push_back(execution);"/>
      </eAnnotations>
      <eParameters name="execution" ordered="false" lowerBound="1" eType="#//OpaqueBehaviorExecution"/>
    </eOperations>
    <eOperations name="addBuiltInType" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::PrimitiveType> > builtInTypes = this->getBuiltInTypes();&#xD;&#xA;    builtInTypes->push_back(type);"/>
      </eAnnotations>
      <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType"/>
    </eOperations>
    <eOperations name="getBuiltInType" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::PrimitiveType> type = nullptr;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (nullptr == type &amp;&amp; i &lt; this->getBuiltInTypes()->size())&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::PrimitiveType> primitiveType = this->getBuiltInTypes()->at(i);&#xD;&#xA;        if (typeid(primitiveType).name() == name) &#xD;&#xA;        {&#xD;&#xA;            type = primitiveType;&#xD;&#xA;        }&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return type;"/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="assignStrategy" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    unsigned int i = this->getStrategyIndex(strategy->retrieveName());&#xD;&#xA;&#xD;&#xA;    if(i &lt; this->getStrategies()->size())&#xD;&#xA;    {&#xD;&#xA;        this->getStrategies()->erase(this->getStrategies()->begin() + i);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->getStrategies()->push_back(strategy);"/>
      </eAnnotations>
      <eParameters name="strategy" ordered="false" lowerBound="1" eType="#//SemanticStrategy"/>
    </eOperations>
    <eOperations name="getStrategy" ordered="false" eType="#//SemanticStrategy">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;unsigned int i = this->getStrategyIndex(name);&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;SemanticStrategy> strategy = nullptr;&#xD;&#xA;    if(i &lt; this->getStrategies()->size())&#xD;&#xA;    {&#xD;&#xA;        strategy = this->getStrategies()->at(i);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return strategy;"/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eOperations name="getStrategyIndex" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;Bag&lt;SemanticStrategy>* strategies = this->getStrategies().get();&#xD;&#xA;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    bool unmatched = true;&#xD;&#xA;    const unsigned int s_size = strategies->size();&#xD;&#xA;    while(unmatched &amp;&amp; (i &lt; s_size))&#xD;&#xA;    {&#xD;&#xA;        if((*strategies)[i]->retrieveName()==name)&#xD;&#xA;        {&#xD;&#xA;            unmatched = false;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return i;"/>
      </eAnnotations>
      <eParameters name="name" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
        eType="#//Locus" eOpposite="#//Locus/factory"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="strategies" ordered="false"
        upperBound="-1" eType="#//SemanticStrategy"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="primitiveBehaviorPrototypes"
        upperBound="-1" eType="#//OpaqueBehaviorExecution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="map_key" value="Behavior"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="builtInTypes" ordered="false"
        upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Executor">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/Evaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/Execution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Object.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if (auto locus = this->getLocus().lock())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return locus->getFactory()->createEvaluation(specification)->evaluate();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return nullptr;&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="specification" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
    </eOperations>
    <eOperations name="start" ordered="false" lowerBound="1" eType="#//Reference">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[start] Starting &quot; &lt;&lt; typeid(type).name() &lt;&lt;&quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;if (auto locus = this->getLocus().lock())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Object> object = locus->instantiate(type);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[start] Object = &quot; &lt;&lt; object&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;object->startBehavior(type,inputs);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Reference> reference(fUML::FUMLFactory::eInstance()->createReference());&#xD;&#xA;&#x9;&#x9;reference->setReferent(object);&#xD;&#xA;&#x9;&#x9;return reference;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return nullptr;&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
      <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="execute" ordered="false" upperBound="-1" eType="#//ParameterValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Execution> execution = nullptr;&#xD;&#xA;&#x9;if (auto locus = this->getLocus().lock())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;execution = locus->getFactory()->createExecution(behavior, context);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;    if(nullptr == execution)&#xD;&#xA;    {&#xD;&#xA;        std::cerr &lt;&lt; &quot;[execute] Execution is null&quot; &lt;&lt; std::endl;&#xD;&#xA;        return nullptr;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    for(std::shared_ptr&lt;fUML::ParameterValue> parameterValue : *inputs )&#xD;&#xA;    {&#xD;&#xA;        execution->setParameterValue(parameterValue);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    execution->execute();&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;ParameterValue> > outputValues = execution->getOutputParameterValues();&#xD;&#xA;    execution->destroy();&#xD;&#xA;&#xD;&#xA;    return outputValues;"/>
      </eAnnotations>
      <eParameters name="behavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior"/>
      <eParameters name="context" ordered="false" eType="#//Object"/>
      <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
        eType="#//Locus" eOpposite="#//Locus/executor"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SemanticStrategy" abstract="true">
    <eOperations name="retrieveName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SemanticVisitor" abstract="true">
    <eOperations name="_endIsolation" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt; &quot;[_endIsolation] End isolation.&quot;&lt;&lt;std::endl;)"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="_beginIsolation" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt; &quot;[_beginIsolation] Begin isolation.&quot;&lt;&lt;std::endl;)"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ChoiceStrategy" abstract="true" eSuperTypes="#//SemanticStrategy">
    <eOperations name="choose" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eParameters name="size" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="retrieveName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return &quot;choice&quot;;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FirstChoiceStrategy" eSuperTypes="#//ChoiceStrategy">
    <eOperations name="choose" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return 1;"/>
      </eAnnotations>
      <eParameters name="size" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExecutionFactoryL1" eSuperTypes="#//ExecutionFactory">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/LiteralBooleanEvaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/LiteralStringEvaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/LiteralNullEvaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/InstanceValueEvaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/LiteralUnlimitedNaturalEvaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/LiteralIntegerEvaluation.hpp&quot;&#xD;&#xA;#include &quot;fUML/LiteralRealEvaluation.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlPackage.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralInteger.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralNull.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralReal.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralString.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralUnlimitedNatural.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="instantiateVisitor" ordered="false" lowerBound="1" eType="#//SemanticVisitor">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;fUML::SemanticVisitor> visitor = nullptr;&#xD;&#xA;&#xD;&#xA;    switch (element->eClass()->getClassifierID()) {&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::LITERALBOOLEAN_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = FUMLFactory::eInstance()->createLiteralBooleanEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::LITERALSTRING_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;visitor = FUMLFactory::eInstance()->createLiteralStringEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::LITERALNULL_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;visitor =  FUMLFactory::eInstance()->createLiteralNullEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::INSTANCEVALUE_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;visitor = FUMLFactory::eInstance()->createInstanceValueEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::LITERALUNLIMITEDNATURAL_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;visitor = FUMLFactory::eInstance()->createLiteralUnlimitedNaturalEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::LITERALINTEGER_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;visitor = FUMLFactory::eInstance()->createLiteralIntegerEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;case uml::UmlPackage::LITERALREAL_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;visitor = FUMLFactory::eInstance()->createLiteralRealEvaluation();&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;default:{&#xD;&#xA;            //L3 provides an error message&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;    return visitor;"/>
      </eAnnotations>
      <eParameters name="element" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExecutionFactoryL2" eSuperTypes="#//ExecutionFactoryL1">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ActivityExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityFinalNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityParameterNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/AddStructuralFeatureValueActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/CallBehaviorActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/CallOperationActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ClearAssociationActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/CreateLinkActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ClearStructuralFeatureActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/CreateObjectActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/DecisionNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/DestroyLinkActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/DestroyObjectActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/FlowFinalNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ForkNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/InitialNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/InputPinActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/JoinNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/MergeNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/OutputPinActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReadLinkActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReadSelfActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReadStructuralFeatureActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/RemoveStructuralFeatureValueActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/SendSignalActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/TestIdentityActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ValueSpecificActionActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/Activity.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityFinalNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityParameterNode.hpp&quot;&#xD;&#xA;#include &quot;uml/AddStructuralFeatureValueAction.hpp&quot;&#xD;&#xA;#include &quot;uml/CallBehaviorAction.hpp&quot;&#xD;&#xA;#include &quot;uml/CallOperationAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ClearAssociationAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ClearStructuralFeatureAction.hpp&quot;&#xD;&#xA;#include &quot;uml/CreateLinkAction.hpp&quot;&#xD;&#xA;#include &quot;uml/CreateObjectAction.hpp&quot;&#xD;&#xA;#include &quot;uml/DecisionNode.hpp&quot;&#xD;&#xA;#include &quot;uml/DestroyLinkAction.hpp&quot;&#xD;&#xA;#include &quot;uml/DestroyObjectAction.hpp&quot;&#xD;&#xA;#include &quot;uml/FlowFinalNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ForkNode.hpp&quot;&#xD;&#xA;#include &quot;uml/InitialNode.hpp&quot;&#xD;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/JoinNode.hpp&quot;&#xD;&#xA;#include &quot;uml/MergeNode.hpp&quot;&#xD;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/ReadLinkAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ReadSelfAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ReadStructuralFeatureAction.hpp&quot;&#xD;&#xA;#include &quot;uml/RemoveStructuralFeatureValueAction.hpp&quot;&#xD;&#xA;#include &quot;uml/SendSignalAction.hpp&quot;&#xD;&#xA;#include &quot;uml/TestIdentityAction.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlPackage.hpp&quot;&#xD;&#xA;#include &quot;uml/ValueSpecificationAction.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="instantiateVisitor" ordered="false" lowerBound="1" eType="#//SemanticVisitor">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;fUML::SemanticVisitor> visitor = ExecutionFactoryL1Impl::instantiateVisitor(element);&#xD;&#xA;&#xD;&#xA;    if(!visitor){&#xD;&#xA;        switch(element->eClass()->getClassifierID()){&#xD;&#xA;            case uml::UmlPackage::ACTIVITY_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createActivityExecution());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::ACTIVITYPARAMETERNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createActivityParameterNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::INITIALNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createInitialNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::ACTIVITYFINALNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createActivityFinalNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::FLOWFINALNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createFlowFinalNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::JOINNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createJoinNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::MERGENODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createMergeNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::FORKNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createForkNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::DECISIONNODE_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createDecisionNodeActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::INPUTPIN_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createInputPinActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::OUTPUTPIN_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createOutputPinActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::CALLBEHAVIORACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createCallBehaviorActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::CALLOPERATIONACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createCallOperationActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::SENDSIGNALACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createSendSignalActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::READSELFACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReadSelfActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage:: TESTIDENTITYACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createTestIdentityActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::VALUESPECIFICATIONACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createValueSpecificActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::CREATEOBJECTACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createCreateObjectActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::DESTROYOBJECTACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createDestroyObjectActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::READSTRUCTURALFEATUREACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReadStructuralFeatureActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::CLEARSTRUCTURALFEATUREACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createClearStructuralFeatureActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::ADDSTRUCTURALFEATUREVALUEACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createAddStructuralFeatureValueActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::REMOVESTRUCTURALFEATUREVALUEACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createRemoveStructuralFeatureValueActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::READLINKACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReadLinkActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::CLEARASSOCIATIONACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createClearAssociationActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::CREATELINKACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createCreateLinkActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            case uml::UmlPackage::DESTROYLINKACTION_CLASS:&#xD;&#xA;            {&#xD;&#xA;                visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createDestroyLinkActionActivation());&#xD;&#xA;                break;&#xD;&#xA;            }&#xD;&#xA;            default:{&#xD;&#xA;                //L3 provides an error message&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    return visitor;"/>
      </eAnnotations>
      <eParameters name="element" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExecutionFactoryL3" eSuperTypes="#//ExecutionFactoryL2">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/AcceptEventActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ConditionalNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/DataStoreNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExpansionNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExpansionRegionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/LoopNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReadExtentActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReadIsClassifiedObjectActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReclassifyObjectActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ReduceActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/StartClassifierBehaviorActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/StartObjectBehaviorActionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/StructuredActivityNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/AcceptEventAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ConditionalNode.hpp&quot;&#xD;&#xA;#include &quot;uml/DataStoreNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ExpansionNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ExpansionRegion.hpp&quot;&#xD;&#xA;#include &quot;uml/LoopNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ReadExtentAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ReadIsClassifiedObjectAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ReclassifyObjectAction.hpp&quot;&#xD;&#xA;#include &quot;uml/ReduceAction.hpp&quot;&#xD;&#xA;#include &quot;uml/StartClassifierBehaviorAction.hpp&quot;&#xD;&#xA;#include &quot;uml/StartObjectBehaviorAction.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlPackage.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="instantiateVisitor" ordered="false" lowerBound="1" eType="#//SemanticVisitor">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;fUML::SemanticVisitor> visitor = ExecutionFactoryL2Impl::instantiateVisitor(element);&#xD;&#xA;&#xD;&#xA;&#x9;if(!visitor) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;switch (element->eClass()->getClassifierID()) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::CONDITIONALNODE_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createConditionalNodeActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::LOOPNODE_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createLoopNodeActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::EXPANSIONREGION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createExpansionRegionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::STRUCTUREDACTIVITYNODE_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createStructuredActivityNodeActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::EXPANSIONNODE_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createExpansionNodeActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::READEXTENTACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReadExtentActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::READISCLASSIFIEDOBJECTACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReadIsClassifiedObjectActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::RECLASSIFYOBJECTACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReclassifyObjectActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::STARTOBJECTBEHAVIORACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createStartObjectBehaviorActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::STARTCLASSIFIERBEHAVIORACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createStartClassifierBehaviorActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::ACCEPTEVENTACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createAcceptEventActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::REDUCEACTION_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createReduceActionActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;case uml::UmlPackage::DATASTORENODE_CLASS: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;visitor = std::shared_ptr&lt;fUML::SemanticVisitor>(FUMLFactory::eInstance()->createDataStoreNodeActivation());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;default: &#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; __PRETTY_FUNCTION__ &lt;&lt; &quot; - Unknown visitor type&quot; &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;&#xD;&#xA;&#x9;return visitor;"/>
      </eAnnotations>
      <eParameters name="element" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Element"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Value" abstract="true" eSuperTypes="#//SemanticVisitor">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > myTypes = this->getTypes();&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > otherTypes = otherValue->getTypes();&#xD;&#xA;&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;in Value&quot;&lt;&lt;std::endl;)&#xD;&#xA;    bool isEqual = true;&#xD;&#xA;&#xD;&#xA;    if(myTypes->size() != otherTypes->size())&#xD;&#xA;    {&#xD;&#xA;        isEqual = false;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while(isEqual &amp;&amp; i &lt; myTypes->size())&#xD;&#xA;        {&#xD;&#xA;            bool matched = false;&#xD;&#xA;            unsigned int j = 0;&#xD;&#xA;            while(!matched &amp;&amp; j &lt; otherTypes->size())&#xD;&#xA;            {&#xD;&#xA;                matched = (otherTypes->at(j) == myTypes->at(i));&#xD;&#xA;                j = j + 1;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            isEqual = matched;&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="const"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasTypes" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getTypes();&#xD;&#xA;&#xD;&#xA;    bool found = false;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while(!found &amp;&amp; i &lt; types->size())&#xD;&#xA;    {&#xD;&#xA;        found = (types->at(i) == type);&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return found;"/>
      </eAnnotations>
      <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
    </eOperations>
    <eOperations name="objectId" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return &quot;SemanticVisitor&quot;;//typename(SemanticVisitor); //return super.toString();&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StructuredValue" abstract="true" eSuperTypes="#//Value">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceSpecification.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xD;&#xA;#include &quot;uml/NamedElement.hpp&quot;&#xD;&#xA;#include &quot;uml/Slot.hpp&quot;&#xD;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;"/>
    </eAnnotations>
    <eOperations name="retrieveFeatureValue" ordered="false" lowerBound="1" eType="#//FeatureValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
    </eOperations>
    <eOperations name="assignFeatureValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=""/>
      </eAnnotations>
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
      <eParameters name="values" ordered="false" upperBound="-1" eType="#//Value"/>
      <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="retrieveFeatureValues" ordered="false" upperBound="-1" eType="#//FeatureValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
    </eOperations>
    <eOperations name="createFeatureValues">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getTypes();&#xD;&#xA;&#xD;&#xA;    if(types!= nullptr)&#xD;&#xA;    {&#xD;&#xA;    &#x9;for(unsigned int i = 0; i &lt; types->size(); i++)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;std::shared_ptr&lt;uml::Classifier> type = types->at(i);&#xD;&#xA;    &#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::NamedElement> > members = type->getMember();&#xD;&#xA;&#xD;&#xA;    &#x9;&#x9;for(unsigned int j = 0; j &lt; members->size(); j++)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;std::shared_ptr&lt;uml::NamedElement> member = members->at(j);&#xD;&#xA;    &#x9;&#x9;&#x9;std::shared_ptr&lt;uml::StructuralFeature> structuralFeature = std::dynamic_pointer_cast&lt;uml::StructuralFeature>(member);&#xD;&#xA;    &#x9;&#x9;&#x9;if(structuralFeature != nullptr)&#xD;&#xA;    &#x9;&#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value> > valueList(new Bag&lt;fUML::Value>());&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;this->assignFeatureValue(structuralFeature, valueList, 0);&#xD;&#xA;    &#x9;&#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;}&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::InstanceValue> instanceValue = uml::UmlFactory::eInstance()->createInstanceValue_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::InstanceSpecification> instance = uml::UmlFactory::eInstance()->createInstanceSpecification_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;&#xD;&#xA;    instanceValue->setType(nullptr);&#xD;&#xA;    instanceValue->setInstance(instance);&#xD;&#xA;&#xD;&#xA;    instance->getClassifier();//->push_back(this->getTypes());&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;FeatureValue> > featureValues = this->retrieveFeatureValues();&#xD;&#xA;    // Debug.println(&quot;[specify] &quot; + featureValues.size() + &quot; feature(s).&quot;);&#xD;&#xA;&#xD;&#xA;    for(unsigned int i = 0; i &lt; featureValues->size(); i++)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;FeatureValue> featureValue = featureValues->at(i);&#xD;&#xA;&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::Slot> slot = uml::UmlFactory::eInstance()->createSlot_in_OwningInstance(std::shared_ptr&lt;uml::InstanceSpecification>());&#xD;&#xA;        slot->setDefiningFeature(featureValue->getFeature());&#xD;&#xA;&#xD;&#xA;        // Debug.println(&quot;[specify] feature = &quot; + featureValue.feature.name&#xD;&#xA;        // + &quot;, &quot; + featureValue.values.size() + &quot; value(s).&quot;);&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;Value> > values = featureValue->getValues();&#xD;&#xA;        for(unsigned int j = 0; j &lt; values->size(); j++)&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Value> value = values->at(j);&#xD;&#xA;            // Debug.println(&quot;[specify] value = &quot; + value);&#xD;&#xA;            slot->getValue()->push_back(value->specify());&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        instance->getSlot()->push_back(slot);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return instanceValue;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Reference" eSuperTypes="#//StructuredValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;uml/Classifier.hpp>&#xD;&#xA;    #include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;    #include &quot;uml/Class.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="startBehavior" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->getReferent()->startBehavior(classifier,inputs);"/>
      </eAnnotations>
      <eParameters name="classifier" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
      <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="dispatch" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getReferent()->dispatch(operation);"/>
      </eAnnotations>
      <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
    </eOperations>
    <eOperations name="send" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->getReferent()->send(signalInstance);"/>
      </eAnnotations>
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
    <eOperations name="destroy" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->getReferent()->destroy();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool isEqual = false;&#xD;&#xA;&#x9;if (otherValue->eClass()->getClassifierID() == fUML::FUMLPackage::REFERENCE_CLASS) {&#xD;&#xA;&#x9;&#x9;auto other = std::dynamic_pointer_cast&lt;Reference>(otherValue);&#xD;&#xA;&#x9;&#x9;if (this->getReferent() == nullptr) {&#xD;&#xA;&#x9;&#x9;&#x9;isEqual = other->getReferent() == nullptr;&#xD;&#xA;&#x9;&#x9;} else {&#xD;&#xA;&#x9;&#x9;&#x9;isEqual = this->getReferent()->equals(other->getReferent());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::shared_ptr&lt;fUML::Value>(FUMLFactory::eInstance()->createReference());"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;return  this->getReferent()->getTypes();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="retrieveFeatureValue" ordered="false" lowerBound="1" eType="#//FeatureValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getReferent()->retrieveFeatureValue(feature);"/>
      </eAnnotations>
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
    </eOperations>
    <eOperations name="assignFeatureValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getReferent()->assignFeatureValue(feature,values,position);"/>
      </eAnnotations>
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
      <eParameters name="values" ordered="false" upperBound="-1" eType="#//Value"/>
      <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="retrieveFeatureValues" ordered="false" upperBound="-1" eType="#//FeatureValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getReferent()->retrieveFeatureValues();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return &quot;Reference to &quot; + this->getReferent()->toString();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="referent" ordered="false"
        lowerBound="1" eType="#//Object"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CompoundValue" abstract="true" eSuperTypes="#//StructuredValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;algorithm>&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &lt;fUML/FUMLFactory.hpp>&#xD;&#xA;#include &lt;cstdio>&#xD;&#xA;&#xD;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="removeFeatureValues" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::remove_if(this->getFeatureValues()->begin(),this->getFeatureValues()->end(),[classifier](std::shared_ptr&lt;FeatureValue> featureValue){return featureValue->getFeature()->getType()==classifier;});"/>
      </eAnnotations>
      <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;CompoundValue> otherCompoundValue = std::dynamic_pointer_cast&lt;CompoundValue>(otherValue);&#xD;&#xA;&#x9;bool isEqual = (otherCompoundValue != nullptr);&#xD;&#xA;    if (isEqual)&#xD;&#xA;    {&#xD;&#xA;        isEqual = StructuredValueImpl::equals(otherValue)&#xD;&#xA;                &amp;&amp; otherCompoundValue->getFeatureValues()->size() == this->getFeatureValues()->size();&#xD;&#xA;&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while (isEqual &amp;&amp; i &lt; this->getFeatureValues()->size())&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;FeatureValue> thisFeatureValue = this->getFeatureValues()->at(i);&#xD;&#xA;&#xD;&#xA;            bool matched = false;&#xD;&#xA;            unsigned int j = 0;&#xD;&#xA;            while (!matched &amp;&amp; j &lt; otherCompoundValue->getFeatureValues()->size())&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;FeatureValue> otherFeatureValue = otherCompoundValue->getFeatureValues()->at(j);&#xD;&#xA;                if (thisFeatureValue->getFeature() == otherFeatureValue->getFeature())&#xD;&#xA;                {&#xD;&#xA;                    matched = thisFeatureValue->hasEqualValues(otherFeatureValue);&#xD;&#xA;                }&#xD;&#xA;                j = j + 1;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            isEqual = matched;&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::string buffer = &quot;(&quot; + this->objectId() + &quot;:&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getTypes();&#xD;&#xA;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while(i &lt; types->size())&#xD;&#xA;    {&#xD;&#xA;        buffer = buffer + &quot; &quot; + types->at(i)->getName();&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    unsigned int k = 0;&#xD;&#xA;    while(k &lt; this->getFeatureValues()->size())&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;FeatureValue> featureValue = this->getFeatureValues()->at(k);&#xD;&#xA;        char buf [11];&#xD;&#xA;        std::sprintf(buf, &quot;%d&quot;, featureValue->getPosition());&#xD;&#xA;        buffer = buffer + &quot;\n\t\t&quot; + featureValue->getFeature()->getName() + &quot;[&quot; + std::string(buf) + &quot;]  =&quot;;&#xD;&#xA;&#xD;&#xA;        unsigned int j = 0;&#xD;&#xA;        while(j &lt; featureValue->getValues()->size())&#xD;&#xA;        {&#xD;&#xA;            buffer = buffer + &quot; &quot; + featureValue->getValues()->at(j)->toString();&#xD;&#xA;            j = j + 1;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        k = k + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return buffer + &quot;)&quot;;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="retrieveFeatureValue" ordered="false" lowerBound="1" eType="#//FeatureValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    std::shared_ptr&lt;fUML::FeatureValue> featureValue = nullptr;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while(featureValue == nullptr &amp;&amp; i &lt; this->getFeatureValues()->size())&#xD;&#xA;    {&#xD;&#xA;        if(this->getFeatureValues()->at(i)->getFeature() == feature)&#xD;&#xA;        {&#xD;&#xA;            featureValue = this->getFeatureValues()->at(i);&#xD;&#xA;        }&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;    return featureValue;"/>
      </eAnnotations>
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
    </eOperations>
    <eOperations name="assignFeatureValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;fUML::FeatureValue> featureValue = this->retrieveFeatureValue(feature);&#xD;&#xA;    if(featureValue == nullptr)&#xD;&#xA;    {&#xD;&#xA;        featureValue = FUMLFactory::eInstance()->createFeatureValue();&#xD;&#xA;        this->getFeatureValues()->push_back(featureValue);&#xD;&#xA;    }&#xD;&#xA;    featureValue->setFeature(feature);&#xD;&#xA;    std::vector&lt;std::shared_ptr&lt;fUML::Value>>::iterator i;&#xD;&#xA;    for(i=values->begin();i!=values->end();++i)&#xD;&#xA;    {&#xD;&#xA;    &#x9;featureValue->getValues()->push_back(*i);&#xD;&#xA;    }&#xD;&#xA;    featureValue->setPosition(position);"/>
      </eAnnotations>
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
      <eParameters name="values" ordered="false" upperBound="-1" eType="#//Value"/>
      <eParameters name="position" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="retrieveFeatureValues" ordered="false" upperBound="-1" eType="#//FeatureValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=" return this->getFeatureValues();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="featureValues" ordered="false"
        upperBound="-1" eType="#//FeatureValue" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FeatureValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;&#xD;&#xA;"/>
    </eAnnotations>
    <eOperations name="hasEqualValues" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool equal = true;&#xD;&#xA;&#xD;&#xA;    if(this->getValues()->size() != other->getValues()->size())&#xD;&#xA;    {&#xD;&#xA;        equal = false;&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::StructuralFeature> feature = this->getFeature();&#xD;&#xA;        if(feature->getIsOrdered())&#xD;&#xA;        {&#xD;&#xA;            unsigned int i = 0;&#xD;&#xA;            while(equal &amp;&amp; (i &lt; this->getValues()->size()))&#xD;&#xA;            {&#xD;&#xA;                equal = this->getValues()->at(i)->equals(other->getValues()->at(i));&#xD;&#xA;                i = i + 1;&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;FeatureValue> otherFeatureValues(FUMLFactory::eInstance()->createFeatureValue());&#xD;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;Value> > values = other->getValues();&#xD;&#xA;            for(unsigned int i = 0; i &lt; values->size(); i++)&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;Value> value = values->at(i);&#xD;&#xA;                otherFeatureValues->getValues()->push_back(value);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            unsigned int i = 0;&#xD;&#xA;            while(equal &amp;&amp; (i &lt; this->getValues()->size()))&#xD;&#xA;            {&#xD;&#xA;                bool matched = false;&#xD;&#xA;                unsigned int j = 0;&#xD;&#xA;                while(!matched &amp;&amp; (j &lt; otherFeatureValues->getValues()->size()))&#xD;&#xA;                {&#xD;&#xA;                    if(this->getValues()->at(i)->equals(otherFeatureValues->getValues()->at(j)))&#xD;&#xA;                    {&#xD;&#xA;                        matched = true;&#xD;&#xA;                        otherFeatureValues->getValues()->erase(otherFeatureValues->getValues()->begin() + j);&#xD;&#xA;                    }&#xD;&#xA;                    j = j + 1;&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                equal = matched;&#xD;&#xA;                i = i + 1;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return equal;"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//FeatureValue"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="values" ordered="false"
        upperBound="-1" eType="#//Value" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="position" ordered="false"
        eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt" defaultValueLiteral="0"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="feature" ordered="false"
        lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PrimitiveValue" abstract="true" eSuperTypes="#//Value">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::PrimitiveType> type = this->getType();&#xD;&#xA;&#x9;if (type != nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(type));&#xD;&#xA;&#x9;}&#xD;&#xA;    return types;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="UnlimitedNaturalValue" eSuperTypes="#//PrimitiveValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/IntegerValue.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralUnlimitedNatural.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralUnlimitedNatural> literal = uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;    literal->setType(this->getType());&#xD;&#xA;    literal->setValue(this->getValue());&#xD;&#xA;    return literal;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;//generated from body annotation&#xD;&#xA;&#x9;bool isEqual = false;&#xD;&#xA;&#xD;&#xA;    if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::FUMLPackage::UNLIMITEDNATURALVALUE_CLASS)&#xD;&#xA;    {&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::UnlimitedNaturalValue> unValue = std::dynamic_pointer_cast&lt;UnlimitedNaturalValue>(otherValue);&#xD;&#xA;        isEqual = (unValue->getValue() == this->getValue());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    std::string stringValue = &quot;*&quot;;&#xD;&#xA;&#xD;&#xA;    if(this->getValue() >= 0)&#xD;&#xA;    {&#xD;&#xA;        auto integerValue = FUMLFactory::eInstance()->createIntegerValue();&#xD;&#xA;        integerValue->setValue(this->getValue());&#xD;&#xA;        stringValue = integerValue->toString();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return stringValue;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StringValue" eSuperTypes="#//PrimitiveValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralString.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralString> literal = uml::UmlFactory::eInstance()->createLiteralString_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;&#x9;literal->setType(this->getType());&#xD;&#xA;    literal->setValue(this->getValue());&#xD;&#xA;    return literal;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="bool isEqual = false;&#xD;&#xA;    &#xD;&#xA;&#x9;std::shared_ptr&lt;StringValue> otherStringValue = std::dynamic_pointer_cast&lt;StringValue>(otherValue);&#xD;&#xA;    if(otherStringValue != nullptr)&#xD;&#xA;    {&#xD;&#xA;        isEqual = otherStringValue->getValue() == this->getValue();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getValue();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="IntegerValue" eSuperTypes="#//PrimitiveValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;cstdio>&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralInteger.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralInteger> literal = uml::UmlFactory::eInstance()->createLiteralInteger_in_Namespace(std::shared_ptr&lt;uml::Classifier>());&#xD;&#xA;&#xD;&#xA;    literal->setType(this->getType());&#xD;&#xA;    literal->setValue(this->getValue());&#xD;&#xA;&#xD;&#xA;    return literal;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool isEqual = false;&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;    if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::FUMLPackage::INTEGERVALUE_CLASS)&#xD;&#xA;    {&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;IntegerValue> otherIntegerValue = std::dynamic_pointer_cast&lt;IntegerValue>(otherValue);&#xD;&#xA;        isEqual = (otherIntegerValue->getValue() == this->getValue());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    char buf [11];&#xD;&#xA;    std::sprintf(buf, &quot;%d&quot;, this->getValue());&#xD;&#xA;    return std::string(buf);"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RealValue" eSuperTypes="#//PrimitiveValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;sstream>&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralReal.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralReal> literal = uml::UmlFactory::eInstance()->createLiteralReal_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;&#x9;literal->setType(this->getType());&#xD;&#xA;    literal->setValue(this->getValue());&#xD;&#xA;    return literal;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool isEqual = false;&#xD;&#xA;&#xD;&#xA;    if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::FUMLPackage::REALVALUE_CLASS)&#xD;&#xA;    {&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;RealValue> otherRealValue = std::dynamic_pointer_cast&lt;RealValue>(otherValue);&#xD;&#xA;        isEqual = (otherRealValue->getValue() == this->getValue());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    std::ostringstream o;&#xD;&#xA;     if (!(o &lt;&lt; this->getValue()))&#xD;&#xA;       return &quot;&quot;;&#xD;&#xA;     return o.str();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EFloat"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="BooleanValue" eSuperTypes="#//PrimitiveValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralBoolean> literal = uml::UmlFactory::eInstance()->createLiteralBoolean_in_Namespace(std::shared_ptr&lt;uml::Class>());    &#xD;&#xA;    literal->setType(this->getType());&#xD;&#xA;    literal->setValue(this->isValue());&#xD;&#xA;    return literal;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool isEqual = false;&#xD;&#xA;&#xD;&#xA;&#x9;if(otherValue != nullptr &amp;&amp; otherValue->eClass()->getClassifierID() == fUML::FUMLPackage::BOOLEANVALUE_CLASS)&#xD;&#xA;    {&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;BooleanValue> otherBooleanValue = std::dynamic_pointer_cast&lt;BooleanValue>(otherValue);&#xD;&#xA;    &#x9;isEqual = otherBooleanValue->isValue() == this->isValue();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    std::string stringValue = &quot;false&quot;;&#xD;&#xA;&#xD;&#xA;    if(this->isValue())&#xD;&#xA;    {&#xD;&#xA;        stringValue = &quot;true&quot;;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return stringValue;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="value" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExtensionalValue" abstract="true" eSuperTypes="#//CompoundValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="destroy" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if(this->getLocus() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getLocus()->remove(getThisExtensionalValuePtr());&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
        eType="#//Locus"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExtensionalValueList" eSuperTypes="#//ExtensionalValue">
    <eOperations name="getValue" ordered="false" lowerBound="1" eType="#//ExtensionalValue"/>
    <eOperations name="addValue" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//ExtensionalValue"/>
    </eOperations>
    <eOperations name="addValue" ordered="false" lowerBound="1">
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//ExtensionalValue"/>
      <eParameters name="i" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="setValue" ordered="false" lowerBound="1" eType="#//Value">
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//ExtensionalValue"/>
      <eParameters name="i" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="removeValue" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eParameters name="i" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Evaluation" abstract="true" eSuperTypes="#//SemanticVisitor">
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="specification" ordered="false"
        lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="locus" ordered="false"
        lowerBound="1" eType="#//Locus"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralEvaluation" abstract="true" eSuperTypes="#//Evaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;&#xD;&#xA;#include &quot;uml/PrimitiveType.hpp&quot;&#xD;&#xA;#include &quot;uml/Type.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getType" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//PrimitiveType">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::PrimitiveType> type = std::dynamic_pointer_cast&lt;uml::PrimitiveType>(this->getSpecification()->getType());&#xD;&#xA;&#xD;&#xA;    if(type == nullptr)&#xD;&#xA;    {&#xD;&#xA;        type = this->getLocus()->getFactory()->getBuiltInType(builtInTypeName);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return type;"/>
      </eAnnotations>
      <eParameters name="builtInTypeName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InstanceValueEvaluation" eSuperTypes="#//Evaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;fUML/DataValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/EnumerationValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/Execution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Executor.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Object.hpp&quot;&#xD;&#xA;#include &quot;fUML/Reference.hpp&quot;&#xD;&#xA;#include &quot;fUML/Value.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &quot;uml/DataType.hpp&quot;&#xD;&#xA;#include &quot;uml/Enumeration.hpp&quot;&#xD;&#xA;#include &quot;uml/EnumerationLiteral.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceSpecification.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xD;&#xA;#include &quot;uml/Slot.hpp&quot;&#xD;&#xA;#include &quot;uml/StructuralFeature.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::InstanceSpecification> instance = (std::dynamic_pointer_cast&lt;uml::InstanceValue>(this->getSpecification()))->getInstance();&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = instance->getClassifier();&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::Classifier> myType = types->at(0);&#xD;&#xA;&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;(&quot;[evaluate] type = &quot; + myType->getName())&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Value> value;&#xD;&#xA;    std::shared_ptr&lt;uml::EnumerationLiteral> literal = std::dynamic_pointer_cast&lt;uml::EnumerationLiteral>(instance);&#xD;&#xA;    if(literal != nullptr)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;EnumerationValue> enumerationValue(FUMLFactory::eInstance()->createEnumerationValue());&#xD;&#xA;        enumerationValue->setType(std::dynamic_pointer_cast&lt;uml::Enumeration>(myType));&#xD;&#xA;        enumerationValue->setLiteral(literal);&#xD;&#xA;        value = enumerationValue;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;StructuredValue> structuredValue = nullptr;&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::DataType> type = std::dynamic_pointer_cast&lt;uml::DataType>(myType);&#xD;&#xA;        if(type != nullptr)&#xD;&#xA;        {&#xD;&#xA;            // Debug.println(&quot;[evaluate] Type is a data type.&quot;);&#xD;&#xA;        &#x9;std::shared_ptr&lt;DataValue> dataValue(FUMLFactory::eInstance()->createDataValue());&#xD;&#xA;            dataValue->setType(type);&#xD;&#xA;            structuredValue = dataValue;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Object> object = nullptr;&#xD;&#xA;        &#x9;std::shared_ptr&lt;uml::Behavior> behavior = std::dynamic_pointer_cast&lt;uml::Behavior>(myType);&#xD;&#xA;            if(behavior != nullptr)&#xD;&#xA;            {&#xD;&#xA;                // Debug.println(&quot;[evaluate] Type is a behavior.&quot;);&#xD;&#xA;                object = this->getLocus()->getFactory()->createExecution(behavior, nullptr);&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                // Debug.println(&quot;[evaluate] Type is a class.&quot;);&#xD;&#xA;                object = FUMLFactory::eInstance()->createObject();&#xD;&#xA;                for(unsigned int i = 0; i &lt; types->size(); i++)&#xD;&#xA;                {&#xD;&#xA;                &#x9;std::shared_ptr&lt;uml::Classifier> type = types->at(i);&#xD;&#xA;                    object->getTypes()->push_back(std::dynamic_pointer_cast&lt;uml::Class>(type));&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            this->getLocus()->add(object);&#xD;&#xA;&#xD;&#xA;            std::shared_ptr&lt;Reference> reference(FUMLFactory::eInstance()->createReference());&#xD;&#xA;            reference->setReferent(object);&#xD;&#xA;            structuredValue = reference;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        structuredValue->createFeatureValues();&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;uml::Slot> > instanceSlots = instance->getSlot();&#xD;&#xA;        for(unsigned int i = 0; i &lt; instanceSlots->size(); i++)&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;uml::Slot> slot = instanceSlots->at(i);&#xD;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;Value> > values(new Bag&lt;Value>());&#xD;&#xA;&#xD;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;uml::ValueSpecification> > slotValues = slot->getValue();&#xD;&#xA;            for(unsigned int j = 0; j &lt; slotValues->size(); j++)&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;uml::ValueSpecification> slotValue = slotValues->at(j);&#xD;&#xA;                values->push_back(this->getLocus()->getExecutor()->evaluate(slotValue));&#xD;&#xA;            }&#xD;&#xA;            structuredValue->assignFeatureValue(slot->getDefiningFeature(), values, 0);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        value = structuredValue;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return value;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralBooleanEvaluation" eSuperTypes="#//LiteralEvaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/BooleanValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralBoolean> literal = std::dynamic_pointer_cast&lt;uml::LiteralBoolean>(getSpecification());&#xD;&#xA;&#x9;std::shared_ptr&lt;BooleanValue> booleanValue(FUMLFactory::eInstance()->createBooleanValue());&#xD;&#xA;    booleanValue->setType(this->getType(&quot;Boolean&quot;));&#xD;&#xA;    booleanValue->setValue(literal->getValue());&#xD;&#xA;    return booleanValue;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralIntegerEvaluation" eSuperTypes="#//LiteralEvaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/IntegerValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralInteger.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralInteger> literal = std::dynamic_pointer_cast&lt;uml::LiteralInteger>(getSpecification());&#xD;&#xA;&#x9;std::shared_ptr&lt;IntegerValue> integerValue(FUMLFactory::eInstance()->createIntegerValue());&#xD;&#xA;    integerValue ->setType(this->getType(&quot;Integer&quot;));&#xD;&#xA;    integerValue ->setValue(literal->getValue());&#xD;&#xA;&#xD;&#xA;    return integerValue ;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralNullEvaluation" eSuperTypes="#//LiteralEvaluation">
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return nullptr;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralStringEvaluation" eSuperTypes="#//LiteralEvaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/StringValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralString.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralString> literal = std::dynamic_pointer_cast&lt;uml::LiteralString>(getSpecification());&#xD;&#xA;&#x9;std::shared_ptr&lt;StringValue> stringValue(FUMLFactory::eInstance()->createStringValue());&#xD;&#xA;    stringValue->setType(this->getType(&quot;String&quot;));&#xD;&#xA;    stringValue->setValue(literal->getValue());&#xD;&#xA;    return stringValue ;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralRealEvaluation" eSuperTypes="#//LiteralEvaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/RealValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralReal.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralReal> literal = std::dynamic_pointer_cast&lt;uml::LiteralReal>(this->getSpecification());&#xD;&#xA;&#x9;std::shared_ptr&lt;RealValue> realValue(fUML::FUMLFactory::eInstance()->createRealValue());&#xD;&#xA;&#x9;realValue->setType(this->getType(&quot;Real&quot;));&#xD;&#xA;&#x9;realValue->setValue(literal->getValue());&#xD;&#xA;&#x9;return realValue;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LiteralUnlimitedNaturalEvaluation" eSuperTypes="#//LiteralEvaluation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/UnlimitedNaturalValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralUnlimitedNatural.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="evaluate" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::LiteralUnlimitedNatural> literal = std::dynamic_pointer_cast&lt;uml::LiteralUnlimitedNatural>(getSpecification());&#xD;&#xA;&#x9;std::shared_ptr&lt;UnlimitedNaturalValue> unlimitedNaturalValue(FUMLFactory::eInstance()->createUnlimitedNaturalValue());&#xD;&#xA;    unlimitedNaturalValue->setType(this->getType(&quot;UnlimitedNatural&quot;));&#xD;&#xA;    unlimitedNaturalValue->setValue(literal->getValue());&#xD;&#xA;    return unlimitedNaturalValue;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Link" eSuperTypes="#//ExtensionalValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xD;&#xA;#include &quot;uml/Property.hpp&quot;&#xD;&#xA;#include &quot;uml/Association.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;&#xD;&#xA;&#x9;if( this->getType() != nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(this->getType()));&#xD;&#xA;&#x9;}&#xD;&#xA;    return types;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isMatchingLink" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;uml::Property> > ends = this->getType()->getMemberEnd();&#xD;&#xA;&#xD;&#xA;&#x9;bool matches = true;&#xD;&#xA;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;while (matches &amp;&amp; i &lt; ends->size()) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Property> otherEnd = ends->at(i);&#xD;&#xA;&#x9;&#x9;if (otherEnd != end&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&amp;&amp; !this->retrieveFeatureValue(otherEnd)->getValues()->at(0)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;->equals(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;link->retrieveFeatureValue(otherEnd)->getValues()->at(0))) {&#xD;&#xA;&#x9;&#x9;&#x9;matches = false;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;i = i + 1;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return matches;"/>
      </eAnnotations>
      <eParameters name="link" eType="#//ExtensionalValue"/>
      <eParameters name="end" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Property"/>
    </eOperations>
    <eOperations name="addTo">
      <eParameters name="locus" eType="#//Locus">
        <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
      </eParameters>
    </eOperations>
    <eOperations name="getOtherFeatureValues" upperBound="-1" eType="#//FeatureValue">
      <eParameters name="extent" upperBound="-1" eType="#//ExtensionalValue"/>
      <eParameters name="end" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Property"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EnumerationValue" eSuperTypes="#//Value">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/EnumerationValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/Enumeration.hpp&quot;&#xD;&#xA;#include &quot;uml/EnumerationLiteral.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceSpecification.hpp&quot;&#xD;&#xA;#include &quot;uml/InstanceValue.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="specify" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::InstanceValue> instanceValue(uml::UmlFactory::eInstance()->createInstanceValue_in_Namespace(std::shared_ptr&lt;uml::Class>()));&#xD;&#xA;    //Remark: instance is so defined in the specification, but even there is not used.&#xD;&#xA;    //uml::InstanceSpecification * instance = uml::UmlFactory::eInstance()->createInstanceSpecification(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;&#xD;&#xA;    instanceValue->setType(this->getType());&#xD;&#xA;    instanceValue->setInstance(this->getLiteral());&#xD;&#xA;&#xD;&#xA;    return instanceValue;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="bool isEqual = false;&#xD;&#xA;&#x9;std::shared_ptr&lt;fUML::EnumerationValue> value = std::dynamic_pointer_cast&lt;fUML::EnumerationValue>(otherValue);&#xD;&#xA;    if(value != nullptr)&#xD;&#xA;    {&#xD;&#xA;        isEqual = (value->getLiteral() == this->getLiteral());&#xD;&#xA;    }&#xD;&#xA;    return isEqual;"/>
      </eAnnotations>
      <eParameters name="otherValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::shared_ptr&lt;fUML::Value>(FUMLFactory::eInstance()->createEnumerationValue());"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="toString" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return this->getLiteral()->getName();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;    types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(this->getType()));&#xD;&#xA;    return types;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="literal" ordered="false"
        lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//EnumerationLiteral"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Enumeration"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DataValue" eSuperTypes="#//CompoundValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/DataValue.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/CompoundValue.hpp&quot;&#xD;&#xA;#include &quot;uml/DataType.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::shared_ptr&lt;fUML::Value>(FUMLFactory::eInstance()->createDataValue());"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTypes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::Classifier> > types(new Bag&lt;uml::Classifier>());&#xD;&#xA;    types->push_back(std::dynamic_pointer_cast&lt;uml::Classifier>(this->getType()));&#xD;&#xA;    return types;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//DataType"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DispatchStrategy" eSuperTypes="#//SemanticStrategy">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Bag.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="dispatch" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return object->getLocus()->getFactory()->createExecution(this->retrieveMethod(object,operation),object);"/>
      </eAnnotations>
      <eParameters name="object" ordered="false" lowerBound="1" eType="#//Object"/>
      <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
    </eOperations>
    <eOperations name="retrieveMethod" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return operation->getMethod()->front();"/>
      </eAnnotations>
      <eParameters name="object" ordered="false" lowerBound="1" eType="#//Object"/>
      <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
    </eOperations>
    <eOperations name="retrieveName" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return &quot;dispatch&quot;;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RedefinitionBasedDispatchStrategy" eSuperTypes="#//DispatchStrategy">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;uml/NamedElement.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/Operation.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="operationsMatch" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;//#include &quot;NamedElement.hpp&quot;&#xD;&#xA;&#x9;//#include &quot;Class.hpp&quot;&#xD;&#xA;&#x9;//#include &quot;Operation.hpp&quot;&#xD;&#xA;&#x9;//&#xD;&#xA;&#x9;bool matches = false;&#xD;&#xA;&#x9;if(ownedOperation == baseOperation)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;matches = true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;    {&#xD;&#xA;&#x9;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;&#x9;while(!matches &amp;&amp; i &lt; ownedOperation->getRedefinedOperation()->size())&#xD;&#xA;        {&#xD;&#xA;&#x9;&#x9;&#x9;matches = this->operationsMatch(ownedOperation->getRedefinedOperation()->at(i), baseOperation);&#xD;&#xA;&#x9;&#x9;&#x9;i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#x9;return matches;"/>
      </eAnnotations>
      <eParameters name="ownedOperation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
      <eParameters name="baseOperation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
    </eOperations>
    <eOperations name="retrieveMethod" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::Behavior> method = nullptr;&#xD;&#xA;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;while(method == nullptr &amp;&amp; (i &lt; object->getTypes()->size()))&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Class> type = std::dynamic_pointer_cast&lt;uml::Class>(object->getTypes()->at(i));&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::NamedElement> > members = type->getMember();&#xD;&#xA;&#x9;&#x9;unsigned int j = 0;&#xD;&#xA;&#x9;&#x9;while(method == nullptr &amp;&amp; (j &lt; members->size()))&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::NamedElement> member = members->at(j);&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Operation> memberOperation = std::dynamic_pointer_cast&lt;uml::Operation>(member);&#xD;&#xA;&#x9;&#x9;&#x9;if(memberOperation != nullptr)&#xD;&#xA;&#x9;&#x9;&#x9;{&#x9;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(this->operationsMatch(memberOperation, operation))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;method = memberOperation->getMethod()->at(0);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;j = j + 1;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;i = i + 1;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return method;"/>
      </eAnnotations>
      <eParameters name="object" ordered="false" lowerBound="1" eType="#//Object"/>
      <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Object" eSuperTypes="#//ExtensionalValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/DispatchStrategy.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="startBehavior" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if(this->getObjectActivation() == nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->setObjectActivation(std::shared_ptr&lt;ObjectActivation>(fUML::FUMLFactory::eInstance()->createObjectActivation()));&#xD;&#xA;        this->getObjectActivation()->setObject(getThisObjectPtr());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->getObjectActivation()->startBehavior(classifier, inputs);"/>
      </eAnnotations>
      <eParameters name="classifier" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
      <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="dispatch" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="static std::shared_ptr&lt;DispatchStrategy> strategy = std::dynamic_pointer_cast&lt;DispatchStrategy>(this->getLocus()->getFactory()->getStrategy(&quot;dispatch&quot;));&#xD;&#xA;&#x9;return strategy->dispatch(getThisObjectPtr(), operation);"/>
      </eAnnotations>
      <eParameters name="operation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation"/>
    </eOperations>
    <eOperations name="send" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if( this->getObjectActivation() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getObjectActivation()->send(signalInstance);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
    <eOperations name="_register" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if( this->getObjectActivation() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getObjectActivation()->_register(accepter);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//EventAccepter"/>
    </eOperations>
    <eOperations name="unregister" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if( this->getObjectActivation() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getObjectActivation()->unregister(accepter);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//EventAccepter"/>
    </eOperations>
    <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::shared_ptr&lt;fUML::Value>(FUMLFactory::eInstance()->createObject());"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="destroy" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if(this->getObjectActivation() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getObjectActivation()->stop();&#xD;&#xA;        this->setObjectActivation(nullptr);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->getTypes()->clear();&#xD;&#xA;    ExtensionalValueImpl::destroy();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="types" ordered="false"
        upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier">
      <eAnnotations>
        <details key="note" value="This Property is a Class in the OMG standard"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="objectActivation" ordered="false"
        eType="#//ObjectActivation" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Execution" abstract="true" eSuperTypes="#//Object">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;algorithm>&#xD;&#xA;#include &lt;uml/Parameter.hpp>&#xD;&#xA;#include &lt;uml/ParameterDirectionKind.hpp>&#xD;&#xA;#include &lt;fUML/ParameterValue.hpp>&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/Classifier.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;&#xD;&#xA;#include &quot;fUML/impl/ObjectImpl.hpp&quot;&#xD;&#xA;"/>
    </eAnnotations>
    <eOperations name="execute" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setParameterValue" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ParameterValue> existingParameterValue = this->getParameterValue(parameterValue->getParameter());&#xD;&#xA;&#xD;&#xA;&#x9;if (existingParameterValue == nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;this->getParameterValues()->push_back(parameterValue);&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;existingParameterValue->getValues()->clear(); // memory Leak&#xD;&#xA;&#x9;&#x9;auto vec = parameterValue->getValues();&#xD;&#xA;&#x9;&#x9;existingParameterValue->getValues()->insert(existingParameterValue->getValues()->end(),vec->begin(),vec->end());&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="parameterValue" ordered="false" lowerBound="1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="getParameterValue" ordered="false" lowerBound="1" eType="#//ParameterValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ParameterValue> parameterValue = nullptr;&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::ParameterValue> > list = this->getParameterValues();&#xD;&#xA;&#x9;std::vector&lt;std::shared_ptr&lt;fUML::ParameterValue>>::iterator it = std::find_if(list->begin(), list->end(), [parameter] (std::shared_ptr&lt;ParameterValue> p) { return p->getParameter() == parameter; } );&#xD;&#xA;    if(it!= this->getParameterValues()->end() )&#xD;&#xA;    {&#xD;&#xA;        parameterValue  = *it;&#xD;&#xA;    }&#xD;&#xA;    return parameterValue;"/>
      </eAnnotations>
      <eParameters name="parameter" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter"/>
    </eOperations>
    <eOperations name="getOutputParameterValues" ordered="false" upperBound="-1" eType="#//ParameterValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;ParameterValue> > outputs(new Bag&lt;ParameterValue>());&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ParameterValue> > outputParameterValueList = this->getParameterValues();&#xD;&#xA;    for (std::shared_ptr&lt;ParameterValue> parameterValue : *outputParameterValueList)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::Parameter> parameter = parameterValue->getParameter();&#xD;&#xA;        if((parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xD;&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::OUT)&#xD;&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::RETURN))&#xD;&#xA;        {&#xD;&#xA;            outputs->push_back(parameterValue);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return outputs;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getBehavior" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Behavior">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::dynamic_pointer_cast&lt;uml::Behavior>(this->getTypes()->front());"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="context" ordered="false"
        lowerBound="1" eType="#//Object"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameterValues" ordered="false"
        upperBound="-1" eType="#//ParameterValue" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ParameterValue">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="parameter" ordered="false"
        lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Parameter"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="values" ordered="false"
        upperBound="-1" eType="#//Value" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OpaqueBehaviorExecution" abstract="true"
      eSuperTypes="#//Execution">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xD;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="doBody" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
      <eParameters name="inputParameters" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
      <eParameters name="outputParameters" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="execute" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[execute] Opaque behavior &quot; &lt;&lt; this->getBehavior()->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ParameterValue> > inputs(new Bag&lt;ParameterValue>());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ParameterValue> > outputs(new Bag&lt;ParameterValue>());&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::Parameter> > parameterList = this->getBehavior()->getOwnedParameter();&#xD;&#xA;    for(std::shared_ptr&lt;uml::Parameter> parameter : *parameterList) &#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;parameter->getName()&lt;&lt; &quot; Parameter Direction: &quot; &lt;&lt; parameter->getDirection()&lt;&lt;std::endl;)&#xD;&#xA;        if ((parameter->getDirection() == uml::ParameterDirectionKind::IN)&#xD;&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::INOUT)) &#xD;&#xA;        {&#xD;&#xA;            inputs->push_back(this->getParameterValue(parameter));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if ((parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xD;&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::OUT)&#xD;&#xA;                || (parameter->getDirection() == uml::ParameterDirectionKind::RETURN)) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;ParameterValue> parameterValue(fUML::FUMLFactory::eInstance()->createParameterValue());&#xD;&#xA;            parameterValue->setParameter(parameter);&#xD;&#xA;&#xD;&#xA;            if(parameter->getDirection() != uml::ParameterDirectionKind::INOUT)&#xD;&#xA;            {&#xD;&#xA;                //Otherwise the input parameter is removed (memory leak).&#xD;&#xA;                this->setParameterValue(parameterValue);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            outputs->push_back(parameterValue);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->doBody(inputs, outputs);"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorExecutionActivity"/>
  <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1"/>
  <eClassifiers xsi:type="ecore:EClass" name="EventDispatchLoop"/>
  <eClassifiers xsi:type="ecore:EClass" name="EventAccepter" abstract="true">
    <eOperations name="accept" ordered="false" lowerBound="1">
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
    <eOperations name="match" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="SignalInstance" eSuperTypes="#//CompoundValue">
    <eStructuralFeatures xsi:type="ecore:EReference" name="type" ordered="false" lowerBound="1"
        eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Signal"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClassifierBehaviorExecution">
    <eOperations name="execute" ordered="false" lowerBound="1">
      <eParameters name="classifier" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
      <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1"/>
    <eOperations name="_startObjectBehavior" ordered="false" lowerBound="1"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="execution" ordered="false"
        lowerBound="1" eType="#//Execution"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classifier" ordered="false"
        lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="objectActivation" ordered="false"
        eType="#//ObjectActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ClassifierBehaviorExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="startBehavior" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->_startObjectBehavior();&#xD;&#xA;&#xD;&#xA;&#x9;if (classifier == nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[startBehavior] Starting behavior for all classifiers...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;// *** Start all classifier behaviors concurrently. ***&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Classifier> > types = this->getObject()->getTypes();&#xD;&#xA;        std::vector&lt;std::shared_ptr&lt;uml::Classifier>>::iterator i;&#xD;&#xA;        for (i = types->begin(); i!=types->end(); ++i) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;uml::Class> type = std::dynamic_pointer_cast&lt;uml::Class> (*i);&#xD;&#xA;        &#x9;if ((std::dynamic_pointer_cast&lt;uml::Behavior>(type) != nullptr) || (type->getClassifierBehavior() != nullptr))&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;fUML::ParameterValue> > parameterValue(new Bag&lt;fUML::ParameterValue>());&#xD;&#xA;            &#x9;this->startBehavior(type, parameterValue);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[startBehavior] Starting behavior for &quot;&lt;&lt; classifier->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;bool notYetStarted = true;&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while (notYetStarted &amp;&amp; i &lt; this->getClassifierBehaviorExecutions()->size())&#xD;&#xA;        {&#xD;&#xA;        &#x9;notYetStarted = (this->getClassifierBehaviorExecutions()->at(i)->getClassifier() != classifier);&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (notYetStarted)&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;ClassifierBehaviorExecution> newExecution(fUML::FUMLFactory::eInstance()->createClassifierBehaviorExecution());&#xD;&#xA;        &#x9;newExecution->setObjectActivation(getThisObjectActivationPtr());&#xD;&#xA;        &#x9;this->getClassifierBehaviorExecutions()->push_back(newExecution);&#xD;&#xA;        &#x9;//newExecution->execute(classifier, inputs);&#xD;&#xA;        }&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="classifier" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Class"/>
      <eParameters name="inputs" ordered="false" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="stop" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;ClassifierBehaviorExecution> > classifierBehaviorExecutions = this->getClassifierBehaviorExecutions();&#xD;&#xA;    for (unsigned int i = 0; i &lt; classifierBehaviorExecutions->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ClassifierBehaviorExecution> classifierBehaviorExecution = classifierBehaviorExecutions->at(i);&#xD;&#xA;        classifierBehaviorExecution->terminate();&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="_register" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[register] object = &quot; &lt;&lt; this->getObject()&lt;&lt;std::endl;)&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[register] accepter = &quot; &lt;&lt; accepter&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    this->getWaitingEventAccepters()->push_back(accepter);"/>
      </eAnnotations>
      <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//EventAccepter"/>
    </eOperations>
    <eOperations name="unregister" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[unregister] object = &quot; &lt;&lt; this->getObject()&lt;&lt;std::endl;)&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[unregister] accepter = &quot; &lt;&lt; accepter&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    bool notFound = true;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (notFound &amp;&amp; i &lt; this->getWaitingEventAccepters()->size()) {&#xD;&#xA;        if (this->getWaitingEventAccepters()->at(i) == accepter) {&#xD;&#xA;            this->getWaitingEventAccepters()->erase(this->getWaitingEventAccepters()->begin() + i);&#xD;&#xA;            notFound = false;&#xD;&#xA;        }&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="accepter" ordered="false" lowerBound="1" eType="#//EventAccepter"/>
    </eOperations>
    <eOperations name="send" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->getEventPool()->push_back(std::dynamic_pointer_cast&lt;fUML::SignalInstance>(signalInstance->copy()));&#xD;&#xA;    //_send(new ArrivalSignal());"/>
      </eAnnotations>
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
    <eOperations name="dispatchNextEvent" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=""/>
      </eAnnotations>
    </eOperations>
    <eOperations name="retrieveNextEvent" ordered="false" lowerBound="1" eType="#//SignalInstance">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
    </eOperations>
    <eOperations name="_startObjectBehavior" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="//this->behavior._startObjectBehavior();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="_send" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=""/>
      </eAnnotations>
      <eParameters name="signal" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EJavaObject"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="waitingEventAccepters"
        ordered="false" upperBound="-1" eType="#//EventAccepter"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="eventPool" ordered="false"
        upperBound="-1" eType="#//SignalInstance" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="object" ordered="false"
        lowerBound="1" eType="#//Object"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="classifierBehaviorExecutions"
        ordered="false" upperBound="-1" eType="#//ClassifierBehaviorExecution" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="GetNextEventStrategy" abstract="true"
      eSuperTypes="#//SemanticStrategy">
    <eOperations name="retrieveNextEvent" ordered="false" lowerBound="1" eType="#//SignalInstance">
      <eParameters name="objectActivation" ordered="false" eType="#//ObjectActivation"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FIFOGetNextEventStrategy" eSuperTypes="#//GetNextEventStrategy"/>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityNodeActivationGroup">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityEdgeInstance.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityNodeActivationGroup.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityParameterNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ControlNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ControlNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLPackage.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;&#xD;&#xA;#include &quot;fUML/PinActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/Action.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityEdge.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;&#xD;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xD;&#xA;"/>
    </eAnnotations>
    <eOperations name="run" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="for (unsigned int i = 0; i &lt; activations->size(); i++)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;ActivityNodeActivation> activation = activations->at(i);&#xD;&#xA;        activation->run();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] Checking for enabled nodes...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;ActivityNodeActivation> > enabledActivations(new Bag&lt;ActivityNodeActivation>());&#xD;&#xA;&#xD;&#xA;    for (unsigned int i = 0; i &lt; activations->size(); i++)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityNodeActivation> activation = activations->at(i);&#xD;&#xA;&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] Checking node &quot; &lt;&lt; activation->getNode()->getName()&lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;        const int class_id = activation->eClass()->getClassifierID();&#xD;&#xA;        if(!(class_id == fUML::FUMLPackage::INPUTPINACTIVATION_CLASS ||  class_id == fUML::FUMLPackage::OUTPUTPINACTIVATION_CLASS || class_id ==fUML::FUMLPackage::EXPANSIONNODEACTIVATION_CLASS))&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;fUML::ActivityEdgeInstance> > edges = activation->getIncomingEdges();&#xD;&#xA;            bool isEnabled = this->checkIncomingEdges(edges, activations);&#xD;&#xA;&#xD;&#xA;            // For an action activation, also consider incoming edges to&#xD;&#xA;            // input pins&#xD;&#xA;            if (isEnabled)&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action>(activation->getNode());&#xD;&#xA;                if(action != nullptr)&#xD;&#xA;                {&#xD;&#xA;                &#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = action->getInput();&#xD;&#xA;                    unsigned int j = 0;&#xD;&#xA;                    while ((j &lt; inputPins->size()) &amp;&amp; isEnabled)&#xD;&#xA;                    {&#xD;&#xA;                    &#x9;std::shared_ptr&lt;uml::InputPin> inputPin = inputPins->at(j);&#xD;&#xA;                        std::shared_ptr&lt;ActionActivation> actionActivation = std::dynamic_pointer_cast&lt;ActionActivation>(activation);&#xD;&#xA;                    &#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > inputEdges = actionActivation->retrievePinActivation(inputPin)->getIncomingEdges();&#xD;&#xA;                        isEnabled = this->checkIncomingEdges(inputEdges, activations);&#xD;&#xA;                        j = j + 1;&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if (isEnabled) &#xD;&#xA;            {&#xD;&#xA;                DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] Node &quot; &lt;&lt; activation->getNode()->getName()&lt;&lt; &quot; is enabled.&quot;&lt;&lt;std::endl;)&#xD;&#xA;                enabledActivations->push_back(activation);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] &quot; &lt;&lt; enabledActivations->size() &lt;&lt; &quot; node(s) is/are enabled.&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    // *** Send offers to all enabled nodes concurrently. ***&#xD;&#xA;    std::vector&lt;std::shared_ptr&lt;ActivityNodeActivation>>::iterator i;&#xD;&#xA;    for (i = enabledActivations->begin(); i != enabledActivations->end(); ++i) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityNodeActivation> activation = std::dynamic_pointer_cast&lt;ActivityNodeActivation> (*i);&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] Sending offer to node &quot; &lt;&lt; activation->getNode()->getName()&lt;&lt;std::endl;)&#xD;&#xA;        activation->recieveOffer();&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="activations" ordered="false" upperBound="-1" eType="#//ActivityNodeActivation"/>
    </eOperations>
    <eOperations name="checkIncomingEdges" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    unsigned int j = 0;&#xD;&#xA;    bool notFound = true;&#xD;&#xA;&#xD;&#xA;    while (j &lt; incomingEdges->size() &amp;&amp; notFound) {&#xD;&#xA;        unsigned int k = 0;&#xD;&#xA;        while (k &lt; activations->size() &amp;&amp; notFound) {&#xD;&#xA;            if (activations->at(k)->isSourceFor(&#xD;&#xA;                        incomingEdges->at(j))) {&#xD;&#xA;                notFound = false;&#xD;&#xA;            }&#xD;&#xA;            k = k + 1;&#xD;&#xA;        }&#xD;&#xA;        j = j + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return notFound;"/>
      </eAnnotations>
      <eParameters name="incomingEdges" ordered="false" upperBound="-1" eType="#//ActivityEdgeInstance"/>
      <eParameters name="activations" ordered="false" upperBound="-1" eType="#//ActivityNodeActivation"/>
    </eOperations>
    <eOperations name="activate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->createNodeActivations(nodes);&#xD;&#xA;    this->createEdgeInstance(edges);    &#xD;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::ActivityNodeActivation> > nodeActiviations = this->getNodeActivations();&#xD;&#xA;    this->run(nodeActiviations);"/>
      </eAnnotations>
      <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
      <eParameters name="edges" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge"/>
    </eOperations>
    <eOperations name="runNodes" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;ActivityNodeActivation> > nodeActivations(new Bag&lt;ActivityNodeActivation>());&#xD;&#xA;&#xD;&#xA;    for (unsigned int i = 0; i &lt; nodes->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::ActivityNode> node = nodes->at(i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityNodeActivation> nodeActivation = this->getNodeActivation(node);&#xD;&#xA;        if (nodeActivation != nullptr) &#xD;&#xA;        {&#xD;&#xA;            nodeActivations->push_back(nodeActivation);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->run(nodeActivations);"/>
      </eAnnotations>
      <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    </eOperations>
    <eOperations name="terminateAll" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="//DEBUG_MESSAGE(//TODO fix std::cout&lt;&lt;&quot;[terminateAll] Terminating activation group for &quot;&lt;&lt; (this->getActivityExecution() != nullptr ? &quot;activity &quot; + this->getActivityExecution()->getTypes()->at(0)->getName() : this->getContainingNodeActivation() != nullptr ? &quot;node &quot; &lt;&lt; this->getContainingNodeActivation()->getNode()->getName() : &quot;expansion region&quot;) &lt;&lt; &quot;.&quot;);)&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityNodeActivation> > nodeActivations = this->getNodeActivations();&#xD;&#xA;    for (unsigned int i = 0; i &lt; nodeActivations->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityNodeActivation> nodeActivation = nodeActivations->at(i);&#xD;&#xA;        nodeActivation->terminate();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->getSuspendedActivations()->clear();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="for (unsigned int i = 0; i &lt; nodes->size(); i++) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::ActivityNode> node = nodes->at(i);&#xD;&#xA;        if(node != nullptr)&#xD;&#xA;        {&#xD;&#xA;        &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[createNodeActivations] Creating a node activation for &quot;&#xD;&#xA;                   &lt;&lt; node->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;        &#x9;this->createNodeActivation(node);&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Warning! A node was null!&quot;&lt;&lt;std::endl;)&#xD;&#xA;        }&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    </eOperations>
    <eOperations name="createNodeActivation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ActivityNodeActivation>  activation = std::dynamic_pointer_cast&lt;ActivityNodeActivation> (this->retrieveActivityExecution()->getLocus()->getFactory()->instantiateVisitor(node));&#xD;&#xA;    if(activation!=nullptr)&#xD;&#xA;    {&#xD;&#xA;    &#x9;activation->setNode(node);&#xD;&#xA;    &#x9;activation->setRunning(false);&#xD;&#xA;    &#x9;this->addNodeActivation(activation);&#xD;&#xA;    &#x9;activation->createNodeActivations();&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Null activation&quot;&lt;&lt;std::endl;)&#xD;&#xA;    }&#xD;&#xA;    return activation;"/>
      </eAnnotations>
      <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    </eOperations>
    <eOperations name="addNodeActivation" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="activation->setGroup(getThisActivityNodeActivationGroupPtr());&#xD;&#xA;    this->getNodeActivations()->push_back(activation);"/>
      </eAnnotations>
      <eParameters name="activation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation"/>
    </eOperations>
    <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ActivityNodeActivation> activation = nullptr;&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::Pin> pin = std::dynamic_pointer_cast&lt;uml::Pin> (node);&#xD;&#xA;&#x9;auto containingNodeActivation=this->getContainingNodeActivation().lock();&#xD;&#xA;    if ((containingNodeActivation) &amp;&amp; (pin))&#xD;&#xA;    {&#xD;&#xA;        activation = containingNodeActivation->retrievePinActivation(pin);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (activation == nullptr) &#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;fUML::ActivityNodeActivation>> nodeActivations=this->getNodeActivations();&#xD;&#xA;        unsigned int nodeActivationsSize= nodeActivations->size();&#xD;&#xA;        while ((!activation) &amp;&amp; (i &lt; nodeActivationsSize))&#xD;&#xA;        {&#xD;&#xA;        &#x9;activation = nodeActivations->at(i)->getNodeActivation(node);&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return activation;"/>
      </eAnnotations>
      <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    </eOperations>
    <eOperations name="createEdgeInstance" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="for (unsigned int i = 0; i &lt; edges->size(); i++) &#xD;&#xA;&#x9;{&#xD;&#xA;        std::shared_ptr&lt;uml::ActivityEdge> edge = edges->at(i);&#xD;&#xA;        //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;EDGE:&quot; &lt;&lt; edge &lt;&lt; edge->getName()&lt;&lt;std::endl;)&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[createEdgeInstances] Creating an edge instance from &quot;&#xD;&#xA;                   &lt;&lt; edge->getSource()->getName()&#xD;&#xA;                   &lt;&lt; &quot; to &quot;&#xD;&#xA;                   &lt;&lt; edge->getTarget()->getName()&#xD;&#xA;                   &lt;&lt; &quot;.&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;ActivityEdgeInstance> edgeInstance=fUML::FUMLFactory::eInstance()->createActivityEdgeInstance();&#xD;&#xA;        edgeInstance->setEdge(edge);&#xD;&#xA;&#xD;&#xA;        this->addEdgeInstance(edgeInstance);&#xD;&#xA;        //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;SOURCE:&quot;&lt;&lt;edge->getSource()&lt;&lt;std::endl;)&#xD;&#xA;        //DEBUG_MESSAGE(std::cout&lt;&lt;&quot;TARGET:&quot;&lt;&lt;edge->getTarget()&lt;&lt;std::endl;)&#xD;&#xA;        this->getNodeActivation(edge->getSource())->addOutgoingEdge(edgeInstance);&#xD;&#xA;        this->getNodeActivation(edge->getTarget())->addIncomingEdge(edgeInstance);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityNodeActivation> > nodeActivations = this->getNodeActivations();&#xD;&#xA;    for (unsigned int i = 0; i &lt; nodeActivations->size(); i++) {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityNodeActivation> nodeActivation = nodeActivations->at(i);&#xD;&#xA;        nodeActivation->createEdgeInstances();&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="edges" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge"/>
    </eOperations>
    <eOperations name="addEdgeInstance" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="instance->setGroup(getThisActivityNodeActivationGroupPtr());&#xD;&#xA;    this->getEdgeInstances()->push_back(instance);"/>
      </eAnnotations>
      <eParameters name="instance" ordered="false" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eOperations name="retrieveActivityExecution" ordered="false" lowerBound="1" eType="#//ActivityExecution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;ActivityExecution> activityExecution = this->getActivityExecution().lock();&#xD;&#xA;    if (!activityExecution)&#xD;&#xA;    {&#xD;&#xA;    &#x9;auto activation=this->getContainingNodeActivation().lock();&#xD;&#xA;    &#x9;if(activation)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;auto group=activation->getGroup().lock();&#xD;&#xA;    &#x9;&#x9;if(group)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;activityExecution = group->retrieveActivityExecution();&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;else&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;                DEBUG_MESSAGE(std::cout&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;std::endl;)&#xD;&#xA;                throw &quot;invalid group&quot;;&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;}&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;            DEBUG_MESSAGE(std::cout&lt;&lt;__PRETTY_FUNCTION__&lt;&lt;std::endl;)&#xD;&#xA;            throw &quot;invalid activation&quot;;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;    }&#xD;&#xA;    return activityExecution;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOutputParameterNodeActivations" ordered="false" lowerBound="1"
        upperBound="-1" eType="#//ActivityParameterNodeActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;ActivityParameterNodeActivation> > parameterNodeActivations(new Bag&lt;ActivityParameterNodeActivation>());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityNodeActivation> > nodeActivations = this->getNodeActivations();&#xD;&#xA;&#x9;for (std::shared_ptr&lt;ActivityNodeActivation> activation : *nodeActivations)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;if (activation->eClass() == fUML::FUMLPackage::eInstance()->getActivityParameterNodeActivation_Class())&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;if (activation->getIncomingEdges()->size() > 0)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;parameterNodeActivations->push_back(std::dynamic_pointer_cast&lt;ActivityParameterNodeActivation>(activation));&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return parameterNodeActivations;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="resume" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[resume] node=&quot; &lt;&lt; (activation->getNode() == nullptr ? &quot;null&quot; : activation->getNode()->getName())&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    bool found = false;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (!found &amp;&amp; i &lt; this->getSuspendedActivations()->size()) {&#xD;&#xA;        if (this->getSuspendedActivations()->at(i) == activation) {&#xD;&#xA;            this->getSuspendedActivations()->erase(this->getSuspendedActivations()->begin() + i);&#xD;&#xA;            found = true;&#xD;&#xA;        }&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;    if (!this->isSuspended()) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;StructuredActivityNodeActivation> containingNodeActivation = this->getContainingNodeActivation().lock();&#xD;&#xA;        if (containingNodeActivation != nullptr) &#xD;&#xA;        {&#xD;&#xA;            containingNodeActivation->resume();&#xD;&#xA;        }&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="activation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation"/>
    </eOperations>
    <eOperations name="suspend" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[suspend] node=&quot; &lt;&lt; (activation->getNode() == nullptr ? &quot;null&quot; : activation->getNode()->getName())&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    if (!this->isSuspended()) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;StructuredActivityNodeActivation> containingNodeActivation = this->getContainingNodeActivation().lock();&#xD;&#xA;        if (containingNodeActivation != nullptr)&#xD;&#xA;        {&#xD;&#xA;            containingNodeActivation->suspend();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    this->getSuspendedActivations()->push_back(activation);"/>
      </eAnnotations>
      <eParameters name="activation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation"/>
    </eOperations>
    <eOperations name="isSuspended" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return this->getSuspendedActivations()->size() > 0;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool hasSource = false;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityNodeActivation> > activations = this->getNodeActivations();&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (!hasSource &amp;&amp; i &lt; activations->size()) &#xD;&#xA;    {&#xD;&#xA;        hasSource = activations->at(i)->isSourceFor(edgeInstance);&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;    return hasSource;"/>
      </eAnnotations>
      <eParameters name="edgeInstance" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="edgeInstances" ordered="false"
        upperBound="-1" eType="#//ActivityEdgeInstance" containment="true" eOpposite="#//ActivityEdgeInstance/group"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="nodeActivations" ordered="false"
        upperBound="-1" eType="#//ActivityNodeActivation" containment="true" eOpposite="#//ActivityNodeActivation/group"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activityExecution" eType="#//ActivityExecution"
        eOpposite="#//ActivityExecution/activationGroup"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="containingNodeActivation"
        ordered="false" eType="#//StructuredActivityNodeActivation" eOpposite="#//StructuredActivityNodeActivation/activationGroup"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="suspendedActivations" ordered="false"
        upperBound="-1" eType="#//ActivityNodeActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityEdgeInstance">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;algorithm> &#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="sendOffer" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9; std::shared_ptr&lt;Offer> offer(fUML::FUMLFactory::eInstance()->createOffer());&#xD;&#xA;    offer->getOfferedTokens()->insert(offer->getOfferedTokens()->end(), tokens->begin(), tokens->end());&#xD;&#xA;    this->getOffers()->push_back(offer);&#xD;&#xA;    auto target = this->getTarget().lock();&#xD;&#xA;    if(nullptr == target )&#xD;&#xA;    {&#xD;&#xA;        std::cout &lt;&lt; &quot;[sendOffer] The edge does not have a target&quot; &lt;&lt; std::endl;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;    &#x9;target->recieveOffer();&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="countOfferedValue" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="int count = 0;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Offer> > offerList = this->getOffers();&#xD;&#xA;    for(std::shared_ptr&lt;Offer> offer : *offerList)&#xD;&#xA;    {&#xD;&#xA;        count+=offer->countOfferedVales();&#xD;&#xA;    }&#xD;&#xA;    return count;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Offer> > offerList = this->getOffers();&#xD;&#xA;&#x9;    for(std::shared_ptr&lt;Offer> offer : *offerList)&#xD;&#xA;    {&#xD;&#xA;    &#x9;auto vec = offer->retrieveOfferedTokens();&#xD;&#xA;        tokens->insert(tokens->end(), vec->begin(), vec->end());&#xD;&#xA;    }&#xD;&#xA;    this->getOffers()->clear();&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;    int remainingCount = maxCount;&#xD;&#xA;&#xD;&#xA;    while (this->getOffers()->size() > 0 &amp;&amp; remainingCount > 0) {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Offer> offer = this->getOffers()->at(0);&#xD;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > offeredTokens = offer->retrieveOfferedTokens();&#xD;&#xA;        int count = offer->countOfferedVales();&#xD;&#xA;        if (count &lt;= remainingCount) {&#xD;&#xA;            for (unsigned int i = 0; i &lt; offeredTokens->size(); i++) {&#xD;&#xA;                tokens->push_back(offeredTokens->at(i));&#xD;&#xA;            }&#xD;&#xA;            remainingCount = remainingCount - count;&#xD;&#xA;            this->getOffers()->erase(this->getOffers()->begin());&#xD;&#xA;        } else {&#xD;&#xA;            for (int i = 0; i &lt; remainingCount; i++) {&#xD;&#xA;            &#x9;std::shared_ptr&lt;Token> token = offeredTokens->at(i);&#xD;&#xA;                if (token->getValue() != nullptr) {&#xD;&#xA;                    tokens->push_back(token);&#xD;&#xA;                }&#xD;&#xA;            }&#xD;&#xA;            offer->removeOfferedValues(remainingCount);&#xD;&#xA;            remainingCount = 0;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
      <eParameters name="maxCount" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="getOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;&#xD;&#xA;&#x9;Bag&lt;Offer>* offerList = this->getOffers().get();&#xD;&#xA;    const int size = offerList->size();&#xD;&#xA;    Bag&lt;fUML::Token>* vec;&#xD;&#xA;    for(int i=0; i &lt; size; i++){&#xD;&#xA;    {&#xD;&#xA;        vec = (*offerList)[i]->retrieveOfferedTokens().get();&#xD;&#xA;        if(vec->size()>0)&#xD;&#xA;        {&#xD;&#xA;            if (tokens->empty())&#xD;&#xA;            {&#xD;&#xA;                *tokens = *vec;&#xD;&#xA;            } else {&#xD;&#xA;                tokens->insert(tokens->end(), vec->begin(), vec->end());&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasOffer" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::any_of(this->getOffers()->begin(),this->getOffers()->end(),[](std::shared_ptr&lt;Offer> offer){return offer->hasTokens();});&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="edge" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityEdge"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="source" ordered="false"
        lowerBound="1" eType="#//ActivityNodeActivation" eOpposite="#//ActivityNodeActivation/outgoingEdges">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="AggregationKind" value="shared"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="target" ordered="false"
        lowerBound="1" eType="#//ActivityNodeActivation" eOpposite="#//ActivityNodeActivation/incomingEdges">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="AggregationKind" value="shared"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="offers" ordered="false"
        upperBound="-1" eType="#//Offer"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="group" ordered="false"
        lowerBound="1" eType="#//ActivityNodeActivationGroup" eOpposite="#//ActivityNodeActivationGroup/edgeInstances"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Offer">
    <eOperations name="countOfferedVales" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->removeWithdrawnTokens();&#xD;&#xA;&#xD;&#xA;    int count = 0;&#xD;&#xA;    for (unsigned int i = 0; i &lt; this->getOfferedTokens()->size(); i++) {&#xD;&#xA;        if (this->getOfferedTokens()->at(i)->getValue() != nullptr) {&#xD;&#xA;            count = count + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return count;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="retrieveOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->removeWithdrawnTokens();&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > offeredTokens = this->getOfferedTokens();&#xD;&#xA;    for (unsigned int i = 0; i &lt; this->getOfferedTokens()->size(); i++)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Token> offeredToken = offeredTokens->at(i);&#xD;&#xA;        tokens->push_back(offeredToken);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="removeOfferedValues" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    int n = count;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (n > 0) {&#xD;&#xA;        if (this->getOfferedTokens()->at(i)->getValue() != nullptr) {&#xD;&#xA;            this->getOfferedTokens()->erase(this->getOfferedTokens()->begin() + i);&#xD;&#xA;        } else {&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;        n = n - 1;&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="count" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
    <eOperations name="removeWithdrawnTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=" std::shared_ptr&lt; Bag&lt;fUML::Token> > offeredTokens= this->getOfferedTokens();&#xD;&#xA;    Bag&lt;fUML::Token> *offeredTokensPtr=offeredTokens.get();&#xD;&#xA;&#xD;&#xA;    const unsigned int numberTokens=offeredTokensPtr->size();&#xD;&#xA;&#xD;&#xA;    if(numberTokens==1)&#xD;&#xA;    {&#xD;&#xA;        if((*offeredTokensPtr)[0]->isWithdrawn())&#xD;&#xA;        {&#xD;&#xA;            offeredTokensPtr->clear();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        Bag&lt;fUML::Token> *new_OfferedTokensPtr = new Bag&lt;fUML::Token>();&#xD;&#xA;        m_offeredTokens.reset(new_OfferedTokensPtr);&#xD;&#xA;        //&#x9;m_offeredTokens.reserve(numberTokens);&#xD;&#xA;        for(unsigned int i = 0; i &lt; numberTokens; i++)&#xD;&#xA;        {&#xD;&#xA;            if(!((*offeredTokensPtr)[i]->isWithdrawn()))&#xD;&#xA;            {&#xD;&#xA;                new_OfferedTokensPtr->push_back((*offeredTokensPtr)[i]);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="hasTokens" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->removeWithdrawnTokens();&#xD;&#xA;    return (this->getOfferedTokens()->size() > 0);"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="offeredTokens" ordered="false"
        upperBound="-1" eType="#//Token"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Token" abstract="true">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ControlToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="transfer" ordered="false" lowerBound="1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;fUML::Token> token = getThisTokenPtr();&#xD;&#xA;    if (!this->isWithdrawn())&#xD;&#xA;    {&#xD;&#xA;        this->withdraw();&#xD;&#xA;        token = std::dynamic_pointer_cast&lt;fUML::Token>(this->copy());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    token->setHolder(holder);&#xD;&#xA;&#x9;token->setWithdrawn(false);&#xD;&#xA;    return token;"/>
      </eAnnotations>
      <eParameters name="holder" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation"/>
    </eOperations>
    <eOperations name="withdraw" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if (!this->isWithdrawn()) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::ActivityNodeActivation> holder = this->getHolder().lock();&#xD;&#xA;        this->setHolder(nullptr);&#xD;&#xA;&#x9;&#x9;this->setWithdrawn(true);&#xD;&#xA;&#x9;&#x9;if (holder)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;holder->removeToken(getThisTokenPtr());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return dynamic_cast&lt;fUML::ControlToken*>(this) != nullptr;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getValue" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="const"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="holder" ordered="false"
        eType="#//ActivityNodeActivation" eOpposite="#//ActivityNodeActivation/heldTokens">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="no_back_reference" value="true"/>
      </eAnnotations>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="withdrawn" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectToken" eSuperTypes="#//Token">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value=" #include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return (this == other.get());"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return false;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="value" ordered="false"
        eType="#//Value" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ForkedToken" eSuperTypes="#//Token">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value=" "/>
    </eAnnotations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return (this == otherToken.get());"/>
      </eAnnotations>
      <eParameters name="otherToken" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="withdraw" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (!this->isBaseTokenIsWithdrawn() &amp; !this->getBaseToken()->isWithdrawn()) {&#xD;&#xA;        this->getBaseToken()->withdraw();&#xD;&#xA;        this->setBaseTokenIsWithdrawn(true);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (this->getRemainingOffersCount() > 0) {&#xD;&#xA;        this->setRemainingOffersCount(this->getRemainingOffersCount() - 1);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    if (this->getRemainingOffersCount() == 0) {&#xD;&#xA;        TokenImpl::withdraw();&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getBaseToken()->isControl();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getValue" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getBaseToken()->getValue();"/>
        <details key="const"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="baseToken" ordered="false"
        eType="#//Token"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="remainingOffersCount" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="baseTokenIsWithdrawn" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ControlToken" eSuperTypes="#//Token">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="equals" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return (std::dynamic_pointer_cast&lt;ControlToken>(other) != nullptr);"/>
      </eAnnotations>
      <eParameters name="other" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="isControl" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;return true;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getValue" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return nullptr;"/>
        <details key="const"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityExecution" eSuperTypes="#//Execution">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityParameterNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/Execution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ForkedToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;&#xD;&#xA;#include &quot;fUML/Object.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;&#xD;&#xA;#include &quot;uml/Activity.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityParameterNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xD;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="execute" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::Activity> activity = std::dynamic_pointer_cast&lt;uml::Activity> (this->getTypes()->front());&#xD;&#xA;&#xD;&#xA;    if(activity != nullptr)&#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[execute] Activity &quot; &lt;&lt; activity->getName()&lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[event] Execute activity=&quot; + activity->getName()&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;ActivityExecution> thisPtr=getThisActivityExecutionPtr();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::ActivityNodeActivationGroup> newActivationGroup=fUML::FUMLFactory::eInstance()->createActivityNodeActivationGroup_in_ActivityExecution(thisPtr);&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > nodes = activity->getNode();&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityEdge> > edges = activity->getEdge();&#xD;&#xA;&#x9;&#x9;newActivationGroup->activate(nodes, edges);&#xD;&#xA;&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[execute] Getting output parameter node activations...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;ActivityParameterNodeActivation> > outputActivationList = this->getActivationGroup()->getOutputParameterNodeActivations();&#xD;&#xA;        for(std::shared_ptr&lt;ActivityParameterNodeActivation> outputActivation : *outputActivationList)&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;ParameterValue> parameterValue(fUML::FUMLFactory::eInstance()->createParameterValue());&#xD;&#xA;        &#x9;std::shared_ptr&lt;uml::ActivityParameterNode> activityParameterNode = std::dynamic_pointer_cast&lt;uml::ActivityParameterNode> (outputActivation->getNode());&#xD;&#xA;&#xD;&#xA;            if(activityParameterNode != nullptr)&#xD;&#xA;            {&#xD;&#xA;                parameterValue->setParameter(activityParameterNode->getParameter());&#xD;&#xA;&#xD;&#xA;                std::shared_ptr&lt;Bag&lt;Token> > tokenList = outputActivation->getTokens();&#xD;&#xA;                for(std::shared_ptr&lt;Token> token : *tokenList)&#xD;&#xA;                {&#xD;&#xA;                &#x9;std::shared_ptr&lt;Value> value = nullptr;&#xD;&#xA;                &#x9;std::shared_ptr&lt;ObjectToken> obTok = std::dynamic_pointer_cast&lt;ObjectToken>(token);&#xD;&#xA;                    if(obTok != nullptr){&#xD;&#xA;                        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Getting the value of a object token&quot;&lt;&lt;std::endl;)&#xD;&#xA;                        value = obTok->getValue();&#xD;&#xA;                    }&#xD;&#xA;                    else&#xD;&#xA;                    {&#xD;&#xA;                    &#x9;std::shared_ptr&lt;ForkedToken> ft = std::dynamic_pointer_cast&lt;ForkedToken>(token);&#xD;&#xA;                        if(ft != nullptr)&#xD;&#xA;                        {&#xD;&#xA;                            DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Getting the value of a forked token&quot;&lt;&lt;std::endl;)&#xD;&#xA;                            value = ft->getBaseToken()->getValue();&#xD;&#xA;                        }&#xD;&#xA;                        else&#xD;&#xA;                        {&#xD;&#xA;                            std::cerr&lt;&lt;&quot;Unsupported token tpe.&quot;&lt;&lt;std::endl;&#xD;&#xA;                            exit(EXIT_FAILURE);&#xD;&#xA;                        }&#xD;&#xA;                    }&#xD;&#xA;&#xD;&#xA;                    if (value != nullptr) {&#xD;&#xA;                        parameterValue->getValues()->push_back(value);&#xD;&#xA;                        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[event] Output activity=&quot; &lt;&lt; activity->getName() &lt;&lt; &quot; parameter=&quot; &lt;&lt; parameterValue->getParameter()->getName() &lt;&lt; &quot; value=&quot; &lt;&lt; value->toString()&lt;&lt;std::endl;)&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                this->setParameterValue(parameterValue);&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[execute] Activity &quot; &lt;&lt; activity->getName()&lt;&lt; &quot; completed.&quot;&lt;&lt;std::endl;)&#xD;&#xA;        //TODO: which elements connected to the activity can be safely cleaned up here?&#xD;&#xA;    }&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->getActivationGroup()->terminateAll();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="new_" ordered="false" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return std::shared_ptr&lt;fUML::Value>(fUML::FUMLFactory::eInstance()->createActivityExecution());"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activationGroup" ordered="false"
        lowerBound="1" eType="#//ActivityNodeActivationGroup" containment="true" eOpposite="#//ActivityNodeActivationGroup/activityExecution"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityNodeActivation" abstract="true"
      eSuperTypes="#//SemanticVisitor">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;ecore/EClass.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityEdge.hpp&quot;&#xD;&#xA;#include &quot;uml/Class.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="run" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (this->getNode() != nullptr) {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] node = &quot; &lt;&lt; this->getNode()->getName()&lt;&lt;std::endl;)&#xD;&#xA;    } else {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[run] Anonymous activation of type &quot;&lt;&lt;std::endl;)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->setRunning(true);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="recieveOffer" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[receiveOffer] &quot;&#xD;&#xA; &lt;&lt; (this->getNode() == nullptr ? &quot;...&quot; : (&quot;node = &quot; + this->getNode()->getName()))&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    _beginIsolation();&#xD;&#xA;&#xD;&#xA;    bool ready = this->isReady();&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;Token> > tokens;&#xD;&#xA;    if (ready) &#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[receiveOffer] Firing.&quot;&lt;&lt;std::endl;)&#xD;&#xA;        tokens = this->takeOfferedTokens();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    _endIsolation();&#xD;&#xA;&#xD;&#xA;    if (ready) &#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt; &quot;Firing &quot;&lt;&lt;tokens->size()&lt;&lt;&quot; token(s)&quot;&lt;&lt;std::endl;)&#xD;&#xA;        this->fire(tokens);&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt; &quot;Node&quot;&lt;&lt;(this->getNode() == nullptr ? &quot;...&quot; : &quot;node = &quot; + this->getNode()->getName())&lt;&lt;&quot; is not ready to execute.&quot;&lt;&lt;std::endl;)&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;Token> > allTokens(new Bag&lt;Token>());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > incomingEdgeList = this->getIncomingEdges();&#xD;&#xA;&#x9;for(std::shared_ptr&lt;ActivityEdgeInstance> incomingEdge : *incomingEdgeList)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;auto vec = incomingEdge->takeOfferedTokens();&#xD;&#xA;&#x9;&#x9;allTokens->insert(allTokens->end(), vec->begin(), vec->end());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return allTokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen"/>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="sendOffers" ordered="false">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;&#x9;if (tokens->size() > 0) &#xD;&#xA;&#x9;{&#xD;&#xA;        // *** Send all outgoing offers concurrently. ***&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > outgoingEdgeList = this->getOutgoingEdges();&#xD;&#xA;        for(std::shared_ptr&lt;ActivityEdgeInstance> outgoingEdge : *outgoingEdgeList)&#xD;&#xA;        {&#xD;&#xA;&#x9;&#x9;&#x9;DEBUG_MESSAGE(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;auto target=outgoingEdge->getTarget().lock();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(!target){&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[sendOffers] Target is NULL for edge: &quot; &lt;&lt; outgoingEdge->getEdge()->getName() &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(! (target->getNode()))&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[sendOffers] Node is NULL for target on edge: &quot; &lt;&lt;  outgoingEdge->getEdge()->getName() &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;[sendOffers] Sending offer to &quot; &lt;&lt; target->getNode()->getName() &lt;&lt; &quot;.&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;  &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;            outgoingEdge->sendOffer(tokens);&#xD;&#xA;        }&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="/*    if (this->isRunning()) {&#xD;&#xA;        if (this->getNode() != nullptr) {&#xD;&#xA;            DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[terminate] node = &quot; &lt;&lt; this->getNode()->getName()&lt;&lt;std::endl;)&#xD;&#xA;        } else {&#xD;&#xA;            DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[terminate] Anonymous activation of type &quot; &lt;&lt; this->eClass()->getName()&lt;&lt;std::endl;)&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;*/&#xD;&#xA;this->setRunning(false);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getRunning();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getRunning" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->isRunning();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="addOutgoingEdge" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;if (edge->getSource().lock().get() != this)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;edge->setSource(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;this->getOutgoingEdges()->push_back(edge);"/>
      </eAnnotations>
      <eParameters name="edge" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eOperations name="addIncomingEdge" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;if (edge->getTarget().lock().get() != this)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;edge->setTarget(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;}&#xD;&#xA;    this->getIncomingEdges()->push_back(edge);"/>
      </eAnnotations>
      <eParameters name="edge" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="createEdgeInstances" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return (edgeInstances->getSource().lock().get() ==this);"/>
      </eAnnotations>
      <eParameters name="edgeInstances" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eOperations name="getActivityExecution" ordered="false" lowerBound="1" eType="#//ActivityExecution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#xD;&#xA;&#x9;auto group=this->getGroup().lock();&#xD;&#xA;&#x9;if(group)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return group->retrieveActivityExecution();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::cout &lt;&lt; __PRETTY_FUNCTION__  &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;throw &quot;empty group!&quot;;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return std::shared_ptr&lt;fUML::ActivityExecution>();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getExecutionContext" ordered="false" lowerBound="1" eType="#//Object">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getActivityExecution()->getContext();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getExecutionLocus" ordered="false" lowerBound="1" eType="#//Locus">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return this->getActivityExecution()->getLocus();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if (node == this->getNode())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return getThisActivityNodeActivationPtr();&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return nullptr;&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    </eOperations>
    <eOperations name="addToken" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;&#x9;&#x9;DEBUG_MESSAGE(&#xD;&#xA;&#x9;&#x9;if (this->getNode()== nullptr)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;[addToken] ...&quot;&lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;[addToken] node = &quot; &lt;&lt; this->getNode()->getName()&lt;&lt;std::endl;&#xD;&#xA;            &#xD;&#xA;            std::shared_ptr&lt;uml::NamedElement> owner = std::dynamic_pointer_cast&lt;uml::NamedElement>(this->getNode()->getOwner().lock());&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;ACT_DEBUG(std::cout &lt;&lt; &quot;SET_TOKEN;NODE:&quot; &lt;&lt; (owner != nullptr ? owner->getName() : &quot;[NO_OWNER]&quot;) &lt;&lt; &quot;::&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;&lt; this->getNode()->getName() &lt;&lt; &quot;;TOKEN:&quot; &lt;&lt; token->getValue()&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;&lt; &quot;;CURRENT_TOKENS:&quot; &lt;&lt; (this->getHeldTokens()->size() + 1) &lt;&lt; &quot;;DIRECTION:add&quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&lt;&lt; std::endl;)&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;)&#xD;&#xA;&#xD;&#xA;&#x9;if (!token->isWithdrawn())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;token->withdraw();&#xD;&#xA;&#x9;&#x9;token = std::dynamic_pointer_cast&lt;Token>(token->copy());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;token->setHolder(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;token->setWithdrawn(false);&#xD;&#xA;&#xD;&#xA;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[addToken] Adding token with value = &quot; &lt;&lt;token->getValue()&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;this->getHeldTokens()->push_back(token);"/>
      </eAnnotations>
      <eParameters name="token" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="removeToken" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > heldTokenList = this->getHeldTokens();&#xD;&#xA;&#x9;std::vector&lt;std::shared_ptr&lt;fUML::Token>>::iterator iter = heldTokenList->begin();&#xD;&#xA;&#x9;std::vector&lt;std::shared_ptr&lt;fUML::Token>>::iterator end = heldTokenList->end();&#xD;&#xA;&#xD;&#xA;&#x9;int i = 0;&#xD;&#xA;&#x9;while (iter != end)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;i++;&#xD;&#xA;&#x9;&#x9;if (*iter == token)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;DEBUG_MESSAGE(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (this->getNode() == nullptr)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;[removeToken] ...&quot;&lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;[removeToken] node = &quot; + this->getNode()->getName()&lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;ACT_DEBUG(&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (this->getNode() == nullptr)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;SET_TOKEN;NODE:[ANONYMOUS_ACTIVATION]&quot;&lt;&lt;&quot;;TOKEN:&quot;&lt;&lt;token->getValue() &lt;&lt; &quot;;CURRENT_TOKENS:&quot;&lt;&lt; (heldTokenList->size()-1) &lt;&lt;&quot;;DIRECTION:remove&quot;&lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;} else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;                    std::shared_ptr&lt;uml::NamedElement> owner = std::dynamic_pointer_cast&lt;uml::NamedElement>(this->getNode()->getOwner().lock());&#xD;&#xA;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;SET_TOKEN;NODE:&quot; &lt;&lt; (owner != nullptr? owner->getName() : &quot;[NO_OWNER]&quot;) &lt;&lt; &quot;::&quot; &lt;&lt; this->getNode()->getName() &lt;&lt;&quot;;TOKEN:&quot;&lt;&lt;token->getValue() &lt;&lt; &quot;;CURRENT_TOKENS:&quot;&lt;&lt; (heldTokenList->size()-1) &lt;&lt;&quot;;DIRECTION:remove&quot;&lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;)&#xD;&#xA;&#x9;&#x9;&#x9;this->getHeldTokens()->erase(iter);&#xD;&#xA;&#x9;&#x9;&#x9;return i;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;iter++;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return 0;"/>
      </eAnnotations>
      <eParameters name="token" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="addTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="for(std::shared_ptr&lt;Token> token: *tokens)&#xD;&#xA;    {&#xD;&#xA;        this->addToken(token);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="takeTokens" ordered="false" lowerBound="1" upperBound="-1"
        eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;Token> > tokens = this->getTokens();&#xD;&#xA;    this->clearTokens();&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="clearTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    while (this->getHeldTokens()->size() > 0) {&#xD;&#xA;        this->getHeldTokens()->at(0)->withdraw();&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > heldTokens = this->getHeldTokens();&#xD;&#xA;    for (unsigned int i = 0; i &lt; heldTokens->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Token> heldToken = heldTokens->at(i);&#xD;&#xA;        tokens->push_back(heldToken);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="suspend" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;auto group=this->getGroup().lock();&#xD;&#xA;&#x9;if(group)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;group->suspend(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;empty group&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="resume" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;auto group=this->getGroup().lock();&#xD;&#xA;&#x9;if(group)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;group->resume(getThisActivityNodeActivationPtr());&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;empty group&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;}&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outgoingEdges" ordered="false"
        upperBound="-1" eType="#//ActivityEdgeInstance" eOpposite="#//ActivityEdgeInstance/source"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="incomingEdges" ordered="false"
        upperBound="-1" eType="#//ActivityEdgeInstance" eOpposite="#//ActivityEdgeInstance/target"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="heldTokens" ordered="false"
        upperBound="-1" eType="#//Token" containment="true" eOpposite="#//Token/holder"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="group" ordered="false"
        lowerBound="1" eType="#//ActivityNodeActivationGroup" eOpposite="#//ActivityNodeActivationGroup/nodeActivations"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="node" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="running" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ObjectNodeActivation" abstract="true"
      eSuperTypes="#//ActivityNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/Token.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="countOfferedValues" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;int totalValueCount = 0;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (i &lt; this->getIncomingEdges()->size()) {&#xD;&#xA;        totalValueCount = totalValueCount&#xD;&#xA;                + this->getIncomingEdges()->at(i)->countOfferedValue();&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return totalValueCount;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="sendUnofferedTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;Token> > tokens = this->getUnofferedTokens();&#xD;&#xA;    this->setOfferedTokenCount(this->getOfferedTokenCount() + tokens->size());&#xD;&#xA;    this->sendOffers(tokens);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="countUnofferedTokens" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (this->getHeldTokens()->size() == 0) {&#xD;&#xA;        this->setOfferedTokenCount(0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return (this->getHeldTokens()->size() - this->getOfferedTokenCount());"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getUnofferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Token> > tokens(new Bag&lt;fUML::Token>());&#xD;&#xA;&#xD;&#xA;  int i = 0; &#xD;&#xA;  const int numberUnofferedTokens=this->countUnofferedTokens(); &#xD;&#xA;  int offeredTokenCount=this->getOfferedTokenCount(); &#xD;&#xA; &#xD;&#xA;  Bag&lt;fUML::Token>* heldTokenPtr = this->getHeldTokens().get(); &#xD;&#xA;  if(nullptr!=heldTokenPtr) &#xD;&#xA;  { &#xD;&#xA;    while (i &lt; numberUnofferedTokens) &#xD;&#xA;    { &#xD;&#xA;      tokens->push_back((*heldTokenPtr)[offeredTokenCount + i]);&#xD;&#xA;      i++; &#xD;&#xA;    } &#xD;&#xA;  } &#xD;&#xA;  return tokens; "/>
      </eAnnotations>
    </eOperations>
    <eOperations name="takeUnofferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Token> > tokens = this->getUnofferedTokens();&#xD;&#xA;    for (unsigned int i = 0; i &lt; tokens->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Token> token = tokens->at(i);&#xD;&#xA;        token->withdraw();&#xD;&#xA;    }&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="run" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    ActivityNodeActivationImpl::run();&#xD;&#xA;    this->setOfferedTokenCount(0);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="sendOffers" ordered="false">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if (tokens->size() == 0) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;ObjectToken> token = fUML::FUMLFactory::eInstance()->createObjectToken();&#xD;&#xA;&#x9;&#x9;token->setHolder(getThisObjectNodeActivationPtr());&#xD;&#xA;&#x9;&#x9;token->setWithdrawn(false);&#xD;&#xA;&#x9;&#x9;tokens->push_back(token);&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;ActivityNodeActivationImpl::sendOffers(tokens);"/>
      </eAnnotations>
      <eParameters name="tokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->clearTokens();&#xD;&#xA;    ActivityNodeActivationImpl::terminate();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="addToken" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (token->getValue() == nullptr) {&#xD;&#xA;        token->withdraw();&#xD;&#xA;    } else {&#xD;&#xA;        ActivityNodeActivationImpl::addToken(token);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="token" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="removeToken" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    int i = ActivityNodeActivationImpl::removeToken(token);&#xD;&#xA;    if (i > 0 &amp;&amp; i &lt;= this->getOfferedTokenCount()) {&#xD;&#xA;        this->setOfferedTokenCount(this->getOfferedTokenCount() - 1);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return i;"/>
      </eAnnotations>
      <eParameters name="token" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="clearTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    ActivityNodeActivationImpl::clearTokens();&#xD;&#xA;    this->setOfferedTokenCount(0);"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="offeredTokenCount" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"
        defaultValueLiteral="0"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityParameterNodeActivation" eSuperTypes="#//ObjectNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ActivityExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ForkedToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityParameterNode.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if (this->getNode()->getIncoming()->size() == 0) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt; &quot;[fire] Input activity parameter node &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::Parameter> parameter = (std::dynamic_pointer_cast&lt;uml::ActivityParameterNode>(this->getNode()))->getParameter();&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;ParameterValue> parameterValue = this->getActivityExecution()->getParameterValue(parameter);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if (parameterValue != nullptr) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt; &quot;[fire] Parameter has &quot;&lt;&lt; parameterValue->getValues()->size() &lt;&lt; &quot; value(s).&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;&#x9;Bag&lt;Value>* valueList = parameterValue->getValues().get();&#xD;&#xA;&#x9;&#x9;&#x9;auto factory = fUML::FUMLFactory::eInstance();&#xD;&#xA;            const auto size = valueList->size();&#xD;&#xA;            std::shared_ptr&lt;Value> value;&#xD;&#xA;&#x9;&#x9;&#x9;for (unsigned int i = 0; i&lt; size; i++)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;                value = (*valueList)[i];&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ObjectToken> token = factory->createObjectToken();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;token->setValue(value);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;this->addToken(token);&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;this->sendUnofferedTokens();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt; &quot;[fire] Output activity parameter node &quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&lt;&lt; this->getNode()->getName() + &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;this->addTokens(incomingTokens);&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::ForkedToken> forkToken = std::dynamic_pointer_cast&lt;fUML::ForkedToken>((*incomingTokens)[0]);&#xD;&#xA;&#x9;&#x9;if (forkToken != nullptr) &#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;forkToken->getBaseToken()->setHolder(getThisActivityParameterNodeActivationPtr());&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="clearTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (this->getNode()->getIncoming()->size() == 0) {&#xD;&#xA;        ObjectNodeActivationImpl::clearTokens();&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ControlNodeActivation" abstract="true"
      eSuperTypes="#//ActivityNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value=" #include &quot;uml/ActivityNode.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (this->getNode() != nullptr) {&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Control node &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->sendOffers(incomingTokens);"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="MergeNodeActivation" eSuperTypes="#//ControlNodeActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="JoinNodeActivation" eSuperTypes="#//ControlNodeActivation">
    <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool ready = true;&#xD;&#xA;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;while (ready &amp;&amp; i &lt; this->getIncomingEdges()->size()) {&#xD;&#xA;&#x9;&#x9;ready = this->getIncomingEdges()->at(i)->hasOffer();&#xD;&#xA;&#x9;&#x9;i = i + 1;&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;return ready;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ForkNodeActivation" eSuperTypes="#//ControlNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ForkedToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include&quot;uml/ActivityNode.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if (this->getNode() == nullptr) &#xD;&#xA;&#x9;{&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Anonymous fork node.&quot;&lt;&lt;std::endl;)&#xD;&#xA;    } &#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;{&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Fork node &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > outgoingEdges = this->getOutgoingEdges();&#xD;&#xA;    int outgoingEdgeCount = outgoingEdges->size();&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;Token> > forkedTokens(new Bag&lt;Token>());&#xD;&#xA;    for (unsigned int i = 0; i &lt; incomingTokens->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Token> token = incomingTokens->at(i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;ForkedToken> forkedToken(fUML::FUMLFactory::eInstance()->createForkedToken());&#xD;&#xA;        forkedToken->setBaseToken(token);&#xD;&#xA;        forkedToken->setRemainingOffersCount(outgoingEdgeCount);&#xD;&#xA;        forkedToken->setBaseTokenIsWithdrawn(false);&#xD;&#xA;        forkedTokens->push_back(forkedToken);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->addTokens(forkedTokens);&#xD;&#xA;    this->sendOffers(forkedTokens);"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->clearTokens();&#xD;&#xA;    ControlNodeActivationImpl::terminate();"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InitialNodeActivation" eSuperTypes="#//ControlNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ControlToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;&#x9;//struct null_deleter{void operator()(void const *) const { } };&#xD;&#xA;&#x9;std::shared_ptr&lt;ControlToken> controlToken(fUML::FUMLFactory::eInstance()->createControlToken());&#xD;&#xA;    tokens->push_back(controlToken);&#xD;&#xA;    this->addTokens(tokens);&#xD;&#xA;    this->sendOffers(tokens);"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DecisionNodeActivation" eSuperTypes="#//ControlNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;abstractDataTypes/Subset.hpp&quot;&#xD;&#xA;#include &quot;fUML/Executor.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/Token.hpp&quot;&#xD;&#xA;#include &quot;fUML/Value.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityEdge.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/DecisionNode.hpp&quot;&#xD;&#xA;#include &quot;uml/ObjectFlow.hpp&quot;&#xD;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xD;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/ValueSpecification.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getDecisionValues" ordered="false" upperBound="-1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Value> decisionInputValue = this->getDecisionInputFlowValue();&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value> > decisionValues(new Bag&lt;fUML::Value>());&#xD;&#xA;&#xD;&#xA;    for (unsigned int i = 0; i &lt; incomingTokens->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Token> incomingToken = incomingTokens->at(i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;Value> value = this->executeDecisionInputBehavior(incomingToken->getValue(), decisionInputValue);&#xD;&#xA;        decisionValues->push_back(value);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    DEBUG_MESSAGE(&#xD;&#xA;&#x9;&#x9;for (unsigned int i = 0; i &lt; decisionValues->size(); i++)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Value> decisionValue = decisionValues->at(i);&#xD;&#xA;&#x9;&#x9;&#x9;if (decisionValue)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;[getDecisionValues] decisionValues[&quot; &lt;&lt; i &lt;&lt; &quot;] = &quot;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;   &lt;&lt; decisionValue->toString()&lt;&lt;std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::cout&lt;&lt;&quot;[getDecisionValues] decisionValues[&quot; &lt;&lt; i &lt;&lt; &quot;] = nullptr&quot; &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;    )&#xD;&#xA;&#xD;&#xA;    return decisionValues;"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="executeDecisionInputBehavior" ordered="false" lowerBound="1"
        eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::DecisionNode> decisionNode = std::dynamic_pointer_cast&lt;uml::DecisionNode>(this->getNode());&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::Behavior> decisionInputBehavior = nullptr;&#xD;&#xA;&#xD;&#xA;    if(decisionNode != nullptr)&#xD;&#xA;    {&#xD;&#xA;        decisionInputBehavior = decisionNode->getDecisionInput();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Value> decisionInputResult = nullptr;&#xD;&#xA;&#xD;&#xA;    if (decisionInputBehavior == nullptr)&#xD;&#xA;    {&#xD;&#xA;        if (decisionInputValue != nullptr)&#xD;&#xA;        {&#xD;&#xA;            decisionInputResult = decisionInputValue;&#xD;&#xA;        }&#xD;&#xA;        else&#xD;&#xA;        {&#xD;&#xA;            decisionInputResult = inputValue;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;        this->setDecisionInputExecution(this->getExecutionLocus()->getFactory()->createExecution(decisionInputBehavior,this->getExecutionContext()));&#xD;&#xA;&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        unsigned int j = 0;&#xD;&#xA;        while (((j == 0) || ((j == 1) &amp;&amp; (decisionInputValue != nullptr)))&#xD;&#xA;               &amp;&amp; (i &lt; decisionInputBehavior->getOwnedParameter()->size()))&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;uml::Parameter> parameter = decisionInputBehavior->getOwnedParameter()->at(i);&#xD;&#xA;            if (parameter->getDirection() == uml::ParameterDirectionKind::IN&#xD;&#xA;                    || parameter->getDirection() == uml::ParameterDirectionKind::INOUT)&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;ParameterValue> inputParameterValue(fUML::FUMLFactory::eInstance()->createParameterValue());&#xD;&#xA;                inputParameterValue->setParameter(parameter);&#xD;&#xA;&#xD;&#xA;                j = j + 1;&#xD;&#xA;                if (j == 1 &amp;&amp; inputValue != nullptr)&#xD;&#xA;                {&#xD;&#xA;                    inputParameterValue->getValues()->push_back(inputValue);&#xD;&#xA;                }&#xD;&#xA;                else&#xD;&#xA;                {&#xD;&#xA;                    inputParameterValue->getValues()->push_back(decisionInputValue);&#xD;&#xA;                }&#xD;&#xA;&#xD;&#xA;                this->getDecisionInputExecution()->setParameterValue(inputParameterValue);&#xD;&#xA;            }&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;        this->getDecisionInputExecution()->execute();&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;ParameterValue> > outputParameterValues = this->getDecisionInputExecution()->getOutputParameterValues();&#xD;&#xA;        this->getDecisionInputExecution()->destroy();&#xD;&#xA;&#xD;&#xA;        decisionInputResult = outputParameterValues->at(0)->getValues()->at(0);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return decisionInputResult;"/>
      </eAnnotations>
      <eParameters name="inputValue" ordered="false" eType="#//Value"/>
      <eParameters name="decisionInputValue" ordered="false" eType="#//Value"/>
    </eOperations>
    <eOperations name="getDecisionInputFlowValue" ordered="false" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ActivityEdgeInstance> decisionInputFlowInstance = this->getDecisionInputFlowInstance();&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Value> value = nullptr;&#xD;&#xA;    if (decisionInputFlowInstance != nullptr) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens = decisionInputFlowInstance->takeOfferedTokens();&#xD;&#xA;        if (tokens->size() > 0) &#xD;&#xA;        {&#xD;&#xA;            value = tokens->at(0)->getValue();&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return value;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getDecisionInputFlowInstance" ordered="false" eType="#//ActivityEdgeInstance">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::ActivityEdge>  decisionInputFlow = (std::dynamic_pointer_cast&lt;uml::DecisionNode> (this->getNode()))->getDecisionInputFlow();&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;ActivityEdgeInstance> edgeInstance = nullptr;&#xD;&#xA;    if (decisionInputFlow != nullptr) &#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while ((edgeInstance == nullptr) &amp;&amp; (i &lt; this->getIncomingEdges()->size())) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;ActivityEdgeInstance> incomingEdge = this->getIncomingEdges()->at(i);&#xD;&#xA;            if (incomingEdge->getEdge() == decisionInputFlow) &#xD;&#xA;            {&#xD;&#xA;                edgeInstance = incomingEdge;&#xD;&#xA;            }&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return edgeInstance;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="test" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="bool guardResult = true;&#xD;&#xA;    if (gaurd != nullptr) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Value> guardValue = this->getExecutionLocus()->getExecutor()->evaluate(gaurd);&#xD;&#xA;        guardResult = guardValue->equals(value);&#xD;&#xA;    }&#xD;&#xA;    return guardResult;"/>
      </eAnnotations>
      <eParameters name="gaurd" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ValueSpecification"/>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="removeJoinedControlTokens" ordered="false" upperBound="-1"
        eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > removedControlTokens(new Bag&lt;fUML::Token>());&#xD;&#xA;&#xD;&#xA;    if (this->hasObjectFlowInput()) &#xD;&#xA;    {&#xD;&#xA;        unsigned int i = 0;&#xD;&#xA;        while (i &lt; incomingTokens->size()) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Token> token = incomingTokens->at(i);&#xD;&#xA;            if (token->isControl()) &#xD;&#xA;            {&#xD;&#xA;                removedControlTokens->push_back(token);&#xD;&#xA;                incomingTokens->erase(incomingTokens->begin()+i);&#xD;&#xA;                i = i - 1;&#xD;&#xA;            }&#xD;&#xA;            i = i + 1;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return removedControlTokens;"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="hasObjectFlowInput" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::ActivityEdge> decisionInputFlow = (std::dynamic_pointer_cast&lt;uml::DecisionNode> (this->getNode()))->getDecisionInputFlow();&#xD;&#xA;&#xD;&#xA;    bool isObjectFlow = false;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (!isObjectFlow &amp;&amp; i &lt; this->getIncomingEdges()->size()) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::ActivityEdge> edge = this->getIncomingEdges()->at(i)->getEdge();&#xD;&#xA;        isObjectFlow = (edge != decisionInputFlow) &amp;&amp; (std::dynamic_pointer_cast&lt;uml::ObjectFlow>(edge) != nullptr);&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;    return isObjectFlow;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::ObjectFlow> decisionInputFlow = (std::dynamic_pointer_cast&lt;uml::DecisionNode> (this->getNode()))->getDecisionInputFlow();&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > allTokens(new Bag&lt;fUML::Token>());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > incomingEdges = this->getIncomingEdges();&#xD;&#xA;    for (unsigned int i = 0; i &lt; incomingEdges->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityEdgeInstance> edgeInstance = incomingEdges->at(i);&#xD;&#xA;        if (edgeInstance->getEdge() != decisionInputFlow) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > tokens = edgeInstance->takeOfferedTokens();&#xD;&#xA;            for (unsigned int j = 0; j &lt; tokens->size(); j++)&#xD;&#xA;            {&#xD;&#xA;                allTokens->push_back(tokens->at(j));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return allTokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Decision node &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > removedControlTokens = this->removeJoinedControlTokens(incomingTokens);&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value> > decisionValues = this->getDecisionValues(incomingTokens);&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > outgoingEdges = this->getOutgoingEdges();&#xD;&#xA;&#xD;&#xA;    for (unsigned int i = 0; i &lt; outgoingEdges->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ActivityEdgeInstance> edgeInstance = outgoingEdges->at(i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::ValueSpecification> guard = edgeInstance->getEdge()->getGuard();&#xD;&#xA;&#xD;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > offeredTokens(new Bag&lt;fUML::Token>());&#xD;&#xA;        for (unsigned int j = 0; j &lt; incomingTokens->size(); j++) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Token> incomingToken = incomingTokens->at(j);&#xD;&#xA;        &#x9;std::shared_ptr&lt;Value> decisionValue = decisionValues->at(j);&#xD;&#xA;            if (this->test(guard, decisionValue)) &#xD;&#xA;            {&#xD;&#xA;                offeredTokens->push_back(incomingToken);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        if (offeredTokens->size() > 0) &#xD;&#xA;        {&#xD;&#xA;            for (unsigned int j = 0; j &lt; removedControlTokens->size(); j++) &#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;Token> removedControlToken = removedControlTokens->at(j);&#xD;&#xA;                offeredTokens->push_back(removedControlToken);&#xD;&#xA;            }&#xD;&#xA;            edgeInstance->sendOffer(offeredTokens);&#xD;&#xA;        }&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    if (this->getDecisionInputExecution() != nullptr) {&#xD;&#xA;        this->getDecisionInputExecution()->terminate();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    ControlNodeActivationImpl::terminate();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="unsigned int i = 0;&#xD;&#xA;    bool ready = true;&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt; &quot;INCOMING EDGE SIZE:&quot;&lt;&lt; this->getIncomingEdges()->size()&lt;&lt;std::endl;)&#xD;&#xA;    while (ready &amp;&amp; (i &lt; this->getIncomingEdges()->size())) {&#xD;&#xA;        ready = this->getIncomingEdges()->at(i)->hasOffer();&#xD;&#xA;        i = i + 1;&#xD;&#xA;    }&#xD;&#xA;    DEBUG_MESSAGE(std::cout&lt;&lt; &quot;READY:&quot;&lt;&lt; ready&lt;&lt;std::endl;)&#xD;&#xA;    return ready;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="decisionInputExecution"
        ordered="false" lowerBound="1" eType="#//Execution" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActivityFinalNodeActivation" eSuperTypes="#//ControlNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ActivityExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExpansionActivationGroup.hpp&quot;&#xD;&#xA;#include &quot;fUML/ExpansionRegionActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/StructuredActivityNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityNode.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Activity final node &quot; &lt;&lt; this->getNode()->getName()&lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    if (incomingTokens->size() > 0 || this->getIncomingEdges()->size() == 0) &#xD;&#xA;    {&#xD;&#xA;&#x9;&#x9;auto this_group = this->getGroup().lock();&#xD;&#xA;&#x9;&#x9;if(this_group )&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;auto activityExecution = this_group->getActivityExecution().lock();&#xD;&#xA;&#x9;&#x9;&#x9;if (activityExecution)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;activityExecution->terminate();&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else if (this_group->getContainingNodeActivation().lock())&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;auto activation= this_group->getContainingNodeActivation().lock();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(activation)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;activation->terminateAll();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ExpansionActivationGroup> group = std::dynamic_pointer_cast&lt;ExpansionActivationGroup>(this_group);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if (group != nullptr)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;group->getRegionActivation()->terminate();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="FlowFinalNodeActivation" eSuperTypes="#//ControlNodeActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="Values">
    <eStructuralFeatures xsi:type="ecore:EReference" name="values" ordered="false"
        upperBound="-1" eType="#//Value"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClauseActivation">
    <eOperations name="recieveControl" ordered="false" lowerBound="1"/>
    <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eOperations name="runTest" ordered="false" lowerBound="1"/>
    <eOperations name="selectBody" ordered="false" lowerBound="1"/>
    <eOperations name="getDecision" ordered="false" eType="#//BooleanValue"/>
    <eOperations name="getPredecessors" ordered="false" upperBound="-1" eType="#//ClauseActivation"/>
    <eOperations name="getSuccessors" ordered="false" upperBound="-1" eType="#//ClauseActivation"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="clause" ordered="false"
        lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="conditionalNodeActivation"
        ordered="false" lowerBound="1" eType="#//ConditionalNodeActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StructuredActivityNodeActivation" eSuperTypes="#//ActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;&#xD;&#xA;#include &quot;uml/StructuredActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Action.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/OutputPin.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="doStructuredActivity" ordered="false">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="//Remark: action is not used in the specification.&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action>(this->getNode());&#xD;&#xA;    assert(action != nullptr);&#xD;&#xA;&#xD;&#xA;    // *** Concurrently send offers from all input pins. ***&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = nullptr;//action->input;&#xD;&#xA;    std::vector&lt;std::shared_ptr&lt;uml::InputPin>>::iterator i;&#xD;&#xA;&#xD;&#xA;    for (i = inputPins->begin(); i!= inputPins->end();++i)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::InputPin> inputPin = std::dynamic_pointer_cast&lt;uml::InputPin> (*i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;PinActivation> pinActivation = this->retrievePinActivation(inputPin);&#xD;&#xA;        pinActivation->sendUnofferedTokens();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;fUML::ActivityNodeActivation> > nodes = this->getActivationGroup()->getNodeActivations();&#xD;&#xA;    this->getActivationGroup()->run(nodes);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="makeActivityNodeList" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > activityNodes(new Bag&lt;uml::ActivityNode>());&#xD;&#xA;&#xD;&#xA;    for (unsigned int i = 0; i &lt; nodes->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::ActivityNode> node = nodes->at(i);&#xD;&#xA;        activityNodes->push_back(node);&#xD;&#xA;        std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action>(node);&#xD;&#xA;        if (action != nullptr) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = action->getInput();//was: nullptr;&#xD;&#xA;            for (unsigned int j = 0; j &lt; inputPins->size(); j++) &#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;uml::InputPin> inputPin = inputPins->at(j);&#xD;&#xA;                activityNodes->push_back(inputPin);&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            std::shared_ptr&lt;Bag&lt;uml::OutputPin> > outputPins = action->getOutput();//was: nullptr;&#xD;&#xA;            for (unsigned int j = 0; j &lt; outputPins->size(); j++) &#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;uml::OutputPin> outputPin = outputPins->at(j);&#xD;&#xA;                activityNodes->push_back(std::dynamic_pointer_cast&lt;uml::ActivityNode>(outputPin));&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return activityNodes;"/>
      </eAnnotations>
      <eParameters name="nodes" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ExecutableNode"/>
    </eOperations>
    <eOperations name="getPinValues" ordered="false" upperBound="-1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;PinActivation> pinActivation = std::dynamic_pointer_cast&lt;PinActivation>(this->getActivationGroup()->getNodeActivation(std::dynamic_pointer_cast&lt;uml::ActivityNode>(pin)));&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens = pinActivation->getTokens();&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Value> > values(new Bag&lt;Value>());&#xD;&#xA;    for (unsigned int i = 0; i &lt; tokens->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Token> token = tokens->at(i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;Value> value = (std::dynamic_pointer_cast&lt;ObjectToken> (token))->getValue();&#xD;&#xA;        if (value != nullptr) &#xD;&#xA;        {&#xD;&#xA;            values->push_back(value);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return values;"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
    </eOperations>
    <eOperations name="putPinValues" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;PinActivation> pinActivation = std::dynamic_pointer_cast&lt;PinActivation>(this->getActivationGroup()->getNodeActivation(std::dynamic_pointer_cast&lt;uml::ActivityNode>(pin)));&#xD;&#xA;&#xD;&#xA;    for (unsigned int i = 0; i &lt; values->size(); i++) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Value> value = values->at(i);&#xD;&#xA;    &#x9;std::shared_ptr&lt;ObjectToken> token = fUML::FUMLFactory::eInstance()->createObjectToken();&#xD;&#xA;        token->setValue(value);&#xD;&#xA;        pinActivation->addToken(token);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
      <eParameters name="values" ordered="false" upperBound="-1" eType="#//Value"/>
    </eOperations>
    <eOperations name="doAction" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="if ((std::dynamic_pointer_cast&lt;uml::StructuredActivityNode>(this->getNode()))->getMustIsolate()) &#xD;&#xA;&#x9;{&#xD;&#xA;        _beginIsolation();&#xD;&#xA;        this->doStructuredActivity();&#xD;&#xA;        _endIsolation();&#xD;&#xA;    }&#xD;&#xA;&#x9;else &#xD;&#xA;&#x9;{&#xD;&#xA;        this->doStructuredActivity();&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->terminateAll();&#xD;&#xA;    ActionActivationImpl::terminate();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getNodeActivation" ordered="false" lowerBound="1" eType="#//ActivityNodeActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ActivityNodeActivation> thisActivation = ActionActivationImpl::getNodeActivation(node);&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;ActivityNodeActivation> activation = nullptr;&#xD;&#xA;    if (thisActivation != nullptr) &#xD;&#xA;    {&#xD;&#xA;        activation = thisActivation;&#xD;&#xA;    }&#xD;&#xA;    else if (this->getActivationGroup() != nullptr)&#xD;&#xA;    {&#xD;&#xA;        activation = this->getActivationGroup()->getNodeActivation(node);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return activation;"/>
      </eAnnotations>
      <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    </eOperations>
    <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="ActionActivationImpl::createNodeActivations();&#xD;&#xA;&#xD;&#xA;&#x9;this->setActivationGroup(std::shared_ptr&lt;fUML::ActivityNodeActivationGroup>(fUML::FUMLFactory::eInstance()->createActivityNodeActivationGroup()));&#xD;&#xA;&#x9;this->getActivationGroup()->setContainingNodeActivation(getThisStructuredActivityNodeActivationPtr());&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::StructuredActivityNode> structuredActivityNode = std::dynamic_pointer_cast&lt;uml::StructuredActivityNode> (this->getNode());&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > nodes = structuredActivityNode->getNode();&#xD;&#xA;&#x9;this->getActivationGroup()->createNodeActivations(nodes);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="createEdgeInstances" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;uml::ActivityEdge> > edges = (std::dynamic_pointer_cast&lt;uml::StructuredActivityNode> (this->getNode()))->getEdge();&#xD;&#xA;&#x9;this->getActivationGroup()->createEdgeInstance(edges);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="terminateAll" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    this->getActivationGroup()->terminateAll();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    bool isSource = ActionActivationImpl::isSourceFor(edgeInstance);&#xD;&#xA;    if (!isSource) {&#xD;&#xA;        isSource = this->getActivationGroup()->hasSourceFor(edgeInstance);&#xD;&#xA;    }&#xD;&#xA;    return isSource;"/>
      </eAnnotations>
      <eParameters name="edgeInstance" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eOperations name="isSuspended" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return this->getActivationGroup()->isSuspended();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="completeAction" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Token> > incomingTokens(new Bag&lt;fUML::Token>());&#xD;&#xA;    if (!this->isSuspended()) &#xD;&#xA;    {&#xD;&#xA;        incomingTokens = ActionActivationImpl::completeAction();&#xD;&#xA;    }&#xD;&#xA;    return incomingTokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="resume" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Token> > incomingTokens = ActionActivationImpl::completeAction();&#xD;&#xA;    if (incomingTokens->size() > 0) &#xD;&#xA;    {&#xD;&#xA;        this->fire(incomingTokens);&#xD;&#xA;    }&#xD;&#xA;    if (!this->isSuspended()) &#xD;&#xA;    {&#xD;&#xA;        ActionActivationImpl::resume();&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activationGroup" ordered="false"
        lowerBound="1" eType="#//ActivityNodeActivationGroup" containment="true" eOpposite="#//ActivityNodeActivationGroup/containingNodeActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="LoopNodeActivation" eSuperTypes="#//StructuredActivityNodeActivation">
    <eOperations name="runTest" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    <eOperations name="runBody" ordered="false" lowerBound="1"/>
    <eOperations name="runLoopVariables" ordered="false" lowerBound="1"/>
    <eOperations name="makeLoopVariableList" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ActivityNode"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="bodyOutputLists" ordered="false"
        upperBound="-1" eType="#//Values" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ConditionalNodeActivation" eSuperTypes="#//StructuredActivityNodeActivation">
    <eOperations name="getClauseActivation" ordered="false" lowerBound="1" eType="#//ClauseActivation">
      <eParameters name="clause" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
    </eOperations>
    <eOperations name="runTest" ordered="false" lowerBound="1">
      <eParameters name="clause" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
    </eOperations>
    <eOperations name="selectBody" ordered="false" lowerBound="1">
      <eParameters name="clause" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="clauseActivations" ordered="false"
        upperBound="-1" eType="#//ClauseActivation" containment="true"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="selectedClauses" ordered="false"
        upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Clause"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="TokenSet">
    <eStructuralFeatures xsi:type="ecore:EReference" name="tokens" ordered="false"
        upperBound="-1" eType="#//Token"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpansionActivationGroup" eSuperTypes="#//ActivityNodeActivationGroup">
    <eStructuralFeatures xsi:type="ecore:EReference" name="regionActivation" ordered="false"
        lowerBound="1" eType="#//ExpansionRegionActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpansionRegionActivation" eSuperTypes="#//ActionActivation">
    <eOperations name="doStructuredActivity" ordered="false" lowerBound="1"/>
    <eOperations name="runGroup" ordered="false" lowerBound="1">
      <eParameters name="activationGroup" ordered="false" lowerBound="1" eType="#//ExpansionActivationGroup"/>
    </eOperations>
    <eOperations name="getExpansionNodeActivation" ordered="false" lowerBound="1"
        eType="#//ExpansionNodeActivation">
      <eParameters name="node" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//ExpansionNode"/>
    </eOperations>
    <eOperations name="numberOfValues" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inputTokens" ordered="false"
        upperBound="-1" eType="#//TokenSet"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inputExpansionTokens" ordered="false"
        lowerBound="1" upperBound="-1" eType="#//TokenSet"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="activationGroups" ordered="false"
        upperBound="-1" eType="#//ExpansionActivationGroup"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ExpansionNodeActivation" eSuperTypes="#//ObjectNodeActivation">
    <eOperations name="getExpansionRegionActivation" ordered="false" lowerBound="1"
        eType="#//ExpansionRegionActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ActionActivation" abstract="true" eSuperTypes="#//ActivityNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;algorithm>&#xD;&#xA;#include &lt;iterator>&#xD;&#xA;#include &quot;abstractDataTypes/SubsetUnion.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ActivityNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/ControlToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/Executor.hpp&quot;&#xD;&#xA;#include &quot;fUML/FeatureValue.hpp&quot;&#xD;&#xA;#include &quot;fUML/ForkNodeActivation.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Link.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;&#xD;&#xA;#include &quot;fUML/PinActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/Action.hpp&quot;&#xD;&#xA;#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/DataStoreNode.hpp&quot;&#xD;&#xA;#include &quot;uml/LiteralBoolean.hpp&quot;&#xD;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/UmlFactory.hpp&quot;&#xD;&#xA;#include &quot;uml/ForkNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Activity.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="isFirng" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    return this->isFiring();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="doAction" ordered="false" lowerBound="1"/>
    <eOperations name="sendOffers" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    // *** Send offers from all output pins concurrently. ***&#xD;&#xA;&#x9;std::shared_ptr&lt;Subset&lt;fUML::OutputPinActivation, fUML::PinActivation > > outputPins=this->getOutputPinActivation();&#xD;&#xA;&#x9;for(std::shared_ptr&lt;fUML::OutputPinActivation> pin: *outputPins)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;pin->sendUnofferedTokens();&#xD;&#xA;&#x9;}&#xD;&#xA;&#xD;&#xA;    // Send offers on all outgoing control flows.&#xD;&#xA;    if (!this->getOutgoingEdges()->empty()) {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;        tokens->push_back(std::shared_ptr&lt;Token>(fUML::FUMLFactory::eInstance()->createControlToken()));&#xD;&#xA;        this->addTokens(tokens);&#xD;&#xA;        //front ok - because of adding anonymus fork node instead of multiple outgoing edges&#xD;&#xA;        this->getOutgoingEdges()->front()->sendOffer(tokens);&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="addPinActivation" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="pinActivation->setActionActivation(getThisActionActivationPtr());&#xD;&#xA;&#xD;&#xA;&#x9;switch(pinActivation->eClass()->getClassifierID())&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;case FUMLPackage::INPUTPINACTIVATION_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::InputPinActivation> inPinActivation= std::dynamic_pointer_cast&lt;InputPinActivation> (pinActivation);&#xD;&#xA;&#x9;&#x9;&#x9;this->getInputPinActivation()->push_back(inPinActivation);&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;case FUMLPackage::OUTPUTPINACTIVATION_CLASS:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::OutputPinActivation> outPinActivation= std::dynamic_pointer_cast&lt;OutputPinActivation> (pinActivation);&#xD;&#xA;&#x9;&#x9;&#x9;this->getOutputPinActivation()->push_back(outPinActivation);&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;default:&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;throw &quot;ActionActivationImpl::addPinActivation: unknown pin type.&quot;;&#xD;&#xA;&#x9;&#x9;&#x9;break;&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="pinActivation" ordered="false" lowerBound="1" eType="#//PinActivation"/>
    </eOperations>
    <eOperations name="retrievePinActivation" ordered="false" lowerBound="1" eType="#//PinActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    std::shared_ptr&lt;PinActivation> pinActivation = nullptr;&#xD;&#xA;&#xD;&#xA;    Bag&lt;PinActivation>* pinActivationListPtr = this->getPinActivation().get();&#xD;&#xA;    const int size = pinActivationListPtr->size();&#xD;&#xA;    std::shared_ptr&lt;PinActivation>thisPinActivation;&#xD;&#xA;    for(int i=0; i&lt; size; i++)&#xD;&#xA;    {&#xD;&#xA;        thisPinActivation = (*pinActivationListPtr)[i];&#xD;&#xA;        if (thisPinActivation->getNode() == pin) {&#xD;&#xA;            pinActivation = thisPinActivation;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return pinActivation;"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Pin"/>
    </eOperations>
    <eOperations name="putToken" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    DEBUG_MESSAGE(std::cout&lt;&lt;(&quot;[putToken] node = &quot; + this->getNode()->getName())&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;ObjectToken> token = fUML::FUMLFactory::eInstance()->createObjectToken();&#xD;&#xA;    token->setValue(value);&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;PinActivation> pinActivation = this->retrievePinActivation(pin);&#xD;&#xA;    pinActivation->addToken(token);&#xD;&#xA;    ACT_DEBUG(std::cout&lt;&lt;&quot;SET_TOKEN;NODE:&quot;&lt;&lt; this->getNode()->getQualifiedName() &lt;&lt;&quot;;TOKEN:&quot;&lt;&lt;token->getValue() &lt;&lt; &quot;;CURRENT_TOKENS:&quot;&lt;&lt; (this->getHeldTokens()->size()+1) &lt;&lt;&quot;;DIRECTION:add&quot;&lt;&lt;std::endl;)"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="putTokens" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="for (std::shared_ptr&lt;Value> value : *values)&#xD;&#xA;    {&#xD;&#xA;        this->putToken(pin,value);&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//OutputPin"/>
      <eParameters name="values" ordered="false" upperBound="-1" eType="#//Value"/>
    </eOperations>
    <eOperations name="getTokens" ordered="false" upperBound="-1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[getTokens] node = &quot;  &lt;&lt; this->getNode()->getName()  &lt;&lt; &quot;, pin = &quot;  &lt;&lt; pin->getName()&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;PinActivation> pinActivation(this->retrievePinActivation(pin));&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Value> > values(new Bag&lt;Value>());&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > tokenList = pinActivation->getUnofferedTokens();&#xD;&#xA;    for(std::shared_ptr&lt;Token> token : *tokenList)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;ObjectToken> objToken = std::dynamic_pointer_cast&lt;ObjectToken>(token);&#xD;&#xA;        if(objToken!=nullptr)&#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;Value> value = objToken->getValue();&#xD;&#xA;            if(value != nullptr)&#xD;&#xA;            {&#xD;&#xA;                values->push_back(value);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return values;"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//InputPin"/>
    </eOperations>
    <eOperations name="takeTokens" ordered="false" upperBound="-1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[takeTokens] node = &quot;  &lt;&lt; this->getNode()->getName()  &lt;&lt; &quot;, pin = &quot;  &lt;&lt; pin->getName()&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;PinActivation> pinActivation = this->retrievePinActivation(pin);&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Value> > values(new Bag&lt;Value>());&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > tokenList = pinActivation->takeUnofferedTokens();&#xD;&#xA;&#x9;for(std::shared_ptr&lt;Token> token : *tokenList)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Value> value = token->getValue();&#xD;&#xA;        if(value != nullptr)&#xD;&#xA;        {&#xD;&#xA;        &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;ActionActivation - takeTokens value&quot;&lt;&lt;value->toString()&lt;&lt;std::endl;)&#xD;&#xA;            values->push_back(value);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return values;"/>
      </eAnnotations>
      <eParameters name="pin" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//InputPin"/>
    </eOperations>
    <eOperations name="valueParticipatesInLink" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="bool participates = false;&#xD;&#xA;&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;FeatureValue> > featureValueList = link->getFeatureValues();&#xD;&#xA;    for (std::shared_ptr&lt;FeatureValue> featureValue : *featureValueList)&#xD;&#xA;    {&#xD;&#xA;        if(featureValue->getValues()->front()->equals(value))&#xD;&#xA;        {&#xD;&#xA;            participates = true;&#xD;&#xA;            break;&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return participates;"/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Value"/>
      <eParameters name="link" ordered="false" lowerBound="1" eType="#//Link"/>
    </eOperations>
    <eOperations name="makeBooleanValue" ordered="false" lowerBound="1" eType="#//BooleanValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value=" std::shared_ptr&lt;uml::LiteralBoolean> booleanValue = uml::UmlFactory::eInstance()->createLiteralBoolean_in_Namespace(std::shared_ptr&lt;uml::Class>());&#xD;&#xA;    booleanValue->setValue(value);&#xD;&#xA;    return std::dynamic_pointer_cast&lt;fUML::BooleanValue>(this->getExecutionLocus()->getExecutor()->evaluate(booleanValue));"/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eOperations>
    <eOperations name="run" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;    ActivityNodeActivationImpl::run();&#xD;&#xA;&#xD;&#xA;    if (!this->getOutgoingEdges()->empty()) {&#xD;&#xA;    &#x9;auto target=this->getOutgoingEdges()->front()->getTarget().lock();&#xD;&#xA;    &#x9;if(target)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;target->run();&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    this->setFiring( false);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action> (this->getNode());&#xD;&#xA;&#xD;&#xA;    if(action != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->setFiring(!action->getIsLocallyReentrant());&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;Token> > offeredTokens(new Bag&lt;Token>());&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > incomingEdgeList = this->getIncomingEdges();&#xD;&#xA;    for(std::shared_ptr&lt;ActivityEdgeInstance> incomingEdge : *incomingEdgeList)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;Token> > tokenList = incomingEdge->takeOfferedTokens();&#xD;&#xA;        for(std::shared_ptr&lt;Token> token: *tokenList)&#xD;&#xA;        {&#xD;&#xA;            token->withdraw();&#xD;&#xA;            offeredTokens->push_back(token);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    // *** Fire all input pins concurrently. ***&#xD;&#xA;    if(action != nullptr)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Subset&lt;fUML::InputPinActivation, fUML::PinActivation > > inputPinActivations = this->getInputPinActivation();&#xD;&#xA;        for (std::shared_ptr&lt;fUML::InputPinActivation> pinActivation : *inputPinActivations)&#xD;&#xA;        {&#xD;&#xA;            if(pinActivation!=nullptr)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;Token> > tokens = pinActivation->takeOfferedTokens();&#xD;&#xA;            &#x9;pinActivation->fire(tokens);&#xD;&#xA;            &#x9;offeredTokens->insert(offeredTokens->end(), tokens->begin(), tokens->end());&#xD;&#xA;            }&#xD;&#xA;            else&#xD;&#xA;            {&#xD;&#xA;                DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Warning! Firing: A Pin was null!&quot;&lt;&lt;std::endl;)&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return offeredTokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    do {&#xD;&#xA;&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Action &quot;  &lt;&lt; this->getNode()->getName()  &lt;&lt; &quot;...&quot;&lt;&lt;std::endl;)&#xD;&#xA;        DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[event] Fire activity=&quot; &lt;&lt; this->getActivityExecution()->getBehavior()->getName() &lt;&lt; &quot; action=&quot;  &lt;&lt; this->getNode()->getName()&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;        this->doAction();&#xD;&#xA;        this->sendOffers();&#xD;&#xA;        incomingTokens = this->completeAction();&#xD;&#xA;&#xD;&#xA;    } while (incomingTokens->size() > 0);"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;    ActivityNodeActivationImpl::terminate();&#xD;&#xA;&#xD;&#xA;    if (!this->getOutgoingEdges()->empty())&#xD;&#xA;    {&#xD;&#xA;    &#x9;auto target=this->getOutgoingEdges()->front()->getTarget().lock();&#xD;&#xA;    &#x9;if(target)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;target->terminate();&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::Action> actionNode = std::dynamic_pointer_cast&lt;uml::Action>(this->getNode());&#xD;&#xA;    bool ready = false;&#xD;&#xA;    if(actionNode != nullptr)&#xD;&#xA;    {&#xD;&#xA;        ready = ActivityNodeActivationImpl::isReady()&#xD;&#xA;                 &amp;&amp; ((actionNode->getIsLocallyReentrant()) || !this->isFiring());&#xD;&#xA;&#xD;&#xA;         //Has any Edge Offers?&#xD;&#xA;         if(ready)&#xD;&#xA;         {&#xD;&#xA;        &#x9; std::shared_ptr&lt;Bag&lt;fUML::ActivityEdgeInstance> > edgeList = this->getIncomingEdges();&#xD;&#xA;             ready = std::all_of(edgeList->begin(),edgeList->end(),[](std::shared_ptr&lt;ActivityEdgeInstance> edge ){return edge->hasOffer();});&#xD;&#xA;         }&#xD;&#xA;&#xD;&#xA;         //Have all Inputpin an Activation?&#xD;&#xA;         if(ready)&#xD;&#xA;         {&#xD;&#xA;        &#x9; std::shared_ptr&lt;Subset&lt;fUML::InputPinActivation, fUML::PinActivation > > activations = this->getInputPinActivation();&#xD;&#xA;             ready = std::all_of(activations->begin(),activations->end(),[this]( std::shared_ptr&lt;fUML::InputPinActivation> pin){return pin->isReady();});&#xD;&#xA;         }&#xD;&#xA;&#xD;&#xA;    }&#xD;&#xA;    else&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::DataStoreNode> dActivation = std::dynamic_pointer_cast&lt;uml::DataStoreNode>(this->getNode());&#xD;&#xA;        if(dActivation != nullptr)&#xD;&#xA;        {&#xD;&#xA;            ready = true; //TODO&#xD;&#xA;            //Has any Edge Offers?&#xD;&#xA;            if(ready)&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;fUML::ActivityEdgeInstance> > edgeList = this->getIncomingEdges();&#xD;&#xA;                ready = std::all_of(edgeList->begin(),edgeList->end(),[](std::shared_ptr&lt;ActivityEdgeInstance> edge ){return edge->hasOffer();});&#xD;&#xA;            }&#xD;&#xA;&#xD;&#xA;            if(!ready)&#xD;&#xA;            {&#xD;&#xA;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return ready;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="completeAction" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Checking if &quot; &lt;&lt; this->getNode()->getName() &lt;&lt; &quot; should fire again...&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    _beginIsolation();&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;Token> > incomingTokens(new Bag&lt;Token>());&#xD;&#xA;&#xD;&#xA;    this->setFiring(false);&#xD;&#xA;    if (this->isReady()) {&#xD;&#xA;        incomingTokens = this->takeOfferedTokens();&#xD;&#xA;        this->setFiring(this->isFirng() &amp;&amp; !incomingTokens->empty());&#xD;&#xA;    }&#xD;&#xA;    _endIsolation();&#xD;&#xA;&#xD;&#xA;    return incomingTokens;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="createNodeActivations" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;uml::Action> action = std::dynamic_pointer_cast&lt;uml::Action> (this->getNode());&#xD;&#xA;&#xD;&#xA;    //createinputpin activation&#xD;&#xA;&#x9;std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > inputPinNodes(new Bag&lt;uml::ActivityNode>());&#xD;&#xA;    if(action)&#xD;&#xA;    {&#xD;&#xA;    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Found&quot;&lt;&lt;action->getInput()->size()&lt;&lt;&quot;input pin(s).&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::InputPin> > inputPins = action->getInput();&#xD;&#xA;    &#x9;for(std::shared_ptr&lt;uml::InputPin> pin : *inputPins)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;if(pin!=nullptr)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;inputPinNodes->push_back(pin);&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;&#x9;else&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Warning! Found null Input pin&quot;&lt;&lt;std::endl;)&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //create outputpin activation&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;uml::ActivityNode> > outputPinNodes(new Bag&lt;uml::ActivityNode>());&#xD;&#xA;    if(action)&#xD;&#xA;    {&#xD;&#xA;    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Found&quot;&lt;&lt;action->getOutput()->size()&lt;&lt;&quot;output pin(s).&quot;&lt;&lt;std::endl;)&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::OutputPin> > outputPins = action->getOutput();&#xD;&#xA;    &#x9;for(std::shared_ptr&lt;uml::OutputPin> pin : *outputPins)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;if(pin!=nullptr)&#xD;&#xA;            {&#xD;&#xA;    &#x9;&#x9;&#x9;outputPinNodes->push_back(pin);&#xD;&#xA;            }&#xD;&#xA;    &#x9;&#x9;else&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;Warning! Found null Output pin&quot;&lt;&lt;std::endl;)&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    auto group = this->getGroup().lock();&#xD;&#xA;    if(group )&#xD;&#xA;    {&#xD;&#xA;    &#x9;group->createNodeActivations(inputPinNodes);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for(std::shared_ptr&lt;uml::ActivityNode> node : *inputPinNodes)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;this->addPinActivation(std::dynamic_pointer_cast&lt;PinActivation> (group->getNodeActivation(node)));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;group->createNodeActivations(outputPinNodes);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;for(std::shared_ptr&lt;uml::ActivityNode> node : *outputPinNodes)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;this->addPinActivation(std::dynamic_pointer_cast&lt;PinActivation> (group->getNodeActivation(node)));&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="addOutgoingEdge" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;ActivityNodeActivation> forkNodeActivation;&#xD;&#xA;&#xD;&#xA;    if (this->getOutgoingEdges()->empty()) &#xD;&#xA;    {&#xD;&#xA;    &#x9;//Create anonymousFork&#xD;&#xA;&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::Activity> activity; // need Activity 2 create anonymousFork&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::UmlFactory> factory = uml::UmlFactory::eInstance();&#xD;&#xA;&#xD;&#xA;    &#x9;auto group=this->getGroup().lock();&#xD;&#xA;    &#x9;if(group)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;auto execution = group->getActivityExecution().lock();&#xD;&#xA;    &#x9;&#x9;if(execution)&#xD;&#xA;    &#x9;&#x9;{&#xD;&#xA;    &#x9;    &#x9;activity= std::dynamic_pointer_cast&lt;uml::Activity>(execution ->getBehavior());&#xD;&#xA;    &#x9;&#x9;}&#xD;&#xA;    &#x9;}&#xD;&#xA;&#xD;&#xA;    &#x9;if(activity)&#xD;&#xA;    &#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::ForkNode> newForkNode = factory->createForkNode_in_Activity(activity);&#xD;&#xA;&#x9;&#x9;&#x9;newForkNode->setName(this->getNode()->getName()+&quot;anonymousFork&quot;);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;forkNodeActivation = this->getGroup().lock()->createNodeActivation(newForkNode);&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;ActivityEdgeInstance> newEdge(fUML::FUMLFactory::eInstance()->createActivityEdgeInstance());&#xD;&#xA;&#x9;&#x9;&#x9;ActivityNodeActivationImpl::addOutgoingEdge(newEdge);&#xD;&#xA;&#x9;&#x9;&#x9;forkNodeActivation->addIncomingEdge(newEdge);&#xD;&#xA;&#x9;&#x9;&#x9;edge->setSource(forkNodeActivation);&#xD;&#xA;    &#x9;}&#xD;&#xA;    &#x9;else&#xD;&#xA;    &#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;throw &quot;ActionActivationImpl::addOutgoingEdge: unknown Activity to create anonymousFork.&quot;;&#xD;&#xA;    &#x9;}&#xD;&#xA;    } &#xD;&#xA;    else &#xD;&#xA;    {&#xD;&#xA;        forkNodeActivation = this->getOutgoingEdges()->front()->getTarget().lock();&#xD;&#xA;    }&#xD;&#xA;    &#xD;&#xA;    forkNodeActivation->addOutgoingEdge(edge);"/>
      </eAnnotations>
      <eParameters name="edge" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eOperations name="isSourceFor" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;    bool isSource = false;&#xD;&#xA;    if (this->getOutgoingEdges()->size() > 0)&#xD;&#xA;    {&#xD;&#xA;    &#x9;auto target=this->getOutgoingEdges()->at(0)->getTarget().lock();&#xD;&#xA;    &#x9;if(target)&#xD;&#xA;    &#x9;{&#xD;&#xA;    &#x9;&#x9;isSource = target->isSourceFor(edgeInstance);&#xD;&#xA;    &#x9;}&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return isSource;"/>
      </eAnnotations>
      <eParameters name="edgeInstance" ordered="false" lowerBound="1" eType="#//ActivityEdgeInstance"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="pinActivation" ordered="false"
        upperBound="-1" eType="#//PinActivation" eOpposite="#//PinActivation/actionActivation">
      <eAnnotations source="union"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="firing" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="false"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="inputPinActivation" ordered="false"
        upperBound="-1" eType="#//InputPinActivation">
      <eAnnotations source="subsets" references="#//ActionActivation/pinActivation"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="outputPinActivation" ordered="false"
        upperBound="-1" eType="#//OutputPinActivation">
      <eAnnotations source="subsets" references="#//ActionActivation/pinActivation"/>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InvocationActionActivation" abstract="true"
      eSuperTypes="#//ActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="SendSignalActionActivation" eSuperTypes="#//InvocationActionActivation">
    <eOperations name="doAction" ordered="false" lowerBound="1"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CallActionActivation" abstract="true"
      eSuperTypes="#//InvocationActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/Execution.hpp&quot;&#xD;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;&#xD;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/OutputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xD;&#xA;#include &quot;uml/CallAction.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/ObjectToken.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getCallExecution" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    //TODO verify!&#xD;&#xA;    return this->m_callExecutions->front();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="removeCallExecution" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    bool notFound = true;&#xD;&#xA;    unsigned int i = 0;&#xD;&#xA;    while (notFound &amp;&amp; (i &lt; this->getCallExecutions()->size())) {&#xD;&#xA;        if (this->getCallExecutions()->at(i) == execution) {&#xD;&#xA;            this->getCallExecutions()->erase(this->getCallExecutions()->begin() + i);&#xD;&#xA;            notFound = false;&#xD;&#xA;        }&#xD;&#xA;    }"/>
      </eAnnotations>
      <eParameters name="execution" ordered="false" lowerBound="1" eType="#//Execution"/>
    </eOperations>
    <eOperations name="doAction" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;Execution> callExecution = this->getCallExecution();&#xD;&#xA;&#xD;&#xA;    if (callExecution != nullptr)&#xD;&#xA;    {&#xD;&#xA;        this->getCallExecutions()->push_back(callExecution);&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;uml::CallAction> callAction = std::dynamic_pointer_cast&lt;uml::CallAction> (this->getNode());&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;uml::InputPin> > argumentPins = callAction->getArgument();&#xD;&#xA;        std::shared_ptr&lt;Subset&lt;fUML::InputPinActivation, fUML::PinActivation>> inputActivationList=this->getInputPinActivation();&#xD;&#xA;&#xD;&#xA;        unsigned int pinNumber = 0;&#xD;&#xA;        std::shared_ptr&lt;uml::Behavior> beh = callExecution->getBehavior();&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;uml::Parameter> > parameterList = beh->getOwnedParameter();&#xD;&#xA;        for (std::shared_ptr&lt;uml::Parameter> parameter : *parameterList)&#xD;&#xA;        {&#xD;&#xA;        &#x9;uml::ParameterDirectionKind direction=parameter->getDirection();&#xD;&#xA;            if (direction == uml::ParameterDirectionKind::IN || direction == uml::ParameterDirectionKind::INOUT)&#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;ParameterValue> parameterValue(fUML::FUMLFactory::eInstance()->createParameterValue());&#xD;&#xA;                parameterValue->setParameter(parameter);&#xD;&#xA;&#xD;&#xA;                std::shared_ptr&lt;Bag&lt;Value> > values = parameterValue->getValues();&#xD;&#xA;                std::shared_ptr&lt;fUML::InputPinActivation> activation =inputActivationList->at(pinNumber);&#xD;&#xA;            &#x9;std::shared_ptr&lt;Bag&lt;Token> > tokenList = activation->takeUnofferedTokens();&#xD;&#xA;            &#x9;for(std::shared_ptr&lt;Token> token : *tokenList)&#xD;&#xA;                {&#xD;&#xA;                &#x9;std::shared_ptr&lt;Value> value = token->getValue();&#xD;&#xA;                    if(value != nullptr)&#xD;&#xA;                    {&#xD;&#xA;                    &#x9;DEBUG_MESSAGE(std::cout&lt;&lt;&quot;ActionActivation - takeTokens value&quot;&lt;&lt;value->toString()&lt;&lt;std::endl;)&#xD;&#xA;                        values->push_back(value);&#xD;&#xA;                    }&#xD;&#xA;                }&#xD;&#xA;                callExecution->setParameterValue(parameterValue);&#xD;&#xA;                pinNumber++;&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        callExecution->execute();&#xD;&#xA;&#xD;&#xA;&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;uml::OutputPin> > resultPins = callAction->getResult();&#xD;&#xA;        std::shared_ptr&lt;Bag&lt;ParameterValue> > outputParameterValues = callExecution->getOutputParameterValues();&#xD;&#xA;        std::shared_ptr&lt;Subset&lt;fUML::OutputPinActivation, fUML::PinActivation>> outputActivationList=this->getOutputPinActivation();&#xD;&#xA;        pinNumber = 0;&#xD;&#xA;        parameterList = callExecution->getBehavior()->getOwnedParameter();&#xD;&#xA;        for (std::shared_ptr&lt;uml::Parameter> parameter : *parameterList)&#xD;&#xA;        {&#xD;&#xA;            if (!(parameter->getDirection() == uml::ParameterDirectionKind::IN))&#xD;&#xA;            {&#xD;&#xA;                for (std::shared_ptr&lt;ParameterValue> outputParameterValue : *outputParameterValues)&#xD;&#xA;                {&#xD;&#xA;                    if (outputParameterValue->getParameter() == parameter)&#xD;&#xA;                    {&#xD;&#xA;    &#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::OutputPinActivation> resultPinActivation = outputActivationList->at(pinNumber);&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value> > values = outputParameterValue->getValues();&#xD;&#xA;&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;for (std::shared_ptr&lt;Value> value : *values)&#xD;&#xA;        &#x9;&#x9;&#x9;    {&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout&lt;&lt;(&quot;[putToken] node = &quot; + this->getNode()->getName())&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ObjectToken> token = fUML::FUMLFactory::eInstance()->createObjectToken();&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;&#x9;token->setValue(value);&#xD;&#xA;&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;&#x9;resultPinActivation->addToken(token);&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;&#x9;ACT_DEBUG(std::cout&lt;&lt;&quot;SET_TOKEN;NODE:&quot;&lt;&lt; resultPinActivation->getNode()->getQualifiedName() &lt;&lt;&quot;;TOKEN:&quot;&lt;&lt;token->getValue() &lt;&lt; &quot;;CURRENT_TOKENS:&quot;&lt;&lt; (this->getHeldTokens()->size()+1) &lt;&lt;&quot;;DIRECTION:add&quot;&lt;&lt;std::endl;)&#xD;&#xA;        &#x9;&#x9;&#x9;    }&#xD;&#xA;            &#x9;&#x9;&#x9;pinNumber++;&#xD;&#xA;        &#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;        &#x9;&#x9;&#x9;}&#xD;&#xA;        &#x9;&#x9;}&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        callExecution->destroy();&#xD;&#xA;        this->removeCallExecution(callExecution);&#xD;&#xA;    }"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="terminate" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;Bag&lt;fUML::Execution> > executionList = this->getCallExecutions();&#xD;&#xA;&#x9;for (std::shared_ptr&lt;Execution>  execution: *executionList)&#xD;&#xA;    {&#xD;&#xA;        execution->terminate();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    InvocationActionActivationImpl::terminate();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="callExecutions" ordered="false"
        upperBound="-1" eType="#//Execution" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CallBehaviorActionActivation" eSuperTypes="#//CallActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ExecutionFactory.hpp&quot;&#xD;&#xA;#include &quot;fUML/Locus.hpp&quot;&#xD;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xD;&#xA;#include &quot;uml/CallBehaviorAction.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getCallExecution" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;uml::CallBehaviorAction> callBehaviorAction = std::dynamic_pointer_cast&lt;uml::CallBehaviorAction> (this->getNode());&#xD;&#xA;    if(callBehaviorAction != nullptr)&#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::Behavior> behavior = callBehaviorAction->getBehavior();&#xD;&#xA;    &#x9;std::shared_ptr&lt;fUML::Object> context = nullptr;&#xD;&#xA;&#xD;&#xA;        if(behavior!=nullptr)&#xD;&#xA;        {&#xD;&#xA;            if (behavior->getContext()!= nullptr) &#xD;&#xA;            {&#xD;&#xA;                DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[getCallExecution] behavior context = &quot; &lt;&lt; behavior->getContext()->getName()&lt;&lt;std::endl;)&#xD;&#xA;                context = this->getExecutionContext();&#xD;&#xA;            }&#xD;&#xA;            return this->getExecutionLocus()->getFactory()->createExecution(behavior,context);&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;    return nullptr;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CallOperationActionActivation" eSuperTypes="#//CallActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ActivityExecution.hpp&quot;&#xD;&#xA;#include &quot;fUML/Execution.hpp&quot;&#xD;&#xA;#include &quot;fUML/Reference.hpp&quot;&#xD;&#xA;#include &quot;uml/CallOperationAction.hpp&quot;&#xD;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xD;&#xA;#include &quot;uml/Property.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getCallExecution" ordered="false" lowerBound="1" eType="#//Execution">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;std::shared_ptr&lt;fUML::Execution> execution = nullptr;&#xD;&#xA;&#x9;std::shared_ptr&lt;uml::CallOperationAction> action = std::dynamic_pointer_cast&lt;uml::CallOperationAction> (this->getNode());&#xD;&#xA;&#x9;if(action != nullptr)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;//Pin name&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> targetPin = action->getTarget();&#xD;&#xA;&#x9;&#x9;std::string name = targetPin->getName();&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Value> target = nullptr;&#xD;&#xA;&#x9;&#x9;std::string attributeName = &quot;&quot;;&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;if(name.empty() || name.find(&quot;self&quot;) == 0)&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Object> context = this->getActivityExecution()->getContext();&#xD;&#xA;&#x9;&#x9;&#x9;if(nullptr != context)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;execution = context->dispatch(action->getOperation());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;else if(name.find(&quot;self&quot;) == 0)&#xD;&#xA;//&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;std::cout &lt;&lt; &quot;starts with&quot; &lt;&lt; std::endl;&#xD;&#xA;//&#x9;&#x9;&#x9;attributeName = name.substr (5, std::string::npos);&#xD;&#xA;//&#xD;&#xA;//&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Classifier> context = action->getContext();&#xD;&#xA;//&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;uml::Property> > attributes = context->getAllAttributes();&#xD;&#xA;//&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> attribute = nullptr;&#xD;&#xA;//&#xD;&#xA;//&#x9;&#x9;&#x9;for(unsigned int i=0; i&lt;attributes->size(); i++)&#xD;&#xA;//&#x9;&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;if((*attributes)[i]->getName() == attributeName)&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;attribute = (*attributes)[i];&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;&#x9;break;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;&#x9;}&#xD;&#xA;//&#xD;&#xA;//&#x9;&#x9;&#x9;if(nullptr == attribute)&#xD;&#xA;//&#x9;&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;Could not find the attribute in the current context for the target pin &quot; &lt;&lt; attributeName &lt;&lt; std::endl;&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;exit(EXIT_FAILURE);&#xD;&#xA;//&#x9;&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;&#x9;else&#xD;&#xA;//&#x9;&#x9;&#x9;{&#xD;&#xA;//&#x9;&#x9;&#x9;&#x9;DEBUG_MESSAGE(std::cout &lt;&lt; &quot;Self attribute found for the target pin&quot; &lt;&lt;std::endl;)&#xD;&#xA;//&#x9;&#x9;&#x9;}&#xD;&#xA;//&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin> t = action->getTarget();&#xD;&#xA;&#x9;&#x9;&#x9;if(nullptr==t)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] Target is null&quot; &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::PinActivation> pa = this->retrievePinActivation(t);&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr==pa)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] PinActivation is null&quot; &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > unofferedTokens = pa->getUnofferedTokens();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr == unofferedTokens)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] UnofferedTokens are null&quot; &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Token> firstToken = unofferedTokens->front();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if(nullptr==firstToken)&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::cerr &lt;&lt; &quot;[getCallExecution] FirstToken is null&quot; &lt;&lt; std::endl;&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;target  = firstToken->getValue();&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Reference> ref = std::dynamic_pointer_cast&lt;fUML::Reference>(target);&#xD;&#xA;&#x9;&#x9;&#x9;if(nullptr != ref)&#xD;&#xA;&#x9;&#x9;&#x9;{&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;execution = ref->dispatch(action->getOperation());&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return execution;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="PinActivation" abstract="true" eSuperTypes="#//ObjectNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;uml/ActivityNode.hpp&quot;&#xD;&#xA;#include &quot;uml/Pin.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="    DEBUG_MESSAGE(std::cout&lt;&lt;&quot;[fire] Pin &quot; &lt;&lt; (this->getNode() == nullptr ? &quot;&quot; : this->getNode()->getName() + &quot;...&quot;)&lt;&lt;std::endl;)&#xD;&#xA;&#xD;&#xA;    this->addTokens(incomingTokens);"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
    <eOperations name="takeOfferedTokens" ordered="false" upperBound="-1" eType="#//Token">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="int count = this->countUnofferedTokens();&#xD;&#xA;    int upper = -1;&#xD;&#xA;&#xD;&#xA;    //Note: A pin activation used in an expansion activation group will have this.node == null&#xD;&#xA;    if (this->getNode() != nullptr) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;uml::Pin> pin = std::dynamic_pointer_cast&lt;uml::Pin>(this->getNode());&#xD;&#xA;        upper = pin->getUpper();&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    std::shared_ptr&lt;Bag&lt;Token> > tokens(new Bag&lt;Token>());&#xD;&#xA;&#xD;&#xA;    if (upper &lt; 0 || count &lt; upper) &#xD;&#xA;    {&#xD;&#xA;    &#x9;std::shared_ptr&lt;Bag&lt;ActivityEdgeInstance> > incomingEdges = this->getIncomingEdges();&#xD;&#xA;        for (unsigned int i = 0; i &lt; incomingEdges->size(); i++) &#xD;&#xA;        {&#xD;&#xA;        &#x9;std::shared_ptr&lt;ActivityEdgeInstance> edge = incomingEdges->at(i);&#xD;&#xA;            int incomingCount = edge->countOfferedValue();&#xD;&#xA;            std::shared_ptr&lt;Bag&lt;Token> > incomingTokens(new Bag&lt;Token>());&#xD;&#xA;            if (upper &lt; 0 || incomingCount &lt; upper - count) &#xD;&#xA;            {&#xD;&#xA;                incomingTokens = edge->takeOfferedTokens();&#xD;&#xA;                count = count + incomingCount;&#xD;&#xA;            }&#xD;&#xA;            else if (count &lt; upper) &#xD;&#xA;            {&#xD;&#xA;                incomingTokens = edge->takeOfferedTokens(upper - count);&#xD;&#xA;                count = upper;&#xD;&#xA;            }&#xD;&#xA;            for (unsigned int j = 0; j &lt; incomingTokens->size(); j++) &#xD;&#xA;            {&#xD;&#xA;            &#x9;std::shared_ptr&lt;Token> token = incomingTokens->at(j);&#xD;&#xA;                tokens->push_back(token);&#xD;&#xA;            }&#xD;&#xA;        }&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    return tokens;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="actionActivation" ordered="false"
        eType="#//ActionActivation" eOpposite="#//ActionActivation/pinActivation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="AggregationKind" value="shared"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="InputPinActivation" eSuperTypes="#//PinActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/ActionActivation.hpp&quot;&#xD;&#xA;#include &quot;uml/Pin.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="recieveOffer" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="this->getActionActivation().lock()->recieveOffer();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isReady" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;bool ready = ActivityNodeActivationImpl::isReady();&#xD;&#xA;&#x9;if (getNode()->getName().find(&quot;self&quot;) == 0)&#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;return true;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;if (ready) &#xD;&#xA;&#x9;{&#xD;&#xA;&#x9;&#x9;int totalValueCount = this->countUnofferedTokens() + this->countOfferedValues();&#xD;&#xA;&#x9;&#x9;int minimum = std::dynamic_pointer_cast&lt;uml::Pin>(this->getNode())->getLower();&#xD;&#xA;&#x9;&#x9;ready = (totalValueCount >= minimum);&#x9;&#xD;&#xA;&#x9;}&#xD;&#xA;&#x9;return ready;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="OutputPinActivation" eSuperTypes="#//PinActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="ValueSpecificActionActivation" eSuperTypes="#//ActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="TestIdentityActionActivation" eSuperTypes="#//ActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="ReadSelfActionActivation" eSuperTypes="#//ActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;uml/ReadSelfAction.hpp&quot;&#xA;#include &quot;fUML/Reference.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="doAction">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="// Get the context object of the activity execution containing this action activation and place a reference to it on the result output pin.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::ReadSelfAction> action = std::dynamic_pointer_cast&lt;uml::ReadSelfAction>(this->m_node);&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Reference> reference= fUML::FUMLFactory::eInstance()->createReference();&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Object> context=this->getExecutionContext();&#x9;&#xA;&#x9;&#x9;if(context)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;reference->setReferent(context);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::OutputPin > outputPin=action->getResult();&#xA;&#x9;&#x9;&#x9;if(outputPin)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this->putToken(action->getResult(), reference);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;throw &quot;invalid output pin&quot;;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;Invalid ExecutionContext&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;throw &quot;Unexpected invalid ReadSelfAction&quot;;&#xA;&#x9;}&#xA;"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DestroyObjectActionActivation" eSuperTypes="#//ActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;uml/Property.hpp&quot;&#xA;#include &quot;uml/DestroyObjectAction.hpp&quot;&#xA;#include &quot;fUML/Reference.hpp&quot;&#xA;#include &quot;fUML/Locus.hpp&quot;&#xA;#include &quot;fUML/FeatureValue.hpp&quot;&#xA;"/>
    </eAnnotations>
    <eOperations name="destroyObject" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;// If the given value is a reference, then destroy the referenced object, per the given&#x9;destroy action attribute values.&#xA;&#xA;&#x9;std::shared_ptr&lt;fUML::Reference> reference= std::dynamic_pointer_cast&lt;fUML::Reference> (value);&#xA;&#x9;if(reference)&#xA;&#x9;{&#xA;&#x9;&#x9;if (isDestroyLinks || isDestroyOwnedObjects)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::ExtensionalValue> > extensionalValues = this->getExecutionLocus()->getExtensionalValues();&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::ExtensionalValue> extensionalValue : *extensionalValues)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Link> link = std::dynamic_pointer_cast&lt;fUML::Link> (extensionalValue);&#xA;&#x9;&#x9;&#x9;&#x9;if (link)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (this->valueParticipatesInLink(reference, link))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (isDestroyLinks | this->objectIsComposite(reference, link))&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;link->destroy();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;if (isDestroyOwnedObjects)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::FeatureValue> > objectFeatureValues = reference->retrieveFeatureValues();&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::FeatureValue> featureValue : *objectFeatureValues)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property> (featureValue->getFeature());&#xA;&#x9;&#x9;&#x9;&#x9;if(property)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (property->getAggregation() == uml::AggregationKind::COMPOSITE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value>> values = featureValue->getValues();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Value> ownedValue : *values)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;this->destroyObject(ownedValue, isDestroyLinks, isDestroyOwnedObjects);&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;reference->destroy();&#xA;&#x9;}"/>
      </eAnnotations>
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Value"/>
      <eParameters name="isDestroyLinks" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
      <eParameters name="isDestroyOwnedObjects" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
    </eOperations>
    <eOperations name="objectIsComposite" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;// Test whether the given reference participates in the given link as a composite.&#xA;&#x9;std::shared_ptr&lt;Bag&lt;fUML::FeatureValue>> linkFeatureValues = link->getFeatureValues();&#xA;&#x9;for(std::shared_ptr&lt;fUML::FeatureValue> featureValue : *linkFeatureValues)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value>> values= featureValue->getValues();&#xA;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Value> value : *values)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;value->equals(reference);&#xA;&#xA;&#x9;&#x9;&#x9;if(!(value->equals(reference)))&#xA;&#x9;&#x9;&#x9;{&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Property> property = std::dynamic_pointer_cast&lt;uml::Property> (featureValue->getFeature());&#xA;&#x9;&#x9;&#x9;&#x9;if(property)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (property->getAggregation() == uml::AggregationKind::COMPOSITE)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;return true;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;return false;"/>
      </eAnnotations>
      <eParameters name="reference" ordered="false" lowerBound="1" eType="#//Reference"/>
      <eParameters name="link" ordered="false" lowerBound="1" eType="#//Link"/>
    </eOperations>
    <eOperations name="doAction">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;//generated from body annotation&#xA;&#x9;&#x9;// Get the value on the target input pin.&#xA;&#x9;// If the value is not a reference, then the action has no effect. Otherwise, do the following.&#xA;&#x9;// If isDestroyLinks is true, destroy all links in which the referent participates.&#xA;&#x9;// If isDestroyOwnedObjects is true, destroy all objects owned by the referent via composition links.&#xA;&#x9;// Destroy the referent object.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::DestroyObjectAction> action = std::dynamic_pointer_cast&lt;uml::DestroyObjectAction>(this->getNode());&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin > destroyTarget=action->getTarget();&#xA;&#x9;&#x9;if(destroyTarget)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value> > tokens=this->takeTokens(destroyTarget);&#xA;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;fUML::Value> value : *tokens)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;this->destroyObject(value,action->getIsDestroyLinks(), action->getIsDestroyOwnedObjects());&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;invalid target pin&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CreateObjectActionActivation" eSuperTypes="#//ActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;uml/CreateObjectAction.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;fUML/Reference.hpp&quot;&#xA;#include &quot;fUML/Locus.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="doAction">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="// Create an object with the given classifier (which must be a class) as its type, at the same locus as the action activation.&#xA;// Place a reference to the object on the result pin of the action.&#xA;&#xA;std::shared_ptr&lt;uml::CreateObjectAction> action = std::dynamic_pointer_cast&lt;uml::CreateObjectAction>(this->m_node);&#xA;if(action)&#xA;{&#xA;&#x9;std::shared_ptr&lt;fUML::Reference> reference= fUML::FUMLFactory::eInstance()->createReference();&#xA;&#x9;std::shared_ptr&lt;uml::Class> type= std::dynamic_pointer_cast&lt;uml::Class> (action->getClassifier());&#xA;&#x9;if(type)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;fUML::Object> newObject=this->getExecutionLocus()->instantiate(type);&#xA;&#x9;&#x9;if(newObject)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;reference->setReferent(newObject);&#xA;&#x9;&#x9;&#x9;this->putToken(action->getResult(), reference);&#xA;&#x9;&#x9;}&#xA;&#x9;&#x9;else&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;throw &quot;Can't instantiate object&quot;;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;&#x9;else&#xA;&#x9;{&#xA;&#x9;&#x9;throw &quot;Unexpected invalid Classifier&quot;;&#xA;&#x9;}&#xA;}&#xA;else&#xA;{&#xA;&#x9;throw &quot;Unexpected invalid CreateObjectAction&quot;;&#xA;}"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ClearAssociationActionActivation" eSuperTypes="#//ActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="LinkActionActivation" abstract="true"
      eSuperTypes="#//ActionActivation">
    <eOperations name="linkMatchesEndData" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="link" ordered="false" lowerBound="1" eType="#//Link"/>
      <eParameters name="endDataList" ordered="false" upperBound="-1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndData"/>
    </eOperations>
    <eOperations name="endMatchesEndData" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="link" ordered="false" lowerBound="1" eType="#//Link"/>
      <eParameters name="endData" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//LinkEndData"/>
    </eOperations>
    <eOperations name="getAssociation" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReadLinkActionActivation" eSuperTypes="#//LinkActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="WriteLinkActionActivation" abstract="true"
      eSuperTypes="#//LinkActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="DestroyLinkActionActivation" eSuperTypes="#//WriteLinkActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="CreateLinkActionActivation" eSuperTypes="#//WriteLinkActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="StructuralFeatureActionActivation" abstract="true"
      eSuperTypes="#//ActionActivation">
    <eOperations name="getAssociation" ordered="false" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association">
      <eParameters name="feature" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
    </eOperations>
    <eOperations name="getMatchingLinks" ordered="false" upperBound="-1" eType="#//Link">
      <eParameters name="association" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
      <eParameters name="end" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
      <eParameters name="oppositeValue" ordered="false" lowerBound="1" eType="#//Value"/>
    </eOperations>
    <eOperations name="getOppositeEnd" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Property">
      <eParameters name="association" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Association"/>
      <eParameters name="end" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//StructuralFeature"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReadStructuralFeatureActionActivation"
      eSuperTypes="#//StructuralFeatureActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="ClearStructuralFeatureActionActivation"
      eSuperTypes="#//StructuralFeatureActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="WriteStructuralFeatureActionActivation"
      abstract="true" eSuperTypes="#//StructuralFeatureActionActivation">
    <eOperations name="position" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eParameters name="value" ordered="false" lowerBound="1" eType="#//Value"/>
      <eParameters name="list" ordered="false" upperBound="-1" eType="#//Value"/>
      <eParameters name="startAt" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="RemoveStructuralFeatureValueActivation"
      eSuperTypes="#//WriteStructuralFeatureActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="AddStructuralFeatureValueActionActivation"
      eSuperTypes="#//WriteStructuralFeatureActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="StartClassifierBehaviorActionActivation"
      eSuperTypes="#//ActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;uml/StartClassifierBehaviorAction.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;fUML/Reference.hpp&quot;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="doAction">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="// Get the value on the object input pin. If it is not a reference, then do nothing.&#xA;// Start the classifier behavior of the referent object for the classifier given as the type of the object input pin.&#xA;// If the object input pin has no type, then start the classifier behaviors of all types of the referent object. [The required behavior in this case is not clear from the spec.]&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::StartClassifierBehaviorAction> action = std::dynamic_pointer_cast&lt;uml::StartClassifierBehaviorAction>(this->getNode());&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin > object= action->getObject();&#xA;&#x9;&#x9;if(object)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//Todo Check: really only first Element?&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Value> valueObject=this->takeTokens(object)->at(0);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Reference> reference = std::dynamic_pointer_cast&lt;fUML::Reference>(valueObject);&#xA;&#x9;&#x9;&#x9;if (reference)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Class> type=std::dynamic_pointer_cast&lt;uml::Class> (object->getType());&#xA;&#x9;&#x9;&#x9;&#x9;if (type)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::ParameterValue> > parameterValueList(new Bag&lt;fUML::ParameterValue>());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;reference->startBehavior(type, parameterValueList);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReduceActionActivation" eSuperTypes="#//ActionActivation">
    <eStructuralFeatures xsi:type="ecore:EReference" name="currentExecution" ordered="false"
        eType="#//Execution"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReadIsClassifiedObjectActionActivation"
      eSuperTypes="#//ActionActivation">
    <eOperations name="checkAllParents" ordered="false" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="type" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
      <eParameters name="classifier" ordered="false" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Classifier"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="ReclassifyObjectActionActivation" eSuperTypes="#//ActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="ReadExtentActionActivation" eSuperTypes="#//ActionActivation"/>
  <eClassifiers xsi:type="ecore:EClass" name="AcceptEventActionActivation" eSuperTypes="#//ActionActivation">
    <eOperations name="accept" ordered="false" lowerBound="1">
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
    <eOperations name="match" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean">
      <eParameters name="signalInstance" ordered="false" lowerBound="1" eType="#//SignalInstance"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="eventAccepter" ordered="false"
        eType="#//AcceptEventActionEventAccepter"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="waiting" ordered="false"
        lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="StartObjectBehaviorActionActivation"
      eSuperTypes="#//InvocationActionActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;uml/StartObjectBehaviorAction.hpp&quot;&#xA;#include &quot;uml/Class.hpp&quot;&#xA;#include &quot;uml/InputPin.hpp&quot;&#xA;#include &quot;uml/Behavior.hpp&quot;&#xA;#include &quot;uml/ParameterDirectionKind.hpp&quot;&#xA;#include &quot;uml/Parameter.hpp&quot;&#xA;#include &quot;fUML/Reference.hpp&quot;&#xA;#include &quot;fUML/ParameterValue.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="doAction">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;// Get the value on the object input pin. If it is not a reference, then do nothing.&#xA;&#x9;// Start the behavior of the referent object for the classifier given as the type of the object input pin, with parameter values taken from the argument input pins.&#xA;&#x9;// If the object input pin has no type, then start the classifier behaviors of all types of the referent object.&#xA;&#xA;&#x9;std::shared_ptr&lt;uml::StartObjectBehaviorAction> action = std::dynamic_pointer_cast&lt;uml::StartObjectBehaviorAction>(this->getNode());&#xA;&#x9;if(action)&#xA;&#x9;{&#xA;&#x9;&#x9;std::shared_ptr&lt;uml::InputPin > object= action->getObject();&#xA;&#x9;&#x9;if(object)&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;//Todo Check: really only first Element?&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Value> valueObject=this->takeTokens(object)->at(0);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;fUML::Reference> reference = std::dynamic_pointer_cast&lt;fUML::Reference>(valueObject);&#xA;&#x9;&#x9;&#x9;if (reference)&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;uml::InputPin, uml::InputPin>> argumentPins = action->getArgument();&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::ParameterValue> > inputs(new Bag&lt;fUML::ParameterValue>());&#xA;&#x9;&#x9;&#x9;&#x9;//Todo Check TypedElement? - fUML Spec: Class_ type = (Class_)(action.object.typedElement.type);&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Class> type=std::dynamic_pointer_cast&lt;uml::Class> (object->getType());&#xA;&#x9;&#x9;&#x9;&#x9;if (type)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;uml::Behavior> behavior=std::dynamic_pointer_cast&lt;uml::Behavior> (object->getType());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (!behavior)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;behavior = type->getClassifierBehavior();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;if (behavior)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Subset&lt;uml::Parameter, uml::NamedElement>> parameters = behavior->getOwnedParameter();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;int pinNumber = 0;&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;for(std::shared_ptr&lt;uml::Parameter> parameter: *parameters)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;uml::ParameterDirectionKind direction=parameter->getDirection();&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;if (direction == uml::ParameterDirectionKind::IN || direction == uml::ParameterDirectionKind::INOUT)&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ParameterValue> parameterValue(fUML::FUMLFactory::eInstance()->createParameterValue());&#xA;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->setParameter(parameter);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;auto argumentPin=argumentPins->at(pinNumber);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Value> > valueTokens=this->takeTokens(argumentPin);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;parameterValue->getValues()->insert(*valueTokens);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;inputs->add(parameterValue);&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pinNumber ++;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;else&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;throw &quot;Invalid Behavior for StartObjectBehaviorAction&quot;;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;reference->startBehavior(type, inputs);&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#x9;}"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="AcceptEventActionEventAccepter" eSuperTypes="#//EventAccepter">
    <eStructuralFeatures xsi:type="ecore:EReference" name="actionActivation" ordered="false"
        lowerBound="1" eType="#//AcceptEventActionActivation"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CentralBufferNodeActivation" eSuperTypes="#//ObjectNodeActivation">
    <eOperations name="fire" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="&#x9;&#x9;//DEBUG_MESSAGE(std::cout &lt;&lt; &quot;[fire] &quot; &lt;&lt; this->getNode()->getClass()->getName() &lt;&lt; &quot; &quot; &lt;&lt; this->getNode()->getName();)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;DEBUG_MESSAGE(std::cout &lt;&lt; &quot;Central Buffer Node Activation&quot; &lt;&lt; std::endl;)&#xD;&#xA;&#xD;&#xA;&#x9;&#x9;this->addTokens(incomingTokens);&#xD;&#xA;&#x9;&#x9;this->sendUnofferedTokens();"/>
      </eAnnotations>
      <eParameters name="incomingTokens" ordered="false" upperBound="-1" eType="#//Token"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="DataStoreNodeActivation" eSuperTypes="#//CentralBufferNodeActivation">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/Value.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="removeToken" ordered="false" lowerBound="1" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="int i = ObjectNodeActivationImpl::removeToken(token);&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;if (this->isRunning()) {&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Token> copied_token = std::dynamic_pointer_cast&lt;Token>(token->copy());&#xD;&#xA;&#x9;&#x9;&#x9;ObjectNodeActivationImpl::addToken(copied_token);&#xD;&#xA;&#x9;&#x9;&#x9;this->sendUnofferedTokens();&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;return i;"/>
      </eAnnotations>
      <eParameters name="token" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
    <eOperations name="addToken" ordered="false" lowerBound="1">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="std::shared_ptr&lt;fUML::Value>value = token->getValue();&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;bool isUnique = true;&#xD;&#xA;&#x9;&#x9;if (value != nullptr) {&#xD;&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;fUML::Token> > heldTokens = this->getTokens();&#xD;&#xA;&#x9;&#x9;&#x9;unsigned int i = 0;&#xD;&#xA;&#x9;&#x9;&#x9;while (isUnique &amp;&amp; i &lt; heldTokens->size()) {&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;isUnique = !(heldTokens->at(i)->getValue()->equals(value));&#xD;&#xA;&#x9;&#x9;&#x9;&#x9;i++;&#xD;&#xA;&#x9;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;}&#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;if (isUnique) {&#xD;&#xA;&#x9;&#x9;&#x9;ObjectNodeActivationImpl::addToken(token);&#xD;&#xA;&#x9;&#x9;}"/>
      </eAnnotations>
      <eParameters name="token" ordered="false" lowerBound="1" eType="#//Token"/>
    </eOperations>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="EventOccurrence"/>
  <eClassifiers xsi:type="ecore:EClass" name="CallEventExecution" eSuperTypes="#//Execution">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &quot;fUML/CallEventOccurrence.hpp&quot;&#xA;#include &quot;fUML/FUMLFactory.hpp&quot;&#xA;#include &quot;fUML/Reference.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="copy" lowerBound="1" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="//Create a new call event execution that is a copy of this execution, with the&#xA;// caller initially not suspended.&#xA;&#xA;//CallEventExecution copy = (CallEventExecution)super.copy();&#xA;//copy.callerSuspended = false;&#xA;//return copy;"/>
        <details key="doNotGenerate" value="true"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="createEventOccurrence" lowerBound="1" eType="#//EventOccurrence">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="std::shared_ptr&lt;CallEventOccurrence> eventOccurrence = FUMLFactory::eInstance()->createCallEventOccurrence();&#xA;&#x9;eventOccurrence->setExecution(getThisCallEventExecutionPtr());&#xA;&#x9;return eventOccurrence;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="execute">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="// Make the call on the target object (which is the context of this execution)&#xA;// and suspend the caller until the call is completed.&#xA;// Note: The callerSuspended flag needs to be set before the call is made,&#xA;// in case the call is immediately handled and returned, even before the&#xA;// suspend loop is started.&#xA;&#xA;setCallerSuspended(true);&#xA;makeCall();&#xA;suspendCaller();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getInputParameterValues" upperBound="-1" eType="#//ParameterValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="// Return input parameter values for this execution.&#xA;&#xA;ParameterValueList parameterValues = new ParameterValueList();&#xA;for(int i=0; i &lt; this.parameterValues.size(); i++){&#xA;ParameterValue parameterValue = this.parameterValues.get(i);&#xA;if(parameterValue.parameter.direction == ParameterDirectionKind.in | parameterValue.parameter.direction == ParameterDirectionKind.inout){&#xA;parameterValues.addValue(parameterValue);&#xA;}&#xA;}&#xA;return parameterValues;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getOperation" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="// Return the operation being called by this call event execution.&#xA;return ((CallEventBehavior)this.getBehavior()).operation;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="isCallerSuspended" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Boolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="_beginIsolation();&#xA;&#x9;bool isSuspended = m_callerSuspended;&#xA;&#x9;_endIsolation();&#xA;&#xA;&#x9;return isSuspended;"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="makeCall">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="std::shared_ptr&lt;Reference> reference = FUMLFactory::eInstance()->createReference();&#xA;&#x9;reference->setReferent(m_context);&#xA;&#x9;std::shared_ptr&lt;EventOccurrence> eventOccurence = createEventOccurrence();&#xA;&#x9;eventOccurence->sendTo(reference);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="new_" eType="#//Value">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return FUMLFactory::eInstance()->createCallEventExecution();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="releaseCaller">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="setCallerSuspended(false);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setOutputParameterValues">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="// Set the output parameter values for this execution.&#xA;&#xA;ParameterList parameters = this.getBehavior().ownedParameter;&#xA;int i = 1;&#xA;int j = 1;&#xA;while (i &lt;= parameters.size()) {&#xA;Parameter parameter = parameters.get(i-1);&#xA;if (parameter.direction == ParameterDirectionKind.inout |&#xA;parameter.direction == ParameterDirectionKind.out |&#xA;parameter.direction == ParameterDirectionKind.return_ ) {&#xA;ParameterValue parameterValue = parameterValues.get(j-1);&#xA;parameterValue.parameter = parameter;&#xA;this.setParameterValue(parameterValue);&#xA;j = j + 1;&#xA;}&#xA;i = i + 1;&#xA;}"/>
      </eAnnotations>
      <eParameters name="parameterValues" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eOperations name="suspendCaller">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="while(isCallerSuspended())&#xA;&#x9;{&#xA;&#x9;&#x9;wait_();&#xA;&#x9;}"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="wait_">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="// Wait for an indeterminate amount of time to allow other concurrent&#xA;// executions to proceed&#xA;&#xA;// [There is no further formal specification for this operation.]."/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="callerSuspended" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Boolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="keySetterBody" value="_beginIsolation();&#xA;this.callerSuspended = callerSuspended;&#xA;_endIsolation();"/>
      </eAnnotations>
    </eStructuralFeatures>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CallEventOccurrence" eSuperTypes="#//EventOccurrence">
    <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
      <details key="includes" value="#include &lt;memory>&#xA;#include &quot;uml/Trigger.hpp&quot;&#xA;#include &quot;uml/CallEvent.hpp&quot;"/>
    </eAnnotations>
    <eOperations name="getOperation" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return m_execution->getOperation();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="getParameterValues" upperBound="-1" eType="#//ParameterValue">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="return m_execution->getInputParameterValues();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="match" eType="ecore:EDataType http://www.eclipse.org/uml2/5.0.0/Types#//Boolean">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="bodyJava" value="bool matches = false;&#xA;&#x9;uml::CallEvent callEvent = std::dynamic_pointer_cast&lt;uml::CallEvent>(trigger->getEvent());&#xA;&#x9;if (callEvent != nullptr)&#xA;&#x9;{&#xA;&#x9;&#x9;matches = callEvent->getOperation() == getOperation();&#xA;&#x9;}&#xA;&#x9;return matches;"/>
      </eAnnotations>
      <eParameters name="trigger" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Trigger"/>
    </eOperations>
    <eOperations name="releaseCaller">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="m_execution->releaseCaller();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="setOutputParameterValues">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="body" value="m_execution->setOutputParameterValues(parameterValues);"/>
      </eAnnotations>
      <eParameters name="parameterValues" upperBound="-1" eType="#//ParameterValue"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EReference" name="execution" lowerBound="1"
        eType="#//CallEventExecution"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="CallEventBehavior">
    <eOperations name="operation" lowerBound="1" eType="ecore:EClass http://www.eclipse.org/uml2/5.0.0/UML#//Operation">
      <eAnnotations source="http://sse.tu-ilmenau.de/codegen">
        <details key="keySetterBody" value="this.operation = operation;&#xA;for(int i = 0; i &lt; operation.ownedParameter.size(); i++){&#xA;Parameter operationParameter = operation.ownedParameter.get(i);&#xA;Parameter parameter = new Parameter();&#xA;parameter.name = operationParameter.name;&#xA;parameter.type = operationParameter.type;&#xA;parameter.multiplicityElement.lowerValue =&#xA;operationParameter.multiplicityElement.lowerValue;&#xA;parameter.multiplicityElement.lower =&#xA;operationParameter.multiplicityElement.lower;&#xA;parameter.multiplicityElement.upperValue =&#xA;operationParameter.multiplicityElement.upperValue;&#xA;parameter.multiplicityElement.upper =&#xA;operationParameter.multiplicityElement.upper;&#xA;parameter.direction = operationParameter.direction;&#xA;parameter.owner = this;&#xA;parameter.namespace = this;&#xA;this.ownedElement.addValue(parameter);&#xA;this.ownedMember.addValue(parameter);&#xA;this.member.addValue(parameter);&#xA;this.ownedParameter.addValue(parameter);&#xA;}&#xA;this.isReentrant = true;&#xA;this.name = &quot;CallEventBehavior&quot;;&#xA;if (operation.name != null) {&#xA;this.name = this.name + &quot;(&quot; + operation.name + &quot;)&quot;;&#xA;}"/>
      </eAnnotations>
    </eOperations>
  </eClassifiers>
</ecore:EPackage>
