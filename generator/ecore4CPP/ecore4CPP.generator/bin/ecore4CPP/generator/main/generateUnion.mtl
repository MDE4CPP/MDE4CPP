[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateUnion('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateReference /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[**
 * The documentation of the template generateElement.
 * @param anEReference
 */]
[template public generateUnionGetterCpp(aClass : EClass)]
[aClass.getUnionsReference()->sortedBy(name).generateUnionGetterCpp(aClass)/]
[/template]

[template public generateUnionGetterCpp(aReference : EReference,aClass: EClass) ? (hasGetter() and aReference.isUnion() )]
[aReference.generateReferenceType()/] [aClass.name.toUpperFirst()/]Impl::[aReference.GetterName()/]() const
{
	return m_[aReference.name/];
}

[/template]

[template public generateUnionGetterDeclaretaion(aClass : EClass, impl : EBoolean)]
[aClass.getUnionsReference()->sortedBy(name).generateUnionGetterDeclaretaionBag(impl)/]
[/template]

[template public generateUnionGetterDeclaretaion(aReference : EReference, impl : EBoolean)? (hasGetter() and isUnion() )]
[aReference.generateDokumentation()/]
virtual [aReference.generateReferenceType()/] [aReference.GetterName()/]() const [abstractSufix(impl)/];
[/template]

[template public generateUnionGetterDeclaretaionBag(aReference : EReference, impl : EBoolean)? (hasGetter() and isUnion() )]
[aReference.generateDokumentation()/]
virtual [aReference.generateReferenceType()/] [aReference.GetterName()/]() const [abstractSufix(impl)/];
[/template]

[template public generateEContainerOperation(aClass : EClass, impl : EBoolean)]
virtual std::shared_ptr<ecore::EObject> eContainer() const [abstractSufix(impl)/];
[/template]

[template public generateEContainerOperationCPP(aClass: EClass)]
std::shared_ptr<ecore::EObject> [aClass.name.toUpperFirst()/]Impl::eContainer() const
{
[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name)) separator('\n')]
[if(ref->select(eType.name = aReference.eType.name)->size()>1 )]
	[if(ref->select(eType.name = aReference.eType.name)->asOrderedSet()->sortedBy(name)->first() = aReference)]
		[for(multipleRef : EReference | ref->select(eType.name = aReference.eType.name)->sortedBy(name))]
	if(auto wp = m_[multipleRef.name/].lock())
	{
		return wp;
	}
		[/for]
	[/if]
	[else]
	if(auto wp = m_[aReference.name/].lock())
	{
		return wp;
	}
	[/if]
[/for]
[/let]
	return nullptr;
}
[/template]