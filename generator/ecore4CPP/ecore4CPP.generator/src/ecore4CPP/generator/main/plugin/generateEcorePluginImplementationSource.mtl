[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateEcorePluginImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[template public generateEcorePluginImplSource(aPackage : EPackage) { packageName : String = aPackage.name.toUpperFirst().concat('PluginImpl'); }]
[file (aPackage.generateNamespacePath().concat('/impl/').concat(packageName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.name/]/impl/[packageName/].hpp"

#include "[aPackage.name/]/[aPackage.name.toUpperFirst()/]Factory.hpp"
#include "[aPackage.name/]/[aPackage.name.toUpperFirst()/]Package.hpp"

using namespace [aPackage.name/];

//*********************************
// Constructor / Destructor
//*********************************
[packageName/]::[packageName/]()
{
}

[packageName/]::~[packageName/]()
{
}


std::shared_ptr<ecore::EObject> [packageName/]::create(const std::string& name) const
{
	return [aPackage.name.toUpperFirst()/]Factory::eInstance()->create(name);
}

std::shared_ptr<ecore::EObject> [packageName/]::create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID) const
{
	return [aPackage.name.toUpperFirst()/]Factory::eInstance()->create(name, container, referenceID);
}

std::shared_ptr<ecore::EFactory> [packageName/]::getEFactory()
{
	return [aPackage.name.toUpperFirst()/]Factory::eInstance();
}

std::shared_ptr<ecore::EPackage> [packageName/]::getEPackage()
{
	return [aPackage.name.toUpperFirst()/]Package::eInstance();
}

std::string [packageName/]::eclipseURI()
{
	return "[getEclipseURI()/]";
}

std::string [packageName/]::eNAME()
{
	return "[aPackage.name/]";
}

std::string [packageName/]::eNS_URI()
{
	return "[aPackage.nsURI/]";
}

std::string [packageName/]::eNS_PREFIX()
{
	return "[aPackage.nsPrefix/]";
}
[/file]
[/template]

[query private hasEclipseURI(aPackage : EPackage) : Boolean = if (hasSourceGen()) then SourceGen().details->select(key = 'eclipseURI')->notEmpty() else false endif/]
[query private getEclipseURI(aPackage : EPackage) : String = if (hasEclipseURI()) then SourceGen().details->select(key = 'eclipseURI')->first().value else '' endif/]