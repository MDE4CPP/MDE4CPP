[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFUML('http://www.eclipse.org/uml2/5.0.0/UML')]
    
[import fUML4CPP::generator::main::generateClassifierObjectHeader /]
[import fUML4CPP::generator::main::generateClassifierObjectSource /]
[import fUML4CPP::generator::main::generateModelLocusHeader /]
[import fUML4CPP::generator::main::generateModelLocusSource /]
[import fUML4CPP::generator::main::generateExecutionBuildFile /]
[import fUML4CPP::generator::main::generateMainExecution /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecutionHeader /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecutionSource /]
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::plugin::generateExecutionPlugin /]
[import UML4CPP::generator::main::generate /]
[import UML4CPP::generator::main::configuration::generateGradleFiles /]
[import UML4CPP::generator::main::validation::validateModel /]
 
[query public hasConfiguredBuildMode(aPackage : Package) : Boolean = eAllContents()->filter(ecore::EAnnotation)->select(source = 'BuildMode')->notEmpty() /]
[query public getBuildMode(aPackage : Package) : ecore::EAnnotation = eAllContents()->filter(ecore::EAnnotation)->select(source = 'BuildMode')->first() /]
[query public hasBuildTypeConfiguration(aPackage : Package) : Boolean = if (hasConfiguredBuildMode()) then getBuildMode().details->select(key = 'type')->notEmpty() else false endif /]
[query public buildLibrary(aPackage : Package) : Boolean = if (hasBuildTypeConfiguration()) then (aPackage.getBuildMode().details->select(key = 'type')->first().value = 'library') else false endif /]

[template public generateFUML(aPackage : uml::Package)]
[comment @main/]

[if (aPackage.name.oclIsUndefined() or aPackage.name = '')]
	['package has no name '.registerError()/]
[else]
	[aPackage.generateUML()/]
[if (aPackage.allOwnedElements()->filter(Activity)->size() > 0)]
	[aPackage.generateFUMLModel()/]
[/if]
[/if]

[if (aPackage.errorExisting())]
	[aPackage.printErrors()/]
	[closeWithErrorExit(1)/]
[/if]
[/template]

[template public generateFUMLModel(aPackage : Package)]
//generate executions for DecisionNode behavior
[for (aDecisionNode : DecisionNode | aPackage.getDecisionNodesWithOB())]
[aDecisionNode.generateOpaqueBehaviorExecutionHeader(aPackage)/]
[aDecisionNode.generateOpaqueBehaviorExecutionSource(aPackage)/]
[/for]

//generate execution for CallBehaviorAction
[for (aCBA : CallBehaviorAction | aPackage.getCallBehaviorActionsWithOB())]
[aCBA.generateOpaqueBehaviorExecutionHeader(aPackage)/]
[aCBA.generateOpaqueBehaviorExecutionSource(aPackage)/]
[/for]

//generate execution for CallOperationAction
[for (aCOA : CallOperationAction | aPackage.getCallOperationActions())]
[aCOA.generateOpaqueBehaviorExecutionHeader(aPackage)/]
[aCOA.generateOpaqueBehaviorExecutionSource(aPackage)/]
[/for]

//generate execution classifier
[aPackage.getClassiferExecutions().generateClassifierObjectHeader(aPackage)/]
[aPackage.getClassiferExecutions().generateClassifierObjectSource(aPackage)/]

[if (not buildLibrary())]
//generate main
[aPackage.generateMain()/]
[else]
[aPackage.generateExecutionPlugin()/]
[/if]

//generate model locus
[aPackage.generateModelLocusHeader()/]
[aPackage.generateModelLocusSource()/]


//generate project files
[aPackage.generateExecutionBuildFile(buildLibrary())/]
[/template]