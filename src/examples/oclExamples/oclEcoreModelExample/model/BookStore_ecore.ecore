<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="BookStore_ecore" nsURI="http://www.example.org/BookStore_ecore"
    nsPrefix="BookStore_ecore">
  <eAnnotations source="http://tu-ilmenau.de/see/prepareApplication">
    <details key="includes" value="#include &lt;string>&#xA;#include &lt;sstream>&#xA;#include &lt;oclParser/Utilities/Ocl.h>&#xA;&#xA;#include &lt;ecore/EFactory.hpp>&#xA;#include &lt;ecore/EPackage.hpp>&#xA;#include &lt;ecore/ecorePackage.hpp>&#xA;#include &lt;ecore/EClassifier.hpp>&#xA;#include &lt;ecore/EEnum.hpp>&#xA;#include &lt;ecore/EClass.hpp>&#xA;#include &lt;ecore/EReference.hpp>&#xA;#include &lt;ecore/EOperation.hpp>&#xA;#include &lt;ecore/EAttribute.hpp>&#xA;#include &lt;ecore/EParameter.hpp>&#xA;#include &lt;ecore/EEnumLiteral.hpp>&#xA;#include &lt;ecore/ETypeParameter.hpp>"/>
    <details key="body" value="&#x9;int sucCount=0;&#xA;&#x9;int failCount=0;&#xA;&#x9;try{&#xA;&#x9;// ecore Metamodel test&#xA;&#x9;query1()== true ? sucCount++:failCount++;&#xA;&#x9;query2()== true ? sucCount++:failCount++;&#xA;&#x9;query3()== true ? sucCount++:failCount++;&#xA;&#x9;query4()== true ? sucCount++:failCount++;&#xA;&#x9;query5()== true ? sucCount++:failCount++;&#xA;&#xA;&#x9;ecore_any_query1()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query2()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query3()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query4()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query5()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query6()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query7()== true ? sucCount++:failCount++;&#xA;&#x9;ecore_any_query8()== true ? sucCount++:failCount++;&#xA;&#x9;//Model based Tests&#xA;&#x9;validate1()== true ? sucCount++:failCount++;&#xA;&#x9;validate2()== true ? sucCount++:failCount++;&#xA;&#x9;validate3()== true ? sucCount++:failCount++;&#xA;&#x9;validate4()== true ? sucCount++:failCount++;&#xA;&#x9;validate5()== true ? sucCount++:failCount++;&#xA;&#x9;validate6()== true ? sucCount++:failCount++;&#xA;&#x9;validate7()== true ? sucCount++:failCount++;&#xA;&#x9;validate8()== true ? sucCount++:failCount++;&#xA;&#x9;validate9()== true ? sucCount++:failCount++;&#xA;&#x9;validate10()== true ? sucCount++:failCount++;&#xA;&#x9;validate11()== true ? sucCount++:failCount++;&#xA;&#xA;&#x9;//Model quwey&#xA;&#xA;&#x9;model_any_query1()== true ? sucCount++:failCount++;&#xA;&#x9;model_any_query2()== true ? sucCount++:failCount++;&#xA;&#x9;model_any_query3()== true ? sucCount++:failCount++;&#xA;&#x9;model_any_query4()== true ? sucCount++:failCount++;&#xA;&#xA;&#x9;}&#xA;&#x9;catch(...){}&#xA;&#x9;std::cout &lt;&lt; sucCount &lt;&lt; &quot;/&quot;&lt;&lt; sucCount+failCount &lt;&lt; &quot; correct: &quot;;&#xA;&#x9;(failCount==0) ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl: std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#xA;&#x9;pause();"/>
    <details key="library" value="OclParser"/>
    <details key="additionalFunctions" value="/*&#xA;These functions are currently stored in the &quot;protected&quot; section of the generated main. &#xA;This is a backup in case the original main.cpp should be deleted.&#xA;*/&#xA;// Start of user code functions &#xA;// You may manually edit additional functions, won't be overwritten upon generation.&#xA;/*&#xA;Helper functions&#xA;*/&#xA;bool validate(const std::string&amp; query, std::shared_ptr&lt;ecore::EObject> context, const std::string&amp; testStr) {&#xA;&#x9;bool returnValue = false;&#xA;    try {&#xA;        Utilities::Ocl ocl;&#xA;        ocl.validate(query, context);&#xA;        if(ocl.getErrors().size() > 0) {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        } else {&#xA;        &#x9;std::string resultStr=ocl.getResult();&#xA;            std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;            (resultStr.compare(testStr) == 0) ? returnValue =  true : returnValue =  false;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool query(const std::string&amp; query,  std::shared_ptr&lt;ecore::EObject> context, const std::string&amp; testStr) {&#xA;&#x9;bool returnValue = false;&#xA;&#x9;try {&#xA;        Utilities::Ocl ocl;&#xA;        if(ocl.query(query, context)) {&#xA;        &#x9;std::string resultStr=ocl.getResult();&#xA;            std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;            (resultStr.compare(testStr) == 0) ? returnValue =  true : returnValue =  false;&#xA;        } else {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;Any queryValue(const std::string&amp; query, std::shared_ptr&lt;ecore::EObject> context) {&#xA;    try {&#xA;        Utilities::Ocl ocl;&#xA;        if(ocl.query(query, context)) {&#xA;            return ocl.getResultValue();&#xA;        } else {&#xA;            std::cout &lt;&lt; ocl.getError() &lt;&lt; std::endl;&#xA;        }&#xA;    } catch (std::exception &amp;e) {&#xA;        std::cout &lt;&lt; &quot;exception : &quot; &lt;&lt; e.what() &lt;&lt; std::endl;&#xA;    }&#xA;    return nullptr;&#xA;}&#xA;&#xA;std::string printEAttribute(std::shared_ptr&lt;ecore::EAttribute> eattr) {&#xA;&#x9;std::ostringstream returnStringStream;&#xA;    if(eattr != nullptr) {&#xA;        if(eattr->getUpperBound() > 1 || eattr->getUpperBound() &lt; 0)&#xA;        &#x9;returnStringStream &lt;&lt; &quot;&lt;EAttribute> &quot; + eattr->getName() + &quot; : &quot; + eattr->getEType()->getName()+ &quot; [&quot; +  std::to_string(eattr->getLowerBound()) + &quot;..*]&quot; &lt;&lt; std::endl;&#xA;        else&#xA;        &#x9;returnStringStream &lt;&lt; &quot;&lt;EAttribute> &quot; + eattr->getName() + &quot; : &quot; + eattr->getEType()->getName()+ &quot; [&quot; +  std::to_string(eattr->getLowerBound()) + &quot;..&quot; + std::to_string(eattr->getUpperBound()) + &quot;]&quot; &lt;&lt; std::endl;&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string printEReference(std::shared_ptr&lt;ecore::EReference> eref) {&#xA;&#x9;std::ostringstream returnStringStream;&#xA;    if(eref != nullptr) {&#xA;        if(eref->getUpperBound() > 1 || eref->getUpperBound() &lt; 0)&#xA;        &#x9;returnStringStream &lt;&lt; &quot;&lt;EReference> &quot; + eref->getName() + &quot; : &quot; + eref->getEType()->getName()+ &quot; [&quot; +  std::to_string(eref->getLowerBound()) + &quot;..*]&quot; &lt;&lt; std::endl;&#xA;        else&#xA;        &#x9;returnStringStream &lt;&lt; &quot;&lt;EReference> &quot; + eref->getName() + &quot; : &quot; + eref->getEType()->getName()+ &quot; [&quot; +  std::to_string(eref->getLowerBound()) + &quot;..&quot; + std::to_string(eref->getUpperBound()) + &quot;]&quot; &lt;&lt; std::endl;&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string  printETypedElement(std::shared_ptr&lt;ecore::ETypedElement> etyped) {&#xA;&#x9;std::ostringstream returnStringStream;&#xA;    if(etyped != nullptr) {&#xA;        if(etyped->isMany())&#xA;        &#x9;returnStringStream &lt;&lt; etyped->getName() + &quot; : &quot; + etyped->getEType()->getName()+ &quot; [0..*]&quot; &lt;&lt; std::endl;&#xA;        else&#xA;        &#x9;returnStringStream &lt;&lt; etyped->getName() + &quot; : &quot; + etyped->getEType()->getName()+ &quot; [0..1]&quot; &lt;&lt; std::endl;&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string printENamedElement(std::shared_ptr&lt;ecore::ENamedElement> ename) {&#xA;&#x9;std::ostringstream returnStringStream;&#xA;    if(ename != nullptr) {&#xA;    &#x9;returnStringStream &lt;&lt; ename->getName() &lt;&lt; std::endl;&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string printEOperation(std::shared_ptr&lt;ecore::EOperation> eope) {&#xA;&#x9;std::string result=&quot;&quot;;&#xA;    if(eope != nullptr) {&#xA;        result = &quot;&lt;Operation> &quot; + eope->getName() + &quot;(&quot;;&#xA;        std::shared_ptr&lt;Bag&lt;ecore::EParameter>> ebag = std::dynamic_pointer_cast&lt;Bag&lt;ecore::EParameter>>(eope->getEParameters());&#xA;        for(unsigned int i = 0; i &lt; ebag->size(); i++) {&#xA;            if(i > 0) result += &quot;, &quot;;&#xA;            result += ebag->at(i)->getName() + &quot; : &quot;;&#xA;            if(ebag->at(i)->getEType() != nullptr)&#xA;                result += ebag->at(i)->getEType()->getName();&#xA;            else&#xA;                result += &quot;[Not set in Model]&quot;;&#xA;        }&#xA;        result += &quot;)&quot;;&#xA;        if(eope->getEType() != nullptr &amp;&amp; eope->getEType()->getName() != &quot;invalid&quot;)&#xA;            result += &quot; : &quot; + eope->getEType()->getName();&#xA;    }&#xA;&#x9;return result;&#xA;}&#xA;&#xA;std::string print(Any value) {&#xA;&#x9;std::ostringstream returnStringStream;&#xA;&#x9;bool handled=false;&#xA;    try{&#xA;    &#x9;switch(value->getTypeId())&#xA;    &#x9;{&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECT_CLASS: // unknown or primitive type&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> eobj = value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EOperation> eope = std::dynamic_pointer_cast&lt;ecore::EOperation>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;if(eope != nullptr) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return printEOperation(eope);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EAttribute> eattr = std::dynamic_pointer_cast&lt;ecore::EAttribute>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;if(eattr != nullptr) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return printEAttribute(eattr);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EReference> eref = std::dynamic_pointer_cast&lt;ecore::EReference>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;if(eref != nullptr) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return printEReference(eref);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::ETypedElement> etyped = std::dynamic_pointer_cast&lt;ecore::ETypedElement>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;if(etyped != nullptr) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return printETypedElement(etyped);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::ENamedElement> ename = std::dynamic_pointer_cast&lt;ecore::ENamedElement>(eobj);&#xA;&#x9;&#x9;&#x9;&#x9;if(ename != nullptr) {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;return printENamedElement(ename);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;//current supported type of EFactory&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECLASS_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTANY_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EATTRIBUTE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EREFERENCE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESTRUCTURALFEATURE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOPERATION_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EOBJECTCONTAINER_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBOOLEANOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBOOLEAN_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTEARRAY_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBYTEOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECHARACTEROBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ECHAR_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDATE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ERESOURCE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EINTEGEROBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBIGINTEGER_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESHORT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESHORTOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EINT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ELONGOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ELONG_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EFLOATOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EFLOAT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EBIGDECIMAL_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDOUBLE_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ESTRING_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EJAVAOBJECT_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EENUMERATOR_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::EDIAGNOSTICCHAIN_CLASS:&#xA;&#x9;&#x9;&#x9;case ecore::ecorePackage::ANY_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; BookStore_ecore::BookStore_ecoreFactory::eInstance()->convertToString(nullptr, value);&#xA;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;// Model types are not supported right now --> manual handling&#xA;&#x9;&#x9;&#x9;case BookStore_ecore::BookStore_ecorePackage::BOOK_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;BookStore_ecore::Book> book= nullptr;&#xA;&#x9;&#x9;&#x9;&#x9;try&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;book= value->get&lt;std::shared_ptr&lt;BookStore_ecore::Book>>();&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;book= std::dynamic_pointer_cast&lt;BookStore_ecore::Book>(object);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr !=book)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; book->getTitle() &lt;&lt; &quot;: &quot;  &lt;&lt; (book->getAvailable() ? &quot;available&quot; : &quot;not available&quot; ) &lt;&lt; &quot;: Num copies: &quot; &lt;&lt; book->getCopies() &lt;&lt; &quot;: category: &quot; &lt;&lt; (int)(book->getCategory()) &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;        break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case BookStore_ecore::BookStore_ecorePackage::MEMBER_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;        std::shared_ptr&lt;BookStore_ecore::Member> member=nullptr;&#xA;&#x9;&#x9;        try&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;        &#x9;member = value->get&lt;std::shared_ptr&lt;BookStore_ecore::Member>>();&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;member= std::dynamic_pointer_cast&lt;BookStore_ecore::Member>(object);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr !=member)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;&quot;Member: &quot;&lt;&lt; member->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;        break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;case BookStore_ecore::BookStore_ecorePackage::LOAN_CLASS:&#xA;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;        std::shared_ptr&lt;BookStore_ecore::Loan> loan = nullptr;&#xA;&#x9;&#x9;        try&#xA;&#x9;&#x9;        {&#xA;&#x9;&#x9;        &#x9;loan = value->get&lt;std::shared_ptr&lt;BookStore_ecore::Loan>>();&#xA;&#x9;&#x9;        }&#xA;&#x9;&#x9;&#x9;&#x9;catch(...)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> object= value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;loan= std::dynamic_pointer_cast&lt;BookStore_ecore::Loan>(object);&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;&#x9;if(nullptr !=loan)&#xA;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;returnStringStream &lt;&lt;&quot;Loan: &quot;&lt;&lt; loan->getDate()&lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;handled=true;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;        break;&#xA;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;}&#xA;&#xA;    } catch (...) { }&#xA;    if(!handled)&#xA;    {&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EEnumLiteral> liter = value->get&lt;std::shared_ptr&lt;ecore::EEnumLiteral>>();&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; liter->getName() &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;} catch (...) { }&#xA;&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;bool result = value->get&lt;bool>();&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;std::string result = value->get&lt;std::string>();&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;int result = value->get&lt;int>();&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;try {&#xA;&#x9;&#x9;&#x9;double result = value->get&lt;double>();&#xA;&#x9;&#x9;&#x9;returnStringStream &lt;&lt; result &lt;&lt; std::endl;&#xA;&#x9;&#x9;&#x9;return returnStringStream.str();&#xA;&#x9;&#x9;} catch (...) { }&#xA;&#x9;&#x9;returnStringStream &lt;&lt; &quot;Any (typeId: &quot; &lt;&lt; value->getTypeId() &lt;&lt;&quot;)&quot;;&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;std::string  print(Any value, bool isMany) {&#xA;&#x9;std::ostringstream returnStringStream;&#xA;    if(value != nullptr &amp;&amp; !value->isEmpty()) {&#xA;        if(isMany) {&#xA;            std::shared_ptr&lt;Bag&lt;AnyObject>> valueItems = value->get&lt;std::shared_ptr&lt;Bag&lt;AnyObject>>>();&#xA;            for(size_t i = 0; i &lt; valueItems->size(); i++) {&#xA;            &#x9;returnStringStream &lt;&lt; print(valueItems->at(i));&#xA;            }&#xA;        }&#xA;        else {&#xA;        &#x9;returnStringStream &lt;&lt; print(value);&#xA;        }&#xA;    }&#xA;&#x9;return returnStringStream.str();&#xA;}&#xA;&#xA;void pause() {&#xA;&#x9;std::cout &lt;&lt; &quot;Enter to continue...&quot;;&#xA;&#x9;std::cin.get();&#xA;}&#xA;&#xA;/*&#xA;Actual OCL functions&#xA;*/&#xA;bool query1() {&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EPackage> context = BookStore_ecore::BookStore_ecorePackage::eInstance();&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_1 (context[EPackage] = LibraryPackage): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=query(qry, context, &quot;BookStore_ecore&quot;);&#xA;    std::cout &lt;&lt; &quot;END Query_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool query2() {&#xA;    std::string qry = &quot;self.eAttributes&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    std::cout &lt;&lt; &quot;START Query_2 (context[EClass] = Library): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=query(qry, context, &quot;&lt;EAttribute> name : String [0..1]\n&lt;EAttribute> nbBooks : Integer [0..1]\n&lt;EAttribute> opened : EBoolean [0..1]&quot;);&#xA;    std::cout &lt;&lt; &quot;END Query_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool query3() {&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EAttribute> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getBook_Attribute_category();&#xA;    std::cout &lt;&lt; &quot;START Query_3 (context[EAttribute] = Book::category): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=query(qry,context, &quot;category&quot;);&#xA;    std::cout &lt;&lt; &quot;END Query_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool query4() {&#xA;    std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EReference> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Attribute_books();&#xA;    std::cout &lt;&lt; &quot;START Query_4 (context[EReference] = Book::books): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=query(qry,context, &quot;&lt;EReference> books : Book [0..*]&quot;);&#xA;    std::cout &lt;&lt; &quot;END Query_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool query5() {&#xA;    std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EOperation> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Operation_addBook_Book();&#xA;    std::cout &lt;&lt; &quot;START Query_5 (context[EOperation] = Book::addBook): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=query(qry,context, &quot;addBook(b : Book)&quot;);&#xA;    std::cout &lt;&lt; &quot;END Query_5 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query1() {&#xA;&#x9;bool returnValue=false;&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EPackage> context = BookStore_ecore::BookStore_ecorePackage::eInstance();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_1 (context[EPackage] = LibraryPackage): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;    &#x9;std::string resultStr=value->get&lt;std::string>() ;&#xA;        std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;        (resultStr.compare(&quot;BookStore_ecore&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;    }&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    std::cout &lt;&lt; &quot;END Query_Any_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query2() {&#xA;&#x9;bool returnValue=false;&#xA;&#x9;std::string qry = &quot;self.eAttributes&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(qry, context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_2 (context[EClass] = Library): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    std::string resultStr=&quot;&quot;;&#xA;    if(value != nullptr) {&#xA;        try {&#xA;            std::shared_ptr&lt;Bag&lt;AnyObject>> valueItems = value->get&lt;std::shared_ptr&lt;Bag&lt;AnyObject>>>();&#xA;            for(size_t i = 0; i &lt; valueItems->size(); i++) {&#xA;                std::shared_ptr&lt;ecore::EObject> eobj = valueItems->at(i)->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;                std::shared_ptr&lt;ecore::EAttribute> eattr = std::dynamic_pointer_cast&lt;ecore::EAttribute>(eobj);&#xA;                std::string attrStr = printEAttribute(eattr);&#xA;                std::cout &lt;&lt; attrStr;&#xA;                resultStr +=attrStr;&#xA;            }&#xA;        } catch(...) {&#xA;            std::cout &lt;&lt; &quot;Error : get failed&quot; &lt;&lt; std::endl;&#xA;        }&#xA;    }&#xA;    (resultStr.compare(&quot;&lt;EAttribute> name : String [0..1]\n&lt;EAttribute> nbBooks : Integer [0..1]\n&lt;EAttribute> opened : EBoolean [0..1]\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#xA;    std::cout &lt;&lt; &quot;END Query_Any_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query3() {&#xA;&#x9;bool returnValue=false;&#xA;&#x9;std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;ecore::EAttribute> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getBook_Attribute_category();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_3 (context[EAttribute] = Book::category): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    if(value != nullptr) {&#xA;    &#x9;std::string resultStr=value->get&lt;std::string>() ;&#xA;        std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;        (resultStr.compare(&quot;category&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;    }&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    std::cout &lt;&lt; &quot;END Query_Any_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query4() {&#xA;&#x9;bool returnValue=false;&#xA;&#x9;std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EReference> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Attribute_books();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_4 (context[EReference] = Book::books): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    std::string resultStr=&quot;&quot;;&#xA;    if(value != nullptr) {&#xA;        std::shared_ptr&lt;ecore::EReference> eref = std::dynamic_pointer_cast&lt;ecore::EReference>&#xA;                (value->get&lt;std::shared_ptr&lt;ecore::EObject>>());&#xA;        std::string attrStr = printEReference(eref);&#xA;        std::cout &lt;&lt; attrStr;&#xA;        resultStr +=attrStr;&#xA;    }&#xA;&#x9;(resultStr.compare(&quot;&lt;EReference> books : Book [0..*]\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;END Query_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query5() {&#xA;&#x9;bool returnValue=false;&#xA;&#x9;std::string qry = &quot;self&quot;;&#xA;    std::shared_ptr&lt;ecore::EOperation> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Operation_addBook_Book();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_5 (context[EOperation] = Book::addBook): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    std::string resultStr=&quot;&quot;;&#xA;&#xA;    if(value != nullptr) {&#xA;        std::shared_ptr&lt;ecore::EOperation> eope = std::dynamic_pointer_cast&lt;ecore::EOperation>&#xA;                (value->get&lt;std::shared_ptr&lt;ecore::EObject>>());&#xA;        std::string attrStr = printEOperation(eope);&#xA;        std::cout &lt;&lt; attrStr;&#xA;        resultStr +=attrStr;&#xA;&#xA;    }&#xA;&#x9;(resultStr.compare(&quot;&lt;Operation> addBook(b : Book) : Boolean&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;returnValue ? std::cout &lt;&lt; std::endl&lt;&lt;&quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; std::endl &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    std::cout &lt;&lt; &quot;END Query_5 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query6() {&#xA;&#x9;bool returnValue=false;&#xA;&#xA;&#x9;std::string qry = &quot;self.eStructuralFeatures&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_6 (context[EClass] = Library): &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    std::string resultStr=print(value, true);&#xA;    std::cout &lt;&lt; resultStr;&#xA;&#x9;(resultStr.compare(&quot;&lt;EAttribute> name : String [0..1]\n&lt;EAttribute> nbBooks : Integer [0..1]\n&lt;EAttribute> opened : EBoolean [0..1]\n&lt;EReference> books : Book [0..*]\n&lt;EReference> loans : Loan [0..*]\n&lt;EReference> members : Member [0..*]\n&lt;EReference> writers : Writer [0..*]\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    std::cout &lt;&lt; &quot;END Query_Any_6 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query7() {&#xA;&#x9;bool returnValue=false;&#xA;&#xA;&#x9;std::string qry = &quot;Set{20, 1 .. 10}&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_7 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    std::string resultStr=print(value, true);&#xA;    std::cout &lt;&lt; resultStr;&#xA;    (resultStr.compare(&quot;20\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    std::cout &lt;&lt; &quot;END Query_Any_7 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool ecore_any_query8() {&#xA;&#x9;bool returnValue=false;&#xA;&#xA;&#x9;std::string qry = &quot;Set{1, 2 .. 10}->iterate(i:Integer;sum:Integer=0 | sum + i)&quot;;&#xA;    std::shared_ptr&lt;ecore::EClass> context = BookStore_ecore::BookStore_ecorePackage::eInstance()->getLibrary_Class();&#xA;    Any value = queryValue(qry,context);&#xA;&#xA;    std::cout &lt;&lt; &quot;START Query_Any_8 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    std::string resultStr=print(value);&#xA;    std::cout &lt;&lt; resultStr;&#xA;    (resultStr.compare(&quot;55\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;    std::cout &lt;&lt; &quot;END Query_Any_8 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool validate1() {&#xA;&#x9;std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Library::nbBooks : Integer \n&quot;&#xA;                      &quot;init: nbBooks = 3 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;ecore::EObject> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    std::cout &lt;&lt; &quot;START Validate_1 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context,&quot;false&quot;); // ToDo OCL Intit validation is buggy right now&#xA;    std::cout &lt;&lt; &quot;END Validate_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool validate2() {&#xA;    std::string qry = &quot;\ncontext Library::opened : Boolean derive: true \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setOpened(true);&#xA;    std::cout &lt;&lt; &quot;START Validate_2 : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    context->setOpened(false);&#xA;    returnValue=returnValue &amp;&amp; validate(qry,context, &quot;false&quot;);&#xA;&#xA;    std::cout &lt;&lt; &quot;END Validate_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool validate3() {&#xA;    std::string qry = &quot;\ncontext Library inv: self.nbBooks > 0 \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setNbBooks(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_3(nbBooks = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool validate4() {&#xA;    std::string qry = &quot;\ncontext Library \n&quot;&#xA;                      &quot;def: value: Real = self.nbBooks / self.nbBooks * self.nbBooks \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;inv: 25 = 5 * value \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setNbBooks(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_4(nbBooks = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool  validate5() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;def: rest1: Real = nbBooks - 2 * nbBooks \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;def: rest2: Real = rest1 * 2 \n&quot;&#xA;                      &quot;context Library \n&quot;&#xA;                      &quot;inv: 15 = let result : Integer = 0 in nbBooks - rest2 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setNbBooks(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_5(nbBooks = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;START Validate_5(nbBooks = 1) : &quot; &lt;&lt; std::endl;&#xA;    context->setNbBooks(1);&#xA;    returnValue=returnValue&amp;&amp;validate(qry,context, &quot;false&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_5 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;bool  validate6() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::countCopies() : Integer \n&quot;&#xA;                      &quot;body: self.copies \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    context->setCopies(5);&#xA;    std::cout &lt;&lt; &quot;START Validate_6(copies = 5) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;5&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_6 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool validate7() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;pre: nbCopies > 2 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    std::cout &lt;&lt; &quot;START Validate_7(addCopy(2)>2) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;false&quot;);&#xA;&#x9;qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;pre: nbCopies >= 2 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::cout &lt;&lt; &quot;START Validate_7(addCopy(2)>=2) : &quot; &lt;&lt; std::endl;&#xA;    returnValue=returnValue &amp;&amp; validate(qry,context, &quot;true&quot;);&#xA;&#xA;    std::cout &lt;&lt; &quot;END Validate_7 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool validate8() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;post: self.copies = 2 \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    std::cout &lt;&lt; &quot;START Validate_8(addCopy(2)) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_8 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool validate9() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Library::open(): \n&quot;&#xA;                      &quot;pre: self.opened = false \n&quot;&#xA;                      &quot;endpackage \n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setOpened(false);&#xA;    std::cout &lt;&lt; &quot;START Validate_9(open()) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;Validate_9(open()) : &quot; &lt;&lt; std::endl;&#xA;    context->setOpened(true);&#xA;    returnValue=returnValue &amp;&amp; validate(qry,context, &quot;false&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_9 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool validate10() {&#xA;    std::string qry = &quot;context Library::open(): \n&quot;&#xA;                      &quot;post: self.opened = true&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createLibrary();&#xA;    context->setOpened(false);&#xA;    std::cout &lt;&lt; &quot;START Validate_10(open()) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_10 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool validate11() {&#xA;    std::string qry = &quot;\npackage BookStore_ecore \n&quot;&#xA;                      &quot;context Book::addCopies(nbCopies:Integer=2): \n&quot;&#xA;                      &quot;post: copies = copies@pre + nbCopies \n&quot;&#xA;                      &quot;endpackage\n&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> context = BookStore_ecore::BookStore_ecoreFactory::eInstance()->createBook();&#xA;    std::cout &lt;&lt; &quot;START Validate_11(addCopies(2)) : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    bool returnValue=validate(qry,context, &quot;true&quot;);&#xA;    std::cout &lt;&lt; &quot;END Validate_11 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;std::shared_ptr&lt;BookStore_ecore::Library> createBookStore()&#xA;{&#xA;&#x9;std::shared_ptr&lt;BookStore_ecore::BookStore_ecoreFactory> factory = BookStore_ecore::BookStore_ecoreFactory::eInstance();&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> lib = factory ->createLibrary();&#xA;    lib->setName(&quot;TU Ilmenau - University Library&quot;);&#xA;    std::shared_ptr&lt;BookStore_ecore::Book> bookMag = factory->createBook_as_books_in_Library(lib);&#xA;&#xA;    bookMag->setTitle(&quot;Magritte&quot;);&#xA;&#xA;    std::shared_ptr&lt;Writer> author = factory->createWriter_as_writers_in_Library(lib);&#xA;    author->setName(&quot;David Sylvester&quot;);&#xA;    bookMag->getWriters()->add(author);&#xA;&#xA;    std::shared_ptr&lt;Member> paul=factory->createMember_as_members_in_Library(lib);&#xA;&#x9;paul->setName(&quot;Paul&quot;);&#xA;&#xA;    std::shared_ptr&lt;Loan> loan=factory->createLoan_as_loans_in_Library(lib);&#xA;    loan->setMember(paul);&#xA;    loan->setBook(bookMag);&#xA;    bookMag->setAvailable(false);&#xA;&#x9;return lib;&#xA;}&#xA;&#xA;&#xA;bool model_any_query1() {&#xA;&#x9;bool returnValue = false;&#xA;    std::string qry = &quot;self.name&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> store= createBookStore();&#xA;    std::cout &lt;&lt; &quot;START query: &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    Any value = queryValue(qry,store);&#xA;    if(value != nullptr) {&#xA;    &#x9;std::string resultStr=value->get&lt;std::string>() ;&#xA;        std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;        (resultStr.compare(&quot;TU Ilmenau - University Library&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;    }&#xA;    qry = &quot;self.loans&quot;;&#xA;    std::cout &lt;&lt; &quot;START query: &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    value = queryValue(qry,store);&#xA;    if(value != nullptr) {&#xA;    &#x9;try&#xA;    &#x9;{&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;Bag&lt;AnyObject>> anyBag = value->get&lt;std::shared_ptr&lt;Bag&lt;AnyObject>>>();&#xA;&#x9;&#x9;&#x9;Any loanAny = anyBag->at(0);&#xA;&#x9;&#x9;&#x9;std::shared_ptr&lt;ecore::EObject> obj= loanAny->get&lt;std::shared_ptr&lt;ecore::EObject>>(); //throws exception&#xA;&#x9;        std::shared_ptr&lt;Loan> loan = std::dynamic_pointer_cast&lt;Loan>(obj);&#xA;&#x9;    &#x9;std::ostringstream outStringStream;&#xA;&#x9;    &#x9;outStringStream&lt;&lt; &quot;Loan: &quot; &lt;&lt; loan->getMember()->getName() &lt;&lt; &quot; -> &quot; &lt;&lt; loan->getBook()->getTitle();&#xA;&#x9;    &#x9;std::cout &lt;&lt; outStringStream.str()&lt;&lt; std::endl;&#xA;&#x9;    &#x9;bool testVal;&#xA;&#x9;    &#x9;(outStringStream.str().compare(&quot;Loan: Paul -> Magritte&quot;) == 0) ? testVal =  true : testVal =  false;&#xA;&#x9;    &#x9;returnValue = returnValue &amp;&amp; testVal;&#xA;    &#x9;}&#xA;    &#x9;catch(...)&#xA;    &#x9;{&#xA;            std::cout &lt;&lt; &quot;Fail: Type error&quot; &lt;&lt; std::endl;&#xA;            returnValue = false;&#xA;    &#x9;}&#xA;    }&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;END Model Query_1 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool model_any_query2() {&#xA;&#x9;bool returnValue = false;&#xA;&#x9;try&#xA;&#x9;{&#xA;&#x9;&#x9;std::string qry =&quot;self->eContents()&quot;;&#xA;&#x9;&#x9;std::shared_ptr&lt;BookStore_ecore::Library> store= createBookStore();&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;START query: &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;&#x9;&#x9;Any value = queryValue(qry,store);&#xA;&#x9;&#x9;std::string resultStr=BookStore_ecore::BookStore_ecoreFactory::eInstance()->convertToString(nullptr, value);&#xA;&#x9;&#x9;std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;&#x9;&#x9;qry =&quot;self->eAllContents()&quot;;&#xA;&#x9;&#x9;std::cout &lt;&lt; &quot;START query: &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;&#xA;&#x9;&#x9;(resultStr.compare(&quot;&lt;Bag&lt;Any>> size: 3\n\tAny: TU Ilmenau - University Library\n\tAny: 3\n\tAny: 1\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;&#x9;value = queryValue(qry,store);&#xA;&#x9;&#x9;resultStr=BookStore_ecore::BookStore_ecoreFactory::eInstance()->convertToString(nullptr, value);&#xA;&#x9;&#x9;std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;&#x9;&#x9;(resultStr.compare(&quot;&lt;Bag&lt;Any>> size: 3\n\tTU Ilmenau - University Library\n\tAny (typeId: 3)3\n\tAny (typeId: 2)1\n&quot;) == 0) ? returnValue =  returnValue &amp;&amp; true : returnValue =  false;&#xA;&#x9;}&#xA;&#x9;catch(...)&#xA;&#x9;{&#xA;&#x9;}&#xA;&#x9;returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;END Model Query_2 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;&#x9;return returnValue;&#xA;}&#xA;&#xA;bool model_any_query3()&#xA;{&#xA;&#x9;bool returnValue = false;&#xA;    std::string qry = &quot;self.eContentUnion&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> store= createBookStore();&#xA;    std::cout &lt;&lt; &quot;START query : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    Any value = queryValue(qry,store);&#xA;    std::string resultStr=print(value, true);&#xA;    std::cout &lt;&lt; resultStr;&#xA;&#x9;(resultStr.compare(&quot;Magritte: not available: Num copies: 0: category: 0\nMember: Paul\nLoan: 0\n&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#x9;returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;END Model Query_3 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;&#xA;bool model_any_query4()&#xA;{&#xA;&#x9;bool returnValue = false;&#xA;    std::string qry = &quot;self->eClass()&quot;;&#xA;    std::shared_ptr&lt;BookStore_ecore::Library> store= createBookStore();&#xA;    std::cout &lt;&lt; &quot;START query : &quot; &lt;&lt; qry &lt;&lt; std::endl;&#xA;    Any value = queryValue(qry,store);&#xA;    std::string resultStr=&quot;&quot;;&#xA;    try{&#xA;    &#x9;std::shared_ptr&lt;ecore::EObject> libObj = value->get&lt;std::shared_ptr&lt;ecore::EObject>>();&#xA;    &#x9;std::shared_ptr&lt;ecore::EClass> libClass = std::dynamic_pointer_cast&lt;ecore::EClass>(libObj);&#xA;    &#x9;if(libClass)   resultStr= libClass ->getName();&#xA;    }catch(...){}&#xA;&#xA;&#x9;std::cout &lt;&lt; resultStr &lt;&lt; std::endl;&#xA;&#xA;    (resultStr.compare(&quot;Library&quot;) == 0) ? returnValue =  true : returnValue =  false;&#xA;&#xA;    returnValue ? std::cout &lt;&lt; &quot;success&quot; &lt;&lt; std::endl : std::cout &lt;&lt; &quot;fail&quot; &lt;&lt; std::endl;&#xA;&#x9;std::cout &lt;&lt; &quot;END Model Query_4 -------------------------------------------\n&quot; &lt;&lt; std::endl;&#xA;    return returnValue;&#xA;}&#xA;"/>
  </eAnnotations>
  <eClassifiers xsi:type="ecore:EClass" name="Library">
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Library inv: self.opened"/>
    </eAnnotations>
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Library inv: self.nbBooks > 0"/>
    </eAnnotations>
    <eOperations name="addMember" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eParameters name="m" eType="#//Member"/>
    </eOperations>
    <eOperations name="addLoan" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eParameters name="m" eType="#//Member"/>
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eOperations name="addBook" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eOperations name="open">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    this->setOpened(true);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="close">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    this->setOpened(false);"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="closed" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    return !this->isOpened();"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="books" upperBound="-1"
        eType="#//Book" containment="true">
      <eAnnotations source="subsets" references="../../../../ecore/model/ecore.ecore#//EObject/eContentUnion"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="members" upperBound="-1"
        eType="#//Member" containment="true">
      <eAnnotations source="subsets" references="../../../../ecore/model/ecore.ecore#//EObject/eContentUnion"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EReference" name="loans" upperBound="-1"
        eType="#//Loan" containment="true">
      <eAnnotations source="subsets" references="../../../../ecore/model/ecore.ecore#//EObject/eContentUnion"/>
    </eStructuralFeatures>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="opened" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EBoolean"
        defaultValueLiteral="true"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="nbBooks" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"
        defaultValueLiteral="3"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="writers" upperBound="-1"
        eType="#//Writer" containment="true"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Member">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Book">
    <eAnnotations source="http://www.eclipse.org/OCL">
      <details key="OCL" value="context Book inv: self.copies > 0"/>
    </eAnnotations>
    <eOperations name="addCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    m_copies += nbCopies;&#xA;    return m_copies;"/>
      </eAnnotations>
      <eParameters name="nbCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
    </eOperations>
    <eOperations name="countCopies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="    return this->getCopies();"/>
      </eAnnotations>
    </eOperations>
    <eOperations name="incrCopies">
      <eAnnotations source="http://tu-ilmenau.de/see/codegen">
        <details key="body" value="   m_copies++;"/>
      </eAnnotations>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="title" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="copies" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Integer"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="category" eType="#//BookCategory"/>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="available" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//Boolean"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="writers" lowerBound="1"
        upperBound="-1" eType="#//Writer"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Loan">
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="date" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EDate"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="book" eType="#//Book"/>
    <eStructuralFeatures xsi:type="ecore:EReference" name="member" eType="#//Member"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EClass" name="Writer">
    <eOperations name="write">
      <eAnnotations source="http://www.eclipse.org/OCL">
        <details key="OCL" value="context Book inv: self.copies > 0"/>
      </eAnnotations>
      <eParameters name="b" eType="#//Book"/>
    </eOperations>
    <eStructuralFeatures xsi:type="ecore:EAttribute" name="name" eType="ecore:EDataType platform:/plugin/org.eclipse.uml2.types/model/Types.ecore#//String"/>
  </eClassifiers>
  <eClassifiers xsi:type="ecore:EEnum" name="BookCategory">
    <eLiterals name="MISTERY"/>
    <eLiterals name="BIOGRAPHY" value="1"/>
    <eLiterals name="HISTORY" value="2"/>
  </eClassifiers>
</ecore:EPackage>
