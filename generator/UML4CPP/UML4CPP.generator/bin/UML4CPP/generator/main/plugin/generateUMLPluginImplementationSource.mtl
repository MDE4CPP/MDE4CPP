[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate plugin class implementation source file
 * 
 */]
[module generateUMLPluginImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateUMLPluginImplSource(aPackage : Package, packOnly:Boolean) { packageName : String = aPackage.name.toUpperFirst().concat('PluginImpl'); }]
[file (aPackage.getPackageName().concat('/impl/').concat(packageName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]/impl/[packageName/].hpp"

[defineDebugMacro()/]
#include <iostream>

[if (not packOnly)]#include "[aPackage.getPackageName()/]/[aPackage.name.toUpperFirst()/]Factory.hpp"[/if]
#include "[aPackage.getPackageName()/]/[aPackage.name.toUpperFirst()/]Package.hpp"

[if (not aPackage.ignoreNamespace())]using namespace [aPackage.name/];[/if]

//*********************************
// Constructor / Destructor
//*********************************
[packageName/]::[packageName/]()
{
}

[packageName/]::~[packageName/]()
{
}

std::shared_ptr<ecore::EObject> [packageName/]::create(const std::string& name) const
{		
	return [if (packOnly)]nullptr[else][aPackage.name.toUpperFirst()/]Factory::eInstance()->create(name)[/if];
}

std::shared_ptr<ecore::EObject> [packageName/]::create(const std::string& name, std::shared_ptr<ecore::EObject> container, const unsigned int referenceID) const
{
[if (not packOnly)]
	std::cout << "WARNING: container based create function is not implemented for UML models!!!" << std::endl;
	return nullptr; //[aPackage.name.toUpperFirst()/]Factory::eInstance()->create(name, container, referenceID);
[else]
	return nullptr;
[/if]
}

std::shared_ptr<uml::Factory> [packageName/]::getFactory()
{
	return [if (packOnly)]nullptr[else][aPackage.name.toUpperFirst()/]Factory::eInstance()[/if];
}

std::shared_ptr<uml::Package> [packageName/]::getPackage()
{
	return [aPackage.name.toUpperFirst()/]Package::eInstance();
}

std::string [packageName/]::eclipseURI()
{
	return "[valueKey('eclipseURI')/]";
}

std::string [packageName/]::eNAME()
{
	return "[aPackage.name/]";
}

std::string [packageName/]::eNS_URI()
{
	return "[aPackage.URI/]";
}

std::string [packageName/]::eNS_PREFIX()
{
	return "[if(not (aPackage.namespace.oclIsUndefined()))][aPackage.namespace.name/][/if]";
}
[/file]
[/template]