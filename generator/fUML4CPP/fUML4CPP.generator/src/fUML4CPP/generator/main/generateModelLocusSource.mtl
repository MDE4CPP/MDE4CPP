[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModelLocusSource('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::fUMLKeywords /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::profiles::profileHelper /]
[import UML4CPP::generator::main::helpers::isGeneratableHelper /]


[query private getAllLocusClasses(aPackage : Package) : Set(Class) = aPackage.allOwnedElements()->filter(Class)->asSet()->flatten()->addAll(aPackage.getClassesOfCreateObjectAction())
																	->reject(oclIsKindOf(Behavior))->reject(oclIsKindOf(AssociationClass))->reject(oclIsKindOf(Component))->reject(oclIsKindOf(Stereotype))->reject(oclIsKindOf(Node)) /]
[query private getClassesOfCreateObjectAction(aPackage : Package) : Set(Class) = aPackage.allOwnedElements()->filter(CreateObjectAction).classifier->asSet()->flatten()->filter(Class) /]
[query private getClassesOfCreateObjectActionForPackage(aPackage : Package, classPackage : Package) : Set(Class) = aPackage.getClassesOfCreateObjectAction()->select(aClass : Class | aClass.getNearestPackage() = classPackage)->sortedBy(name) /]
[query private getClassPackagesOfCreateObjectAction(aPackage : Package) : Set(Package) = aPackage.getAllLocusClasses().getNamespace()->asSet()->flatten()->sortedBy(name) /]

[template public generateModelLocusSource(aPackage : Package) 
{
packageName : String = aPackage.getPackageName().sanitize(); 
originalName : String = aPackage.generateNamespacePath(false);
}]
[file (originalName.concat('Exec/impl/') + packageName.concat('LocusImpl.cpp'), false, 'UTF-8')]
#include "[packageName/]LocusImpl.hpp"
#include <iostream>

[defineDebugMacro()/]

#include "abstractDataTypes/SubsetUnion.hpp"
#include "uml/Class.hpp"

#include "[aPackage.generateNamespacePath(true)/]/[aPackage.myNamespaceName()/]Factory.hpp"
#include "[aPackage.generateNamespacePath(true)/]/[aPackage.myNamespaceName()/]Package.hpp"
[for (aClass : Class | aPackage.ownedElement->filter(Class)->select(isGeneratable())->reject(isAbstract)->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE()))->sortedBy(myQualifiedName()))]
#include "[aPackage.generateNamespacePath(true)/]/[aClass.name.toUpperFirst()/].hpp"
[/for]
#include "pluginFramework/PluginFramework.hpp"
#include "pluginFramework/UMLExecutionModelPlugin.hpp"

using namespace [aPackage.generateNamespace(false)/];

//*********************************
// Constructor / Destructor
//*********************************
[packageName/]LocusImpl::[packageName/]LocusImpl()
{
}

[packageName/]LocusImpl::~[packageName/]LocusImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [packageName/]Locus "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

std::shared_ptr<uml::Element> [packageName/]LocusImpl::instantiate(std::shared_ptr<uml::Class>  type)
{
	std::shared_ptr<uml::Package> typePackage = type->getPackage().lock();

	//Model-internal types
[let packageNamespace : String = aPackage.generateNamespace(true)]
	if (typePackage == [aPackage.generateNamespace(false)/]::[aPackage.name/]Package::eInstance())
	{		
		switch(type->getMetaElementID())
		{
		[for (aClass : Class | aPackage.ownedElement->filter(Class)->select(isGeneratable())->reject(oclIsKindOf(Behavior) or isAbstract)->reject(hasStereotypeApplied(QN_STEREOTYPE_NONEXECUTABLE()))->sortedBy(myQualifiedName())) separator('\n')]
			[let className : String = aClass.name.toUpperFirst()]
			case [packageNamespace/]::[aPackage.myNamespaceName()/]Package::[aClass.getMemberName().toUpperCase()/]:
			{
				std::shared_ptr<[aClass.getNearestPackage().generateNamespace(false)/]::[className/]> instance = [packageNamespace/]::[aPackage.myNamespaceName()/]Factory::eInstance()->create[aClass.name.toUpperFirst()/]();
				return instance;
			}
			[/let]
		[/for]
			default:
			{
				return fUML::Semantics::Loci::LocusImpl::instantiate(type);
				//return PSCS::Semantics::Loci::CS_LocusImpl::instantiate(type);
			}
		}
	}
[/let]
	//Model-external types
	else
	{
		std::shared_ptr<PluginFramework> pluginFramework = PluginFramework::eInstance();
		std::string pluginName = typePackage->getName() + "Exec";
		std::shared_ptr<MDE4CPPPlugin> plugin = pluginFramework->findPluginByName(pluginName);

		if (plugin)
		{
			DEBUG_INFO("Plugin '" << plugin->eNAME() << "' found.")

			std::shared_ptr<UMLExecutionModelPlugin> executionPlugin = std::dynamic_pointer_cast<UMLExecutionModelPlugin>(plugin);
			if (executionPlugin)
			{
				DEBUG_INFO("Execution plugin '" << executionPlugin->eNAME() << "' is accessable.")

				return executionPlugin->instantiateClass(type);
			}
			else
			{
				DEBUG_ERROR("Plugin '" << plugin->eNAME() << "' is not an execution plugin!")
			}
		}
		else
		{ 
			DEBUG_ERROR("Plugin '" << pluginName << "' not found!")
		}
	}

	return fUML::Semantics::Loci::LocusImpl::instantiate(type);
	//return PSCS::Semantics::Loci::CS_LocusImpl::instantiate(type);
}

void [packageName/]LocusImpl::setThisLocusPtr(std::weak_ptr</*PSCS::Semantics::Loci::CS_Locus*/fUML::Semantics::Loci::Locus> thisLocusPtr)
{
	/*PSCS::Semantics::Loci::CS_LocusImpl::setThisLocusPtr(thisLocusPtr)*/ fUML::Semantics::Loci::LocusImpl::setThisLocusPtr(thisLocusPtr);
}
[/file]
[/template]