[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate class implementation source file
 * 
 */]
[module generateImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP_test::generator::main::test_suite::generateOperation /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateImplementationSource( aClass : Class ) { 
	className : String = aClass.name.toUpperFirst(); 
	packageName : String = aClass.ancestors()->filter( Package )->first().getPackageName();
} ]
[file( packageName.concat( '/' ).concat( className ).concat( '.cpp' ), false, 'UTF-8' )]
#include "[packageName/]/[className/].hpp"

[defineDebugMacro()/]

#include <iostream>

#include "cute.h"
#include "helper/TestSuiteCountHelper.hpp"
#include "helper/TestSuiteMainHelper.hpp"
#include "helper/TestSuiteMemoryHelper.hpp"
#include "helper/TestSuiteTimeHelper.hpp"

[for( aOperation : Operation | aClass.ownedOperation->asOrderedSet()->sortedBy( myQualifiedName() ) )]
	[if( aOperation.method->notEmpty() )]
		[if( aOperation.method->asOrderedSet()->first().oclIsKindOf( OpaqueBehavior ) )]
			[if( aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior ).language->includes( keyInclude() ) )]
				[let index : Integer = aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior ).language->asOrderedSet()->indexOf( keyInclude() )]
					[if( 0 < index and index <= aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->size() )]
//Included from operation "[aOperation.name/]"
[aOperation.method->asOrderedSet()->first().oclAsType( OpaqueBehavior )._body->asOrderedSet()->at( index )/]
					[/if]
				[/let]
			[/if]
		[/if]
	[/if]
[/for]

//*********************************
// Tests
//*********************************

[for( aOperation : Operation | aClass.ownedOperation->sortedBy( myQualifiedName() ) ) separator( '\n' )]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// Make Class Test Suite
//*********************************

cute::suite make_suite_[className/]() {

	cute::suite s { };

[for (aOperation : Operation | aClass.ownedOperation->sortedBy( myQualifiedName() ) )]
	s += CUTE( [aOperation.ancestors()->filter( Class )->first().name.toUpperFirst()/]__[aOperation.name/] );
[/for]
	return s;
}

[/file]
[/template]