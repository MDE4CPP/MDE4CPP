[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateOperationExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::generateOperationExecution /]
[import fUML4CPP::generator::main::generateExecution /]
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::validation::validateModel /]
[import UML4CPP::generator::main::profiles::strategyHelper /]

[template public generateOperationExecutionSource(anOperation : Operation, aPackage :Package) {
	behaviorName : String = anOperation.generateOperationExecutionName(); 
}]

[file (aPackage.generateNamespacePath(false).concat('Exec/').concat(behaviorName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.generateNamespacePath(false)/]Exec/[behaviorName/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp" 
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_Reference.hpp"
#include "uml/Behavior.hpp"

[anOperation.generateIncludes(aPackage)/]

using namespace [aPackage.generateNamespace(false)/];

[behaviorName/]::[behaviorName/]()
{
}

[behaviorName/]::~[behaviorName/]()
{
}

[behaviorName/]::[behaviorName/](const [behaviorName/] &obj)
{
	*this = obj;
}

std::shared_ptr<ecore::EObject> [behaviorName/]::copy() const
{
	std::shared_ptr<[behaviorName/]> element(new [behaviorName/]());
	*element=(*this); 
	element->setThisExecutionPtr(element);
	return element;
}

[behaviorName/]& [behaviorName/]::operator=(const [behaviorName/] & obj)
{
	fUML::Semantics::CommonBehavior::OpaqueBehaviorExecutionImpl::operator=(obj);
	return *this;
}

void [behaviorName/]::doBody(std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue> > inputParameters, std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue> > outputParameters)
{
    DEBUG_INFO("Printing from '[behaviorName/]'")

	[anOperation.generateBody(aPackage)/]

	DEBUG_INFO("[behaviorName/] ends.")
}

void [behaviorName/]::setThisExecutionPtr(std::weak_ptr<[behaviorName/]> thisExecutionPtr)
{
	setThisOpaqueBehaviorExecutionPtr(thisExecutionPtr);
}
[/file]
[/template]

[template private generateIncludes(anOperation : Operation, aPackage : Package)]
[if (not anOperation.owner.isStrategyClass())]
#include "[anOperation.owner.getNearestPackage().generateNamespacePath(false)/]/[anOperation.owner.oclAsType(NamedElement).name.toUpperFirst()/].hpp"
#include "[anOperation.owner.getNearestPackage().generateNamespacePath(false)/]Exec/[anOperation.owner.oclAsType(NamedElement).name.toUpperFirst()/]Object.hpp"
[/if]
[for (typePackage : Package | anOperation.ownedParameter.type->asSet()->reject(supportedTypes())._package->asSet()->reject(isReflectionModel())->sortedBy(qualifiedName))]
#include "[typePackage.generateNamespacePath(false)/]/[typePackage.getPackageName()/]Package.hpp"
[/for]
[for (type : Type | anOperation.ownedParameter.type->asOrderedSet())]
[type.generateTypeInclude(type.getNearestPackage(), aPackage)/]
[/for]
[/template]

[template private generateBody(anOperation : Operation, aPackage : Package)]
[let type : Classifier = anOperation.owner.oclAsType(Classifier)]
std::shared_ptr<[type.getNearestPackage().generateNamespace(false)/]::[type.name.toUpperFirst()/]> context = std::dynamic_pointer_cast<[type.getNearestPackage().generateNamespace(false)/]::[type.name.toUpperFirst()/]Object>(this->getContext())->[type.UMLValueGetterName()/]();
[/let]

if (context == nullptr)
{
	DEBUG_ERROR("Context of CallOperationAction '[anOperation.name/]' is null!")
	throw "context is null";
}

std::shared_ptr<[anOperation.owner.oclAsType(NamedElement).getNearestPackage().generateNamespace(false)/]::[anOperation.owner.oclAsType(NamedElement).name.toUpperFirst()/]> target = context;

if (target == nullptr)
{
	DEBUG_ERROR("Target of CallOperationAction '[anOperation.name/]' is null!")
	throw "target is null";
}

[let parameterList : OrderedSet(Parameter) = anOperation.ownedParameter->select(direction = ParameterDirectionKind::_in or direction = ParameterDirectionKind::inout)]
[for (inPar : Parameter | parameterList)]
//Retrieve input parameter '[inPar.name/]'
[inPar.generateIncomingParameter(parameterList->indexOf(inPar)-1)/]
[/for]
[/let]

[for (outPar : Parameter | anOperation.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::out)))]
//Create output parameter '[outPar.name/]'
[outPar.generateCppType(false)/] [outPar.name/][if (outPar.upper <> 1)](new Bag<[outPar.type.generateCppType(true)/]>())[/if];
[/for]	

//Calling the associated operation.
[let retPar : OrderedSet(Parameter) = anOperation.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::return))]
[if(not retPar->isEmpty())][if (not retPar->first().oclIsInvalid())][retPar.generateCppType(false)/] [retPar.name/] = [/if][/if]target->[anOperation.name/]([for (par : Parameter | anOperation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return))) separator (',')] [par.name/][/for]);
[/let]	

[anOperation.ownedParameter->generateOutgoingParameters()/]
[/template]