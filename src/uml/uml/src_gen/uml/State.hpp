//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_STATE_HPP
#define UML_STATE_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Behavior;
	class Classifier;
	class Comment;
	class ConnectionPointReference;
	class Constraint;
	class Dependency;
	class ElementImport;
	class PackageImport;
	class PackageableElement;
	class Pseudostate;
	class Region;
	class StateMachine;
	class StringExpression;
	class Transition;
	class Trigger;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Namespace.hpp"
#include "uml/RedefinableElement.hpp"
#include "uml/Vertex.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A State models a situation during which some (usually implicit) invariant condition holds.
	<p>From package UML::StateMachines.</p>
	*/
	
	class UML_API State : virtual public Namespace, virtual public RedefinableElement, virtual public Vertex
	{
		public:
 			State(const State &) {}

		protected:
			State(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~State() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			A composite State is a State with at least one Region.
			result = (region->notEmpty())
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool isComposite() = 0;
			/*!
			An orthogonal State is a composite state with at least 2 regions.
			result = (region->size () > 1)
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool isOrthogonal() = 0;
			/*!
			A simple State is a State without any regions.
			result = ((region->isEmpty()) and not isSubmachineState())
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool isSimple() = 0;
			/*!
			Only submachine State references another StateMachine.
			result = (submachine <> null)
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool isSubmachineState() = 0;
			/*!
			The redefinition context of a State is the nearest containing StateMachine.
			result = (let sm : StateMachine = containingStateMachine() in
			if sm._'context' = null or sm.general->notEmpty() then
			  sm
			else
			  sm._'context'
			endif)
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual std::shared_ptr<uml::Classifier> redefinitionContext() = 0;

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			A state with isComposite=true is said to be a composite State. A composite State is a State that contains at least one Region.
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool getIsComposite() const = 0;
			/*!
			A State with isOrthogonal=true is said to be an orthogonal composite State An orthogonal composite State contains two or more Regions.
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool getIsOrthogonal() const = 0;
			/*!
			A State with isSimple=true is said to be a simple State A simple State does not have any Regions and it does not refer to any submachine StateMachine.
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool getIsSimple() const = 0;
			/*!
			A State with isSubmachineState=true is said to be a submachine State Such a State refers to another StateMachine(submachine).
			<p>From package UML::StateMachines.</p>
			*/
			 
			virtual bool getIsSubmachineState() const = 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::ConnectionPointReference, uml::NamedElement>> getConnection() const = 0;
			/*!
			The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Pseudostate, uml::NamedElement>> getConnectionPoint() const = 0;
			/*!
			A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Trigger, uml::Element>> getDeferrableTrigger() const = 0;
			/*!
			An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<uml::Behavior> getDoActivity() const = 0;
			/*!
			An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setDoActivity(std::shared_ptr<uml::Behavior>) = 0;
			/*!
			An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<uml::Behavior> getEntry() const = 0;
			/*!
			An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setEntry(std::shared_ptr<uml::Behavior>) = 0;
			/*!
			An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<uml::Behavior> getExit() const = 0;
			/*!
			An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setExit(std::shared_ptr<uml::Behavior>) = 0;
			/*!
			The State of which this State is a redefinition.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<uml::State> getRedefinedState() const = 0;
			/*!
			The State of which this State is a redefinition.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setRedefinedState(std::shared_ptr<uml::State>) = 0;
			/*!
			The Regions owned directly by the State.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::Region, uml::NamedElement>> getRegion() const = 0;
			/*!
			Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<uml::Constraint> getStateInvariant() const = 0;
			/*!
			Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setStateInvariant(std::shared_ptr<uml::Constraint>) = 0;
			/*!
			The StateMachine that is to be inserted in place of the (submachine) State.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual std::shared_ptr<uml::StateMachine> getSubmachine() const = 0;
			/*!
			The StateMachine that is to be inserted in place of the (submachine) State.
			<p>From package UML::StateMachines.</p>
			*/
			
			virtual void setSubmachine(std::shared_ptr<uml::StateMachine>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			A state with isComposite=true is said to be a composite State. A composite State is a State that contains at least one Region.
			<p>From package UML::StateMachines.</p>
			*/
			
			bool m_isComposite= false;
			/*!
			A State with isOrthogonal=true is said to be an orthogonal composite State An orthogonal composite State contains two or more Regions.
			<p>From package UML::StateMachines.</p>
			*/
			
			bool m_isOrthogonal= false;
			/*!
			A State with isSimple=true is said to be a simple State A simple State does not have any Regions and it does not refer to any submachine StateMachine.
			<p>From package UML::StateMachines.</p>
			*/
			
			bool m_isSimple= true;
			/*!
			A State with isSubmachineState=true is said to be a submachine State Such a State refers to another StateMachine(submachine).
			<p>From package UML::StateMachines.</p>
			*/
			
			bool m_isSubmachineState= false;
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The entry and exit connection points used in conjunction with this (submachine) State, i.e., as targets and sources, respectively, in the Region with the submachine State. A connection point reference references the corresponding definition of a connection point Pseudostate in the StateMachine referenced by the submachine State.
			<p>From package UML::StateMachines.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::ConnectionPointReference, uml::NamedElement>> m_connection;
			/*!
			The entry and exit Pseudostates of a composite State. These can only be entry or exit Pseudostates, and they must have different names. They can only be defined for composite States.
			<p>From package UML::StateMachines.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Pseudostate, uml::NamedElement>> m_connectionPoint;
			/*!
			A list of Triggers that are candidates to be retained by the StateMachine if they trigger no Transitions out of the State (not consumed). A deferred Trigger is retained until the StateMachine reaches a State configuration where it is no longer deferred.
			<p>From package UML::StateMachines.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Trigger, uml::Element>> m_deferrableTrigger;
			/*!
			An optional Behavior that is executed while being in the State. The execution starts when this State is entered, and ceases either by itself when done, or when the State is exited, whichever comes first.
			<p>From package UML::StateMachines.</p>
			*/
			
			std::shared_ptr<uml::Behavior> m_doActivity;
			/*!
			An optional Behavior that is executed whenever this State is entered regardless of the Transition taken to reach the State. If defined, entry Behaviors are always executed to completion prior to any internal Behavior or Transitions performed within the State.
			<p>From package UML::StateMachines.</p>
			*/
			
			std::shared_ptr<uml::Behavior> m_entry;
			/*!
			An optional Behavior that is executed whenever this State is exited regardless of which Transition was taken out of the State. If defined, exit Behaviors are always executed to completion only after all internal and transition Behaviors have completed execution.
			<p>From package UML::StateMachines.</p>
			*/
			
			std::shared_ptr<uml::Behavior> m_exit;
			/*!
			The State of which this State is a redefinition.
			<p>From package UML::StateMachines.</p>
			*/
			
			std::shared_ptr<uml::State> m_redefinedState;
			/*!
			The Regions owned directly by the State.
			<p>From package UML::StateMachines.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::Region, uml::NamedElement>> m_region;
			/*!
			Specifies conditions that are always true when this State is the current State. In ProtocolStateMachines state invariants are additional conditions to the preconditions of the outgoing Transitions, and to the postcondition of the incoming Transitions.
			<p>From package UML::StateMachines.</p>
			*/
			
			std::shared_ptr<uml::Constraint> m_stateInvariant;
			/*!
			The StateMachine that is to be inserted in place of the (submachine) State.
			<p>From package UML::StateMachines.</p>
			*/
			
			std::shared_ptr<uml::StateMachine> m_submachine;
	};
}
#endif /* end of include guard: UML_STATE_HPP */
