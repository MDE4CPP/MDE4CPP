//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef UML4CPPPROFILE_SINGLETON_SINGLETONIMPL_HPP
#define UML4CPPPROFILE_SINGLETON_SINGLETONIMPL_HPP

#include <functional>

//Model includes
#include "../Singleton.hpp"
#include "uml/impl/StereotypeImpl.hpp"
#include "uml/Property.hpp"

class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

namespace uml
{
	class Property;
}

//*********************************
namespace UML4CPPProfile
{
	class SingletonImpl : virtual public uml::StereotypeImpl, virtual public Singleton
	{
		public: 
			SingletonImpl(const SingletonImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;  
			SingletonImpl& operator=(SingletonImpl const&);

		protected:
			friend class UML4CPPProfileFactoryImpl;
			//constructor
			SingletonImpl();
			virtual std::shared_ptr<Singleton> getThisSingletonPtr();
			virtual void setThisSingletonPtr(std::weak_ptr<Singleton> thisSingletonPtr);


		public:

			//destructor
			virtual ~SingletonImpl();

			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			virtual std::weak_ptr<uml::Class> getBase_Class() const ;
			virtual void setBase_Class(std::weak_ptr<uml::Class> _base_Class);
			
			
			

		protected:
			virtual std::shared_ptr<uml::Class> getMetaClass();
			virtual void instantiate();
			virtual void destroy();

		public:
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			virtual Any get(std::shared_ptr<uml::Property> _property) const ;
			virtual void set(std::shared_ptr<uml::Property> _property, Any value) ;
			virtual void unset(std::shared_ptr<uml::Property> _property) ;
			
		
		private:
			std::weak_ptr<Singleton> m_thisSingletonPtr;
			std::map<std::string,std::function<Any()>> m_getterMap;
			std::map<std::string,std::function<void(Any)>> m_setterMap;
			std::map<std::string,std::function<void()>> m_unsetterMap;
	};
}
#endif /* end of include guard: UML4CPPPROFILE_SINGLETON_SINGLETONIMPL_HPP */
