[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of application files
 * 
 * this includes following files:
 * - main.cpp
 * - CMakeList.txt
 * - build.gradle
 * 
 */]
[module generateApplicationFiles('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateParameter /]
[import UML4CPP::generator::main::configuration::generateEclipseFiles /]
[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateApplication(aPackage : Package) { packageName : String = getPackageName().toUpperFirst(); }]
[file ('../application/src/main.cpp', false, 'UTF-8')]

#include <iostream>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "[aPackage.getPackageName()/]/[packageName/]Factory.hpp"
#include "[aPackage.getPackageName()/]/[packageName/]Package.hpp"

[for (aClass : Class | aPackage.allOwnedElements()->select(e|e.oclIsKindOf(uml::Class))->select(e|not (e.oclIsKindOf(FunctionBehavior) or e.oclIsKindOf(OpaqueBehavior) or e.oclIsKindOf(Activity))).oclAsType(uml::Class)->sortedBy(name))]
#include "[aPackage.getPackageName()/]/[aClass.name.toUpperFirst()/].hpp"
[/for]
[for (anInterface : Interface | aPackage.allOwnedElements()->select(e|e.oclIsKindOf(uml::Interface)).oclAsType(uml::Interface)->sortedBy(name))]
#include "[aPackage.getPackageName()/]/[anInterface.name.toUpperFirst()/].hpp"
[/for]
[for (anEnumeration : Enumeration | aPackage.ownedMember->filter(Enumeration))]
#include "[aPackage.getPackageName()/]/[anEnumeration.name/].hpp"
[/for]

[if (hasMainIncludes())]
[getMainIncludes()/]

[/if]
// [protected ('includes')] 
// You may manually edit additional includes, won't be overwritten upon generation.

// [/protected]

[if (not aPackage.ignoreNamespace())]using namespace [getPackageName()/];[/if]

// [protected ('functions')] 
// You may manually edit additional functions, won't be overwritten upon generation.

// [/protected]

int main ()
{
	//Create Model Factory and Package
	std::shared_ptr<[packageName/]Factory> factory = [packageName/]Factory::eInstance();
	std::shared_ptr<[packageName/]Package> package = [packageName/]Package::eInstance();

[if (hasMainSourceCode())]
[getMainSourceCode()/]

[/if]
// [protected ('main')]
// You may manually edit the following lines, won't be overwritten upon generation.

// [/protected]

    return 0;

}
[/file]

[comment	build application files/]
[file ('../application/src/CMakeLists.txt', false, 'UTF-8')]
#############################################################################
#																			#
#		 			CMakeList created by UML4CPP Generator					# 
#																			#
#############################################################################

# C++ project of application for [packageName/].uml, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

# [protected ('project_name')]
# You may manually edit the project name, won't be overwritten upon generation.
PROJECT(App_[packageName/])
# [/protected]

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(CMAKE_CXX_STANDARD 14)

[comment IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "AppleClang") -> not necessary after removing openmp/]
SET(CMAKE_CXX_FLAGS "-Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fmax-errors=5")
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	main.cpp
# [protected ('cpp')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

INCLUDE_DIRECTORIES(
	../
	${MDE4CPP_HOME}/application/include
# [protected ('includes')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

# Apple specific stuff
IF(APPLE)
  SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -undefined dynamic_lookup")
  SET(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -undefined dynamic_lookup")
ENDIF(APPLE)

IF(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
	[generateCMakeFindLibraryCommands('.so', 'bin', 'Linux')/]
ELSEIF(APPLE)
	[generateCMakeFindLibraryCommands('.dylib', 'bin', 'Apple')/]
ELSE()
	[generateCMakeFindLibraryCommands('', 'lib', 'Win')/]
ENDIF()

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")

IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateLibraryLinking(true)/]
ELSE()
	[generateLibraryLinking(false)/]
ENDIF()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME} 
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
)
[/file]

[comment gradle file for compile command of application /]
[file ('../application/build.gradle', false, 'UTF-8')]
plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.5"
}

description 'Compile task for project: App_[packageName/]'

task compileApplicationFor[packageName.toUpperFirst()/](type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group '[packageName/]'
	description 'compile ['ApplicationFor'.concat(packageName)/]'

	projectFolder = file('.' + File.separator + 'src')

	inputs.files(fileTree('.') {
        exclude 'src/.cmake/**'
    })
	if(!file('.' + File.separator + 'src' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'App_[packageName/].exe')
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'App_[packageName/]d.exe')

	// dependency to model '[packageName/]'
	def [packageName/] = getRootProject().getTasksByName('compile[packageName.toUpperFirst()/]', true)
	dependsOn [packageName/]
	inputs.files([packageName/].outputs)
}

task clean {
	doFirst {
		def cmakeFolder = file('.' + File.separator + 'src' + File.separator + '.cmake/')
		if(cmakeFolder.exists()) {
    		delete cmakeFolder.absolutePath
   			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
[/file]

[aPackage.generateEclipseFiles(true)/]
[/template]

[template private generateCMakeFindLibraryCommands(aPackage : Package, ending : String, folderName : String, system : String)]
IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, true, system)/]
ELSE()
	[generateCMakeFindLibraryCommand(aPackage, ending, folderName, false, system)/]
ENDIF()
[/template]

[query private libraryVariableNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'DEBUG' else 'RELEASE' endif/]
[query private libraryNameSuffix(debugMode : Boolean) : String = if (debugMode) then 'd' else '' endif/]
[query private buildModeCMakeProperty(debugMode : Boolean) : String = if (debugMode) then 'debug' else 'optimized' endif/]

[template private generateCMakeFindLibraryCommand(aPackage : Package, ending : String, folderName : String, debugMode : Boolean, system : String)]
[for (packName : String | aPackage.collectIncludingModelNames())]
FIND_LIBRARY([packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [packName/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
[/for]
FIND_LIBRARY([aPackage.getPackageName().toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/] [aPackage.getPackageName().toUpperFirst()/][libraryNameSuffix(debugMode)/][ending/] ${MDE4CPP_HOME}/application/[folderName/])
# ['['/]protected ('library_[system/]_[buildModeCMakeProperty(debugMode)/]')[']'/]
# You may manually edit the following lines, won't be overwritten upon generation.

# ['[/protected]'/]
[/template]

[template private generateLibraryLinking(aPackage : Package, debugMode : Boolean)]
TARGET_LINK_LIBRARIES(${PROJECT_NAME}
[for (packName : String | aPackage.collectIncludingModelNames())]
	[buildModeCMakeProperty(debugMode)/] ${[packName.toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}
[/for]
	[buildModeCMakeProperty(debugMode)/] ${[aPackage.getPackageName().toUpperCase()/]_[libraryVariableNameSuffix(debugMode)/]}

	# ['['/]protected ('library_linking_[buildModeCMakeProperty(debugMode)/]')[']'/]
	# You may manually edit the following lines, won't be overwritten upon generation.
	
	# ['['/]/protected[']'/]
)
[/template]