
#include "fUML/MDE4CPP_Extensions/impl/FUML_ObjectImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/Subset.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "ecore/ecoreFactory.hpp"
#include "fUML/Semantics/Loci/LociFactory.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorFactory.hpp"
#include "uml/Class.hpp"
#include "uml/Classifier.hpp"
#include "uml/Comment.hpp"
#include "ecore/EAnnotation.hpp"
#include "uml/Element.hpp"
#include "fUML/Semantics/CommonBehavior/EventAccepter.hpp"
#include "fUML/Semantics/CommonBehavior/EventOccurrence.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
#include "fUML/Semantics/CommonBehavior/ObjectActivation.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
//Factories and Package includes
#include "fUML/fUMLPackage.hpp"
#include "fUML/Semantics/CommonBehavior/CommonBehaviorPackage.hpp"
#include "fUML/Semantics/Loci/LociPackage.hpp"
#include "fUML/MDE4CPP_Extensions/MDE4CPP_ExtensionsPackage.hpp"
#include "ecore/ecorePackage.hpp"
#include "uml/umlPackage.hpp"

using namespace fUML::MDE4CPP_Extensions;

//*********************************
// Constructor / Destructor
//*********************************
FUML_ObjectImpl::FUML_ObjectImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

FUML_ObjectImpl::~FUML_ObjectImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete FUML_Object "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}


FUML_ObjectImpl::FUML_ObjectImpl(const FUML_ObjectImpl & obj): FUML_ObjectImpl()
{
	*this = obj;
}

FUML_ObjectImpl& FUML_ObjectImpl::operator=(const FUML_ObjectImpl & obj)
{
	//call overloaded =Operator for each base class
	uml::ElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of FUML_Object 
	 * which is generated by the compiler (as FUML_Object is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//FUML_Object::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy FUML_Object "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)

	//copy references with no containment (soft copy)
	m_locus  = obj.getLocus();
	//Clone references with containment (deep copy)
	//clone reference 'objectActivation'
	if(obj.getObjectActivation()!=nullptr)
	{
		m_objectActivation = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::ObjectActivation>(obj.getObjectActivation()->copy());
	}
	
	return *this;
}

//*********************************
// Operations
//*********************************
void FUML_ObjectImpl::_register(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& accepter)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    if(this->getObjectActivation() != nullptr)
    {
        this->getObjectActivation()->_register(accepter);
    }
	//end of body
}

void FUML_ObjectImpl::destroy()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    if(this->getObjectActivation() != nullptr)
    {
        this->getObjectActivation()->stop();
        this->setObjectActivation(nullptr);
    }

    this->getLocus()->remove(getThisFUML_ObjectPtr());
	//end of body
}

const std::shared_ptr<Bag<uml::Classifier>>& FUML_ObjectImpl::getTypes() const
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	static const std::shared_ptr<Bag<uml::Classifier>> nullPointer = nullptr;

return nullPointer;
	//end of body
}

std::shared_ptr<Any> FUML_ObjectImpl::invokeOpaqueBehavior(std::string _qualifiedName, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Any> FUML_ObjectImpl::invokeOpaqueBehavior(unsigned long _uID, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Any> FUML_ObjectImpl::invokeOperation(std::string _qualifiedName, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Any> FUML_ObjectImpl::invokeOperation(unsigned long _uID, const std::shared_ptr<Bag<Any>>& inputArguments, const std::shared_ptr<Bag<Any>>& outputArguments)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void FUML_ObjectImpl::send(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence>& eventOccurrence)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	// If the object is active, add the given event occurrence to the event pool and signal that a new event occurrence has arrived.
	// std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation> objectActivation = getObjectActivation();

	DEBUG_INFO("sending through object...")

	if(this->getObjectActivation() != nullptr) {
		DEBUG_INFO("object Activation found...")
 		this->getObjectActivation()->send(eventOccurrence);
	}
	else
	{
		DEBUG_INFO(" no object Activation found, creating a new one for debugging purposes, so you can send to non-active objects...")

		std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation> TempObjectActivation = fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createObjectActivation();
      	

		this->setObjectActivation( TempObjectActivation );
       		this->getObjectActivation()->setObject(getThisFUML_ObjectPtr());
	
 		this->getObjectActivation()->send(eventOccurrence);
	}


	//end of body
}

void FUML_ObjectImpl::startBehavior(const std::shared_ptr<uml::Class>& classifier, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>& inputs)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	if(this->getObjectActivation() == nullptr) 
    {
        this->setObjectActivation(std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation>(fUML::Semantics::CommonBehavior::CommonBehaviorFactory::eInstance()->createObjectActivation()));
        this->getObjectActivation()->setObject(getThisFUML_ObjectPtr());
    }

    this->getObjectActivation()->startBehavior(classifier, inputs);
	//end of body
}

void FUML_ObjectImpl::unregister(const std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter>& accepter)
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	    if(this->getObjectActivation() != nullptr)
    {
        this->getObjectActivation()->unregister(accepter);
    }
	//end of body
}

//*********************************
// Attribute Getters & Setters
//*********************************

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference locus */
const std::shared_ptr<fUML::Semantics::Loci::Locus>& FUML_ObjectImpl::getLocus() const
{
    return m_locus;
}
void FUML_ObjectImpl::setLocus(const std::shared_ptr<fUML::Semantics::Loci::Locus>& _locus)
{
    m_locus = _locus;
	
}

/* Getter & Setter for reference objectActivation */
const std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation>& FUML_ObjectImpl::getObjectActivation() const
{
    return m_objectActivation;
}
void FUML_ObjectImpl::setObjectActivation(const std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation>& _objectActivation)
{
    m_objectActivation = _objectActivation;
	
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> FUML_ObjectImpl::eContainer() const
{
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void FUML_ObjectImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get fUMLFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void FUML_ObjectImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<ecore::EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("locus");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("locus")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	uml::ElementImpl::loadAttributes(loadHandler, attr_list);
}

void FUML_ObjectImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("objectActivation") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				typeName = "ObjectActivation";
			}
			loadHandler->handleChild(this->getObjectActivation()); 

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	uml::ElementImpl::loadNode(nodeName, loadHandler);
}

void FUML_ObjectImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject>> references)
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_LOCUS:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<fUML::Semantics::Loci::Locus> _locus = std::dynamic_pointer_cast<fUML::Semantics::Loci::Locus>( references.front() );
				setLocus(_locus);
			}
			
			return;
		}
	}
	uml::ElementImpl::resolveReferences(featureID, references);
}

void FUML_ObjectImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	uml::ElementImpl::saveContent(saveHandler);
	
	ecore::EModelElementImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void FUML_ObjectImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage> package = fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance();
	// Add references
		saveHandler->addReference(this->getLocus(), "locus", getLocus()->eClass() != fUML::Semantics::Loci::LociPackage::eInstance()->getLocus_Class()); 
		//
		// Add new tags (from references)
		//
		std::shared_ptr<ecore::EClass> metaClass = this->eClass();
		// Save 'objectActivation'

		saveHandler->addReference(this->getObjectActivation(), "objectActivation", getObjectActivation()->eClass() != fUML::Semantics::CommonBehavior::CommonBehaviorPackage::eInstance()->getObjectActivation_Class());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

const std::shared_ptr<ecore::EClass>& FUML_ObjectImpl::eStaticClass() const
{
	return fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::eInstance()->getFUML_Object_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> FUML_ObjectImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_LOCUS:
			return eAny(getLocus(),fUML::Semantics::Loci::LociPackage::LOCUS_CLASS,false); //544
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_OBJECTACTIVATION:
			return eAny(getObjectActivation(),fUML::Semantics::CommonBehavior::CommonBehaviorPackage::OBJECTACTIVATION_CLASS,false); //545
	}
	return uml::ElementImpl::eGet(featureID, resolve, coreType);
}

bool FUML_ObjectImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_LOCUS:
			return getLocus() != nullptr; //544
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_OBJECTACTIVATION:
			return getObjectActivation() != nullptr; //545
	}
	return uml::ElementImpl::internalEIsSet(featureID);
}

bool FUML_ObjectImpl::eSet(int featureID,  const std::shared_ptr<Any>& newValue)
{
	switch(featureID)
	{
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_LOCUS:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<fUML::Semantics::Loci::Locus> _locus = std::dynamic_pointer_cast<fUML::Semantics::Loci::Locus>(eObject);
					if(_locus)
					{
						setLocus(_locus); //544
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'locus'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'locus'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case fUML::MDE4CPP_Extensions::MDE4CPP_ExtensionsPackage::FUML_OBJECT_ATTRIBUTE_OBJECTACTIVATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<fUML::Semantics::CommonBehavior::ObjectActivation> _objectActivation = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::ObjectActivation>(eObject);
					if(_objectActivation)
					{
						setObjectActivation(_objectActivation); //545
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'objectActivation'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'objectActivation'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	return uml::ElementImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> FUML_ObjectImpl::eInvoke(int operationID, const std::shared_ptr<Bag<Any>>& arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// fUML::MDE4CPP_Extensions::FUML_Object::_register(fUML::Semantics::CommonBehavior::EventAccepter): 2307607380
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION__REGISTER_EVENTACCEPTER:
		{
			//Retrieve input parameter 'accepter'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter> incoming_param_accepter;
			Bag<Any>::const_iterator incoming_param_accepter_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_accepter_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_accepter = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventAccepter>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation '_register'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation '_register'!")
					return nullptr;
				}
			}
		
			this->_register(incoming_param_accepter);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::destroy(): 4089641697
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_DESTROY:
		{
			this->destroy();
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::getTypes() : uml::Classifier[*] {const}: 1742598842
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_GETTYPES:
		{
			std::shared_ptr<Bag<uml::Classifier>> resultList = this->getTypes();
			return eEcoreContainerAny(resultList,uml::umlPackage::CLASSIFIER_CLASS);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::invokeOpaqueBehavior(std::string, Any[*], Any[*]) : Any: 738288422
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_INVOKEOPAQUEBEHAVIOR_ESTRING_EJAVAOBJECT:
		{
			//Retrieve input parameter '_qualifiedName'
			//parameter 0
			std::string incoming_param__qualifiedName;
			Bag<Any>::const_iterator incoming_param__qualifiedName_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param__qualifiedName = (*incoming_param__qualifiedName_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter '_qualifiedName'. Failed to invoke operation 'invokeOpaqueBehavior'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'inputArguments'
			//parameter 1
			std::shared_ptr<Bag<Any>> incoming_param_inputArguments;
			Bag<Any>::const_iterator incoming_param_inputArguments_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_inputArguments = (*incoming_param_inputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'inputArguments'. Failed to invoke operation 'invokeOpaqueBehavior'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'outputArguments'
			//parameter 2
			std::shared_ptr<Bag<Any>> incoming_param_outputArguments;
			Bag<Any>::const_iterator incoming_param_outputArguments_arguments_citer = std::next(arguments->begin(), 2);
			try
			{
				incoming_param_outputArguments = (*incoming_param_outputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'outputArguments'. Failed to invoke operation 'invokeOpaqueBehavior'!")
				return nullptr;
			}
		
			result = eAny(this->invokeOpaqueBehavior(incoming_param__qualifiedName,incoming_param_inputArguments,incoming_param_outputArguments), 0, false);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::invokeOpaqueBehavior(int, Any[*], Any[*]) : Any: 960883863
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_INVOKEOPAQUEBEHAVIOR_EINT_EJAVAOBJECT:
		{
			//Retrieve input parameter '_uID'
			//parameter 0
			unsigned long incoming_param__uID;
			Bag<Any>::const_iterator incoming_param__uID_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param__uID = (*incoming_param__uID_arguments_citer)->get<unsigned long>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter '_uID'. Failed to invoke operation 'invokeOpaqueBehavior'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'inputArguments'
			//parameter 1
			std::shared_ptr<Bag<Any>> incoming_param_inputArguments;
			Bag<Any>::const_iterator incoming_param_inputArguments_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_inputArguments = (*incoming_param_inputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'inputArguments'. Failed to invoke operation 'invokeOpaqueBehavior'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'outputArguments'
			//parameter 2
			std::shared_ptr<Bag<Any>> incoming_param_outputArguments;
			Bag<Any>::const_iterator incoming_param_outputArguments_arguments_citer = std::next(arguments->begin(), 2);
			try
			{
				incoming_param_outputArguments = (*incoming_param_outputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'outputArguments'. Failed to invoke operation 'invokeOpaqueBehavior'!")
				return nullptr;
			}
		
			result = eAny(this->invokeOpaqueBehavior(incoming_param__uID,incoming_param_inputArguments,incoming_param_outputArguments), 0, false);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::invokeOperation(std::string, Any[*], Any[*]) : Any: 3231998528
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_INVOKEOPERATION_ESTRING_EJAVAOBJECT:
		{
			//Retrieve input parameter '_qualifiedName'
			//parameter 0
			std::string incoming_param__qualifiedName;
			Bag<Any>::const_iterator incoming_param__qualifiedName_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param__qualifiedName = (*incoming_param__qualifiedName_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter '_qualifiedName'. Failed to invoke operation 'invokeOperation'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'inputArguments'
			//parameter 1
			std::shared_ptr<Bag<Any>> incoming_param_inputArguments;
			Bag<Any>::const_iterator incoming_param_inputArguments_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_inputArguments = (*incoming_param_inputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'inputArguments'. Failed to invoke operation 'invokeOperation'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'outputArguments'
			//parameter 2
			std::shared_ptr<Bag<Any>> incoming_param_outputArguments;
			Bag<Any>::const_iterator incoming_param_outputArguments_arguments_citer = std::next(arguments->begin(), 2);
			try
			{
				incoming_param_outputArguments = (*incoming_param_outputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'outputArguments'. Failed to invoke operation 'invokeOperation'!")
				return nullptr;
			}
		
			result = eAny(this->invokeOperation(incoming_param__qualifiedName,incoming_param_inputArguments,incoming_param_outputArguments), 0, false);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::invokeOperation(int, Any[*], Any[*]) : Any: 3453044381
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_INVOKEOPERATION_EINT_EJAVAOBJECT:
		{
			//Retrieve input parameter '_uID'
			//parameter 0
			unsigned long incoming_param__uID;
			Bag<Any>::const_iterator incoming_param__uID_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param__uID = (*incoming_param__uID_arguments_citer)->get<unsigned long>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter '_uID'. Failed to invoke operation 'invokeOperation'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'inputArguments'
			//parameter 1
			std::shared_ptr<Bag<Any>> incoming_param_inputArguments;
			Bag<Any>::const_iterator incoming_param_inputArguments_arguments_citer = std::next(arguments->begin(), 1);
			try
			{
				incoming_param_inputArguments = (*incoming_param_inputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'inputArguments'. Failed to invoke operation 'invokeOperation'!")
				return nullptr;
			}
		
			//Retrieve input parameter 'outputArguments'
			//parameter 2
			std::shared_ptr<Bag<Any>> incoming_param_outputArguments;
			Bag<Any>::const_iterator incoming_param_outputArguments_arguments_citer = std::next(arguments->begin(), 2);
			try
			{
				incoming_param_outputArguments = (*incoming_param_outputArguments_arguments_citer)->get<std::shared_ptr<Bag<Any>>>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'outputArguments'. Failed to invoke operation 'invokeOperation'!")
				return nullptr;
			}
		
			result = eAny(this->invokeOperation(incoming_param__uID,incoming_param_inputArguments,incoming_param_outputArguments), 0, false);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::send(fUML::Semantics::CommonBehavior::EventOccurrence): 1595242616
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_SEND_EVENTOCCURRENCE:
		{
			//Retrieve input parameter 'eventOccurrence'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventOccurrence> incoming_param_eventOccurrence;
			Bag<Any>::const_iterator incoming_param_eventOccurrence_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_eventOccurrence_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_eventOccurrence = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventOccurrence>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'send'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'eventOccurrence'. Failed to invoke operation 'send'!")
					return nullptr;
				}
			}
		
			this->send(incoming_param_eventOccurrence);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::startBehavior(uml::Class, fUML::Semantics::CommonBehavior::ParameterValue[*]): 692191281
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_STARTBEHAVIOR_CLASS_PARAMETERVALUE:
		{
			//Retrieve input parameter 'classifier'
			//parameter 0
			std::shared_ptr<uml::Class> incoming_param_classifier;
			Bag<Any>::const_iterator incoming_param_classifier_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_classifier_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_classifier = std::dynamic_pointer_cast<uml::Class>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'classifier'. Failed to invoke operation 'startBehavior'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'classifier'. Failed to invoke operation 'startBehavior'!")
					return nullptr;
				}
			}
		
			//Retrieve input parameter 'inputs'
			//parameter 1
			std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>> incoming_param_inputs;
			Bag<Any>::const_iterator incoming_param_inputs_arguments_citer = std::next(arguments->begin(), 1);
			{
				std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>((*incoming_param_inputs_arguments_citer));
				if(ecoreContainerAny)
				{
					try
					{
						std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
				
						if(eObjectList)
						{
							incoming_param_inputs.reset();
							for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
							{
								std::shared_ptr<fUML::Semantics::CommonBehavior::ParameterValue> _temp = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::ParameterValue>(anEObject);
								incoming_param_inputs->add(_temp);
							}
						}
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreContainerAny' for parameter 'inputs'. Failed to invoke operation 'startBehavior'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreContainerAny' for parameter 'inputs'. Failed to invoke operation 'startBehavior'!")
					return nullptr;
				}
			}
		
			this->startBehavior(incoming_param_classifier,incoming_param_inputs);
			break;
		}
		// fUML::MDE4CPP_Extensions::FUML_Object::unregister(fUML::Semantics::CommonBehavior::EventAccepter): 1214480524
		case MDE4CPP_ExtensionsPackage::FUML_OBJECT_OPERATION_UNREGISTER_EVENTACCEPTER:
		{
			//Retrieve input parameter 'accepter'
			//parameter 0
			std::shared_ptr<fUML::Semantics::CommonBehavior::EventAccepter> incoming_param_accepter;
			Bag<Any>::const_iterator incoming_param_accepter_arguments_citer = std::next(arguments->begin(), 0);
			{
				std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>((*incoming_param_accepter_arguments_citer));
				if(ecoreAny)
				{
					try
					{
						std::shared_ptr<ecore::EObject> _temp = ecoreAny->getAsEObject();
						incoming_param_accepter = std::dynamic_pointer_cast<fUML::Semantics::CommonBehavior::EventAccepter>(_temp);
					}
					catch(...)
					{
						DEBUG_ERROR("Invalid type stored in 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation 'unregister'!")
						return nullptr;
					}
				}
				else
				{
					DEBUG_ERROR("Invalid instance of 'ecore::EcoreAny' for parameter 'accepter'. Failed to invoke operation 'unregister'!")
					return nullptr;
				}
			}
		
			this->unregister(incoming_param_accepter);
			break;
		}

		default:
		{
			// call superTypes
			result = uml::ElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<fUML::MDE4CPP_Extensions::FUML_Object> FUML_ObjectImpl::getThisFUML_ObjectPtr() const
{
	return m_thisFUML_ObjectPtr.lock();
}
void FUML_ObjectImpl::setThisFUML_ObjectPtr(std::weak_ptr<fUML::MDE4CPP_Extensions::FUML_Object> thisFUML_ObjectPtr)
{
	m_thisFUML_ObjectPtr = thisFUML_ObjectPtr;
	setThisElementPtr(thisFUML_ObjectPtr);
}


