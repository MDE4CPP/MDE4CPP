//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_ECLASSIFIERECLASSIFIERIMPL_HPP
#define ECORE_ECLASSIFIERECLASSIFIERIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "ecore/ecore.hpp" 

// model includes
#include "../EClassifier.hpp"

#include "ecore/impl/ENamedElementImpl.hpp"

//*********************************
namespace ecore 
{
	class ECORE_API EClassifierImpl : virtual public ENamedElementImpl, virtual public EClassifier 
	{
		public: 
			EClassifierImpl(const EClassifierImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;
			EClassifierImpl& operator=(EClassifierImpl const&); 

		protected:
			friend class ecoreFactoryImpl;
			EClassifierImpl();
			virtual std::shared_ptr<ecore::EClassifier> getThisEClassifierPtr() const;
			virtual void setThisEClassifierPtr(std::weak_ptr<ecore::EClassifier> thisEClassifierPtr);

			//Additional constructors for the containments back reference
			EClassifierImpl(std::weak_ptr<ecore::EObject> par_eContainer);
			//Additional constructors for the containments back reference
			EClassifierImpl(std::weak_ptr<ecore::EPackage> par_ePackage);

		public:
			//destructor
			virtual ~EClassifierImpl() = 0;
			
			//*********************************
			// Operations
			//*********************************
			virtual int getClassifierID() ;
			virtual bool isInstance(std::shared_ptr<Any> object) const ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual std::shared_ptr<Any> getDefaultValue() const ;
			virtual void setDefaultValue (std::shared_ptr<Any> _defaultValue);
			virtual void * getInstanceClass() const ;
			virtual std::string getInstanceClassName() const ;
			virtual void setInstanceClassName (std::string _instanceClassName);
			virtual std::string getInstanceTypeName() const ;
			virtual void setInstanceTypeName (std::string _instanceTypeName);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual std::weak_ptr<ecore::EPackage> getEPackage() const ;
			virtual std::shared_ptr<Bag<ecore::ETypeParameter>> getETypeParameters() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<ecore::EClassifier> m_thisEClassifierPtr;
	};
}
#endif /* end of include guard: ECORE_ECLASSIFIERECLASSIFIERIMPL_HPP */
