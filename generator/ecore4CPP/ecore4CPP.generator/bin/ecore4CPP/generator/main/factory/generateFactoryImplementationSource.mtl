[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFactoryImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[template public generateFactoryImplSource(anEPackage : EPackage) {className : String = anEPackage.name.toUpperFirst().concat('FactoryImpl');}]
[file (anEPackage.name.concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[anEPackage.name/]/impl/[className/].hpp"

#include <cassert>

[generateAbstractDataTypesIncludes()/]
[if (not(anEPackage.name = 'ecore'))]
#include "ecore/EClass.hpp"
[/if]
[if(anEPackage.name = 'uml')]
#include "uml/impl/ElementImpl.hpp"
[/if]

#include "[anEPackage.name/]/[anEPackage.name.toUpperFirst().concat('Package')/].hpp"
[generateFactoryImports()/]

[comment namespace /]
using namespace [anEPackage.name/];

//*********************************
// Constructor / Destructor
//*********************************

[className/]::[className/]()
{
	[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
	m_idMap.insert(std::make_pair("[aClass.generateTypeClass()/]", [anEPackage.name.toUpperFirst()/]Package::[aClass.getStaticAttributeIDName()/]));
	[/for]
[if (generateObjectMonitoring())]
	m_createdElements.reset(new Bag<ecore::EObject>());
[/if]
}

[className/]::~[className/]()
{
}
[if (generateObjectMonitoring())]
void [className/]::print()
{
	clearCreatedElements();

	std::cout << "fUML objects:" << std::endl;
	std::cout << "still existing: " << m_createdElements->size() << std::endl;

	std::cout << "pointer - class name - use count (1 by factory)" << std::endl;
	std::map<std::shared_ptr<ecore::EClass>, int> map;
	for (std::shared_ptr<ecore::EObject> obj : *m_createdElements)
	{
		std::shared_ptr<ecore::EClass> objClass = obj->eClass();
		std::string className = objClass->getName();

		std::cout << obj << "  " << obj.use_count() << " " << className << std::endl;

		auto iter = map.find(obj->eClass());
		if (iter != map.end())
		{
			iter->second++;
		}
		else
		{
			map.insert(std::pair<std::shared_ptr<ecore::EClass>, int>(objClass, 1));
		}
	}
	std::cout << "########################" << std::endl;
	std::cout << "meta clas - count" << std::endl;

	auto iter = map.begin();
	while (iter != map.end())
	{
		std::cout << iter->first->getName() << "  " << iter->second << std::endl;
		iter++;
	}
}

void [className/]::clearCreatedElements()
{
	bool found = true;
	while (found)
	{
		found = false;
		for (std::shared_ptr<ecore::EObject> obj : *m_createdElements)
		{
			if (obj.use_count() <= 2)
			{
				m_createdElements->erase(obj);
				found = true;
			}
		}
	}
}

void [className/]::add(std::shared_ptr<ecore::EObject> obj)
{
	clearCreatedElements();
	m_createdElements->push_back(obj);
}
[/if]

[anEPackage.name.toUpperFirst().concat('Factory')/]* [className/]::create()
{
	return new [className/]();
}

//*********************************
// creators
//*********************************

std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create(const int metaElementID, std::shared_ptr<ecore::EObject> container /*= nullptr*/, const int referenceID/* = -1*/)[if (not generateObjectMonitoring())] const[/if]
{
	switch(metaElementID)
	{
	[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
	[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
		case [anEPackage.name.toUpperFirst()/]Package::[aClass.getStaticAttributeIDName()/]:
		{
[if(ref->size()>0)]
			if (nullptr == container)
			{
[/if]
				return this->create[aClass.name/](metaElementID);
[if(ref->size()>0)]			}
			else
			{
[/if]
				[if(ref->size()>1)]
				switch(referenceID)
				{
					[for(aReference:EReference | ref->sortedBy(name))]
					//[aClass.name/] has [aReference.name/] as a containment
					case  [anEPackage.name.toUpperFirst()/]Package::[aReference.getStaticAttributeIDName()/]:
					{
						auto castedContainer = std::dynamic_pointer_cast<[aReference.generateReferenceType(false)/]>(container);
						return this->create[aClass.name/]_in_[aReference.name.toUpperFirst()/](castedContainer,metaElementID);
					}
					[/for]
					default:
						std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
				}
				[elseif(ref->size()=1)]
				std::shared_ptr<[ref->first().generateReferenceType(false)/]> castedContainer = std::dynamic_pointer_cast<[ref->first().generateReferenceType(false)/]>(container);
				assert(castedContainer);
				return std::shared_ptr<[aClass.generateType()/]>(this->create[aClass.name/]_in_[ref->first().name.toUpperFirst()/](castedContainer,metaElementID));
				[/if]
			[if(ref->size()>0)]}[/if]
		}
	[/let]
	[/for]
	default:
	   	    std::cerr << __PRETTY_FUNCTION__ << " ID " << metaElementID <<" not found" << std::endl;
	}
	return nullptr;
}

std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create(std::shared_ptr<[needNamespace(anEPackage, 'EClass')/]> _class, std::shared_ptr<ecore::EObject> container /*= nullptr*/, const int referenceID/* = -1*/)[if (not generateObjectMonitoring())] const[/if]
{
	if(_class->isAbstract())
    {
    	return nullptr;
   	}
	int _elementID = _class->getMetaElementID();
	return create(_elementID, container, referenceID);
}

std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create(std::string _className, std::shared_ptr<ecore::EObject> container /*= nullptr*/, const int referenceID/* = -1*/)[if (not generateObjectMonitoring())] const[/if]
{
	auto iter = m_idMap.find(_className);
	if(iter != m_idMap.end())
    {
		//get the ID
        int id = iter->second;
		return create(id,container,referenceID);
    }
    return nullptr;
}

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/](const int metaElementID/*=-1*/)[if (not generateObjectMonitoring())] const[/if]
{
	std::shared_ptr<[aClass.generateTypeClass()/]Impl> element(new [aClass.generateTypeClass()/]Impl());
	element->set[aClass.getClassifierIDName()/]ID(metaElementID);
	element->[generateGetThisPtrPropertySetterName()/](element);
[if (generateObjectMonitoring())]
	m_createdElements->push_back(element);
[/if]
	return element;
}
[let ref : OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref->sortedBy(name))]
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/]_in_[aReference.name.toUpperFirst()/]([aReference.generateReferenceType(true)/] par_[aReference.name/], const int metaElementID)[if (not generateObjectMonitoring())] const[/if]
{
	[generateCreateFunctionContent(aClass, ref, aReference, anEPackage)/]
}
[/for]
[/let]
[/for]

std::shared_ptr<[anEPackage.name.toUpperFirst().concat('Package')/]> [className/]::get[anEPackage.name.toUpperFirst().concat('Package')/]() const
{
	return [anEPackage.name.toUpperFirst().concat('Package')/]::eInstance();
}
[/file]
[/template]

[template public generateCreateFunctionContent(anEClass : EClass, ref : OrderedSet(EReference), aReference : EReference, anEPackage : EPackage)]
[if(ref->select(eType = aReference.eType)->size()>1)]
std::shared_ptr<[anEClass.generateTypeClass()/]Impl> element(new [anEClass.generateTypeClass()/]Impl(par_[aReference.name/], [anEPackage.name.toUpperFirst()/]Package::[aReference.getStaticAttributeIDName()/]));
[else]
std::shared_ptr<[anEClass.generateTypeClass()/]Impl> element(new [anEClass.generateTypeClass()/]Impl(par_[aReference.name/]));
[/if]
element->set[anEClass.getClassifierIDName()/]ID(metaElementID);
[if(not aReference.eOpposite.name.oclIsUndefined())]
[let r : EReference = findLowerSubset(aReference.eType.oclAsType(EClass), anEClass, aReference.eOpposite)]
[if(aReference.isBackReference())]
if(auto wp = par_[aReference.name/].lock())
{
[else]
if(nullptr != par_[aReference.name/])
{
[/if]
[if(r.upperBound <> 1)]
		[if(aReference.isBackReference())]wp[else]par_[aReference.name/][/if]->get[r.name.toUpperFirst()/]()->push_back(element);
[else]
		[if(aReference.isBackReference())]wp[else]par_[aReference.name/][/if]->set[r.name.toUpperFirst()/](element);
[/if]
}
[/let]
[/if]
element->[generateGetThisPtrPropertySetterName()/](element);
[if (generateObjectMonitoring())]
m_createdElements->push_back(element);
[/if]
return element;

[/template]

[template public generateFactoryImports(anEPackage : EPackage)]
[for (elements : EClassifier| OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass)->asOrderedSet()->sortedBy(name))]
#include "[elements.generateNamespacePath()/]/impl/[elements.name.toUpperFirst().concat('Impl.hpp')/]"
[/for]
[for (subPackage : EPackage | anEPackage.eSubpackages->sortedBy(name))]
[subPackage.generateFactoryImports()/]
[/for]
[let ref:OrderedSet(EReference) = OrderedSet{anEPackage.eClassifiers}->flatten()->selectByKind(EClass).getAllContainers()->asOrderedSet()->sortedBy(name)]

[for(aReference:EReference | ref->select(not (ref.eType.getRootPackage() = anEPackage.getRootPackage())))]
#include "[aReference.eType.generateNamespacePath()/]/[aReference.eType.name.toUpperFirst().concat('.hpp')/]"
[/for]
[/let]
[/template]