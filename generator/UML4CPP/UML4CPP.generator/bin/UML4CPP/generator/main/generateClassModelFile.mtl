[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of class model file
 * 
 */]
[module generateClassModelFile('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import UML4CPP::generator::main::components::generateInterfaceRealization /]
[import UML4CPP::generator::main::components::generateOperation /]
[import UML4CPP::generator::main::components::generateProperty /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::singletonHelper /]
[import UML4CPP::generator::main::validation::validateModel /]

[query private includes(aClass : Class) : Set(Type) = Set(Type){aClass.ownedAttribute.type, aClass.ownedOperation.ownedParameter.type}->flatten() /]

[template public generateModel(aClass : Class) {aPackage:Package = aClass.ancestors()->filter(Package)->first();}]
[file (aPackage.getPackageName().concat('/').concat(aClass.name.toUpperFirst()).concat('.hpp'), false, 'UTF-8')]
[startGuard(aClass)/]

[generateAbstractDataTypesForwardDeclaration()/]

[if (not aClass.owner.ownedElement->filter(Usage)->isEmpty())]
//********************
// usage
[for (usages : Usage| aClass.owner.ownedElement->filter(Usage)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
[if (not (usages.supplier.name->asOrderedSet()->first() = aClass.name.toString()))]
   #include "[usages.getNearestPackage().getPackageName()/]/[usages.supplier.name/].hpp"
[/if]
[/for]
[/if]

[if (OrderedSet{aClass.includes()->filter(Interface), aClass.includes()->filter(Class)}->flatten()->size() > 0)]
//Forward Declaration for used types
[for (element : Classifier | OrderedSet{aClass.includes()->filter(Interface), aClass.includes()->filter(Class)}->flatten()->sortedBy(myQualifiedName())) separator ('\n')]
[if (element.oclIsUndefined() or element.name.oclIsUndefined())]
// undefined  [element.eClass().name/] ([element.toString()/]) ['class '.concat(aClass.name).concat(': header include failed for undefined ').concat(element.eClass().name).concat(' ').concat(element.toString()).registerError()/]
[else]
[if (not element.getNearestPackage().ignoreNamespace())]namespace [element.namespace.myNamespaceName()/] 
{
[/if]
	class [element.name.toUpperFirst()/];
[if (not element.getNearestPackage().ignoreNamespace())]}[/if]
[/if]
[/for]
[/if]

// base class includes
[if (aClass.superClass->isEmpty())]
#include "uml/[aClass.getGeneralSuperClassName()/].hpp"
[else]
[for (elements : Classifier| aClass.superClass->asOrderedSet()->sortedBy(myQualifiedName()))]
[if (elements.oclIsUndefined() or elements.name.oclIsUndefined())]
// undefined superclass [elements.toString()/]['class: '.concat(aClass.name).concat(': undefined superclass: ').concat(elements.toString()).registerError()/]
[else]
#include "[elements.getNearestPackage().getPackageName()/]/[elements.name.toUpperFirst().concat('.hpp')/]"
[/if]
[/for]
[/if]

[if (not aClass.interfaceRealization->isEmpty())]
// Interface realization
[for (anInterfaceRealization : InterfaceRealization | aClass.interfaceRealization->asOrderedSet()->sortedBy(myQualifiedName()))]
[for (aNamedElement : NamedElement | anInterfaceRealization.supplier->select(oclIsUndefined() or name.oclIsUndefined()))]
// undefined interface realization supplier [aNamedElement.toString()/]['class: '.concat(aClass.name).concat(': undefined interface realization supplier: ').concat(aNamedElement.toString()).registerError()/]
[/for]
[for (aNamedElement : NamedElement | anInterfaceRealization.supplier->select(not oclIsUndefined() and not name.oclIsUndefined()))]
#include "[aNamedElement.getNearestPackage().myNamespaceName()/]/[aNamedElement.name.toUpperFirst()/].hpp"
[/for]
[/for]
[/if]

[if (aClass.includes()->selectByKind(Enumeration)->size() > 0)]
// enum includes
[for (elements : Enumeration | aClass.includes()->selectByKind(Enumeration)->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
#include "[elements.getNearestPackage().getPackageName()/]/[elements.name.toUpperFirst().concat('.hpp')/]"[/for]
[/if]

[if (not aClass.getNearestPackage().ignoreNamespace())]
namespace [aPackage.name/]
{
[/if]
	class [aClass.name.toUpperFirst()/] [if (aClass.superClass->isEmpty())] : virtual public uml::[aClass.getGeneralSuperClassName()/] [aClass.generateInterfaceExtensions()/]
[else][for (sClass : Class | aClass.superClass->reject(oclIsUndefined() and name.oclIsUndefined())->asOrderedSet()->sortedBy(myQualifiedName())) before (':') separator (',')]
virtual public [sClass.getClassifierName(aClass, ignoreNamespace(sClass))/][/for]
[/if]
	{
		private:    
			[aClass.name.toUpperFirst()/](const [aClass.name.toUpperFirst()/]& that) = delete;

		protected:
			[aClass.name.toUpperFirst()/](){}

		public:
			//destructor
			virtual ~[aClass.name.toUpperFirst()/]() {}

			//*********************************
			// Getter Setter
			//*********************************
			[aClass.ownedAttribute->sortedBy(name).generateAttributeAccessorsDeclaration(false)/]
			
			//*********************************
			// Operations
			//*********************************
			[aClass.ownedOperation->sortedBy(name).generateOperationDecl(false)/]
			
		protected:
			//*********************************
			// Members
			//*********************************
			[aClass.ownedAttribute->sortedBy(name).generateAttributeProtectedMember()/]
[if (isSingleton())]

			//Singleton Instance and Getter
		[generateSingletonDecl(aClass.name)/]
[/if]	
	};
[if (not aClass.getNearestPackage().ignoreNamespace())]}[/if]
[endGuard(aClass)/]
[/file]
[/template]