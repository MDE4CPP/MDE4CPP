// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: fuml4cpp::generator::main::generateExecutionBuildFile

description 'Build tasks for project: FoundationalModelLibrary'

task runCommandCompileFoundationalModelLibrary(type:Exec) {
	commandLine 'cmd', '/c', 'gradlew src_gen:compileFoundationalModelLibrarySrc'
	mustRunAfter =  [
		"generateFoundationalModelLibrary" 
		, getRootProject().getTasksByName('compileFUML', true)
		, getRootProject().getTasksByName('compileEcoreReflection', true)
		, getRootProject().getTasksByName('compileUml', true)
		, getRootProject().getTasksByName('compilePrimitivetypesReflection', true)
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUmlReflection', true)
	]
}

task runCommandGenerateFoundationalModelLibrary(type:Exec) {
	def modelPath = file('.' + File.separator + 'model' + File.separator + 'FoundationalModelLibrary.uml')
	commandLine 'cmd', '/c', 'gradlew :src:common:universalGradleTasks:generateModel -PModel='+modelPath.absolutePath
}

task generateFoundationalModelLibrary() {
	group 'FoundationalModelLibrary'
	description 'description generate C++ code of FoundationalModelLibrary.uml model FoundationalModelLibrary' 
 
	def buildFile = file('model/build.gradle')
	if(!buildFile.exists())
	{
		dependsOn 'runCommandGenerateFoundationalModelLibrary'
	}
	else
	{
		dependsOn 'model:generateFoundationalModelLibraryModel'
	}
}

task compileFoundationalModelLibrarySrc() {
	group 'FoundationalModelLibrary'
	description 'compile FoundationalModelLibrary'

	def buildFile = file('src_gen/build.gradle')
	if(!buildFile.exists()){ 
		dependsOn 'generateFoundationalModelLibrary'
		dependsOn 'runCommandCompileFoundationalModelLibrary'
	}
	else
	{
		dependsOn 'generateFoundationalModelLibrary'
		dependsOn 'src_gen:compileFoundationalModelLibrarySrc'
	}
	mustRunAfter =  [
		"generateFoundationalModelLibrary" 
		, getRootProject().getTasksByName('compileFUML', true)
		, getRootProject().getTasksByName('compileEcoreReflection', true)
		, getRootProject().getTasksByName('compileUml', true)
		, getRootProject().getTasksByName('compilePrimitivetypesReflection', true)
		, getRootProject().getTasksByName('compileEcore', true)
		, getRootProject().getTasksByName('compileUmlReflection', true)
	]
}

task buildFoundationalModelLibrary() {
	group 'FoundationalModelLibrary'
	description 'build FoundationalModelLibrary'

	dependsOn 'generateFoundationalModelLibrary'
	dependsOn 'compileFoundationalModelLibrary'
	dependsOn getRootProject().getTasksByName('buildFUML', true)
	dependsOn getRootProject().getTasksByName('buildEcoreReflection', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
	dependsOn getRootProject().getTasksByName('buildPrimitivetypesReflection', true)
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildUmlReflection', true)
}

