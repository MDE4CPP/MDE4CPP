//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_SEMANTICS_STRUCTUREDCLASSIFIERSPACKAGEIMPL_HPP
#define FUML_SEMANTICS_STRUCTUREDCLASSIFIERSPACKAGEIMPL_HPP

// namespace macro header include
#include "fUML/fUML.hpp"

#include "ecore/ecorePackage.hpp"
#include "ecore/impl/EPackageImpl.hpp"

#include "fUML/Semantics/StructuredClassifiers/StructuredClassifiersPackage.hpp" 


namespace fUML::Semantics::StructuredClassifiers 
{
	class DispatchStrategy;
	class RedefinitionBasedDispatchStrategy;}

namespace ecore
{
	class ecoreFactory;
}

namespace fUML::Semantics::StructuredClassifiers
{
	class FUML_API StructuredClassifiersPackageImpl : public ecore::EPackageImpl ,virtual public StructuredClassifiersPackage
	{
		private:    
			StructuredClassifiersPackageImpl(StructuredClassifiersPackageImpl const&) = delete;
			StructuredClassifiersPackageImpl& operator=(StructuredClassifiersPackageImpl const&) = delete;

		protected:
			StructuredClassifiersPackageImpl();

		public:
			virtual ~StructuredClassifiersPackageImpl();

			// Begin Class DispatchStrategy
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getDispatchStrategy_Class() const ;
			
			
			
			virtual std::shared_ptr<ecore::EOperation> getDispatchStrategy_Operation_dispatch_Element_Operation() const ;
			virtual std::shared_ptr<ecore::EOperation> getDispatchStrategy_Operation_getName() const ;
			virtual std::shared_ptr<ecore::EOperation> getDispatchStrategy_Operation_retrieveMethod_Element_Operation() const ;
			
			// End Class DispatchStrategy

			// Begin Class RedefinitionBasedDispatchStrategy
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getRedefinitionBasedDispatchStrategy_Class() const ;
			
			
			
			virtual std::shared_ptr<ecore::EOperation> getRedefinitionBasedDispatchStrategy_Operation_operationsMatch_Operation_Operation() const ;
			virtual std::shared_ptr<ecore::EOperation> getRedefinitionBasedDispatchStrategy_Operation_retrieveMethod_Element_Operation() const ;
			
			// End Class RedefinitionBasedDispatchStrategy

			
			// SubPackages Getters
			

		private:
			std::shared_ptr<ecore::EClass> m_dispatchStrategy_Class = nullptr;std::shared_ptr<ecore::EClass> m_redefinitionBasedDispatchStrategy_Class = nullptr;
			
			
			
			std::shared_ptr<ecore::EOperation> m_dispatchStrategy_Operation_dispatch_Element_Operation = nullptr;std::shared_ptr<ecore::EOperation> m_dispatchStrategy_Operation_getName = nullptr;std::shared_ptr<ecore::EOperation> m_redefinitionBasedDispatchStrategy_Operation_operationsMatch_Operation_Operation = nullptr;std::shared_ptr<ecore::EOperation> m_dispatchStrategy_Operation_retrieveMethod_Element_Operation = nullptr;std::shared_ptr<ecore::EOperation> m_redefinitionBasedDispatchStrategy_Operation_retrieveMethod_Element_Operation = nullptr;

			friend class StructuredClassifiersPackage;

			static bool isInited;
			static StructuredClassifiersPackage* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init(std::shared_ptr<ecore::EPackage> package);

		public:
			void createPackageContents(std::shared_ptr<ecore::EPackage> package);
			void initializePackageContents();

		private:
			void createDispatchStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createRedefinitionBasedDispatchStrategyContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);
			void createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory);

			void initializeDispatchStrategyContent();
			void initializeRedefinitionBasedDispatchStrategyContent();
			void initializePackageEDataTypes();



	};
}
#endif /* end of include guard: FUML_SEMANTICS_STRUCTUREDCLASSIFIERSPACKAGEIMPL_HPP */
