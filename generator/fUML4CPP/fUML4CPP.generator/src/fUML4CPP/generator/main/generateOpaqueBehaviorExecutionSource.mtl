[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateOpaqueBehaviorExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import fUML4CPP::generator::main::generateExecution /]
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::fUMLKeywords /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::components::generateOpaqueBehavior /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::validation::validateModel /]

[template public generateOpaqueBehaviorExecutionSource(anOpaqueBehavior : OpaqueBehavior, aPackage :Package) {
	behaviorName : String = anOpaqueBehavior.generateOpaqueBehaviorExecutionName(); 
}]

[file (aPackage.generateNamespacePath(false).concat('Exec/').concat(behaviorName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.generateNamespacePath(false)/]Exec/[behaviorName/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp" 
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "PSCS/Semantics/StructuredClassifiers/CS_Reference.hpp"
#include "uml/Behavior.hpp"

[anOpaqueBehavior.generateIncludesOpaqueBehavior(aPackage)/]

using namespace [aPackage.generateNamespace(false)/];

[behaviorName/]::[behaviorName/]()
{
}

[behaviorName/]::~[behaviorName/]()
{
}

[behaviorName/]::[behaviorName/](const [behaviorName/] &obj)
{
	OpaqueBehaviorExecutionImpl::operator=(obj);
}

std::shared_ptr<ecore::EObject> [behaviorName/]::copy() const
{
	std::shared_ptr<[behaviorName/]> element(new [behaviorName/]());
	*element=(*this);
	element->setThisExecutionPtr(element);
	return element;
}

[behaviorName/]& [behaviorName/]::operator=(const [behaviorName/] & obj)
{
	fUML::Semantics::CommonBehavior::OpaqueBehaviorExecutionImpl::operator=(obj); 
	return *this;
}

void [behaviorName/]::doBody(const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>% inputParameters, const std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue>>& outputParameters)
{
    DEBUG_MESSAGE(std::cout << "Printing from "<< this->getBehavior()->getName() << std::endl;)
    DEBUG_MESSAGE(std::cout << "__________________________" << std::endl;)

	[anOpaqueBehavior.generateBody(aPackage)/]

	DEBUG_MESSAGE(std::cout<< "^^^^^ [behaviorName/] ends ^^^^^" << std::endl;)
}

void [behaviorName/]::setThisExecutionPtr(std::weak_ptr<[behaviorName/]> thisExecutionPtr)
{
	setThisOpaqueBehaviorExecutionPtr(thisExecutionPtr);
}
[/file]
[/template]

[template private generateIncludesOpaqueBehavior(anOpaqueBehavior : OpaqueBehavior, aPackage : Package)]
[if (anOpaqueBehavior.hasLanguage(keyInclude()))]
//Included from opaque behavior "[anOpaqueBehavior.name/]"
[anOpaqueBehavior.getEntryForLanguage(keyInclude())/]
[/if]

[for (typePackage : Package | anOpaqueBehavior.ownedParameter.type->asSet()->reject(supportedTypes())._package->asSet()->reject(isReflectionModel())->sortedBy(qualifiedName))]
#include "[typePackage.generateNamespacePath(false)/]/[typePackage.getPackageName()/]Package.hpp"
[/for]

[for (type : Type | anOpaqueBehavior.ownedParameter.type->asOrderedSet())]
[type.generateTypeInclude(type.getNearestPackage(), aPackage)/]
[/for]

[if (anOpaqueBehavior.hasContext() or anOpaqueBehavior.language->includes(keyOCL()))]
#include "[anOpaqueBehavior.owner.oclAsType(Classifier).getNearestPackage().generateNamespacePath(false)/]/[anOpaqueBehavior._context.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[aPackage.generateNamespacePath(false)/]Exec/[anOpaqueBehavior._context.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
[if (anOpaqueBehavior.language->includes(keyOCL()))]
//Include ocl parser header
#include "oclParser/Utilities/Ocl.h"
[/if]
[/if]
[/template]

[template private generateBody(anOpaqueBehavior : OpaqueBehavior, aPackage : Package)]
[if (anOpaqueBehavior.hasContext())]
std::shared_ptr<[anOpaqueBehavior.getContext().getNearestPackage().generateNamespace(false)/]::[anOpaqueBehavior.getContext().name.toUpperFirst()/]> context = nullptr;

if(this->getContext()){
	std::shared_ptr<[anOpaqueBehavior.getContext().getNearestPackage().generateNamespace(false)/]::[anOpaqueBehavior.getContext().name.toUpperFirst()/]Object> contextObject = std::dynamic_pointer_cast<[anOpaqueBehavior.getContext().getNearestPackage().generateNamespace(false)/]::[anOpaqueBehavior.getContext().name.toUpperFirst()/]Object>(this->getContext());

	if(contextObject)
	{
		context = contextObject->[anOpaqueBehavior.getContext().UMLValueGetterName()/]();
	}
}

DEBUG_MESSAGE(
	if (context == nullptr)
	{
		std::cerr << "WARNING: execution for OpaqueBehavior '[anOpaqueBehavior.name/]' does not have a context and may behave unexpected." << std::endl;
	}
)
[/if]

[let parameterList : OrderedSet(Parameter) = anOpaqueBehavior.ownedParameter->select(direction = ParameterDirectionKind::_in or direction = ParameterDirectionKind::inout)]
[for (inPar : Parameter | parameterList)]
//Retrieve input parameter '[inPar.name/]'
[inPar.generateIncomingParameter(parameterList->indexOf(inPar)-1)/]
[/for]
[/let]

[for (outPar : Parameter | anOpaqueBehavior.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::out or p.direction = ParameterDirectionKind::return)))]
//Create output parameter '[outPar.name/]'
[outPar.generateCppType(false)/] [outPar.name/][if (outPar.upper <> 1)](new Bag<[outPar.type.generateCppType(true)/]>())[/if];
[/for]	

//Body of the OpaqueBehavior
[if (anOpaqueBehavior.hasLanguage(keyCPP()))]
[anOpaqueBehavior.getEntryForLanguage(keyCPP())/]
[elseif (anOpaqueBehavior.hasLanguage(keyOCL()))]
[let retPar : OrderedSet(Parameter) = anOpaqueBehavior.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::return))]
	[if(retPar->notEmpty() and not retPar->first().oclIsInvalid())]
Utilities::Ocl ocl;
std::string query = "[anOpaqueBehavior.getEntryForLanguage(keyOCL())/]";
[retPar.name/] = ocl.validate(query, context);
DEBUG_MESSAGE(
	if(ocl.getErrors().size() > 0) {
		std::cout << ocl.getError() << std::endl;
	} else {
		std::cout << "return: " << ocl.getResult() << std::endl;
	}
)
	[else]
['An OpaqueBehavior with OCL must return a boolean value '.registerError()/]
	[/if]
[/let]
[else]
//No source code found for behavior '[anOpaqueBehavior.name/]'
//Make sure that '[keyCPP()/]' or '[keyOCL()/]' is contained in the 'language' property of behavior '[anOpaqueBehavior.name/]'
std::cout << __PRETTY_FUNCTION__ << std::endl;
throw "UnsupportedBehaviorException";
[/if]

[anOpaqueBehavior.ownedParameter->generateOutgoingParameters()/]
[/template]

[query public hasContext(anOpaqueBehavior : OpaqueBehavior) : Boolean = anOpaqueBehavior.owner.oclIsTypeOf(Class) or anOpaqueBehavior.oclIsKindOf(Interface)/]