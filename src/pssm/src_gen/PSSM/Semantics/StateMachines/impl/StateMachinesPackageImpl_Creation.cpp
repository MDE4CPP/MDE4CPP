#include "PSSM/Semantics/StateMachines/impl/StateMachinesPackageImpl.hpp"

// metametamodel factory
#include "ecore/ecoreFactory.hpp"

#include <cassert>

#include "abstractDataTypes/SubsetUnion.hpp"
//metametamodel classes
#include "ecore/EEnumLiteral.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EStringToStringMapEntry.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/EOperation.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EParameter.hpp"
#include "ecore/EEnum.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EDataType.hpp"
#include "ecore/EReference.hpp"

//depending model packages
#include "PSSM/PSSMPackage.hpp"
#include "ecore/ecorePackage.hpp"
#include "fUML/fUMLPackage.hpp"
#include "types/typesPackage.hpp"
#include "uml/umlPackage.hpp"
//include subpackages 
 
using namespace PSSM::Semantics::StateMachines;

void StateMachinesPackageImpl::createPackageContents(std::shared_ptr<ecore::EPackage> package)
{
	if (isCreated) 
	{
		return;
	}
	isCreated = true;

	std::shared_ptr<ecore::ecoreFactory> factory = ecore::ecoreFactory::eInstance();

	createCompletionEventOccurrenceContent(package, factory);
	createConditionalPseudostateActivationContent(package, factory);
	createConnectionPointActivationContent(package, factory);
	createDeepHistoryPseudostateActivationContent(package, factory);
	createDeferredEventOccurrenceContent(package, factory);
	createDoActivityContextObjectContent(package, factory);
	createDoActivityContextObjectActivationContent(package, factory);
	createDoActivityExecutionEventAccepterContent(package, factory);
	createEntryPointPseudostateActivationContent(package, factory);
	createExitPointPseudostateActivationContent(package, factory);
	createExternalTransitionActivationContent(package, factory);
	createFinalStateActivationContent(package, factory);
	createForkPseudostateActivationContent(package, factory);
	createHistoryPseudostateActivationContent(package, factory);
	createInitialPseudostateActivationContent(package, factory);
	createInternalTransitionActivationContent(package, factory);
	createJoinPseudostateActivationContent(package, factory);
	createLocalTransitionActivationContent(package, factory);
	createPseudostateActivationContent(package, factory);
	createRegionActivationContent(package, factory);
	createStateActivationContent(package, factory);
	createStateConfigurationContent(package, factory);
	createStateMachineConfigurationContent(package, factory);
	createStateMachineEventAccepterContent(package, factory);
	createStateMachineExecutionContent(package, factory);
	createStateMachineSemanticVisitorContent(package, factory);
	createTransitionActivationContent(package, factory);
	createVertexActivationContent(package, factory);

	createPackageEDataTypes(package, factory);

}

void StateMachinesPackageImpl::createCompletionEventOccurrenceContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_completionEventOccurrence_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, COMPLETIONEVENTOCCURRENCE_CLASS);
	
	m_completionEventOccurrence_Attribute_stateActivation = factory->createEReference_as_eReferences_in_EClass(m_completionEventOccurrence_Class, COMPLETIONEVENTOCCURRENCE_ATTRIBUTE_STATEACTIVATION);
	
	m_completionEventOccurrence_Operation__register_StateActivation = factory->createEOperation_as_eOperations_in_EClass(m_completionEventOccurrence_Class, COMPLETIONEVENTOCCURRENCE_OPERATION__REGISTER_STATEACTIVATION);
	m_completionEventOccurrence_Operation_match_Trigger = factory->createEOperation_as_eOperations_in_EClass(m_completionEventOccurrence_Class, COMPLETIONEVENTOCCURRENCE_OPERATION_MATCH_TRIGGER);
	
}

void StateMachinesPackageImpl::createConditionalPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_conditionalPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, CONDITIONALPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createConnectionPointActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_connectionPointActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, CONNECTIONPOINTACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createDeepHistoryPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_deepHistoryPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, DEEPHISTORYPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createDeferredEventOccurrenceContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_deferredEventOccurrence_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, DEFERREDEVENTOCCURRENCE_CLASS);
	
	m_deferredEventOccurrence_Attribute_constrainingStateActivation = factory->createEReference_as_eReferences_in_EClass(m_deferredEventOccurrence_Class, DEFERREDEVENTOCCURRENCE_ATTRIBUTE_CONSTRAININGSTATEACTIVATION);
	m_deferredEventOccurrence_Attribute_deferredEventOccurrence = factory->createEReference_as_eReferences_in_EClass(m_deferredEventOccurrence_Class, DEFERREDEVENTOCCURRENCE_ATTRIBUTE_DEFERREDEVENTOCCURRENCE);
	
	
}

void StateMachinesPackageImpl::createDoActivityContextObjectContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_doActivityContextObject_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, DOACTIVITYCONTEXTOBJECT_CLASS);
	
	m_doActivityContextObject_Attribute_context = factory->createEReference_as_eReferences_in_EClass(m_doActivityContextObject_Class, DOACTIVITYCONTEXTOBJECT_ATTRIBUTE_CONTEXT);
	m_doActivityContextObject_Attribute_owner = factory->createEReference_as_eReferences_in_EClass(m_doActivityContextObject_Class, DOACTIVITYCONTEXTOBJECT_ATTRIBUTE_OWNER);
	
	m_doActivityContextObject_Operation_unregister_EventAccepter = factory->createEOperation_as_eOperations_in_EClass(m_doActivityContextObject_Class, DOACTIVITYCONTEXTOBJECT_OPERATION_UNREGISTER_EVENTACCEPTER);
	
}

void StateMachinesPackageImpl::createDoActivityContextObjectActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_doActivityContextObjectActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, DOACTIVITYCONTEXTOBJECTACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createDoActivityExecutionEventAccepterContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_doActivityExecutionEventAccepter_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, DOACTIVITYEXECUTIONEVENTACCEPTER_CLASS);
	
	m_doActivityExecutionEventAccepter_Attribute_context = factory->createEReference_as_eReferences_in_EClass(m_doActivityExecutionEventAccepter_Class, DOACTIVITYEXECUTIONEVENTACCEPTER_ATTRIBUTE_CONTEXT);
	m_doActivityExecutionEventAccepter_Attribute_encapsulatedAccepter = factory->createEReference_as_eReferences_in_EClass(m_doActivityExecutionEventAccepter_Class, DOACTIVITYEXECUTIONEVENTACCEPTER_ATTRIBUTE_ENCAPSULATEDACCEPTER);
	
	
}

void StateMachinesPackageImpl::createEntryPointPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_entryPointPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, ENTRYPOINTPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createExitPointPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_exitPointPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, EXITPOINTPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createExternalTransitionActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_externalTransitionActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, EXTERNALTRANSITIONACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createFinalStateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_finalStateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, FINALSTATEACTIVATION_CLASS);
	
	
	m_finalStateActivation_Operation_enter_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_finalStateActivation_Class, FINALSTATEACTIVATION_OPERATION_ENTER_TRANSITIONACTIVATION_REGIONACTIVATION);
	
}

void StateMachinesPackageImpl::createForkPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_forkPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, FORKPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createHistoryPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_historyPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, HISTORYPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createInitialPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_initialPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, INITIALPSEUDOSTATEACTIVATION_CLASS);
	
	
	m_initialPseudostateActivation_Operation_enter_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_initialPseudostateActivation_Class, INITIALPSEUDOSTATEACTIVATION_OPERATION_ENTER_TRANSITIONACTIVATION_REGIONACTIVATION);
	
}

void StateMachinesPackageImpl::createInternalTransitionActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_internalTransitionActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, INTERNALTRANSITIONACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createJoinPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_joinPseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, JOINPSEUDOSTATEACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createLocalTransitionActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_localTransitionActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, LOCALTRANSITIONACTIVATION_CLASS);
	
	
	
}

void StateMachinesPackageImpl::createPseudostateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_pseudostateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, PSEUDOSTATEACTIVATION_CLASS);
	
	m_pseudostateActivation_Attribute_fireableTransitions = factory->createEReference_as_eReferences_in_EClass(m_pseudostateActivation_Class, PSEUDOSTATEACTIVATION_ATTRIBUTE_FIREABLETRANSITIONS);
	
	m_pseudostateActivation_Operation_evaluateAllGuards_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_pseudostateActivation_Class, PSEUDOSTATEACTIVATION_OPERATION_EVALUATEALLGUARDS_EVENTOCCURRENCE);
	
}

void StateMachinesPackageImpl::createRegionActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_regionActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, REGIONACTIVATION_CLASS);
	m_regionActivation_Attribute_isCompleted = factory->createEAttribute_as_eAttributes_in_EClass(m_regionActivation_Class, REGIONACTIVATION_ATTRIBUTE_ISCOMPLETED);
	
	m_regionActivation_Attribute_history = factory->createEReference_as_eReferences_in_EClass(m_regionActivation_Class, REGIONACTIVATION_ATTRIBUTE_HISTORY);
	m_regionActivation_Attribute_transitionActivations = factory->createEReference_as_eReferences_in_EClass(m_regionActivation_Class, REGIONACTIVATION_ATTRIBUTE_TRANSITIONACTIVATIONS);
	m_regionActivation_Attribute_vertexActivations = factory->createEReference_as_eReferences_in_EClass(m_regionActivation_Class, REGIONACTIVATION_ATTRIBUTE_VERTEXACTIVATIONS);
	
	m_regionActivation_Operation_canPropagateExecution_TransitionActivation_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_CANPROPAGATEEXECUTION_TRANSITIONACTIVATION_EVENTOCCURRENCE);
	m_regionActivation_Operation_enter_TransitionActivation_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_ENTER_TRANSITIONACTIVATION_EVENTOCCURRENCE);
	m_regionActivation_Operation_exit_TransitionActivation_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_EXIT_TRANSITIONACTIVATION_EVENTOCCURRENCE);
	m_regionActivation_Operation_getOrigin = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_GETORIGIN);
	m_regionActivation_Operation_getVertexActivation_Vertex = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_GETVERTEXACTIVATION_VERTEX);
	m_regionActivation_Operation_isRedefined_Vertex_Vertex = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_ISREDEFINED_VERTEX_VERTEX);
	m_regionActivation_Operation_isRedefined_Transition_Transition = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_ISREDEFINED_TRANSITION_TRANSITION);
	m_regionActivation_Operation_terminate = factory->createEOperation_as_eOperations_in_EClass(m_regionActivation_Class, REGIONACTIVATION_OPERATION_TERMINATE);
	
}

void StateMachinesPackageImpl::createStateActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, STATEACTIVATION_CLASS);
	m_stateActivation_Attribute_isDoActivityCompleted = factory->createEAttribute_as_eAttributes_in_EClass(m_stateActivation_Class, STATEACTIVATION_ATTRIBUTE_ISDOACTIVITYCOMPLETED);
	m_stateActivation_Attribute_isEntryCompleted = factory->createEAttribute_as_eAttributes_in_EClass(m_stateActivation_Class, STATEACTIVATION_ATTRIBUTE_ISENTRYCOMPLETED);
	m_stateActivation_Attribute_isExitCompleted = factory->createEAttribute_as_eAttributes_in_EClass(m_stateActivation_Class, STATEACTIVATION_ATTRIBUTE_ISEXITCOMPLETED);
	
	m_stateActivation_Attribute_connectionPointActivations = factory->createEReference_as_eReferences_in_EClass(m_stateActivation_Class, STATEACTIVATION_ATTRIBUTE_CONNECTIONPOINTACTIVATIONS);
	m_stateActivation_Attribute_doActivityContextObject = factory->createEReference_as_eReferences_in_EClass(m_stateActivation_Class, STATEACTIVATION_ATTRIBUTE_DOACTIVITYCONTEXTOBJECT);
	m_stateActivation_Attribute_regionActivations = factory->createEReference_as_eReferences_in_EClass(m_stateActivation_Class, STATEACTIVATION_ATTRIBUTE_REGIONACTIVATIONS);
	
	m_stateActivation_Operation_canDefer_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_CANDEFER_EVENTOCCURRENCE);
	m_stateActivation_Operation_defer_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_DEFER_EVENTOCCURRENCE);
	m_stateActivation_Operation_enter_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_ENTER_TRANSITIONACTIVATION_REGIONACTIVATION);
	m_stateActivation_Operation_enterRegions_TransitionActivation_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_ENTERREGIONS_TRANSITIONACTIVATION_EVENTOCCURRENCE);
	m_stateActivation_Operation_exit_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_EXIT_TRANSITIONACTIVATION_REGIONACTIVATION);
	m_stateActivation_Operation_getConnectionPointActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETCONNECTIONPOINTACTIVATION);
	m_stateActivation_Operation_getConnectionPointActivation_Vertex = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETCONNECTIONPOINTACTIVATION_VERTEX);
	m_stateActivation_Operation_getDoActivity = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETDOACTIVITY);
	m_stateActivation_Operation_getEntry = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETENTRY);
	m_stateActivation_Operation_getExit = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETEXIT);
	m_stateActivation_Operation_getFireableTransitions_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETFIREABLETRANSITIONS_EVENTOCCURRENCE);
	m_stateActivation_Operation_getRegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_GETREGIONACTIVATION);
	m_stateActivation_Operation_hasCompleted = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_HASCOMPLETED);
	m_stateActivation_Operation_notifyCompletion = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_NOTIFYCOMPLETION);
	m_stateActivation_Operation_releaseDeferredEvents = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_RELEASEDEFERREDEVENTS);
	m_stateActivation_Operation_tryExecuteEntry_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_TRYEXECUTEENTRY_EVENTOCCURRENCE);
	m_stateActivation_Operation_tryExecuteExit_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_TRYEXECUTEEXIT_EVENTOCCURRENCE);
	m_stateActivation_Operation_tryInvokeDoActivity_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateActivation_Class, STATEACTIVATION_OPERATION_TRYINVOKEDOACTIVITY_EVENTOCCURRENCE);
	
}

void StateMachinesPackageImpl::createStateConfigurationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateConfiguration_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, STATECONFIGURATION_CLASS);
	m_stateConfiguration_Attribute_level = factory->createEAttribute_as_eAttributes_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_ATTRIBUTE_LEVEL);
	
	m_stateConfiguration_Attribute_children = factory->createEReference_as_eReferences_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_ATTRIBUTE_CHILDREN);
	m_stateConfiguration_Attribute_completeConfiguration = factory->createEReference_as_eReferences_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_ATTRIBUTE_COMPLETECONFIGURATION);
	m_stateConfiguration_Attribute_parent = factory->createEReference_as_eReferences_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_ATTRIBUTE_PARENT);
	m_stateConfiguration_Attribute_vertexActivation = factory->createEReference_as_eReferences_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_ATTRIBUTE_VERTEXACTIVATION);
	
	m_stateConfiguration_Operation_add_VertexActivation_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_OPERATION_ADD_VERTEXACTIVATION_VERTEXACTIVATION);
	m_stateConfiguration_Operation_addChild_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_OPERATION_ADDCHILD_VERTEXACTIVATION);
	m_stateConfiguration_Operation_getContext_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_OPERATION_GETCONTEXT_VERTEXACTIVATION);
	m_stateConfiguration_Operation_isActive_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_OPERATION_ISACTIVE_VERTEXACTIVATION);
	m_stateConfiguration_Operation_remove_VertexActivation_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_OPERATION_REMOVE_VERTEXACTIVATION_VERTEXACTIVATION);
	m_stateConfiguration_Operation_removeChild_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateConfiguration_Class, STATECONFIGURATION_OPERATION_REMOVECHILD_VERTEXACTIVATION);
	
}

void StateMachinesPackageImpl::createStateMachineConfigurationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateMachineConfiguration_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, STATEMACHINECONFIGURATION_CLASS);
	
	m_stateMachineConfiguration_Attribute_execution = factory->createEReference_as_eReferences_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_ATTRIBUTE_EXECUTION);
	m_stateMachineConfiguration_Attribute_rootConfiguration = factory->createEReference_as_eReferences_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_ATTRIBUTE_ROOTCONFIGURATION);
	
	m_stateMachineConfiguration_Operation__register_StateActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION__REGISTER_STATEACTIVATION);
	m_stateMachineConfiguration_Operation_add_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION_ADD_VERTEXACTIVATION);
	m_stateMachineConfiguration_Operation_getVertexActivationsAtLevel_Integer = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION_GETVERTEXACTIVATIONSATLEVEL_INTEGER);
	m_stateMachineConfiguration_Operation_isActive_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION_ISACTIVE_VERTEXACTIVATION);
	m_stateMachineConfiguration_Operation_isStable = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION_ISSTABLE);
	m_stateMachineConfiguration_Operation_remove_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION_REMOVE_VERTEXACTIVATION);
	m_stateMachineConfiguration_Operation_unregister_StateActivation = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineConfiguration_Class, STATEMACHINECONFIGURATION_OPERATION_UNREGISTER_STATEACTIVATION);
	
}

void StateMachinesPackageImpl::createStateMachineEventAccepterContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateMachineEventAccepter_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, STATEMACHINEEVENTACCEPTER_CLASS);
	
	m_stateMachineEventAccepter_Attribute_registrationContext = factory->createEReference_as_eReferences_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_ATTRIBUTE_REGISTRATIONCONTEXT);
	
	m_stateMachineEventAccepter_Operation__defer_EventOccurrence_StateConfiguration = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION__DEFER_EVENTOCCURRENCE_STATECONFIGURATION);
	m_stateMachineEventAccepter_Operation__isDeferred_EventOccurrence_StateConfiguration = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION__ISDEFERRED_EVENTOCCURRENCE_STATECONFIGURATION);
	m_stateMachineEventAccepter_Operation__select_EventOccurrence_StateConfiguration = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION__SELECT_EVENTOCCURRENCE_STATECONFIGURATION);
	m_stateMachineEventAccepter_Operation_accept_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION_ACCEPT_EVENTOCCURRENCE);
	m_stateMachineEventAccepter_Operation_defer_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION_DEFER_EVENTOCCURRENCE);
	m_stateMachineEventAccepter_Operation_isDeferred_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION_ISDEFERRED_EVENTOCCURRENCE);
	m_stateMachineEventAccepter_Operation_isTriggering_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION_ISTRIGGERING_EVENTOCCURRENCE);
	m_stateMachineEventAccepter_Operation_match_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION_MATCH_EVENTOCCURRENCE);
	m_stateMachineEventAccepter_Operation_select_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineEventAccepter_Class, STATEMACHINEEVENTACCEPTER_OPERATION_SELECT_EVENTOCCURRENCE);
	
}

void StateMachinesPackageImpl::createStateMachineExecutionContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateMachineExecution_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, STATEMACHINEEXECUTION_CLASS);
	
	m_stateMachineExecution_Attribute_conditionVariable = factory->createEReference_as_eReferences_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_ATTRIBUTE_CONDITIONVARIABLE);
	m_stateMachineExecution_Attribute_configuration = factory->createEReference_as_eReferences_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_ATTRIBUTE_CONFIGURATION);
	m_stateMachineExecution_Attribute_mutex = factory->createEReference_as_eReferences_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_ATTRIBUTE_MUTEX);
	m_stateMachineExecution_Attribute_regionActivations = factory->createEReference_as_eReferences_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_ATTRIBUTE_REGIONACTIVATIONS);
	
	m_stateMachineExecution_Operation_execute = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_OPERATION_EXECUTE);
	m_stateMachineExecution_Operation_getVertexActivation_Vertex = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_OPERATION_GETVERTEXACTIVATION_VERTEX);
	m_stateMachineExecution_Operation_new_ = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_OPERATION_NEW_);
	m_stateMachineExecution_Operation_startBehavior_Class_ParameterValue = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_OPERATION_STARTBEHAVIOR_CLASS_PARAMETERVALUE);
	m_stateMachineExecution_Operation_terminate = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineExecution_Class, STATEMACHINEEXECUTION_OPERATION_TERMINATE);
	
}

void StateMachinesPackageImpl::createStateMachineSemanticVisitorContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateMachineSemanticVisitor_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, STATEMACHINESEMANTICVISITOR_CLASS);
	
	m_stateMachineSemanticVisitor_Attribute_node = factory->createEReference_as_eReferences_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_ATTRIBUTE_NODE);
	m_stateMachineSemanticVisitor_Attribute_parent = factory->createEReference_as_eReferences_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_ATTRIBUTE_PARENT);
	
	m_stateMachineSemanticVisitor_Operation_activate = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_ACTIVATE);
	m_stateMachineSemanticVisitor_Operation_activateTransitions = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_ACTIVATETRANSITIONS);
	m_stateMachineSemanticVisitor_Operation_getContextChain = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_GETCONTEXTCHAIN);
	m_stateMachineSemanticVisitor_Operation_getExecutionContext = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_GETEXECUTIONCONTEXT);
	m_stateMachineSemanticVisitor_Operation_getExecutionFor_Behavior_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_GETEXECUTIONFOR_BEHAVIOR_EVENTOCCURRENCE);
	m_stateMachineSemanticVisitor_Operation_getExecutionLocus = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_GETEXECUTIONLOCUS);
	m_stateMachineSemanticVisitor_Operation_getStateMachineExecution = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_GETSTATEMACHINEEXECUTION);
	m_stateMachineSemanticVisitor_Operation_isVisitorFor_NamedElement = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_ISVISITORFOR_NAMEDELEMENT);
	m_stateMachineSemanticVisitor_Operation_match_EventOccurrence_Trigger = factory->createEOperation_as_eOperations_in_EClass(m_stateMachineSemanticVisitor_Class, STATEMACHINESEMANTICVISITOR_OPERATION_MATCH_EVENTOCCURRENCE_TRIGGER);
	
}

void StateMachinesPackageImpl::createTransitionActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_transitionActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, TRANSITIONACTIVATION_CLASS);
	m_transitionActivation_Attribute_analyticalStatus = factory->createEAttribute_as_eAttributes_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_ANALYTICALSTATUS);
	m_transitionActivation_Attribute_lastPropagation = factory->createEAttribute_as_eAttributes_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_LASTPROPAGATION);
	m_transitionActivation_Attribute_status = factory->createEAttribute_as_eAttributes_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_STATUS);
	
	m_transitionActivation_Attribute_lastTriggeringEventOccurrence = factory->createEReference_as_eReferences_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_LASTTRIGGERINGEVENTOCCURRENCE);
	m_transitionActivation_Attribute_leastCommonAncestor = factory->createEReference_as_eReferences_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_LEASTCOMMONANCESTOR);
	m_transitionActivation_Attribute_sourceVertexActivation = factory->createEReference_as_eReferences_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_SOURCEVERTEXACTIVATION);
	m_transitionActivation_Attribute_targetVertexActivation = factory->createEReference_as_eReferences_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_ATTRIBUTE_TARGETVERTEXACTIVATION);
	
	m_transitionActivation_Operation_canFireOn_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_CANFIREON_EVENTOCCURRENCE);
	m_transitionActivation_Operation_canPropagateExecution_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_CANPROPAGATEEXECUTION_EVENTOCCURRENCE);
	m_transitionActivation_Operation_enterTarget_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_ENTERTARGET_EVENTOCCURRENCE);
	m_transitionActivation_Operation_evaluateGuard_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_EVALUATEGUARD_EVENTOCCURRENCE);
	m_transitionActivation_Operation_exitSource_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_EXITSOURCE_EVENTOCCURRENCE);
	m_transitionActivation_Operation_fire_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_FIRE_EVENTOCCURRENCE);
	m_transitionActivation_Operation_getSourceActivation = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_GETSOURCEACTIVATION);
	m_transitionActivation_Operation_getTargetActivation = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_GETTARGETACTIVATION);
	m_transitionActivation_Operation_hasTrigger_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_HASTRIGGER_EVENTOCCURRENCE);
	m_transitionActivation_Operation_isGuarded = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_ISGUARDED);
	m_transitionActivation_Operation_isReached = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_ISREACHED);
	m_transitionActivation_Operation_isTraversed_Boolean = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_ISTRAVERSED_BOOLEAN);
	m_transitionActivation_Operation_isTriggered_Boolean = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_ISTRIGGERED_BOOLEAN);
	m_transitionActivation_Operation_setSourceActivation_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_SETSOURCEACTIVATION_VERTEXACTIVATION);
	m_transitionActivation_Operation_setTargetActivation_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_SETTARGETACTIVATION_VERTEXACTIVATION);
	m_transitionActivation_Operation_tryExecuteEffect_EventOccurrence = factory->createEOperation_as_eOperations_in_EClass(m_transitionActivation_Class, TRANSITIONACTIVATION_OPERATION_TRYEXECUTEEFFECT_EVENTOCCURRENCE);
	
}

void StateMachinesPackageImpl::createVertexActivationContent(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_vertexActivation_Class = factory->createEClass_as_eClassifiers_in_EPackage(package, VERTEXACTIVATION_CLASS);
	m_vertexActivation_Attribute_status = factory->createEAttribute_as_eAttributes_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_ATTRIBUTE_STATUS);
	
	m_vertexActivation_Attribute_incomingTransitionActivations = factory->createEReference_as_eReferences_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_ATTRIBUTE_INCOMINGTRANSITIONACTIVATIONS);
	m_vertexActivation_Attribute_outgoingTransitionActivations = factory->createEReference_as_eReferences_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_ATTRIBUTE_OUTGOINGTRANSITIONACTIVATIONS);
	
	m_vertexActivation_Operation_addIncomingTransition_TransitionActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_ADDINCOMINGTRANSITION_TRANSITIONACTIVATION);
	m_vertexActivation_Operation_addOutgoingTransition_TransitionActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_ADDOUTGOINGTRANSITION_TRANSITIONACTIVATION);
	m_vertexActivation_Operation_canPropagateExecution_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_CANPROPAGATEEXECUTION_TRANSITIONACTIVATION_REGIONACTIVATION);
	m_vertexActivation_Operation_enter_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_ENTER_TRANSITIONACTIVATION_REGIONACTIVATION);
	m_vertexActivation_Operation_exit_TransitionActivation_RegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_EXIT_TRANSITIONACTIVATION_REGIONACTIVATION);
	m_vertexActivation_Operation_getAscendingHierarchy = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETASCENDINGHIERARCHY);
	m_vertexActivation_Operation_getIncomingTransitions = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETINCOMINGTRANSITIONS);
	m_vertexActivation_Operation_getLeastCommonAncestor_VertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETLEASTCOMMONANCESTOR_VERTEXACTIVATION);
	m_vertexActivation_Operation_getOutgoingTransitions = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETOUTGOINGTRANSITIONS);
	m_vertexActivation_Operation_getOwningRegionActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETOWNINGREGIONACTIVATION);
	m_vertexActivation_Operation_getParentVertexActivation = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETPARENTVERTEXACTIVATION);
	m_vertexActivation_Operation_getRegionActivation_SemanticVisitor = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETREGIONACTIVATION_SEMANTICVISITOR);
	m_vertexActivation_Operation_getVertexActivation_Vertex = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_GETVERTEXACTIVATION_VERTEX);
	m_vertexActivation_Operation_isActive = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_ISACTIVE);
	m_vertexActivation_Operation_isEnterable_TransitionActivation_Boolean = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_ISENTERABLE_TRANSITIONACTIVATION_BOOLEAN);
	m_vertexActivation_Operation_isExitable_TransitionActivation_Boolean = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_ISEXITABLE_TRANSITIONACTIVATION_BOOLEAN);
	m_vertexActivation_Operation_tagIncomingTransition_TransitionMetadata_Boolean = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_TAGINCOMINGTRANSITION_TRANSITIONMETADATA_BOOLEAN);
	m_vertexActivation_Operation_tagOutgoingTransition_TransitionMetadata_Boolean = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_TAGOUTGOINGTRANSITION_TRANSITIONMETADATA_BOOLEAN);
	m_vertexActivation_Operation_terminate = factory->createEOperation_as_eOperations_in_EClass(m_vertexActivation_Class, VERTEXACTIVATION_OPERATION_TERMINATE);
	
}

void StateMachinesPackageImpl::createPackageEDataTypes(std::shared_ptr<ecore::EPackage> package, std::shared_ptr<ecore::ecoreFactory> factory)
{
	m_stateMetadata_Class = factory->createEEnum_as_eClassifiers_in_EPackage(package, STATEMETADATA_CLASS);
	m_transitionMetadata_Class = factory->createEEnum_as_eClassifiers_in_EPackage(package, TRANSITIONMETADATA_CLASS);
	
}
