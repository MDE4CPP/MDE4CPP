//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_DEPLOYMENTSPECIFICATIONDEPLOYMENTSPECIFICATIONIMPL_HPP
#define UML_DEPLOYMENTSPECIFICATIONDEPLOYMENTSPECIFICATIONIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../DeploymentSpecification.hpp"

#include "uml/impl/ArtifactImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API DeploymentSpecificationImpl : virtual public ArtifactImpl, virtual public DeploymentSpecification 
	{
		public: 
			DeploymentSpecificationImpl(const DeploymentSpecificationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			DeploymentSpecificationImpl& operator=(DeploymentSpecificationImpl const&); 

		protected:
			friend class umlFactoryImpl;
			DeploymentSpecificationImpl();
			virtual std::shared_ptr<uml::DeploymentSpecification> getThisDeploymentSpecificationPtr() const;
			virtual void setThisDeploymentSpecificationPtr(std::weak_ptr<uml::DeploymentSpecification> thisDeploymentSpecificationPtr);

			//Additional constructors for the containments back reference
			DeploymentSpecificationImpl(std::weak_ptr<uml::Deployment> par_deployment);
			//Additional constructors for the containments back reference
			DeploymentSpecificationImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			DeploymentSpecificationImpl(std::weak_ptr<uml::Element> par_owner);
			//Additional constructors for the containments back reference
			DeploymentSpecificationImpl(std::weak_ptr<uml::Package> par_Package, const int reference_id);
			//Additional constructors for the containments back reference
			DeploymentSpecificationImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter);
			//Additional constructors for the containments back reference

		public:
			//destructor
			virtual ~DeploymentSpecificationImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address.'
			<p>From package UML::Deployments.</p>
			*/
			 
			virtual std::string getDeploymentLocation() const ;
			/*!
			The location where an Artifact is deployed onto a Node. This is typically a 'directory' or 'memory address.'
			<p>From package UML::Deployments.</p>
			*/
			 
			virtual void setDeploymentLocation (std::string _deploymentLocation);
			/*!
			The location where a component Artifact executes. This may be a local or remote location.
			<p>From package UML::Deployments.</p>
			*/
			 
			virtual std::string getExecutionLocation() const ;
			/*!
			The location where a component Artifact executes. This may be a local or remote location.
			<p>From package UML::Deployments.</p>
			*/
			 
			virtual void setExecutionLocation (std::string _executionLocation);
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The deployment with which the DeploymentSpecification is associated.
			<p>From package UML::Deployments.</p>
			*/
			
			virtual std::weak_ptr<uml::Deployment> getDeployment() const ;
			/*!
			The deployment with which the DeploymentSpecification is associated.
			<p>From package UML::Deployments.</p>
			*/
			
			virtual void setDeployment(std::weak_ptr<uml::Deployment>) ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::DeploymentSpecification> m_thisDeploymentSpecificationPtr;
	};
}
#endif /* end of include guard: UML_DEPLOYMENTSPECIFICATIONDEPLOYMENTSPECIFICATIONIMPL_HPP */
