//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TIMEEVENT_HPP
#define UML_TIMEEVENT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T, class ... U> class Subset;


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class Namespace;
	class Package;
	class StringExpression;
	class TemplateParameter;
	class TimeExpression;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/Event.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A TimeEvent is an Event that occurs at a specific point in time.
	<p>From package UML::CommonBehavior.</p>
	*/
	
	class UML_API TimeEvent : virtual public Event
	{
		public:
 			TimeEvent(const TimeEvent &) {}

		protected:
			TimeEvent(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~TimeEvent() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			Specifies whether the TimeEvent is specified as an absolute or relative time.
			<p>From package UML::CommonBehavior.</p>
			*/
			 
			virtual bool getIsRelative() const = 0;
			/*!
			Specifies whether the TimeEvent is specified as an absolute or relative time.
			<p>From package UML::CommonBehavior.</p>
			*/
			 
			virtual void setIsRelative (bool _isRelative)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Specifies the time of the TimeEvent.
			<p>From package UML::CommonBehavior.</p>
			*/
			
			virtual std::shared_ptr<uml::TimeExpression> getWhen() const = 0;
			/*!
			Specifies the time of the TimeEvent.
			<p>From package UML::CommonBehavior.</p>
			*/
			
			virtual void setWhen(std::shared_ptr<uml::TimeExpression>) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			Specifies whether the TimeEvent is specified as an absolute or relative time.
			<p>From package UML::CommonBehavior.</p>
			*/
			
			bool m_isRelative= false;
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			Specifies the time of the TimeEvent.
			<p>From package UML::CommonBehavior.</p>
			*/
			
			std::shared_ptr<uml::TimeExpression> m_when;
	};
}
#endif /* end of include guard: UML_TIMEEVENT_HPP */
