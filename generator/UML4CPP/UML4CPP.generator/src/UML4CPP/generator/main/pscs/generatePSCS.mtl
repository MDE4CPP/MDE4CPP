[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate class implementation source file
 * 
 */]
[module generatePSCS('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * Templates and quieries for generation of property instatiation (parts & ports) of composite structures
*/]
[template public generateAttributeInstantiation(aProperty : Property)]
m_[aProperty.name/].reset(new Bag<[aProperty.type.transformType()/]>());
[if (aProperty.canInstantiate() and aProperty.getUpper() = -1 and aProperty.getLower() > 0)]
for(unsigned int i = 1; i <= [aProperty.getLower()/]; i++)
{
	[if (aProperty.oclIsTypeOf(Port) and aProperty.type.oclIsTypeOf(Interface))]
	[aProperty.generatePortInstantiation()/]
	[else]
	[aProperty.generatePartInstantiation()/]
	[/if]
} 
[/if]
[/template]

[template private generatePortInstantiation(aProperty : Property) {aPackage : Package = aProperty.ancestors()->filter(Package)->first(); factoryName : String = aPackage.name.toUpperFirst().concat('Factory');}]
	[let interfaceOfPort : Interface = aProperty.type.oclAsType(Interface)]
	std::shared_ptr<[aProperty.type.transformType()/]> value = [aPackage.name/]::[factoryName/]::eInstance()->create[aPackage.getInterfaceRealizations(interfaceOfPort)->asOrderedSet()->first().owner.oclAsType(Class).name/]();
	[/let]
	m_[aProperty.name/]->add(value);
[/template]

[template private generatePartInstantiation(aProperty : Property) {aPackage : Package = aProperty.ancestors()->filter(Package)->first(); factoryName : String = aPackage.name.toUpperFirst().concat('Factory');}]
	std::shared_ptr<[aProperty.type.transformType()/]> value = [aPackage.name/]::[factoryName/]::eInstance()->create[aProperty.type.name/]();
	m_[aProperty.name/]->add(value);
[/template]

[query public getInterfaceRealizations(aPackage : Package, anInterface : Interface) : Set(InterfaceRealization) = aPackage.allOwnedElements()->selectByType(InterfaceRealization)->reject(not (contract.name = anInterface.name))/]

[query private canInstantiate(aProperty : Property) : Boolean = 
if (aProperty.isComposite()) then
	if(aProperty.oclIsKindOf(TypedElement)) then
		if(aProperty.type.oclIsTypeOf(Class)) then
			not aProperty.type.oclAsType(Class).isAbstract 
		else if (aProperty.type.oclIsTypeOf(Interface)) then
			aProperty.oclIsTypeOf(Port)
			else false
			endif
		endif
	else false
	endif
else false
endif
/]



[**
 * Templates and quieries for generation of property instatiation (parts & ports) of composite structures
*/]

[template public generateConnectorInstantiation(aConnector : Connector)]
[if (aConnector.isArrayPattern())]
	//instantiate array pattern for connector [aConnector.name/]
	[aConnector.generateArrayPatternInstantiation()/]
[elseif (aConnector.isStarPattern())]
	//instantiate star pattern for connector [aConnector.name/]
	[aConnector.generateStarPatternInstantiation()/]
[/if]
[/template]

[query private getCardinality(aConnectorEnd : ConnectorEnd) : Integer = 
if(aConnectorEnd.role.oclIsKindOf(MultiplicityElement)) then
	if(aConnectorEnd.role.oclAsType(MultiplicityElement).getLower() = 0) then
		0
	else 
		if (aConnectorEnd.partWithPort.oclIsInvalid()) then
			(aConnectorEnd.role.oclAsType(MultiplicityElement).getLower())
		else ((aConnectorEnd.role.oclAsType(MultiplicityElement).getLower()) * (aConnectorEnd.partWithPort.getLower()))
		endif
	endif
else -100
endif
/]

[query private isArrayPattern(aConnector : Connector) : Boolean =
if(aConnector.end->size() = 2) then
	if(aConnector.end->at(0).role.oclIsKindOf(MultiplicityElement)) then
		if(aConnector.end->at(0).role.oclAsType(MultiplicityElement).getLower() = 1) then
			if(aConnector.end->at(1).role.oclIsTypeOf(MultiplicityElement)) then
				if(aConnector.end->at(1).role.oclAsType(MultiplicityElement).getLower() = 1) then
					if((aConnector.end->at(0).role.oclAsType(Property).canInstantiate()) and (aConnector.end->at(1).role.oclAsType(Property).canInstantiate())) then
						((aConnector.end->at(0).getCardinality()) = (aConnector.end->at(1).getCardinality()))
					else false
					endif
				else false
				endif
			else false
			endif
		else false
		endif
	else false
	endif
else false
endif
/]

[query private isStarPattern(aConnector : Connector) : Boolean =
if(aConnector.end->size() = 2) then
	if(aConnector.end->at(0).role.oclIsKindOf(MultiplicityElement)) then
		if(aConnector.end->at(1).role.oclIsTypeOf(MultiplicityElement)) then
			if((aConnector.end->at(0).role.oclAsType(Property).canInstantiate()) and (aConnector.end->at(1).role.oclAsType(Property).canInstantiate())) then
				if((aConnector.end->at(0).getCardinality()) = (aConnector.end->at(0).role.oclAsType(MultiplicityElement).getLower())) then
					((aConnector.end->at(1).getCardinality()) = (aConnector.end->at(1).role.oclAsType(MultiplicityElement).getLower()))
				else false
				endif
			else false
			endif
		else false
		endif
	else false
	endif
else false
endif
/]

[template private generateArrayPatternInstantiation(aConnector : Connector)]
/*
TODO: instantiate array pattern
*/
[/template]

[template private generateStarPatternInstantiation(aConnector : Connector)]
/*
TODO: instantiate array pattern
*/
[/template]