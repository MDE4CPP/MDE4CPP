//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INFORMATIONFLOW_HPP
#define UML_INFORMATIONFLOW_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 
template<class T, class ... U> class Subset;


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 
namespace uml 
{
	class ActivityEdge;
	class Classifier;
	class Comment;
	class Connector;
	class Dependency;
	class Message;
	class Namespace;
	class Package;
	class StringExpression;
	class TemplateParameter;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/DirectedRelationship.hpp"
#include "uml/PackageableElement.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	InformationFlows describe circulation of information through a system in a general manner. They do not specify the nature of the information, mechanisms by which it is conveyed, sequences of exchange or any control conditions. During more detailed modeling, representation and realization links may be added to specify which model elements implement an InformationFlow and to show how information is conveyed.  InformationFlows require some kind of “information channel” for unidirectional transmission of information items from sources to targets.  They specify the information channel’s realizations, if any, and identify the information that flows along them.  Information moving along the information channel may be represented by abstract InformationItems and by concrete Classifiers.
	<p>From package UML::InformationFlows.</p>
	*/
	
	class UML_API InformationFlow : virtual public DirectedRelationship, virtual public PackageableElement
	{
		public:
 			InformationFlow(const InformationFlow &) {}

		protected:
			InformationFlow(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~InformationFlow() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************

			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			Specifies the information items that may circulate on this information flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Classifier>> getConveyed() const = 0;
			/*!
			Defines from which source the conveyed InformationItems are initiated.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::NamedElement, uml::Element>> getInformationSource() const = 0;
			/*!
			Defines to which target the conveyed InformationItems are directed.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::NamedElement, uml::Element>> getInformationTarget() const = 0;
			/*!
			Determines which Relationship will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Relationship>> getRealization() const = 0;
			/*!
			Determines which ActivityEdges will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::ActivityEdge>> getRealizingActivityEdge() const = 0;
			/*!
			Determines which Connectors will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Connector>> getRealizingConnector() const = 0;
			/*!
			Determines which Messages will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::Message>> getRealizingMessage() const = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			Specifies the information items that may circulate on this information flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::Classifier>> m_conveyed;
			/*!
			Defines from which source the conveyed InformationItems are initiated.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::NamedElement, uml::Element>> m_informationSource;
			/*!
			Defines to which target the conveyed InformationItems are directed.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::NamedElement, uml::Element>> m_informationTarget;
			/*!
			Determines which Relationship will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::Relationship>> m_realization;
			/*!
			Determines which ActivityEdges will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::ActivityEdge>> m_realizingActivityEdge;
			/*!
			Determines which Connectors will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::Connector>> m_realizingConnector;
			/*!
			Determines which Messages will realize the specified flow.
			<p>From package UML::InformationFlows.</p>
			*/
			
			mutable std::shared_ptr<Bag<uml::Message>> m_realizingMessage;
	};
}
#endif /* end of include guard: UML_INFORMATIONFLOW_HPP */
