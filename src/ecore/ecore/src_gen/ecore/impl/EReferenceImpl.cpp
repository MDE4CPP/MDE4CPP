
#include "ecore/impl/EReferenceImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>

#include "abstractDataTypes/SubsetUnion.hpp"


#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"


//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "ecore/ecoreFactory.hpp"

#include "ecore/EAnnotation.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EClassifier.hpp"
#include "ecore/EGenericType.hpp"
#include "ecore/EObject.hpp"
#include "ecore/EReference.hpp"
#include "ecore/EStructuralFeature.hpp"

//Factories an Package includes
#include "ecore/ecorePackage.hpp"


#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"

using namespace ecore;

//*********************************
// Constructor / Destructor
//*********************************
EReferenceImpl::EReferenceImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

EReferenceImpl::~EReferenceImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete EReference "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
EReferenceImpl::EReferenceImpl(std::weak_ptr<ecore::EObject> par_eContainer)
:EReferenceImpl()
{
	m_eContainer = par_eContainer;
}

//Additional constructor for the containments back reference
EReferenceImpl::EReferenceImpl(std::weak_ptr<ecore::EClass> par_eContainingClass)
:EReferenceImpl()
{
	m_eContainingClass = par_eContainingClass;
}

EReferenceImpl::EReferenceImpl(const EReferenceImpl & obj): EReferenceImpl()
{
	*this = obj;
}

EReferenceImpl& EReferenceImpl::operator=(const EReferenceImpl & obj)
{
	//call overloaded =Operator for each base class
	EStructuralFeatureImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of EReference 
	 * which is generated by the compiler (as EReference is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//EReference::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy EReference "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_container = obj.isContainer();
	m_containment = obj.isContainment();
	m_resolveProxies = obj.isResolveProxies();

	//copy references with no containment (soft copy)
	m_eKeys  = obj.getEKeys();
	m_eOpposite  = obj.getEOpposite();
	m_eReferenceType  = obj.getEReferenceType();
	//Clone references with containment (deep copy)
	return *this;
}

std::shared_ptr<ecore::EObject> EReferenceImpl::copy() const
{
	std::shared_ptr<EReferenceImpl> element(new EReferenceImpl());
	*element =(*this);
	element->setThisEReferencePtr(element);
	return element;
}

//*********************************
// Operations
//*********************************

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute container */
bool EReferenceImpl::isContainer() const 
{
	return m_container;
}

/* Getter & Setter for attribute containment */
bool EReferenceImpl::isContainment() const 
{
	return m_containment;
}
void EReferenceImpl::setContainment(bool _containment)
{
	m_containment = _containment;
	
}

/* Getter & Setter for attribute resolveProxies */
bool EReferenceImpl::isResolveProxies() const 
{
	return m_resolveProxies;
}
void EReferenceImpl::setResolveProxies(bool _resolveProxies)
{
	m_resolveProxies = _resolveProxies;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference eKeys */
std::shared_ptr<Bag<ecore::EAttribute>> EReferenceImpl::getEKeys() const
{
	if(m_eKeys == nullptr)
	{
		m_eKeys.reset(new Bag<ecore::EAttribute>());
		
		
	}
    return m_eKeys;
}

/* Getter & Setter for reference eOpposite */
std::shared_ptr<ecore::EReference> EReferenceImpl::getEOpposite() const
{
    return m_eOpposite;
}
void EReferenceImpl::setEOpposite(std::shared_ptr<ecore::EReference> _eOpposite)
{
    m_eOpposite = _eOpposite;
	
}

/* Getter & Setter for reference eReferenceType */
std::shared_ptr<ecore::EClass> EReferenceImpl::getEReferenceType() const
{
    return m_eReferenceType;
}
void EReferenceImpl::setEReferenceType(std::shared_ptr<ecore::EClass> _eReferenceType)
{
    m_eReferenceType = _eReferenceType;
	
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<ecore::EObject>> EReferenceImpl::getEContentUnion() const
{
	if(m_eContentUnion == nullptr)
	{
		/*Union*/
		m_eContentUnion.reset(new Union<ecore::EObject>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_eContentUnion - Union<ecore::EObject>()" << std::endl;
		#endif
		
		
	}
	return m_eContentUnion;
}

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> EReferenceImpl::eContainer() const
{
	if(auto wp = m_eContainer.lock())
	{
		return wp;
	}

	if(auto wp = m_eContainingClass.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void EReferenceImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get ecoreFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void EReferenceImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("containment");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setContainment(value);
		}

		iter = attr_list.find("resolveProxies");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setResolveProxies(value);
		}
		std::shared_ptr<EClass> metaClass = this->eClass(); // get MetaClass
		iter = attr_list.find("eKeys");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eKeys")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eOpposite");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eOpposite")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}

		iter = attr_list.find("eReferenceType");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("eReferenceType")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	EStructuralFeatureImpl::loadAttributes(loadHandler, attr_list);
}

void EReferenceImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	//load BasePackage Nodes
	EStructuralFeatureImpl::loadNode(nodeName, loadHandler);
}

void EReferenceImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<EObject> > references)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EKEYS:
		{
			std::shared_ptr<Bag<ecore::EAttribute>> _eKeys = getEKeys();
			for(std::shared_ptr<ecore::EObject> ref : references)
			{
				std::shared_ptr<ecore::EAttribute>  _r = std::dynamic_pointer_cast<ecore::EAttribute>(ref);
				if (_r != nullptr)
				{
					_eKeys->push_back(_r);
				}
			}
			return;
		}

		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EOPPOSITE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::EReference> _eOpposite = std::dynamic_pointer_cast<ecore::EReference>( references.front() );
				setEOpposite(_eOpposite);
			}
			
			return;
		}

		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EREFERENCETYPE:
		{
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<ecore::EClass> _eReferenceType = std::dynamic_pointer_cast<ecore::EClass>( references.front() );
				setEReferenceType(_eReferenceType);
			}
			
			return;
		}
	}
	EStructuralFeatureImpl::resolveReferences(featureID, references);
}

void EReferenceImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	EStructuralFeatureImpl::saveContent(saveHandler);
	
	ETypedElementImpl::saveContent(saveHandler);
	
	ENamedElementImpl::saveContent(saveHandler);
	
	EModelElementImpl::saveContent(saveHandler);
	
	EObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void EReferenceImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<ecore::ecorePackage> package = ecore::ecorePackage::eInstance();
		// Add attributes
		if ( this->eIsSet(package->getEReference_Attribute_containment()) )
		{
			saveHandler->addAttribute("containment", this->isContainment());
		}

		if ( this->eIsSet(package->getEReference_Attribute_resolveProxies()) )
		{
			saveHandler->addAttribute("resolveProxies", this->isResolveProxies());
		}
	// Add references
		saveHandler->addReferences<ecore::EAttribute>("eKeys", this->getEKeys());
		saveHandler->addReference(this->getEOpposite(),"eOpposite", getEOpposite()->eClass() != ecore::ecorePackage::eInstance()->getEReference_Class());
		saveHandler->addReference(this->getEReferenceType(),"eReferenceType", getEReferenceType()->eClass() != ecore::ecorePackage::eInstance()->getEClass_Class());
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}


std::shared_ptr<EClass> EReferenceImpl::eStaticClass() const
{
	return ecore::ecorePackage::eInstance()->getEReference_Class();
}


//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any EReferenceImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_CONTAINER:
			return eAny(isContainer()); //4423
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_CONTAINMENT:
			return eAny(isContainment()); //4422
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EKEYS:
		{
			std::shared_ptr<Bag<ecore::EObject>> tempList(new Bag<ecore::EObject>());
			Bag<ecore::EAttribute>::iterator iter = getEKeys()->begin();
			Bag<ecore::EAttribute>::iterator end = getEKeys()->end();
			while (iter != end)
			{
				tempList->add(*iter);
				iter++;
			}
			return eAny(tempList); //4427			
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EOPPOSITE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getEOpposite();
			return eAny(returnValue); //4425
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EREFERENCETYPE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getEReferenceType();
			return eAny(returnValue); //4426
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_RESOLVEPROXIES:
			return eAny(isResolveProxies()); //4424
	}
	return EStructuralFeatureImpl::eGet(featureID, resolve, coreType);
}

bool EReferenceImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_CONTAINER:
			return isContainer() != false; //4423
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_CONTAINMENT:
			return isContainment() != false; //4422
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EKEYS:
			return getEKeys() != nullptr; //4427
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EOPPOSITE:
			return getEOpposite() != nullptr; //4425
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EREFERENCETYPE:
			return getEReferenceType() != nullptr; //4426
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_RESOLVEPROXIES:
			return isResolveProxies() != true; //4424
	}
	return EStructuralFeatureImpl::internalEIsSet(featureID);
}

bool EReferenceImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_CONTAINMENT:
		{
			// BOOST CAST
			bool _containment = newValue->get<bool>();
			setContainment(_containment); //4422
			return true;
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EKEYS:
		{
			// BOOST CAST
			std::shared_ptr<Bag<ecore::EObject>> tempObjectList = newValue->get<std::shared_ptr<Bag<ecore::EObject>>>();
			std::shared_ptr<Bag<ecore::EAttribute>> eKeysList(new Bag<ecore::EAttribute>());
			Bag<ecore::EObject>::iterator iter = tempObjectList->begin();
			Bag<ecore::EObject>::iterator end = tempObjectList->end();
			while (iter != end)
			{
				eKeysList->add(std::dynamic_pointer_cast<ecore::EAttribute>(*iter));
				iter++;
			}
			
			Bag<ecore::EAttribute>::iterator iterEKeys = getEKeys()->begin();
			Bag<ecore::EAttribute>::iterator endEKeys = getEKeys()->end();
			while (iterEKeys != endEKeys)
			{
				if (eKeysList->find(*iterEKeys) == -1)
				{
					getEKeys()->erase(*iterEKeys);
				}
				iterEKeys++;
			}
 
			iterEKeys = eKeysList->begin();
			endEKeys = eKeysList->end();
			while (iterEKeys != endEKeys)
			{
				if (getEKeys()->find(*iterEKeys) == -1)
				{
					getEKeys()->add(*iterEKeys);
				}
				iterEKeys++;			
			}
			return true;
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EOPPOSITE:
		{
			// BOOST CAST
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<ecore::EReference> _eOpposite = std::dynamic_pointer_cast<ecore::EReference>(_temp);
			setEOpposite(_eOpposite); //4425
			return true;
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_EREFERENCETYPE:
		{
			// BOOST CAST
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<ecore::EClass> _eReferenceType = std::dynamic_pointer_cast<ecore::EClass>(_temp);
			setEReferenceType(_eReferenceType); //4426
			return true;
		}
		case ecore::ecorePackage::EREFERENCE_ATTRIBUTE_RESOLVEPROXIES:
		{
			// BOOST CAST
			bool _resolveProxies = newValue->get<bool>();
			setResolveProxies(_resolveProxies); //4424
			return true;
		}
	}

	return EStructuralFeatureImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
Any EReferenceImpl::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;

  	switch(operationID)
	{

		default:
		{
			// call superTypes
			result = EStructuralFeatureImpl::eInvoke(operationID, arguments);
			if (!result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}


std::shared_ptr<ecore::EReference> EReferenceImpl::getThisEReferencePtr() const
{
	return m_thisEReferencePtr.lock();
}
void EReferenceImpl::setThisEReferencePtr(std::weak_ptr<ecore::EReference> thisEReferencePtr)
{
	m_thisEReferencePtr = thisEReferencePtr;
	setThisEStructuralFeaturePtr(thisEReferencePtr);
}
