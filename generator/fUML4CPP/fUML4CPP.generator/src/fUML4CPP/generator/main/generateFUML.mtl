[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFUML('http://www.eclipse.org/uml2/5.0.0/UML')]
    
[import fUML4CPP::generator::main::generateClassifierObjectHeader /]
[import fUML4CPP::generator::main::generateMetamodelClassifierObjectHeader /]
[import fUML4CPP::generator::main::generateClassifierObjectSource /]
[import fUML4CPP::generator::main::generateMetamodelClassifierObjectSource /]
[import fUML4CPP::generator::main::generateModelLocusHeader /]
[import fUML4CPP::generator::main::generateModelLocusSource /]
[import fUML4CPP::generator::main::generateExecutionBuildFile /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecutionHeader /]
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecutionSource /]
[import fUML4CPP::generator::main::generateOperationExecution /]
[import fUML4CPP::generator::main::generateOperationExecutionHeader /]
[import fUML4CPP::generator::main::generateOperationExecutionSource /]
[import fUML4CPP::generator::main::parameterHelper /]
[import fUML4CPP::generator::main::plugin::generateExecutionPlugin /]
[import fUML4CPP::generator::main::fUMLCollectionHelper /]
[import fUML4CPP::generator::main::fUMLKeywords /]
[import UML4CPP::generator::main::generate /]
[import UML4CPP::generator::main::configuration::generateGradleFiles /]
[import UML4CPP::generator::main::validation::validateModel /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]

[template public generateFUML(aPackage : uml::Package)]
[comment @main/]

[if (aPackage.name.oclIsUndefined() or aPackage.name = '')]
	['package has no name '.registerError()/]
[else]
	[aPackage.generateUML()/]
	[if (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'PackageOnly')->notEmpty())]
		[aPackage.generateFUMLModelForPackageOnly()/]
	[else]
		[aPackage.generateFUMLModel()/]
	[/if]
[/if]

[if (aPackage.errorExisting())]
	[aPackage.printErrors()/]
	[closeWithErrorExit(1)/]
[/if]
[/template]

[template public generateFUMLModel(aPackage : Package)]
//generate execution for OpaqueBehaviors
[for (anOpaqueBehavior : OpaqueBehavior | aPackage.getPackageOpaqueBehaviors()->reject(hasEAnnotation(sourceNoExecution())))]
[anOpaqueBehavior.generateOpaqueBehaviorExecutionHeader(aPackage)/]
[anOpaqueBehavior.generateOpaqueBehaviorExecutionSource(aPackage)/]
[/for]

//generate execution for Operations
[comment]
[aPackage.collectAllPossiblyCalledOperations().generateOperationExecutionHeader(aPackage)/]
[aPackage.collectAllPossiblyCalledOperations().generateOperationExecutionSource(aPackage)/]
[/comment]
[for (anOperation : Operation | aPackage.getPackageOperations()->reject(hasEAnnotation(sourceNoExecution())))]
[anOperation.generateOperationExecutionHeader(aPackage)/]
[anOperation.generateOperationExecutionSource(aPackage)/]
[/for]

//generate execution classifier
[for (aClassifier : Classifier | aPackage.getClassifiersForObjectClasses()->reject(hasEAnnotation(sourceNoExecution())))]
[aClassifier.generateClassifierObjectHeader(aPackage)/]
[aClassifier.generateClassifierObjectSource(aPackage)/]
[/for]

[comment Generate execution plugin, model locus, CMakeLists and Gradle-Files only for root package /]
[if (aPackage.getSuperPackage().oclIsUndefined())]
//generate execution plugin
[aPackage.generateExecutionPlugin()/]

//generate model locus
[aPackage.generateModelLocusHeader()/]
[aPackage.generateModelLocusSource()/]

//generate project files
[aPackage.generateExecutionBuildFiles(false)/]
[/if]
[/template]



[template public generateFUMLModelForPackageOnly(aPackage : Package)]
//generate execution classifier
[aPackage.getClassifiersForPackageOnly().generateClassifierObjectHeader(aPackage)/]
[aPackage.getClassifiersForPackageOnly().generateClassifierObjectSource(aPackage)/]

[comment Generate execution plugin, CMakeLists and Gradle-Files only for root package /]
[if (aPackage.getSuperPackage().oclIsUndefined())]
//generate execution plugin
[aPackage.generateExecutionPlugin()/]

//generate project files
[aPackage.generateExecutionBuildFiles(true)/]
[/if]
[/template]