//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CONSIDERIGNOREFRAGMENTCONSIDERIGNOREFRAGMENTIMPL_HPP
#define UML_CONSIDERIGNOREFRAGMENTCONSIDERIGNOREFRAGMENTIMPL_HPP

//*********************************
// generated Includes

// namespace macro header include
#include "uml/uml.hpp" 

// model includes
#include "../ConsiderIgnoreFragment.hpp"

#include "uml/impl/CombinedFragmentImpl.hpp"

//*********************************
namespace uml 
{
	class UML_API ConsiderIgnoreFragmentImpl : virtual public CombinedFragmentImpl, virtual public ConsiderIgnoreFragment 
	{
		public: 
			ConsiderIgnoreFragmentImpl(const ConsiderIgnoreFragmentImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;
			ConsiderIgnoreFragmentImpl& operator=(ConsiderIgnoreFragmentImpl const&); 

		protected:
			friend class umlFactoryImpl;
			ConsiderIgnoreFragmentImpl();
			virtual std::shared_ptr<uml::ConsiderIgnoreFragment> getThisConsiderIgnoreFragmentPtr() const;
			virtual void setThisConsiderIgnoreFragmentPtr(std::weak_ptr<uml::ConsiderIgnoreFragment> thisConsiderIgnoreFragmentPtr);

			//Additional constructors for the containments back reference
			ConsiderIgnoreFragmentImpl(std::weak_ptr<uml::Interaction> par_enclosingInteraction);
			//Additional constructors for the containments back reference
			ConsiderIgnoreFragmentImpl(std::weak_ptr<uml::InteractionOperand> par_enclosingOperand);
			//Additional constructors for the containments back reference
			ConsiderIgnoreFragmentImpl(std::weak_ptr<uml::Namespace> par_namespace);
			//Additional constructors for the containments back reference
			ConsiderIgnoreFragmentImpl(std::weak_ptr<uml::Element> par_owner);

		public:
			//destructor
			virtual ~ConsiderIgnoreFragmentImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			The interaction operator of a ConsiderIgnoreFragment must be either 'consider' or 'ignore'.
			(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)
			*/
			 
			virtual bool consider_or_ignore(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			/*!
			The NamedElements must be of a type of element that can be a signature for a message (i.e.., an Operation, or a Signal).
			message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))
			*/
			 
			virtual bool type(std::shared_ptr<Any> diagnostics, std::shared_ptr<std::map < Any, Any>> context) ;
			
			//*********************************
			// Attribute Getters & Setters
			//*********************************
			
			//*********************************
			// Reference Getters & Setters
			//*********************************
			/*!
			The set of messages that apply to this fragment.
			<p>From package UML::Interactions.</p>
			*/
			
			virtual std::shared_ptr<Bag<uml::NamedElement>> getMessage() const ;
			
			//*********************************
			// Union Reference Getters
			//*********************************
			/*!
			Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::weak_ptr<uml::Namespace> getNamespace() const ;
			/*!
			The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::Element>> getOwnedElement() const ;
			/*!
			The Element that owns this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::weak_ptr<uml::Element> getOwner() const ;
			
			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler);
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;

			//*********************************
			// EStructuralFeature Get/Set/IsSet
			//*********************************
			virtual std::shared_ptr<Any> eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool eSet(int featureID, std::shared_ptr<Any> newValue) ;
			virtual bool internalEIsSet(int featureID) const ;

			//*********************************
			// EOperation Invoke
			//*********************************
			virtual std::shared_ptr<Any> eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments) ;

		private:
			std::weak_ptr<uml::ConsiderIgnoreFragment> m_thisConsiderIgnoreFragmentPtr;
	};
}
#endif /* end of include guard: UML_CONSIDERIGNOREFRAGMENTCONSIDERIGNOREFRAGMENTIMPL_HPP */
