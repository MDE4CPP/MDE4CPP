//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef FOUNDATIONALMODELLIBRARY_COMMON_FACTORY_HPP
#define FOUNDATIONALMODELLIBRARY_COMMON_FACTORY_HPP

#include "uml/Factory.hpp"
#include "FoundationalModelLibrary/Common/CommonPackage.hpp"

namespace FoundationalModelLibrary::Common
{
	class Listener;
	struct Status;
}

namespace FoundationalModelLibrary::Common 
{
	class CommonPackage;
	class CommonFactory;

	class CommonFactory : virtual public uml::Factory 
	{ 
		protected:
			//protected default construcotr
			CommonFactory(){}

			//Singleton Instance and Getter
			
			private:
				static std::shared_ptr<CommonFactory> instance;
			public:
				static std::shared_ptr<CommonFactory> eInstance();

			//Creator functions
			virtual std::shared_ptr<uml::Element> create(const unsigned int _metaClassId,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const = 0;
			virtual std::shared_ptr<uml::Element> create(const std::shared_ptr<uml::Class> _class,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const = 0;
			virtual std::shared_ptr<uml::Element> create(const std::string _className,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const = 0;

			//START Create methods for data type Status
			virtual std::shared_ptr<FoundationalModelLibrary::Common::Status> createStatus(const int metaElementID = CommonPackage::STATUS_DATATYPE) const  = 0;
			//END Create methods for data type Status
			
			
			//Package
			virtual std::shared_ptr<CommonPackage> getCommonPackage() = 0;
	};
}
#endif /* end of include guard: FOUNDATIONALMODELLIBRARY_COMMON_FACTORY_HPP */
