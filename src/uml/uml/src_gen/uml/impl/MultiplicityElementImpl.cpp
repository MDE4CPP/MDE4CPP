
#include "uml/impl/MultiplicityElementImpl.hpp"

#ifdef NDEBUG
	#define DEBUG_MESSAGE(a) /**/
#else
	#define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>


#include "abstractDataTypes/Subset.hpp"


#include "abstractDataTypes/Any.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"


//Forward declaration includes
#include "persistence/interfaces/XLoadHandler.hpp" // used for Persistence
#include "persistence/interfaces/XSaveHandler.hpp" // used for Persistence

#include <exception> // used in Persistence
#include "uml/umlFactory.hpp"
#include "uml/Comment.hpp"
#include "uml/Element.hpp"
#include "uml/MultiplicityElement.hpp"
#include "uml/ValueSpecification.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
MultiplicityElementImpl::MultiplicityElementImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

MultiplicityElementImpl::~MultiplicityElementImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete MultiplicityElement "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
MultiplicityElementImpl::MultiplicityElementImpl(std::weak_ptr<uml::Element> par_owner)
:MultiplicityElementImpl()
{
	m_owner = par_owner;
}

MultiplicityElementImpl::MultiplicityElementImpl(const MultiplicityElementImpl & obj): MultiplicityElementImpl()
{
	*this = obj;
}

MultiplicityElementImpl& MultiplicityElementImpl::operator=(const MultiplicityElementImpl & obj)
{
	//call overloaded =Operator for each base class
	ElementImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of MultiplicityElement 
	 * which is generated by the compiler (as MultiplicityElement is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//MultiplicityElement::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy MultiplicityElement "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_isOrdered = obj.getIsOrdered();
	m_isUnique = obj.getIsUnique();
	m_lower = obj.getLower();
	m_upper = obj.getUpper();

	//copy references with no containment (soft copy)
	//Clone references with containment (deep copy)
	//clone reference 'lowerValue'
	if(obj.getLowerValue()!=nullptr)
	{
		m_lowerValue = std::dynamic_pointer_cast<uml::ValueSpecification>(obj.getLowerValue()->copy());
	}

	//clone reference 'upperValue'
	if(obj.getUpperValue()!=nullptr)
	{
		m_upperValue = std::dynamic_pointer_cast<uml::ValueSpecification>(obj.getUpperValue()->copy());
	}
	
	
	return *this;
}

//*********************************
// Operations
//*********************************
bool MultiplicityElementImpl::compatibleWith(std::shared_ptr<uml::MultiplicityElement> other)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::includesMultiplicity(std::shared_ptr<uml::MultiplicityElement> M)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::is(int lowerbound,int upperbound)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::isMultivalued()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

int MultiplicityElementImpl::lowerBound()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::lower_ge_0(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::lower_is_integer(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

int MultiplicityElementImpl::upperBound()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::upper_ge_lower(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::upper_is_unlimitedNatural(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::value_specification_constant(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool MultiplicityElementImpl::value_specification_no_side_effects(Any diagnostics,std::shared_ptr<std::map < Any, Any>> context)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute isOrdered */
bool MultiplicityElementImpl::getIsOrdered() const 
{
	return m_isOrdered;
}
void MultiplicityElementImpl::setIsOrdered(bool _isOrdered)
{
	m_isOrdered = _isOrdered;
	
}

/* Getter & Setter for attribute isUnique */
bool MultiplicityElementImpl::getIsUnique() const 
{
	return m_isUnique;
}
void MultiplicityElementImpl::setIsUnique(bool _isUnique)
{
	m_isUnique = _isUnique;
	
}

/* Getter & Setter for attribute lower */
int MultiplicityElementImpl::getLower() const 
{
	return m_lower;
}
void MultiplicityElementImpl::setLower(int _lower)
{
	m_lower = _lower;
	
}

/* Getter & Setter for attribute upper */
int MultiplicityElementImpl::getUpper() const 
{
	return m_upper;
}
void MultiplicityElementImpl::setUpper(int _upper)
{
	m_upper = _upper;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference lowerValue */
std::shared_ptr<uml::ValueSpecification> MultiplicityElementImpl::getLowerValue() const
{
    return m_lowerValue;
}
void MultiplicityElementImpl::setLowerValue(std::shared_ptr<uml::ValueSpecification> _lowerValue)
{
    m_lowerValue = _lowerValue;
	
}

/* Getter & Setter for reference upperValue */
std::shared_ptr<uml::ValueSpecification> MultiplicityElementImpl::getUpperValue() const
{
    return m_upperValue;
}
void MultiplicityElementImpl::setUpperValue(std::shared_ptr<uml::ValueSpecification> _upperValue)
{
    m_upperValue = _upperValue;
	
}

//*********************************
// Union Getter
//*********************************
std::shared_ptr<Union<uml::Element>> MultiplicityElementImpl::getOwnedElement() const
{
	if(m_ownedElement == nullptr)
	{
		/*Union*/
		m_ownedElement.reset(new Union<uml::Element>());
			#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising Union: " << "m_ownedElement - Union<uml::Element>()" << std::endl;
		#endif
		
		
	}
	return m_ownedElement;
}

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> MultiplicityElementImpl::eContainer() const
{
	if(auto wp = m_owner.lock())
	{
		return wp;
	}
	return nullptr;
}

//*********************************
// Persistence Functions
//*********************************
void MultiplicityElementImpl::load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get umlFactory
	int numNodes = loadHandler->getNumOfChildNodes();
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadNode(loadHandler->getNextNodeName(), loadHandler);
	}
}		

void MultiplicityElementImpl::loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
		iter = attr_list.find("isOrdered");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsOrdered(value);
		}

		iter = attr_list.find("isUnique");
		if ( iter != attr_list.end() )
		{
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
			this->setIsUnique(value);
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}

	ElementImpl::loadAttributes(loadHandler, attr_list);
}

void MultiplicityElementImpl::loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler)
{

	try
	{
		if ( nodeName.compare("lowerValue") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChild(this->getLowerValue()); 

			return; 
		}

		if ( nodeName.compare("upperValue") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return; // no type name given and reference type is abstract
			}
			loadHandler->handleChild(this->getUpperValue()); 

			return; 
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	//load BasePackage Nodes
	ElementImpl::loadNode(nodeName, loadHandler);
}

void MultiplicityElementImpl::resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references)
{
	ElementImpl::resolveReferences(featureID, references);
}

void MultiplicityElementImpl::save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	saveContent(saveHandler);

	ElementImpl::saveContent(saveHandler);
	
	ObjectImpl::saveContent(saveHandler);
	
	ecore::EObjectImpl::saveContent(saveHandler);
}

void MultiplicityElementImpl::saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const
{
	try
	{
		std::shared_ptr<uml::umlPackage> package = uml::umlPackage::eInstance();
		// Save 'lowerValue'
		std::shared_ptr<uml::ValueSpecification> lowerValue = this->getLowerValue();
		if (lowerValue != nullptr)
		{
			saveHandler->addReference(lowerValue, "lowerValue", lowerValue->eClass() != package->getValueSpecification_Class());
		}

		// Save 'upperValue'
		std::shared_ptr<uml::ValueSpecification> upperValue = this->getUpperValue();
		if (upperValue != nullptr)
		{
			saveHandler->addReference(upperValue, "upperValue", upperValue->eClass() != package->getValueSpecification_Class());
		}
		// Add attributes
		if ( this->eIsSet(package->getMultiplicityElement_Attribute_isOrdered()) )
		{
			saveHandler->addAttribute("isOrdered", this->getIsOrdered());
		}

		if ( this->eIsSet(package->getMultiplicityElement_Attribute_isUnique()) )
		{
			saveHandler->addAttribute("isUnique", this->getIsUnique());
		}
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
}

std::shared_ptr<ecore::EClass> MultiplicityElementImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getMultiplicityElement_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
Any MultiplicityElementImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_ISORDERED:
			return eAny(getIsOrdered(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //1543
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_ISUNIQUE:
			return eAny(getIsUnique(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //1544
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWER:
			return eAny(getLower(),ecore::ecorePackage::EINT_CLASS,false); //1545
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:
			return eAny(getLowerValue(),uml::umlPackage::VALUESPECIFICATION_CLASS,false); //1546
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPER:
			return eAny(getUpper(),0,false); //1547
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:
			return eAny(getUpperValue(),uml::umlPackage::VALUESPECIFICATION_CLASS,false); //1548
	}
	return ElementImpl::eGet(featureID, resolve, coreType);
}

bool MultiplicityElementImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_ISORDERED:
			return getIsOrdered() != false; //1543
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_ISUNIQUE:
			return getIsUnique() != true; //1544
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWER:
			return getLower() != 1; //1545
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:
			return getLowerValue() != nullptr; //1546
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPER:
			return getUpper() != 1; //1547
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:
			return getUpperValue() != nullptr; //1548
	}
	return ElementImpl::internalEIsSet(featureID);
}

bool MultiplicityElementImpl::eSet(int featureID, Any newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_ISORDERED:
		{
			// CAST Any to bool
			bool _isOrdered = newValue->get<bool>();
			setIsOrdered(_isOrdered); //1543
			return true;
		}
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_ISUNIQUE:
		{
			// CAST Any to bool
			bool _isUnique = newValue->get<bool>();
			setIsUnique(_isUnique); //1544
			return true;
		}
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWER:
		{
			// CAST Any to int
			int _lower = newValue->get<int>();
			setLower(_lower); //1545
			return true;
		}
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_LOWERVALUE:
		{
			// CAST Any to uml::ValueSpecification
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<uml::ValueSpecification> _lowerValue = std::dynamic_pointer_cast<uml::ValueSpecification>(_temp);
			setLowerValue(_lowerValue); //1546
			return true;
		}
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPER:
		{
			// CAST Any to int
			int _upper = newValue->get<int>();
			setUpper(_upper); //1547
			return true;
		}
		case uml::umlPackage::MULTIPLICITYELEMENT_ATTRIBUTE_UPPERVALUE:
		{
			// CAST Any to uml::ValueSpecification
			std::shared_ptr<ecore::EObject> _temp = newValue->get<std::shared_ptr<ecore::EObject>>();
			std::shared_ptr<uml::ValueSpecification> _upperValue = std::dynamic_pointer_cast<uml::ValueSpecification>(_temp);
			setUpperValue(_upperValue); //1548
			return true;
		}
	}

	return ElementImpl::eSet(featureID, newValue);
}

//*********************************
// EOperation Invoke
//*********************************
Any MultiplicityElementImpl::eInvoke(int operationID, std::shared_ptr<std::list<Any>> arguments)
{
	Any result;

  	switch(operationID)
	{
		// uml::MultiplicityElement::compatibleWith(uml::MultiplicityElement) : bool: 781962328
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_COMPATIBLEWITH_MULTIPLICITYELEMENT:
		{
			//Retrieve input parameter 'other'
			//parameter 0
			std::shared_ptr<uml::MultiplicityElement> incoming_param_other;
			std::list<Any>::const_iterator incoming_param_other_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_other = (*incoming_param_other_arguments_citer)->get<std::shared_ptr<uml::MultiplicityElement> >();
			result = eAny(this->compatibleWith(incoming_param_other),0,false);
			break;
		}
		// uml::MultiplicityElement::includesMultiplicity(uml::MultiplicityElement) : bool: 731782748
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_INCLUDESMULTIPLICITY_MULTIPLICITYELEMENT:
		{
			//Retrieve input parameter 'M'
			//parameter 0
			std::shared_ptr<uml::MultiplicityElement> incoming_param_M;
			std::list<Any>::const_iterator incoming_param_M_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_M = (*incoming_param_M_arguments_citer)->get<std::shared_ptr<uml::MultiplicityElement> >();
			result = eAny(this->includesMultiplicity(incoming_param_M),0,false);
			break;
		}
		// uml::MultiplicityElement::is(int, int) : bool: 1193521774
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_IS_INTEGER_UNLIMITEDNATURAL:
		{
			//Retrieve input parameter 'lowerbound'
			//parameter 0
			int incoming_param_lowerbound;
			std::list<Any>::const_iterator incoming_param_lowerbound_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_lowerbound = (*incoming_param_lowerbound_arguments_citer)->get<int >();
			//Retrieve input parameter 'upperbound'
			//parameter 1
			int incoming_param_upperbound;
			std::list<Any>::const_iterator incoming_param_upperbound_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_upperbound = (*incoming_param_upperbound_arguments_citer)->get<int >();
			result = eAny(this->is(incoming_param_lowerbound,incoming_param_upperbound),0,false);
			break;
		}
		// uml::MultiplicityElement::isMultivalued() : bool: 77238747
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_ISMULTIVALUED:
		{
			result = eAny(this->isMultivalued(),0,false);
			break;
		}
		// uml::MultiplicityElement::lowerBound() : int: 2138592890
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_LOWERBOUND:
		{
			result = eAny(this->lowerBound(),0,false);
			break;
		}
		// uml::MultiplicityElement::lower_ge_0(Any, std::map) : bool: 1181781721
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_LOWER_GE_0_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->lower_ge_0(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::MultiplicityElement::lower_is_integer(Any, std::map) : bool: 1564505796
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_LOWER_IS_INTEGER_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->lower_is_integer(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::MultiplicityElement::upperBound() : int: 1061985247
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_UPPERBOUND:
		{
			result = eAny(this->upperBound(),0,false);
			break;
		}
		// uml::MultiplicityElement::upper_ge_lower(Any, std::map) : bool: 1059806351
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_UPPER_GE_LOWER_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->upper_ge_lower(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::MultiplicityElement::upper_is_unlimitedNatural(Any, std::map) : bool: 1135606767
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_UPPER_IS_UNLIMITEDNATURAL_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->upper_is_unlimitedNatural(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::MultiplicityElement::value_specification_constant(Any, std::map) : bool: 686253068
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_VALUE_SPECIFICATION_CONSTANT_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->value_specification_constant(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}
		// uml::MultiplicityElement::value_specification_no_side_effects(Any, std::map) : bool: 190489247
		case umlPackage::MULTIPLICITYELEMENT_OPERATION_VALUE_SPECIFICATION_NO_SIDE_EFFECTS_EDIAGNOSTICCHAIN_EMAP:
		{
			//Retrieve input parameter 'diagnostics'
			//parameter 0
			Any incoming_param_diagnostics;
			std::list<Any>::const_iterator incoming_param_diagnostics_arguments_citer = std::next(arguments->begin(), 0);
			incoming_param_diagnostics = (*incoming_param_diagnostics_arguments_citer)->get<Any >();
			//Retrieve input parameter 'context'
			//parameter 1
			std::shared_ptr<std::map < Any, Any>> incoming_param_context;
			std::list<Any>::const_iterator incoming_param_context_arguments_citer = std::next(arguments->begin(), 1);
			incoming_param_context = (*incoming_param_context_arguments_citer)->get<std::shared_ptr<std::map < Any, Any>> >();
			result = eAny(this->value_specification_no_side_effects(incoming_param_diagnostics,incoming_param_context),0,false);
			break;
		}

		default:
		{
			// call superTypes
			result = ElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::MultiplicityElement> MultiplicityElementImpl::getThisMultiplicityElementPtr() const
{
	return m_thisMultiplicityElementPtr.lock();
}
void MultiplicityElementImpl::setThisMultiplicityElementPtr(std::weak_ptr<uml::MultiplicityElement> thisMultiplicityElementPtr)
{
	m_thisMultiplicityElementPtr = thisMultiplicityElementPtr;
	setThisElementPtr(thisMultiplicityElementPtr);
}


