[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module to generate model factory implementation header file
 * 
 */]
[module generateFactoryImplementationHeader('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateClass /]
[import UML4CPP::generator::main::components::generateDataType /]
[import UML4CPP::generator::main::components::generateInterface /]
[import UML4CPP::generator::main::components::generateSignal /]
[import UML4CPP::generator::main::helpers::collectionHelper /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::profiles::uml4CPPProfileHelper /]
[import UML4CPP::generator::main::helpers::isGeneratableHelper /]

[template public generateFactoryImplHeader(aPackage : Package)]
[file (aPackage.generateNamespacePath(false).concat('/impl/').concat(aPackage.name).concat('FactoryImpl.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'FactoryImpl')/]

#include <functional>
#include <map>

#include "uml/impl/FactoryImpl.hpp"
#include "[aPackage.generateNamespacePath(false)/]/[aPackage.name.concat('Factory')/].hpp"

[if (not aPackage.isIgnoreNamespace())]namespace [aPackage.generateNamespace(false)/] 
{
[/if]
	class [aPackage.name.concat('FactoryImpl')/] : virtual public uml::FactoryImpl , virtual public [aPackage.name.concat('Factory')/] 
	{
		protected:
			friend class [aPackage.name.concat('Factory')/];
			// Constructor
			[aPackage.name.concat('FactoryImpl')/]();

		public:
			virtual ~[aPackage.name.concat('FactoryImpl')/]();
			virtual std::shared_ptr<uml::Element> create(const unsigned int _metaClassId,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const;
			virtual std::shared_ptr<uml::Element> create(const std::shared_ptr<uml::Class> _class,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const;
			virtual std::shared_ptr<uml::Element> create(const std::string _className,  std::shared_ptr<uml::Element> container= nullptr, const unsigned int referenceID = -1) const;

			//Creator functions
			[aPackage.collectPackageClassifiersForFactoryFunctions()->select(isGeneratable()).generateClassifierCreate(true)/]

			//Package
			virtual std::shared_ptr<[aPackage.name/]Package> get[aPackage.name/]Package();

		private:
			static [aPackage.name.concat('Factory')/] * create();
			std::map<std::string,unsigned int> m_idMap;
			virtual void init() {}
	};
[if (not aPackage.isIgnoreNamespace())]}[/if]
[endGuard(aPackage,'FactoryImpl')/]
[/file]
[/template]
