
#include "uml/impl/PropertyImpl.hpp"
#ifdef NDEBUG
	#define DEBUG_INFO(a)		/**/
	#define DEBUG_WARNING(a)	/**/
	#define DEBUG_ERROR(a)		/**/
#else
	#define DEBUG_INFO(a) 		std::cout<<"[\e[0;32mInfo\e[0m]:\t\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_WARNING(a) 	std::cout<<"[\e[0;33mWarning\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
	#define DEBUG_ERROR(a)		std::cout<<"[\e[0;31mError\e[0m]:\t"<<__PRETTY_FUNCTION__<<"\n\t\t  -- Message: "<<a<<std::endl;
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>
#include <iostream>
#include <sstream>
#include <stdexcept>
#include "abstractDataTypes/SubsetUnion.hpp"


#include "ecore/EcoreAny.hpp"
#include "ecore/EcoreContainerAny.hpp"
#include "abstractDataTypes/SubsetUnion.hpp"
#include "ecore/EAnnotation.hpp"
#include "ecore/EClass.hpp"
#include "ecore/EAttribute.hpp"
#include "ecore/EStructuralFeature.hpp"
#include "ecore/ecorePackage.hpp"
//Includes from codegen annotation
#include "uml/AggregationKind.hpp"
//Forward declaration includes
#include "uml/Association.hpp"
#include "uml/Class.hpp"
#include "uml/Classifier.hpp"
#include "uml/Comment.hpp"
#include "uml/ConnectableElement.hpp"
#include "uml/ConnectorEnd.hpp"
#include "uml/DataType.hpp"
#include "uml/Dependency.hpp"
#include "uml/Deployment.hpp"
#include "uml/DeploymentTarget.hpp"
#include "uml/Element.hpp"
#include "uml/Interface.hpp"
#include "uml/Namespace.hpp"
#include "uml/PackageableElement.hpp"
#include "uml/Property.hpp"
#include "uml/RedefinableElement.hpp"
#include "uml/StringExpression.hpp"
#include "uml/StructuralFeature.hpp"
#include "uml/TemplateParameter.hpp"
#include "uml/Type.hpp"
#include "uml/ValueSpecification.hpp"
//Factories and Package includes
#include "uml/umlPackage.hpp"

using namespace uml;

//*********************************
// Constructor / Destructor
//*********************************
PropertyImpl::PropertyImpl()
{	
	/*
	NOTE: Due to virtual inheritance, base class constrcutors may not be called correctly
	*/
}

PropertyImpl::~PropertyImpl()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete Property "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::Property> par_associationEnd)
:PropertyImpl()
{
	m_associationEnd = par_associationEnd;
	m_owner = par_associationEnd;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::Class> par_class)
:PropertyImpl()
{
	m_class = par_class;
	m_namespace = par_class;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::DataType> par_datatype)
:PropertyImpl()
{
	m_datatype = par_datatype;
	m_namespace = par_datatype;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::Interface> par_interface)
:PropertyImpl()
{
	m_interface = par_interface;
	m_namespace = par_interface;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::Namespace> par_namespace)
:PropertyImpl()
{
	m_namespace = par_namespace;
	m_owner = par_namespace;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::Element> par_owner)
:PropertyImpl()
{
	m_owner = par_owner;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::Association> par_owningAssociation)
:PropertyImpl()
{
	m_owningAssociation = par_owningAssociation;
	m_namespace = par_owningAssociation;
}

//Additional constructor for the containments back reference
PropertyImpl::PropertyImpl(std::weak_ptr<uml::TemplateParameter> par_owningTemplateParameter)
:PropertyImpl()
{
	m_owningTemplateParameter = par_owningTemplateParameter;
	m_owner = par_owningTemplateParameter;
}

PropertyImpl::PropertyImpl(const PropertyImpl & obj): PropertyImpl()
{
	*this = obj;
}

PropertyImpl& PropertyImpl::operator=(const PropertyImpl & obj)
{
	//call overloaded =Operator for each base class
	StructuralFeatureImpl::operator=(obj);
	ConnectableElementImpl::operator=(obj);
	DeploymentTargetImpl::operator=(obj);
	/* TODO: Find out if this call is necessary
	 * Currently, this causes an error because it calls an implicit assignment operator of Property 
	 * which is generated by the compiler (as Property is an abstract class and does not have a user-defined assignment operator).
	 * Implicit compiler-generated assignment operators however only create shallow copies of members,
	 * which implies, that not a real deep copy is created when using the copy()-method.
	 * 
	 * NOTE: Since all members are deep-copied by this assignment-operator anyway, why is it even necessary to call this implicit assignment-operator?
	 * This is only done for ecore-models, not for UML-models.
	 */
	//Property::operator=(obj);

	//create copy of all Attributes
	#ifdef SHOW_COPIES
	std::cout << "+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\r\ncopy Property "<< this << "\r\n+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++ " << std::endl;
	#endif
	//Clone Attributes with (deep copy)
	m_aggregation = obj.getAggregation();
	m_default = obj.getDefault();
	m_isComposite = obj.getIsComposite();
	m_isDerived = obj.getIsDerived();
	m_isDerivedUnion = obj.getIsDerivedUnion();
	m_isID = obj.getIsID();

	//copy references with no containment (soft copy)
	m_association  = obj.getAssociation();
	m_associationEnd  = obj.getAssociationEnd();
	m_class  = obj.getClass();
	m_datatype  = obj.getDatatype();
	m_interface  = obj.getInterface();
	m_opposite  = obj.getOpposite();
	m_owningAssociation  = obj.getOwningAssociation();
	m_subsettedProperty  = obj.getSubsettedProperty();
	//Clone references with containment (deep copy)
	//clone reference 'defaultValue'
	if(obj.getDefaultValue()!=nullptr)
	{
		m_defaultValue = std::dynamic_pointer_cast<uml::ValueSpecification>(obj.getDefaultValue()->copy());
	}

	//clone reference 'qualifier'
	std::shared_ptr<Subset<uml::Property, uml::Element>> qualifierList = obj.getQualifier();
	if(qualifierList)
	{
		/*Subset*/
		m_qualifier.reset(new Subset<uml::Property, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_qualifier - Subset<uml::Property, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getQualifier()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_qualifier - Subset<uml::Property, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Property> qualifierindexElem: *qualifierList) 
		{
			std::shared_ptr<uml::Property> temp = std::dynamic_pointer_cast<uml::Property>((qualifierindexElem)->copy());
			m_qualifier->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for qualifier.")
	}

	//clone reference 'redefinedProperty'
	std::shared_ptr<SubsetUnion<uml::Property, uml::RedefinableElement>> redefinedPropertyList = obj.getRedefinedProperty();
	if(redefinedPropertyList)
	{
		/*SubsetUnion*/
		m_redefinedProperty.reset(new SubsetUnion<uml::Property, uml::RedefinableElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_redefinedProperty - SubsetUnion<uml::Property, uml::RedefinableElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getRedefinedProperty()->initSubsetUnion(getRedefinedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_redefinedProperty - SubsetUnion<uml::Property, uml::RedefinableElement >(getRedefinedElement())" << std::endl;
		#endif
		
		for(const std::shared_ptr<uml::Property> redefinedPropertyindexElem: *redefinedPropertyList) 
		{
			std::shared_ptr<uml::Property> temp = std::dynamic_pointer_cast<uml::Property>((redefinedPropertyindexElem)->copy());
			m_redefinedProperty->push_back(temp);
		}
	}
	else
	{
		DEBUG_WARNING("container is nullptr for redefinedProperty.")
	}
	
	/*Subset*/
	getQualifier()->initSubset(getOwnedElement());
	#ifdef SHOW_SUBSET_UNION
		std::cout << "Initialising value Subset: " << "m_qualifier - Subset<uml::Property, uml::Element >(getOwnedElement())" << std::endl;
	#endif
	
	return *this;
}

std::shared_ptr<ecore::EObject> PropertyImpl::copy() const
{
	std::shared_ptr<PropertyImpl> element(new PropertyImpl());
	*element =(*this);
	element->setThisPropertyPtr(element);
	return element;
}

//*********************************
// Operations
//*********************************


std::shared_ptr<uml::Property> PropertyImpl::getOtherEnd()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PropertyImpl::isAttribute()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PropertyImpl::isComposite()
{
	//ADD_COUNT(__PRETTY_FUNCTION__)
	//generated from body annotation
	return (getAggregation() == AggregationKind::COMPOSITE);
	//end of body
}

bool PropertyImpl::isNavigable()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

bool PropertyImpl::isSetDefault()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setBooleanDefaultValue(bool value)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setIntegerDefaultValue(int value)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setIsNavigable(bool isNavigable)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setNullDefaultValue()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setRealDefaultValue(double value)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setStringDefaultValue(std::string value)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::setUnlimitedNaturalDefaultValue(int value)
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

std::shared_ptr<Bag<uml::Type>> PropertyImpl::subsettingContext()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

void PropertyImpl::unsetDefault()
{
	throw std::runtime_error("UnsupportedOperationException: " + std::string(__PRETTY_FUNCTION__));
}

//*********************************
// Attribute Getters & Setters
//*********************************
/* Getter & Setter for attribute aggregation */
uml::AggregationKind PropertyImpl::getAggregation() const 
{
	return m_aggregation;
}
void PropertyImpl::setAggregation(uml::AggregationKind _aggregation)
{
	m_aggregation = _aggregation;
	
}

/* Getter & Setter for attribute default */
std::string PropertyImpl::getDefault() const 
{
	return m_default;
}
void PropertyImpl::setDefault(std::string _default)
{
	m_default = _default;
	
}

/* Getter & Setter for attribute isComposite */
bool PropertyImpl::getIsComposite() const 
{
	return m_isComposite;
}
void PropertyImpl::setIsComposite(bool _isComposite)
{
	m_isComposite = _isComposite;
	
}

/* Getter & Setter for attribute isDerived */
bool PropertyImpl::getIsDerived() const 
{
	return m_isDerived;
}
void PropertyImpl::setIsDerived(bool _isDerived)
{
	m_isDerived = _isDerived;
	
}

/* Getter & Setter for attribute isDerivedUnion */
bool PropertyImpl::getIsDerivedUnion() const 
{
	return m_isDerivedUnion;
}
void PropertyImpl::setIsDerivedUnion(bool _isDerivedUnion)
{
	m_isDerivedUnion = _isDerivedUnion;
	
}

/* Getter & Setter for attribute isID */
bool PropertyImpl::getIsID() const 
{
	return m_isID;
}
void PropertyImpl::setIsID(bool _isID)
{
	m_isID = _isID;
	
}

//*********************************
// Reference Getters & Setters
//*********************************
/* Getter & Setter for reference association */
std::shared_ptr<uml::Association> PropertyImpl::getAssociation() const
{
    return m_association;
}
void PropertyImpl::setAssociation(std::shared_ptr<uml::Association> _association)
{
    m_association = _association;
	
}

/* Getter & Setter for reference associationEnd */
std::weak_ptr<uml::Property> PropertyImpl::getAssociationEnd() const
{
    return m_associationEnd;
}
void PropertyImpl::setAssociationEnd(std::weak_ptr<uml::Property> _associationEnd)
{
    m_associationEnd = _associationEnd;
	
}

/* Getter & Setter for reference class */
std::weak_ptr<uml::Class> PropertyImpl::getClass() const
{
    return m_class;
}
void PropertyImpl::setClass(std::weak_ptr<uml::Class> _class)
{
    m_class = _class;
	
}

/* Getter & Setter for reference datatype */
std::weak_ptr<uml::DataType> PropertyImpl::getDatatype() const
{
    return m_datatype;
}
void PropertyImpl::setDatatype(std::weak_ptr<uml::DataType> _datatype)
{
    m_datatype = _datatype;
	
}

/* Getter & Setter for reference defaultValue */
std::shared_ptr<uml::ValueSpecification> PropertyImpl::getDefaultValue() const
{
    return m_defaultValue;
}
void PropertyImpl::setDefaultValue(std::shared_ptr<uml::ValueSpecification> _defaultValue)
{
    m_defaultValue = _defaultValue;
	
}

/* Getter & Setter for reference interface */
std::weak_ptr<uml::Interface> PropertyImpl::getInterface() const
{
    return m_interface;
}
void PropertyImpl::setInterface(std::weak_ptr<uml::Interface> _interface)
{
    m_interface = _interface;
	
}

/* Getter & Setter for reference opposite */
std::shared_ptr<uml::Property> PropertyImpl::getOpposite() const
{
    return m_opposite;
}
void PropertyImpl::setOpposite(std::shared_ptr<uml::Property> _opposite)
{
    m_opposite = _opposite;
	
}

/* Getter & Setter for reference owningAssociation */
std::weak_ptr<uml::Association> PropertyImpl::getOwningAssociation() const
{
    return m_owningAssociation;
}
void PropertyImpl::setOwningAssociation(std::weak_ptr<uml::Association> _owningAssociation)
{
    m_owningAssociation = _owningAssociation;
	
}

/* Getter & Setter for reference qualifier */
std::shared_ptr<Subset<uml::Property, uml::Element>> PropertyImpl::getQualifier() const
{
	if(m_qualifier == nullptr)
	{
		/*Subset*/
		m_qualifier.reset(new Subset<uml::Property, uml::Element >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer Subset: " << "m_qualifier - Subset<uml::Property, uml::Element >()" << std::endl;
		#endif
		
		/*Subset*/
		getQualifier()->initSubset(getOwnedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value Subset: " << "m_qualifier - Subset<uml::Property, uml::Element >(getOwnedElement())" << std::endl;
		#endif
		
	}
    return m_qualifier;
}

/* Getter & Setter for reference redefinedProperty */
std::shared_ptr<SubsetUnion<uml::Property, uml::RedefinableElement>> PropertyImpl::getRedefinedProperty() const
{
	if(m_redefinedProperty == nullptr)
	{
		/*SubsetUnion*/
		m_redefinedProperty.reset(new SubsetUnion<uml::Property, uml::RedefinableElement >());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising shared pointer SubsetUnion: " << "m_redefinedProperty - SubsetUnion<uml::Property, uml::RedefinableElement >()" << std::endl;
		#endif
		
		/*SubsetUnion*/
		getRedefinedProperty()->initSubsetUnion(getRedefinedElement());
		#ifdef SHOW_SUBSET_UNION
			std::cout << "Initialising value SubsetUnion: " << "m_redefinedProperty - SubsetUnion<uml::Property, uml::RedefinableElement >(getRedefinedElement())" << std::endl;
		#endif
		
	}
    return m_redefinedProperty;
}

/* Getter & Setter for reference subsettedProperty */
std::shared_ptr<Bag<uml::Property>> PropertyImpl::getSubsettedProperty() const
{
	if(m_subsettedProperty == nullptr)
	{
		m_subsettedProperty.reset(new Bag<uml::Property>());
		
		
	}
    return m_subsettedProperty;
}

//*********************************
// Union Getter
//*********************************

//*********************************
// Container Getter
//*********************************
std::shared_ptr<ecore::EObject> PropertyImpl::eContainer() const
{
	if(auto wp = m_associationEnd.lock())
	{
		return wp;
	}

	if(auto wp = m_class.lock())
	{
		return wp;
	}

	if(auto wp = m_datatype.lock())
	{
		return wp;
	}

	if(auto wp = m_interface.lock())
	{
		return wp;
	}

	if(auto wp = m_namespace.lock())
	{
		return wp;
	}

	if(auto wp = m_owner.lock())
	{
		return wp;
	}

	if(auto wp = m_owningAssociation.lock())
	{
		return wp;
	}

	if(auto wp = m_owningTemplateParameter.lock())
	{
		return wp;
	}
	return nullptr;
}

std::shared_ptr<ecore::EClass> PropertyImpl::eStaticClass() const
{
	return uml::umlPackage::eInstance()->getProperty_Class();
}

//*********************************
// EStructuralFeature Get/Set/IsSet
//*********************************
std::shared_ptr<Any> PropertyImpl::eGet(int featureID, bool resolve, bool coreType) const
{
	switch(featureID)
	{
		case uml::umlPackage::PROPERTY_ATTRIBUTE_AGGREGATION:
			return eAny(getAggregation(),uml::umlPackage::AGGREGATIONKIND_CLASS,false); //18530
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ASSOCIATION:
			return eAny(getAssociation(),uml::umlPackage::ASSOCIATION_CLASS,false); //18543
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ASSOCIATIONEND:
		{
			std::shared_ptr<ecore::EObject> returnValue=getAssociationEnd().lock();
			return eEcoreAny(returnValue,uml::umlPackage::PROPERTY_CLASS); //18531
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_CLASS:
		{
			std::shared_ptr<ecore::EObject> returnValue=getClass().lock();
			return eEcoreAny(returnValue,uml::umlPackage::CLASS_CLASS); //18533
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DATATYPE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getDatatype().lock();
			return eEcoreAny(returnValue,uml::umlPackage::DATATYPE_CLASS); //18527
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DEFAULT:
			return eAny(getDefault(),ecore::ecorePackage::ESTRING_CLASS,false); //18529
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:
			return eAny(getDefaultValue(),uml::umlPackage::VALUESPECIFICATION_CLASS,false); //18534
		case uml::umlPackage::PROPERTY_ATTRIBUTE_INTERFACE:
		{
			std::shared_ptr<ecore::EObject> returnValue=getInterface().lock();
			return eEcoreAny(returnValue,uml::umlPackage::INTERFACE_CLASS); //18528
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISCOMPOSITE:
			return eAny(getIsComposite(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //18535
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISDERIVED:
			return eAny(getIsDerived(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //18536
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISDERIVEDUNION:
			return eAny(getIsDerivedUnion(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //18537
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISID:
			return eAny(getIsID(),ecore::ecorePackage::EBOOLEAN_CLASS,false); //18538
		case uml::umlPackage::PROPERTY_ATTRIBUTE_OPPOSITE:
			return eAny(getOpposite(),uml::umlPackage::PROPERTY_CLASS,false); //18539
		case uml::umlPackage::PROPERTY_ATTRIBUTE_OWNINGASSOCIATION:
		{
			std::shared_ptr<ecore::EObject> returnValue=getOwningAssociation().lock();
			return eEcoreAny(returnValue,uml::umlPackage::ASSOCIATION_CLASS); //18540
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_QUALIFIER:
			return eEcoreContainerAny(getQualifier(),uml::umlPackage::PROPERTY_CLASS); //18532
		case uml::umlPackage::PROPERTY_ATTRIBUTE_REDEFINEDPROPERTY:
			return eEcoreContainerAny(getRedefinedProperty(),uml::umlPackage::PROPERTY_CLASS); //18541
		case uml::umlPackage::PROPERTY_ATTRIBUTE_SUBSETTEDPROPERTY:
			return eEcoreContainerAny(getSubsettedProperty(),uml::umlPackage::PROPERTY_CLASS); //18542
	}
	std::shared_ptr<Any> result;
	result = ConnectableElementImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = DeploymentTargetImpl::eGet(featureID, resolve, coreType);
	if (result != nullptr && !result->isEmpty())
	{
		return result;
	}
	result = StructuralFeatureImpl::eGet(featureID, resolve, coreType);
	return result;
}

bool PropertyImpl::internalEIsSet(int featureID) const
{
	switch(featureID)
	{
		case uml::umlPackage::PROPERTY_ATTRIBUTE_AGGREGATION:
			return m_aggregation != uml::AggregationKind::NONE;; //18530
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ASSOCIATION:
			return getAssociation() != nullptr; //18543
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ASSOCIATIONEND:
			return getAssociationEnd().lock() != nullptr; //18531
		case uml::umlPackage::PROPERTY_ATTRIBUTE_CLASS:
			return getClass().lock() != nullptr; //18533
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DATATYPE:
			return getDatatype().lock() != nullptr; //18527
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DEFAULT:
			return getDefault() != ""; //18529
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:
			return getDefaultValue() != nullptr; //18534
		case uml::umlPackage::PROPERTY_ATTRIBUTE_INTERFACE:
			return getInterface().lock() != nullptr; //18528
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISCOMPOSITE:
			return getIsComposite() != false; //18535
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISDERIVED:
			return getIsDerived() != false; //18536
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISDERIVEDUNION:
			return getIsDerivedUnion() != false; //18537
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISID:
			return getIsID() != false; //18538
		case uml::umlPackage::PROPERTY_ATTRIBUTE_OPPOSITE:
			return getOpposite() != nullptr; //18539
		case uml::umlPackage::PROPERTY_ATTRIBUTE_OWNINGASSOCIATION:
			return getOwningAssociation().lock() != nullptr; //18540
		case uml::umlPackage::PROPERTY_ATTRIBUTE_QUALIFIER:
			return getQualifier() != nullptr; //18532
		case uml::umlPackage::PROPERTY_ATTRIBUTE_REDEFINEDPROPERTY:
			return getRedefinedProperty() != nullptr; //18541
		case uml::umlPackage::PROPERTY_ATTRIBUTE_SUBSETTEDPROPERTY:
			return getSubsettedProperty() != nullptr; //18542
	}
	bool result = false;
	result = ConnectableElementImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = DeploymentTargetImpl::internalEIsSet(featureID);
	if (result)
	{
		return result;
	}
	result = StructuralFeatureImpl::internalEIsSet(featureID);
	return result;
}

bool PropertyImpl::eSet(int featureID, std::shared_ptr<Any> newValue)
{
	switch(featureID)
	{
		case uml::umlPackage::PROPERTY_ATTRIBUTE_AGGREGATION:
		{
			try
			{
				uml::AggregationKind _aggregation = newValue->get<uml::AggregationKind>();
				setAggregation(_aggregation); //18530
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'aggregation'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ASSOCIATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Association> _association = std::dynamic_pointer_cast<uml::Association>(eObject);
					if(_association)
					{
						setAssociation(_association); //18543
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'association'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'association'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ASSOCIATIONEND:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Property> _associationEnd = std::dynamic_pointer_cast<uml::Property>(eObject);
					if(_associationEnd)
					{
						setAssociationEnd(_associationEnd); //18531
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'associationEnd'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'associationEnd'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_CLASS:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Class> _class = std::dynamic_pointer_cast<uml::Class>(eObject);
					if(_class)
					{
						setClass(_class); //18533
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'class'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'class'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DATATYPE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::DataType> _datatype = std::dynamic_pointer_cast<uml::DataType>(eObject);
					if(_datatype)
					{
						setDatatype(_datatype); //18527
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'datatype'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'datatype'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DEFAULT:
		{
			try
			{
				std::string _default = newValue->get<std::string>();
				setDefault(_default); //18529
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'default'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_DEFAULTVALUE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::ValueSpecification> _defaultValue = std::dynamic_pointer_cast<uml::ValueSpecification>(eObject);
					if(_defaultValue)
					{
						setDefaultValue(_defaultValue); //18534
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'defaultValue'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'defaultValue'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_INTERFACE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Interface> _interface = std::dynamic_pointer_cast<uml::Interface>(eObject);
					if(_interface)
					{
						setInterface(_interface); //18528
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'interface'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'interface'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISCOMPOSITE:
		{
			try
			{
				bool _isComposite = newValue->get<bool>();
				setIsComposite(_isComposite); //18535
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isComposite'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISDERIVED:
		{
			try
			{
				bool _isDerived = newValue->get<bool>();
				setIsDerived(_isDerived); //18536
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isDerived'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISDERIVEDUNION:
		{
			try
			{
				bool _isDerivedUnion = newValue->get<bool>();
				setIsDerivedUnion(_isDerivedUnion); //18537
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isDerivedUnion'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_ISID:
		{
			try
			{
				bool _isID = newValue->get<bool>();
				setIsID(_isID); //18538
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for feature 'isID'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_OPPOSITE:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Property> _opposite = std::dynamic_pointer_cast<uml::Property>(eObject);
					if(_opposite)
					{
						setOpposite(_opposite); //18539
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'opposite'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'opposite'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_OWNINGASSOCIATION:
		{
			std::shared_ptr<ecore::EcoreAny> ecoreAny = std::dynamic_pointer_cast<ecore::EcoreAny>(newValue);
			if(ecoreAny)
			{
				try
				{
					std::shared_ptr<ecore::EObject> eObject = ecoreAny->getAsEObject();
					std::shared_ptr<uml::Association> _owningAssociation = std::dynamic_pointer_cast<uml::Association>(eObject);
					if(_owningAssociation)
					{
						setOwningAssociation(_owningAssociation); //18540
					}
					else
					{
						throw "Invalid argument";
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreAny' for feature 'owningAssociation'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreAny' for feature 'owningAssociation'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_QUALIFIER:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<uml::Property>> _qualifier = getQualifier();
	
						for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
						{
							std::shared_ptr<uml::Property> valueToAdd = std::dynamic_pointer_cast<uml::Property>(anEObject);
	
							if (valueToAdd)
							{
								if(_qualifier->find(valueToAdd) == -1)
								{
									_qualifier->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'qualifier'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'qualifier'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_REDEFINEDPROPERTY:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<uml::Property>> _redefinedProperty = getRedefinedProperty();
	
						for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
						{
							std::shared_ptr<uml::Property> valueToAdd = std::dynamic_pointer_cast<uml::Property>(anEObject);
	
							if (valueToAdd)
							{
								if(_redefinedProperty->find(valueToAdd) == -1)
								{
									_redefinedProperty->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'redefinedProperty'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'redefinedProperty'. Failed to set feature!")
				return false;
			}
		return true;
		}
		case uml::umlPackage::PROPERTY_ATTRIBUTE_SUBSETTEDPROPERTY:
		{
			std::shared_ptr<ecore::EcoreContainerAny> ecoreContainerAny = std::dynamic_pointer_cast<ecore::EcoreContainerAny>(newValue);
			if(ecoreContainerAny)
			{
				try
				{
					std::shared_ptr<Bag<ecore::EObject>> eObjectList = ecoreContainerAny->getAsEObjectContainer();
	
					if(eObjectList)
					{
						std::shared_ptr<Bag<uml::Property>> _subsettedProperty = getSubsettedProperty();
	
						for(const std::shared_ptr<ecore::EObject> anEObject: *eObjectList)
						{
							std::shared_ptr<uml::Property> valueToAdd = std::dynamic_pointer_cast<uml::Property>(anEObject);
	
							if (valueToAdd)
							{
								if(_subsettedProperty->find(valueToAdd) == -1)
								{
									_subsettedProperty->add(valueToAdd);
								}
								//else, valueToAdd is already present so it won't be added again
							}
							else
							{
								throw "Invalid argument";
							}
						}
					}
				}
				catch(...)
				{
					DEBUG_ERROR("Invalid type stored in 'ecore::ecoreContainerAny' for feature 'subsettedProperty'. Failed to set feature!")
					return false;
				}
			}
			else
			{
				DEBUG_ERROR("Invalid instance of 'ecore::ecoreContainerAny' for feature 'subsettedProperty'. Failed to set feature!")
				return false;
			}
		return true;
		}
	}

	bool result = false;
	result = ConnectableElementImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = DeploymentTargetImpl::eSet(featureID, newValue);
	if (result)
	{
		return result;
	}
	result = StructuralFeatureImpl::eSet(featureID, newValue);
	return result;
}

//*********************************
// EOperation Invoke
//*********************************
std::shared_ptr<Any> PropertyImpl::eInvoke(int operationID, std::shared_ptr<Bag<Any>> arguments)
{
	std::shared_ptr<Any> result;
 
  	switch(operationID)
	{
		// uml::Property::getOtherEnd() : uml::Property: 3759990426
		case umlPackage::PROPERTY_OPERATION_GETOTHEREND:
		{
			result = eEcoreAny(this->getOtherEnd(), uml::umlPackage::PROPERTY_CLASS);
			break;
		}
		// uml::Property::isAttribute() : bool: 2655051450
		case umlPackage::PROPERTY_OPERATION_ISATTRIBUTE:
		{
			result = eAny(this->isAttribute(), 0, false);
			break;
		}
		// uml::Property::isComposite() : bool: 656738949
		case umlPackage::PROPERTY_OPERATION_ISCOMPOSITE:
		{
			result = eAny(this->isComposite(), 0, false);
			break;
		}
		// uml::Property::isNavigable() : bool: 2533598543
		case umlPackage::PROPERTY_OPERATION_ISNAVIGABLE:
		{
			result = eAny(this->isNavigable(), 0, false);
			break;
		}
		// uml::Property::isSetDefault() : bool: 3535385199
		case umlPackage::PROPERTY_OPERATION_ISSETDEFAULT:
		{
			result = eAny(this->isSetDefault(), 0, false);
			break;
		}
		// uml::Property::setBooleanDefaultValue(bool): 3743362958
		case umlPackage::PROPERTY_OPERATION_SETBOOLEANDEFAULTVALUE_BOOLEAN:
		{
			//Retrieve input parameter 'value'
			//parameter 0
			bool incoming_param_value;
			Bag<Any>::const_iterator incoming_param_value_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_value = (*incoming_param_value_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'value'. Failed to invoke operation 'setBooleanDefaultValue'!")
				return nullptr;
			}
		
			this->setBooleanDefaultValue(incoming_param_value);
			break;
		}
		// uml::Property::setIntegerDefaultValue(int): 2377444691
		case umlPackage::PROPERTY_OPERATION_SETINTEGERDEFAULTVALUE_INTEGER:
		{
			//Retrieve input parameter 'value'
			//parameter 0
			int incoming_param_value;
			Bag<Any>::const_iterator incoming_param_value_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_value = (*incoming_param_value_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'value'. Failed to invoke operation 'setIntegerDefaultValue'!")
				return nullptr;
			}
		
			this->setIntegerDefaultValue(incoming_param_value);
			break;
		}
		// uml::Property::setIsNavigable(bool): 3193042677
		case umlPackage::PROPERTY_OPERATION_SETISNAVIGABLE_BOOLEAN:
		{
			//Retrieve input parameter 'isNavigable'
			//parameter 0
			bool incoming_param_isNavigable;
			Bag<Any>::const_iterator incoming_param_isNavigable_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_isNavigable = (*incoming_param_isNavigable_arguments_citer)->get<bool>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'isNavigable'. Failed to invoke operation 'setIsNavigable'!")
				return nullptr;
			}
		
			this->setIsNavigable(incoming_param_isNavigable);
			break;
		}
		// uml::Property::setNullDefaultValue(): 3954861497
		case umlPackage::PROPERTY_OPERATION_SETNULLDEFAULTVALUE:
		{
			this->setNullDefaultValue();
			break;
		}
		// uml::Property::setRealDefaultValue(double): 2801791145
		case umlPackage::PROPERTY_OPERATION_SETREALDEFAULTVALUE_REAL:
		{
			//Retrieve input parameter 'value'
			//parameter 0
			double incoming_param_value;
			Bag<Any>::const_iterator incoming_param_value_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_value = (*incoming_param_value_arguments_citer)->get<double>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'value'. Failed to invoke operation 'setRealDefaultValue'!")
				return nullptr;
			}
		
			this->setRealDefaultValue(incoming_param_value);
			break;
		}
		// uml::Property::setStringDefaultValue(std::string): 142360535
		case umlPackage::PROPERTY_OPERATION_SETSTRINGDEFAULTVALUE_STRING:
		{
			//Retrieve input parameter 'value'
			//parameter 0
			std::string incoming_param_value;
			Bag<Any>::const_iterator incoming_param_value_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_value = (*incoming_param_value_arguments_citer)->get<std::string>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'value'. Failed to invoke operation 'setStringDefaultValue'!")
				return nullptr;
			}
		
			this->setStringDefaultValue(incoming_param_value);
			break;
		}
		// uml::Property::setUnlimitedNaturalDefaultValue(int): 1546322219
		case umlPackage::PROPERTY_OPERATION_SETUNLIMITEDNATURALDEFAULTVALUE_UNLIMITEDNATURAL:
		{
			//Retrieve input parameter 'value'
			//parameter 0
			int incoming_param_value;
			Bag<Any>::const_iterator incoming_param_value_arguments_citer = std::next(arguments->begin(), 0);
			try
			{
				incoming_param_value = (*incoming_param_value_arguments_citer)->get<int>();
			}
			catch(...)
			{
				DEBUG_ERROR("Invalid type stored in 'Any' for parameter 'value'. Failed to invoke operation 'setUnlimitedNaturalDefaultValue'!")
				return nullptr;
			}
		
			this->setUnlimitedNaturalDefaultValue(incoming_param_value);
			break;
		}
		// uml::Property::subsettingContext() : uml::Type[*]: 2305810549
		case umlPackage::PROPERTY_OPERATION_SUBSETTINGCONTEXT:
		{
			std::shared_ptr<Bag<uml::Type>> resultList = this->subsettingContext();
			return eEcoreContainerAny(resultList,uml::umlPackage::TYPE_CLASS);
			break;
		}
		// uml::Property::unsetDefault(): 1637600012
		case umlPackage::PROPERTY_OPERATION_UNSETDEFAULT:
		{
			this->unsetDefault();
			break;
		}

		default:
		{
			// call superTypes
			result = DeploymentTargetImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			result = ConnectableElementImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			result = StructuralFeatureImpl::eInvoke(operationID, arguments);
			if (result && !result->isEmpty())
				break;
			break;
		}
  	}

	return result;
}

std::shared_ptr<uml::Property> PropertyImpl::getThisPropertyPtr() const
{
	return m_thisPropertyPtr.lock();
}
void PropertyImpl::setThisPropertyPtr(std::weak_ptr<uml::Property> thisPropertyPtr)
{
	m_thisPropertyPtr = thisPropertyPtr;
	setThisConnectableElementPtr(thisPropertyPtr);
	setThisDeploymentTargetPtr(thisPropertyPtr);
	setThisStructuralFeaturePtr(thisPropertyPtr);
}


