// DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN
// @generator: ecore4cpp::generator::main::generateBuildFile

description 'Build task for project: ocl'

task runCommandCompileOcl(type:Exec) {
	commandLine 'cmd', '/c', 'gradlew src_gen:compileOclSrc'
	mustRunAfter =  [
		'generateOcl'
	
		, getRootProject().getTasksByName('compileEcore', true)
	]
}

task runCommandGenerateOcl(type:Exec) {
	def modelPath = file('.' + File.separator + 'model' + File.separator + 'ocl.ecore')
	commandLine 'cmd', '/c', 'gradlew :src:common:universalGradleTasks:generateModel -PModel='+modelPath.absolutePath
}

task generateOcl() {
	group 'ocl'	
	description 'generate C++ code of ocl.ecore model ocl' 
 
	def buildFile = file('model'+ File.separator +'build.gradle')
	if(!buildFile.exists())
	{
		dependsOn 'runCommandGenerateOcl'
	}
	else
	{
		dependsOn 'model:generateOclModel'
	}
}

task compileOcl() {
	group 'ocl'
	description 'compile ocl' 

	def buildFile = file('src_gen'+ File.separator + 'build.gradle')

	if(!buildFile.exists()){ 
		dependsOn 'generateOcl'
		dependsOn 'runCommandCompileOcl'
	}
	else
	{
		dependsOn 'generateOcl'
		dependsOn 'src_gen:compileOclSrc'
	} 
	mustRunAfter =  [
		'generateOcl'
	
		, getRootProject().getTasksByName('compileEcore', true)
	]
}

task buildOcl() {
	group 'ocl'
	description 'build ocl'

	dependsOn 'generateOcl'
	dependsOn 'compileOcl'

	dependsOn getRootProject().getTasksByName('buildEcore', true)
}
