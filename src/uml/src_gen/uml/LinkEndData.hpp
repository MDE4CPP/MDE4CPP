//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_LINKENDDATA_HPP
#define UML_LINKENDDATA_HPP

#include <map>
#include <list>
#include <memory>
#include <string>


// forward declarations
template<class T, class ... U> class Subset;


class AnyObject;
typedef std::shared_ptr<AnyObject> Any;

//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace uml
{
	class umlFactory;
}

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class InputPin;
	class Property;
	class QualifierValue;
}

// base class includes
#include "uml/Element.hpp"

// enum includes


//Includes from codegen annotation

//*********************************
namespace uml 
{
	/*!
	LinkEndData is an Element that identifies on end of a link to be read or written by a LinkAction. As a link (that is not a link object) cannot be passed as a runtime value to or from an Action, it is instead identified by its end objects and qualifier values, if any. A LinkEndData instance provides these values for a single Association end.
	<p>From package UML::Actions.</p>
	*/
	
	class LinkEndData:virtual public Element
	{
		public:
 			LinkEndData(const LinkEndData &) {}
			LinkEndData& operator=(LinkEndData const&) = delete;

		protected:
			LinkEndData(){}


		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~LinkEndData() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			Returns all the InputPins referenced by this LinkEndData. By default this includes the value and qualifier InputPins, but subclasses may override the operation to add other InputPins.
			result = (value->asBag()->union(qualifier.value))
			<p>From package UML::Actions.</p>
			*/
			 
			virtual std::shared_ptr<Bag<uml::InputPin> > allPins() = 0;
			
			/*!
			The value InputPin is not also the qualifier value InputPin.
			value->excludesAll(qualifier.value)
			*/
			 
			virtual bool end_object_input_pin(Any diagnostics,std::map <  Any ,  Any > context) = 0;
			
			/*!
			The multiplicity of the value InputPin must be 1..1.
			value<>null implies value.is(1,1)
			*/
			 
			virtual bool multiplicity(Any diagnostics,std::map <  Any ,  Any > context) = 0;
			
			/*!
			The Property must be an Association memberEnd.
			end.association <> null
			*/
			 
			virtual bool property_is_association_end(Any diagnostics,std::map <  Any ,  Any > context) = 0;
			
			/*!
			The qualifiers must be qualifiers of the Association end.
			end.qualifier->includesAll(qualifier.qualifier)
			*/
			 
			virtual bool qualifiers(Any diagnostics,std::map <  Any ,  Any > context) = 0;
			
			/*!
			The type of the value InputPin conforms to the type of the Association end.
			value<>null implies value.type.conformsTo(end.type)
			*/
			 
			virtual bool same_type(Any diagnostics,std::map <  Any ,  Any > context) = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			The Association end for which this LinkEndData specifies values.
			<p>From package UML::Actions.</p>
			*/
			
			virtual std::shared_ptr<uml::Property > getEnd() const = 0;
			
			/*!
			The Association end for which this LinkEndData specifies values.
			<p>From package UML::Actions.</p>
			*/
			
			virtual void setEnd(std::shared_ptr<uml::Property> _end) = 0;
			
			/*!
			A set of QualifierValues used to provide values for the qualifiers of the end.
			<p>From package UML::Actions.</p>
			*/
			
			virtual std::shared_ptr<Subset<uml::QualifierValue, uml::Element>> getQualifier() const = 0;
			
			
			/*!
			The InputPin that provides the specified value for the given end. This InputPin is omitted if the LinkEndData specifies the "open" end for a ReadLinkAction.
			<p>From package UML::Actions.</p>
			*/
			
			virtual std::shared_ptr<uml::InputPin > getValue() const = 0;
			
			/*!
			The InputPin that provides the specified value for the given end. This InputPin is omitted if the LinkEndData specifies the "open" end for a ReadLinkAction.
			<p>From package UML::Actions.</p>
			*/
			
			virtual void setValue(std::shared_ptr<uml::InputPin> _value) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			The Association end for which this LinkEndData specifies values.
			<p>From package UML::Actions.</p>
			*/
			
			std::shared_ptr<uml::Property > m_end;/*!
			A set of QualifierValues used to provide values for the qualifiers of the end.
			<p>From package UML::Actions.</p>
			*/
			
			mutable std::shared_ptr<Subset<uml::QualifierValue, uml::Element>> m_qualifier;/*!
			The InputPin that provides the specified value for the given end. This InputPin is omitted if the LinkEndData specifies the "open" end for a ReadLinkAction.
			<p>From package UML::Actions.</p>
			*/
			
			std::shared_ptr<uml::InputPin > m_value;

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p>
			*/
			
			virtual std::shared_ptr<Union<uml::Element>> getOwnedElement() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: UML_LINKENDDATA_HPP */
