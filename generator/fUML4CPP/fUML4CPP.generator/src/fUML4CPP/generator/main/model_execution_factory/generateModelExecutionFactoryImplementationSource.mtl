[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateModelExecutionFactoryImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::helpers::fUMLCollectionHelper /]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]


[template public generateModelExecutionFactoryImplementationSource(aPackage : Package)
{
packageName : String = aPackage.getPackageName().sanitize(); 
originalName : String = aPackage.generateNamespacePath(false);
}]
[file (originalName.concat('Exec/impl/') + packageName.concat('ExecutionFactoryImpl.cpp'), false, 'UTF-8')]
#include "[packageName/]ExecutionFactoryImpl.hpp"
#include <iostream>

[defineDebugMacro()/]

//Model includes
[for (activityPackage : Package | aPackage.collectActivitiesOwnedByPackage().getNearestPackage()->asSet()->sortedBy(myQualifiedName()))]
#include "[activityPackage.generateNamespacePath(false)/]/[activityPackage.getPackageName()/]Package.hpp"
[/for]

//fUML includes
#include "fUML/Semantics/Actions/ActionsFactory.hpp"
#include "fUML/Semantics/Activities/ActivitiesFactory.hpp"
#include "fUML/Semantics/Activities/ActivityExecution.hpp"
#include "fUML/Semantics/Activities/ActivityNodeActivationGroup.hpp"
#include "fUML/Semantics/Loci/Locus.hpp"
[for (anIncludeString : String | 
	aPackage.collectActivitiesOwnedByPackage().node
	->addAll(aPackage.collectActivitiesOwnedByPackage().node->filter(Action).input)
	->addAll(aPackage.collectActivitiesOwnedByPackage().node->filter(Action).output)
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().node)
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().node->filter(Action).input)
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().node->filter(Action).output)
	.generateCorrespondingActivityNodeActivationInclude()->asSet()) before('//ActivityNodeActivation includes\n')]
[anIncludeString/]
[/for]
[if (aPackage.getRootPackage().allOwnedElements()->filter(ActivityEdge)->size() > 0)]
//ActivityEdgeInstance include
#include "fUML/Semantics/Activities/ActivityEdgeInstance.hpp"
[/if]

//UML includes
#include "uml/Activity.hpp"
[for (anIncludeString : String | 
	aPackage.collectActivitiesOwnedByPackage().node
	->addAll(aPackage.collectActivitiesOwnedByPackage().node->filter(Action).input)
	->addAll(aPackage.collectActivitiesOwnedByPackage().node->filter(Action).output)
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().node)
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().node->filter(Action).input)
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().node->filter(Action).output)
	.generateCorrespondingActivityNodeInclude()->asSet()) before('//ActivityNode includes\n')]
[anIncludeString/]
[/for]
[for (anIncludeString : String | 
	aPackage.collectActivitiesOwnedByPackage().edge
	->addAll(aPackage.collectStructuredActivityNodesOwnedByPackage().edge)
	.generateCorrespondingActivityEdgeInclude()->asSet()) before('//ActivityEdge includes\n')]
[anIncludeString/]
[/for]

using namespace [aPackage.generateNamespace(false)/];

//*********************************
// Constructor / Destructor
//*********************************
[packageName/]ExecutionFactoryImpl::[packageName/]ExecutionFactoryImpl()
{
}

[packageName/]ExecutionFactoryImpl::~[packageName/]ExecutionFactoryImpl()
{
}

std::shared_ptr<fUML::Semantics::CommonBehavior::Execution> [packageName/]ExecutionFactoryImpl::createExecution(std::shared_ptr<uml::Behavior> behavior, std::shared_ptr<uml::Element> context)
{
[let activitiesOwnedByPackage : Set(Activity) = aPackage.collectActivitiesOwnedByPackage()->sortedBy(myQualifiedName())->asSet()]
[if (activitiesOwnedByPackage->size() > 0)]
	[for (anActivity : Activity | activitiesOwnedByPackage)  before('\tswitch(behavior->_getID())\n\t{\n') after('\t}\n')]
		case [anActivity.getNearestPackage().generateNamespace(true)/]::[anActivity.getNearestPackage().getPackageName()/]Package::[anActivity.getMemberName().toUpperCase()/]:
		{
			if(!m_[anActivity.memberName()/]ExecutionPrototype)
			{
				this->create[anActivity.memberName().toUpperFirst()/]ExecutionPrototype();
			}
			return m_[anActivity.memberName()/]ExecutionPrototype;
		}
	[/for]
[/if]
[/let]

	return nullptr;
}

[for (anActivity : Activity | aPackage.collectActivitiesOwnedByPackage())]
[comment]
std::shared_ptr<fUML::Semantics::Activities::ActivityExecution> [packageName/]ExecutionFactoryImpl::get[anActivity.memberName().toUpperFirst()/]ExecutionPrototype()
{
	if(!m_[anActivity.memberName()/]ExecutionPrototype)
	{
		this->create[anActivity.memberName().toUpperFirst()/]ExecutionPrototype();
	}

	return m_[anActivity.memberName()/]ExecutionPrototype;
}
[/comment]
void [packageName/]ExecutionFactoryImpl::create[anActivity.memberName().toUpperFirst()/]ExecutionPrototype()
{
	[anActivity.generateActivityExecutionPrototypeCreatorBody()/]
}
[/for]

void [packageName/]ExecutionFactoryImpl::setThisExecutionFactoryPtr(std::weak_ptr</*PSCS::Semantics::Loci::CS_ExecutionFactory*/fUML::Semantics::Loci::ExecutionFactory> thisExecutionFactoryPtr)
{
	/*PSCS::Semantics::Loci::CS_ExecutionFactoryImpl::setThisExecutionFactoryPtr(thisExecutionFactoryPtr)*/ fUML::Semantics::Loci::ExecutionFactoryImpl::setThisExecutionFactoryPtr(thisExecutionFactoryPtr);
}
[/file]
[/template]



[template private generateActivityExecutionPrototypeCreatorBody(anActivity : Activity) post(trim())
{
	activityExecutionPrototypeMemberName : String = 'm_' + anActivity.memberName() + 'ExecutionPrototype';
}]
std::shared_ptr<uml::Activity> activity = [anActivity.generatePackageGetterCall()/];
[activityExecutionPrototypeMemberName/] = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityExecution();
[activityExecutionPrototypeMemberName/]->getTypes()->push_back(activity);

this->getLocus().lock()->add([activityExecutionPrototypeMemberName/]);
[activityExecutionPrototypeMemberName/]->setLocus(this->getLocus().lock());

std::shared_ptr<fUML::Semantics::Activities::ActivityNodeActivationGroup> newActivationGroup=fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityNodeActivationGroup_as_activationGroup_in_ActivityExecution([activityExecutionPrototypeMemberName/]);

[for (anActivityNode : ActivityNode | anActivity.node) before('//Create ActivityNodeActivations\n')]
[anActivityNode.generateActivityNodeActivationCreation()/]

[/for]
[for (anActivityEdge : ActivityEdge | anActivity.edge) before('//Create ActivityEdgeInstances\n')]
[anActivityEdge.generateActivityEdgeInstanceCreation()/]

[/for]
[/template]

[template private generateActivityNodeActivationCreation(anActivityNode : ActivityNode)  post(trim())]
//Create ActivityNodeActivation for [anActivityNode.eClass().name/] '[anActivityNode.metamodelElementName()/]'
DEBUG_INFO("Creating [anActivityNode.eClass().name/]Activation for [anActivityNode.eClass().name/] '[anActivityNode.metamodelElementName()/]'.")
std::shared_ptr<[anActivityNode.generateCorrespondingActivityNodeActivationCPPType()/]> [anActivityNode.getActivityNodeActivationVariableName()/] = [anActivityNode.generateCorrespondingFactoryNamespace()/]::eInstance()->create[anActivityNode.eClass().name/]Activation();
[anActivityNode.getActivityNodeActivationVariableName()/]->setNode([anActivityNode.generatePackageGetterCall()/]);
[anActivityNode.getActivityNodeActivationVariableName()/]->setRunning(false);
newActivationGroup->addNodeActivation([anActivityNode.getActivityNodeActivationVariableName()/]);
[if (anActivityNode.oclIsKindOf(Action))]
[let anAction : Action = anActivityNode.oclAsType(Action)]
	[for (aPin : Pin | anAction.input->addAll(anAction.output))]
	//Create PinActivation for [aPin.eClass().name/] '[anAction.name/]::[aPin.name/]'
	std::shared_ptr<[aPin.generateCorrespondingActivityNodeActivationCPPType()/]> [aPin.getActivityNodeActivationVariableName()/] = [aPin.generateCorrespondingFactoryNamespace()/]::eInstance()->create[aPin.eClass().name/]Activation();
	[aPin.getActivityNodeActivationVariableName()/]->setNode([aPin.generatePackageGetterCall()/]);
	[aPin.getActivityNodeActivationVariableName()/]->setRunning(false);
	[anActivityNode.getActivityNodeActivationVariableName()/]->addPinActivation([aPin.getActivityNodeActivationVariableName()/]);
	newActivationGroup->addNodeActivation([aPin.getActivityNodeActivationVariableName()/]);
	[/for]
	[if(anAction.oclIsKindOf(StructuredActivityNode))]
	[let aStructuredActivityNode : StructuredActivityNode = anAction.oclAsType(StructuredActivityNode)]
		[for (aNestedActivityNode : ActivityNode | aStructuredActivityNode.node) before('//Create nested ActivityNodeActivations\n')]
	[aNestedActivityNode.generateActivityNodeActivationCreation()/]
		[/for]
		[for (aNestedActivityEdge : ActivityEdge | aStructuredActivityNode.edge) before('//Create nested ActivityEdgeInstances\n')]
	[aNestedActivityEdge.generateActivityEdgeInstanceCreation()/]
		[/for]
	[/let]
	[/if]
[/let]
[/if]
[/template]

[template private generateActivityEdgeInstanceCreation(anActivityEdge : ActivityEdge)  post(trim())]
//Create ActivityEdgeInstance for [anActivityEdge.eClass().name/] '[anActivityEdge.metamodelElementName()/]'
DEBUG_INFO("Creating EdgeInstance for [anActivityEdge.eClass().name/] '[anActivityEdge.metamodelElementName()/]'.")
std::shared_ptr<[anActivityEdge.generateCorrespondingActivityEdgeInstanceCPPType()/]> [anActivityEdge.getEdgeInstanceVariableName()/] = fUML::Semantics::Activities::ActivitiesFactory::eInstance()->createActivityEdgeInstance();
[anActivityEdge.getEdgeInstanceVariableName()/]->setEdge([anActivityEdge.generatePackageGetterCall()/]);
newActivationGroup->addEdgeInstance([anActivityEdge.getEdgeInstanceVariableName()/]);
[anActivityEdge.source.getActivityNodeActivationVariableName()/]->addOutgoingEdge([anActivityEdge.getEdgeInstanceVariableName()/]);
[anActivityEdge.target.getActivityNodeActivationVariableName()/]->addIncomingEdge([anActivityEdge.getEdgeInstanceVariableName()/]);
[/template]

[comment]
The following templates return the C++ type of the corresponding ActivityNodeActivation class for a given ActivityNode
[/comment]
[comment ControlNodes /]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(InitialNode))]
fUML::Semantics::Activities::InitialNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(FlowFinalNode))]
fUML::Semantics::Activities::FlowFinalNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ActivityFinalNode))]
fUML::Semantics::Activities::ActivityFinalNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ForkNode))]
fUML::Semantics::Activities::ForkNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(JoinNode))]
fUML::Semantics::Activities::JoinNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(MergeNode))]
fUML::Semantics::Activities::MergeNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(DecisionNode))]
fUML::Semantics::Activities::DecisionNodeActivation
[/template]

[comment ObjectNodes /]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ActivityParameterNode))]
fUML::Semantics::Activities::ActivityParameterNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsTypeOf(CentralBufferNode))]
fUML::Semantics::Activities::CentralBufferNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsTypeOf(DataStoreNode))]
fUML::Semantics::Activities::DataStoreNodeActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(InputPin))]
fUML::Semantics::Actions::InputPinActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(OutputPin))]
fUML::Semantics::Actions::OutputPinActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ExpansionNode))]
fUML::Semantics::Actions::ExpansionNodeActivation
[/template]

[comment Actions /]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(CallOperationAction))]
fUML::Semantics::Actions::CallOperationActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(CallBehaviorAction))]
fUML::Semantics::Actions::CallBehaviorActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(CreateObjectAction))]
fUML::Semantics::Actions::CreateObjectActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(DestroyObjectAction))]
fUML::Semantics::Actions::DestroyObjectActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ReadSelfAction))]
fUML::Semantics::Actions::ReadSelfActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ValueSpecificationAction))]
fUML::Semantics::Actions::ValueSpecificationActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ReadStructuralFeatureAction))]
fUML::Semantics::Actions::ReadStructuralFeatureActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(AddStructuralFeatureValueAction))]
fUML::Semantics::Actions::AddStructuralFeatureValueActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(RemoveStructuralFeatureValueAction))]
fUML::Semantics::Actions::RemoveStructuralFeatureValueActionActivation
[/template]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ClearStructuralFeatureAction))]
fUML::Semantics::Actions::ClearStructuralFeatureActionActivation
[/template]

[comment Structured Activity Nodes /]
[template private generateCorrespondingActivityNodeActivationCPPType(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(ExpansionRegion))]
fUML::Semantics::Actions::ExpansionRegionActivation
[/template]

[comment]
The following templates return the include path of the corresponding ActivityNode as well as ActivityNodeActivation class for a given ActivityNode
[/comment]
[template private generateCorrespondingActivityNodeActivationInclude(anActivityNode : ActivityNode)]
#include "[anActivityNode.generateCorrespondingActivityNodeActivationCPPType().substituteAll('::', '/')/].hpp"
[/template]
[template private generateCorrespondingActivityNodeInclude(anActivityNode : ActivityNode)]
#include "uml/[anActivityNode.eClass().name/].hpp"
[/template]

[comment]
The following template returns the C++ type of the corresponding ActivityEdgeInstance class for a given ActivityEdge
[/comment]
[template private generateCorrespondingActivityEdgeInstanceCPPType(anActivityEdge : ActivityEdge)]
fUML::Semantics::Activities::ActivityEdgeInstance
[/template]

[comment]
The following templates return the include path of the corresponding ActivityEdge as well as ActivityEdgeInstance class for a given ActivityEdge
[/comment]
[template private generateCorrespondingActivityEdgeInstanceInclude(anActivityEdge : ActivityEdge)]
#include "[anActivityEdge.generateCorrespondingActivityEdgeInstanceCPPType().substitute('::', '/')/].hpp"
[/template]
[template private generateCorrespondingActivityEdgeInclude(anActivityEdge : ActivityEdge)]
#include "uml/[anActivityEdge.eClass().name/].hpp"
[/template]


[template private getActivityNodeActivationVariableName(anActivityNode : ActivityNode) ? (anActivityNode.oclIsKindOf(Pin))]
[anActivityNode.memberName()/]_[anActivityNode.eClass().name/]Activation
[/template]

[template private getActivityNodeActivationVariableName(anActivityNode : ActivityNode)]
[anActivityNode.memberName()/]_[anActivityNode.eClass().name/]Activation
[/template]


[comment]
The following templates return the namespace name of the corresponding fUML subpackage Factory class for a given ActivityNode
[/comment]
[comment Actions package /]
[template private generateCorrespondingFactoryNamespace(anActivityNode : ActivityNode)
? (
	anActivityNode.oclIsKindOf(Action) or
	anActivityNode.oclIsKindOf(ExpansionNode) or
	anActivityNode.oclIsKindOf(StructuredActivityNode) or
	anActivityNode.oclIsKindOf(Pin)
)]
fUML::Semantics::Actions::ActionsFactory
[/template]

[comment Activities package /]
[template private generateCorrespondingFactoryNamespace(anActivityNode : ActivityNode)
? (
	anActivityNode.oclIsKindOf(ActivityFinalNode) or
	anActivityNode.oclIsKindOf(ActivityParameterNode) or
	anActivityNode.oclIsKindOf(CentralBufferNode) or
	anActivityNode.oclIsKindOf(DataStoreNode) or
	anActivityNode.oclIsKindOf(DecisionNode) or
	anActivityNode.oclIsKindOf(ForkNode) or
	anActivityNode.oclIsKindOf(FlowFinalNode) or
	anActivityNode.oclIsKindOf(InitialNode) or
	anActivityNode.oclIsKindOf(JoinNode) or
	anActivityNode.oclIsKindOf(MergeNode)
)]
fUML::Semantics::Activities::ActivitiesFactory
[/template]

[comment]
[query private getEdgeInstanceVariableName(anActivityEdge : ActivityEdge) : String = ('from_' + anActivityEdge.source.name + '_to_' + anActivityEdge.target.name + '_EdgeInstance').sanitize() /]
[/comment]

[query private getEdgeInstanceVariableName(anActivityEdge : ActivityEdge) : String = anActivityEdge.memberName() + '_EdgeInstance' /]