//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef OCL_VALUES_LOCALSNAPSHOT_HPP
#define OCL_VALUES_LOCALSNAPSHOT_HPP


#include <memory>
#include <string>
// forward declarations
template<class T> class Bag; 


//*********************************
// generated Includes
#include <map> // used for Persistence
#include <vector> // used for Persistence
namespace persistence
{
	namespace interfaces
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ocl
{
	class oclFactory;
}

//Forward Declaration for used types 
namespace ocl::Values 
{
	class NameValueBinding;
	class OclMessageValue;
}

// namespace macro header include
#include "ocl/ocl.hpp"



#include "ecore/EModelElement.hpp"


//*********************************
namespace ocl::Values 
{
	
	class OCL_API LocalSnapshot : virtual public ecore::EModelElement
	{
		public:
 			LocalSnapshot(const LocalSnapshot &) {}

		protected:
			LocalSnapshot(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~LocalSnapshot() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			virtual bool getIsPost() const = 0;
			virtual void setIsPost (bool _isPost)= 0;
			virtual bool getIsPre() const = 0;
			virtual void setIsPre (bool _isPre)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************
			virtual const std::shared_ptr<Bag<ocl::Values::NameValueBinding>>& getBindings() const = 0;
			virtual const std::shared_ptr<Bag<ocl::Values::OclMessageValue>>& getInputQ() const = 0;
			virtual const std::shared_ptr<Bag<ocl::Values::OclMessageValue>>& getOutputQ() const = 0;
			virtual const std::shared_ptr<ocl::Values::LocalSnapshot>& getPred() const = 0;
			virtual void setPred(const std::shared_ptr<ocl::Values::LocalSnapshot>&) = 0;
			virtual const std::shared_ptr<ocl::Values::LocalSnapshot>& getSucc() const = 0;
			virtual void setSucc(const std::shared_ptr<ocl::Values::LocalSnapshot>&) = 0;

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) = 0;
			virtual void resolveReferences(const int featureID, std::vector<std::shared_ptr<ecore::EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const = 0;

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			bool m_isPost= false;
			bool m_isPre= false;
			
			//*********************************
			// Reference Members
			//*********************************
			mutable std::shared_ptr<Bag<ocl::Values::NameValueBinding>> m_bindings;
			mutable std::shared_ptr<Bag<ocl::Values::OclMessageValue>> m_inputQ;
			mutable std::shared_ptr<Bag<ocl::Values::OclMessageValue>> m_outputQ;
			std::shared_ptr<ocl::Values::LocalSnapshot> m_pred;
			std::shared_ptr<ocl::Values::LocalSnapshot> m_succ;
	};
}
#endif /* end of include guard: OCL_VALUES_LOCALSNAPSHOT_HPP */
