//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CONTINUATION_HPP
#define UML_CONTINUATION_HPP


#include <memory>
#include <string>
// forward declarations


//*********************************
// generated Includes

//Forward Declaration for used types 
namespace uml 
{
	class Comment;
	class Dependency;
	class GeneralOrdering;
	class Interaction;
	class InteractionOperand;
	class Lifeline;
	class Namespace;
	class StringExpression;
}

// namespace macro header include
#include "uml/uml.hpp"

// base class includes
#include "uml/InteractionFragment.hpp"

// enum includes
#include "uml/VisibilityKind.hpp"



//*********************************
namespace uml 
{
	/*!
	A Continuation is a syntactic way to define continuations of different branches of an alternative CombinedFragment. Continuations are intuitively similar to labels representing intermediate points in a flow of control.
	<p>From package UML::Interactions.</p>
	*/
	
	class UML_API Continuation : virtual public InteractionFragment
	{
		public:
 			Continuation(const Continuation &) {}

		protected:
			Continuation(){}

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~Continuation() {}

			//*********************************
			// Operations
			//*********************************

			//*********************************
			// Attribute Getters & Setters
			//*********************************
			/*!
			True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual bool getSetting() const = 0;
			/*!
			True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.
			<p>From package UML::Interactions.</p>
			*/
			 
			virtual void setSetting (bool _setting)= 0;

			//*********************************
			// Reference Getters & Setters
			//*********************************

			//*********************************
			// Union Reference Getters
			//*********************************

			//*********************************
			// Container Getter
			//*********************************
			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			True: when the Continuation is at the end of the enclosing InteractionFragment and False when it is in the beginning.
			<p>From package UML::Interactions.</p>
			*/
			
			bool m_setting= true;
			
			//*********************************
			// Reference Members
			//*********************************
	};
}
#endif /* end of include guard: UML_CONTINUATION_HPP */
